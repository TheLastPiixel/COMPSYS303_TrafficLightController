
traffic_simulation.elf:     file format elf32-littlenios2
traffic_simulation.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00013538 memsz 0x00013538 flags r-x
    LOAD off    0x00014558 vaddr 0x00813558 paddr 0x00815248 align 2**12
         filesz 0x00001cf0 memsz 0x00001cf0 flags rw-
    LOAD off    0x00016f38 vaddr 0x00816f38 paddr 0x00816f38 align 2**12
         filesz 0x00000000 memsz 0x000001dc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012c48  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006cc  00812e8c  00812e8c  00013e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cf0  00813558  00815248  00014558  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001dc  00816f38  00816f38  00016f38  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00817114  00817114  00016248  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  00016248  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00016248  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011e8  00000000  00000000  00016270  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002e2a1  00000000  00000000  00017458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ba16  00000000  00000000  000456f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e1a7  00000000  00000000  0005110f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002a24  00000000  00000000  0005f2b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004426  00000000  00000000  00061cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018ebc  00000000  00000000  00066102  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0007efc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ac0  00000000  00000000  0007f020  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000847a6  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000847a9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000847ac  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000847ad  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  000847ae  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  000847b7  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  000847c0  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000004  00000000  00000000  000847c9  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000050  00000000  00000000  000847cd  2**0
                  CONTENTS, READONLY
 27 .jdi          00003538  00000000  00000000  0008481d  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000675c3  00000000  00000000  00087d55  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00812e8c l    d  .rodata	00000000 .rodata
00813558 l    d  .rwdata	00000000 .rwdata
00816f38 l    d  .bss	00000000 .bss
00817114 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../traffic_simulation_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
0080169c l     F .text	00000008 __fp_unlock
008016b0 l     F .text	0000019c __sinit.part.1
0080184c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
00813570 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 refill.c
008030bc l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00813012 l     O .rodata	00000010 zeroes.4404
0080592c l     F .text	000000bc __sbprintf
00813022 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00813133 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00805d48 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00813dbc l     O .rwdata	00000020 lc_ctype_charset
00813d9c l     O .rwdata	00000020 lc_message_charset
00813ddc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
008132d0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00809fd8 l     F .text	000000fc __sprint_r.part.0
00813404 l     O .rodata	00000010 blanks.4348
008133f4 l     O .rodata	00000010 zeroes.4349
0080b564 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080ed18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080ee24 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080ee50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080f0bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080f19c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080f288 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080f45c l     F .text	0000003c alt_get_errno
0080f498 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0080f6b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00815238 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080faa0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080fbd4 l     F .text	00000034 alt_dev_reg
00813fbc l     O .rwdata	00001060 jtag_uart
0081501c l     O .rwdata	00000120 lcd
0081513c l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080fefc l     F .text	0000020c altera_avalon_jtag_uart_irq
00810108 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00815244 l     O .rwdata	00000004 colstart
00810740 l     F .text	000000b8 lcd_write_command
008107f8 l     F .text	000000d8 lcd_write_data
008108d0 l     F .text	000000d0 lcd_clear_screen
008109a0 l     F .text	000001ec lcd_repaint_screen
00810b8c l     F .text	000000cc lcd_scroll_up
00810c58 l     F .text	000002ac lcd_handle_escape
008113dc l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0081161c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008118cc l     F .text	0000009c altera_avalon_uart_irq
00811968 l     F .text	000000e4 altera_avalon_uart_rxirq
00811a4c l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00811be8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00811e00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00812030 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008126e0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00816fb8 g     O .bss	00000004 alt_instruction_exception_handler
008096b4 g     F .text	00000074 _mprec_log10
008003ec g     F .text	0000006c lcd_set_mode
008097a0 g     F .text	0000008c __any_on
00808318 g     F .text	00000054 _isatty_r
008132dc g     O .rodata	00000028 __mprec_tinytens
0080f398 g     F .text	0000007c alt_main
00813558 g     O .rwdata	00000018 t
00817014 g     O .bss	00000100 alt_irq
00808448 g     F .text	00000060 _lseek_r
00815248 g       *ABS*	00000000 __flash_rwdata_start
0080797c g     F .text	000000ac __sflags
0080d718 g     F .text	00000088 .hidden __eqdf2
00817114 g       *ABS*	00000000 __alt_heap_start
00802f18 g     F .text	0000003c printf
0080b8ec g     F .text	0000009c _wcrtomb_r
00816f44 g     O .bss	00000004 cam_0
00803460 g     F .text	0000005c __sseek
008019ec g     F .text	00000010 __sinit
008059e8 g     F .text	00000140 __swbuf_r
00816f48 g     O .bss	00000004 lcd
0080836c g     F .text	0000007c _setlocale_r
00801854 g     F .text	00000068 __sfmoreglue
0080f438 g     F .text	00000024 __malloc_unlock
008086d4 g     F .text	0000015c memmove
008019d4 g     F .text	00000018 _cleanup
00808830 g     F .text	000000a8 _Balloc
00816fe4 g     O .bss	00000018 timer
0080d7a0 g     F .text	000000dc .hidden __gtdf2
00812850 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00816f3c g     O .bss	00000004 buttonValue
00800020 g       *ABS*	00000000 __flash_exceptions_start
008020b4 g     F .text	0000005c _fstat_r
00816f84 g     O .bss	00000004 errno
00803320 g     F .text	00000014 __srget
008033dc g     F .text	00000008 __seofread
00816fa8 g     O .bss	00000004 alt_argv
0081d200 g       *ABS*	00000000 _gp
00812820 g     F .text	00000030 usleep
0080036c g     F .text	00000040 tlc_timer_isr
00813e3c g     O .rwdata	00000180 alt_fd_list
008121d0 g     F .text	00000090 alt_find_dev
0080858c g     F .text	00000148 memcpy
008003ac g     F .text	00000040 camera_timer_isr
008016a4 g     F .text	0000000c _cleanup_r
0080ea04 g     F .text	000000dc .hidden __floatsidf
008127a4 g     F .text	0000007c alt_io_redirect
0080d87c g     F .text	000000f4 .hidden __ltdf2
00816f4c g     O .bss	00000004 pedNS
00812e8c g       *ABS*	00000000 __DTOR_END__
00812a5c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00809df0 g     F .text	00000074 __fpclassifyd
00809610 g     F .text	000000a4 __ratio
0080b548 g     F .text	0000001c __vfiprintf_internal
00800a9c g     F .text	00000108 pedestrian_tlc
00810300 g     F .text	0000021c altera_avalon_jtag_uart_read
00802ee8 g     F .text	00000030 _printf_r
008014d0 g     F .text	00000064 .hidden __udivsi3
0080f0f8 g     F .text	000000a4 isatty
0081332c g     O .rodata	000000c8 __mprec_tens
008083e8 g     F .text	0000000c __locale_charset
008129cc g     F .text	00000090 alt_icache_flush
00816f90 g     O .bss	00000004 __malloc_top_pad
00815214 g     O .rwdata	00000004 __mb_cur_max
00808418 g     F .text	0000000c _localeconv_r
00808c3c g     F .text	0000003c __i2b
00807e5c g     F .text	000004bc __sfvwrite_r
00803334 g     F .text	00000054 _sbrk_r
00800ba4 g     F .text	000002ac configurable_tlc
0080982c g     F .text	00000060 _read_r
0081522c g     O .rwdata	00000004 alt_max_fd
008075d0 g     F .text	000000f0 _fclose_r
0080794c g     F .text	00000030 fflush
00816f8c g     O .bss	00000004 __malloc_max_sbrked_mem
0080ef3c g     F .text	00000180 alt_irq_register
008015a4 g     F .text	00000070 _fgetc_r
0080c584 g     F .text	000008ac .hidden __adddf3
008093b8 g     F .text	0000010c __b2d
0080c04c g     F .text	00000538 .hidden __umoddi3
0080f2c4 g     F .text	000000d4 lseek
00816f50 g     O .bss	00000004 timeCountCamera
00815200 g     O .rwdata	00000004 _global_impure_ptr
0080988c g     F .text	00000564 _realloc_r
00817114 g       *ABS*	00000000 __bss_end
008125f0 g     F .text	000000f0 alt_iic_isr_register
0080f998 g     F .text	00000108 alt_tick
00816f40 g     O .bss	00000004 settings_made
0080bad4 g     F .text	00000578 .hidden __udivdi3
0080b848 g     F .text	00000024 _fputwc_r
00813304 g     O .rodata	00000028 __mprec_bigtens
00808a20 g     F .text	00000104 __s2b
0080eae0 g     F .text	000000a8 .hidden __floatunsidf
008090f8 g     F .text	00000060 __mcmp
00811820 g     F .text	000000ac altera_avalon_uart_init
00801a0c g     F .text	00000018 __fp_lock_all
008125a4 g     F .text	0000004c alt_ic_irq_enabled
00816f54 g     O .bss	00000004 timerCameraContext
0080f8fc g     F .text	0000009c alt_alarm_stop
00800e50 g     F .text	000003a4 camera_tlc
008036fc g     F .text	0000001c strtol
00816fa0 g     O .bss	00000004 alt_irq_active
00801c54 g     F .text	00000444 _fseeko_r
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00813e14 g     O .rwdata	00000028 alt_dev_null
00811fe8 g     F .text	00000048 alt_dcache_flush_all
00808b24 g     F .text	00000068 __hi0bits
0080e984 g     F .text	00000080 .hidden __fixdfsi
00815248 g       *ABS*	00000000 __ram_rwdata_end
00815224 g     O .rwdata	00000008 alt_dev_list
00801b94 g     F .text	00000044 _fputc_r
0080fadc g     F .text	000000f8 write
00802f54 g     F .text	000000a0 _putc_r
00813558 g       *ABS*	00000000 __ram_rodata_end
0080ee8c g     F .text	000000b0 fstat
00801b70 g     F .text	00000024 fprintf
0080d87c g     F .text	000000f4 .hidden __ledf2
00816f38 g     O .bss	00000004 LEDs
00808e70 g     F .text	00000140 __pow5mult
0080a0ec g     F .text	0000145c ___vfiprintf_internal_r
00816f9c g     O .bss	00000004 __nlocale_changed
00801534 g     F .text	00000058 .hidden __umodsi3
00817114 g       *ABS*	00000000 end
00810f04 g     F .text	000004d8 altera_avalon_lcd_16207_write
00802098 g     F .text	0000001c fseeko
00816f58 g     O .bss	00000004 mode
00801598 g     F .text	0000000c _atoi_r
00811e3c g     F .text	000001ac altera_avalon_uart_write
00801c38 g     F .text	0000001c fseek
0080fe3c g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00812e8c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00811694 g     F .text	0000007c alt_avalon_timer_sc_init
00811770 g     F .text	00000060 altera_avalon_uart_write_fd
0080eb88 g     F .text	00000064 .hidden __clzsi2
008117d0 g     F .text	00000050 altera_avalon_uart_close_fd
0081051c g     F .text	00000224 altera_avalon_jtag_uart_write
008019fc g     F .text	00000004 __sfp_lock_acquire
008084a8 g     F .text	000000e4 memchr
00803718 g     F .text	000021f8 ___vfprintf_internal_r
00807b4c g     F .text	00000310 _free_r
008083f4 g     F .text	00000010 __locale_mb_cur_max
00812cd8 g     F .text	00000180 __call_exitprocs
008032ac g     F .text	00000074 __srget_r
00816f98 g     O .bss	00000004 __mlocale_changed
00815208 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00816fb0 g     O .bss	00000004 _alt_tick_rate
00808fb0 g     F .text	00000148 __lshift
00816f5c g     O .bss	00000004 next_traffic
00816fb4 g     O .bss	00000004 _alt_nticks
0080f6ec g     F .text	000000fc read
0080fc40 g     F .text	00000098 alt_sys_init
00816f60 g     O .bss	00000004 traffic
00802e88 g     F .text	00000060 _open_r
00812bc0 g     F .text	00000118 __register_exitproc
00808c78 g     F .text	000001f8 __multiply
008101a8 g     F .text	00000068 altera_avalon_jtag_uart_close
00813558 g       *ABS*	00000000 __ram_rwdata_start
00812e8c g       *ABS*	00000000 __ram_rodata_start
00816fbc g     O .bss	00000028 __malloc_current_mallinfo
008094c4 g     F .text	0000014c __d2b
0080fcd8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00812368 g     F .text	000000a4 alt_get_fd
00812874 g     F .text	00000158 alt_busy_sleep
00805cf4 g     F .text	00000054 _close_r
00812b44 g     F .text	0000007c memcmp
0080fd98 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00817114 g       *ABS*	00000000 __alt_stack_base
0080fde8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00802298 g     F .text	000000cc _fwrite_r
00805ba0 g     F .text	00000154 __swsetup_r
0080ce30 g     F .text	000008e8 .hidden __divdf3
008018bc g     F .text	00000118 __sfp
00809728 g     F .text	00000078 __copybits
00813994 g     O .rwdata	00000408 __malloc_av_
00801a08 g     F .text	00000004 __sinit_lock_release
0080d970 g     F .text	00000718 .hidden __muldf3
00803388 g     F .text	00000054 __sread
00812260 g     F .text	00000108 alt_find_file
0081206c g     F .text	000000a4 alt_dev_llist_insert
0080f414 g     F .text	00000024 __malloc_lock
00801b48 g     F .text	00000028 _fprintf_r
0080f84c g     F .text	000000b0 sbrk
008078f0 g     F .text	0000005c _fflush_r
0080b620 g     F .text	000000c4 _calloc_r
00801b30 g     F .text	00000018 fopen
00816f38 g       *ABS*	00000000 __bss_start
00802d60 g     F .text	00000128 memset
008011f4 g     F .text	000001e4 main
00816fac g     O .bss	00000004 alt_envp
00816f88 g     O .bss	00000004 __malloc_max_total_mem
0080fd38 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00805b28 g     F .text	00000018 __swbuf
00811488 g     F .text	00000134 altera_avalon_lcd_16207_init
008034bc g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008076c0 g     F .text	00000014 fclose
008034c4 g     F .text	00000238 _strtol_r
00805f48 g     F .text	00001688 _dtoa_r
00802554 g     F .text	0000080c _malloc_r
0080ba48 g     F .text	00000030 __ascii_wctomb
00815230 g     O .rwdata	00000004 alt_errno
00802110 g     F .text	000000c4 _fwalk
00802ff4 g     F .text	000000c8 putc
008013d8 g     F .text	00000084 .hidden __divsi3
00807a28 g     F .text	00000124 _malloc_trim_r
00812e8c g       *ABS*	00000000 __CTOR_END__
00809e64 g     F .text	000000dc strcmp
00812e8c g       *ABS*	00000000 __flash_rodata_start
00812e8c g       *ABS*	00000000 __DTOR_LIST__
0080d718 g     F .text	00000088 .hidden __nedf2
0080fc08 g     F .text	00000038 alt_irq_init
0080f7e8 g     F .text	00000064 alt_release_fd
00801614 g     F .text	00000088 fgetc
00813414 g     O .rodata	00000100 .hidden __clz_tab
00816f94 g     O .bss	00000004 _PathLocale
00812af8 g     F .text	00000014 atexit
00805b40 g     F .text	00000060 _write_r
00808424 g     F .text	00000018 setlocale
00816f64 g     O .bss	00000004 timeCountMain
00815204 g     O .rwdata	00000004 _impure_ptr
00816fa4 g     O .bss	00000004 alt_argc
008076d4 g     F .text	0000021c __sflush_r
00812170 g     F .text	00000060 _do_dtors
00808410 g     F .text	00000008 __locale_cjk_lang
00801c34 g     F .text	00000004 _fseek_r
00800458 g     F .text	00000404 timeout_data_handler
008030d8 g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00809354 g     F .text	00000064 __ulp
00801a24 g     F .text	00000018 __fp_unlock_all
008115bc g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00801bd8 g     F .text	0000005c fputc
0081521c g     O .rwdata	00000008 alt_fs_list
00816ffc g     O .bss	00000018 timer1
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080843c g     F .text	0000000c localeconv
00812440 g     F .text	00000050 alt_ic_isr_register
00802364 g     F .text	00000034 fwrite
00815248 g       *ABS*	00000000 _edata
00816f68 g     O .bss	00000004 previousMode
00811710 g     F .text	00000060 altera_avalon_uart_read_fd
00817114 g       *ABS*	00000000 _end
0080b6e4 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
00810210 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00812518 g     F .text	0000008c alt_ic_irq_disable
008033e4 g     F .text	0000007c __swrite
0081520c g     O .rwdata	00000004 __malloc_trim_threshold
00808404 g     F .text	0000000c __locale_msgcharset
00812b0c g     F .text	00000038 exit
008021d4 g     F .text	000000c4 _fwalk_reent
00809158 g     F .text	000001fc __mdiff
0080085c g     F .text	00000240 simple_tlc
0080145c g     F .text	00000074 .hidden __modsi3
00815210 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00816f6c g     O .bss	00000004 uart
00801a00 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080158c g     F .text	0000000c atoi
00813032 g     O .rodata	00000101 _ctype_
00811b94 g     F .text	00000054 altera_avalon_uart_close
00801a3c g     F .text	000000f4 _fopen_r
00812e58 g     F .text	00000034 _exit
0080ebec g     F .text	0000012c alt_alarm_start
00802398 g     F .text	000001bc __smakebuf_r
00816f70 g     O .bss	00000004 pedWE
00809f40 g     F .text	00000098 strlen
0080f55c g     F .text	00000154 open
0080d7a0 g     F .text	000000dc .hidden __gedf2
00815218 g     O .rwdata	00000004 __wctomb
0080a0d4 g     F .text	00000018 __sprint_r
0081240c g     F .text	00000034 alt_icache_flush_all
00815234 g     O .rwdata	00000004 alt_priority_mask
00816f74 g     O .bss	00000004 car_action
00816f78 g     O .bss	00000004 timerContext
00812490 g     F .text	00000088 alt_ic_irq_enable
00805910 g     F .text	0000001c __vfprintf_internal
00811c24 g     F .text	000001dc altera_avalon_uart_read
0080ba78 g     F .text	0000005c _wctomb_r
0080e088 g     F .text	000008fc .hidden __subdf3
00816f7c g     O .bss	00000004 previous_car_action
00808b8c g     F .text	000000b0 __lo0bits
0081523c g     O .rwdata	00000008 alt_alarm_list
00812110 g     F .text	00000060 _do_ctors
00816f80 g     O .bss	00000004 context_going_to_be_passed
0080b988 g     F .text	000000c0 wcrtomb
0080ed54 g     F .text	000000d0 close
00800290 g     F .text	000000dc init_buttons_pio
0080f204 g     F .text	00000084 alt_load
0080b86c g     F .text	00000080 fputwc
00801a04 g     F .text	00000004 __sinit_lock_acquire
00808900 g     F .text	00000120 __multadd
008088d8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	109c0504 	addi	r2,r2,28692
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	109c0504 	addi	r2,r2,28692
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a76e17 	ldw	r2,-25160(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a76e17 	ldw	r2,-25160(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6b48014 	ori	gp,gp,53760
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	109bce14 	ori	r2,r2,28472

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18dc4514 	ori	r3,r3,28948

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080f2040 	call	80f204 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080f3980 	call	80f398 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <init_buttons_pio>:
/*
 * Initialisers
 */
//Initializes the interrupts for the NS, EW pedestrian and car drive through buttons

void init_buttons_pio(void* context, alt_u32 id){
  800290:	defffc04 	addi	sp,sp,-16
  800294:	df000315 	stw	fp,12(sp)
  800298:	df000304 	addi	fp,sp,12
  80029c:	e13ffe15 	stw	r4,-8(fp)
  8002a0:	e17fff15 	stw	r5,-4(fp)
	int* temp = (int*) context; // need to cast the context first before using it
  8002a4:	e0bffe17 	ldw	r2,-8(fp)
  8002a8:	e0bffd15 	stw	r2,-12(fp)
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  8002ac:	00804074 	movhi	r2,257
  8002b0:	10842704 	addi	r2,r2,4252
  8002b4:	10c00037 	ldwio	r3,0(r2)
  8002b8:	e0bffd17 	ldw	r2,-12(fp)
  8002bc:	10c00015 	stw	r3,0(r2)

	// Clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  8002c0:	0007883a 	mov	r3,zero
  8002c4:	00804074 	movhi	r2,257
  8002c8:	10842704 	addi	r2,r2,4252
  8002cc:	10c00035 	stwio	r3,0(r2)

	if ((*temp) == 1){
  8002d0:	e0bffd17 	ldw	r2,-12(fp)
  8002d4:	10800017 	ldw	r2,0(r2)
  8002d8:	10800058 	cmpnei	r2,r2,1
  8002dc:	1000021e 	bne	r2,zero,8002e8 <init_buttons_pio+0x58>
		pedNS = pressed;
  8002e0:	00800044 	movi	r2,1
  8002e4:	d0a75315 	stw	r2,-25268(gp)
	}
	if ((*temp) == 2){
  8002e8:	e0bffd17 	ldw	r2,-12(fp)
  8002ec:	10800017 	ldw	r2,0(r2)
  8002f0:	10800098 	cmpnei	r2,r2,2
  8002f4:	1000021e 	bne	r2,zero,800300 <init_buttons_pio+0x70>
		pedWE = pressed;
  8002f8:	00800044 	movi	r2,1
  8002fc:	d0a75c15 	stw	r2,-25232(gp)
	}
	if ((*temp) == 4 && mode == 4){
  800300:	e0bffd17 	ldw	r2,-12(fp)
  800304:	10800017 	ldw	r2,0(r2)
  800308:	10800118 	cmpnei	r2,r2,4
  80030c:	1000101e 	bne	r2,zero,800350 <init_buttons_pio+0xc0>
  800310:	d0a75617 	ldw	r2,-25256(gp)
  800314:	10800118 	cmpnei	r2,r2,4
  800318:	10000d1e 	bne	r2,zero,800350 <init_buttons_pio+0xc0>
		if(car_action == exited && (traffic != RG && traffic != GR)){
  80031c:	d0a75d17 	ldw	r2,-25228(gp)
  800320:	10800058 	cmpnei	r2,r2,1
  800324:	1000081e 	bne	r2,zero,800348 <init_buttons_pio+0xb8>
  800328:	d0a75817 	ldw	r2,-25248(gp)
  80032c:	10800060 	cmpeqi	r2,r2,1
  800330:	1000051e 	bne	r2,zero,800348 <init_buttons_pio+0xb8>
  800334:	d0a75817 	ldw	r2,-25248(gp)
  800338:	108000e0 	cmpeqi	r2,r2,3
  80033c:	1000021e 	bne	r2,zero,800348 <init_buttons_pio+0xb8>
			car_action = entered;
  800340:	d0275d15 	stw	zero,-25228(gp)
  800344:	00000206 	br	800350 <init_buttons_pio+0xc0>
		}else{
			car_action = exited;
  800348:	00800044 	movi	r2,1
  80034c:	d0a75d15 	stw	r2,-25228(gp)
		}
	}

	(*temp) = 0;
  800350:	e0bffd17 	ldw	r2,-12(fp)
  800354:	10000015 	stw	zero,0(r2)
}
  800358:	0001883a 	nop
  80035c:	e037883a 	mov	sp,fp
  800360:	df000017 	ldw	fp,0(sp)
  800364:	dec00104 	addi	sp,sp,4
  800368:	f800283a 	ret

0080036c <tlc_timer_isr>:

/*
 * Interrupts
 */
//handler for the traffic light timer interrupt
alt_u32 tlc_timer_isr(void* context){
  80036c:	defffd04 	addi	sp,sp,-12
  800370:	df000215 	stw	fp,8(sp)
  800374:	df000204 	addi	fp,sp,8
  800378:	e13fff15 	stw	r4,-4(fp)
	int *timeCount = (int*) context;
  80037c:	e0bfff17 	ldw	r2,-4(fp)
  800380:	e0bffe15 	stw	r2,-8(fp)
	(*timeCount)++;
  800384:	e0bffe17 	ldw	r2,-8(fp)
  800388:	10800017 	ldw	r2,0(r2)
  80038c:	10c00044 	addi	r3,r2,1
  800390:	e0bffe17 	ldw	r2,-8(fp)
  800394:	10c00015 	stw	r3,0(r2)
	return 100;
  800398:	00801904 	movi	r2,100
}
  80039c:	e037883a 	mov	sp,fp
  8003a0:	df000017 	ldw	fp,0(sp)
  8003a4:	dec00104 	addi	sp,sp,4
  8003a8:	f800283a 	ret

008003ac <camera_timer_isr>:

//handler for the red light camera timer interrupt
alt_u32 camera_timer_isr(void* context){
  8003ac:	defffd04 	addi	sp,sp,-12
  8003b0:	df000215 	stw	fp,8(sp)
  8003b4:	df000204 	addi	fp,sp,8
  8003b8:	e13fff15 	stw	r4,-4(fp)
	int *timeCountCamera = (int*) context;
  8003bc:	e0bfff17 	ldw	r2,-4(fp)
  8003c0:	e0bffe15 	stw	r2,-8(fp)
	(*timeCountCamera)++;
  8003c4:	e0bffe17 	ldw	r2,-8(fp)
  8003c8:	10800017 	ldw	r2,0(r2)
  8003cc:	10c00044 	addi	r3,r2,1
  8003d0:	e0bffe17 	ldw	r2,-8(fp)
  8003d4:	10c00015 	stw	r3,0(r2)
	return 100;
  8003d8:	00801904 	movi	r2,100
}
  8003dc:	e037883a 	mov	sp,fp
  8003e0:	df000017 	ldw	fp,0(sp)
  8003e4:	dec00104 	addi	sp,sp,4
  8003e8:	f800283a 	ret

008003ec <lcd_set_mode>:

/*
 * Setters
 */
//write the current mode to the LCD
void lcd_set_mode(){
  8003ec:	defffe04 	addi	sp,sp,-8
  8003f0:	dfc00115 	stw	ra,4(sp)
  8003f4:	df000015 	stw	fp,0(sp)
  8003f8:	d839883a 	mov	fp,sp
	if(lcd != NULL){
  8003fc:	d0a75217 	ldw	r2,-25272(gp)
  800400:	10000f26 	beq	r2,zero,800440 <lcd_set_mode+0x54>
		fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  800404:	d0a75217 	ldw	r2,-25272(gp)
  800408:	01c02074 	movhi	r7,129
  80040c:	39cba304 	addi	r7,r7,11916
  800410:	018006c4 	movi	r6,27
  800414:	01402074 	movhi	r5,129
  800418:	294ba404 	addi	r5,r5,11920
  80041c:	1009883a 	mov	r4,r2
  800420:	0801b700 	call	801b70 <fprintf>
		fprintf(lcd, "MODE: %d\n", mode);
  800424:	d0a75217 	ldw	r2,-25272(gp)
  800428:	d0e75617 	ldw	r3,-25256(gp)
  80042c:	180d883a 	mov	r6,r3
  800430:	01402074 	movhi	r5,129
  800434:	294ba604 	addi	r5,r5,11928
  800438:	1009883a 	mov	r4,r2
  80043c:	0801b700 	call	801b70 <fprintf>
	}
}
  800440:	0001883a 	nop
  800444:	e037883a 	mov	sp,fp
  800448:	dfc00117 	ldw	ra,4(sp)
  80044c:	df000017 	ldw	fp,0(sp)
  800450:	dec00204 	addi	sp,sp,8
  800454:	f800283a 	ret

00800458 <timeout_data_handler>:

//parses the configuration string and updates the timeouts
void timeout_data_handler(){
  800458:	deffee04 	addi	sp,sp,-72
  80045c:	dfc01115 	stw	ra,68(sp)
  800460:	df001015 	stw	fp,64(sp)
  800464:	df001004 	addi	fp,sp,64
	if(uart != NULL && settings_made == 0){
  800468:	d0a75b17 	ldw	r2,-25236(gp)
  80046c:	10000926 	beq	r2,zero,800494 <timeout_data_handler+0x3c>
  800470:	d0a75017 	ldw	r2,-25280(gp)
  800474:	1000071e 	bne	r2,zero,800494 <timeout_data_handler+0x3c>
		fprintf(uart, "Insert t values in format t1,t2,t3,t4,t5,t6[\\r]\\n: (Press Z to enter)\r\n");
  800478:	d0a75b17 	ldw	r2,-25236(gp)
  80047c:	100f883a 	mov	r7,r2
  800480:	018011c4 	movi	r6,71
  800484:	01400044 	movi	r5,1
  800488:	01002074 	movhi	r4,129
  80048c:	210ba904 	addi	r4,r4,11940
  800490:	08023640 	call	802364 <fwrite>
	}

	//Iterator for data position
	char data;
	char num_digits[31];
	int num_numbers = 0, num_commas = 0, increment = 0;
  800494:	e03ff015 	stw	zero,-64(fp)
  800498:	e03ff115 	stw	zero,-60(fp)
  80049c:	e03ff215 	stw	zero,-56(fp)

	//Check that the string format is correct and enter is pressed.
	while(IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 6 && settings_made == 0){
  8004a0:	0000e106 	br	800828 <timeout_data_handler+0x3d0>
		data = fgetc(uart);
  8004a4:	d0a75b17 	ldw	r2,-25236(gp)
  8004a8:	1009883a 	mov	r4,r2
  8004ac:	08016140 	call	801614 <fgetc>
  8004b0:	e0bff605 	stb	r2,-40(fp)

		//Check that the data input consists only commas
		if((data >= '0' && data <= '9') || data == ',' || data == 'z'){
  8004b4:	e0bff607 	ldb	r2,-40(fp)
  8004b8:	10800c10 	cmplti	r2,r2,48
  8004bc:	1000031e 	bne	r2,zero,8004cc <timeout_data_handler+0x74>
  8004c0:	e0bff607 	ldb	r2,-40(fp)
  8004c4:	10800e90 	cmplti	r2,r2,58
  8004c8:	1000061e 	bne	r2,zero,8004e4 <timeout_data_handler+0x8c>
  8004cc:	e0bff607 	ldb	r2,-40(fp)
  8004d0:	10800b20 	cmpeqi	r2,r2,44
  8004d4:	1000031e 	bne	r2,zero,8004e4 <timeout_data_handler+0x8c>
  8004d8:	e0bff607 	ldb	r2,-40(fp)
  8004dc:	10801e98 	cmpnei	r2,r2,122
  8004e0:	1000d11e 	bne	r2,zero,800828 <timeout_data_handler+0x3d0>

			// Check that the player is entering digit number.
			if(num_numbers < 4 && (data >= '0' && data <= '9')){
  8004e4:	e0bff017 	ldw	r2,-64(fp)
  8004e8:	10800108 	cmpgei	r2,r2,4
  8004ec:	1000171e 	bne	r2,zero,80054c <timeout_data_handler+0xf4>
  8004f0:	e0bff607 	ldb	r2,-40(fp)
  8004f4:	10800c10 	cmplti	r2,r2,48
  8004f8:	1000141e 	bne	r2,zero,80054c <timeout_data_handler+0xf4>
  8004fc:	e0bff607 	ldb	r2,-40(fp)
  800500:	10800e88 	cmpgei	r2,r2,58
  800504:	1000111e 	bne	r2,zero,80054c <timeout_data_handler+0xf4>
				num_digits[increment] = data;
  800508:	e0fff644 	addi	r3,fp,-39
  80050c:	e0bff217 	ldw	r2,-56(fp)
  800510:	1885883a 	add	r2,r3,r2
  800514:	e0fff603 	ldbu	r3,-40(fp)
  800518:	10c00005 	stb	r3,0(r2)
				num_numbers++;
  80051c:	e0bff017 	ldw	r2,-64(fp)
  800520:	10800044 	addi	r2,r2,1
  800524:	e0bff015 	stw	r2,-64(fp)
				increment++;
  800528:	e0bff217 	ldw	r2,-56(fp)
  80052c:	10800044 	addi	r2,r2,1
  800530:	e0bff215 	stw	r2,-56(fp)
				fprintf(uart, "%c", data);
  800534:	d0e75b17 	ldw	r3,-25236(gp)
  800538:	e0bff607 	ldb	r2,-40(fp)
  80053c:	180b883a 	mov	r5,r3
  800540:	1009883a 	mov	r4,r2
  800544:	0801bd80 	call	801bd8 <fputc>
  800548:	0000b706 	br	800828 <timeout_data_handler+0x3d0>

			// Check that the player confirms the five t numbers using comma
			}else if(num_numbers > 0 && data == ',' && num_commas < 5){
  80054c:	e0bff017 	ldw	r2,-64(fp)
  800550:	0080180e 	bge	zero,r2,8005b4 <timeout_data_handler+0x15c>
  800554:	e0bff607 	ldb	r2,-40(fp)
  800558:	10800b18 	cmpnei	r2,r2,44
  80055c:	1000151e 	bne	r2,zero,8005b4 <timeout_data_handler+0x15c>
  800560:	e0bff117 	ldw	r2,-60(fp)
  800564:	10800148 	cmpgei	r2,r2,5
  800568:	1000121e 	bne	r2,zero,8005b4 <timeout_data_handler+0x15c>
				num_numbers = 0;
  80056c:	e03ff015 	stw	zero,-64(fp)
				num_digits[increment] = data;
  800570:	e0fff644 	addi	r3,fp,-39
  800574:	e0bff217 	ldw	r2,-56(fp)
  800578:	1885883a 	add	r2,r3,r2
  80057c:	e0fff603 	ldbu	r3,-40(fp)
  800580:	10c00005 	stb	r3,0(r2)
				increment++;
  800584:	e0bff217 	ldw	r2,-56(fp)
  800588:	10800044 	addi	r2,r2,1
  80058c:	e0bff215 	stw	r2,-56(fp)
				num_commas++;
  800590:	e0bff117 	ldw	r2,-60(fp)
  800594:	10800044 	addi	r2,r2,1
  800598:	e0bff115 	stw	r2,-60(fp)

				// Clear data
				fprintf(uart, "%c", data);
  80059c:	d0e75b17 	ldw	r3,-25236(gp)
  8005a0:	e0bff607 	ldb	r2,-40(fp)
  8005a4:	180b883a 	mov	r5,r3
  8005a8:	1009883a 	mov	r4,r2
  8005ac:	0801bd80 	call	801bd8 <fputc>
  8005b0:	00009d06 	br	800828 <timeout_data_handler+0x3d0>

			// Finally escape this loop.
			}else if(num_commas > 4 && data == 'z'){
  8005b4:	e0bff117 	ldw	r2,-60(fp)
  8005b8:	10800150 	cmplti	r2,r2,5
  8005bc:	10009a1e 	bne	r2,zero,800828 <timeout_data_handler+0x3d0>
  8005c0:	e0bff607 	ldb	r2,-40(fp)
  8005c4:	10801e98 	cmpnei	r2,r2,122
  8005c8:	1000971e 	bne	r2,zero,800828 <timeout_data_handler+0x3d0>
				num_digits[increment] = '\0';
  8005cc:	e0fff644 	addi	r3,fp,-39
  8005d0:	e0bff217 	ldw	r2,-56(fp)
  8005d4:	1885883a 	add	r2,r3,r2
  8005d8:	10000005 	stb	zero,0(r2)
				settings_made = 1;
  8005dc:	00800044 	movi	r2,1
  8005e0:	d0a75015 	stw	r2,-25280(gp)
				fprintf(uart, "\r\n%s\r\n", num_digits);
  8005e4:	d0a75b17 	ldw	r2,-25236(gp)
  8005e8:	e0fff644 	addi	r3,fp,-39
  8005ec:	180d883a 	mov	r6,r3
  8005f0:	01402074 	movhi	r5,129
  8005f4:	294bbb04 	addi	r5,r5,12012
  8005f8:	1009883a 	mov	r4,r2
  8005fc:	0801b700 	call	801b70 <fprintf>

				//Iterates through num_digits
				char temp[5];
				int PosT = 0;
  800600:	e03ff315 	stw	zero,-52(fp)
				int TempIterator = 0;
  800604:	e03ff415 	stw	zero,-48(fp)
				for (int i=0; i<sizeof(num_digits); i++) {
  800608:	e03ff515 	stw	zero,-44(fp)
  80060c:	00008306 	br	80081c <timeout_data_handler+0x3c4>
					if (num_digits[i] >= '0' && num_digits[i] <= '9') {
  800610:	e0fff644 	addi	r3,fp,-39
  800614:	e0bff517 	ldw	r2,-44(fp)
  800618:	1885883a 	add	r2,r3,r2
  80061c:	10800003 	ldbu	r2,0(r2)
  800620:	10803fcc 	andi	r2,r2,255
  800624:	1080201c 	xori	r2,r2,128
  800628:	10bfe004 	addi	r2,r2,-128
  80062c:	10800c10 	cmplti	r2,r2,48
  800630:	1000151e 	bne	r2,zero,800688 <timeout_data_handler+0x230>
  800634:	e0fff644 	addi	r3,fp,-39
  800638:	e0bff517 	ldw	r2,-44(fp)
  80063c:	1885883a 	add	r2,r3,r2
  800640:	10800003 	ldbu	r2,0(r2)
  800644:	10803fcc 	andi	r2,r2,255
  800648:	1080201c 	xori	r2,r2,128
  80064c:	10bfe004 	addi	r2,r2,-128
  800650:	10800e88 	cmpgei	r2,r2,58
  800654:	10000c1e 	bne	r2,zero,800688 <timeout_data_handler+0x230>
						temp[TempIterator] = num_digits[i];
  800658:	e0fff644 	addi	r3,fp,-39
  80065c:	e0bff517 	ldw	r2,-44(fp)
  800660:	1885883a 	add	r2,r3,r2
  800664:	10c00003 	ldbu	r3,0(r2)
  800668:	e13ffe04 	addi	r4,fp,-8
  80066c:	e0bff417 	ldw	r2,-48(fp)
  800670:	2085883a 	add	r2,r4,r2
  800674:	10c00005 	stb	r3,0(r2)
						TempIterator++;
  800678:	e0bff417 	ldw	r2,-48(fp)
  80067c:	10800044 	addi	r2,r2,1
  800680:	e0bff415 	stw	r2,-48(fp)
  800684:	00006206 	br	800810 <timeout_data_handler+0x3b8>
					}
					else if (num_digits[i] == ',') {
  800688:	e0fff644 	addi	r3,fp,-39
  80068c:	e0bff517 	ldw	r2,-44(fp)
  800690:	1885883a 	add	r2,r3,r2
  800694:	10800003 	ldbu	r2,0(r2)
  800698:	10803fcc 	andi	r2,r2,255
  80069c:	1080201c 	xori	r2,r2,128
  8006a0:	10bfe004 	addi	r2,r2,-128
  8006a4:	10800b18 	cmpnei	r2,r2,44
  8006a8:	1000151e 	bne	r2,zero,800700 <timeout_data_handler+0x2a8>
						t[PosT] = atoi(temp);
  8006ac:	e0bffe04 	addi	r2,fp,-8
  8006b0:	1009883a 	mov	r4,r2
  8006b4:	080158c0 	call	80158c <atoi>
  8006b8:	1009883a 	mov	r4,r2
  8006bc:	00802074 	movhi	r2,129
  8006c0:	108d5604 	addi	r2,r2,13656
  8006c4:	e0fff317 	ldw	r3,-52(fp)
  8006c8:	18c7883a 	add	r3,r3,r3
  8006cc:	18c7883a 	add	r3,r3,r3
  8006d0:	10c5883a 	add	r2,r2,r3
  8006d4:	11000015 	stw	r4,0(r2)
						memset(temp, 0, 5);
  8006d8:	e0bffe04 	addi	r2,fp,-8
  8006dc:	01800144 	movi	r6,5
  8006e0:	000b883a 	mov	r5,zero
  8006e4:	1009883a 	mov	r4,r2
  8006e8:	0802d600 	call	802d60 <memset>
						TempIterator = 0;
  8006ec:	e03ff415 	stw	zero,-48(fp)
						PosT++;
  8006f0:	e0bff317 	ldw	r2,-52(fp)
  8006f4:	10800044 	addi	r2,r2,1
  8006f8:	e0bff315 	stw	r2,-52(fp)
  8006fc:	00004406 	br	800810 <timeout_data_handler+0x3b8>
					}
					else if (num_digits[i] == '\0') {
  800700:	e0fff644 	addi	r3,fp,-39
  800704:	e0bff517 	ldw	r2,-44(fp)
  800708:	1885883a 	add	r2,r3,r2
  80070c:	10800003 	ldbu	r2,0(r2)
  800710:	10803fcc 	andi	r2,r2,255
  800714:	1080201c 	xori	r2,r2,128
  800718:	10bfe004 	addi	r2,r2,-128
  80071c:	10003c1e 	bne	r2,zero,800810 <timeout_data_handler+0x3b8>
						t[PosT] = atoi(temp);
  800720:	e0bffe04 	addi	r2,fp,-8
  800724:	1009883a 	mov	r4,r2
  800728:	080158c0 	call	80158c <atoi>
  80072c:	1009883a 	mov	r4,r2
  800730:	00802074 	movhi	r2,129
  800734:	108d5604 	addi	r2,r2,13656
  800738:	e0fff317 	ldw	r3,-52(fp)
  80073c:	18c7883a 	add	r3,r3,r3
  800740:	18c7883a 	add	r3,r3,r3
  800744:	10c5883a 	add	r2,r2,r3
  800748:	11000015 	stw	r4,0(r2)
						memset(temp, 0, 5);
  80074c:	e0bffe04 	addi	r2,fp,-8
  800750:	01800144 	movi	r6,5
  800754:	000b883a 	mov	r5,zero
  800758:	1009883a 	mov	r4,r2
  80075c:	0802d600 	call	802d60 <memset>
						PosT = 0;
  800760:	e03ff315 	stw	zero,-52(fp)

						printf("t[0]: %d, ", t[0]);
  800764:	00802074 	movhi	r2,129
  800768:	108d5604 	addi	r2,r2,13656
  80076c:	10800017 	ldw	r2,0(r2)
  800770:	100b883a 	mov	r5,r2
  800774:	01002074 	movhi	r4,129
  800778:	210bbd04 	addi	r4,r4,12020
  80077c:	0802f180 	call	802f18 <printf>
						printf("t[1]: %d, ", t[1]);
  800780:	00802074 	movhi	r2,129
  800784:	108d5604 	addi	r2,r2,13656
  800788:	10800117 	ldw	r2,4(r2)
  80078c:	100b883a 	mov	r5,r2
  800790:	01002074 	movhi	r4,129
  800794:	210bc004 	addi	r4,r4,12032
  800798:	0802f180 	call	802f18 <printf>
						printf("t[2]: %d, ", t[2]);
  80079c:	00802074 	movhi	r2,129
  8007a0:	108d5604 	addi	r2,r2,13656
  8007a4:	10800217 	ldw	r2,8(r2)
  8007a8:	100b883a 	mov	r5,r2
  8007ac:	01002074 	movhi	r4,129
  8007b0:	210bc304 	addi	r4,r4,12044
  8007b4:	0802f180 	call	802f18 <printf>
						printf("t[3]: %d, ", t[3]);
  8007b8:	00802074 	movhi	r2,129
  8007bc:	108d5604 	addi	r2,r2,13656
  8007c0:	10800317 	ldw	r2,12(r2)
  8007c4:	100b883a 	mov	r5,r2
  8007c8:	01002074 	movhi	r4,129
  8007cc:	210bc604 	addi	r4,r4,12056
  8007d0:	0802f180 	call	802f18 <printf>
						printf("t[4]: %d, ", t[4]);
  8007d4:	00802074 	movhi	r2,129
  8007d8:	108d5604 	addi	r2,r2,13656
  8007dc:	10800417 	ldw	r2,16(r2)
  8007e0:	100b883a 	mov	r5,r2
  8007e4:	01002074 	movhi	r4,129
  8007e8:	210bc904 	addi	r4,r4,12068
  8007ec:	0802f180 	call	802f18 <printf>
						printf("t[5]: %d\n", t[5]);
  8007f0:	00802074 	movhi	r2,129
  8007f4:	108d5604 	addi	r2,r2,13656
  8007f8:	10800517 	ldw	r2,20(r2)
  8007fc:	100b883a 	mov	r5,r2
  800800:	01002074 	movhi	r4,129
  800804:	210bcc04 	addi	r4,r4,12080
  800808:	0802f180 	call	802f18 <printf>

						break;
  80080c:	00000606 	br	800828 <timeout_data_handler+0x3d0>

				//Iterates through num_digits
				char temp[5];
				int PosT = 0;
				int TempIterator = 0;
				for (int i=0; i<sizeof(num_digits); i++) {
  800810:	e0bff517 	ldw	r2,-44(fp)
  800814:	10800044 	addi	r2,r2,1
  800818:	e0bff515 	stw	r2,-44(fp)
  80081c:	e0bff517 	ldw	r2,-44(fp)
  800820:	108007f0 	cmpltui	r2,r2,31
  800824:	103f7a1e 	bne	r2,zero,800610 <__alt_mem_onchip_mem+0xff7f8610>
	char data;
	char num_digits[31];
	int num_numbers = 0, num_commas = 0, increment = 0;

	//Check that the string format is correct and enter is pressed.
	while(IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 6 && settings_made == 0){
  800828:	00804074 	movhi	r2,257
  80082c:	10842804 	addi	r2,r2,4256
  800830:	10800037 	ldwio	r2,0(r2)
  800834:	10800198 	cmpnei	r2,r2,6
  800838:	1000021e 	bne	r2,zero,800844 <timeout_data_handler+0x3ec>
  80083c:	d0a75017 	ldw	r2,-25280(gp)
  800840:	103f1826 	beq	r2,zero,8004a4 <__alt_mem_onchip_mem+0xff7f84a4>

		}
	}


}
  800844:	0001883a 	nop
  800848:	e037883a 	mov	sp,fp
  80084c:	dfc00117 	ldw	ra,4(sp)
  800850:	df000017 	ldw	fp,0(sp)
  800854:	dec00204 	addi	sp,sp,8
  800858:	f800283a 	ret

0080085c <simple_tlc>:

/*
 * Implementers
 */
//implements the simple traffic light controller
void simple_tlc(){
  80085c:	defffe04 	addi	sp,sp,-8
  800860:	dfc00115 	stw	ra,4(sp)
  800864:	df000015 	stw	fp,0(sp)
  800868:	d839883a 	mov	fp,sp
	switch(traffic){
  80086c:	d0a75817 	ldw	r2,-25248(gp)
  800870:	10c00168 	cmpgeui	r3,r2,5
  800874:	1800831e 	bne	r3,zero,800a84 <simple_tlc+0x228>
  800878:	100690ba 	slli	r3,r2,2
  80087c:	00802034 	movhi	r2,128
  800880:	10822404 	addi	r2,r2,2192
  800884:	1885883a 	add	r2,r3,r2
  800888:	10800017 	ldw	r2,0(r2)
  80088c:	1000683a 	jmp	r2
  800890:	008008a4 	muli	r2,zero,34
  800894:	00800908 	cmpgei	r2,zero,36
  800898:	00800968 	cmpgeui	r2,zero,37
  80089c:	008009b4 	movhi	r2,38
  8008a0:	00800a14 	movui	r2,40
		case RR:
			// Set green leds
			LEDs = TWE_R + TNS_R;
  8008a4:	00800904 	movi	r2,36
  8008a8:	d0a74e15 	stw	r2,-25288(gp)

			if(timeCountMain >= 5){
  8008ac:	d0a75917 	ldw	r2,-25244(gp)
  8008b0:	10800150 	cmplti	r2,r2,5
  8008b4:	10006a1e 	bne	r2,zero,800a60 <simple_tlc+0x204>
				// next traffic decides whether to go RG or GR
				if(next_traffic == NS){
  8008b8:	d0a75717 	ldw	r2,-25252(gp)
  8008bc:	1000031e 	bne	r2,zero,8008cc <simple_tlc+0x70>
					traffic = RG;
  8008c0:	00800044 	movi	r2,1
  8008c4:	d0a75815 	stw	r2,-25248(gp)
  8008c8:	00000206 	br	8008d4 <simple_tlc+0x78>
				}else{
					traffic = GR;
  8008cc:	008000c4 	movi	r2,3
  8008d0:	d0a75815 	stw	r2,-25248(gp)
				}
				alt_alarm_stop(&timer);
  8008d4:	01002074 	movhi	r4,129
  8008d8:	211bf904 	addi	r4,r4,28644
  8008dc:	080f8fc0 	call	80f8fc <alt_alarm_stop>
				timeCountMain = 0;
  8008e0:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout of 0.5 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  8008e4:	d0a75e17 	ldw	r2,-25224(gp)
  8008e8:	100f883a 	mov	r7,r2
  8008ec:	01802034 	movhi	r6,128
  8008f0:	3180db04 	addi	r6,r6,876
  8008f4:	01401904 	movi	r5,100
  8008f8:	01002074 	movhi	r4,129
  8008fc:	211bf904 	addi	r4,r4,28644
  800900:	080ebec0 	call	80ebec <alt_alarm_start>
			}

			break;
  800904:	00005606 	br	800a60 <simple_tlc+0x204>

		case RG:
			// Set green leds
			LEDs = TWE_R + TNS_G;
  800908:	00800844 	movi	r2,33
  80090c:	d0a74e15 	stw	r2,-25288(gp)

			// Set next traffic not to re-do RG
			if(next_traffic == NS){
  800910:	d0a75717 	ldw	r2,-25252(gp)
  800914:	1000021e 	bne	r2,zero,800920 <simple_tlc+0xc4>
				next_traffic = WE;
  800918:	00800044 	movi	r2,1
  80091c:	d0a75715 	stw	r2,-25252(gp)
			}

			if(timeCountMain >= 60){
  800920:	d0a75917 	ldw	r2,-25244(gp)
  800924:	10800f10 	cmplti	r2,r2,60
  800928:	10004f1e 	bne	r2,zero,800a68 <simple_tlc+0x20c>
				traffic = RY;
  80092c:	00800084 	movi	r2,2
  800930:	d0a75815 	stw	r2,-25248(gp)

				alt_alarm_stop(&timer);
  800934:	01002074 	movhi	r4,129
  800938:	211bf904 	addi	r4,r4,28644
  80093c:	080f8fc0 	call	80f8fc <alt_alarm_stop>
				timeCountMain = 0;
  800940:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800944:	d0a75e17 	ldw	r2,-25224(gp)
  800948:	100f883a 	mov	r7,r2
  80094c:	01802034 	movhi	r6,128
  800950:	3180db04 	addi	r6,r6,876
  800954:	01401904 	movi	r5,100
  800958:	01002074 	movhi	r4,129
  80095c:	211bf904 	addi	r4,r4,28644
  800960:	080ebec0 	call	80ebec <alt_alarm_start>
			}
			break;
  800964:	00004006 	br	800a68 <simple_tlc+0x20c>
		case RY:
			// Set green leds
			LEDs = TWE_R + TNS_Y;
  800968:	00800884 	movi	r2,34
  80096c:	d0a74e15 	stw	r2,-25288(gp)

			if(timeCountMain >= 20){
  800970:	d0a75917 	ldw	r2,-25244(gp)
  800974:	10800510 	cmplti	r2,r2,20
  800978:	10003d1e 	bne	r2,zero,800a70 <simple_tlc+0x214>
				traffic = RR;
  80097c:	d0275815 	stw	zero,-25248(gp)

				alt_alarm_stop(&timer);
  800980:	01002074 	movhi	r4,129
  800984:	211bf904 	addi	r4,r4,28644
  800988:	080f8fc0 	call	80f8fc <alt_alarm_stop>
				timeCountMain = 0;
  80098c:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800990:	d0a75e17 	ldw	r2,-25224(gp)
  800994:	100f883a 	mov	r7,r2
  800998:	01802034 	movhi	r6,128
  80099c:	3180db04 	addi	r6,r6,876
  8009a0:	01401904 	movi	r5,100
  8009a4:	01002074 	movhi	r4,129
  8009a8:	211bf904 	addi	r4,r4,28644
  8009ac:	080ebec0 	call	80ebec <alt_alarm_start>
			}
			break;
  8009b0:	00002f06 	br	800a70 <simple_tlc+0x214>
		case GR:
			// Set green leds
			LEDs = TWE_G + TNS_R;
  8009b4:	00800304 	movi	r2,12
  8009b8:	d0a74e15 	stw	r2,-25288(gp)

			// Set next traffic not to re-do GR
			if(next_traffic == WE){
  8009bc:	d0a75717 	ldw	r2,-25252(gp)
  8009c0:	10800058 	cmpnei	r2,r2,1
  8009c4:	1000011e 	bne	r2,zero,8009cc <simple_tlc+0x170>
				next_traffic = NS;
  8009c8:	d0275715 	stw	zero,-25252(gp)
			}
			if(timeCountMain >= 60){
  8009cc:	d0a75917 	ldw	r2,-25244(gp)
  8009d0:	10800f10 	cmplti	r2,r2,60
  8009d4:	1000281e 	bne	r2,zero,800a78 <simple_tlc+0x21c>
				traffic = YR;
  8009d8:	00800104 	movi	r2,4
  8009dc:	d0a75815 	stw	r2,-25248(gp)

				alt_alarm_stop(&timer);
  8009e0:	01002074 	movhi	r4,129
  8009e4:	211bf904 	addi	r4,r4,28644
  8009e8:	080f8fc0 	call	80f8fc <alt_alarm_stop>
				timeCountMain = 0;
  8009ec:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  8009f0:	d0a75e17 	ldw	r2,-25224(gp)
  8009f4:	100f883a 	mov	r7,r2
  8009f8:	01802034 	movhi	r6,128
  8009fc:	3180db04 	addi	r6,r6,876
  800a00:	01401904 	movi	r5,100
  800a04:	01002074 	movhi	r4,129
  800a08:	211bf904 	addi	r4,r4,28644
  800a0c:	080ebec0 	call	80ebec <alt_alarm_start>
			}
			break;
  800a10:	00001906 	br	800a78 <simple_tlc+0x21c>
		case YR:
			// Set green leds
			LEDs = TWE_Y + TNS_R;
  800a14:	00800504 	movi	r2,20
  800a18:	d0a74e15 	stw	r2,-25288(gp)

			if(timeCountMain >= 20){
  800a1c:	d0a75917 	ldw	r2,-25244(gp)
  800a20:	10800510 	cmplti	r2,r2,20
  800a24:	1000161e 	bne	r2,zero,800a80 <simple_tlc+0x224>
				traffic = RR;
  800a28:	d0275815 	stw	zero,-25248(gp)

				alt_alarm_stop(&timer);
  800a2c:	01002074 	movhi	r4,129
  800a30:	211bf904 	addi	r4,r4,28644
  800a34:	080f8fc0 	call	80f8fc <alt_alarm_stop>
				timeCountMain = 0;
  800a38:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800a3c:	d0a75e17 	ldw	r2,-25224(gp)
  800a40:	100f883a 	mov	r7,r2
  800a44:	01802034 	movhi	r6,128
  800a48:	3180db04 	addi	r6,r6,876
  800a4c:	01401904 	movi	r5,100
  800a50:	01002074 	movhi	r4,129
  800a54:	211bf904 	addi	r4,r4,28644
  800a58:	080ebec0 	call	80ebec <alt_alarm_start>
			}
			break;
  800a5c:	00000806 	br	800a80 <simple_tlc+0x224>
				timeCountMain = 0;
				// start the timer, with timeout of 0.5 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}

			break;
  800a60:	0001883a 	nop
  800a64:	00000706 	br	800a84 <simple_tlc+0x228>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800a68:	0001883a 	nop
  800a6c:	00000506 	br	800a84 <simple_tlc+0x228>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800a70:	0001883a 	nop
  800a74:	00000306 	br	800a84 <simple_tlc+0x228>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800a78:	0001883a 	nop
  800a7c:	00000106 	br	800a84 <simple_tlc+0x228>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800a80:	0001883a 	nop
	}
}
  800a84:	0001883a 	nop
  800a88:	e037883a 	mov	sp,fp
  800a8c:	dfc00117 	ldw	ra,4(sp)
  800a90:	df000017 	ldw	fp,0(sp)
  800a94:	dec00204 	addi	sp,sp,8
  800a98:	f800283a 	ret

00800a9c <pedestrian_tlc>:

//implements the pedestrian traffic light controller
void pedestrian_tlc(){
  800a9c:	deffff04 	addi	sp,sp,-4
  800aa0:	df000015 	stw	fp,0(sp)
  800aa4:	d839883a 	mov	fp,sp
	 // Any state (pedNS and/or pedWE) that is in pressed state.
	 // Set respective running pedestrian signal back to idle on yellow light.
	switch(traffic){
  800aa8:	d0a75817 	ldw	r2,-25248(gp)
  800aac:	10c000a0 	cmpeqi	r3,r2,2
  800ab0:	1800181e 	bne	r3,zero,800b14 <pedestrian_tlc+0x78>
  800ab4:	10c000e8 	cmpgeui	r3,r2,3
  800ab8:	1800031e 	bne	r3,zero,800ac8 <pedestrian_tlc+0x2c>
  800abc:	10800060 	cmpeqi	r2,r2,1
  800ac0:	1000061e 	bne	r2,zero,800adc <pedestrian_tlc+0x40>
			if(pedWE == running){
				pedWE = idle;
			}
			break;
		default:
			break;
  800ac4:	00003206 	br	800b90 <pedestrian_tlc+0xf4>

//implements the pedestrian traffic light controller
void pedestrian_tlc(){
	 // Any state (pedNS and/or pedWE) that is in pressed state.
	 // Set respective running pedestrian signal back to idle on yellow light.
	switch(traffic){
  800ac8:	10c000e0 	cmpeqi	r3,r2,3
  800acc:	1800161e 	bne	r3,zero,800b28 <pedestrian_tlc+0x8c>
  800ad0:	10800120 	cmpeqi	r2,r2,4
  800ad4:	1000221e 	bne	r2,zero,800b60 <pedestrian_tlc+0xc4>
			if(pedWE == running){
				pedWE = idle;
			}
			break;
		default:
			break;
  800ad8:	00002d06 	br	800b90 <pedestrian_tlc+0xf4>
void pedestrian_tlc(){
	 // Any state (pedNS and/or pedWE) that is in pressed state.
	 // Set respective running pedestrian signal back to idle on yellow light.
	switch(traffic){
		case RG:
			if(pedNS == pressed && timeCountMain == 0){
  800adc:	d0a75317 	ldw	r2,-25268(gp)
  800ae0:	10800058 	cmpnei	r2,r2,1
  800ae4:	1000041e 	bne	r2,zero,800af8 <pedestrian_tlc+0x5c>
  800ae8:	d0a75917 	ldw	r2,-25244(gp)
  800aec:	1000021e 	bne	r2,zero,800af8 <pedestrian_tlc+0x5c>
				pedNS = running;
  800af0:	00800084 	movi	r2,2
  800af4:	d0a75315 	stw	r2,-25268(gp)
			}
			if(pedNS == running){
  800af8:	d0a75317 	ldw	r2,-25268(gp)
  800afc:	10800098 	cmpnei	r2,r2,2
  800b00:	10001c1e 	bne	r2,zero,800b74 <pedestrian_tlc+0xd8>
				LEDs = LEDs + PNS_G;
  800b04:	d0a74e17 	ldw	r2,-25288(gp)
  800b08:	10801004 	addi	r2,r2,64
  800b0c:	d0a74e15 	stw	r2,-25288(gp)
			}
			break;
  800b10:	00001806 	br	800b74 <pedestrian_tlc+0xd8>
		case RY:
			if(pedNS == running){
  800b14:	d0a75317 	ldw	r2,-25268(gp)
  800b18:	10800098 	cmpnei	r2,r2,2
  800b1c:	1000171e 	bne	r2,zero,800b7c <pedestrian_tlc+0xe0>
				pedNS = idle;
  800b20:	d0275315 	stw	zero,-25268(gp)
			}
			break;
  800b24:	00001506 	br	800b7c <pedestrian_tlc+0xe0>
		case GR:
			if(pedWE == pressed && timeCountMain == 0){
  800b28:	d0a75c17 	ldw	r2,-25232(gp)
  800b2c:	10800058 	cmpnei	r2,r2,1
  800b30:	1000041e 	bne	r2,zero,800b44 <pedestrian_tlc+0xa8>
  800b34:	d0a75917 	ldw	r2,-25244(gp)
  800b38:	1000021e 	bne	r2,zero,800b44 <pedestrian_tlc+0xa8>
				pedWE = running;
  800b3c:	00800084 	movi	r2,2
  800b40:	d0a75c15 	stw	r2,-25232(gp)
			}
			if(pedWE == running){
  800b44:	d0a75c17 	ldw	r2,-25232(gp)
  800b48:	10800098 	cmpnei	r2,r2,2
  800b4c:	10000d1e 	bne	r2,zero,800b84 <pedestrian_tlc+0xe8>
				LEDs = LEDs + PWE_G;
  800b50:	d0a74e17 	ldw	r2,-25288(gp)
  800b54:	10802004 	addi	r2,r2,128
  800b58:	d0a74e15 	stw	r2,-25288(gp)
			}
			break;
  800b5c:	00000906 	br	800b84 <pedestrian_tlc+0xe8>
		case YR:
			if(pedWE == running){
  800b60:	d0a75c17 	ldw	r2,-25232(gp)
  800b64:	10800098 	cmpnei	r2,r2,2
  800b68:	1000081e 	bne	r2,zero,800b8c <pedestrian_tlc+0xf0>
				pedWE = idle;
  800b6c:	d0275c15 	stw	zero,-25232(gp)
			}
			break;
  800b70:	00000606 	br	800b8c <pedestrian_tlc+0xf0>
				pedNS = running;
			}
			if(pedNS == running){
				LEDs = LEDs + PNS_G;
			}
			break;
  800b74:	0001883a 	nop
  800b78:	00000506 	br	800b90 <pedestrian_tlc+0xf4>
		case RY:
			if(pedNS == running){
				pedNS = idle;
			}
			break;
  800b7c:	0001883a 	nop
  800b80:	00000306 	br	800b90 <pedestrian_tlc+0xf4>
				pedWE = running;
			}
			if(pedWE == running){
				LEDs = LEDs + PWE_G;
			}
			break;
  800b84:	0001883a 	nop
  800b88:	00000106 	br	800b90 <pedestrian_tlc+0xf4>
		case YR:
			if(pedWE == running){
				pedWE = idle;
			}
			break;
  800b8c:	0001883a 	nop
		default:
			break;
	}
}
  800b90:	0001883a 	nop
  800b94:	e037883a 	mov	sp,fp
  800b98:	df000017 	ldw	fp,0(sp)
  800b9c:	dec00104 	addi	sp,sp,4
  800ba0:	f800283a 	ret

00800ba4 <configurable_tlc>:

//implements the configurable traffic light controller
void configurable_tlc(){
  800ba4:	defffe04 	addi	sp,sp,-8
  800ba8:	dfc00115 	stw	ra,4(sp)
  800bac:	df000015 	stw	fp,0(sp)
  800bb0:	d839883a 	mov	fp,sp
	switch(traffic){
  800bb4:	d0a75817 	ldw	r2,-25248(gp)
  800bb8:	10c00168 	cmpgeui	r3,r2,5
  800bbc:	18009e1e 	bne	r3,zero,800e38 <configurable_tlc+0x294>
  800bc0:	100690ba 	slli	r3,r2,2
  800bc4:	00802034 	movhi	r2,128
  800bc8:	1082f604 	addi	r2,r2,3032
  800bcc:	1885883a 	add	r2,r3,r2
  800bd0:	10800017 	ldw	r2,0(r2)
  800bd4:	1000683a 	jmp	r2
  800bd8:	00800bec 	andhi	r2,zero,47
  800bdc:	00800c9c 	xori	r2,zero,50
  800be0:	00800d04 	movi	r2,52
  800be4:	00800d58 	cmpnei	r2,zero,53
  800be8:	00800dc0 	call	800dc <__reset-0x77ff24>
		case RR:
			// Set green leds
			LEDs = TWE_R + TNS_R;
  800bec:	00800904 	movi	r2,36
  800bf0:	d0a74e15 	stw	r2,-25288(gp)

			// next traffic decides whether to go RG or GR
			if(next_traffic == NS && timeCountMain >= t[0]){
  800bf4:	d0a75717 	ldw	r2,-25252(gp)
  800bf8:	1000141e 	bne	r2,zero,800c4c <configurable_tlc+0xa8>
  800bfc:	00802074 	movhi	r2,129
  800c00:	108d5604 	addi	r2,r2,13656
  800c04:	10800017 	ldw	r2,0(r2)
  800c08:	d0e75917 	ldw	r3,-25244(gp)
  800c0c:	18800f16 	blt	r3,r2,800c4c <configurable_tlc+0xa8>
				traffic = RG;
  800c10:	00800044 	movi	r2,1
  800c14:	d0a75815 	stw	r2,-25248(gp)
				alt_alarm_stop(&timer);
  800c18:	01002074 	movhi	r4,129
  800c1c:	211bf904 	addi	r4,r4,28644
  800c20:	080f8fc0 	call	80f8fc <alt_alarm_stop>
				timeCountMain = 0;
  800c24:	d0275915 	stw	zero,-25244(gp)

				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800c28:	d0a75e17 	ldw	r2,-25224(gp)
  800c2c:	100f883a 	mov	r7,r2
  800c30:	01802034 	movhi	r6,128
  800c34:	3180db04 	addi	r6,r6,876
  800c38:	01401904 	movi	r5,100
  800c3c:	01002074 	movhi	r4,129
  800c40:	211bf904 	addi	r4,r4,28644
  800c44:	080ebec0 	call	80ebec <alt_alarm_start>
				timeCountMain = 0;

				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800c48:	00007206 	br	800e14 <configurable_tlc+0x270>
				alt_alarm_stop(&timer);
				timeCountMain = 0;

				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}else if(timeCountMain >= t[3]){
  800c4c:	00802074 	movhi	r2,129
  800c50:	108d5604 	addi	r2,r2,13656
  800c54:	10800317 	ldw	r2,12(r2)
  800c58:	d0e75917 	ldw	r3,-25244(gp)
  800c5c:	18806d16 	blt	r3,r2,800e14 <configurable_tlc+0x270>
				traffic = GR;
  800c60:	008000c4 	movi	r2,3
  800c64:	d0a75815 	stw	r2,-25248(gp)
				alt_alarm_stop(&timer);
  800c68:	01002074 	movhi	r4,129
  800c6c:	211bf904 	addi	r4,r4,28644
  800c70:	080f8fc0 	call	80f8fc <alt_alarm_stop>
				timeCountMain = 0;
  800c74:	d0275915 	stw	zero,-25244(gp)

				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800c78:	d0a75e17 	ldw	r2,-25224(gp)
  800c7c:	100f883a 	mov	r7,r2
  800c80:	01802034 	movhi	r6,128
  800c84:	3180db04 	addi	r6,r6,876
  800c88:	01401904 	movi	r5,100
  800c8c:	01002074 	movhi	r4,129
  800c90:	211bf904 	addi	r4,r4,28644
  800c94:	080ebec0 	call	80ebec <alt_alarm_start>
			}
			break;
  800c98:	00005e06 	br	800e14 <configurable_tlc+0x270>

		case RG:
			// Set green leds
			LEDs = TWE_R + TNS_G;
  800c9c:	00800844 	movi	r2,33
  800ca0:	d0a74e15 	stw	r2,-25288(gp)

			// Set next traffic not to re-do RG
			if(next_traffic == NS){
  800ca4:	d0a75717 	ldw	r2,-25252(gp)
  800ca8:	1000021e 	bne	r2,zero,800cb4 <configurable_tlc+0x110>
				next_traffic = WE;
  800cac:	00800044 	movi	r2,1
  800cb0:	d0a75715 	stw	r2,-25252(gp)
			}

			if(timeCountMain >= t[1]){
  800cb4:	00802074 	movhi	r2,129
  800cb8:	108d5604 	addi	r2,r2,13656
  800cbc:	10800117 	ldw	r2,4(r2)
  800cc0:	d0e75917 	ldw	r3,-25244(gp)
  800cc4:	18805516 	blt	r3,r2,800e1c <configurable_tlc+0x278>
				traffic = RY;
  800cc8:	00800084 	movi	r2,2
  800ccc:	d0a75815 	stw	r2,-25248(gp)

				alt_alarm_stop(&timer);
  800cd0:	01002074 	movhi	r4,129
  800cd4:	211bf904 	addi	r4,r4,28644
  800cd8:	080f8fc0 	call	80f8fc <alt_alarm_stop>
				timeCountMain = 0;
  800cdc:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800ce0:	d0a75e17 	ldw	r2,-25224(gp)
  800ce4:	100f883a 	mov	r7,r2
  800ce8:	01802034 	movhi	r6,128
  800cec:	3180db04 	addi	r6,r6,876
  800cf0:	01401904 	movi	r5,100
  800cf4:	01002074 	movhi	r4,129
  800cf8:	211bf904 	addi	r4,r4,28644
  800cfc:	080ebec0 	call	80ebec <alt_alarm_start>
			}
			break;
  800d00:	00004606 	br	800e1c <configurable_tlc+0x278>
		case RY:
			// Set green leds
			LEDs = TWE_R + TNS_Y;
  800d04:	00800884 	movi	r2,34
  800d08:	d0a74e15 	stw	r2,-25288(gp)

			if(timeCountMain >= t[2]){
  800d0c:	00802074 	movhi	r2,129
  800d10:	108d5604 	addi	r2,r2,13656
  800d14:	10800217 	ldw	r2,8(r2)
  800d18:	d0e75917 	ldw	r3,-25244(gp)
  800d1c:	18804116 	blt	r3,r2,800e24 <configurable_tlc+0x280>
				traffic = RR;
  800d20:	d0275815 	stw	zero,-25248(gp)

				alt_alarm_stop(&timer);
  800d24:	01002074 	movhi	r4,129
  800d28:	211bf904 	addi	r4,r4,28644
  800d2c:	080f8fc0 	call	80f8fc <alt_alarm_stop>
				timeCountMain = 0;
  800d30:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800d34:	d0a75e17 	ldw	r2,-25224(gp)
  800d38:	100f883a 	mov	r7,r2
  800d3c:	01802034 	movhi	r6,128
  800d40:	3180db04 	addi	r6,r6,876
  800d44:	01401904 	movi	r5,100
  800d48:	01002074 	movhi	r4,129
  800d4c:	211bf904 	addi	r4,r4,28644
  800d50:	080ebec0 	call	80ebec <alt_alarm_start>
			}
			break;
  800d54:	00003306 	br	800e24 <configurable_tlc+0x280>
		case GR:
			// Set green leds
			LEDs = TWE_G + TNS_R;
  800d58:	00800304 	movi	r2,12
  800d5c:	d0a74e15 	stw	r2,-25288(gp)

			// Set next traffic not to re-do GR
			if(next_traffic == WE){
  800d60:	d0a75717 	ldw	r2,-25252(gp)
  800d64:	10800058 	cmpnei	r2,r2,1
  800d68:	1000011e 	bne	r2,zero,800d70 <configurable_tlc+0x1cc>
				next_traffic = NS;
  800d6c:	d0275715 	stw	zero,-25252(gp)
			}
			if(timeCountMain >= t[4]){
  800d70:	00802074 	movhi	r2,129
  800d74:	108d5604 	addi	r2,r2,13656
  800d78:	10800417 	ldw	r2,16(r2)
  800d7c:	d0e75917 	ldw	r3,-25244(gp)
  800d80:	18802a16 	blt	r3,r2,800e2c <configurable_tlc+0x288>
				traffic = YR;
  800d84:	00800104 	movi	r2,4
  800d88:	d0a75815 	stw	r2,-25248(gp)

				alt_alarm_stop(&timer);
  800d8c:	01002074 	movhi	r4,129
  800d90:	211bf904 	addi	r4,r4,28644
  800d94:	080f8fc0 	call	80f8fc <alt_alarm_stop>
				timeCountMain = 0;
  800d98:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800d9c:	d0a75e17 	ldw	r2,-25224(gp)
  800da0:	100f883a 	mov	r7,r2
  800da4:	01802034 	movhi	r6,128
  800da8:	3180db04 	addi	r6,r6,876
  800dac:	01401904 	movi	r5,100
  800db0:	01002074 	movhi	r4,129
  800db4:	211bf904 	addi	r4,r4,28644
  800db8:	080ebec0 	call	80ebec <alt_alarm_start>
			}
			break;
  800dbc:	00001b06 	br	800e2c <configurable_tlc+0x288>
		case YR:
			// Set green leds
			LEDs = TWE_Y + TNS_R;
  800dc0:	00800504 	movi	r2,20
  800dc4:	d0a74e15 	stw	r2,-25288(gp)

			if(timeCountMain >= t[5]){
  800dc8:	00802074 	movhi	r2,129
  800dcc:	108d5604 	addi	r2,r2,13656
  800dd0:	10800517 	ldw	r2,20(r2)
  800dd4:	d0e75917 	ldw	r3,-25244(gp)
  800dd8:	18801616 	blt	r3,r2,800e34 <configurable_tlc+0x290>
				traffic = RR;
  800ddc:	d0275815 	stw	zero,-25248(gp)

				alt_alarm_stop(&timer);
  800de0:	01002074 	movhi	r4,129
  800de4:	211bf904 	addi	r4,r4,28644
  800de8:	080f8fc0 	call	80f8fc <alt_alarm_stop>
				timeCountMain = 0;
  800dec:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800df0:	d0a75e17 	ldw	r2,-25224(gp)
  800df4:	100f883a 	mov	r7,r2
  800df8:	01802034 	movhi	r6,128
  800dfc:	3180db04 	addi	r6,r6,876
  800e00:	01401904 	movi	r5,100
  800e04:	01002074 	movhi	r4,129
  800e08:	211bf904 	addi	r4,r4,28644
  800e0c:	080ebec0 	call	80ebec <alt_alarm_start>
			}
			break;
  800e10:	00000806 	br	800e34 <configurable_tlc+0x290>
				timeCountMain = 0;

				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800e14:	0001883a 	nop
  800e18:	00000706 	br	800e38 <configurable_tlc+0x294>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800e1c:	0001883a 	nop
  800e20:	00000506 	br	800e38 <configurable_tlc+0x294>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800e24:	0001883a 	nop
  800e28:	00000306 	br	800e38 <configurable_tlc+0x294>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800e2c:	0001883a 	nop
  800e30:	00000106 	br	800e38 <configurable_tlc+0x294>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800e34:	0001883a 	nop
	}
}
  800e38:	0001883a 	nop
  800e3c:	e037883a 	mov	sp,fp
  800e40:	dfc00117 	ldw	ra,4(sp)
  800e44:	df000017 	ldw	fp,0(sp)
  800e48:	dec00204 	addi	sp,sp,8
  800e4c:	f800283a 	ret

00800e50 <camera_tlc>:

//implements the traffic light controller with integrated camera
void camera_tlc(){
  800e50:	defffc04 	addi	sp,sp,-16
  800e54:	dfc00315 	stw	ra,12(sp)
  800e58:	df000215 	stw	fp,8(sp)
  800e5c:	dc400115 	stw	r17,4(sp)
  800e60:	dc000015 	stw	r16,0(sp)
  800e64:	df000204 	addi	fp,sp,8
	if(timeCountCamera >= 20 && cam_0 == monitoring){
  800e68:	d0a75417 	ldw	r2,-25264(gp)
  800e6c:	10800510 	cmplti	r2,r2,20
  800e70:	10000e1e 	bne	r2,zero,800eac <camera_tlc+0x5c>
  800e74:	d0a75117 	ldw	r2,-25276(gp)
  800e78:	10800058 	cmpnei	r2,r2,1
  800e7c:	10000b1e 	bne	r2,zero,800eac <camera_tlc+0x5c>
		if(uart != NULL){
  800e80:	d0a75b17 	ldw	r2,-25236(gp)
  800e84:	10000726 	beq	r2,zero,800ea4 <camera_tlc+0x54>
			fprintf(uart, "Snapshot Taken!\r\n");
  800e88:	d0a75b17 	ldw	r2,-25236(gp)
  800e8c:	100f883a 	mov	r7,r2
  800e90:	01800444 	movi	r6,17
  800e94:	01400044 	movi	r5,1
  800e98:	01002074 	movhi	r4,129
  800e9c:	210bcf04 	addi	r4,r4,12092
  800ea0:	08023640 	call	802364 <fwrite>
		}
		cam_0 = taken;
  800ea4:	00800084 	movi	r2,2
  800ea8:	d0a75115 	stw	r2,-25276(gp)
	}
	switch(traffic){
  800eac:	d0a75817 	ldw	r2,-25248(gp)
  800eb0:	10c000a0 	cmpeqi	r3,r2,2
  800eb4:	18003f1e 	bne	r3,zero,800fb4 <camera_tlc+0x164>
  800eb8:	10800120 	cmpeqi	r2,r2,4
  800ebc:	10007a26 	beq	r2,zero,8010a8 <camera_tlc+0x258>
		case YR:

			// Check that car has entered/exited

			//First if statement checks for recent change in car action.
			if(car_action == entered && previous_car_action != car_action){
  800ec0:	d0a75d17 	ldw	r2,-25228(gp)
  800ec4:	1000171e 	bne	r2,zero,800f24 <camera_tlc+0xd4>
  800ec8:	d0e75f17 	ldw	r3,-25220(gp)
  800ecc:	d0a75d17 	ldw	r2,-25228(gp)
  800ed0:	18801426 	beq	r3,r2,800f24 <camera_tlc+0xd4>
				if(uart != NULL){
  800ed4:	d0a75b17 	ldw	r2,-25236(gp)
  800ed8:	10000726 	beq	r2,zero,800ef8 <camera_tlc+0xa8>
					fprintf(uart, "Camera activated\r\n");
  800edc:	d0a75b17 	ldw	r2,-25236(gp)
  800ee0:	100f883a 	mov	r7,r2
  800ee4:	01800484 	movi	r6,18
  800ee8:	01400044 	movi	r5,1
  800eec:	01002074 	movhi	r4,129
  800ef0:	210bd404 	addi	r4,r4,12112
  800ef4:	08023640 	call	802364 <fwrite>
				}
				alt_alarm_start(&timer1, 100, camera_timer_isr, timerCameraContext);
  800ef8:	d0a75517 	ldw	r2,-25260(gp)
  800efc:	100f883a 	mov	r7,r2
  800f00:	01802034 	movhi	r6,128
  800f04:	3180eb04 	addi	r6,r6,940
  800f08:	01401904 	movi	r5,100
  800f0c:	01002074 	movhi	r4,129
  800f10:	211bff04 	addi	r4,r4,28668
  800f14:	080ebec0 	call	80ebec <alt_alarm_start>
				cam_0 = monitoring;
  800f18:	00800044 	movi	r2,1
  800f1c:	d0a75115 	stw	r2,-25276(gp)

				alt_alarm_stop(&timer1);
				timeCountCamera = 0;
				cam_0 = standby;
			}
			break;
  800f20:	0000a506 	br	8011b8 <camera_tlc+0x368>
				}
				alt_alarm_start(&timer1, 100, camera_timer_isr, timerCameraContext);
				cam_0 = monitoring;

			//Check that the car has exited. Report time taken
			}else if(cam_0 != standby && car_action == exited){
  800f24:	d0a75117 	ldw	r2,-25276(gp)
  800f28:	1000a326 	beq	r2,zero,8011b8 <camera_tlc+0x368>
  800f2c:	d0a75d17 	ldw	r2,-25228(gp)
  800f30:	10800058 	cmpnei	r2,r2,1
  800f34:	1000a01e 	bne	r2,zero,8011b8 <camera_tlc+0x368>
				if(uart != NULL){
  800f38:	d0a75b17 	ldw	r2,-25236(gp)
  800f3c:	10001726 	beq	r2,zero,800f9c <camera_tlc+0x14c>
					fprintf(uart, "Vehicle left\r\n");
  800f40:	d0a75b17 	ldw	r2,-25236(gp)
  800f44:	100f883a 	mov	r7,r2
  800f48:	01800384 	movi	r6,14
  800f4c:	01400044 	movi	r5,1
  800f50:	01002074 	movhi	r4,129
  800f54:	210bd904 	addi	r4,r4,12132
  800f58:	08023640 	call	802364 <fwrite>
					fprintf(uart, "Vehicle time in intersection taken: %d.%d seconds\r\n\n",
  800f5c:	d4275b17 	ldw	r16,-25236(gp)
  800f60:	d0a75417 	ldw	r2,-25264(gp)
  800f64:	01400284 	movi	r5,10
  800f68:	1009883a 	mov	r4,r2
  800f6c:	08013d80 	call	8013d8 <__divsi3>
  800f70:	1023883a 	mov	r17,r2
  800f74:	d0a75417 	ldw	r2,-25264(gp)
  800f78:	01400284 	movi	r5,10
  800f7c:	1009883a 	mov	r4,r2
  800f80:	080145c0 	call	80145c <__modsi3>
  800f84:	100f883a 	mov	r7,r2
  800f88:	880d883a 	mov	r6,r17
  800f8c:	01402074 	movhi	r5,129
  800f90:	294bdd04 	addi	r5,r5,12148
  800f94:	8009883a 	mov	r4,r16
  800f98:	0801b700 	call	801b70 <fprintf>
											timeCountCamera / 10, timeCountCamera % 10);
				}

				alt_alarm_stop(&timer1);
  800f9c:	01002074 	movhi	r4,129
  800fa0:	211bff04 	addi	r4,r4,28668
  800fa4:	080f8fc0 	call	80f8fc <alt_alarm_stop>
				timeCountCamera = 0;
  800fa8:	d0275415 	stw	zero,-25264(gp)
				cam_0 = standby;
  800fac:	d0275115 	stw	zero,-25276(gp)
			}
			break;
  800fb0:	00008106 	br	8011b8 <camera_tlc+0x368>

		case RY:
			// Check that car has entered/exited

			//First if statement checks for recent change in car action.
			if(car_action == entered && previous_car_action != car_action){
  800fb4:	d0a75d17 	ldw	r2,-25228(gp)
  800fb8:	1000171e 	bne	r2,zero,801018 <camera_tlc+0x1c8>
  800fbc:	d0e75f17 	ldw	r3,-25220(gp)
  800fc0:	d0a75d17 	ldw	r2,-25228(gp)
  800fc4:	18801426 	beq	r3,r2,801018 <camera_tlc+0x1c8>
				if(uart != NULL){
  800fc8:	d0a75b17 	ldw	r2,-25236(gp)
  800fcc:	10000726 	beq	r2,zero,800fec <camera_tlc+0x19c>
					fprintf(uart, "Camera activated\r\n");
  800fd0:	d0a75b17 	ldw	r2,-25236(gp)
  800fd4:	100f883a 	mov	r7,r2
  800fd8:	01800484 	movi	r6,18
  800fdc:	01400044 	movi	r5,1
  800fe0:	01002074 	movhi	r4,129
  800fe4:	210bd404 	addi	r4,r4,12112
  800fe8:	08023640 	call	802364 <fwrite>
				}
				alt_alarm_start(&timer1, 100, camera_timer_isr, timerCameraContext);
  800fec:	d0a75517 	ldw	r2,-25260(gp)
  800ff0:	100f883a 	mov	r7,r2
  800ff4:	01802034 	movhi	r6,128
  800ff8:	3180eb04 	addi	r6,r6,940
  800ffc:	01401904 	movi	r5,100
  801000:	01002074 	movhi	r4,129
  801004:	211bff04 	addi	r4,r4,28668
  801008:	080ebec0 	call	80ebec <alt_alarm_start>
				cam_0 = monitoring;
  80100c:	00800044 	movi	r2,1
  801010:	d0a75115 	stw	r2,-25276(gp)
				}
				alt_alarm_stop(&timer1);
				timeCountCamera = 0;
				cam_0 = standby;
			}
			break;
  801014:	00006a06 	br	8011c0 <camera_tlc+0x370>
				}
				alt_alarm_start(&timer1, 100, camera_timer_isr, timerCameraContext);
				cam_0 = monitoring;

			//Check that the car has exited. Report time taken
			}else if(cam_0 != standby && car_action == exited){
  801018:	d0a75117 	ldw	r2,-25276(gp)
  80101c:	10006826 	beq	r2,zero,8011c0 <camera_tlc+0x370>
  801020:	d0a75d17 	ldw	r2,-25228(gp)
  801024:	10800058 	cmpnei	r2,r2,1
  801028:	1000651e 	bne	r2,zero,8011c0 <camera_tlc+0x370>
				if(uart != NULL){
  80102c:	d0a75b17 	ldw	r2,-25236(gp)
  801030:	10001726 	beq	r2,zero,801090 <camera_tlc+0x240>
					fprintf(uart, "Vehicle left\r\n");
  801034:	d0a75b17 	ldw	r2,-25236(gp)
  801038:	100f883a 	mov	r7,r2
  80103c:	01800384 	movi	r6,14
  801040:	01400044 	movi	r5,1
  801044:	01002074 	movhi	r4,129
  801048:	210bd904 	addi	r4,r4,12132
  80104c:	08023640 	call	802364 <fwrite>
					fprintf(uart, "Vehicle time in intersection taken: %d.%d seconds\r\n\n",
  801050:	d4275b17 	ldw	r16,-25236(gp)
  801054:	d0a75417 	ldw	r2,-25264(gp)
  801058:	01400284 	movi	r5,10
  80105c:	1009883a 	mov	r4,r2
  801060:	08013d80 	call	8013d8 <__divsi3>
  801064:	1023883a 	mov	r17,r2
  801068:	d0a75417 	ldw	r2,-25264(gp)
  80106c:	01400284 	movi	r5,10
  801070:	1009883a 	mov	r4,r2
  801074:	080145c0 	call	80145c <__modsi3>
  801078:	100f883a 	mov	r7,r2
  80107c:	880d883a 	mov	r6,r17
  801080:	01402074 	movhi	r5,129
  801084:	294bdd04 	addi	r5,r5,12148
  801088:	8009883a 	mov	r4,r16
  80108c:	0801b700 	call	801b70 <fprintf>
											timeCountCamera / 10, timeCountCamera % 10);
				}
				alt_alarm_stop(&timer1);
  801090:	01002074 	movhi	r4,129
  801094:	211bff04 	addi	r4,r4,28668
  801098:	080f8fc0 	call	80f8fc <alt_alarm_stop>
				timeCountCamera = 0;
  80109c:	d0275415 	stw	zero,-25264(gp)
				cam_0 = standby;
  8010a0:	d0275115 	stw	zero,-25276(gp)
			}
			break;
  8010a4:	00004606 	br	8011c0 <camera_tlc+0x370>
			 * Other states such as RG, GR and RR.
			 * Take picture immediately when car passes on button click.
			 */

			// Check for change in car action.
			if(previous_car_action != car_action){
  8010a8:	d0e75f17 	ldw	r3,-25220(gp)
  8010ac:	d0a75d17 	ldw	r2,-25228(gp)
  8010b0:	18804526 	beq	r3,r2,8011c8 <camera_tlc+0x378>

				//Check that the snapshot is not taken and changed to entered state.
				if(car_action == entered && cam_0 == standby){
  8010b4:	d0a75d17 	ldw	r2,-25228(gp)
  8010b8:	10001d1e 	bne	r2,zero,801130 <camera_tlc+0x2e0>
  8010bc:	d0a75117 	ldw	r2,-25276(gp)
  8010c0:	10001b1e 	bne	r2,zero,801130 <camera_tlc+0x2e0>
					alt_alarm_start(&timer1, 100, camera_timer_isr, timerCameraContext);
  8010c4:	d0a75517 	ldw	r2,-25260(gp)
  8010c8:	100f883a 	mov	r7,r2
  8010cc:	01802034 	movhi	r6,128
  8010d0:	3180eb04 	addi	r6,r6,940
  8010d4:	01401904 	movi	r5,100
  8010d8:	01002074 	movhi	r4,129
  8010dc:	211bff04 	addi	r4,r4,28668
  8010e0:	080ebec0 	call	80ebec <alt_alarm_start>
					if(uart != NULL){
  8010e4:	d0a75b17 	ldw	r2,-25236(gp)
  8010e8:	10000e26 	beq	r2,zero,801124 <camera_tlc+0x2d4>
						fprintf(uart, "Camera activated\r\n");
  8010ec:	d0a75b17 	ldw	r2,-25236(gp)
  8010f0:	100f883a 	mov	r7,r2
  8010f4:	01800484 	movi	r6,18
  8010f8:	01400044 	movi	r5,1
  8010fc:	01002074 	movhi	r4,129
  801100:	210bd404 	addi	r4,r4,12112
  801104:	08023640 	call	802364 <fwrite>
						fprintf(uart, "Snapshot Taken!\r\n");
  801108:	d0a75b17 	ldw	r2,-25236(gp)
  80110c:	100f883a 	mov	r7,r2
  801110:	01800444 	movi	r6,17
  801114:	01400044 	movi	r5,1
  801118:	01002074 	movhi	r4,129
  80111c:	210bcf04 	addi	r4,r4,12092
  801120:	08023640 	call	802364 <fwrite>
					}
					cam_0 = taken;
  801124:	00800084 	movi	r2,2
  801128:	d0a75115 	stw	r2,-25276(gp)
					timeCountCamera = 0;
					cam_0 = standby;
				}
			}

			break;
  80112c:	00002606 	br	8011c8 <camera_tlc+0x378>
						fprintf(uart, "Snapshot Taken!\r\n");
					}
					cam_0 = taken;

				//Anytime the vehicle exits
				}else if(car_action == exited){
  801130:	d0a75d17 	ldw	r2,-25228(gp)
  801134:	10800058 	cmpnei	r2,r2,1
  801138:	1000231e 	bne	r2,zero,8011c8 <camera_tlc+0x378>
					if(uart != NULL){
  80113c:	d0a75b17 	ldw	r2,-25236(gp)
  801140:	10001726 	beq	r2,zero,8011a0 <camera_tlc+0x350>
						fprintf(uart, "Vehicle left\r\n");
  801144:	d0a75b17 	ldw	r2,-25236(gp)
  801148:	100f883a 	mov	r7,r2
  80114c:	01800384 	movi	r6,14
  801150:	01400044 	movi	r5,1
  801154:	01002074 	movhi	r4,129
  801158:	210bd904 	addi	r4,r4,12132
  80115c:	08023640 	call	802364 <fwrite>
						fprintf(uart, "Vehicle time in intersection taken: %d.%d seconds\r\n\n",
  801160:	d4275b17 	ldw	r16,-25236(gp)
  801164:	d0a75417 	ldw	r2,-25264(gp)
  801168:	01400284 	movi	r5,10
  80116c:	1009883a 	mov	r4,r2
  801170:	08013d80 	call	8013d8 <__divsi3>
  801174:	1023883a 	mov	r17,r2
  801178:	d0a75417 	ldw	r2,-25264(gp)
  80117c:	01400284 	movi	r5,10
  801180:	1009883a 	mov	r4,r2
  801184:	080145c0 	call	80145c <__modsi3>
  801188:	100f883a 	mov	r7,r2
  80118c:	880d883a 	mov	r6,r17
  801190:	01402074 	movhi	r5,129
  801194:	294bdd04 	addi	r5,r5,12148
  801198:	8009883a 	mov	r4,r16
  80119c:	0801b700 	call	801b70 <fprintf>
												timeCountCamera / 10, timeCountCamera % 10);
					}
					alt_alarm_stop(&timer1);
  8011a0:	01002074 	movhi	r4,129
  8011a4:	211bff04 	addi	r4,r4,28668
  8011a8:	080f8fc0 	call	80f8fc <alt_alarm_stop>
					timeCountCamera = 0;
  8011ac:	d0275415 	stw	zero,-25264(gp)
					cam_0 = standby;
  8011b0:	d0275115 	stw	zero,-25276(gp)
				}
			}

			break;
  8011b4:	00000406 	br	8011c8 <camera_tlc+0x378>

				alt_alarm_stop(&timer1);
				timeCountCamera = 0;
				cam_0 = standby;
			}
			break;
  8011b8:	0001883a 	nop
  8011bc:	00000306 	br	8011cc <camera_tlc+0x37c>
				}
				alt_alarm_stop(&timer1);
				timeCountCamera = 0;
				cam_0 = standby;
			}
			break;
  8011c0:	0001883a 	nop
  8011c4:	00000106 	br	8011cc <camera_tlc+0x37c>
					timeCountCamera = 0;
					cam_0 = standby;
				}
			}

			break;
  8011c8:	0001883a 	nop
	}
	previous_car_action = car_action;
  8011cc:	d0a75d17 	ldw	r2,-25228(gp)
  8011d0:	d0a75f15 	stw	r2,-25220(gp)
}
  8011d4:	0001883a 	nop
  8011d8:	e6fffe04 	addi	sp,fp,-8
  8011dc:	dfc00317 	ldw	ra,12(sp)
  8011e0:	df000217 	ldw	fp,8(sp)
  8011e4:	dc400117 	ldw	r17,4(sp)
  8011e8:	dc000017 	ldw	r16,0(sp)
  8011ec:	dec00404 	addi	sp,sp,16
  8011f0:	f800283a 	ret

008011f4 <main>:




int main() {
  8011f4:	defffe04 	addi	sp,sp,-8
  8011f8:	dfc00115 	stw	ra,4(sp)
  8011fc:	df000015 	stw	fp,0(sp)
  801200:	d839883a 	mov	fp,sp
	// Initialise
	car_action = exited;
  801204:	00800044 	movi	r2,1
  801208:	d0a75d15 	stw	r2,-25228(gp)
	previous_car_action = exited;
  80120c:	00800044 	movi	r2,1
  801210:	d0a75f15 	stw	r2,-25220(gp)
	pedNS = idle;
  801214:	d0275315 	stw	zero,-25268(gp)
	pedWE = idle;
  801218:	d0275c15 	stw	zero,-25232(gp)
	traffic = RR;
  80121c:	d0275815 	stw	zero,-25248(gp)
	next_traffic = NS;
  801220:	d0275715 	stw	zero,-25252(gp)
	cam_0 = standby;
  801224:	d0275115 	stw	zero,-25276(gp)

	/*
	 * Make sure only the 2 switches on the right will change the mode of the simulation.
	 * +1 will make sure mode is {1,2,3,4}.
	 */
	mode = (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) % 4) + 1;
  801228:	00804074 	movhi	r2,257
  80122c:	10842804 	addi	r2,r2,4256
  801230:	10c00037 	ldwio	r3,0(r2)
  801234:	00a00034 	movhi	r2,32768
  801238:	108000c4 	addi	r2,r2,3
  80123c:	1884703a 	and	r2,r3,r2
  801240:	1000040e 	bge	r2,zero,801254 <main+0x60>
  801244:	10bfffc4 	addi	r2,r2,-1
  801248:	00ffff04 	movi	r3,-4
  80124c:	10c4b03a 	or	r2,r2,r3
  801250:	10800044 	addi	r2,r2,1
  801254:	10800044 	addi	r2,r2,1
  801258:	d0a75615 	stw	r2,-25256(gp)

	lcd = fopen(LCD_NAME, "w");
  80125c:	01402074 	movhi	r5,129
  801260:	294beb04 	addi	r5,r5,12204
  801264:	01002074 	movhi	r4,129
  801268:	210bec04 	addi	r4,r4,12208
  80126c:	0801b300 	call	801b30 <fopen>
  801270:	d0a75215 	stw	r2,-25272(gp)
	uart = fopen(UART_NAME, "r+");
  801274:	01402074 	movhi	r5,129
  801278:	294bef04 	addi	r5,r5,12220
  80127c:	01002074 	movhi	r4,129
  801280:	210bf004 	addi	r4,r4,12224
  801284:	0801b300 	call	801b30 <fopen>
  801288:	d0a75b15 	stw	r2,-25236(gp)

	/*
	 * Buttons Interrupt Setup
	 */
	context_going_to_be_passed = (void*) &buttonValue;
  80128c:	d0a74f04 	addi	r2,gp,-25284
  801290:	d0a76015 	stw	r2,-25216(gp)
	// clears the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  801294:	0007883a 	mov	r3,zero
  801298:	00804074 	movhi	r2,257
  80129c:	10842704 	addi	r2,r2,4252
  8012a0:	10c00035 	stwio	r3,0(r2)
	// enable interrupts for all buttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);
  8012a4:	00c001c4 	movi	r3,7
  8012a8:	00804074 	movhi	r2,257
  8012ac:	10842604 	addi	r2,r2,4248
  8012b0:	10c00035 	stwio	r3,0(r2)
	// register the ISR
	alt_irq_register(KEYS_IRQ,context_going_to_be_passed,init_buttons_pio);
  8012b4:	d0a76017 	ldw	r2,-25216(gp)
  8012b8:	01802034 	movhi	r6,128
  8012bc:	3180a404 	addi	r6,r6,656
  8012c0:	100b883a 	mov	r5,r2
  8012c4:	0009883a 	mov	r4,zero
  8012c8:	080ef3c0 	call	80ef3c <alt_irq_register>

	/*
	 * Timer interrupt Setup
	 */
	// start the tlc timer, with timeout of 100 milli-seconds
	timeCountMain = 0;
  8012cc:	d0275915 	stw	zero,-25244(gp)
	timerContext = (void*) &timeCountMain;
  8012d0:	d0a75904 	addi	r2,gp,-25244
  8012d4:	d0a75e15 	stw	r2,-25224(gp)
	alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  8012d8:	d0a75e17 	ldw	r2,-25224(gp)
  8012dc:	100f883a 	mov	r7,r2
  8012e0:	01802034 	movhi	r6,128
  8012e4:	3180db04 	addi	r6,r6,876
  8012e8:	01401904 	movi	r5,100
  8012ec:	01002074 	movhi	r4,129
  8012f0:	211bf904 	addi	r4,r4,28644
  8012f4:	080ebec0 	call	80ebec <alt_alarm_start>

	timeCountCamera = 0;
  8012f8:	d0275415 	stw	zero,-25264(gp)
	timerCameraContext = (void*) &timeCountCamera;
  8012fc:	d0a75404 	addi	r2,gp,-25264
  801300:	d0a75515 	stw	r2,-25260(gp)
		 * This function gets the switches setup and prints the value of mode on LCD.
		 * LCD re-print only happens when the mode has changed.
		 * The mode can only change in the condition that traffic state is on RR.
		 * Reset some settings to initial when switches changed.
		 */
		if(traffic == RR){
  801304:	d0a75817 	ldw	r2,-25248(gp)
  801308:	1000181e 	bne	r2,zero,80136c <main+0x178>
			mode = (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) % 4) + 1;
  80130c:	00804074 	movhi	r2,257
  801310:	10842804 	addi	r2,r2,4256
  801314:	10c00037 	ldwio	r3,0(r2)
  801318:	00a00034 	movhi	r2,32768
  80131c:	108000c4 	addi	r2,r2,3
  801320:	1884703a 	and	r2,r3,r2
  801324:	1000040e 	bge	r2,zero,801338 <main+0x144>
  801328:	10bfffc4 	addi	r2,r2,-1
  80132c:	00ffff04 	movi	r3,-4
  801330:	10c4b03a 	or	r2,r2,r3
  801334:	10800044 	addi	r2,r2,1
  801338:	10800044 	addi	r2,r2,1
  80133c:	d0a75615 	stw	r2,-25256(gp)
			if(mode != previousMode){
  801340:	d0e75617 	ldw	r3,-25256(gp)
  801344:	d0a75a17 	ldw	r2,-25240(gp)
  801348:	18800626 	beq	r3,r2,801364 <main+0x170>
				lcd_set_mode(mode);
  80134c:	d0a75617 	ldw	r2,-25256(gp)
  801350:	1009883a 	mov	r4,r2
  801354:	08003ec0 	call	8003ec <lcd_set_mode>
				car_action = exited;
  801358:	00800044 	movi	r2,1
  80135c:	d0a75d15 	stw	r2,-25228(gp)
				settings_made = 0;
  801360:	d0275015 	stw	zero,-25280(gp)
			}
			previousMode = mode;
  801364:	d0a75617 	ldw	r2,-25256(gp)
  801368:	d0a75a15 	stw	r2,-25240(gp)

		/*
		 * Different modes
		 */
		// If mode is not 3 because modes 1, 2 and 4 uses simple_tlc
		if(mode != 3){
  80136c:	d0a75617 	ldw	r2,-25256(gp)
  801370:	108000e0 	cmpeqi	r2,r2,3
  801374:	10000a1e 	bne	r2,zero,8013a0 <main+0x1ac>
			simple_tlc();
  801378:	080085c0 	call	80085c <simple_tlc>

			//Only mode one does not utilise pedestrian crossing
			if(mode == 2){
  80137c:	d0a75617 	ldw	r2,-25256(gp)
  801380:	10800098 	cmpnei	r2,r2,2
  801384:	1000011e 	bne	r2,zero,80138c <main+0x198>
				pedestrian_tlc();
  801388:	0800a9c0 	call	800a9c <pedestrian_tlc>
			}
			if(mode == 4){
  80138c:	d0a75617 	ldw	r2,-25256(gp)
  801390:	10800118 	cmpnei	r2,r2,4
  801394:	10000b1e 	bne	r2,zero,8013c4 <main+0x1d0>
				camera_tlc();
  801398:	0800e500 	call	800e50 <camera_tlc>
  80139c:	00000906 	br	8013c4 <main+0x1d0>
			}
		}else{
			if(traffic == RR && IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 6 ){
  8013a0:	d0a75817 	ldw	r2,-25248(gp)
  8013a4:	1000061e 	bne	r2,zero,8013c0 <main+0x1cc>
  8013a8:	00804074 	movhi	r2,257
  8013ac:	10842804 	addi	r2,r2,4256
  8013b0:	10800037 	ldwio	r2,0(r2)
  8013b4:	10800198 	cmpnei	r2,r2,6
  8013b8:	1000011e 	bne	r2,zero,8013c0 <main+0x1cc>
				timeout_data_handler();
  8013bc:	08004580 	call	800458 <timeout_data_handler>
			}
			configurable_tlc();
  8013c0:	0800ba40 	call	800ba4 <configurable_tlc>

		}


		//Turns on LEDs based on TLC
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, LEDs);
  8013c4:	d0e74e17 	ldw	r3,-25288(gp)
  8013c8:	00804074 	movhi	r2,257
  8013cc:	10842004 	addi	r2,r2,4224
  8013d0:	10c00035 	stwio	r3,0(r2)

	}
  8013d4:	003fcb06 	br	801304 <__alt_mem_onchip_mem+0xff7f9304>

008013d8 <__divsi3>:
  8013d8:	20001b16 	blt	r4,zero,801448 <__divsi3+0x70>
  8013dc:	000f883a 	mov	r7,zero
  8013e0:	28001616 	blt	r5,zero,80143c <__divsi3+0x64>
  8013e4:	200d883a 	mov	r6,r4
  8013e8:	29001a2e 	bgeu	r5,r4,801454 <__divsi3+0x7c>
  8013ec:	00800804 	movi	r2,32
  8013f0:	00c00044 	movi	r3,1
  8013f4:	00000106 	br	8013fc <__divsi3+0x24>
  8013f8:	10000d26 	beq	r2,zero,801430 <__divsi3+0x58>
  8013fc:	294b883a 	add	r5,r5,r5
  801400:	10bfffc4 	addi	r2,r2,-1
  801404:	18c7883a 	add	r3,r3,r3
  801408:	293ffb36 	bltu	r5,r4,8013f8 <__alt_mem_onchip_mem+0xff7f93f8>
  80140c:	0005883a 	mov	r2,zero
  801410:	18000726 	beq	r3,zero,801430 <__divsi3+0x58>
  801414:	0005883a 	mov	r2,zero
  801418:	31400236 	bltu	r6,r5,801424 <__divsi3+0x4c>
  80141c:	314dc83a 	sub	r6,r6,r5
  801420:	10c4b03a 	or	r2,r2,r3
  801424:	1806d07a 	srli	r3,r3,1
  801428:	280ad07a 	srli	r5,r5,1
  80142c:	183ffa1e 	bne	r3,zero,801418 <__alt_mem_onchip_mem+0xff7f9418>
  801430:	38000126 	beq	r7,zero,801438 <__divsi3+0x60>
  801434:	0085c83a 	sub	r2,zero,r2
  801438:	f800283a 	ret
  80143c:	014bc83a 	sub	r5,zero,r5
  801440:	39c0005c 	xori	r7,r7,1
  801444:	003fe706 	br	8013e4 <__alt_mem_onchip_mem+0xff7f93e4>
  801448:	0109c83a 	sub	r4,zero,r4
  80144c:	01c00044 	movi	r7,1
  801450:	003fe306 	br	8013e0 <__alt_mem_onchip_mem+0xff7f93e0>
  801454:	00c00044 	movi	r3,1
  801458:	003fee06 	br	801414 <__alt_mem_onchip_mem+0xff7f9414>

0080145c <__modsi3>:
  80145c:	20001716 	blt	r4,zero,8014bc <__modsi3+0x60>
  801460:	000f883a 	mov	r7,zero
  801464:	2005883a 	mov	r2,r4
  801468:	28001216 	blt	r5,zero,8014b4 <__modsi3+0x58>
  80146c:	2900162e 	bgeu	r5,r4,8014c8 <__modsi3+0x6c>
  801470:	01800804 	movi	r6,32
  801474:	00c00044 	movi	r3,1
  801478:	00000106 	br	801480 <__modsi3+0x24>
  80147c:	30000a26 	beq	r6,zero,8014a8 <__modsi3+0x4c>
  801480:	294b883a 	add	r5,r5,r5
  801484:	31bfffc4 	addi	r6,r6,-1
  801488:	18c7883a 	add	r3,r3,r3
  80148c:	293ffb36 	bltu	r5,r4,80147c <__alt_mem_onchip_mem+0xff7f947c>
  801490:	18000526 	beq	r3,zero,8014a8 <__modsi3+0x4c>
  801494:	1806d07a 	srli	r3,r3,1
  801498:	11400136 	bltu	r2,r5,8014a0 <__modsi3+0x44>
  80149c:	1145c83a 	sub	r2,r2,r5
  8014a0:	280ad07a 	srli	r5,r5,1
  8014a4:	183ffb1e 	bne	r3,zero,801494 <__alt_mem_onchip_mem+0xff7f9494>
  8014a8:	38000126 	beq	r7,zero,8014b0 <__modsi3+0x54>
  8014ac:	0085c83a 	sub	r2,zero,r2
  8014b0:	f800283a 	ret
  8014b4:	014bc83a 	sub	r5,zero,r5
  8014b8:	003fec06 	br	80146c <__alt_mem_onchip_mem+0xff7f946c>
  8014bc:	0109c83a 	sub	r4,zero,r4
  8014c0:	01c00044 	movi	r7,1
  8014c4:	003fe706 	br	801464 <__alt_mem_onchip_mem+0xff7f9464>
  8014c8:	00c00044 	movi	r3,1
  8014cc:	003ff106 	br	801494 <__alt_mem_onchip_mem+0xff7f9494>

008014d0 <__udivsi3>:
  8014d0:	200d883a 	mov	r6,r4
  8014d4:	2900152e 	bgeu	r5,r4,80152c <__udivsi3+0x5c>
  8014d8:	28001416 	blt	r5,zero,80152c <__udivsi3+0x5c>
  8014dc:	00800804 	movi	r2,32
  8014e0:	00c00044 	movi	r3,1
  8014e4:	00000206 	br	8014f0 <__udivsi3+0x20>
  8014e8:	10000e26 	beq	r2,zero,801524 <__udivsi3+0x54>
  8014ec:	28000516 	blt	r5,zero,801504 <__udivsi3+0x34>
  8014f0:	294b883a 	add	r5,r5,r5
  8014f4:	10bfffc4 	addi	r2,r2,-1
  8014f8:	18c7883a 	add	r3,r3,r3
  8014fc:	293ffa36 	bltu	r5,r4,8014e8 <__alt_mem_onchip_mem+0xff7f94e8>
  801500:	18000826 	beq	r3,zero,801524 <__udivsi3+0x54>
  801504:	0005883a 	mov	r2,zero
  801508:	31400236 	bltu	r6,r5,801514 <__udivsi3+0x44>
  80150c:	314dc83a 	sub	r6,r6,r5
  801510:	10c4b03a 	or	r2,r2,r3
  801514:	1806d07a 	srli	r3,r3,1
  801518:	280ad07a 	srli	r5,r5,1
  80151c:	183ffa1e 	bne	r3,zero,801508 <__alt_mem_onchip_mem+0xff7f9508>
  801520:	f800283a 	ret
  801524:	0005883a 	mov	r2,zero
  801528:	f800283a 	ret
  80152c:	00c00044 	movi	r3,1
  801530:	003ff406 	br	801504 <__alt_mem_onchip_mem+0xff7f9504>

00801534 <__umodsi3>:
  801534:	2005883a 	mov	r2,r4
  801538:	2900122e 	bgeu	r5,r4,801584 <__umodsi3+0x50>
  80153c:	28001116 	blt	r5,zero,801584 <__umodsi3+0x50>
  801540:	01800804 	movi	r6,32
  801544:	00c00044 	movi	r3,1
  801548:	00000206 	br	801554 <__umodsi3+0x20>
  80154c:	30000c26 	beq	r6,zero,801580 <__umodsi3+0x4c>
  801550:	28000516 	blt	r5,zero,801568 <__umodsi3+0x34>
  801554:	294b883a 	add	r5,r5,r5
  801558:	31bfffc4 	addi	r6,r6,-1
  80155c:	18c7883a 	add	r3,r3,r3
  801560:	293ffa36 	bltu	r5,r4,80154c <__alt_mem_onchip_mem+0xff7f954c>
  801564:	18000626 	beq	r3,zero,801580 <__umodsi3+0x4c>
  801568:	1806d07a 	srli	r3,r3,1
  80156c:	11400136 	bltu	r2,r5,801574 <__umodsi3+0x40>
  801570:	1145c83a 	sub	r2,r2,r5
  801574:	280ad07a 	srli	r5,r5,1
  801578:	183ffb1e 	bne	r3,zero,801568 <__alt_mem_onchip_mem+0xff7f9568>
  80157c:	f800283a 	ret
  801580:	f800283a 	ret
  801584:	00c00044 	movi	r3,1
  801588:	003ff706 	br	801568 <__alt_mem_onchip_mem+0xff7f9568>

0080158c <atoi>:
  80158c:	01800284 	movi	r6,10
  801590:	000b883a 	mov	r5,zero
  801594:	08036fc1 	jmpi	8036fc <strtol>

00801598 <_atoi_r>:
  801598:	01c00284 	movi	r7,10
  80159c:	000d883a 	mov	r6,zero
  8015a0:	08034c41 	jmpi	8034c4 <_strtol_r>

008015a4 <_fgetc_r>:
  8015a4:	defffd04 	addi	sp,sp,-12
  8015a8:	dc000115 	stw	r16,4(sp)
  8015ac:	dfc00215 	stw	ra,8(sp)
  8015b0:	2021883a 	mov	r16,r4
  8015b4:	20000226 	beq	r4,zero,8015c0 <_fgetc_r+0x1c>
  8015b8:	20800e17 	ldw	r2,56(r4)
  8015bc:	10000c26 	beq	r2,zero,8015f0 <_fgetc_r+0x4c>
  8015c0:	28800117 	ldw	r2,4(r5)
  8015c4:	10bfffc4 	addi	r2,r2,-1
  8015c8:	28800115 	stw	r2,4(r5)
  8015cc:	10000c16 	blt	r2,zero,801600 <_fgetc_r+0x5c>
  8015d0:	28800017 	ldw	r2,0(r5)
  8015d4:	10c00044 	addi	r3,r2,1
  8015d8:	28c00015 	stw	r3,0(r5)
  8015dc:	10800003 	ldbu	r2,0(r2)
  8015e0:	dfc00217 	ldw	ra,8(sp)
  8015e4:	dc000117 	ldw	r16,4(sp)
  8015e8:	dec00304 	addi	sp,sp,12
  8015ec:	f800283a 	ret
  8015f0:	d9400015 	stw	r5,0(sp)
  8015f4:	08019ec0 	call	8019ec <__sinit>
  8015f8:	d9400017 	ldw	r5,0(sp)
  8015fc:	003ff006 	br	8015c0 <__alt_mem_onchip_mem+0xff7f95c0>
  801600:	8009883a 	mov	r4,r16
  801604:	dfc00217 	ldw	ra,8(sp)
  801608:	dc000117 	ldw	r16,4(sp)
  80160c:	dec00304 	addi	sp,sp,12
  801610:	08032ac1 	jmpi	8032ac <__srget_r>

00801614 <fgetc>:
  801614:	00802074 	movhi	r2,129
  801618:	defffd04 	addi	sp,sp,-12
  80161c:	10948104 	addi	r2,r2,20996
  801620:	dc400115 	stw	r17,4(sp)
  801624:	14400017 	ldw	r17,0(r2)
  801628:	dc000015 	stw	r16,0(sp)
  80162c:	dfc00215 	stw	ra,8(sp)
  801630:	2021883a 	mov	r16,r4
  801634:	88000226 	beq	r17,zero,801640 <fgetc+0x2c>
  801638:	88800e17 	ldw	r2,56(r17)
  80163c:	10000d26 	beq	r2,zero,801674 <fgetc+0x60>
  801640:	80800117 	ldw	r2,4(r16)
  801644:	10bfffc4 	addi	r2,r2,-1
  801648:	80800115 	stw	r2,4(r16)
  80164c:	10000c16 	blt	r2,zero,801680 <fgetc+0x6c>
  801650:	80800017 	ldw	r2,0(r16)
  801654:	10c00044 	addi	r3,r2,1
  801658:	80c00015 	stw	r3,0(r16)
  80165c:	10800003 	ldbu	r2,0(r2)
  801660:	dfc00217 	ldw	ra,8(sp)
  801664:	dc400117 	ldw	r17,4(sp)
  801668:	dc000017 	ldw	r16,0(sp)
  80166c:	dec00304 	addi	sp,sp,12
  801670:	f800283a 	ret
  801674:	8809883a 	mov	r4,r17
  801678:	08019ec0 	call	8019ec <__sinit>
  80167c:	003ff006 	br	801640 <__alt_mem_onchip_mem+0xff7f9640>
  801680:	800b883a 	mov	r5,r16
  801684:	8809883a 	mov	r4,r17
  801688:	dfc00217 	ldw	ra,8(sp)
  80168c:	dc400117 	ldw	r17,4(sp)
  801690:	dc000017 	ldw	r16,0(sp)
  801694:	dec00304 	addi	sp,sp,12
  801698:	08032ac1 	jmpi	8032ac <__srget_r>

0080169c <__fp_unlock>:
  80169c:	0005883a 	mov	r2,zero
  8016a0:	f800283a 	ret

008016a4 <_cleanup_r>:
  8016a4:	01402034 	movhi	r5,128
  8016a8:	295d7404 	addi	r5,r5,30160
  8016ac:	08021d41 	jmpi	8021d4 <_fwalk_reent>

008016b0 <__sinit.part.1>:
  8016b0:	defff704 	addi	sp,sp,-36
  8016b4:	00c02034 	movhi	r3,128
  8016b8:	dfc00815 	stw	ra,32(sp)
  8016bc:	ddc00715 	stw	r23,28(sp)
  8016c0:	dd800615 	stw	r22,24(sp)
  8016c4:	dd400515 	stw	r21,20(sp)
  8016c8:	dd000415 	stw	r20,16(sp)
  8016cc:	dcc00315 	stw	r19,12(sp)
  8016d0:	dc800215 	stw	r18,8(sp)
  8016d4:	dc400115 	stw	r17,4(sp)
  8016d8:	dc000015 	stw	r16,0(sp)
  8016dc:	18c5a904 	addi	r3,r3,5796
  8016e0:	24000117 	ldw	r16,4(r4)
  8016e4:	20c00f15 	stw	r3,60(r4)
  8016e8:	2080bb04 	addi	r2,r4,748
  8016ec:	00c000c4 	movi	r3,3
  8016f0:	20c0b915 	stw	r3,740(r4)
  8016f4:	2080ba15 	stw	r2,744(r4)
  8016f8:	2000b815 	stw	zero,736(r4)
  8016fc:	05c00204 	movi	r23,8
  801700:	00800104 	movi	r2,4
  801704:	2025883a 	mov	r18,r4
  801708:	b80d883a 	mov	r6,r23
  80170c:	81001704 	addi	r4,r16,92
  801710:	000b883a 	mov	r5,zero
  801714:	80000015 	stw	zero,0(r16)
  801718:	80000115 	stw	zero,4(r16)
  80171c:	80000215 	stw	zero,8(r16)
  801720:	8080030d 	sth	r2,12(r16)
  801724:	80001915 	stw	zero,100(r16)
  801728:	8000038d 	sth	zero,14(r16)
  80172c:	80000415 	stw	zero,16(r16)
  801730:	80000515 	stw	zero,20(r16)
  801734:	80000615 	stw	zero,24(r16)
  801738:	0802d600 	call	802d60 <memset>
  80173c:	05802034 	movhi	r22,128
  801740:	94400217 	ldw	r17,8(r18)
  801744:	05402034 	movhi	r21,128
  801748:	05002034 	movhi	r20,128
  80174c:	04c02034 	movhi	r19,128
  801750:	b58ce204 	addi	r22,r22,13192
  801754:	ad4cf904 	addi	r21,r21,13284
  801758:	a50d1804 	addi	r20,r20,13408
  80175c:	9ccd2f04 	addi	r19,r19,13500
  801760:	85800815 	stw	r22,32(r16)
  801764:	85400915 	stw	r21,36(r16)
  801768:	85000a15 	stw	r20,40(r16)
  80176c:	84c00b15 	stw	r19,44(r16)
  801770:	84000715 	stw	r16,28(r16)
  801774:	00800284 	movi	r2,10
  801778:	8880030d 	sth	r2,12(r17)
  80177c:	00800044 	movi	r2,1
  801780:	b80d883a 	mov	r6,r23
  801784:	89001704 	addi	r4,r17,92
  801788:	000b883a 	mov	r5,zero
  80178c:	88000015 	stw	zero,0(r17)
  801790:	88000115 	stw	zero,4(r17)
  801794:	88000215 	stw	zero,8(r17)
  801798:	88001915 	stw	zero,100(r17)
  80179c:	8880038d 	sth	r2,14(r17)
  8017a0:	88000415 	stw	zero,16(r17)
  8017a4:	88000515 	stw	zero,20(r17)
  8017a8:	88000615 	stw	zero,24(r17)
  8017ac:	0802d600 	call	802d60 <memset>
  8017b0:	94000317 	ldw	r16,12(r18)
  8017b4:	00800484 	movi	r2,18
  8017b8:	8c400715 	stw	r17,28(r17)
  8017bc:	8d800815 	stw	r22,32(r17)
  8017c0:	8d400915 	stw	r21,36(r17)
  8017c4:	8d000a15 	stw	r20,40(r17)
  8017c8:	8cc00b15 	stw	r19,44(r17)
  8017cc:	8080030d 	sth	r2,12(r16)
  8017d0:	00800084 	movi	r2,2
  8017d4:	80000015 	stw	zero,0(r16)
  8017d8:	80000115 	stw	zero,4(r16)
  8017dc:	80000215 	stw	zero,8(r16)
  8017e0:	80001915 	stw	zero,100(r16)
  8017e4:	8080038d 	sth	r2,14(r16)
  8017e8:	80000415 	stw	zero,16(r16)
  8017ec:	80000515 	stw	zero,20(r16)
  8017f0:	80000615 	stw	zero,24(r16)
  8017f4:	b80d883a 	mov	r6,r23
  8017f8:	000b883a 	mov	r5,zero
  8017fc:	81001704 	addi	r4,r16,92
  801800:	0802d600 	call	802d60 <memset>
  801804:	00800044 	movi	r2,1
  801808:	84000715 	stw	r16,28(r16)
  80180c:	85800815 	stw	r22,32(r16)
  801810:	85400915 	stw	r21,36(r16)
  801814:	85000a15 	stw	r20,40(r16)
  801818:	84c00b15 	stw	r19,44(r16)
  80181c:	90800e15 	stw	r2,56(r18)
  801820:	dfc00817 	ldw	ra,32(sp)
  801824:	ddc00717 	ldw	r23,28(sp)
  801828:	dd800617 	ldw	r22,24(sp)
  80182c:	dd400517 	ldw	r21,20(sp)
  801830:	dd000417 	ldw	r20,16(sp)
  801834:	dcc00317 	ldw	r19,12(sp)
  801838:	dc800217 	ldw	r18,8(sp)
  80183c:	dc400117 	ldw	r17,4(sp)
  801840:	dc000017 	ldw	r16,0(sp)
  801844:	dec00904 	addi	sp,sp,36
  801848:	f800283a 	ret

0080184c <__fp_lock>:
  80184c:	0005883a 	mov	r2,zero
  801850:	f800283a 	ret

00801854 <__sfmoreglue>:
  801854:	defffc04 	addi	sp,sp,-16
  801858:	dc400115 	stw	r17,4(sp)
  80185c:	2c7fffc4 	addi	r17,r5,-1
  801860:	8c401a24 	muli	r17,r17,104
  801864:	dc800215 	stw	r18,8(sp)
  801868:	2825883a 	mov	r18,r5
  80186c:	89401d04 	addi	r5,r17,116
  801870:	dc000015 	stw	r16,0(sp)
  801874:	dfc00315 	stw	ra,12(sp)
  801878:	08025540 	call	802554 <_malloc_r>
  80187c:	1021883a 	mov	r16,r2
  801880:	10000726 	beq	r2,zero,8018a0 <__sfmoreglue+0x4c>
  801884:	11000304 	addi	r4,r2,12
  801888:	10000015 	stw	zero,0(r2)
  80188c:	14800115 	stw	r18,4(r2)
  801890:	11000215 	stw	r4,8(r2)
  801894:	89801a04 	addi	r6,r17,104
  801898:	000b883a 	mov	r5,zero
  80189c:	0802d600 	call	802d60 <memset>
  8018a0:	8005883a 	mov	r2,r16
  8018a4:	dfc00317 	ldw	ra,12(sp)
  8018a8:	dc800217 	ldw	r18,8(sp)
  8018ac:	dc400117 	ldw	r17,4(sp)
  8018b0:	dc000017 	ldw	r16,0(sp)
  8018b4:	dec00404 	addi	sp,sp,16
  8018b8:	f800283a 	ret

008018bc <__sfp>:
  8018bc:	defffb04 	addi	sp,sp,-20
  8018c0:	dc000015 	stw	r16,0(sp)
  8018c4:	04002074 	movhi	r16,129
  8018c8:	84148004 	addi	r16,r16,20992
  8018cc:	dcc00315 	stw	r19,12(sp)
  8018d0:	2027883a 	mov	r19,r4
  8018d4:	81000017 	ldw	r4,0(r16)
  8018d8:	dfc00415 	stw	ra,16(sp)
  8018dc:	dc800215 	stw	r18,8(sp)
  8018e0:	20800e17 	ldw	r2,56(r4)
  8018e4:	dc400115 	stw	r17,4(sp)
  8018e8:	1000021e 	bne	r2,zero,8018f4 <__sfp+0x38>
  8018ec:	08016b00 	call	8016b0 <__sinit.part.1>
  8018f0:	81000017 	ldw	r4,0(r16)
  8018f4:	2480b804 	addi	r18,r4,736
  8018f8:	047fffc4 	movi	r17,-1
  8018fc:	91000117 	ldw	r4,4(r18)
  801900:	94000217 	ldw	r16,8(r18)
  801904:	213fffc4 	addi	r4,r4,-1
  801908:	20000a16 	blt	r4,zero,801934 <__sfp+0x78>
  80190c:	8080030f 	ldh	r2,12(r16)
  801910:	10000c26 	beq	r2,zero,801944 <__sfp+0x88>
  801914:	80c01d04 	addi	r3,r16,116
  801918:	00000206 	br	801924 <__sfp+0x68>
  80191c:	18bfe60f 	ldh	r2,-104(r3)
  801920:	10000826 	beq	r2,zero,801944 <__sfp+0x88>
  801924:	213fffc4 	addi	r4,r4,-1
  801928:	1c3ffd04 	addi	r16,r3,-12
  80192c:	18c01a04 	addi	r3,r3,104
  801930:	247ffa1e 	bne	r4,r17,80191c <__alt_mem_onchip_mem+0xff7f991c>
  801934:	90800017 	ldw	r2,0(r18)
  801938:	10001d26 	beq	r2,zero,8019b0 <__sfp+0xf4>
  80193c:	1025883a 	mov	r18,r2
  801940:	003fee06 	br	8018fc <__alt_mem_onchip_mem+0xff7f98fc>
  801944:	00bfffc4 	movi	r2,-1
  801948:	8080038d 	sth	r2,14(r16)
  80194c:	00800044 	movi	r2,1
  801950:	8080030d 	sth	r2,12(r16)
  801954:	80001915 	stw	zero,100(r16)
  801958:	80000015 	stw	zero,0(r16)
  80195c:	80000215 	stw	zero,8(r16)
  801960:	80000115 	stw	zero,4(r16)
  801964:	80000415 	stw	zero,16(r16)
  801968:	80000515 	stw	zero,20(r16)
  80196c:	80000615 	stw	zero,24(r16)
  801970:	01800204 	movi	r6,8
  801974:	000b883a 	mov	r5,zero
  801978:	81001704 	addi	r4,r16,92
  80197c:	0802d600 	call	802d60 <memset>
  801980:	8005883a 	mov	r2,r16
  801984:	80000c15 	stw	zero,48(r16)
  801988:	80000d15 	stw	zero,52(r16)
  80198c:	80001115 	stw	zero,68(r16)
  801990:	80001215 	stw	zero,72(r16)
  801994:	dfc00417 	ldw	ra,16(sp)
  801998:	dcc00317 	ldw	r19,12(sp)
  80199c:	dc800217 	ldw	r18,8(sp)
  8019a0:	dc400117 	ldw	r17,4(sp)
  8019a4:	dc000017 	ldw	r16,0(sp)
  8019a8:	dec00504 	addi	sp,sp,20
  8019ac:	f800283a 	ret
  8019b0:	01400104 	movi	r5,4
  8019b4:	9809883a 	mov	r4,r19
  8019b8:	08018540 	call	801854 <__sfmoreglue>
  8019bc:	90800015 	stw	r2,0(r18)
  8019c0:	103fde1e 	bne	r2,zero,80193c <__alt_mem_onchip_mem+0xff7f993c>
  8019c4:	00800304 	movi	r2,12
  8019c8:	98800015 	stw	r2,0(r19)
  8019cc:	0005883a 	mov	r2,zero
  8019d0:	003ff006 	br	801994 <__alt_mem_onchip_mem+0xff7f9994>

008019d4 <_cleanup>:
  8019d4:	00802074 	movhi	r2,129
  8019d8:	10948004 	addi	r2,r2,20992
  8019dc:	11000017 	ldw	r4,0(r2)
  8019e0:	01402034 	movhi	r5,128
  8019e4:	295d7404 	addi	r5,r5,30160
  8019e8:	08021d41 	jmpi	8021d4 <_fwalk_reent>

008019ec <__sinit>:
  8019ec:	20800e17 	ldw	r2,56(r4)
  8019f0:	10000126 	beq	r2,zero,8019f8 <__sinit+0xc>
  8019f4:	f800283a 	ret
  8019f8:	08016b01 	jmpi	8016b0 <__sinit.part.1>

008019fc <__sfp_lock_acquire>:
  8019fc:	f800283a 	ret

00801a00 <__sfp_lock_release>:
  801a00:	f800283a 	ret

00801a04 <__sinit_lock_acquire>:
  801a04:	f800283a 	ret

00801a08 <__sinit_lock_release>:
  801a08:	f800283a 	ret

00801a0c <__fp_lock_all>:
  801a0c:	00802074 	movhi	r2,129
  801a10:	10948104 	addi	r2,r2,20996
  801a14:	11000017 	ldw	r4,0(r2)
  801a18:	01402034 	movhi	r5,128
  801a1c:	29461304 	addi	r5,r5,6220
  801a20:	08021101 	jmpi	802110 <_fwalk>

00801a24 <__fp_unlock_all>:
  801a24:	00802074 	movhi	r2,129
  801a28:	10948104 	addi	r2,r2,20996
  801a2c:	11000017 	ldw	r4,0(r2)
  801a30:	01402034 	movhi	r5,128
  801a34:	2945a704 	addi	r5,r5,5788
  801a38:	08021101 	jmpi	802110 <_fwalk>

00801a3c <_fopen_r>:
  801a3c:	defffa04 	addi	sp,sp,-24
  801a40:	3005883a 	mov	r2,r6
  801a44:	dcc00415 	stw	r19,16(sp)
  801a48:	d80d883a 	mov	r6,sp
  801a4c:	2827883a 	mov	r19,r5
  801a50:	100b883a 	mov	r5,r2
  801a54:	dc800315 	stw	r18,12(sp)
  801a58:	dfc00515 	stw	ra,20(sp)
  801a5c:	dc400215 	stw	r17,8(sp)
  801a60:	dc000115 	stw	r16,4(sp)
  801a64:	2025883a 	mov	r18,r4
  801a68:	080797c0 	call	80797c <__sflags>
  801a6c:	10002726 	beq	r2,zero,801b0c <_fopen_r+0xd0>
  801a70:	9009883a 	mov	r4,r18
  801a74:	1023883a 	mov	r17,r2
  801a78:	08018bc0 	call	8018bc <__sfp>
  801a7c:	1021883a 	mov	r16,r2
  801a80:	10002226 	beq	r2,zero,801b0c <_fopen_r+0xd0>
  801a84:	d9800017 	ldw	r6,0(sp)
  801a88:	01c06d84 	movi	r7,438
  801a8c:	980b883a 	mov	r5,r19
  801a90:	9009883a 	mov	r4,r18
  801a94:	0802e880 	call	802e88 <_open_r>
  801a98:	10001916 	blt	r2,zero,801b00 <_fopen_r+0xc4>
  801a9c:	8080038d 	sth	r2,14(r16)
  801aa0:	00802034 	movhi	r2,128
  801aa4:	108ce204 	addi	r2,r2,13192
  801aa8:	80800815 	stw	r2,32(r16)
  801aac:	00802034 	movhi	r2,128
  801ab0:	108cf904 	addi	r2,r2,13284
  801ab4:	80800915 	stw	r2,36(r16)
  801ab8:	00802034 	movhi	r2,128
  801abc:	108d1804 	addi	r2,r2,13408
  801ac0:	80800a15 	stw	r2,40(r16)
  801ac4:	00802034 	movhi	r2,128
  801ac8:	108d2f04 	addi	r2,r2,13500
  801acc:	8440030d 	sth	r17,12(r16)
  801ad0:	84000715 	stw	r16,28(r16)
  801ad4:	80800b15 	stw	r2,44(r16)
  801ad8:	8c40400c 	andi	r17,r17,256
  801adc:	88000d1e 	bne	r17,zero,801b14 <_fopen_r+0xd8>
  801ae0:	8005883a 	mov	r2,r16
  801ae4:	dfc00517 	ldw	ra,20(sp)
  801ae8:	dcc00417 	ldw	r19,16(sp)
  801aec:	dc800317 	ldw	r18,12(sp)
  801af0:	dc400217 	ldw	r17,8(sp)
  801af4:	dc000117 	ldw	r16,4(sp)
  801af8:	dec00604 	addi	sp,sp,24
  801afc:	f800283a 	ret
  801b00:	08019fc0 	call	8019fc <__sfp_lock_acquire>
  801b04:	8000030d 	sth	zero,12(r16)
  801b08:	0801a000 	call	801a00 <__sfp_lock_release>
  801b0c:	0005883a 	mov	r2,zero
  801b10:	003ff406 	br	801ae4 <__alt_mem_onchip_mem+0xff7f9ae4>
  801b14:	01c00084 	movi	r7,2
  801b18:	000d883a 	mov	r6,zero
  801b1c:	800b883a 	mov	r5,r16
  801b20:	9009883a 	mov	r4,r18
  801b24:	0801c340 	call	801c34 <_fseek_r>
  801b28:	8005883a 	mov	r2,r16
  801b2c:	003fed06 	br	801ae4 <__alt_mem_onchip_mem+0xff7f9ae4>

00801b30 <fopen>:
  801b30:	00802074 	movhi	r2,129
  801b34:	10948104 	addi	r2,r2,20996
  801b38:	280d883a 	mov	r6,r5
  801b3c:	200b883a 	mov	r5,r4
  801b40:	11000017 	ldw	r4,0(r2)
  801b44:	0801a3c1 	jmpi	801a3c <_fopen_r>

00801b48 <_fprintf_r>:
  801b48:	defffe04 	addi	sp,sp,-8
  801b4c:	2809883a 	mov	r4,r5
  801b50:	300b883a 	mov	r5,r6
  801b54:	dfc00015 	stw	ra,0(sp)
  801b58:	d9c00115 	stw	r7,4(sp)
  801b5c:	d9800104 	addi	r6,sp,4
  801b60:	08059100 	call	805910 <__vfprintf_internal>
  801b64:	dfc00017 	ldw	ra,0(sp)
  801b68:	dec00204 	addi	sp,sp,8
  801b6c:	f800283a 	ret

00801b70 <fprintf>:
  801b70:	defffd04 	addi	sp,sp,-12
  801b74:	dfc00015 	stw	ra,0(sp)
  801b78:	d9800115 	stw	r6,4(sp)
  801b7c:	d9c00215 	stw	r7,8(sp)
  801b80:	d9800104 	addi	r6,sp,4
  801b84:	08059100 	call	805910 <__vfprintf_internal>
  801b88:	dfc00017 	ldw	ra,0(sp)
  801b8c:	dec00304 	addi	sp,sp,12
  801b90:	f800283a 	ret

00801b94 <_fputc_r>:
  801b94:	defffc04 	addi	sp,sp,-16
  801b98:	dc000215 	stw	r16,8(sp)
  801b9c:	dfc00315 	stw	ra,12(sp)
  801ba0:	2021883a 	mov	r16,r4
  801ba4:	20000726 	beq	r4,zero,801bc4 <_fputc_r+0x30>
  801ba8:	20800e17 	ldw	r2,56(r4)
  801bac:	1000051e 	bne	r2,zero,801bc4 <_fputc_r+0x30>
  801bb0:	d9400015 	stw	r5,0(sp)
  801bb4:	d9800115 	stw	r6,4(sp)
  801bb8:	08019ec0 	call	8019ec <__sinit>
  801bbc:	d9800117 	ldw	r6,4(sp)
  801bc0:	d9400017 	ldw	r5,0(sp)
  801bc4:	8009883a 	mov	r4,r16
  801bc8:	dfc00317 	ldw	ra,12(sp)
  801bcc:	dc000217 	ldw	r16,8(sp)
  801bd0:	dec00404 	addi	sp,sp,16
  801bd4:	0802f541 	jmpi	802f54 <_putc_r>

00801bd8 <fputc>:
  801bd8:	00802074 	movhi	r2,129
  801bdc:	defffc04 	addi	sp,sp,-16
  801be0:	10948104 	addi	r2,r2,20996
  801be4:	dc000115 	stw	r16,4(sp)
  801be8:	14000017 	ldw	r16,0(r2)
  801bec:	dc400215 	stw	r17,8(sp)
  801bf0:	dfc00315 	stw	ra,12(sp)
  801bf4:	2023883a 	mov	r17,r4
  801bf8:	80000626 	beq	r16,zero,801c14 <fputc+0x3c>
  801bfc:	80800e17 	ldw	r2,56(r16)
  801c00:	1000041e 	bne	r2,zero,801c14 <fputc+0x3c>
  801c04:	8009883a 	mov	r4,r16
  801c08:	d9400015 	stw	r5,0(sp)
  801c0c:	08019ec0 	call	8019ec <__sinit>
  801c10:	d9400017 	ldw	r5,0(sp)
  801c14:	280d883a 	mov	r6,r5
  801c18:	8009883a 	mov	r4,r16
  801c1c:	880b883a 	mov	r5,r17
  801c20:	dfc00317 	ldw	ra,12(sp)
  801c24:	dc400217 	ldw	r17,8(sp)
  801c28:	dc000117 	ldw	r16,4(sp)
  801c2c:	dec00404 	addi	sp,sp,16
  801c30:	0802f541 	jmpi	802f54 <_putc_r>

00801c34 <_fseek_r>:
  801c34:	0801c541 	jmpi	801c54 <_fseeko_r>

00801c38 <fseek>:
  801c38:	00802074 	movhi	r2,129
  801c3c:	10948104 	addi	r2,r2,20996
  801c40:	300f883a 	mov	r7,r6
  801c44:	280d883a 	mov	r6,r5
  801c48:	200b883a 	mov	r5,r4
  801c4c:	11000017 	ldw	r4,0(r2)
  801c50:	0801c541 	jmpi	801c54 <_fseeko_r>

00801c54 <_fseeko_r>:
  801c54:	deffe804 	addi	sp,sp,-96
  801c58:	dd401415 	stw	r21,80(sp)
  801c5c:	dc801115 	stw	r18,68(sp)
  801c60:	dc401015 	stw	r17,64(sp)
  801c64:	dc000f15 	stw	r16,60(sp)
  801c68:	dfc01715 	stw	ra,92(sp)
  801c6c:	ddc01615 	stw	r23,88(sp)
  801c70:	dd801515 	stw	r22,84(sp)
  801c74:	dd001315 	stw	r20,76(sp)
  801c78:	dcc01215 	stw	r19,72(sp)
  801c7c:	2023883a 	mov	r17,r4
  801c80:	2821883a 	mov	r16,r5
  801c84:	302b883a 	mov	r21,r6
  801c88:	3825883a 	mov	r18,r7
  801c8c:	20000226 	beq	r4,zero,801c98 <_fseeko_r+0x44>
  801c90:	20800e17 	ldw	r2,56(r4)
  801c94:	10005a26 	beq	r2,zero,801e00 <_fseeko_r+0x1ac>
  801c98:	8080030b 	ldhu	r2,12(r16)
  801c9c:	00c04204 	movi	r3,264
  801ca0:	1080420c 	andi	r2,r2,264
  801ca4:	10c05b26 	beq	r2,r3,801e14 <_fseeko_r+0x1c0>
  801ca8:	85000a17 	ldw	r20,40(r16)
  801cac:	a000f626 	beq	r20,zero,802088 <_fseeko_r+0x434>
  801cb0:	00800044 	movi	r2,1
  801cb4:	90803e26 	beq	r18,r2,801db0 <_fseeko_r+0x15c>
  801cb8:	00800084 	movi	r2,2
  801cbc:	90801026 	beq	r18,r2,801d00 <_fseeko_r+0xac>
  801cc0:	90000f26 	beq	r18,zero,801d00 <_fseeko_r+0xac>
  801cc4:	00800584 	movi	r2,22
  801cc8:	88800015 	stw	r2,0(r17)
  801ccc:	04ffffc4 	movi	r19,-1
  801cd0:	9805883a 	mov	r2,r19
  801cd4:	dfc01717 	ldw	ra,92(sp)
  801cd8:	ddc01617 	ldw	r23,88(sp)
  801cdc:	dd801517 	ldw	r22,84(sp)
  801ce0:	dd401417 	ldw	r21,80(sp)
  801ce4:	dd001317 	ldw	r20,76(sp)
  801ce8:	dcc01217 	ldw	r19,72(sp)
  801cec:	dc801117 	ldw	r18,68(sp)
  801cf0:	dc401017 	ldw	r17,64(sp)
  801cf4:	dc000f17 	ldw	r16,60(sp)
  801cf8:	dec01804 	addi	sp,sp,96
  801cfc:	f800283a 	ret
  801d00:	80800417 	ldw	r2,16(r16)
  801d04:	002f883a 	mov	r23,zero
  801d08:	0027883a 	mov	r19,zero
  801d0c:	1000cb26 	beq	r2,zero,80203c <_fseeko_r+0x3e8>
  801d10:	8080030b 	ldhu	r2,12(r16)
  801d14:	10c2068c 	andi	r3,r2,2074
  801d18:	1800071e 	bne	r3,zero,801d38 <_fseeko_r+0xe4>
  801d1c:	10c1000c 	andi	r3,r2,1024
  801d20:	1800451e 	bne	r3,zero,801e38 <_fseeko_r+0x1e4>
  801d24:	00c02034 	movhi	r3,128
  801d28:	18cd1804 	addi	r3,r3,13408
  801d2c:	a0c0b726 	beq	r20,r3,80200c <_fseeko_r+0x3b8>
  801d30:	10820014 	ori	r2,r2,2048
  801d34:	8080030d 	sth	r2,12(r16)
  801d38:	800b883a 	mov	r5,r16
  801d3c:	8809883a 	mov	r4,r17
  801d40:	08078f00 	call	8078f0 <_fflush_r>
  801d44:	1027883a 	mov	r19,r2
  801d48:	103fe01e 	bne	r2,zero,801ccc <__alt_mem_onchip_mem+0xff7f9ccc>
  801d4c:	81400717 	ldw	r5,28(r16)
  801d50:	900f883a 	mov	r7,r18
  801d54:	a80d883a 	mov	r6,r21
  801d58:	8809883a 	mov	r4,r17
  801d5c:	a03ee83a 	callr	r20
  801d60:	00ffffc4 	movi	r3,-1
  801d64:	10ffd926 	beq	r2,r3,801ccc <__alt_mem_onchip_mem+0xff7f9ccc>
  801d68:	81400c17 	ldw	r5,48(r16)
  801d6c:	28000526 	beq	r5,zero,801d84 <_fseeko_r+0x130>
  801d70:	80801004 	addi	r2,r16,64
  801d74:	28800226 	beq	r5,r2,801d80 <_fseeko_r+0x12c>
  801d78:	8809883a 	mov	r4,r17
  801d7c:	0807b4c0 	call	807b4c <_free_r>
  801d80:	80000c15 	stw	zero,48(r16)
  801d84:	8080030b 	ldhu	r2,12(r16)
  801d88:	80c00417 	ldw	r3,16(r16)
  801d8c:	80000115 	stw	zero,4(r16)
  801d90:	10bdf7cc 	andi	r2,r2,63455
  801d94:	80c00015 	stw	r3,0(r16)
  801d98:	8080030d 	sth	r2,12(r16)
  801d9c:	01800204 	movi	r6,8
  801da0:	000b883a 	mov	r5,zero
  801da4:	81001704 	addi	r4,r16,92
  801da8:	0802d600 	call	802d60 <memset>
  801dac:	003fc806 	br	801cd0 <__alt_mem_onchip_mem+0xff7f9cd0>
  801db0:	800b883a 	mov	r5,r16
  801db4:	8809883a 	mov	r4,r17
  801db8:	08078f00 	call	8078f0 <_fflush_r>
  801dbc:	8080030b 	ldhu	r2,12(r16)
  801dc0:	10c4000c 	andi	r3,r2,4096
  801dc4:	18008726 	beq	r3,zero,801fe4 <_fseeko_r+0x390>
  801dc8:	84c01417 	ldw	r19,80(r16)
  801dcc:	10c0010c 	andi	r3,r2,4
  801dd0:	1800431e 	bne	r3,zero,801ee0 <_fseeko_r+0x28c>
  801dd4:	1080020c 	andi	r2,r2,8
  801dd8:	10008026 	beq	r2,zero,801fdc <_fseeko_r+0x388>
  801ddc:	80c00017 	ldw	r3,0(r16)
  801de0:	80800417 	ldw	r2,16(r16)
  801de4:	18000226 	beq	r3,zero,801df0 <_fseeko_r+0x19c>
  801de8:	1887c83a 	sub	r3,r3,r2
  801dec:	98e7883a 	add	r19,r19,r3
  801df0:	aceb883a 	add	r21,r21,r19
  801df4:	05c00044 	movi	r23,1
  801df8:	0025883a 	mov	r18,zero
  801dfc:	003fc306 	br	801d0c <__alt_mem_onchip_mem+0xff7f9d0c>
  801e00:	08019ec0 	call	8019ec <__sinit>
  801e04:	8080030b 	ldhu	r2,12(r16)
  801e08:	00c04204 	movi	r3,264
  801e0c:	1080420c 	andi	r2,r2,264
  801e10:	10ffa51e 	bne	r2,r3,801ca8 <__alt_mem_onchip_mem+0xff7f9ca8>
  801e14:	800b883a 	mov	r5,r16
  801e18:	8809883a 	mov	r4,r17
  801e1c:	08078f00 	call	8078f0 <_fflush_r>
  801e20:	003fa106 	br	801ca8 <__alt_mem_onchip_mem+0xff7f9ca8>
  801e24:	8080030b 	ldhu	r2,12(r16)
  801e28:	00c10004 	movi	r3,1024
  801e2c:	80c01315 	stw	r3,76(r16)
  801e30:	10c4b03a 	or	r2,r2,r3
  801e34:	8080030d 	sth	r2,12(r16)
  801e38:	9000311e 	bne	r18,zero,801f00 <_fseeko_r+0x2ac>
  801e3c:	a82d883a 	mov	r22,r21
  801e40:	b800371e 	bne	r23,zero,801f20 <_fseeko_r+0x2cc>
  801e44:	8080030b 	ldhu	r2,12(r16)
  801e48:	1084000c 	andi	r2,r2,4096
  801e4c:	10007f26 	beq	r2,zero,80204c <_fseeko_r+0x3f8>
  801e50:	80801417 	ldw	r2,80(r16)
  801e54:	81800117 	ldw	r6,4(r16)
  801e58:	81400c17 	ldw	r5,48(r16)
  801e5c:	11a7c83a 	sub	r19,r2,r6
  801e60:	28008226 	beq	r5,zero,80206c <_fseeko_r+0x418>
  801e64:	81c00f17 	ldw	r7,60(r16)
  801e68:	99e7c83a 	sub	r19,r19,r7
  801e6c:	81000e17 	ldw	r4,56(r16)
  801e70:	80800417 	ldw	r2,16(r16)
  801e74:	99a7883a 	add	r19,r19,r6
  801e78:	2087c83a 	sub	r3,r4,r2
  801e7c:	98e7c83a 	sub	r19,r19,r3
  801e80:	38c7883a 	add	r3,r7,r3
  801e84:	b4c02b16 	blt	r22,r19,801f34 <_fseeko_r+0x2e0>
  801e88:	98c9883a 	add	r4,r19,r3
  801e8c:	b100292e 	bgeu	r22,r4,801f34 <_fseeko_r+0x2e0>
  801e90:	b4e7c83a 	sub	r19,r22,r19
  801e94:	14c5883a 	add	r2,r2,r19
  801e98:	1ce7c83a 	sub	r19,r3,r19
  801e9c:	80800015 	stw	r2,0(r16)
  801ea0:	84c00115 	stw	r19,4(r16)
  801ea4:	28000526 	beq	r5,zero,801ebc <_fseeko_r+0x268>
  801ea8:	80801004 	addi	r2,r16,64
  801eac:	28800226 	beq	r5,r2,801eb8 <_fseeko_r+0x264>
  801eb0:	8809883a 	mov	r4,r17
  801eb4:	0807b4c0 	call	807b4c <_free_r>
  801eb8:	80000c15 	stw	zero,48(r16)
  801ebc:	8080030b 	ldhu	r2,12(r16)
  801ec0:	01800204 	movi	r6,8
  801ec4:	000b883a 	mov	r5,zero
  801ec8:	10bff7cc 	andi	r2,r2,65503
  801ecc:	8080030d 	sth	r2,12(r16)
  801ed0:	81001704 	addi	r4,r16,92
  801ed4:	0802d600 	call	802d60 <memset>
  801ed8:	0027883a 	mov	r19,zero
  801edc:	003f7c06 	br	801cd0 <__alt_mem_onchip_mem+0xff7f9cd0>
  801ee0:	80c00117 	ldw	r3,4(r16)
  801ee4:	80800c17 	ldw	r2,48(r16)
  801ee8:	98e7c83a 	sub	r19,r19,r3
  801eec:	10003b26 	beq	r2,zero,801fdc <_fseeko_r+0x388>
  801ef0:	80c00f17 	ldw	r3,60(r16)
  801ef4:	80800417 	ldw	r2,16(r16)
  801ef8:	98e7c83a 	sub	r19,r19,r3
  801efc:	003fbc06 	br	801df0 <__alt_mem_onchip_mem+0xff7f9df0>
  801f00:	8140038f 	ldh	r5,14(r16)
  801f04:	d80d883a 	mov	r6,sp
  801f08:	8809883a 	mov	r4,r17
  801f0c:	08020b40 	call	8020b4 <_fstat_r>
  801f10:	103f891e 	bne	r2,zero,801d38 <__alt_mem_onchip_mem+0xff7f9d38>
  801f14:	dd800417 	ldw	r22,16(sp)
  801f18:	adad883a 	add	r22,r21,r22
  801f1c:	b83fc926 	beq	r23,zero,801e44 <__alt_mem_onchip_mem+0xff7f9e44>
  801f20:	81400c17 	ldw	r5,48(r16)
  801f24:	81800117 	ldw	r6,4(r16)
  801f28:	28005026 	beq	r5,zero,80206c <_fseeko_r+0x418>
  801f2c:	81c00f17 	ldw	r7,60(r16)
  801f30:	003fce06 	br	801e6c <__alt_mem_onchip_mem+0xff7f9e6c>
  801f34:	84c01317 	ldw	r19,76(r16)
  801f38:	81400717 	ldw	r5,28(r16)
  801f3c:	000f883a 	mov	r7,zero
  801f40:	04e7c83a 	sub	r19,zero,r19
  801f44:	9da6703a 	and	r19,r19,r22
  801f48:	980d883a 	mov	r6,r19
  801f4c:	8809883a 	mov	r4,r17
  801f50:	a03ee83a 	callr	r20
  801f54:	00ffffc4 	movi	r3,-1
  801f58:	10ff7726 	beq	r2,r3,801d38 <__alt_mem_onchip_mem+0xff7f9d38>
  801f5c:	80800417 	ldw	r2,16(r16)
  801f60:	81400c17 	ldw	r5,48(r16)
  801f64:	80000115 	stw	zero,4(r16)
  801f68:	80800015 	stw	r2,0(r16)
  801f6c:	28000526 	beq	r5,zero,801f84 <_fseeko_r+0x330>
  801f70:	80801004 	addi	r2,r16,64
  801f74:	28800226 	beq	r5,r2,801f80 <_fseeko_r+0x32c>
  801f78:	8809883a 	mov	r4,r17
  801f7c:	0807b4c0 	call	807b4c <_free_r>
  801f80:	80000c15 	stw	zero,48(r16)
  801f84:	8080030b 	ldhu	r2,12(r16)
  801f88:	b4e7c83a 	sub	r19,r22,r19
  801f8c:	10bff7cc 	andi	r2,r2,65503
  801f90:	8080030d 	sth	r2,12(r16)
  801f94:	98000b26 	beq	r19,zero,801fc4 <_fseeko_r+0x370>
  801f98:	800b883a 	mov	r5,r16
  801f9c:	8809883a 	mov	r4,r17
  801fa0:	08030d80 	call	8030d8 <__srefill_r>
  801fa4:	103f641e 	bne	r2,zero,801d38 <__alt_mem_onchip_mem+0xff7f9d38>
  801fa8:	80800117 	ldw	r2,4(r16)
  801fac:	14ff6236 	bltu	r2,r19,801d38 <__alt_mem_onchip_mem+0xff7f9d38>
  801fb0:	80c00017 	ldw	r3,0(r16)
  801fb4:	14c5c83a 	sub	r2,r2,r19
  801fb8:	80800115 	stw	r2,4(r16)
  801fbc:	1ce7883a 	add	r19,r3,r19
  801fc0:	84c00015 	stw	r19,0(r16)
  801fc4:	01800204 	movi	r6,8
  801fc8:	000b883a 	mov	r5,zero
  801fcc:	81001704 	addi	r4,r16,92
  801fd0:	0802d600 	call	802d60 <memset>
  801fd4:	0027883a 	mov	r19,zero
  801fd8:	003f3d06 	br	801cd0 <__alt_mem_onchip_mem+0xff7f9cd0>
  801fdc:	80800417 	ldw	r2,16(r16)
  801fe0:	003f8306 	br	801df0 <__alt_mem_onchip_mem+0xff7f9df0>
  801fe4:	81400717 	ldw	r5,28(r16)
  801fe8:	900f883a 	mov	r7,r18
  801fec:	000d883a 	mov	r6,zero
  801ff0:	8809883a 	mov	r4,r17
  801ff4:	a03ee83a 	callr	r20
  801ff8:	1027883a 	mov	r19,r2
  801ffc:	00bfffc4 	movi	r2,-1
  802000:	98bf3226 	beq	r19,r2,801ccc <__alt_mem_onchip_mem+0xff7f9ccc>
  802004:	8080030b 	ldhu	r2,12(r16)
  802008:	003f7006 	br	801dcc <__alt_mem_onchip_mem+0xff7f9dcc>
  80200c:	8140038f 	ldh	r5,14(r16)
  802010:	283f4716 	blt	r5,zero,801d30 <__alt_mem_onchip_mem+0xff7f9d30>
  802014:	d80d883a 	mov	r6,sp
  802018:	8809883a 	mov	r4,r17
  80201c:	08020b40 	call	8020b4 <_fstat_r>
  802020:	1000041e 	bne	r2,zero,802034 <_fseeko_r+0x3e0>
  802024:	d8800117 	ldw	r2,4(sp)
  802028:	00e00014 	movui	r3,32768
  80202c:	10bc000c 	andi	r2,r2,61440
  802030:	10ff7c26 	beq	r2,r3,801e24 <__alt_mem_onchip_mem+0xff7f9e24>
  802034:	8080030b 	ldhu	r2,12(r16)
  802038:	003f3d06 	br	801d30 <__alt_mem_onchip_mem+0xff7f9d30>
  80203c:	800b883a 	mov	r5,r16
  802040:	8809883a 	mov	r4,r17
  802044:	08023980 	call	802398 <__smakebuf_r>
  802048:	003f3106 	br	801d10 <__alt_mem_onchip_mem+0xff7f9d10>
  80204c:	81400717 	ldw	r5,28(r16)
  802050:	01c00044 	movi	r7,1
  802054:	000d883a 	mov	r6,zero
  802058:	8809883a 	mov	r4,r17
  80205c:	a03ee83a 	callr	r20
  802060:	00ffffc4 	movi	r3,-1
  802064:	10ff7b1e 	bne	r2,r3,801e54 <__alt_mem_onchip_mem+0xff7f9e54>
  802068:	003f3306 	br	801d38 <__alt_mem_onchip_mem+0xff7f9d38>
  80206c:	80c00017 	ldw	r3,0(r16)
  802070:	80800417 	ldw	r2,16(r16)
  802074:	000b883a 	mov	r5,zero
  802078:	1887c83a 	sub	r3,r3,r2
  80207c:	98e7c83a 	sub	r19,r19,r3
  802080:	30c7883a 	add	r3,r6,r3
  802084:	003f7f06 	br	801e84 <__alt_mem_onchip_mem+0xff7f9e84>
  802088:	00800744 	movi	r2,29
  80208c:	88800015 	stw	r2,0(r17)
  802090:	04ffffc4 	movi	r19,-1
  802094:	003f0e06 	br	801cd0 <__alt_mem_onchip_mem+0xff7f9cd0>

00802098 <fseeko>:
  802098:	00802074 	movhi	r2,129
  80209c:	10948104 	addi	r2,r2,20996
  8020a0:	300f883a 	mov	r7,r6
  8020a4:	280d883a 	mov	r6,r5
  8020a8:	200b883a 	mov	r5,r4
  8020ac:	11000017 	ldw	r4,0(r2)
  8020b0:	0801c541 	jmpi	801c54 <_fseeko_r>

008020b4 <_fstat_r>:
  8020b4:	defffd04 	addi	sp,sp,-12
  8020b8:	2805883a 	mov	r2,r5
  8020bc:	dc000015 	stw	r16,0(sp)
  8020c0:	04002074 	movhi	r16,129
  8020c4:	dc400115 	stw	r17,4(sp)
  8020c8:	841be104 	addi	r16,r16,28548
  8020cc:	2023883a 	mov	r17,r4
  8020d0:	300b883a 	mov	r5,r6
  8020d4:	1009883a 	mov	r4,r2
  8020d8:	dfc00215 	stw	ra,8(sp)
  8020dc:	80000015 	stw	zero,0(r16)
  8020e0:	080ee8c0 	call	80ee8c <fstat>
  8020e4:	00ffffc4 	movi	r3,-1
  8020e8:	10c00526 	beq	r2,r3,802100 <_fstat_r+0x4c>
  8020ec:	dfc00217 	ldw	ra,8(sp)
  8020f0:	dc400117 	ldw	r17,4(sp)
  8020f4:	dc000017 	ldw	r16,0(sp)
  8020f8:	dec00304 	addi	sp,sp,12
  8020fc:	f800283a 	ret
  802100:	80c00017 	ldw	r3,0(r16)
  802104:	183ff926 	beq	r3,zero,8020ec <__alt_mem_onchip_mem+0xff7fa0ec>
  802108:	88c00015 	stw	r3,0(r17)
  80210c:	003ff706 	br	8020ec <__alt_mem_onchip_mem+0xff7fa0ec>

00802110 <_fwalk>:
  802110:	defff704 	addi	sp,sp,-36
  802114:	dd000415 	stw	r20,16(sp)
  802118:	dfc00815 	stw	ra,32(sp)
  80211c:	ddc00715 	stw	r23,28(sp)
  802120:	dd800615 	stw	r22,24(sp)
  802124:	dd400515 	stw	r21,20(sp)
  802128:	dcc00315 	stw	r19,12(sp)
  80212c:	dc800215 	stw	r18,8(sp)
  802130:	dc400115 	stw	r17,4(sp)
  802134:	dc000015 	stw	r16,0(sp)
  802138:	2500b804 	addi	r20,r4,736
  80213c:	a0002326 	beq	r20,zero,8021cc <_fwalk+0xbc>
  802140:	282b883a 	mov	r21,r5
  802144:	002f883a 	mov	r23,zero
  802148:	05800044 	movi	r22,1
  80214c:	04ffffc4 	movi	r19,-1
  802150:	a4400117 	ldw	r17,4(r20)
  802154:	a4800217 	ldw	r18,8(r20)
  802158:	8c7fffc4 	addi	r17,r17,-1
  80215c:	88000d16 	blt	r17,zero,802194 <_fwalk+0x84>
  802160:	94000304 	addi	r16,r18,12
  802164:	94800384 	addi	r18,r18,14
  802168:	8080000b 	ldhu	r2,0(r16)
  80216c:	8c7fffc4 	addi	r17,r17,-1
  802170:	813ffd04 	addi	r4,r16,-12
  802174:	b080042e 	bgeu	r22,r2,802188 <_fwalk+0x78>
  802178:	9080000f 	ldh	r2,0(r18)
  80217c:	14c00226 	beq	r2,r19,802188 <_fwalk+0x78>
  802180:	a83ee83a 	callr	r21
  802184:	b8aeb03a 	or	r23,r23,r2
  802188:	84001a04 	addi	r16,r16,104
  80218c:	94801a04 	addi	r18,r18,104
  802190:	8cfff51e 	bne	r17,r19,802168 <__alt_mem_onchip_mem+0xff7fa168>
  802194:	a5000017 	ldw	r20,0(r20)
  802198:	a03fed1e 	bne	r20,zero,802150 <__alt_mem_onchip_mem+0xff7fa150>
  80219c:	b805883a 	mov	r2,r23
  8021a0:	dfc00817 	ldw	ra,32(sp)
  8021a4:	ddc00717 	ldw	r23,28(sp)
  8021a8:	dd800617 	ldw	r22,24(sp)
  8021ac:	dd400517 	ldw	r21,20(sp)
  8021b0:	dd000417 	ldw	r20,16(sp)
  8021b4:	dcc00317 	ldw	r19,12(sp)
  8021b8:	dc800217 	ldw	r18,8(sp)
  8021bc:	dc400117 	ldw	r17,4(sp)
  8021c0:	dc000017 	ldw	r16,0(sp)
  8021c4:	dec00904 	addi	sp,sp,36
  8021c8:	f800283a 	ret
  8021cc:	002f883a 	mov	r23,zero
  8021d0:	003ff206 	br	80219c <__alt_mem_onchip_mem+0xff7fa19c>

008021d4 <_fwalk_reent>:
  8021d4:	defff704 	addi	sp,sp,-36
  8021d8:	dd000415 	stw	r20,16(sp)
  8021dc:	dfc00815 	stw	ra,32(sp)
  8021e0:	ddc00715 	stw	r23,28(sp)
  8021e4:	dd800615 	stw	r22,24(sp)
  8021e8:	dd400515 	stw	r21,20(sp)
  8021ec:	dcc00315 	stw	r19,12(sp)
  8021f0:	dc800215 	stw	r18,8(sp)
  8021f4:	dc400115 	stw	r17,4(sp)
  8021f8:	dc000015 	stw	r16,0(sp)
  8021fc:	2500b804 	addi	r20,r4,736
  802200:	a0002326 	beq	r20,zero,802290 <_fwalk_reent+0xbc>
  802204:	282b883a 	mov	r21,r5
  802208:	2027883a 	mov	r19,r4
  80220c:	002f883a 	mov	r23,zero
  802210:	05800044 	movi	r22,1
  802214:	04bfffc4 	movi	r18,-1
  802218:	a4400117 	ldw	r17,4(r20)
  80221c:	a4000217 	ldw	r16,8(r20)
  802220:	8c7fffc4 	addi	r17,r17,-1
  802224:	88000c16 	blt	r17,zero,802258 <_fwalk_reent+0x84>
  802228:	84000304 	addi	r16,r16,12
  80222c:	8080000b 	ldhu	r2,0(r16)
  802230:	8c7fffc4 	addi	r17,r17,-1
  802234:	817ffd04 	addi	r5,r16,-12
  802238:	b080052e 	bgeu	r22,r2,802250 <_fwalk_reent+0x7c>
  80223c:	8080008f 	ldh	r2,2(r16)
  802240:	9809883a 	mov	r4,r19
  802244:	14800226 	beq	r2,r18,802250 <_fwalk_reent+0x7c>
  802248:	a83ee83a 	callr	r21
  80224c:	b8aeb03a 	or	r23,r23,r2
  802250:	84001a04 	addi	r16,r16,104
  802254:	8cbff51e 	bne	r17,r18,80222c <__alt_mem_onchip_mem+0xff7fa22c>
  802258:	a5000017 	ldw	r20,0(r20)
  80225c:	a03fee1e 	bne	r20,zero,802218 <__alt_mem_onchip_mem+0xff7fa218>
  802260:	b805883a 	mov	r2,r23
  802264:	dfc00817 	ldw	ra,32(sp)
  802268:	ddc00717 	ldw	r23,28(sp)
  80226c:	dd800617 	ldw	r22,24(sp)
  802270:	dd400517 	ldw	r21,20(sp)
  802274:	dd000417 	ldw	r20,16(sp)
  802278:	dcc00317 	ldw	r19,12(sp)
  80227c:	dc800217 	ldw	r18,8(sp)
  802280:	dc400117 	ldw	r17,4(sp)
  802284:	dc000017 	ldw	r16,0(sp)
  802288:	dec00904 	addi	sp,sp,36
  80228c:	f800283a 	ret
  802290:	002f883a 	mov	r23,zero
  802294:	003ff206 	br	802260 <__alt_mem_onchip_mem+0xff7fa260>

00802298 <_fwrite_r>:
  802298:	defff504 	addi	sp,sp,-44
  80229c:	dc800815 	stw	r18,32(sp)
  8022a0:	39a5383a 	mul	r18,r7,r6
  8022a4:	d8800304 	addi	r2,sp,12
  8022a8:	d8800015 	stw	r2,0(sp)
  8022ac:	00800044 	movi	r2,1
  8022b0:	dcc00915 	stw	r19,36(sp)
  8022b4:	dc400715 	stw	r17,28(sp)
  8022b8:	dc000615 	stw	r16,24(sp)
  8022bc:	d9400315 	stw	r5,12(sp)
  8022c0:	dfc00a15 	stw	ra,40(sp)
  8022c4:	dc800415 	stw	r18,16(sp)
  8022c8:	dc800215 	stw	r18,8(sp)
  8022cc:	d8800115 	stw	r2,4(sp)
  8022d0:	3027883a 	mov	r19,r6
  8022d4:	3821883a 	mov	r16,r7
  8022d8:	2023883a 	mov	r17,r4
  8022dc:	d9400b17 	ldw	r5,44(sp)
  8022e0:	20000226 	beq	r4,zero,8022ec <_fwrite_r+0x54>
  8022e4:	20800e17 	ldw	r2,56(r4)
  8022e8:	10001a26 	beq	r2,zero,802354 <_fwrite_r+0xbc>
  8022ec:	2880030b 	ldhu	r2,12(r5)
  8022f0:	10c8000c 	andi	r3,r2,8192
  8022f4:	1800061e 	bne	r3,zero,802310 <_fwrite_r+0x78>
  8022f8:	29001917 	ldw	r4,100(r5)
  8022fc:	00f7ffc4 	movi	r3,-8193
  802300:	10880014 	ori	r2,r2,8192
  802304:	20c6703a 	and	r3,r4,r3
  802308:	2880030d 	sth	r2,12(r5)
  80230c:	28c01915 	stw	r3,100(r5)
  802310:	d80d883a 	mov	r6,sp
  802314:	8809883a 	mov	r4,r17
  802318:	0807e5c0 	call	807e5c <__sfvwrite_r>
  80231c:	10000b26 	beq	r2,zero,80234c <_fwrite_r+0xb4>
  802320:	d9000217 	ldw	r4,8(sp)
  802324:	980b883a 	mov	r5,r19
  802328:	9109c83a 	sub	r4,r18,r4
  80232c:	08014d00 	call	8014d0 <__udivsi3>
  802330:	dfc00a17 	ldw	ra,40(sp)
  802334:	dcc00917 	ldw	r19,36(sp)
  802338:	dc800817 	ldw	r18,32(sp)
  80233c:	dc400717 	ldw	r17,28(sp)
  802340:	dc000617 	ldw	r16,24(sp)
  802344:	dec00b04 	addi	sp,sp,44
  802348:	f800283a 	ret
  80234c:	8005883a 	mov	r2,r16
  802350:	003ff706 	br	802330 <__alt_mem_onchip_mem+0xff7fa330>
  802354:	d9400515 	stw	r5,20(sp)
  802358:	08019ec0 	call	8019ec <__sinit>
  80235c:	d9400517 	ldw	r5,20(sp)
  802360:	003fe206 	br	8022ec <__alt_mem_onchip_mem+0xff7fa2ec>

00802364 <fwrite>:
  802364:	defffe04 	addi	sp,sp,-8
  802368:	00802074 	movhi	r2,129
  80236c:	d9c00015 	stw	r7,0(sp)
  802370:	10948104 	addi	r2,r2,20996
  802374:	300f883a 	mov	r7,r6
  802378:	280d883a 	mov	r6,r5
  80237c:	200b883a 	mov	r5,r4
  802380:	11000017 	ldw	r4,0(r2)
  802384:	dfc00115 	stw	ra,4(sp)
  802388:	08022980 	call	802298 <_fwrite_r>
  80238c:	dfc00117 	ldw	ra,4(sp)
  802390:	dec00204 	addi	sp,sp,8
  802394:	f800283a 	ret

00802398 <__smakebuf_r>:
  802398:	2880030b 	ldhu	r2,12(r5)
  80239c:	10c0008c 	andi	r3,r2,2
  8023a0:	1800411e 	bne	r3,zero,8024a8 <__smakebuf_r+0x110>
  8023a4:	deffec04 	addi	sp,sp,-80
  8023a8:	dc000f15 	stw	r16,60(sp)
  8023ac:	2821883a 	mov	r16,r5
  8023b0:	2940038f 	ldh	r5,14(r5)
  8023b4:	dc401015 	stw	r17,64(sp)
  8023b8:	dfc01315 	stw	ra,76(sp)
  8023bc:	dcc01215 	stw	r19,72(sp)
  8023c0:	dc801115 	stw	r18,68(sp)
  8023c4:	2023883a 	mov	r17,r4
  8023c8:	28001c16 	blt	r5,zero,80243c <__smakebuf_r+0xa4>
  8023cc:	d80d883a 	mov	r6,sp
  8023d0:	08020b40 	call	8020b4 <_fstat_r>
  8023d4:	10001816 	blt	r2,zero,802438 <__smakebuf_r+0xa0>
  8023d8:	d8800117 	ldw	r2,4(sp)
  8023dc:	00e00014 	movui	r3,32768
  8023e0:	10bc000c 	andi	r2,r2,61440
  8023e4:	14c80020 	cmpeqi	r19,r2,8192
  8023e8:	10c03726 	beq	r2,r3,8024c8 <__smakebuf_r+0x130>
  8023ec:	80c0030b 	ldhu	r3,12(r16)
  8023f0:	18c20014 	ori	r3,r3,2048
  8023f4:	80c0030d 	sth	r3,12(r16)
  8023f8:	00c80004 	movi	r3,8192
  8023fc:	10c0521e 	bne	r2,r3,802548 <__smakebuf_r+0x1b0>
  802400:	8140038f 	ldh	r5,14(r16)
  802404:	8809883a 	mov	r4,r17
  802408:	08083180 	call	808318 <_isatty_r>
  80240c:	10004c26 	beq	r2,zero,802540 <__smakebuf_r+0x1a8>
  802410:	8080030b 	ldhu	r2,12(r16)
  802414:	80c010c4 	addi	r3,r16,67
  802418:	80c00015 	stw	r3,0(r16)
  80241c:	10800054 	ori	r2,r2,1
  802420:	8080030d 	sth	r2,12(r16)
  802424:	00800044 	movi	r2,1
  802428:	80c00415 	stw	r3,16(r16)
  80242c:	80800515 	stw	r2,20(r16)
  802430:	04810004 	movi	r18,1024
  802434:	00000706 	br	802454 <__smakebuf_r+0xbc>
  802438:	8080030b 	ldhu	r2,12(r16)
  80243c:	10c0200c 	andi	r3,r2,128
  802440:	18001f1e 	bne	r3,zero,8024c0 <__smakebuf_r+0x128>
  802444:	04810004 	movi	r18,1024
  802448:	10820014 	ori	r2,r2,2048
  80244c:	8080030d 	sth	r2,12(r16)
  802450:	0027883a 	mov	r19,zero
  802454:	900b883a 	mov	r5,r18
  802458:	8809883a 	mov	r4,r17
  80245c:	08025540 	call	802554 <_malloc_r>
  802460:	10002c26 	beq	r2,zero,802514 <__smakebuf_r+0x17c>
  802464:	80c0030b 	ldhu	r3,12(r16)
  802468:	01002034 	movhi	r4,128
  80246c:	2105a904 	addi	r4,r4,5796
  802470:	89000f15 	stw	r4,60(r17)
  802474:	18c02014 	ori	r3,r3,128
  802478:	80c0030d 	sth	r3,12(r16)
  80247c:	80800015 	stw	r2,0(r16)
  802480:	80800415 	stw	r2,16(r16)
  802484:	84800515 	stw	r18,20(r16)
  802488:	98001a1e 	bne	r19,zero,8024f4 <__smakebuf_r+0x15c>
  80248c:	dfc01317 	ldw	ra,76(sp)
  802490:	dcc01217 	ldw	r19,72(sp)
  802494:	dc801117 	ldw	r18,68(sp)
  802498:	dc401017 	ldw	r17,64(sp)
  80249c:	dc000f17 	ldw	r16,60(sp)
  8024a0:	dec01404 	addi	sp,sp,80
  8024a4:	f800283a 	ret
  8024a8:	288010c4 	addi	r2,r5,67
  8024ac:	28800015 	stw	r2,0(r5)
  8024b0:	28800415 	stw	r2,16(r5)
  8024b4:	00800044 	movi	r2,1
  8024b8:	28800515 	stw	r2,20(r5)
  8024bc:	f800283a 	ret
  8024c0:	04801004 	movi	r18,64
  8024c4:	003fe006 	br	802448 <__alt_mem_onchip_mem+0xff7fa448>
  8024c8:	81000a17 	ldw	r4,40(r16)
  8024cc:	00c02034 	movhi	r3,128
  8024d0:	18cd1804 	addi	r3,r3,13408
  8024d4:	20ffc51e 	bne	r4,r3,8023ec <__alt_mem_onchip_mem+0xff7fa3ec>
  8024d8:	8080030b 	ldhu	r2,12(r16)
  8024dc:	04810004 	movi	r18,1024
  8024e0:	84801315 	stw	r18,76(r16)
  8024e4:	1484b03a 	or	r2,r2,r18
  8024e8:	8080030d 	sth	r2,12(r16)
  8024ec:	0027883a 	mov	r19,zero
  8024f0:	003fd806 	br	802454 <__alt_mem_onchip_mem+0xff7fa454>
  8024f4:	8140038f 	ldh	r5,14(r16)
  8024f8:	8809883a 	mov	r4,r17
  8024fc:	08083180 	call	808318 <_isatty_r>
  802500:	103fe226 	beq	r2,zero,80248c <__alt_mem_onchip_mem+0xff7fa48c>
  802504:	8080030b 	ldhu	r2,12(r16)
  802508:	10800054 	ori	r2,r2,1
  80250c:	8080030d 	sth	r2,12(r16)
  802510:	003fde06 	br	80248c <__alt_mem_onchip_mem+0xff7fa48c>
  802514:	8080030b 	ldhu	r2,12(r16)
  802518:	10c0800c 	andi	r3,r2,512
  80251c:	183fdb1e 	bne	r3,zero,80248c <__alt_mem_onchip_mem+0xff7fa48c>
  802520:	10800094 	ori	r2,r2,2
  802524:	80c010c4 	addi	r3,r16,67
  802528:	8080030d 	sth	r2,12(r16)
  80252c:	00800044 	movi	r2,1
  802530:	80c00015 	stw	r3,0(r16)
  802534:	80c00415 	stw	r3,16(r16)
  802538:	80800515 	stw	r2,20(r16)
  80253c:	003fd306 	br	80248c <__alt_mem_onchip_mem+0xff7fa48c>
  802540:	04810004 	movi	r18,1024
  802544:	003fc306 	br	802454 <__alt_mem_onchip_mem+0xff7fa454>
  802548:	0027883a 	mov	r19,zero
  80254c:	04810004 	movi	r18,1024
  802550:	003fc006 	br	802454 <__alt_mem_onchip_mem+0xff7fa454>

00802554 <_malloc_r>:
  802554:	defff504 	addi	sp,sp,-44
  802558:	dc800315 	stw	r18,12(sp)
  80255c:	dfc00a15 	stw	ra,40(sp)
  802560:	df000915 	stw	fp,36(sp)
  802564:	ddc00815 	stw	r23,32(sp)
  802568:	dd800715 	stw	r22,28(sp)
  80256c:	dd400615 	stw	r21,24(sp)
  802570:	dd000515 	stw	r20,20(sp)
  802574:	dcc00415 	stw	r19,16(sp)
  802578:	dc400215 	stw	r17,8(sp)
  80257c:	dc000115 	stw	r16,4(sp)
  802580:	288002c4 	addi	r2,r5,11
  802584:	00c00584 	movi	r3,22
  802588:	2025883a 	mov	r18,r4
  80258c:	18807f2e 	bgeu	r3,r2,80278c <_malloc_r+0x238>
  802590:	047ffe04 	movi	r17,-8
  802594:	1462703a 	and	r17,r2,r17
  802598:	8800a316 	blt	r17,zero,802828 <_malloc_r+0x2d4>
  80259c:	8940a236 	bltu	r17,r5,802828 <_malloc_r+0x2d4>
  8025a0:	080f4140 	call	80f414 <__malloc_lock>
  8025a4:	00807dc4 	movi	r2,503
  8025a8:	1441e92e 	bgeu	r2,r17,802d50 <_malloc_r+0x7fc>
  8025ac:	8804d27a 	srli	r2,r17,9
  8025b0:	1000a126 	beq	r2,zero,802838 <_malloc_r+0x2e4>
  8025b4:	00c00104 	movi	r3,4
  8025b8:	18811e36 	bltu	r3,r2,802a34 <_malloc_r+0x4e0>
  8025bc:	8804d1ba 	srli	r2,r17,6
  8025c0:	12000e44 	addi	r8,r2,57
  8025c4:	11c00e04 	addi	r7,r2,56
  8025c8:	4209883a 	add	r4,r8,r8
  8025cc:	04c02074 	movhi	r19,129
  8025d0:	2109883a 	add	r4,r4,r4
  8025d4:	9cce6504 	addi	r19,r19,14740
  8025d8:	2109883a 	add	r4,r4,r4
  8025dc:	9909883a 	add	r4,r19,r4
  8025e0:	24000117 	ldw	r16,4(r4)
  8025e4:	213ffe04 	addi	r4,r4,-8
  8025e8:	24009726 	beq	r4,r16,802848 <_malloc_r+0x2f4>
  8025ec:	80800117 	ldw	r2,4(r16)
  8025f0:	01bfff04 	movi	r6,-4
  8025f4:	014003c4 	movi	r5,15
  8025f8:	1184703a 	and	r2,r2,r6
  8025fc:	1447c83a 	sub	r3,r2,r17
  802600:	28c00716 	blt	r5,r3,802620 <_malloc_r+0xcc>
  802604:	1800920e 	bge	r3,zero,802850 <_malloc_r+0x2fc>
  802608:	84000317 	ldw	r16,12(r16)
  80260c:	24008e26 	beq	r4,r16,802848 <_malloc_r+0x2f4>
  802610:	80800117 	ldw	r2,4(r16)
  802614:	1184703a 	and	r2,r2,r6
  802618:	1447c83a 	sub	r3,r2,r17
  80261c:	28fff90e 	bge	r5,r3,802604 <__alt_mem_onchip_mem+0xff7fa604>
  802620:	3809883a 	mov	r4,r7
  802624:	01802074 	movhi	r6,129
  802628:	9c000417 	ldw	r16,16(r19)
  80262c:	318e6504 	addi	r6,r6,14740
  802630:	32000204 	addi	r8,r6,8
  802634:	82013426 	beq	r16,r8,802b08 <_malloc_r+0x5b4>
  802638:	80c00117 	ldw	r3,4(r16)
  80263c:	00bfff04 	movi	r2,-4
  802640:	188e703a 	and	r7,r3,r2
  802644:	3c45c83a 	sub	r2,r7,r17
  802648:	00c003c4 	movi	r3,15
  80264c:	18811f16 	blt	r3,r2,802acc <_malloc_r+0x578>
  802650:	32000515 	stw	r8,20(r6)
  802654:	32000415 	stw	r8,16(r6)
  802658:	10007f0e 	bge	r2,zero,802858 <_malloc_r+0x304>
  80265c:	00807fc4 	movi	r2,511
  802660:	11c0fd36 	bltu	r2,r7,802a58 <_malloc_r+0x504>
  802664:	3806d0fa 	srli	r3,r7,3
  802668:	01c00044 	movi	r7,1
  80266c:	30800117 	ldw	r2,4(r6)
  802670:	19400044 	addi	r5,r3,1
  802674:	294b883a 	add	r5,r5,r5
  802678:	1807d0ba 	srai	r3,r3,2
  80267c:	294b883a 	add	r5,r5,r5
  802680:	294b883a 	add	r5,r5,r5
  802684:	298b883a 	add	r5,r5,r6
  802688:	38c6983a 	sll	r3,r7,r3
  80268c:	29c00017 	ldw	r7,0(r5)
  802690:	2a7ffe04 	addi	r9,r5,-8
  802694:	1886b03a 	or	r3,r3,r2
  802698:	82400315 	stw	r9,12(r16)
  80269c:	81c00215 	stw	r7,8(r16)
  8026a0:	30c00115 	stw	r3,4(r6)
  8026a4:	2c000015 	stw	r16,0(r5)
  8026a8:	3c000315 	stw	r16,12(r7)
  8026ac:	2005d0ba 	srai	r2,r4,2
  8026b0:	01400044 	movi	r5,1
  8026b4:	288a983a 	sll	r5,r5,r2
  8026b8:	19406f36 	bltu	r3,r5,802878 <_malloc_r+0x324>
  8026bc:	28c4703a 	and	r2,r5,r3
  8026c0:	10000a1e 	bne	r2,zero,8026ec <_malloc_r+0x198>
  8026c4:	00bfff04 	movi	r2,-4
  8026c8:	294b883a 	add	r5,r5,r5
  8026cc:	2088703a 	and	r4,r4,r2
  8026d0:	28c4703a 	and	r2,r5,r3
  8026d4:	21000104 	addi	r4,r4,4
  8026d8:	1000041e 	bne	r2,zero,8026ec <_malloc_r+0x198>
  8026dc:	294b883a 	add	r5,r5,r5
  8026e0:	28c4703a 	and	r2,r5,r3
  8026e4:	21000104 	addi	r4,r4,4
  8026e8:	103ffc26 	beq	r2,zero,8026dc <__alt_mem_onchip_mem+0xff7fa6dc>
  8026ec:	02bfff04 	movi	r10,-4
  8026f0:	024003c4 	movi	r9,15
  8026f4:	21800044 	addi	r6,r4,1
  8026f8:	318d883a 	add	r6,r6,r6
  8026fc:	318d883a 	add	r6,r6,r6
  802700:	318d883a 	add	r6,r6,r6
  802704:	998d883a 	add	r6,r19,r6
  802708:	333ffe04 	addi	r12,r6,-8
  80270c:	2017883a 	mov	r11,r4
  802710:	31800104 	addi	r6,r6,4
  802714:	34000017 	ldw	r16,0(r6)
  802718:	31fffd04 	addi	r7,r6,-12
  80271c:	81c0041e 	bne	r16,r7,802730 <_malloc_r+0x1dc>
  802720:	0000fb06 	br	802b10 <_malloc_r+0x5bc>
  802724:	1801030e 	bge	r3,zero,802b34 <_malloc_r+0x5e0>
  802728:	84000317 	ldw	r16,12(r16)
  80272c:	81c0f826 	beq	r16,r7,802b10 <_malloc_r+0x5bc>
  802730:	80800117 	ldw	r2,4(r16)
  802734:	1284703a 	and	r2,r2,r10
  802738:	1447c83a 	sub	r3,r2,r17
  80273c:	48fff90e 	bge	r9,r3,802724 <__alt_mem_onchip_mem+0xff7fa724>
  802740:	80800317 	ldw	r2,12(r16)
  802744:	81000217 	ldw	r4,8(r16)
  802748:	89400054 	ori	r5,r17,1
  80274c:	81400115 	stw	r5,4(r16)
  802750:	20800315 	stw	r2,12(r4)
  802754:	11000215 	stw	r4,8(r2)
  802758:	8463883a 	add	r17,r16,r17
  80275c:	9c400515 	stw	r17,20(r19)
  802760:	9c400415 	stw	r17,16(r19)
  802764:	18800054 	ori	r2,r3,1
  802768:	88800115 	stw	r2,4(r17)
  80276c:	8a000315 	stw	r8,12(r17)
  802770:	8a000215 	stw	r8,8(r17)
  802774:	88e3883a 	add	r17,r17,r3
  802778:	88c00015 	stw	r3,0(r17)
  80277c:	9009883a 	mov	r4,r18
  802780:	080f4380 	call	80f438 <__malloc_unlock>
  802784:	80800204 	addi	r2,r16,8
  802788:	00001b06 	br	8027f8 <_malloc_r+0x2a4>
  80278c:	04400404 	movi	r17,16
  802790:	89402536 	bltu	r17,r5,802828 <_malloc_r+0x2d4>
  802794:	080f4140 	call	80f414 <__malloc_lock>
  802798:	00800184 	movi	r2,6
  80279c:	01000084 	movi	r4,2
  8027a0:	04c02074 	movhi	r19,129
  8027a4:	1085883a 	add	r2,r2,r2
  8027a8:	9cce6504 	addi	r19,r19,14740
  8027ac:	1085883a 	add	r2,r2,r2
  8027b0:	9885883a 	add	r2,r19,r2
  8027b4:	14000117 	ldw	r16,4(r2)
  8027b8:	10fffe04 	addi	r3,r2,-8
  8027bc:	80c0d926 	beq	r16,r3,802b24 <_malloc_r+0x5d0>
  8027c0:	80c00117 	ldw	r3,4(r16)
  8027c4:	81000317 	ldw	r4,12(r16)
  8027c8:	00bfff04 	movi	r2,-4
  8027cc:	1884703a 	and	r2,r3,r2
  8027d0:	81400217 	ldw	r5,8(r16)
  8027d4:	8085883a 	add	r2,r16,r2
  8027d8:	10c00117 	ldw	r3,4(r2)
  8027dc:	29000315 	stw	r4,12(r5)
  8027e0:	21400215 	stw	r5,8(r4)
  8027e4:	18c00054 	ori	r3,r3,1
  8027e8:	10c00115 	stw	r3,4(r2)
  8027ec:	9009883a 	mov	r4,r18
  8027f0:	080f4380 	call	80f438 <__malloc_unlock>
  8027f4:	80800204 	addi	r2,r16,8
  8027f8:	dfc00a17 	ldw	ra,40(sp)
  8027fc:	df000917 	ldw	fp,36(sp)
  802800:	ddc00817 	ldw	r23,32(sp)
  802804:	dd800717 	ldw	r22,28(sp)
  802808:	dd400617 	ldw	r21,24(sp)
  80280c:	dd000517 	ldw	r20,20(sp)
  802810:	dcc00417 	ldw	r19,16(sp)
  802814:	dc800317 	ldw	r18,12(sp)
  802818:	dc400217 	ldw	r17,8(sp)
  80281c:	dc000117 	ldw	r16,4(sp)
  802820:	dec00b04 	addi	sp,sp,44
  802824:	f800283a 	ret
  802828:	00800304 	movi	r2,12
  80282c:	90800015 	stw	r2,0(r18)
  802830:	0005883a 	mov	r2,zero
  802834:	003ff006 	br	8027f8 <__alt_mem_onchip_mem+0xff7fa7f8>
  802838:	01002004 	movi	r4,128
  80283c:	02001004 	movi	r8,64
  802840:	01c00fc4 	movi	r7,63
  802844:	003f6106 	br	8025cc <__alt_mem_onchip_mem+0xff7fa5cc>
  802848:	4009883a 	mov	r4,r8
  80284c:	003f7506 	br	802624 <__alt_mem_onchip_mem+0xff7fa624>
  802850:	81000317 	ldw	r4,12(r16)
  802854:	003fde06 	br	8027d0 <__alt_mem_onchip_mem+0xff7fa7d0>
  802858:	81c5883a 	add	r2,r16,r7
  80285c:	11400117 	ldw	r5,4(r2)
  802860:	9009883a 	mov	r4,r18
  802864:	29400054 	ori	r5,r5,1
  802868:	11400115 	stw	r5,4(r2)
  80286c:	080f4380 	call	80f438 <__malloc_unlock>
  802870:	80800204 	addi	r2,r16,8
  802874:	003fe006 	br	8027f8 <__alt_mem_onchip_mem+0xff7fa7f8>
  802878:	9c000217 	ldw	r16,8(r19)
  80287c:	00bfff04 	movi	r2,-4
  802880:	85800117 	ldw	r22,4(r16)
  802884:	b0ac703a 	and	r22,r22,r2
  802888:	b4400336 	bltu	r22,r17,802898 <_malloc_r+0x344>
  80288c:	b445c83a 	sub	r2,r22,r17
  802890:	00c003c4 	movi	r3,15
  802894:	18805d16 	blt	r3,r2,802a0c <_malloc_r+0x4b8>
  802898:	05c02074 	movhi	r23,129
  80289c:	00802074 	movhi	r2,129
  8028a0:	109be404 	addi	r2,r2,28560
  8028a4:	bdd48204 	addi	r23,r23,21000
  8028a8:	15400017 	ldw	r21,0(r2)
  8028ac:	b8c00017 	ldw	r3,0(r23)
  8028b0:	00bfffc4 	movi	r2,-1
  8028b4:	858d883a 	add	r6,r16,r22
  8028b8:	8d6b883a 	add	r21,r17,r21
  8028bc:	1880ea26 	beq	r3,r2,802c68 <_malloc_r+0x714>
  8028c0:	ad4403c4 	addi	r21,r21,4111
  8028c4:	00bc0004 	movi	r2,-4096
  8028c8:	a8aa703a 	and	r21,r21,r2
  8028cc:	a80b883a 	mov	r5,r21
  8028d0:	9009883a 	mov	r4,r18
  8028d4:	d9800015 	stw	r6,0(sp)
  8028d8:	08033340 	call	803334 <_sbrk_r>
  8028dc:	1029883a 	mov	r20,r2
  8028e0:	00bfffc4 	movi	r2,-1
  8028e4:	d9800017 	ldw	r6,0(sp)
  8028e8:	a080e826 	beq	r20,r2,802c8c <_malloc_r+0x738>
  8028ec:	a180a636 	bltu	r20,r6,802b88 <_malloc_r+0x634>
  8028f0:	07002074 	movhi	fp,129
  8028f4:	e71bef04 	addi	fp,fp,28604
  8028f8:	e0800017 	ldw	r2,0(fp)
  8028fc:	a887883a 	add	r3,r21,r2
  802900:	e0c00015 	stw	r3,0(fp)
  802904:	3500e626 	beq	r6,r20,802ca0 <_malloc_r+0x74c>
  802908:	b9000017 	ldw	r4,0(r23)
  80290c:	00bfffc4 	movi	r2,-1
  802910:	2080ee26 	beq	r4,r2,802ccc <_malloc_r+0x778>
  802914:	a185c83a 	sub	r2,r20,r6
  802918:	10c5883a 	add	r2,r2,r3
  80291c:	e0800015 	stw	r2,0(fp)
  802920:	a0c001cc 	andi	r3,r20,7
  802924:	1800bc26 	beq	r3,zero,802c18 <_malloc_r+0x6c4>
  802928:	a0e9c83a 	sub	r20,r20,r3
  80292c:	00840204 	movi	r2,4104
  802930:	a5000204 	addi	r20,r20,8
  802934:	10c7c83a 	sub	r3,r2,r3
  802938:	a545883a 	add	r2,r20,r21
  80293c:	1083ffcc 	andi	r2,r2,4095
  802940:	18abc83a 	sub	r21,r3,r2
  802944:	a80b883a 	mov	r5,r21
  802948:	9009883a 	mov	r4,r18
  80294c:	08033340 	call	803334 <_sbrk_r>
  802950:	00ffffc4 	movi	r3,-1
  802954:	10c0e126 	beq	r2,r3,802cdc <_malloc_r+0x788>
  802958:	1505c83a 	sub	r2,r2,r20
  80295c:	1545883a 	add	r2,r2,r21
  802960:	10800054 	ori	r2,r2,1
  802964:	e0c00017 	ldw	r3,0(fp)
  802968:	9d000215 	stw	r20,8(r19)
  80296c:	a0800115 	stw	r2,4(r20)
  802970:	a8c7883a 	add	r3,r21,r3
  802974:	e0c00015 	stw	r3,0(fp)
  802978:	84c00e26 	beq	r16,r19,8029b4 <_malloc_r+0x460>
  80297c:	018003c4 	movi	r6,15
  802980:	3580a72e 	bgeu	r6,r22,802c20 <_malloc_r+0x6cc>
  802984:	81400117 	ldw	r5,4(r16)
  802988:	013ffe04 	movi	r4,-8
  80298c:	b0bffd04 	addi	r2,r22,-12
  802990:	1104703a 	and	r2,r2,r4
  802994:	2900004c 	andi	r4,r5,1
  802998:	2088b03a 	or	r4,r4,r2
  80299c:	81000115 	stw	r4,4(r16)
  8029a0:	01400144 	movi	r5,5
  8029a4:	8089883a 	add	r4,r16,r2
  8029a8:	21400115 	stw	r5,4(r4)
  8029ac:	21400215 	stw	r5,8(r4)
  8029b0:	3080cd36 	bltu	r6,r2,802ce8 <_malloc_r+0x794>
  8029b4:	00802074 	movhi	r2,129
  8029b8:	109be304 	addi	r2,r2,28556
  8029bc:	11000017 	ldw	r4,0(r2)
  8029c0:	20c0012e 	bgeu	r4,r3,8029c8 <_malloc_r+0x474>
  8029c4:	10c00015 	stw	r3,0(r2)
  8029c8:	00802074 	movhi	r2,129
  8029cc:	109be204 	addi	r2,r2,28552
  8029d0:	11000017 	ldw	r4,0(r2)
  8029d4:	9c000217 	ldw	r16,8(r19)
  8029d8:	20c0012e 	bgeu	r4,r3,8029e0 <_malloc_r+0x48c>
  8029dc:	10c00015 	stw	r3,0(r2)
  8029e0:	80c00117 	ldw	r3,4(r16)
  8029e4:	00bfff04 	movi	r2,-4
  8029e8:	1886703a 	and	r3,r3,r2
  8029ec:	1c45c83a 	sub	r2,r3,r17
  8029f0:	1c400236 	bltu	r3,r17,8029fc <_malloc_r+0x4a8>
  8029f4:	00c003c4 	movi	r3,15
  8029f8:	18800416 	blt	r3,r2,802a0c <_malloc_r+0x4b8>
  8029fc:	9009883a 	mov	r4,r18
  802a00:	080f4380 	call	80f438 <__malloc_unlock>
  802a04:	0005883a 	mov	r2,zero
  802a08:	003f7b06 	br	8027f8 <__alt_mem_onchip_mem+0xff7fa7f8>
  802a0c:	88c00054 	ori	r3,r17,1
  802a10:	80c00115 	stw	r3,4(r16)
  802a14:	8463883a 	add	r17,r16,r17
  802a18:	10800054 	ori	r2,r2,1
  802a1c:	9c400215 	stw	r17,8(r19)
  802a20:	88800115 	stw	r2,4(r17)
  802a24:	9009883a 	mov	r4,r18
  802a28:	080f4380 	call	80f438 <__malloc_unlock>
  802a2c:	80800204 	addi	r2,r16,8
  802a30:	003f7106 	br	8027f8 <__alt_mem_onchip_mem+0xff7fa7f8>
  802a34:	00c00504 	movi	r3,20
  802a38:	18804a2e 	bgeu	r3,r2,802b64 <_malloc_r+0x610>
  802a3c:	00c01504 	movi	r3,84
  802a40:	18806e36 	bltu	r3,r2,802bfc <_malloc_r+0x6a8>
  802a44:	8804d33a 	srli	r2,r17,12
  802a48:	12001bc4 	addi	r8,r2,111
  802a4c:	11c01b84 	addi	r7,r2,110
  802a50:	4209883a 	add	r4,r8,r8
  802a54:	003edd06 	br	8025cc <__alt_mem_onchip_mem+0xff7fa5cc>
  802a58:	3804d27a 	srli	r2,r7,9
  802a5c:	00c00104 	movi	r3,4
  802a60:	1880442e 	bgeu	r3,r2,802b74 <_malloc_r+0x620>
  802a64:	00c00504 	movi	r3,20
  802a68:	18808136 	bltu	r3,r2,802c70 <_malloc_r+0x71c>
  802a6c:	11401704 	addi	r5,r2,92
  802a70:	10c016c4 	addi	r3,r2,91
  802a74:	294b883a 	add	r5,r5,r5
  802a78:	294b883a 	add	r5,r5,r5
  802a7c:	294b883a 	add	r5,r5,r5
  802a80:	994b883a 	add	r5,r19,r5
  802a84:	28800017 	ldw	r2,0(r5)
  802a88:	01802074 	movhi	r6,129
  802a8c:	297ffe04 	addi	r5,r5,-8
  802a90:	318e6504 	addi	r6,r6,14740
  802a94:	28806526 	beq	r5,r2,802c2c <_malloc_r+0x6d8>
  802a98:	01bfff04 	movi	r6,-4
  802a9c:	10c00117 	ldw	r3,4(r2)
  802aa0:	1986703a 	and	r3,r3,r6
  802aa4:	38c0022e 	bgeu	r7,r3,802ab0 <_malloc_r+0x55c>
  802aa8:	10800217 	ldw	r2,8(r2)
  802aac:	28bffb1e 	bne	r5,r2,802a9c <__alt_mem_onchip_mem+0xff7faa9c>
  802ab0:	11400317 	ldw	r5,12(r2)
  802ab4:	98c00117 	ldw	r3,4(r19)
  802ab8:	81400315 	stw	r5,12(r16)
  802abc:	80800215 	stw	r2,8(r16)
  802ac0:	2c000215 	stw	r16,8(r5)
  802ac4:	14000315 	stw	r16,12(r2)
  802ac8:	003ef806 	br	8026ac <__alt_mem_onchip_mem+0xff7fa6ac>
  802acc:	88c00054 	ori	r3,r17,1
  802ad0:	80c00115 	stw	r3,4(r16)
  802ad4:	8463883a 	add	r17,r16,r17
  802ad8:	34400515 	stw	r17,20(r6)
  802adc:	34400415 	stw	r17,16(r6)
  802ae0:	10c00054 	ori	r3,r2,1
  802ae4:	8a000315 	stw	r8,12(r17)
  802ae8:	8a000215 	stw	r8,8(r17)
  802aec:	88c00115 	stw	r3,4(r17)
  802af0:	88a3883a 	add	r17,r17,r2
  802af4:	88800015 	stw	r2,0(r17)
  802af8:	9009883a 	mov	r4,r18
  802afc:	080f4380 	call	80f438 <__malloc_unlock>
  802b00:	80800204 	addi	r2,r16,8
  802b04:	003f3c06 	br	8027f8 <__alt_mem_onchip_mem+0xff7fa7f8>
  802b08:	30c00117 	ldw	r3,4(r6)
  802b0c:	003ee706 	br	8026ac <__alt_mem_onchip_mem+0xff7fa6ac>
  802b10:	5ac00044 	addi	r11,r11,1
  802b14:	588000cc 	andi	r2,r11,3
  802b18:	31800204 	addi	r6,r6,8
  802b1c:	103efd1e 	bne	r2,zero,802714 <__alt_mem_onchip_mem+0xff7fa714>
  802b20:	00002406 	br	802bb4 <_malloc_r+0x660>
  802b24:	14000317 	ldw	r16,12(r2)
  802b28:	143f251e 	bne	r2,r16,8027c0 <__alt_mem_onchip_mem+0xff7fa7c0>
  802b2c:	21000084 	addi	r4,r4,2
  802b30:	003ebc06 	br	802624 <__alt_mem_onchip_mem+0xff7fa624>
  802b34:	8085883a 	add	r2,r16,r2
  802b38:	10c00117 	ldw	r3,4(r2)
  802b3c:	81000317 	ldw	r4,12(r16)
  802b40:	81400217 	ldw	r5,8(r16)
  802b44:	18c00054 	ori	r3,r3,1
  802b48:	10c00115 	stw	r3,4(r2)
  802b4c:	29000315 	stw	r4,12(r5)
  802b50:	21400215 	stw	r5,8(r4)
  802b54:	9009883a 	mov	r4,r18
  802b58:	080f4380 	call	80f438 <__malloc_unlock>
  802b5c:	80800204 	addi	r2,r16,8
  802b60:	003f2506 	br	8027f8 <__alt_mem_onchip_mem+0xff7fa7f8>
  802b64:	12001704 	addi	r8,r2,92
  802b68:	11c016c4 	addi	r7,r2,91
  802b6c:	4209883a 	add	r4,r8,r8
  802b70:	003e9606 	br	8025cc <__alt_mem_onchip_mem+0xff7fa5cc>
  802b74:	3804d1ba 	srli	r2,r7,6
  802b78:	11400e44 	addi	r5,r2,57
  802b7c:	10c00e04 	addi	r3,r2,56
  802b80:	294b883a 	add	r5,r5,r5
  802b84:	003fbc06 	br	802a78 <__alt_mem_onchip_mem+0xff7faa78>
  802b88:	84ff5926 	beq	r16,r19,8028f0 <__alt_mem_onchip_mem+0xff7fa8f0>
  802b8c:	00802074 	movhi	r2,129
  802b90:	108e6504 	addi	r2,r2,14740
  802b94:	14000217 	ldw	r16,8(r2)
  802b98:	00bfff04 	movi	r2,-4
  802b9c:	80c00117 	ldw	r3,4(r16)
  802ba0:	1886703a 	and	r3,r3,r2
  802ba4:	003f9106 	br	8029ec <__alt_mem_onchip_mem+0xff7fa9ec>
  802ba8:	60800217 	ldw	r2,8(r12)
  802bac:	213fffc4 	addi	r4,r4,-1
  802bb0:	1300651e 	bne	r2,r12,802d48 <_malloc_r+0x7f4>
  802bb4:	208000cc 	andi	r2,r4,3
  802bb8:	633ffe04 	addi	r12,r12,-8
  802bbc:	103ffa1e 	bne	r2,zero,802ba8 <__alt_mem_onchip_mem+0xff7faba8>
  802bc0:	98800117 	ldw	r2,4(r19)
  802bc4:	0146303a 	nor	r3,zero,r5
  802bc8:	1884703a 	and	r2,r3,r2
  802bcc:	98800115 	stw	r2,4(r19)
  802bd0:	294b883a 	add	r5,r5,r5
  802bd4:	117f2836 	bltu	r2,r5,802878 <__alt_mem_onchip_mem+0xff7fa878>
  802bd8:	283f2726 	beq	r5,zero,802878 <__alt_mem_onchip_mem+0xff7fa878>
  802bdc:	2886703a 	and	r3,r5,r2
  802be0:	5809883a 	mov	r4,r11
  802be4:	183ec31e 	bne	r3,zero,8026f4 <__alt_mem_onchip_mem+0xff7fa6f4>
  802be8:	294b883a 	add	r5,r5,r5
  802bec:	2886703a 	and	r3,r5,r2
  802bf0:	21000104 	addi	r4,r4,4
  802bf4:	183ffc26 	beq	r3,zero,802be8 <__alt_mem_onchip_mem+0xff7fabe8>
  802bf8:	003ebe06 	br	8026f4 <__alt_mem_onchip_mem+0xff7fa6f4>
  802bfc:	00c05504 	movi	r3,340
  802c00:	18801236 	bltu	r3,r2,802c4c <_malloc_r+0x6f8>
  802c04:	8804d3fa 	srli	r2,r17,15
  802c08:	12001e04 	addi	r8,r2,120
  802c0c:	11c01dc4 	addi	r7,r2,119
  802c10:	4209883a 	add	r4,r8,r8
  802c14:	003e6d06 	br	8025cc <__alt_mem_onchip_mem+0xff7fa5cc>
  802c18:	00c40004 	movi	r3,4096
  802c1c:	003f4606 	br	802938 <__alt_mem_onchip_mem+0xff7fa938>
  802c20:	00800044 	movi	r2,1
  802c24:	a0800115 	stw	r2,4(r20)
  802c28:	003f7406 	br	8029fc <__alt_mem_onchip_mem+0xff7fa9fc>
  802c2c:	1805d0ba 	srai	r2,r3,2
  802c30:	01c00044 	movi	r7,1
  802c34:	30c00117 	ldw	r3,4(r6)
  802c38:	388e983a 	sll	r7,r7,r2
  802c3c:	2805883a 	mov	r2,r5
  802c40:	38c6b03a 	or	r3,r7,r3
  802c44:	30c00115 	stw	r3,4(r6)
  802c48:	003f9b06 	br	802ab8 <__alt_mem_onchip_mem+0xff7faab8>
  802c4c:	00c15504 	movi	r3,1364
  802c50:	18801a36 	bltu	r3,r2,802cbc <_malloc_r+0x768>
  802c54:	8804d4ba 	srli	r2,r17,18
  802c58:	12001f44 	addi	r8,r2,125
  802c5c:	11c01f04 	addi	r7,r2,124
  802c60:	4209883a 	add	r4,r8,r8
  802c64:	003e5906 	br	8025cc <__alt_mem_onchip_mem+0xff7fa5cc>
  802c68:	ad400404 	addi	r21,r21,16
  802c6c:	003f1706 	br	8028cc <__alt_mem_onchip_mem+0xff7fa8cc>
  802c70:	00c01504 	movi	r3,84
  802c74:	18802336 	bltu	r3,r2,802d04 <_malloc_r+0x7b0>
  802c78:	3804d33a 	srli	r2,r7,12
  802c7c:	11401bc4 	addi	r5,r2,111
  802c80:	10c01b84 	addi	r3,r2,110
  802c84:	294b883a 	add	r5,r5,r5
  802c88:	003f7b06 	br	802a78 <__alt_mem_onchip_mem+0xff7faa78>
  802c8c:	9c000217 	ldw	r16,8(r19)
  802c90:	00bfff04 	movi	r2,-4
  802c94:	80c00117 	ldw	r3,4(r16)
  802c98:	1886703a 	and	r3,r3,r2
  802c9c:	003f5306 	br	8029ec <__alt_mem_onchip_mem+0xff7fa9ec>
  802ca0:	3083ffcc 	andi	r2,r6,4095
  802ca4:	103f181e 	bne	r2,zero,802908 <__alt_mem_onchip_mem+0xff7fa908>
  802ca8:	99000217 	ldw	r4,8(r19)
  802cac:	b545883a 	add	r2,r22,r21
  802cb0:	10800054 	ori	r2,r2,1
  802cb4:	20800115 	stw	r2,4(r4)
  802cb8:	003f3e06 	br	8029b4 <__alt_mem_onchip_mem+0xff7fa9b4>
  802cbc:	01003f84 	movi	r4,254
  802cc0:	02001fc4 	movi	r8,127
  802cc4:	01c01f84 	movi	r7,126
  802cc8:	003e4006 	br	8025cc <__alt_mem_onchip_mem+0xff7fa5cc>
  802ccc:	00802074 	movhi	r2,129
  802cd0:	10948204 	addi	r2,r2,21000
  802cd4:	15000015 	stw	r20,0(r2)
  802cd8:	003f1106 	br	802920 <__alt_mem_onchip_mem+0xff7fa920>
  802cdc:	00800044 	movi	r2,1
  802ce0:	002b883a 	mov	r21,zero
  802ce4:	003f1f06 	br	802964 <__alt_mem_onchip_mem+0xff7fa964>
  802ce8:	81400204 	addi	r5,r16,8
  802cec:	9009883a 	mov	r4,r18
  802cf0:	0807b4c0 	call	807b4c <_free_r>
  802cf4:	00802074 	movhi	r2,129
  802cf8:	109bef04 	addi	r2,r2,28604
  802cfc:	10c00017 	ldw	r3,0(r2)
  802d00:	003f2c06 	br	8029b4 <__alt_mem_onchip_mem+0xff7fa9b4>
  802d04:	00c05504 	movi	r3,340
  802d08:	18800536 	bltu	r3,r2,802d20 <_malloc_r+0x7cc>
  802d0c:	3804d3fa 	srli	r2,r7,15
  802d10:	11401e04 	addi	r5,r2,120
  802d14:	10c01dc4 	addi	r3,r2,119
  802d18:	294b883a 	add	r5,r5,r5
  802d1c:	003f5606 	br	802a78 <__alt_mem_onchip_mem+0xff7faa78>
  802d20:	00c15504 	movi	r3,1364
  802d24:	18800536 	bltu	r3,r2,802d3c <_malloc_r+0x7e8>
  802d28:	3804d4ba 	srli	r2,r7,18
  802d2c:	11401f44 	addi	r5,r2,125
  802d30:	10c01f04 	addi	r3,r2,124
  802d34:	294b883a 	add	r5,r5,r5
  802d38:	003f4f06 	br	802a78 <__alt_mem_onchip_mem+0xff7faa78>
  802d3c:	01403f84 	movi	r5,254
  802d40:	00c01f84 	movi	r3,126
  802d44:	003f4c06 	br	802a78 <__alt_mem_onchip_mem+0xff7faa78>
  802d48:	98800117 	ldw	r2,4(r19)
  802d4c:	003fa006 	br	802bd0 <__alt_mem_onchip_mem+0xff7fabd0>
  802d50:	8808d0fa 	srli	r4,r17,3
  802d54:	20800044 	addi	r2,r4,1
  802d58:	1085883a 	add	r2,r2,r2
  802d5c:	003e9006 	br	8027a0 <__alt_mem_onchip_mem+0xff7fa7a0>

00802d60 <memset>:
  802d60:	20c000cc 	andi	r3,r4,3
  802d64:	2005883a 	mov	r2,r4
  802d68:	18004426 	beq	r3,zero,802e7c <memset+0x11c>
  802d6c:	31ffffc4 	addi	r7,r6,-1
  802d70:	30004026 	beq	r6,zero,802e74 <memset+0x114>
  802d74:	2813883a 	mov	r9,r5
  802d78:	200d883a 	mov	r6,r4
  802d7c:	2007883a 	mov	r3,r4
  802d80:	00000406 	br	802d94 <memset+0x34>
  802d84:	3a3fffc4 	addi	r8,r7,-1
  802d88:	31800044 	addi	r6,r6,1
  802d8c:	38003926 	beq	r7,zero,802e74 <memset+0x114>
  802d90:	400f883a 	mov	r7,r8
  802d94:	18c00044 	addi	r3,r3,1
  802d98:	32400005 	stb	r9,0(r6)
  802d9c:	1a0000cc 	andi	r8,r3,3
  802da0:	403ff81e 	bne	r8,zero,802d84 <__alt_mem_onchip_mem+0xff7fad84>
  802da4:	010000c4 	movi	r4,3
  802da8:	21c02d2e 	bgeu	r4,r7,802e60 <memset+0x100>
  802dac:	29003fcc 	andi	r4,r5,255
  802db0:	200c923a 	slli	r6,r4,8
  802db4:	3108b03a 	or	r4,r6,r4
  802db8:	200c943a 	slli	r6,r4,16
  802dbc:	218cb03a 	or	r6,r4,r6
  802dc0:	010003c4 	movi	r4,15
  802dc4:	21c0182e 	bgeu	r4,r7,802e28 <memset+0xc8>
  802dc8:	3b3ffc04 	addi	r12,r7,-16
  802dcc:	6018d13a 	srli	r12,r12,4
  802dd0:	1a000104 	addi	r8,r3,4
  802dd4:	1ac00204 	addi	r11,r3,8
  802dd8:	6008913a 	slli	r4,r12,4
  802ddc:	1a800304 	addi	r10,r3,12
  802de0:	1813883a 	mov	r9,r3
  802de4:	21000504 	addi	r4,r4,20
  802de8:	1909883a 	add	r4,r3,r4
  802dec:	49800015 	stw	r6,0(r9)
  802df0:	41800015 	stw	r6,0(r8)
  802df4:	59800015 	stw	r6,0(r11)
  802df8:	51800015 	stw	r6,0(r10)
  802dfc:	42000404 	addi	r8,r8,16
  802e00:	4a400404 	addi	r9,r9,16
  802e04:	5ac00404 	addi	r11,r11,16
  802e08:	52800404 	addi	r10,r10,16
  802e0c:	413ff71e 	bne	r8,r4,802dec <__alt_mem_onchip_mem+0xff7fadec>
  802e10:	63000044 	addi	r12,r12,1
  802e14:	6018913a 	slli	r12,r12,4
  802e18:	39c003cc 	andi	r7,r7,15
  802e1c:	010000c4 	movi	r4,3
  802e20:	1b07883a 	add	r3,r3,r12
  802e24:	21c00e2e 	bgeu	r4,r7,802e60 <memset+0x100>
  802e28:	1813883a 	mov	r9,r3
  802e2c:	3811883a 	mov	r8,r7
  802e30:	010000c4 	movi	r4,3
  802e34:	49800015 	stw	r6,0(r9)
  802e38:	423fff04 	addi	r8,r8,-4
  802e3c:	4a400104 	addi	r9,r9,4
  802e40:	223ffc36 	bltu	r4,r8,802e34 <__alt_mem_onchip_mem+0xff7fae34>
  802e44:	393fff04 	addi	r4,r7,-4
  802e48:	2008d0ba 	srli	r4,r4,2
  802e4c:	39c000cc 	andi	r7,r7,3
  802e50:	21000044 	addi	r4,r4,1
  802e54:	2109883a 	add	r4,r4,r4
  802e58:	2109883a 	add	r4,r4,r4
  802e5c:	1907883a 	add	r3,r3,r4
  802e60:	38000526 	beq	r7,zero,802e78 <memset+0x118>
  802e64:	19cf883a 	add	r7,r3,r7
  802e68:	19400005 	stb	r5,0(r3)
  802e6c:	18c00044 	addi	r3,r3,1
  802e70:	38fffd1e 	bne	r7,r3,802e68 <__alt_mem_onchip_mem+0xff7fae68>
  802e74:	f800283a 	ret
  802e78:	f800283a 	ret
  802e7c:	2007883a 	mov	r3,r4
  802e80:	300f883a 	mov	r7,r6
  802e84:	003fc706 	br	802da4 <__alt_mem_onchip_mem+0xff7fada4>

00802e88 <_open_r>:
  802e88:	defffd04 	addi	sp,sp,-12
  802e8c:	2805883a 	mov	r2,r5
  802e90:	dc000015 	stw	r16,0(sp)
  802e94:	04002074 	movhi	r16,129
  802e98:	dc400115 	stw	r17,4(sp)
  802e9c:	300b883a 	mov	r5,r6
  802ea0:	841be104 	addi	r16,r16,28548
  802ea4:	2023883a 	mov	r17,r4
  802ea8:	380d883a 	mov	r6,r7
  802eac:	1009883a 	mov	r4,r2
  802eb0:	dfc00215 	stw	ra,8(sp)
  802eb4:	80000015 	stw	zero,0(r16)
  802eb8:	080f55c0 	call	80f55c <open>
  802ebc:	00ffffc4 	movi	r3,-1
  802ec0:	10c00526 	beq	r2,r3,802ed8 <_open_r+0x50>
  802ec4:	dfc00217 	ldw	ra,8(sp)
  802ec8:	dc400117 	ldw	r17,4(sp)
  802ecc:	dc000017 	ldw	r16,0(sp)
  802ed0:	dec00304 	addi	sp,sp,12
  802ed4:	f800283a 	ret
  802ed8:	80c00017 	ldw	r3,0(r16)
  802edc:	183ff926 	beq	r3,zero,802ec4 <__alt_mem_onchip_mem+0xff7faec4>
  802ee0:	88c00015 	stw	r3,0(r17)
  802ee4:	003ff706 	br	802ec4 <__alt_mem_onchip_mem+0xff7faec4>

00802ee8 <_printf_r>:
  802ee8:	defffd04 	addi	sp,sp,-12
  802eec:	2805883a 	mov	r2,r5
  802ef0:	dfc00015 	stw	ra,0(sp)
  802ef4:	d9800115 	stw	r6,4(sp)
  802ef8:	d9c00215 	stw	r7,8(sp)
  802efc:	21400217 	ldw	r5,8(r4)
  802f00:	d9c00104 	addi	r7,sp,4
  802f04:	100d883a 	mov	r6,r2
  802f08:	08037180 	call	803718 <___vfprintf_internal_r>
  802f0c:	dfc00017 	ldw	ra,0(sp)
  802f10:	dec00304 	addi	sp,sp,12
  802f14:	f800283a 	ret

00802f18 <printf>:
  802f18:	defffc04 	addi	sp,sp,-16
  802f1c:	dfc00015 	stw	ra,0(sp)
  802f20:	d9400115 	stw	r5,4(sp)
  802f24:	d9800215 	stw	r6,8(sp)
  802f28:	d9c00315 	stw	r7,12(sp)
  802f2c:	00802074 	movhi	r2,129
  802f30:	10948104 	addi	r2,r2,20996
  802f34:	10800017 	ldw	r2,0(r2)
  802f38:	200b883a 	mov	r5,r4
  802f3c:	d9800104 	addi	r6,sp,4
  802f40:	11000217 	ldw	r4,8(r2)
  802f44:	08059100 	call	805910 <__vfprintf_internal>
  802f48:	dfc00017 	ldw	ra,0(sp)
  802f4c:	dec00404 	addi	sp,sp,16
  802f50:	f800283a 	ret

00802f54 <_putc_r>:
  802f54:	defffc04 	addi	sp,sp,-16
  802f58:	dc000215 	stw	r16,8(sp)
  802f5c:	dfc00315 	stw	ra,12(sp)
  802f60:	2021883a 	mov	r16,r4
  802f64:	20000226 	beq	r4,zero,802f70 <_putc_r+0x1c>
  802f68:	20800e17 	ldw	r2,56(r4)
  802f6c:	10001b26 	beq	r2,zero,802fdc <_putc_r+0x88>
  802f70:	30800217 	ldw	r2,8(r6)
  802f74:	10bfffc4 	addi	r2,r2,-1
  802f78:	30800215 	stw	r2,8(r6)
  802f7c:	10000a16 	blt	r2,zero,802fa8 <_putc_r+0x54>
  802f80:	30800017 	ldw	r2,0(r6)
  802f84:	11400005 	stb	r5,0(r2)
  802f88:	30800017 	ldw	r2,0(r6)
  802f8c:	10c00044 	addi	r3,r2,1
  802f90:	30c00015 	stw	r3,0(r6)
  802f94:	10800003 	ldbu	r2,0(r2)
  802f98:	dfc00317 	ldw	ra,12(sp)
  802f9c:	dc000217 	ldw	r16,8(sp)
  802fa0:	dec00404 	addi	sp,sp,16
  802fa4:	f800283a 	ret
  802fa8:	30c00617 	ldw	r3,24(r6)
  802fac:	10c00616 	blt	r2,r3,802fc8 <_putc_r+0x74>
  802fb0:	30800017 	ldw	r2,0(r6)
  802fb4:	00c00284 	movi	r3,10
  802fb8:	11400005 	stb	r5,0(r2)
  802fbc:	30800017 	ldw	r2,0(r6)
  802fc0:	11400003 	ldbu	r5,0(r2)
  802fc4:	28fff11e 	bne	r5,r3,802f8c <__alt_mem_onchip_mem+0xff7faf8c>
  802fc8:	8009883a 	mov	r4,r16
  802fcc:	dfc00317 	ldw	ra,12(sp)
  802fd0:	dc000217 	ldw	r16,8(sp)
  802fd4:	dec00404 	addi	sp,sp,16
  802fd8:	08059e81 	jmpi	8059e8 <__swbuf_r>
  802fdc:	d9400015 	stw	r5,0(sp)
  802fe0:	d9800115 	stw	r6,4(sp)
  802fe4:	08019ec0 	call	8019ec <__sinit>
  802fe8:	d9800117 	ldw	r6,4(sp)
  802fec:	d9400017 	ldw	r5,0(sp)
  802ff0:	003fdf06 	br	802f70 <__alt_mem_onchip_mem+0xff7faf70>

00802ff4 <putc>:
  802ff4:	00802074 	movhi	r2,129
  802ff8:	defffc04 	addi	sp,sp,-16
  802ffc:	10948104 	addi	r2,r2,20996
  803000:	dc000115 	stw	r16,4(sp)
  803004:	14000017 	ldw	r16,0(r2)
  803008:	dc400215 	stw	r17,8(sp)
  80300c:	dfc00315 	stw	ra,12(sp)
  803010:	2023883a 	mov	r17,r4
  803014:	80000226 	beq	r16,zero,803020 <putc+0x2c>
  803018:	80800e17 	ldw	r2,56(r16)
  80301c:	10001a26 	beq	r2,zero,803088 <putc+0x94>
  803020:	28800217 	ldw	r2,8(r5)
  803024:	10bfffc4 	addi	r2,r2,-1
  803028:	28800215 	stw	r2,8(r5)
  80302c:	10000b16 	blt	r2,zero,80305c <putc+0x68>
  803030:	28800017 	ldw	r2,0(r5)
  803034:	14400005 	stb	r17,0(r2)
  803038:	28800017 	ldw	r2,0(r5)
  80303c:	10c00044 	addi	r3,r2,1
  803040:	28c00015 	stw	r3,0(r5)
  803044:	10800003 	ldbu	r2,0(r2)
  803048:	dfc00317 	ldw	ra,12(sp)
  80304c:	dc400217 	ldw	r17,8(sp)
  803050:	dc000117 	ldw	r16,4(sp)
  803054:	dec00404 	addi	sp,sp,16
  803058:	f800283a 	ret
  80305c:	28c00617 	ldw	r3,24(r5)
  803060:	10c00e16 	blt	r2,r3,80309c <putc+0xa8>
  803064:	28800017 	ldw	r2,0(r5)
  803068:	01000284 	movi	r4,10
  80306c:	14400005 	stb	r17,0(r2)
  803070:	28800017 	ldw	r2,0(r5)
  803074:	10c00003 	ldbu	r3,0(r2)
  803078:	193ff01e 	bne	r3,r4,80303c <__alt_mem_onchip_mem+0xff7fb03c>
  80307c:	280d883a 	mov	r6,r5
  803080:	180b883a 	mov	r5,r3
  803084:	00000706 	br	8030a4 <putc+0xb0>
  803088:	8009883a 	mov	r4,r16
  80308c:	d9400015 	stw	r5,0(sp)
  803090:	08019ec0 	call	8019ec <__sinit>
  803094:	d9400017 	ldw	r5,0(sp)
  803098:	003fe106 	br	803020 <__alt_mem_onchip_mem+0xff7fb020>
  80309c:	280d883a 	mov	r6,r5
  8030a0:	880b883a 	mov	r5,r17
  8030a4:	8009883a 	mov	r4,r16
  8030a8:	dfc00317 	ldw	ra,12(sp)
  8030ac:	dc400217 	ldw	r17,8(sp)
  8030b0:	dc000117 	ldw	r16,4(sp)
  8030b4:	dec00404 	addi	sp,sp,16
  8030b8:	08059e81 	jmpi	8059e8 <__swbuf_r>

008030bc <lflush>:
  8030bc:	2080030b 	ldhu	r2,12(r4)
  8030c0:	00c00244 	movi	r3,9
  8030c4:	1080024c 	andi	r2,r2,9
  8030c8:	10c00226 	beq	r2,r3,8030d4 <lflush+0x18>
  8030cc:	0005883a 	mov	r2,zero
  8030d0:	f800283a 	ret
  8030d4:	080794c1 	jmpi	80794c <fflush>

008030d8 <__srefill_r>:
  8030d8:	defffc04 	addi	sp,sp,-16
  8030dc:	dc400115 	stw	r17,4(sp)
  8030e0:	dc000015 	stw	r16,0(sp)
  8030e4:	dfc00315 	stw	ra,12(sp)
  8030e8:	dc800215 	stw	r18,8(sp)
  8030ec:	2023883a 	mov	r17,r4
  8030f0:	2821883a 	mov	r16,r5
  8030f4:	20000226 	beq	r4,zero,803100 <__srefill_r+0x28>
  8030f8:	20800e17 	ldw	r2,56(r4)
  8030fc:	10003c26 	beq	r2,zero,8031f0 <__srefill_r+0x118>
  803100:	80c0030b 	ldhu	r3,12(r16)
  803104:	1908000c 	andi	r4,r3,8192
  803108:	1805883a 	mov	r2,r3
  80310c:	2000071e 	bne	r4,zero,80312c <__srefill_r+0x54>
  803110:	81001917 	ldw	r4,100(r16)
  803114:	18880014 	ori	r2,r3,8192
  803118:	00f7ffc4 	movi	r3,-8193
  80311c:	20c8703a 	and	r4,r4,r3
  803120:	8080030d 	sth	r2,12(r16)
  803124:	1007883a 	mov	r3,r2
  803128:	81001915 	stw	r4,100(r16)
  80312c:	80000115 	stw	zero,4(r16)
  803130:	1100080c 	andi	r4,r2,32
  803134:	2000571e 	bne	r4,zero,803294 <__srefill_r+0x1bc>
  803138:	1100010c 	andi	r4,r2,4
  80313c:	20001f26 	beq	r4,zero,8031bc <__srefill_r+0xe4>
  803140:	81400c17 	ldw	r5,48(r16)
  803144:	28000826 	beq	r5,zero,803168 <__srefill_r+0x90>
  803148:	80801004 	addi	r2,r16,64
  80314c:	28800226 	beq	r5,r2,803158 <__srefill_r+0x80>
  803150:	8809883a 	mov	r4,r17
  803154:	0807b4c0 	call	807b4c <_free_r>
  803158:	80800f17 	ldw	r2,60(r16)
  80315c:	80000c15 	stw	zero,48(r16)
  803160:	80800115 	stw	r2,4(r16)
  803164:	1000391e 	bne	r2,zero,80324c <__srefill_r+0x174>
  803168:	80800417 	ldw	r2,16(r16)
  80316c:	10004b26 	beq	r2,zero,80329c <__srefill_r+0x1c4>
  803170:	8480030b 	ldhu	r18,12(r16)
  803174:	908000cc 	andi	r2,r18,3
  803178:	10001f1e 	bne	r2,zero,8031f8 <__srefill_r+0x120>
  80317c:	81800417 	ldw	r6,16(r16)
  803180:	80800817 	ldw	r2,32(r16)
  803184:	81c00517 	ldw	r7,20(r16)
  803188:	81400717 	ldw	r5,28(r16)
  80318c:	81800015 	stw	r6,0(r16)
  803190:	8809883a 	mov	r4,r17
  803194:	103ee83a 	callr	r2
  803198:	80800115 	stw	r2,4(r16)
  80319c:	00800e0e 	bge	zero,r2,8031d8 <__srefill_r+0x100>
  8031a0:	0005883a 	mov	r2,zero
  8031a4:	dfc00317 	ldw	ra,12(sp)
  8031a8:	dc800217 	ldw	r18,8(sp)
  8031ac:	dc400117 	ldw	r17,4(sp)
  8031b0:	dc000017 	ldw	r16,0(sp)
  8031b4:	dec00404 	addi	sp,sp,16
  8031b8:	f800283a 	ret
  8031bc:	1100040c 	andi	r4,r2,16
  8031c0:	20003026 	beq	r4,zero,803284 <__srefill_r+0x1ac>
  8031c4:	1080020c 	andi	r2,r2,8
  8031c8:	1000241e 	bne	r2,zero,80325c <__srefill_r+0x184>
  8031cc:	18c00114 	ori	r3,r3,4
  8031d0:	80c0030d 	sth	r3,12(r16)
  8031d4:	003fe406 	br	803168 <__alt_mem_onchip_mem+0xff7fb168>
  8031d8:	80c0030b 	ldhu	r3,12(r16)
  8031dc:	1000161e 	bne	r2,zero,803238 <__srefill_r+0x160>
  8031e0:	18c00814 	ori	r3,r3,32
  8031e4:	00bfffc4 	movi	r2,-1
  8031e8:	80c0030d 	sth	r3,12(r16)
  8031ec:	003fed06 	br	8031a4 <__alt_mem_onchip_mem+0xff7fb1a4>
  8031f0:	08019ec0 	call	8019ec <__sinit>
  8031f4:	003fc206 	br	803100 <__alt_mem_onchip_mem+0xff7fb100>
  8031f8:	00802074 	movhi	r2,129
  8031fc:	10948004 	addi	r2,r2,20992
  803200:	11000017 	ldw	r4,0(r2)
  803204:	01402034 	movhi	r5,128
  803208:	00800044 	movi	r2,1
  80320c:	294c2f04 	addi	r5,r5,12476
  803210:	8080030d 	sth	r2,12(r16)
  803214:	08021100 	call	802110 <_fwalk>
  803218:	00800244 	movi	r2,9
  80321c:	8480030d 	sth	r18,12(r16)
  803220:	9480024c 	andi	r18,r18,9
  803224:	90bfd51e 	bne	r18,r2,80317c <__alt_mem_onchip_mem+0xff7fb17c>
  803228:	800b883a 	mov	r5,r16
  80322c:	8809883a 	mov	r4,r17
  803230:	08076d40 	call	8076d4 <__sflush_r>
  803234:	003fd106 	br	80317c <__alt_mem_onchip_mem+0xff7fb17c>
  803238:	18c01014 	ori	r3,r3,64
  80323c:	80000115 	stw	zero,4(r16)
  803240:	00bfffc4 	movi	r2,-1
  803244:	80c0030d 	sth	r3,12(r16)
  803248:	003fd606 	br	8031a4 <__alt_mem_onchip_mem+0xff7fb1a4>
  80324c:	80c00e17 	ldw	r3,56(r16)
  803250:	0005883a 	mov	r2,zero
  803254:	80c00015 	stw	r3,0(r16)
  803258:	003fd206 	br	8031a4 <__alt_mem_onchip_mem+0xff7fb1a4>
  80325c:	800b883a 	mov	r5,r16
  803260:	8809883a 	mov	r4,r17
  803264:	08078f00 	call	8078f0 <_fflush_r>
  803268:	10000a1e 	bne	r2,zero,803294 <__srefill_r+0x1bc>
  80326c:	8080030b 	ldhu	r2,12(r16)
  803270:	00fffdc4 	movi	r3,-9
  803274:	80000215 	stw	zero,8(r16)
  803278:	1886703a 	and	r3,r3,r2
  80327c:	80000615 	stw	zero,24(r16)
  803280:	003fd206 	br	8031cc <__alt_mem_onchip_mem+0xff7fb1cc>
  803284:	00800244 	movi	r2,9
  803288:	88800015 	stw	r2,0(r17)
  80328c:	18c01014 	ori	r3,r3,64
  803290:	80c0030d 	sth	r3,12(r16)
  803294:	00bfffc4 	movi	r2,-1
  803298:	003fc206 	br	8031a4 <__alt_mem_onchip_mem+0xff7fb1a4>
  80329c:	800b883a 	mov	r5,r16
  8032a0:	8809883a 	mov	r4,r17
  8032a4:	08023980 	call	802398 <__smakebuf_r>
  8032a8:	003fb106 	br	803170 <__alt_mem_onchip_mem+0xff7fb170>

008032ac <__srget_r>:
  8032ac:	defffd04 	addi	sp,sp,-12
  8032b0:	dc400115 	stw	r17,4(sp)
  8032b4:	dc000015 	stw	r16,0(sp)
  8032b8:	dfc00215 	stw	ra,8(sp)
  8032bc:	2023883a 	mov	r17,r4
  8032c0:	2821883a 	mov	r16,r5
  8032c4:	20000226 	beq	r4,zero,8032d0 <__srget_r+0x24>
  8032c8:	20800e17 	ldw	r2,56(r4)
  8032cc:	10001026 	beq	r2,zero,803310 <__srget_r+0x64>
  8032d0:	800b883a 	mov	r5,r16
  8032d4:	8809883a 	mov	r4,r17
  8032d8:	08030d80 	call	8030d8 <__srefill_r>
  8032dc:	10000e1e 	bne	r2,zero,803318 <__srget_r+0x6c>
  8032e0:	80c00017 	ldw	r3,0(r16)
  8032e4:	80800117 	ldw	r2,4(r16)
  8032e8:	19000044 	addi	r4,r3,1
  8032ec:	10bfffc4 	addi	r2,r2,-1
  8032f0:	80800115 	stw	r2,4(r16)
  8032f4:	81000015 	stw	r4,0(r16)
  8032f8:	18800003 	ldbu	r2,0(r3)
  8032fc:	dfc00217 	ldw	ra,8(sp)
  803300:	dc400117 	ldw	r17,4(sp)
  803304:	dc000017 	ldw	r16,0(sp)
  803308:	dec00304 	addi	sp,sp,12
  80330c:	f800283a 	ret
  803310:	08019ec0 	call	8019ec <__sinit>
  803314:	003fee06 	br	8032d0 <__alt_mem_onchip_mem+0xff7fb2d0>
  803318:	00bfffc4 	movi	r2,-1
  80331c:	003ff706 	br	8032fc <__alt_mem_onchip_mem+0xff7fb2fc>

00803320 <__srget>:
  803320:	00802074 	movhi	r2,129
  803324:	10948104 	addi	r2,r2,20996
  803328:	200b883a 	mov	r5,r4
  80332c:	11000017 	ldw	r4,0(r2)
  803330:	08032ac1 	jmpi	8032ac <__srget_r>

00803334 <_sbrk_r>:
  803334:	defffd04 	addi	sp,sp,-12
  803338:	dc000015 	stw	r16,0(sp)
  80333c:	04002074 	movhi	r16,129
  803340:	dc400115 	stw	r17,4(sp)
  803344:	841be104 	addi	r16,r16,28548
  803348:	2023883a 	mov	r17,r4
  80334c:	2809883a 	mov	r4,r5
  803350:	dfc00215 	stw	ra,8(sp)
  803354:	80000015 	stw	zero,0(r16)
  803358:	080f84c0 	call	80f84c <sbrk>
  80335c:	00ffffc4 	movi	r3,-1
  803360:	10c00526 	beq	r2,r3,803378 <_sbrk_r+0x44>
  803364:	dfc00217 	ldw	ra,8(sp)
  803368:	dc400117 	ldw	r17,4(sp)
  80336c:	dc000017 	ldw	r16,0(sp)
  803370:	dec00304 	addi	sp,sp,12
  803374:	f800283a 	ret
  803378:	80c00017 	ldw	r3,0(r16)
  80337c:	183ff926 	beq	r3,zero,803364 <__alt_mem_onchip_mem+0xff7fb364>
  803380:	88c00015 	stw	r3,0(r17)
  803384:	003ff706 	br	803364 <__alt_mem_onchip_mem+0xff7fb364>

00803388 <__sread>:
  803388:	defffe04 	addi	sp,sp,-8
  80338c:	dc000015 	stw	r16,0(sp)
  803390:	2821883a 	mov	r16,r5
  803394:	2940038f 	ldh	r5,14(r5)
  803398:	dfc00115 	stw	ra,4(sp)
  80339c:	080982c0 	call	80982c <_read_r>
  8033a0:	10000716 	blt	r2,zero,8033c0 <__sread+0x38>
  8033a4:	80c01417 	ldw	r3,80(r16)
  8033a8:	1887883a 	add	r3,r3,r2
  8033ac:	80c01415 	stw	r3,80(r16)
  8033b0:	dfc00117 	ldw	ra,4(sp)
  8033b4:	dc000017 	ldw	r16,0(sp)
  8033b8:	dec00204 	addi	sp,sp,8
  8033bc:	f800283a 	ret
  8033c0:	80c0030b 	ldhu	r3,12(r16)
  8033c4:	18fbffcc 	andi	r3,r3,61439
  8033c8:	80c0030d 	sth	r3,12(r16)
  8033cc:	dfc00117 	ldw	ra,4(sp)
  8033d0:	dc000017 	ldw	r16,0(sp)
  8033d4:	dec00204 	addi	sp,sp,8
  8033d8:	f800283a 	ret

008033dc <__seofread>:
  8033dc:	0005883a 	mov	r2,zero
  8033e0:	f800283a 	ret

008033e4 <__swrite>:
  8033e4:	2880030b 	ldhu	r2,12(r5)
  8033e8:	defffb04 	addi	sp,sp,-20
  8033ec:	dcc00315 	stw	r19,12(sp)
  8033f0:	dc800215 	stw	r18,8(sp)
  8033f4:	dc400115 	stw	r17,4(sp)
  8033f8:	dc000015 	stw	r16,0(sp)
  8033fc:	dfc00415 	stw	ra,16(sp)
  803400:	10c0400c 	andi	r3,r2,256
  803404:	2821883a 	mov	r16,r5
  803408:	2023883a 	mov	r17,r4
  80340c:	3025883a 	mov	r18,r6
  803410:	3827883a 	mov	r19,r7
  803414:	18000526 	beq	r3,zero,80342c <__swrite+0x48>
  803418:	2940038f 	ldh	r5,14(r5)
  80341c:	01c00084 	movi	r7,2
  803420:	000d883a 	mov	r6,zero
  803424:	08084480 	call	808448 <_lseek_r>
  803428:	8080030b 	ldhu	r2,12(r16)
  80342c:	8140038f 	ldh	r5,14(r16)
  803430:	10bbffcc 	andi	r2,r2,61439
  803434:	980f883a 	mov	r7,r19
  803438:	900d883a 	mov	r6,r18
  80343c:	8809883a 	mov	r4,r17
  803440:	8080030d 	sth	r2,12(r16)
  803444:	dfc00417 	ldw	ra,16(sp)
  803448:	dcc00317 	ldw	r19,12(sp)
  80344c:	dc800217 	ldw	r18,8(sp)
  803450:	dc400117 	ldw	r17,4(sp)
  803454:	dc000017 	ldw	r16,0(sp)
  803458:	dec00504 	addi	sp,sp,20
  80345c:	0805b401 	jmpi	805b40 <_write_r>

00803460 <__sseek>:
  803460:	defffe04 	addi	sp,sp,-8
  803464:	dc000015 	stw	r16,0(sp)
  803468:	2821883a 	mov	r16,r5
  80346c:	2940038f 	ldh	r5,14(r5)
  803470:	dfc00115 	stw	ra,4(sp)
  803474:	08084480 	call	808448 <_lseek_r>
  803478:	00ffffc4 	movi	r3,-1
  80347c:	10c00826 	beq	r2,r3,8034a0 <__sseek+0x40>
  803480:	80c0030b 	ldhu	r3,12(r16)
  803484:	80801415 	stw	r2,80(r16)
  803488:	18c40014 	ori	r3,r3,4096
  80348c:	80c0030d 	sth	r3,12(r16)
  803490:	dfc00117 	ldw	ra,4(sp)
  803494:	dc000017 	ldw	r16,0(sp)
  803498:	dec00204 	addi	sp,sp,8
  80349c:	f800283a 	ret
  8034a0:	80c0030b 	ldhu	r3,12(r16)
  8034a4:	18fbffcc 	andi	r3,r3,61439
  8034a8:	80c0030d 	sth	r3,12(r16)
  8034ac:	dfc00117 	ldw	ra,4(sp)
  8034b0:	dc000017 	ldw	r16,0(sp)
  8034b4:	dec00204 	addi	sp,sp,8
  8034b8:	f800283a 	ret

008034bc <__sclose>:
  8034bc:	2940038f 	ldh	r5,14(r5)
  8034c0:	0805cf41 	jmpi	805cf4 <_close_r>

008034c4 <_strtol_r>:
  8034c4:	00802074 	movhi	r2,129
  8034c8:	defff404 	addi	sp,sp,-48
  8034cc:	10948404 	addi	r2,r2,21008
  8034d0:	dd400715 	stw	r21,28(sp)
  8034d4:	15400017 	ldw	r21,0(r2)
  8034d8:	dd800815 	stw	r22,32(sp)
  8034dc:	dd000615 	stw	r20,24(sp)
  8034e0:	dcc00515 	stw	r19,20(sp)
  8034e4:	d9000015 	stw	r4,0(sp)
  8034e8:	dfc00b15 	stw	ra,44(sp)
  8034ec:	df000a15 	stw	fp,40(sp)
  8034f0:	ddc00915 	stw	r23,36(sp)
  8034f4:	dc800415 	stw	r18,16(sp)
  8034f8:	dc400315 	stw	r17,12(sp)
  8034fc:	dc000215 	stw	r16,8(sp)
  803500:	2829883a 	mov	r20,r5
  803504:	3027883a 	mov	r19,r6
  803508:	382d883a 	mov	r22,r7
  80350c:	2809883a 	mov	r4,r5
  803510:	24000003 	ldbu	r16,0(r4)
  803514:	24400044 	addi	r17,r4,1
  803518:	2007883a 	mov	r3,r4
  80351c:	ac05883a 	add	r2,r21,r16
  803520:	10800043 	ldbu	r2,1(r2)
  803524:	8809883a 	mov	r4,r17
  803528:	1080020c 	andi	r2,r2,8
  80352c:	103ff81e 	bne	r2,zero,803510 <__alt_mem_onchip_mem+0xff7fb510>
  803530:	00800b44 	movi	r2,45
  803534:	80805826 	beq	r16,r2,803698 <_strtol_r+0x1d4>
  803538:	00800ac4 	movi	r2,43
  80353c:	80805a26 	beq	r16,r2,8036a8 <_strtol_r+0x1e4>
  803540:	0039883a 	mov	fp,zero
  803544:	b0004426 	beq	r22,zero,803658 <_strtol_r+0x194>
  803548:	00800404 	movi	r2,16
  80354c:	b0806026 	beq	r22,r2,8036d0 <_strtol_r+0x20c>
  803550:	b02f883a 	mov	r23,r22
  803554:	00a00034 	movhi	r2,32768
  803558:	e025003a 	cmpeq	r18,fp,zero
  80355c:	14a5c83a 	sub	r18,r2,r18
  803560:	b80b883a 	mov	r5,r23
  803564:	9009883a 	mov	r4,r18
  803568:	08015340 	call	801534 <__umodsi3>
  80356c:	b80b883a 	mov	r5,r23
  803570:	9009883a 	mov	r4,r18
  803574:	d8800115 	stw	r2,4(sp)
  803578:	08014d00 	call	8014d0 <__udivsi3>
  80357c:	ac07883a 	add	r3,r21,r16
  803580:	18c00043 	ldbu	r3,1(r3)
  803584:	880b883a 	mov	r5,r17
  803588:	000d883a 	mov	r6,zero
  80358c:	1a00010c 	andi	r8,r3,4
  803590:	0009883a 	mov	r4,zero
  803594:	02800044 	movi	r10,1
  803598:	027fffc4 	movi	r9,-1
  80359c:	d9c00117 	ldw	r7,4(sp)
  8035a0:	40000e26 	beq	r8,zero,8035dc <_strtol_r+0x118>
  8035a4:	843ff404 	addi	r16,r16,-48
  8035a8:	8580120e 	bge	r16,r22,8035f4 <_strtol_r+0x130>
  8035ac:	32400526 	beq	r6,r9,8035c4 <_strtol_r+0x100>
  8035b0:	11002536 	bltu	r2,r4,803648 <_strtol_r+0x184>
  8035b4:	20802326 	beq	r4,r2,803644 <_strtol_r+0x180>
  8035b8:	25c9383a 	mul	r4,r4,r23
  8035bc:	01800044 	movi	r6,1
  8035c0:	8109883a 	add	r4,r16,r4
  8035c4:	2c000003 	ldbu	r16,0(r5)
  8035c8:	29400044 	addi	r5,r5,1
  8035cc:	ac07883a 	add	r3,r21,r16
  8035d0:	18c00043 	ldbu	r3,1(r3)
  8035d4:	1a00010c 	andi	r8,r3,4
  8035d8:	403ff21e 	bne	r8,zero,8035a4 <__alt_mem_onchip_mem+0xff7fb5a4>
  8035dc:	18c000cc 	andi	r3,r3,3
  8035e0:	18000426 	beq	r3,zero,8035f4 <_strtol_r+0x130>
  8035e4:	1a801a26 	beq	r3,r10,803650 <_strtol_r+0x18c>
  8035e8:	00c015c4 	movi	r3,87
  8035ec:	80e1c83a 	sub	r16,r16,r3
  8035f0:	85bfee16 	blt	r16,r22,8035ac <__alt_mem_onchip_mem+0xff7fb5ac>
  8035f4:	00bfffc4 	movi	r2,-1
  8035f8:	30801e26 	beq	r6,r2,803674 <_strtol_r+0x1b0>
  8035fc:	e0001b1e 	bne	fp,zero,80366c <_strtol_r+0x1a8>
  803600:	2005883a 	mov	r2,r4
  803604:	98000326 	beq	r19,zero,803614 <_strtol_r+0x150>
  803608:	3000211e 	bne	r6,zero,803690 <_strtol_r+0x1cc>
  80360c:	a00b883a 	mov	r5,r20
  803610:	99400015 	stw	r5,0(r19)
  803614:	dfc00b17 	ldw	ra,44(sp)
  803618:	df000a17 	ldw	fp,40(sp)
  80361c:	ddc00917 	ldw	r23,36(sp)
  803620:	dd800817 	ldw	r22,32(sp)
  803624:	dd400717 	ldw	r21,28(sp)
  803628:	dd000617 	ldw	r20,24(sp)
  80362c:	dcc00517 	ldw	r19,20(sp)
  803630:	dc800417 	ldw	r18,16(sp)
  803634:	dc400317 	ldw	r17,12(sp)
  803638:	dc000217 	ldw	r16,8(sp)
  80363c:	dec00c04 	addi	sp,sp,48
  803640:	f800283a 	ret
  803644:	3c3fdc0e 	bge	r7,r16,8035b8 <__alt_mem_onchip_mem+0xff7fb5b8>
  803648:	01bfffc4 	movi	r6,-1
  80364c:	003fdd06 	br	8035c4 <__alt_mem_onchip_mem+0xff7fb5c4>
  803650:	00c00dc4 	movi	r3,55
  803654:	003fe506 	br	8035ec <__alt_mem_onchip_mem+0xff7fb5ec>
  803658:	00800c04 	movi	r2,48
  80365c:	80801626 	beq	r16,r2,8036b8 <_strtol_r+0x1f4>
  803660:	05800284 	movi	r22,10
  803664:	b02f883a 	mov	r23,r22
  803668:	003fba06 	br	803554 <__alt_mem_onchip_mem+0xff7fb554>
  80366c:	0109c83a 	sub	r4,zero,r4
  803670:	003fe306 	br	803600 <__alt_mem_onchip_mem+0xff7fb600>
  803674:	d9000017 	ldw	r4,0(sp)
  803678:	00c00884 	movi	r3,34
  80367c:	e005003a 	cmpeq	r2,fp,zero
  803680:	20c00015 	stw	r3,0(r4)
  803684:	00e00034 	movhi	r3,32768
  803688:	1885c83a 	sub	r2,r3,r2
  80368c:	983fe126 	beq	r19,zero,803614 <__alt_mem_onchip_mem+0xff7fb614>
  803690:	297fffc4 	addi	r5,r5,-1
  803694:	003fde06 	br	803610 <__alt_mem_onchip_mem+0xff7fb610>
  803698:	1c400084 	addi	r17,r3,2
  80369c:	1c000043 	ldbu	r16,1(r3)
  8036a0:	07000044 	movi	fp,1
  8036a4:	003fa706 	br	803544 <__alt_mem_onchip_mem+0xff7fb544>
  8036a8:	1c400084 	addi	r17,r3,2
  8036ac:	1c000043 	ldbu	r16,1(r3)
  8036b0:	0039883a 	mov	fp,zero
  8036b4:	003fa306 	br	803544 <__alt_mem_onchip_mem+0xff7fb544>
  8036b8:	88800003 	ldbu	r2,0(r17)
  8036bc:	00c01604 	movi	r3,88
  8036c0:	108037cc 	andi	r2,r2,223
  8036c4:	10c00826 	beq	r2,r3,8036e8 <_strtol_r+0x224>
  8036c8:	05800204 	movi	r22,8
  8036cc:	003fa006 	br	803550 <__alt_mem_onchip_mem+0xff7fb550>
  8036d0:	00800c04 	movi	r2,48
  8036d4:	80bf9e1e 	bne	r16,r2,803550 <__alt_mem_onchip_mem+0xff7fb550>
  8036d8:	88800003 	ldbu	r2,0(r17)
  8036dc:	00c01604 	movi	r3,88
  8036e0:	108037cc 	andi	r2,r2,223
  8036e4:	10ff9a1e 	bne	r2,r3,803550 <__alt_mem_onchip_mem+0xff7fb550>
  8036e8:	05c00404 	movi	r23,16
  8036ec:	8c000043 	ldbu	r16,1(r17)
  8036f0:	b82d883a 	mov	r22,r23
  8036f4:	8c400084 	addi	r17,r17,2
  8036f8:	003f9606 	br	803554 <__alt_mem_onchip_mem+0xff7fb554>

008036fc <strtol>:
  8036fc:	00802074 	movhi	r2,129
  803700:	10948104 	addi	r2,r2,20996
  803704:	300f883a 	mov	r7,r6
  803708:	280d883a 	mov	r6,r5
  80370c:	200b883a 	mov	r5,r4
  803710:	11000017 	ldw	r4,0(r2)
  803714:	08034c41 	jmpi	8034c4 <_strtol_r>

00803718 <___vfprintf_internal_r>:
  803718:	deffb804 	addi	sp,sp,-288
  80371c:	dfc04715 	stw	ra,284(sp)
  803720:	ddc04515 	stw	r23,276(sp)
  803724:	dd404315 	stw	r21,268(sp)
  803728:	d9002c15 	stw	r4,176(sp)
  80372c:	282f883a 	mov	r23,r5
  803730:	302b883a 	mov	r21,r6
  803734:	d9c02d15 	stw	r7,180(sp)
  803738:	df004615 	stw	fp,280(sp)
  80373c:	dd804415 	stw	r22,272(sp)
  803740:	dd004215 	stw	r20,264(sp)
  803744:	dcc04115 	stw	r19,260(sp)
  803748:	dc804015 	stw	r18,256(sp)
  80374c:	dc403f15 	stw	r17,252(sp)
  803750:	dc003e15 	stw	r16,248(sp)
  803754:	08084180 	call	808418 <_localeconv_r>
  803758:	10800017 	ldw	r2,0(r2)
  80375c:	1009883a 	mov	r4,r2
  803760:	d8803415 	stw	r2,208(sp)
  803764:	0809f400 	call	809f40 <strlen>
  803768:	d8803715 	stw	r2,220(sp)
  80376c:	d8802c17 	ldw	r2,176(sp)
  803770:	10000226 	beq	r2,zero,80377c <___vfprintf_internal_r+0x64>
  803774:	10800e17 	ldw	r2,56(r2)
  803778:	1000f926 	beq	r2,zero,803b60 <___vfprintf_internal_r+0x448>
  80377c:	b880030b 	ldhu	r2,12(r23)
  803780:	10c8000c 	andi	r3,r2,8192
  803784:	1800061e 	bne	r3,zero,8037a0 <___vfprintf_internal_r+0x88>
  803788:	b9001917 	ldw	r4,100(r23)
  80378c:	00f7ffc4 	movi	r3,-8193
  803790:	10880014 	ori	r2,r2,8192
  803794:	20c6703a 	and	r3,r4,r3
  803798:	b880030d 	sth	r2,12(r23)
  80379c:	b8c01915 	stw	r3,100(r23)
  8037a0:	10c0020c 	andi	r3,r2,8
  8037a4:	1800c126 	beq	r3,zero,803aac <___vfprintf_internal_r+0x394>
  8037a8:	b8c00417 	ldw	r3,16(r23)
  8037ac:	1800bf26 	beq	r3,zero,803aac <___vfprintf_internal_r+0x394>
  8037b0:	1080068c 	andi	r2,r2,26
  8037b4:	00c00284 	movi	r3,10
  8037b8:	10c0c426 	beq	r2,r3,803acc <___vfprintf_internal_r+0x3b4>
  8037bc:	d8c00404 	addi	r3,sp,16
  8037c0:	05002074 	movhi	r20,129
  8037c4:	d9001e04 	addi	r4,sp,120
  8037c8:	a50c0484 	addi	r20,r20,12306
  8037cc:	d8c01e15 	stw	r3,120(sp)
  8037d0:	d8002015 	stw	zero,128(sp)
  8037d4:	d8001f15 	stw	zero,124(sp)
  8037d8:	d8003315 	stw	zero,204(sp)
  8037dc:	d8003615 	stw	zero,216(sp)
  8037e0:	d8003815 	stw	zero,224(sp)
  8037e4:	1811883a 	mov	r8,r3
  8037e8:	d8003915 	stw	zero,228(sp)
  8037ec:	d8003a15 	stw	zero,232(sp)
  8037f0:	d8002f15 	stw	zero,188(sp)
  8037f4:	d9002815 	stw	r4,160(sp)
  8037f8:	a8800007 	ldb	r2,0(r21)
  8037fc:	10027b26 	beq	r2,zero,8041ec <___vfprintf_internal_r+0xad4>
  803800:	00c00944 	movi	r3,37
  803804:	a821883a 	mov	r16,r21
  803808:	10c0021e 	bne	r2,r3,803814 <___vfprintf_internal_r+0xfc>
  80380c:	00001406 	br	803860 <___vfprintf_internal_r+0x148>
  803810:	10c00326 	beq	r2,r3,803820 <___vfprintf_internal_r+0x108>
  803814:	84000044 	addi	r16,r16,1
  803818:	80800007 	ldb	r2,0(r16)
  80381c:	103ffc1e 	bne	r2,zero,803810 <__alt_mem_onchip_mem+0xff7fb810>
  803820:	8563c83a 	sub	r17,r16,r21
  803824:	88000e26 	beq	r17,zero,803860 <___vfprintf_internal_r+0x148>
  803828:	d8c02017 	ldw	r3,128(sp)
  80382c:	d8801f17 	ldw	r2,124(sp)
  803830:	45400015 	stw	r21,0(r8)
  803834:	1c47883a 	add	r3,r3,r17
  803838:	10800044 	addi	r2,r2,1
  80383c:	d8c02015 	stw	r3,128(sp)
  803840:	44400115 	stw	r17,4(r8)
  803844:	d8801f15 	stw	r2,124(sp)
  803848:	00c001c4 	movi	r3,7
  80384c:	1880a716 	blt	r3,r2,803aec <___vfprintf_internal_r+0x3d4>
  803850:	42000204 	addi	r8,r8,8
  803854:	d9402f17 	ldw	r5,188(sp)
  803858:	2c4b883a 	add	r5,r5,r17
  80385c:	d9402f15 	stw	r5,188(sp)
  803860:	80800007 	ldb	r2,0(r16)
  803864:	1000a826 	beq	r2,zero,803b08 <___vfprintf_internal_r+0x3f0>
  803868:	84400047 	ldb	r17,1(r16)
  80386c:	00bfffc4 	movi	r2,-1
  803870:	85400044 	addi	r21,r16,1
  803874:	d8002785 	stb	zero,158(sp)
  803878:	0007883a 	mov	r3,zero
  80387c:	000f883a 	mov	r7,zero
  803880:	d8802915 	stw	r2,164(sp)
  803884:	d8003115 	stw	zero,196(sp)
  803888:	0025883a 	mov	r18,zero
  80388c:	01401604 	movi	r5,88
  803890:	01800244 	movi	r6,9
  803894:	02800a84 	movi	r10,42
  803898:	02401b04 	movi	r9,108
  80389c:	ad400044 	addi	r21,r21,1
  8038a0:	88bff804 	addi	r2,r17,-32
  8038a4:	28830436 	bltu	r5,r2,8044b8 <___vfprintf_internal_r+0xda0>
  8038a8:	100490ba 	slli	r2,r2,2
  8038ac:	01002034 	movhi	r4,128
  8038b0:	210e3004 	addi	r4,r4,14528
  8038b4:	1105883a 	add	r2,r2,r4
  8038b8:	10800017 	ldw	r2,0(r2)
  8038bc:	1000683a 	jmp	r2
  8038c0:	008043d8 	cmpnei	r2,zero,271
  8038c4:	008044b8 	rdprs	r2,zero,274
  8038c8:	008044b8 	rdprs	r2,zero,274
  8038cc:	008043f8 	rdprs	r2,zero,271
  8038d0:	008044b8 	rdprs	r2,zero,274
  8038d4:	008044b8 	rdprs	r2,zero,274
  8038d8:	008044b8 	rdprs	r2,zero,274
  8038dc:	008044b8 	rdprs	r2,zero,274
  8038e0:	008044b8 	rdprs	r2,zero,274
  8038e4:	008044b8 	rdprs	r2,zero,274
  8038e8:	00803b6c 	andhi	r2,zero,237
  8038ec:	00804314 	movui	r2,268
  8038f0:	008044b8 	rdprs	r2,zero,274
  8038f4:	00803a34 	movhi	r2,232
  8038f8:	00803b94 	movui	r2,238
  8038fc:	008044b8 	rdprs	r2,zero,274
  803900:	00803bd4 	movui	r2,239
  803904:	00803be0 	cmpeqi	r2,zero,239
  803908:	00803be0 	cmpeqi	r2,zero,239
  80390c:	00803be0 	cmpeqi	r2,zero,239
  803910:	00803be0 	cmpeqi	r2,zero,239
  803914:	00803be0 	cmpeqi	r2,zero,239
  803918:	00803be0 	cmpeqi	r2,zero,239
  80391c:	00803be0 	cmpeqi	r2,zero,239
  803920:	00803be0 	cmpeqi	r2,zero,239
  803924:	00803be0 	cmpeqi	r2,zero,239
  803928:	008044b8 	rdprs	r2,zero,274
  80392c:	008044b8 	rdprs	r2,zero,274
  803930:	008044b8 	rdprs	r2,zero,274
  803934:	008044b8 	rdprs	r2,zero,274
  803938:	008044b8 	rdprs	r2,zero,274
  80393c:	008044b8 	rdprs	r2,zero,274
  803940:	008044b8 	rdprs	r2,zero,274
  803944:	008044b8 	rdprs	r2,zero,274
  803948:	008044b8 	rdprs	r2,zero,274
  80394c:	008044b8 	rdprs	r2,zero,274
  803950:	00803c14 	movui	r2,240
  803954:	00803cd0 	cmplti	r2,zero,243
  803958:	008044b8 	rdprs	r2,zero,274
  80395c:	00803cd0 	cmplti	r2,zero,243
  803960:	008044b8 	rdprs	r2,zero,274
  803964:	008044b8 	rdprs	r2,zero,274
  803968:	008044b8 	rdprs	r2,zero,274
  80396c:	008044b8 	rdprs	r2,zero,274
  803970:	00803d70 	cmpltui	r2,zero,245
  803974:	008044b8 	rdprs	r2,zero,274
  803978:	008044b8 	rdprs	r2,zero,274
  80397c:	00803d7c 	xorhi	r2,zero,245
  803980:	008044b8 	rdprs	r2,zero,274
  803984:	008044b8 	rdprs	r2,zero,274
  803988:	008044b8 	rdprs	r2,zero,274
  80398c:	008044b8 	rdprs	r2,zero,274
  803990:	008044b8 	rdprs	r2,zero,274
  803994:	008041f4 	movhi	r2,263
  803998:	008044b8 	rdprs	r2,zero,274
  80399c:	008044b8 	rdprs	r2,zero,274
  8039a0:	00804254 	movui	r2,265
  8039a4:	008044b8 	rdprs	r2,zero,274
  8039a8:	008044b8 	rdprs	r2,zero,274
  8039ac:	008044b8 	rdprs	r2,zero,274
  8039b0:	008044b8 	rdprs	r2,zero,274
  8039b4:	008044b8 	rdprs	r2,zero,274
  8039b8:	008044b8 	rdprs	r2,zero,274
  8039bc:	008044b8 	rdprs	r2,zero,274
  8039c0:	008044b8 	rdprs	r2,zero,274
  8039c4:	008044b8 	rdprs	r2,zero,274
  8039c8:	008044b8 	rdprs	r2,zero,274
  8039cc:	00804464 	muli	r2,zero,273
  8039d0:	00804404 	movi	r2,272
  8039d4:	00803cd0 	cmplti	r2,zero,243
  8039d8:	00803cd0 	cmplti	r2,zero,243
  8039dc:	00803cd0 	cmplti	r2,zero,243
  8039e0:	00804414 	movui	r2,272
  8039e4:	00804404 	movi	r2,272
  8039e8:	008044b8 	rdprs	r2,zero,274
  8039ec:	008044b8 	rdprs	r2,zero,274
  8039f0:	00804420 	cmpeqi	r2,zero,272
  8039f4:	008044b8 	rdprs	r2,zero,274
  8039f8:	00804430 	cmpltui	r2,zero,272
  8039fc:	00804304 	movi	r2,268
  803a00:	00803a40 	call	803a4 <__reset-0x77fc5c>
  803a04:	00804324 	muli	r2,zero,268
  803a08:	008044b8 	rdprs	r2,zero,274
  803a0c:	00804330 	cmpltui	r2,zero,268
  803a10:	008044b8 	rdprs	r2,zero,274
  803a14:	0080438c 	andi	r2,zero,270
  803a18:	008044b8 	rdprs	r2,zero,274
  803a1c:	008044b8 	rdprs	r2,zero,274
  803a20:	0080439c 	xori	r2,zero,270
  803a24:	d9003117 	ldw	r4,196(sp)
  803a28:	d8802d15 	stw	r2,180(sp)
  803a2c:	0109c83a 	sub	r4,zero,r4
  803a30:	d9003115 	stw	r4,196(sp)
  803a34:	94800114 	ori	r18,r18,4
  803a38:	ac400007 	ldb	r17,0(r21)
  803a3c:	003f9706 	br	80389c <__alt_mem_onchip_mem+0xff7fb89c>
  803a40:	00800c04 	movi	r2,48
  803a44:	d9002d17 	ldw	r4,180(sp)
  803a48:	d9402917 	ldw	r5,164(sp)
  803a4c:	d8802705 	stb	r2,156(sp)
  803a50:	00801e04 	movi	r2,120
  803a54:	d8802745 	stb	r2,157(sp)
  803a58:	d8002785 	stb	zero,158(sp)
  803a5c:	20c00104 	addi	r3,r4,4
  803a60:	24c00017 	ldw	r19,0(r4)
  803a64:	002d883a 	mov	r22,zero
  803a68:	90800094 	ori	r2,r18,2
  803a6c:	28029a16 	blt	r5,zero,8044d8 <___vfprintf_internal_r+0xdc0>
  803a70:	00bfdfc4 	movi	r2,-129
  803a74:	90a4703a 	and	r18,r18,r2
  803a78:	d8c02d15 	stw	r3,180(sp)
  803a7c:	94800094 	ori	r18,r18,2
  803a80:	9802871e 	bne	r19,zero,8044a0 <___vfprintf_internal_r+0xd88>
  803a84:	00802074 	movhi	r2,129
  803a88:	108bfd04 	addi	r2,r2,12276
  803a8c:	d8803915 	stw	r2,228(sp)
  803a90:	04401e04 	movi	r17,120
  803a94:	d8802917 	ldw	r2,164(sp)
  803a98:	0039883a 	mov	fp,zero
  803a9c:	1001e926 	beq	r2,zero,804244 <___vfprintf_internal_r+0xb2c>
  803aa0:	0027883a 	mov	r19,zero
  803aa4:	002d883a 	mov	r22,zero
  803aa8:	00020506 	br	8042c0 <___vfprintf_internal_r+0xba8>
  803aac:	d9002c17 	ldw	r4,176(sp)
  803ab0:	b80b883a 	mov	r5,r23
  803ab4:	0805ba00 	call	805ba0 <__swsetup_r>
  803ab8:	1005ac1e 	bne	r2,zero,80516c <___vfprintf_internal_r+0x1a54>
  803abc:	b880030b 	ldhu	r2,12(r23)
  803ac0:	00c00284 	movi	r3,10
  803ac4:	1080068c 	andi	r2,r2,26
  803ac8:	10ff3c1e 	bne	r2,r3,8037bc <__alt_mem_onchip_mem+0xff7fb7bc>
  803acc:	b880038f 	ldh	r2,14(r23)
  803ad0:	103f3a16 	blt	r2,zero,8037bc <__alt_mem_onchip_mem+0xff7fb7bc>
  803ad4:	d9c02d17 	ldw	r7,180(sp)
  803ad8:	d9002c17 	ldw	r4,176(sp)
  803adc:	a80d883a 	mov	r6,r21
  803ae0:	b80b883a 	mov	r5,r23
  803ae4:	080592c0 	call	80592c <__sbprintf>
  803ae8:	00001106 	br	803b30 <___vfprintf_internal_r+0x418>
  803aec:	d9002c17 	ldw	r4,176(sp)
  803af0:	d9801e04 	addi	r6,sp,120
  803af4:	b80b883a 	mov	r5,r23
  803af8:	080a0d40 	call	80a0d4 <__sprint_r>
  803afc:	1000081e 	bne	r2,zero,803b20 <___vfprintf_internal_r+0x408>
  803b00:	da000404 	addi	r8,sp,16
  803b04:	003f5306 	br	803854 <__alt_mem_onchip_mem+0xff7fb854>
  803b08:	d8802017 	ldw	r2,128(sp)
  803b0c:	10000426 	beq	r2,zero,803b20 <___vfprintf_internal_r+0x408>
  803b10:	d9002c17 	ldw	r4,176(sp)
  803b14:	d9801e04 	addi	r6,sp,120
  803b18:	b80b883a 	mov	r5,r23
  803b1c:	080a0d40 	call	80a0d4 <__sprint_r>
  803b20:	b880030b 	ldhu	r2,12(r23)
  803b24:	1080100c 	andi	r2,r2,64
  803b28:	1005901e 	bne	r2,zero,80516c <___vfprintf_internal_r+0x1a54>
  803b2c:	d8802f17 	ldw	r2,188(sp)
  803b30:	dfc04717 	ldw	ra,284(sp)
  803b34:	df004617 	ldw	fp,280(sp)
  803b38:	ddc04517 	ldw	r23,276(sp)
  803b3c:	dd804417 	ldw	r22,272(sp)
  803b40:	dd404317 	ldw	r21,268(sp)
  803b44:	dd004217 	ldw	r20,264(sp)
  803b48:	dcc04117 	ldw	r19,260(sp)
  803b4c:	dc804017 	ldw	r18,256(sp)
  803b50:	dc403f17 	ldw	r17,252(sp)
  803b54:	dc003e17 	ldw	r16,248(sp)
  803b58:	dec04804 	addi	sp,sp,288
  803b5c:	f800283a 	ret
  803b60:	d9002c17 	ldw	r4,176(sp)
  803b64:	08019ec0 	call	8019ec <__sinit>
  803b68:	003f0406 	br	80377c <__alt_mem_onchip_mem+0xff7fb77c>
  803b6c:	d8802d17 	ldw	r2,180(sp)
  803b70:	d9002d17 	ldw	r4,180(sp)
  803b74:	10800017 	ldw	r2,0(r2)
  803b78:	d8803115 	stw	r2,196(sp)
  803b7c:	20800104 	addi	r2,r4,4
  803b80:	d9003117 	ldw	r4,196(sp)
  803b84:	203fa716 	blt	r4,zero,803a24 <__alt_mem_onchip_mem+0xff7fba24>
  803b88:	d8802d15 	stw	r2,180(sp)
  803b8c:	ac400007 	ldb	r17,0(r21)
  803b90:	003f4206 	br	80389c <__alt_mem_onchip_mem+0xff7fb89c>
  803b94:	ac400007 	ldb	r17,0(r21)
  803b98:	aac00044 	addi	r11,r21,1
  803b9c:	8a872826 	beq	r17,r10,805840 <___vfprintf_internal_r+0x2128>
  803ba0:	88bff404 	addi	r2,r17,-48
  803ba4:	0009883a 	mov	r4,zero
  803ba8:	30867d36 	bltu	r6,r2,8055a0 <___vfprintf_internal_r+0x1e88>
  803bac:	5c400007 	ldb	r17,0(r11)
  803bb0:	210002a4 	muli	r4,r4,10
  803bb4:	5d400044 	addi	r21,r11,1
  803bb8:	a817883a 	mov	r11,r21
  803bbc:	2089883a 	add	r4,r4,r2
  803bc0:	88bff404 	addi	r2,r17,-48
  803bc4:	30bff92e 	bgeu	r6,r2,803bac <__alt_mem_onchip_mem+0xff7fbbac>
  803bc8:	2005c916 	blt	r4,zero,8052f0 <___vfprintf_internal_r+0x1bd8>
  803bcc:	d9002915 	stw	r4,164(sp)
  803bd0:	003f3306 	br	8038a0 <__alt_mem_onchip_mem+0xff7fb8a0>
  803bd4:	94802014 	ori	r18,r18,128
  803bd8:	ac400007 	ldb	r17,0(r21)
  803bdc:	003f2f06 	br	80389c <__alt_mem_onchip_mem+0xff7fb89c>
  803be0:	a809883a 	mov	r4,r21
  803be4:	d8003115 	stw	zero,196(sp)
  803be8:	88bff404 	addi	r2,r17,-48
  803bec:	0017883a 	mov	r11,zero
  803bf0:	24400007 	ldb	r17,0(r4)
  803bf4:	5ac002a4 	muli	r11,r11,10
  803bf8:	ad400044 	addi	r21,r21,1
  803bfc:	a809883a 	mov	r4,r21
  803c00:	12d7883a 	add	r11,r2,r11
  803c04:	88bff404 	addi	r2,r17,-48
  803c08:	30bff92e 	bgeu	r6,r2,803bf0 <__alt_mem_onchip_mem+0xff7fbbf0>
  803c0c:	dac03115 	stw	r11,196(sp)
  803c10:	003f2306 	br	8038a0 <__alt_mem_onchip_mem+0xff7fb8a0>
  803c14:	18c03fcc 	andi	r3,r3,255
  803c18:	18072b1e 	bne	r3,zero,8058c8 <___vfprintf_internal_r+0x21b0>
  803c1c:	94800414 	ori	r18,r18,16
  803c20:	9080080c 	andi	r2,r18,32
  803c24:	10037b26 	beq	r2,zero,804a14 <___vfprintf_internal_r+0x12fc>
  803c28:	d9402d17 	ldw	r5,180(sp)
  803c2c:	28800117 	ldw	r2,4(r5)
  803c30:	2cc00017 	ldw	r19,0(r5)
  803c34:	29400204 	addi	r5,r5,8
  803c38:	d9402d15 	stw	r5,180(sp)
  803c3c:	102d883a 	mov	r22,r2
  803c40:	10044b16 	blt	r2,zero,804d70 <___vfprintf_internal_r+0x1658>
  803c44:	d9402917 	ldw	r5,164(sp)
  803c48:	df002783 	ldbu	fp,158(sp)
  803c4c:	2803bc16 	blt	r5,zero,804b40 <___vfprintf_internal_r+0x1428>
  803c50:	00ffdfc4 	movi	r3,-129
  803c54:	9d84b03a 	or	r2,r19,r22
  803c58:	90e4703a 	and	r18,r18,r3
  803c5c:	10017726 	beq	r2,zero,80423c <___vfprintf_internal_r+0xb24>
  803c60:	b0038326 	beq	r22,zero,804a70 <___vfprintf_internal_r+0x1358>
  803c64:	dc402a15 	stw	r17,168(sp)
  803c68:	dc001e04 	addi	r16,sp,120
  803c6c:	b023883a 	mov	r17,r22
  803c70:	402d883a 	mov	r22,r8
  803c74:	9809883a 	mov	r4,r19
  803c78:	880b883a 	mov	r5,r17
  803c7c:	01800284 	movi	r6,10
  803c80:	000f883a 	mov	r7,zero
  803c84:	080c04c0 	call	80c04c <__umoddi3>
  803c88:	10800c04 	addi	r2,r2,48
  803c8c:	843fffc4 	addi	r16,r16,-1
  803c90:	9809883a 	mov	r4,r19
  803c94:	880b883a 	mov	r5,r17
  803c98:	80800005 	stb	r2,0(r16)
  803c9c:	01800284 	movi	r6,10
  803ca0:	000f883a 	mov	r7,zero
  803ca4:	080bad40 	call	80bad4 <__udivdi3>
  803ca8:	1027883a 	mov	r19,r2
  803cac:	10c4b03a 	or	r2,r2,r3
  803cb0:	1823883a 	mov	r17,r3
  803cb4:	103fef1e 	bne	r2,zero,803c74 <__alt_mem_onchip_mem+0xff7fbc74>
  803cb8:	d8c02817 	ldw	r3,160(sp)
  803cbc:	dc402a17 	ldw	r17,168(sp)
  803cc0:	b011883a 	mov	r8,r22
  803cc4:	1c07c83a 	sub	r3,r3,r16
  803cc8:	d8c02e15 	stw	r3,184(sp)
  803ccc:	00005906 	br	803e34 <___vfprintf_internal_r+0x71c>
  803cd0:	18c03fcc 	andi	r3,r3,255
  803cd4:	1806fa1e 	bne	r3,zero,8058c0 <___vfprintf_internal_r+0x21a8>
  803cd8:	9080020c 	andi	r2,r18,8
  803cdc:	10048a26 	beq	r2,zero,804f08 <___vfprintf_internal_r+0x17f0>
  803ce0:	d8c02d17 	ldw	r3,180(sp)
  803ce4:	d9002d17 	ldw	r4,180(sp)
  803ce8:	d9402d17 	ldw	r5,180(sp)
  803cec:	18c00017 	ldw	r3,0(r3)
  803cf0:	21000117 	ldw	r4,4(r4)
  803cf4:	29400204 	addi	r5,r5,8
  803cf8:	d8c03615 	stw	r3,216(sp)
  803cfc:	d9003815 	stw	r4,224(sp)
  803d00:	d9402d15 	stw	r5,180(sp)
  803d04:	d9003617 	ldw	r4,216(sp)
  803d08:	d9403817 	ldw	r5,224(sp)
  803d0c:	da003d15 	stw	r8,244(sp)
  803d10:	04000044 	movi	r16,1
  803d14:	0809df00 	call	809df0 <__fpclassifyd>
  803d18:	da003d17 	ldw	r8,244(sp)
  803d1c:	14041f1e 	bne	r2,r16,804d9c <___vfprintf_internal_r+0x1684>
  803d20:	d9003617 	ldw	r4,216(sp)
  803d24:	d9403817 	ldw	r5,224(sp)
  803d28:	000d883a 	mov	r6,zero
  803d2c:	000f883a 	mov	r7,zero
  803d30:	080d87c0 	call	80d87c <__ledf2>
  803d34:	da003d17 	ldw	r8,244(sp)
  803d38:	1005be16 	blt	r2,zero,805434 <___vfprintf_internal_r+0x1d1c>
  803d3c:	df002783 	ldbu	fp,158(sp)
  803d40:	008011c4 	movi	r2,71
  803d44:	1445330e 	bge	r2,r17,805214 <___vfprintf_internal_r+0x1afc>
  803d48:	04002074 	movhi	r16,129
  803d4c:	840bf504 	addi	r16,r16,12244
  803d50:	00c000c4 	movi	r3,3
  803d54:	00bfdfc4 	movi	r2,-129
  803d58:	d8c02a15 	stw	r3,168(sp)
  803d5c:	90a4703a 	and	r18,r18,r2
  803d60:	d8c02e15 	stw	r3,184(sp)
  803d64:	d8002915 	stw	zero,164(sp)
  803d68:	d8003215 	stw	zero,200(sp)
  803d6c:	00003706 	br	803e4c <___vfprintf_internal_r+0x734>
  803d70:	94800214 	ori	r18,r18,8
  803d74:	ac400007 	ldb	r17,0(r21)
  803d78:	003ec806 	br	80389c <__alt_mem_onchip_mem+0xff7fb89c>
  803d7c:	18c03fcc 	andi	r3,r3,255
  803d80:	1806db1e 	bne	r3,zero,8058f0 <___vfprintf_internal_r+0x21d8>
  803d84:	94800414 	ori	r18,r18,16
  803d88:	9080080c 	andi	r2,r18,32
  803d8c:	1002d826 	beq	r2,zero,8048f0 <___vfprintf_internal_r+0x11d8>
  803d90:	d9402d17 	ldw	r5,180(sp)
  803d94:	d8c02917 	ldw	r3,164(sp)
  803d98:	d8002785 	stb	zero,158(sp)
  803d9c:	28800204 	addi	r2,r5,8
  803da0:	2cc00017 	ldw	r19,0(r5)
  803da4:	2d800117 	ldw	r22,4(r5)
  803da8:	18048f16 	blt	r3,zero,804fe8 <___vfprintf_internal_r+0x18d0>
  803dac:	013fdfc4 	movi	r4,-129
  803db0:	9d86b03a 	or	r3,r19,r22
  803db4:	d8802d15 	stw	r2,180(sp)
  803db8:	9124703a 	and	r18,r18,r4
  803dbc:	1802d91e 	bne	r3,zero,804924 <___vfprintf_internal_r+0x120c>
  803dc0:	d8c02917 	ldw	r3,164(sp)
  803dc4:	0039883a 	mov	fp,zero
  803dc8:	1805c326 	beq	r3,zero,8054d8 <___vfprintf_internal_r+0x1dc0>
  803dcc:	0027883a 	mov	r19,zero
  803dd0:	002d883a 	mov	r22,zero
  803dd4:	dc001e04 	addi	r16,sp,120
  803dd8:	9806d0fa 	srli	r3,r19,3
  803ddc:	b008977a 	slli	r4,r22,29
  803de0:	b02cd0fa 	srli	r22,r22,3
  803de4:	9cc001cc 	andi	r19,r19,7
  803de8:	98800c04 	addi	r2,r19,48
  803dec:	843fffc4 	addi	r16,r16,-1
  803df0:	20e6b03a 	or	r19,r4,r3
  803df4:	80800005 	stb	r2,0(r16)
  803df8:	9d86b03a 	or	r3,r19,r22
  803dfc:	183ff61e 	bne	r3,zero,803dd8 <__alt_mem_onchip_mem+0xff7fbdd8>
  803e00:	90c0004c 	andi	r3,r18,1
  803e04:	18013b26 	beq	r3,zero,8042f4 <___vfprintf_internal_r+0xbdc>
  803e08:	10803fcc 	andi	r2,r2,255
  803e0c:	1080201c 	xori	r2,r2,128
  803e10:	10bfe004 	addi	r2,r2,-128
  803e14:	00c00c04 	movi	r3,48
  803e18:	10c13626 	beq	r2,r3,8042f4 <___vfprintf_internal_r+0xbdc>
  803e1c:	80ffffc5 	stb	r3,-1(r16)
  803e20:	d8c02817 	ldw	r3,160(sp)
  803e24:	80bfffc4 	addi	r2,r16,-1
  803e28:	1021883a 	mov	r16,r2
  803e2c:	1887c83a 	sub	r3,r3,r2
  803e30:	d8c02e15 	stw	r3,184(sp)
  803e34:	d8802e17 	ldw	r2,184(sp)
  803e38:	d9002917 	ldw	r4,164(sp)
  803e3c:	1100010e 	bge	r2,r4,803e44 <___vfprintf_internal_r+0x72c>
  803e40:	2005883a 	mov	r2,r4
  803e44:	d8802a15 	stw	r2,168(sp)
  803e48:	d8003215 	stw	zero,200(sp)
  803e4c:	e7003fcc 	andi	fp,fp,255
  803e50:	e700201c 	xori	fp,fp,128
  803e54:	e73fe004 	addi	fp,fp,-128
  803e58:	e0000326 	beq	fp,zero,803e68 <___vfprintf_internal_r+0x750>
  803e5c:	d8c02a17 	ldw	r3,168(sp)
  803e60:	18c00044 	addi	r3,r3,1
  803e64:	d8c02a15 	stw	r3,168(sp)
  803e68:	90c0008c 	andi	r3,r18,2
  803e6c:	d8c02b15 	stw	r3,172(sp)
  803e70:	18000326 	beq	r3,zero,803e80 <___vfprintf_internal_r+0x768>
  803e74:	d8c02a17 	ldw	r3,168(sp)
  803e78:	18c00084 	addi	r3,r3,2
  803e7c:	d8c02a15 	stw	r3,168(sp)
  803e80:	90c0210c 	andi	r3,r18,132
  803e84:	d8c03015 	stw	r3,192(sp)
  803e88:	1801a31e 	bne	r3,zero,804518 <___vfprintf_internal_r+0xe00>
  803e8c:	d9003117 	ldw	r4,196(sp)
  803e90:	d8c02a17 	ldw	r3,168(sp)
  803e94:	20e7c83a 	sub	r19,r4,r3
  803e98:	04c19f0e 	bge	zero,r19,804518 <___vfprintf_internal_r+0xe00>
  803e9c:	02400404 	movi	r9,16
  803ea0:	d8c02017 	ldw	r3,128(sp)
  803ea4:	d8801f17 	ldw	r2,124(sp)
  803ea8:	4cc50d0e 	bge	r9,r19,8052e0 <___vfprintf_internal_r+0x1bc8>
  803eac:	01402074 	movhi	r5,129
  803eb0:	294c0884 	addi	r5,r5,12322
  803eb4:	dc403b15 	stw	r17,236(sp)
  803eb8:	d9403515 	stw	r5,212(sp)
  803ebc:	9823883a 	mov	r17,r19
  803ec0:	482d883a 	mov	r22,r9
  803ec4:	9027883a 	mov	r19,r18
  803ec8:	070001c4 	movi	fp,7
  803ecc:	8025883a 	mov	r18,r16
  803ed0:	dc002c17 	ldw	r16,176(sp)
  803ed4:	00000306 	br	803ee4 <___vfprintf_internal_r+0x7cc>
  803ed8:	8c7ffc04 	addi	r17,r17,-16
  803edc:	42000204 	addi	r8,r8,8
  803ee0:	b440130e 	bge	r22,r17,803f30 <___vfprintf_internal_r+0x818>
  803ee4:	01002074 	movhi	r4,129
  803ee8:	18c00404 	addi	r3,r3,16
  803eec:	10800044 	addi	r2,r2,1
  803ef0:	210c0884 	addi	r4,r4,12322
  803ef4:	41000015 	stw	r4,0(r8)
  803ef8:	45800115 	stw	r22,4(r8)
  803efc:	d8c02015 	stw	r3,128(sp)
  803f00:	d8801f15 	stw	r2,124(sp)
  803f04:	e0bff40e 	bge	fp,r2,803ed8 <__alt_mem_onchip_mem+0xff7fbed8>
  803f08:	d9801e04 	addi	r6,sp,120
  803f0c:	b80b883a 	mov	r5,r23
  803f10:	8009883a 	mov	r4,r16
  803f14:	080a0d40 	call	80a0d4 <__sprint_r>
  803f18:	103f011e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  803f1c:	8c7ffc04 	addi	r17,r17,-16
  803f20:	d8c02017 	ldw	r3,128(sp)
  803f24:	d8801f17 	ldw	r2,124(sp)
  803f28:	da000404 	addi	r8,sp,16
  803f2c:	b47fed16 	blt	r22,r17,803ee4 <__alt_mem_onchip_mem+0xff7fbee4>
  803f30:	9021883a 	mov	r16,r18
  803f34:	9825883a 	mov	r18,r19
  803f38:	8827883a 	mov	r19,r17
  803f3c:	dc403b17 	ldw	r17,236(sp)
  803f40:	d9403517 	ldw	r5,212(sp)
  803f44:	98c7883a 	add	r3,r19,r3
  803f48:	10800044 	addi	r2,r2,1
  803f4c:	41400015 	stw	r5,0(r8)
  803f50:	44c00115 	stw	r19,4(r8)
  803f54:	d8c02015 	stw	r3,128(sp)
  803f58:	d8801f15 	stw	r2,124(sp)
  803f5c:	010001c4 	movi	r4,7
  803f60:	2082a316 	blt	r4,r2,8049f0 <___vfprintf_internal_r+0x12d8>
  803f64:	df002787 	ldb	fp,158(sp)
  803f68:	42000204 	addi	r8,r8,8
  803f6c:	e0000c26 	beq	fp,zero,803fa0 <___vfprintf_internal_r+0x888>
  803f70:	d8801f17 	ldw	r2,124(sp)
  803f74:	d9002784 	addi	r4,sp,158
  803f78:	18c00044 	addi	r3,r3,1
  803f7c:	10800044 	addi	r2,r2,1
  803f80:	41000015 	stw	r4,0(r8)
  803f84:	01000044 	movi	r4,1
  803f88:	41000115 	stw	r4,4(r8)
  803f8c:	d8c02015 	stw	r3,128(sp)
  803f90:	d8801f15 	stw	r2,124(sp)
  803f94:	010001c4 	movi	r4,7
  803f98:	20823c16 	blt	r4,r2,80488c <___vfprintf_internal_r+0x1174>
  803f9c:	42000204 	addi	r8,r8,8
  803fa0:	d8802b17 	ldw	r2,172(sp)
  803fa4:	10000c26 	beq	r2,zero,803fd8 <___vfprintf_internal_r+0x8c0>
  803fa8:	d8801f17 	ldw	r2,124(sp)
  803fac:	d9002704 	addi	r4,sp,156
  803fb0:	18c00084 	addi	r3,r3,2
  803fb4:	10800044 	addi	r2,r2,1
  803fb8:	41000015 	stw	r4,0(r8)
  803fbc:	01000084 	movi	r4,2
  803fc0:	41000115 	stw	r4,4(r8)
  803fc4:	d8c02015 	stw	r3,128(sp)
  803fc8:	d8801f15 	stw	r2,124(sp)
  803fcc:	010001c4 	movi	r4,7
  803fd0:	20823616 	blt	r4,r2,8048ac <___vfprintf_internal_r+0x1194>
  803fd4:	42000204 	addi	r8,r8,8
  803fd8:	d9003017 	ldw	r4,192(sp)
  803fdc:	00802004 	movi	r2,128
  803fe0:	20819926 	beq	r4,r2,804648 <___vfprintf_internal_r+0xf30>
  803fe4:	d9402917 	ldw	r5,164(sp)
  803fe8:	d8802e17 	ldw	r2,184(sp)
  803fec:	28adc83a 	sub	r22,r5,r2
  803ff0:	0580310e 	bge	zero,r22,8040b8 <___vfprintf_internal_r+0x9a0>
  803ff4:	07000404 	movi	fp,16
  803ff8:	d8801f17 	ldw	r2,124(sp)
  803ffc:	e584140e 	bge	fp,r22,805050 <___vfprintf_internal_r+0x1938>
  804000:	01402074 	movhi	r5,129
  804004:	294c0484 	addi	r5,r5,12306
  804008:	dc402915 	stw	r17,164(sp)
  80400c:	d9402b15 	stw	r5,172(sp)
  804010:	b023883a 	mov	r17,r22
  804014:	04c001c4 	movi	r19,7
  804018:	a82d883a 	mov	r22,r21
  80401c:	902b883a 	mov	r21,r18
  804020:	8025883a 	mov	r18,r16
  804024:	dc002c17 	ldw	r16,176(sp)
  804028:	00000306 	br	804038 <___vfprintf_internal_r+0x920>
  80402c:	8c7ffc04 	addi	r17,r17,-16
  804030:	42000204 	addi	r8,r8,8
  804034:	e440110e 	bge	fp,r17,80407c <___vfprintf_internal_r+0x964>
  804038:	18c00404 	addi	r3,r3,16
  80403c:	10800044 	addi	r2,r2,1
  804040:	45000015 	stw	r20,0(r8)
  804044:	47000115 	stw	fp,4(r8)
  804048:	d8c02015 	stw	r3,128(sp)
  80404c:	d8801f15 	stw	r2,124(sp)
  804050:	98bff60e 	bge	r19,r2,80402c <__alt_mem_onchip_mem+0xff7fc02c>
  804054:	d9801e04 	addi	r6,sp,120
  804058:	b80b883a 	mov	r5,r23
  80405c:	8009883a 	mov	r4,r16
  804060:	080a0d40 	call	80a0d4 <__sprint_r>
  804064:	103eae1e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  804068:	8c7ffc04 	addi	r17,r17,-16
  80406c:	d8c02017 	ldw	r3,128(sp)
  804070:	d8801f17 	ldw	r2,124(sp)
  804074:	da000404 	addi	r8,sp,16
  804078:	e47fef16 	blt	fp,r17,804038 <__alt_mem_onchip_mem+0xff7fc038>
  80407c:	9021883a 	mov	r16,r18
  804080:	a825883a 	mov	r18,r21
  804084:	b02b883a 	mov	r21,r22
  804088:	882d883a 	mov	r22,r17
  80408c:	dc402917 	ldw	r17,164(sp)
  804090:	d9002b17 	ldw	r4,172(sp)
  804094:	1d87883a 	add	r3,r3,r22
  804098:	10800044 	addi	r2,r2,1
  80409c:	41000015 	stw	r4,0(r8)
  8040a0:	45800115 	stw	r22,4(r8)
  8040a4:	d8c02015 	stw	r3,128(sp)
  8040a8:	d8801f15 	stw	r2,124(sp)
  8040ac:	010001c4 	movi	r4,7
  8040b0:	2081ee16 	blt	r4,r2,80486c <___vfprintf_internal_r+0x1154>
  8040b4:	42000204 	addi	r8,r8,8
  8040b8:	9080400c 	andi	r2,r18,256
  8040bc:	1001181e 	bne	r2,zero,804520 <___vfprintf_internal_r+0xe08>
  8040c0:	d9402e17 	ldw	r5,184(sp)
  8040c4:	d8801f17 	ldw	r2,124(sp)
  8040c8:	44000015 	stw	r16,0(r8)
  8040cc:	1947883a 	add	r3,r3,r5
  8040d0:	10800044 	addi	r2,r2,1
  8040d4:	41400115 	stw	r5,4(r8)
  8040d8:	d8c02015 	stw	r3,128(sp)
  8040dc:	d8801f15 	stw	r2,124(sp)
  8040e0:	010001c4 	movi	r4,7
  8040e4:	2081d316 	blt	r4,r2,804834 <___vfprintf_internal_r+0x111c>
  8040e8:	42000204 	addi	r8,r8,8
  8040ec:	9480010c 	andi	r18,r18,4
  8040f0:	90003226 	beq	r18,zero,8041bc <___vfprintf_internal_r+0xaa4>
  8040f4:	d9403117 	ldw	r5,196(sp)
  8040f8:	d8802a17 	ldw	r2,168(sp)
  8040fc:	28a1c83a 	sub	r16,r5,r2
  804100:	04002e0e 	bge	zero,r16,8041bc <___vfprintf_internal_r+0xaa4>
  804104:	04400404 	movi	r17,16
  804108:	d8801f17 	ldw	r2,124(sp)
  80410c:	8c04a20e 	bge	r17,r16,805398 <___vfprintf_internal_r+0x1c80>
  804110:	01402074 	movhi	r5,129
  804114:	294c0884 	addi	r5,r5,12322
  804118:	d9403515 	stw	r5,212(sp)
  80411c:	048001c4 	movi	r18,7
  804120:	dcc02c17 	ldw	r19,176(sp)
  804124:	00000306 	br	804134 <___vfprintf_internal_r+0xa1c>
  804128:	843ffc04 	addi	r16,r16,-16
  80412c:	42000204 	addi	r8,r8,8
  804130:	8c00130e 	bge	r17,r16,804180 <___vfprintf_internal_r+0xa68>
  804134:	01002074 	movhi	r4,129
  804138:	18c00404 	addi	r3,r3,16
  80413c:	10800044 	addi	r2,r2,1
  804140:	210c0884 	addi	r4,r4,12322
  804144:	41000015 	stw	r4,0(r8)
  804148:	44400115 	stw	r17,4(r8)
  80414c:	d8c02015 	stw	r3,128(sp)
  804150:	d8801f15 	stw	r2,124(sp)
  804154:	90bff40e 	bge	r18,r2,804128 <__alt_mem_onchip_mem+0xff7fc128>
  804158:	d9801e04 	addi	r6,sp,120
  80415c:	b80b883a 	mov	r5,r23
  804160:	9809883a 	mov	r4,r19
  804164:	080a0d40 	call	80a0d4 <__sprint_r>
  804168:	103e6d1e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  80416c:	843ffc04 	addi	r16,r16,-16
  804170:	d8c02017 	ldw	r3,128(sp)
  804174:	d8801f17 	ldw	r2,124(sp)
  804178:	da000404 	addi	r8,sp,16
  80417c:	8c3fed16 	blt	r17,r16,804134 <__alt_mem_onchip_mem+0xff7fc134>
  804180:	d9403517 	ldw	r5,212(sp)
  804184:	1c07883a 	add	r3,r3,r16
  804188:	10800044 	addi	r2,r2,1
  80418c:	41400015 	stw	r5,0(r8)
  804190:	44000115 	stw	r16,4(r8)
  804194:	d8c02015 	stw	r3,128(sp)
  804198:	d8801f15 	stw	r2,124(sp)
  80419c:	010001c4 	movi	r4,7
  8041a0:	2080060e 	bge	r4,r2,8041bc <___vfprintf_internal_r+0xaa4>
  8041a4:	d9002c17 	ldw	r4,176(sp)
  8041a8:	d9801e04 	addi	r6,sp,120
  8041ac:	b80b883a 	mov	r5,r23
  8041b0:	080a0d40 	call	80a0d4 <__sprint_r>
  8041b4:	103e5a1e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  8041b8:	d8c02017 	ldw	r3,128(sp)
  8041bc:	d8803117 	ldw	r2,196(sp)
  8041c0:	d9002a17 	ldw	r4,168(sp)
  8041c4:	1100010e 	bge	r2,r4,8041cc <___vfprintf_internal_r+0xab4>
  8041c8:	2005883a 	mov	r2,r4
  8041cc:	d9402f17 	ldw	r5,188(sp)
  8041d0:	288b883a 	add	r5,r5,r2
  8041d4:	d9402f15 	stw	r5,188(sp)
  8041d8:	18019e1e 	bne	r3,zero,804854 <___vfprintf_internal_r+0x113c>
  8041dc:	a8800007 	ldb	r2,0(r21)
  8041e0:	d8001f15 	stw	zero,124(sp)
  8041e4:	da000404 	addi	r8,sp,16
  8041e8:	103d851e 	bne	r2,zero,803800 <__alt_mem_onchip_mem+0xff7fb800>
  8041ec:	a821883a 	mov	r16,r21
  8041f0:	003d9b06 	br	803860 <__alt_mem_onchip_mem+0xff7fb860>
  8041f4:	18c03fcc 	andi	r3,r3,255
  8041f8:	1805c11e 	bne	r3,zero,805900 <___vfprintf_internal_r+0x21e8>
  8041fc:	94800414 	ori	r18,r18,16
  804200:	9080080c 	andi	r2,r18,32
  804204:	10020c26 	beq	r2,zero,804a38 <___vfprintf_internal_r+0x1320>
  804208:	d8802d17 	ldw	r2,180(sp)
  80420c:	d9002917 	ldw	r4,164(sp)
  804210:	d8002785 	stb	zero,158(sp)
  804214:	10c00204 	addi	r3,r2,8
  804218:	14c00017 	ldw	r19,0(r2)
  80421c:	15800117 	ldw	r22,4(r2)
  804220:	20040f16 	blt	r4,zero,805260 <___vfprintf_internal_r+0x1b48>
  804224:	013fdfc4 	movi	r4,-129
  804228:	9d84b03a 	or	r2,r19,r22
  80422c:	d8c02d15 	stw	r3,180(sp)
  804230:	9124703a 	and	r18,r18,r4
  804234:	0039883a 	mov	fp,zero
  804238:	103e891e 	bne	r2,zero,803c60 <__alt_mem_onchip_mem+0xff7fbc60>
  80423c:	d9002917 	ldw	r4,164(sp)
  804240:	2002c11e 	bne	r4,zero,804d48 <___vfprintf_internal_r+0x1630>
  804244:	d8002915 	stw	zero,164(sp)
  804248:	d8002e15 	stw	zero,184(sp)
  80424c:	dc001e04 	addi	r16,sp,120
  804250:	003ef806 	br	803e34 <__alt_mem_onchip_mem+0xff7fbe34>
  804254:	18c03fcc 	andi	r3,r3,255
  804258:	18059d1e 	bne	r3,zero,8058d0 <___vfprintf_internal_r+0x21b8>
  80425c:	01402074 	movhi	r5,129
  804260:	294bf804 	addi	r5,r5,12256
  804264:	d9403915 	stw	r5,228(sp)
  804268:	9080080c 	andi	r2,r18,32
  80426c:	10005226 	beq	r2,zero,8043b8 <___vfprintf_internal_r+0xca0>
  804270:	d8802d17 	ldw	r2,180(sp)
  804274:	14c00017 	ldw	r19,0(r2)
  804278:	15800117 	ldw	r22,4(r2)
  80427c:	10800204 	addi	r2,r2,8
  804280:	d8802d15 	stw	r2,180(sp)
  804284:	9080004c 	andi	r2,r18,1
  804288:	10019026 	beq	r2,zero,8048cc <___vfprintf_internal_r+0x11b4>
  80428c:	9d84b03a 	or	r2,r19,r22
  804290:	10036926 	beq	r2,zero,805038 <___vfprintf_internal_r+0x1920>
  804294:	d8c02917 	ldw	r3,164(sp)
  804298:	00800c04 	movi	r2,48
  80429c:	d8802705 	stb	r2,156(sp)
  8042a0:	dc402745 	stb	r17,157(sp)
  8042a4:	d8002785 	stb	zero,158(sp)
  8042a8:	90800094 	ori	r2,r18,2
  8042ac:	18045d16 	blt	r3,zero,805424 <___vfprintf_internal_r+0x1d0c>
  8042b0:	00bfdfc4 	movi	r2,-129
  8042b4:	90a4703a 	and	r18,r18,r2
  8042b8:	94800094 	ori	r18,r18,2
  8042bc:	0039883a 	mov	fp,zero
  8042c0:	d9003917 	ldw	r4,228(sp)
  8042c4:	dc001e04 	addi	r16,sp,120
  8042c8:	988003cc 	andi	r2,r19,15
  8042cc:	b006973a 	slli	r3,r22,28
  8042d0:	2085883a 	add	r2,r4,r2
  8042d4:	9826d13a 	srli	r19,r19,4
  8042d8:	10800003 	ldbu	r2,0(r2)
  8042dc:	b02cd13a 	srli	r22,r22,4
  8042e0:	843fffc4 	addi	r16,r16,-1
  8042e4:	1ce6b03a 	or	r19,r3,r19
  8042e8:	80800005 	stb	r2,0(r16)
  8042ec:	9d84b03a 	or	r2,r19,r22
  8042f0:	103ff51e 	bne	r2,zero,8042c8 <__alt_mem_onchip_mem+0xff7fc2c8>
  8042f4:	d8c02817 	ldw	r3,160(sp)
  8042f8:	1c07c83a 	sub	r3,r3,r16
  8042fc:	d8c02e15 	stw	r3,184(sp)
  804300:	003ecc06 	br	803e34 <__alt_mem_onchip_mem+0xff7fbe34>
  804304:	18c03fcc 	andi	r3,r3,255
  804308:	183e9f26 	beq	r3,zero,803d88 <__alt_mem_onchip_mem+0xff7fbd88>
  80430c:	d9c02785 	stb	r7,158(sp)
  804310:	003e9d06 	br	803d88 <__alt_mem_onchip_mem+0xff7fbd88>
  804314:	00c00044 	movi	r3,1
  804318:	01c00ac4 	movi	r7,43
  80431c:	ac400007 	ldb	r17,0(r21)
  804320:	003d5e06 	br	80389c <__alt_mem_onchip_mem+0xff7fb89c>
  804324:	94800814 	ori	r18,r18,32
  804328:	ac400007 	ldb	r17,0(r21)
  80432c:	003d5b06 	br	80389c <__alt_mem_onchip_mem+0xff7fb89c>
  804330:	d8c02d17 	ldw	r3,180(sp)
  804334:	d8002785 	stb	zero,158(sp)
  804338:	1c000017 	ldw	r16,0(r3)
  80433c:	1cc00104 	addi	r19,r3,4
  804340:	80041926 	beq	r16,zero,8053a8 <___vfprintf_internal_r+0x1c90>
  804344:	d9002917 	ldw	r4,164(sp)
  804348:	2003d016 	blt	r4,zero,80528c <___vfprintf_internal_r+0x1b74>
  80434c:	200d883a 	mov	r6,r4
  804350:	000b883a 	mov	r5,zero
  804354:	8009883a 	mov	r4,r16
  804358:	da003d15 	stw	r8,244(sp)
  80435c:	08084a80 	call	8084a8 <memchr>
  804360:	da003d17 	ldw	r8,244(sp)
  804364:	10045426 	beq	r2,zero,8054b8 <___vfprintf_internal_r+0x1da0>
  804368:	1405c83a 	sub	r2,r2,r16
  80436c:	d8802e15 	stw	r2,184(sp)
  804370:	1003cc16 	blt	r2,zero,8052a4 <___vfprintf_internal_r+0x1b8c>
  804374:	df002783 	ldbu	fp,158(sp)
  804378:	d8802a15 	stw	r2,168(sp)
  80437c:	dcc02d15 	stw	r19,180(sp)
  804380:	d8002915 	stw	zero,164(sp)
  804384:	d8003215 	stw	zero,200(sp)
  804388:	003eb006 	br	803e4c <__alt_mem_onchip_mem+0xff7fbe4c>
  80438c:	18c03fcc 	andi	r3,r3,255
  804390:	183f9b26 	beq	r3,zero,804200 <__alt_mem_onchip_mem+0xff7fc200>
  804394:	d9c02785 	stb	r7,158(sp)
  804398:	003f9906 	br	804200 <__alt_mem_onchip_mem+0xff7fc200>
  80439c:	18c03fcc 	andi	r3,r3,255
  8043a0:	1805551e 	bne	r3,zero,8058f8 <___vfprintf_internal_r+0x21e0>
  8043a4:	01402074 	movhi	r5,129
  8043a8:	294bfd04 	addi	r5,r5,12276
  8043ac:	d9403915 	stw	r5,228(sp)
  8043b0:	9080080c 	andi	r2,r18,32
  8043b4:	103fae1e 	bne	r2,zero,804270 <__alt_mem_onchip_mem+0xff7fc270>
  8043b8:	9080040c 	andi	r2,r18,16
  8043bc:	1002de26 	beq	r2,zero,804f38 <___vfprintf_internal_r+0x1820>
  8043c0:	d8c02d17 	ldw	r3,180(sp)
  8043c4:	002d883a 	mov	r22,zero
  8043c8:	1cc00017 	ldw	r19,0(r3)
  8043cc:	18c00104 	addi	r3,r3,4
  8043d0:	d8c02d15 	stw	r3,180(sp)
  8043d4:	003fab06 	br	804284 <__alt_mem_onchip_mem+0xff7fc284>
  8043d8:	38803fcc 	andi	r2,r7,255
  8043dc:	1080201c 	xori	r2,r2,128
  8043e0:	10bfe004 	addi	r2,r2,-128
  8043e4:	1002d21e 	bne	r2,zero,804f30 <___vfprintf_internal_r+0x1818>
  8043e8:	00c00044 	movi	r3,1
  8043ec:	01c00804 	movi	r7,32
  8043f0:	ac400007 	ldb	r17,0(r21)
  8043f4:	003d2906 	br	80389c <__alt_mem_onchip_mem+0xff7fb89c>
  8043f8:	94800054 	ori	r18,r18,1
  8043fc:	ac400007 	ldb	r17,0(r21)
  804400:	003d2606 	br	80389c <__alt_mem_onchip_mem+0xff7fb89c>
  804404:	18c03fcc 	andi	r3,r3,255
  804408:	183e0526 	beq	r3,zero,803c20 <__alt_mem_onchip_mem+0xff7fbc20>
  80440c:	d9c02785 	stb	r7,158(sp)
  804410:	003e0306 	br	803c20 <__alt_mem_onchip_mem+0xff7fbc20>
  804414:	94801014 	ori	r18,r18,64
  804418:	ac400007 	ldb	r17,0(r21)
  80441c:	003d1f06 	br	80389c <__alt_mem_onchip_mem+0xff7fb89c>
  804420:	ac400007 	ldb	r17,0(r21)
  804424:	8a438726 	beq	r17,r9,805244 <___vfprintf_internal_r+0x1b2c>
  804428:	94800414 	ori	r18,r18,16
  80442c:	003d1b06 	br	80389c <__alt_mem_onchip_mem+0xff7fb89c>
  804430:	18c03fcc 	andi	r3,r3,255
  804434:	1805341e 	bne	r3,zero,805908 <___vfprintf_internal_r+0x21f0>
  804438:	9080080c 	andi	r2,r18,32
  80443c:	1002cd26 	beq	r2,zero,804f74 <___vfprintf_internal_r+0x185c>
  804440:	d9402d17 	ldw	r5,180(sp)
  804444:	d9002f17 	ldw	r4,188(sp)
  804448:	28800017 	ldw	r2,0(r5)
  80444c:	2007d7fa 	srai	r3,r4,31
  804450:	29400104 	addi	r5,r5,4
  804454:	d9402d15 	stw	r5,180(sp)
  804458:	11000015 	stw	r4,0(r2)
  80445c:	10c00115 	stw	r3,4(r2)
  804460:	003ce506 	br	8037f8 <__alt_mem_onchip_mem+0xff7fb7f8>
  804464:	d8c02d17 	ldw	r3,180(sp)
  804468:	d9002d17 	ldw	r4,180(sp)
  80446c:	d8002785 	stb	zero,158(sp)
  804470:	18800017 	ldw	r2,0(r3)
  804474:	21000104 	addi	r4,r4,4
  804478:	00c00044 	movi	r3,1
  80447c:	d8c02a15 	stw	r3,168(sp)
  804480:	d8801405 	stb	r2,80(sp)
  804484:	d9002d15 	stw	r4,180(sp)
  804488:	d8c02e15 	stw	r3,184(sp)
  80448c:	d8002915 	stw	zero,164(sp)
  804490:	d8003215 	stw	zero,200(sp)
  804494:	dc001404 	addi	r16,sp,80
  804498:	0039883a 	mov	fp,zero
  80449c:	003e7206 	br	803e68 <__alt_mem_onchip_mem+0xff7fbe68>
  8044a0:	01002074 	movhi	r4,129
  8044a4:	210bfd04 	addi	r4,r4,12276
  8044a8:	0039883a 	mov	fp,zero
  8044ac:	d9003915 	stw	r4,228(sp)
  8044b0:	04401e04 	movi	r17,120
  8044b4:	003f8206 	br	8042c0 <__alt_mem_onchip_mem+0xff7fc2c0>
  8044b8:	18c03fcc 	andi	r3,r3,255
  8044bc:	1805061e 	bne	r3,zero,8058d8 <___vfprintf_internal_r+0x21c0>
  8044c0:	883d9126 	beq	r17,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  8044c4:	00c00044 	movi	r3,1
  8044c8:	d8c02a15 	stw	r3,168(sp)
  8044cc:	dc401405 	stb	r17,80(sp)
  8044d0:	d8002785 	stb	zero,158(sp)
  8044d4:	003fec06 	br	804488 <__alt_mem_onchip_mem+0xff7fc488>
  8044d8:	01402074 	movhi	r5,129
  8044dc:	294bfd04 	addi	r5,r5,12276
  8044e0:	d9403915 	stw	r5,228(sp)
  8044e4:	d8c02d15 	stw	r3,180(sp)
  8044e8:	1025883a 	mov	r18,r2
  8044ec:	04401e04 	movi	r17,120
  8044f0:	9d84b03a 	or	r2,r19,r22
  8044f4:	1000fc1e 	bne	r2,zero,8048e8 <___vfprintf_internal_r+0x11d0>
  8044f8:	0039883a 	mov	fp,zero
  8044fc:	00800084 	movi	r2,2
  804500:	10803fcc 	andi	r2,r2,255
  804504:	00c00044 	movi	r3,1
  804508:	10c20f26 	beq	r2,r3,804d48 <___vfprintf_internal_r+0x1630>
  80450c:	00c00084 	movi	r3,2
  804510:	10fd6326 	beq	r2,r3,803aa0 <__alt_mem_onchip_mem+0xff7fbaa0>
  804514:	003e2d06 	br	803dcc <__alt_mem_onchip_mem+0xff7fbdcc>
  804518:	d8c02017 	ldw	r3,128(sp)
  80451c:	003e9306 	br	803f6c <__alt_mem_onchip_mem+0xff7fbf6c>
  804520:	00801944 	movi	r2,101
  804524:	14407e0e 	bge	r2,r17,804720 <___vfprintf_internal_r+0x1008>
  804528:	d9003617 	ldw	r4,216(sp)
  80452c:	d9403817 	ldw	r5,224(sp)
  804530:	000d883a 	mov	r6,zero
  804534:	000f883a 	mov	r7,zero
  804538:	d8c03c15 	stw	r3,240(sp)
  80453c:	da003d15 	stw	r8,244(sp)
  804540:	080d7180 	call	80d718 <__eqdf2>
  804544:	d8c03c17 	ldw	r3,240(sp)
  804548:	da003d17 	ldw	r8,244(sp)
  80454c:	1000f71e 	bne	r2,zero,80492c <___vfprintf_internal_r+0x1214>
  804550:	d8801f17 	ldw	r2,124(sp)
  804554:	01002074 	movhi	r4,129
  804558:	210c0404 	addi	r4,r4,12304
  80455c:	18c00044 	addi	r3,r3,1
  804560:	10800044 	addi	r2,r2,1
  804564:	41000015 	stw	r4,0(r8)
  804568:	01000044 	movi	r4,1
  80456c:	41000115 	stw	r4,4(r8)
  804570:	d8c02015 	stw	r3,128(sp)
  804574:	d8801f15 	stw	r2,124(sp)
  804578:	010001c4 	movi	r4,7
  80457c:	2082b816 	blt	r4,r2,805060 <___vfprintf_internal_r+0x1948>
  804580:	42000204 	addi	r8,r8,8
  804584:	d8802617 	ldw	r2,152(sp)
  804588:	d9403317 	ldw	r5,204(sp)
  80458c:	11400216 	blt	r2,r5,804598 <___vfprintf_internal_r+0xe80>
  804590:	9080004c 	andi	r2,r18,1
  804594:	103ed526 	beq	r2,zero,8040ec <__alt_mem_onchip_mem+0xff7fc0ec>
  804598:	d8803717 	ldw	r2,220(sp)
  80459c:	d9003417 	ldw	r4,208(sp)
  8045a0:	d9403717 	ldw	r5,220(sp)
  8045a4:	1887883a 	add	r3,r3,r2
  8045a8:	d8801f17 	ldw	r2,124(sp)
  8045ac:	41000015 	stw	r4,0(r8)
  8045b0:	41400115 	stw	r5,4(r8)
  8045b4:	10800044 	addi	r2,r2,1
  8045b8:	d8c02015 	stw	r3,128(sp)
  8045bc:	d8801f15 	stw	r2,124(sp)
  8045c0:	010001c4 	movi	r4,7
  8045c4:	20832916 	blt	r4,r2,80526c <___vfprintf_internal_r+0x1b54>
  8045c8:	42000204 	addi	r8,r8,8
  8045cc:	d8803317 	ldw	r2,204(sp)
  8045d0:	143fffc4 	addi	r16,r2,-1
  8045d4:	043ec50e 	bge	zero,r16,8040ec <__alt_mem_onchip_mem+0xff7fc0ec>
  8045d8:	04400404 	movi	r17,16
  8045dc:	d8801f17 	ldw	r2,124(sp)
  8045e0:	8c00880e 	bge	r17,r16,804804 <___vfprintf_internal_r+0x10ec>
  8045e4:	01402074 	movhi	r5,129
  8045e8:	294c0484 	addi	r5,r5,12306
  8045ec:	d9402b15 	stw	r5,172(sp)
  8045f0:	058001c4 	movi	r22,7
  8045f4:	dcc02c17 	ldw	r19,176(sp)
  8045f8:	00000306 	br	804608 <___vfprintf_internal_r+0xef0>
  8045fc:	42000204 	addi	r8,r8,8
  804600:	843ffc04 	addi	r16,r16,-16
  804604:	8c00820e 	bge	r17,r16,804810 <___vfprintf_internal_r+0x10f8>
  804608:	18c00404 	addi	r3,r3,16
  80460c:	10800044 	addi	r2,r2,1
  804610:	45000015 	stw	r20,0(r8)
  804614:	44400115 	stw	r17,4(r8)
  804618:	d8c02015 	stw	r3,128(sp)
  80461c:	d8801f15 	stw	r2,124(sp)
  804620:	b0bff60e 	bge	r22,r2,8045fc <__alt_mem_onchip_mem+0xff7fc5fc>
  804624:	d9801e04 	addi	r6,sp,120
  804628:	b80b883a 	mov	r5,r23
  80462c:	9809883a 	mov	r4,r19
  804630:	080a0d40 	call	80a0d4 <__sprint_r>
  804634:	103d3a1e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  804638:	d8c02017 	ldw	r3,128(sp)
  80463c:	d8801f17 	ldw	r2,124(sp)
  804640:	da000404 	addi	r8,sp,16
  804644:	003fee06 	br	804600 <__alt_mem_onchip_mem+0xff7fc600>
  804648:	d9403117 	ldw	r5,196(sp)
  80464c:	d8802a17 	ldw	r2,168(sp)
  804650:	28adc83a 	sub	r22,r5,r2
  804654:	05be630e 	bge	zero,r22,803fe4 <__alt_mem_onchip_mem+0xff7fbfe4>
  804658:	07000404 	movi	fp,16
  80465c:	d8801f17 	ldw	r2,124(sp)
  804660:	e5838f0e 	bge	fp,r22,8054a0 <___vfprintf_internal_r+0x1d88>
  804664:	01402074 	movhi	r5,129
  804668:	294c0484 	addi	r5,r5,12306
  80466c:	dc403015 	stw	r17,192(sp)
  804670:	d9402b15 	stw	r5,172(sp)
  804674:	b023883a 	mov	r17,r22
  804678:	04c001c4 	movi	r19,7
  80467c:	a82d883a 	mov	r22,r21
  804680:	902b883a 	mov	r21,r18
  804684:	8025883a 	mov	r18,r16
  804688:	dc002c17 	ldw	r16,176(sp)
  80468c:	00000306 	br	80469c <___vfprintf_internal_r+0xf84>
  804690:	8c7ffc04 	addi	r17,r17,-16
  804694:	42000204 	addi	r8,r8,8
  804698:	e440110e 	bge	fp,r17,8046e0 <___vfprintf_internal_r+0xfc8>
  80469c:	18c00404 	addi	r3,r3,16
  8046a0:	10800044 	addi	r2,r2,1
  8046a4:	45000015 	stw	r20,0(r8)
  8046a8:	47000115 	stw	fp,4(r8)
  8046ac:	d8c02015 	stw	r3,128(sp)
  8046b0:	d8801f15 	stw	r2,124(sp)
  8046b4:	98bff60e 	bge	r19,r2,804690 <__alt_mem_onchip_mem+0xff7fc690>
  8046b8:	d9801e04 	addi	r6,sp,120
  8046bc:	b80b883a 	mov	r5,r23
  8046c0:	8009883a 	mov	r4,r16
  8046c4:	080a0d40 	call	80a0d4 <__sprint_r>
  8046c8:	103d151e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  8046cc:	8c7ffc04 	addi	r17,r17,-16
  8046d0:	d8c02017 	ldw	r3,128(sp)
  8046d4:	d8801f17 	ldw	r2,124(sp)
  8046d8:	da000404 	addi	r8,sp,16
  8046dc:	e47fef16 	blt	fp,r17,80469c <__alt_mem_onchip_mem+0xff7fc69c>
  8046e0:	9021883a 	mov	r16,r18
  8046e4:	a825883a 	mov	r18,r21
  8046e8:	b02b883a 	mov	r21,r22
  8046ec:	882d883a 	mov	r22,r17
  8046f0:	dc403017 	ldw	r17,192(sp)
  8046f4:	d9002b17 	ldw	r4,172(sp)
  8046f8:	1d87883a 	add	r3,r3,r22
  8046fc:	10800044 	addi	r2,r2,1
  804700:	41000015 	stw	r4,0(r8)
  804704:	45800115 	stw	r22,4(r8)
  804708:	d8c02015 	stw	r3,128(sp)
  80470c:	d8801f15 	stw	r2,124(sp)
  804710:	010001c4 	movi	r4,7
  804714:	20818e16 	blt	r4,r2,804d50 <___vfprintf_internal_r+0x1638>
  804718:	42000204 	addi	r8,r8,8
  80471c:	003e3106 	br	803fe4 <__alt_mem_onchip_mem+0xff7fbfe4>
  804720:	d9403317 	ldw	r5,204(sp)
  804724:	00800044 	movi	r2,1
  804728:	18c00044 	addi	r3,r3,1
  80472c:	1141530e 	bge	r2,r5,804c7c <___vfprintf_internal_r+0x1564>
  804730:	dc401f17 	ldw	r17,124(sp)
  804734:	00800044 	movi	r2,1
  804738:	40800115 	stw	r2,4(r8)
  80473c:	8c400044 	addi	r17,r17,1
  804740:	44000015 	stw	r16,0(r8)
  804744:	d8c02015 	stw	r3,128(sp)
  804748:	dc401f15 	stw	r17,124(sp)
  80474c:	008001c4 	movi	r2,7
  804750:	14416b16 	blt	r2,r17,804d00 <___vfprintf_internal_r+0x15e8>
  804754:	42000204 	addi	r8,r8,8
  804758:	d8803717 	ldw	r2,220(sp)
  80475c:	d9003417 	ldw	r4,208(sp)
  804760:	8c400044 	addi	r17,r17,1
  804764:	10c7883a 	add	r3,r2,r3
  804768:	40800115 	stw	r2,4(r8)
  80476c:	41000015 	stw	r4,0(r8)
  804770:	d8c02015 	stw	r3,128(sp)
  804774:	dc401f15 	stw	r17,124(sp)
  804778:	008001c4 	movi	r2,7
  80477c:	14416916 	blt	r2,r17,804d24 <___vfprintf_internal_r+0x160c>
  804780:	45800204 	addi	r22,r8,8
  804784:	d9003617 	ldw	r4,216(sp)
  804788:	d9403817 	ldw	r5,224(sp)
  80478c:	000d883a 	mov	r6,zero
  804790:	000f883a 	mov	r7,zero
  804794:	d8c03c15 	stw	r3,240(sp)
  804798:	080d7180 	call	80d718 <__eqdf2>
  80479c:	d8c03c17 	ldw	r3,240(sp)
  8047a0:	1000bc26 	beq	r2,zero,804a94 <___vfprintf_internal_r+0x137c>
  8047a4:	d9403317 	ldw	r5,204(sp)
  8047a8:	84000044 	addi	r16,r16,1
  8047ac:	8c400044 	addi	r17,r17,1
  8047b0:	28bfffc4 	addi	r2,r5,-1
  8047b4:	1887883a 	add	r3,r3,r2
  8047b8:	b0800115 	stw	r2,4(r22)
  8047bc:	b4000015 	stw	r16,0(r22)
  8047c0:	d8c02015 	stw	r3,128(sp)
  8047c4:	dc401f15 	stw	r17,124(sp)
  8047c8:	008001c4 	movi	r2,7
  8047cc:	14414316 	blt	r2,r17,804cdc <___vfprintf_internal_r+0x15c4>
  8047d0:	b5800204 	addi	r22,r22,8
  8047d4:	d9003a17 	ldw	r4,232(sp)
  8047d8:	df0022c4 	addi	fp,sp,139
  8047dc:	8c400044 	addi	r17,r17,1
  8047e0:	20c7883a 	add	r3,r4,r3
  8047e4:	b7000015 	stw	fp,0(r22)
  8047e8:	b1000115 	stw	r4,4(r22)
  8047ec:	d8c02015 	stw	r3,128(sp)
  8047f0:	dc401f15 	stw	r17,124(sp)
  8047f4:	008001c4 	movi	r2,7
  8047f8:	14400e16 	blt	r2,r17,804834 <___vfprintf_internal_r+0x111c>
  8047fc:	b2000204 	addi	r8,r22,8
  804800:	003e3a06 	br	8040ec <__alt_mem_onchip_mem+0xff7fc0ec>
  804804:	01002074 	movhi	r4,129
  804808:	210c0484 	addi	r4,r4,12306
  80480c:	d9002b15 	stw	r4,172(sp)
  804810:	d9002b17 	ldw	r4,172(sp)
  804814:	1c07883a 	add	r3,r3,r16
  804818:	44000115 	stw	r16,4(r8)
  80481c:	41000015 	stw	r4,0(r8)
  804820:	10800044 	addi	r2,r2,1
  804824:	d8c02015 	stw	r3,128(sp)
  804828:	d8801f15 	stw	r2,124(sp)
  80482c:	010001c4 	movi	r4,7
  804830:	20be2d0e 	bge	r4,r2,8040e8 <__alt_mem_onchip_mem+0xff7fc0e8>
  804834:	d9002c17 	ldw	r4,176(sp)
  804838:	d9801e04 	addi	r6,sp,120
  80483c:	b80b883a 	mov	r5,r23
  804840:	080a0d40 	call	80a0d4 <__sprint_r>
  804844:	103cb61e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  804848:	d8c02017 	ldw	r3,128(sp)
  80484c:	da000404 	addi	r8,sp,16
  804850:	003e2606 	br	8040ec <__alt_mem_onchip_mem+0xff7fc0ec>
  804854:	d9002c17 	ldw	r4,176(sp)
  804858:	d9801e04 	addi	r6,sp,120
  80485c:	b80b883a 	mov	r5,r23
  804860:	080a0d40 	call	80a0d4 <__sprint_r>
  804864:	103e5d26 	beq	r2,zero,8041dc <__alt_mem_onchip_mem+0xff7fc1dc>
  804868:	003cad06 	br	803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  80486c:	d9002c17 	ldw	r4,176(sp)
  804870:	d9801e04 	addi	r6,sp,120
  804874:	b80b883a 	mov	r5,r23
  804878:	080a0d40 	call	80a0d4 <__sprint_r>
  80487c:	103ca81e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  804880:	d8c02017 	ldw	r3,128(sp)
  804884:	da000404 	addi	r8,sp,16
  804888:	003e0b06 	br	8040b8 <__alt_mem_onchip_mem+0xff7fc0b8>
  80488c:	d9002c17 	ldw	r4,176(sp)
  804890:	d9801e04 	addi	r6,sp,120
  804894:	b80b883a 	mov	r5,r23
  804898:	080a0d40 	call	80a0d4 <__sprint_r>
  80489c:	103ca01e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  8048a0:	d8c02017 	ldw	r3,128(sp)
  8048a4:	da000404 	addi	r8,sp,16
  8048a8:	003dbd06 	br	803fa0 <__alt_mem_onchip_mem+0xff7fbfa0>
  8048ac:	d9002c17 	ldw	r4,176(sp)
  8048b0:	d9801e04 	addi	r6,sp,120
  8048b4:	b80b883a 	mov	r5,r23
  8048b8:	080a0d40 	call	80a0d4 <__sprint_r>
  8048bc:	103c981e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  8048c0:	d8c02017 	ldw	r3,128(sp)
  8048c4:	da000404 	addi	r8,sp,16
  8048c8:	003dc306 	br	803fd8 <__alt_mem_onchip_mem+0xff7fbfd8>
  8048cc:	d8802917 	ldw	r2,164(sp)
  8048d0:	d8002785 	stb	zero,158(sp)
  8048d4:	103f0616 	blt	r2,zero,8044f0 <__alt_mem_onchip_mem+0xff7fc4f0>
  8048d8:	00ffdfc4 	movi	r3,-129
  8048dc:	9d84b03a 	or	r2,r19,r22
  8048e0:	90e4703a 	and	r18,r18,r3
  8048e4:	103c6b26 	beq	r2,zero,803a94 <__alt_mem_onchip_mem+0xff7fba94>
  8048e8:	0039883a 	mov	fp,zero
  8048ec:	003e7406 	br	8042c0 <__alt_mem_onchip_mem+0xff7fc2c0>
  8048f0:	9080040c 	andi	r2,r18,16
  8048f4:	1001b326 	beq	r2,zero,804fc4 <___vfprintf_internal_r+0x18ac>
  8048f8:	d9002d17 	ldw	r4,180(sp)
  8048fc:	d9402917 	ldw	r5,164(sp)
  804900:	d8002785 	stb	zero,158(sp)
  804904:	20800104 	addi	r2,r4,4
  804908:	24c00017 	ldw	r19,0(r4)
  80490c:	002d883a 	mov	r22,zero
  804910:	2801b516 	blt	r5,zero,804fe8 <___vfprintf_internal_r+0x18d0>
  804914:	00ffdfc4 	movi	r3,-129
  804918:	d8802d15 	stw	r2,180(sp)
  80491c:	90e4703a 	and	r18,r18,r3
  804920:	983d2726 	beq	r19,zero,803dc0 <__alt_mem_onchip_mem+0xff7fbdc0>
  804924:	0039883a 	mov	fp,zero
  804928:	003d2a06 	br	803dd4 <__alt_mem_onchip_mem+0xff7fbdd4>
  80492c:	dc402617 	ldw	r17,152(sp)
  804930:	0441d30e 	bge	zero,r17,805080 <___vfprintf_internal_r+0x1968>
  804934:	dc403217 	ldw	r17,200(sp)
  804938:	d8803317 	ldw	r2,204(sp)
  80493c:	1440010e 	bge	r2,r17,804944 <___vfprintf_internal_r+0x122c>
  804940:	1023883a 	mov	r17,r2
  804944:	04400a0e 	bge	zero,r17,804970 <___vfprintf_internal_r+0x1258>
  804948:	d8801f17 	ldw	r2,124(sp)
  80494c:	1c47883a 	add	r3,r3,r17
  804950:	44000015 	stw	r16,0(r8)
  804954:	10800044 	addi	r2,r2,1
  804958:	44400115 	stw	r17,4(r8)
  80495c:	d8c02015 	stw	r3,128(sp)
  804960:	d8801f15 	stw	r2,124(sp)
  804964:	010001c4 	movi	r4,7
  804968:	20826516 	blt	r4,r2,805300 <___vfprintf_internal_r+0x1be8>
  80496c:	42000204 	addi	r8,r8,8
  804970:	88026116 	blt	r17,zero,8052f8 <___vfprintf_internal_r+0x1be0>
  804974:	d9003217 	ldw	r4,200(sp)
  804978:	2463c83a 	sub	r17,r4,r17
  80497c:	04407b0e 	bge	zero,r17,804b6c <___vfprintf_internal_r+0x1454>
  804980:	05800404 	movi	r22,16
  804984:	d8801f17 	ldw	r2,124(sp)
  804988:	b4419d0e 	bge	r22,r17,805000 <___vfprintf_internal_r+0x18e8>
  80498c:	01002074 	movhi	r4,129
  804990:	210c0484 	addi	r4,r4,12306
  804994:	d9002b15 	stw	r4,172(sp)
  804998:	070001c4 	movi	fp,7
  80499c:	dcc02c17 	ldw	r19,176(sp)
  8049a0:	00000306 	br	8049b0 <___vfprintf_internal_r+0x1298>
  8049a4:	42000204 	addi	r8,r8,8
  8049a8:	8c7ffc04 	addi	r17,r17,-16
  8049ac:	b441970e 	bge	r22,r17,80500c <___vfprintf_internal_r+0x18f4>
  8049b0:	18c00404 	addi	r3,r3,16
  8049b4:	10800044 	addi	r2,r2,1
  8049b8:	45000015 	stw	r20,0(r8)
  8049bc:	45800115 	stw	r22,4(r8)
  8049c0:	d8c02015 	stw	r3,128(sp)
  8049c4:	d8801f15 	stw	r2,124(sp)
  8049c8:	e0bff60e 	bge	fp,r2,8049a4 <__alt_mem_onchip_mem+0xff7fc9a4>
  8049cc:	d9801e04 	addi	r6,sp,120
  8049d0:	b80b883a 	mov	r5,r23
  8049d4:	9809883a 	mov	r4,r19
  8049d8:	080a0d40 	call	80a0d4 <__sprint_r>
  8049dc:	103c501e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  8049e0:	d8c02017 	ldw	r3,128(sp)
  8049e4:	d8801f17 	ldw	r2,124(sp)
  8049e8:	da000404 	addi	r8,sp,16
  8049ec:	003fee06 	br	8049a8 <__alt_mem_onchip_mem+0xff7fc9a8>
  8049f0:	d9002c17 	ldw	r4,176(sp)
  8049f4:	d9801e04 	addi	r6,sp,120
  8049f8:	b80b883a 	mov	r5,r23
  8049fc:	080a0d40 	call	80a0d4 <__sprint_r>
  804a00:	103c471e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  804a04:	d8c02017 	ldw	r3,128(sp)
  804a08:	df002787 	ldb	fp,158(sp)
  804a0c:	da000404 	addi	r8,sp,16
  804a10:	003d5606 	br	803f6c <__alt_mem_onchip_mem+0xff7fbf6c>
  804a14:	9080040c 	andi	r2,r18,16
  804a18:	10016126 	beq	r2,zero,804fa0 <___vfprintf_internal_r+0x1888>
  804a1c:	d8802d17 	ldw	r2,180(sp)
  804a20:	14c00017 	ldw	r19,0(r2)
  804a24:	10800104 	addi	r2,r2,4
  804a28:	d8802d15 	stw	r2,180(sp)
  804a2c:	982dd7fa 	srai	r22,r19,31
  804a30:	b005883a 	mov	r2,r22
  804a34:	003c8206 	br	803c40 <__alt_mem_onchip_mem+0xff7fbc40>
  804a38:	9080040c 	andi	r2,r18,16
  804a3c:	10003526 	beq	r2,zero,804b14 <___vfprintf_internal_r+0x13fc>
  804a40:	d9402d17 	ldw	r5,180(sp)
  804a44:	d8c02917 	ldw	r3,164(sp)
  804a48:	d8002785 	stb	zero,158(sp)
  804a4c:	28800104 	addi	r2,r5,4
  804a50:	2cc00017 	ldw	r19,0(r5)
  804a54:	002d883a 	mov	r22,zero
  804a58:	18003716 	blt	r3,zero,804b38 <___vfprintf_internal_r+0x1420>
  804a5c:	00ffdfc4 	movi	r3,-129
  804a60:	d8802d15 	stw	r2,180(sp)
  804a64:	90e4703a 	and	r18,r18,r3
  804a68:	0039883a 	mov	fp,zero
  804a6c:	983df326 	beq	r19,zero,80423c <__alt_mem_onchip_mem+0xff7fc23c>
  804a70:	00800244 	movi	r2,9
  804a74:	14fc7b36 	bltu	r2,r19,803c64 <__alt_mem_onchip_mem+0xff7fbc64>
  804a78:	d8c02817 	ldw	r3,160(sp)
  804a7c:	dc001dc4 	addi	r16,sp,119
  804a80:	9cc00c04 	addi	r19,r19,48
  804a84:	1c07c83a 	sub	r3,r3,r16
  804a88:	dcc01dc5 	stb	r19,119(sp)
  804a8c:	d8c02e15 	stw	r3,184(sp)
  804a90:	003ce806 	br	803e34 <__alt_mem_onchip_mem+0xff7fbe34>
  804a94:	d8803317 	ldw	r2,204(sp)
  804a98:	143fffc4 	addi	r16,r2,-1
  804a9c:	043f4d0e 	bge	zero,r16,8047d4 <__alt_mem_onchip_mem+0xff7fc7d4>
  804aa0:	07000404 	movi	fp,16
  804aa4:	e400810e 	bge	fp,r16,804cac <___vfprintf_internal_r+0x1594>
  804aa8:	01402074 	movhi	r5,129
  804aac:	294c0484 	addi	r5,r5,12306
  804ab0:	d9402b15 	stw	r5,172(sp)
  804ab4:	01c001c4 	movi	r7,7
  804ab8:	dcc02c17 	ldw	r19,176(sp)
  804abc:	00000306 	br	804acc <___vfprintf_internal_r+0x13b4>
  804ac0:	b5800204 	addi	r22,r22,8
  804ac4:	843ffc04 	addi	r16,r16,-16
  804ac8:	e4007b0e 	bge	fp,r16,804cb8 <___vfprintf_internal_r+0x15a0>
  804acc:	18c00404 	addi	r3,r3,16
  804ad0:	8c400044 	addi	r17,r17,1
  804ad4:	b5000015 	stw	r20,0(r22)
  804ad8:	b7000115 	stw	fp,4(r22)
  804adc:	d8c02015 	stw	r3,128(sp)
  804ae0:	dc401f15 	stw	r17,124(sp)
  804ae4:	3c7ff60e 	bge	r7,r17,804ac0 <__alt_mem_onchip_mem+0xff7fcac0>
  804ae8:	d9801e04 	addi	r6,sp,120
  804aec:	b80b883a 	mov	r5,r23
  804af0:	9809883a 	mov	r4,r19
  804af4:	d9c03c15 	stw	r7,240(sp)
  804af8:	080a0d40 	call	80a0d4 <__sprint_r>
  804afc:	d9c03c17 	ldw	r7,240(sp)
  804b00:	103c071e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  804b04:	d8c02017 	ldw	r3,128(sp)
  804b08:	dc401f17 	ldw	r17,124(sp)
  804b0c:	dd800404 	addi	r22,sp,16
  804b10:	003fec06 	br	804ac4 <__alt_mem_onchip_mem+0xff7fcac4>
  804b14:	9080100c 	andi	r2,r18,64
  804b18:	d8002785 	stb	zero,158(sp)
  804b1c:	10010e26 	beq	r2,zero,804f58 <___vfprintf_internal_r+0x1840>
  804b20:	d9002d17 	ldw	r4,180(sp)
  804b24:	d9402917 	ldw	r5,164(sp)
  804b28:	002d883a 	mov	r22,zero
  804b2c:	20800104 	addi	r2,r4,4
  804b30:	24c0000b 	ldhu	r19,0(r4)
  804b34:	283fc90e 	bge	r5,zero,804a5c <__alt_mem_onchip_mem+0xff7fca5c>
  804b38:	d8802d15 	stw	r2,180(sp)
  804b3c:	0039883a 	mov	fp,zero
  804b40:	9d84b03a 	or	r2,r19,r22
  804b44:	103c461e 	bne	r2,zero,803c60 <__alt_mem_onchip_mem+0xff7fbc60>
  804b48:	00800044 	movi	r2,1
  804b4c:	003e6c06 	br	804500 <__alt_mem_onchip_mem+0xff7fc500>
  804b50:	d9002c17 	ldw	r4,176(sp)
  804b54:	d9801e04 	addi	r6,sp,120
  804b58:	b80b883a 	mov	r5,r23
  804b5c:	080a0d40 	call	80a0d4 <__sprint_r>
  804b60:	103bef1e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  804b64:	d8c02017 	ldw	r3,128(sp)
  804b68:	da000404 	addi	r8,sp,16
  804b6c:	d9003217 	ldw	r4,200(sp)
  804b70:	d8802617 	ldw	r2,152(sp)
  804b74:	d9403317 	ldw	r5,204(sp)
  804b78:	8123883a 	add	r17,r16,r4
  804b7c:	11400216 	blt	r2,r5,804b88 <___vfprintf_internal_r+0x1470>
  804b80:	9100004c 	andi	r4,r18,1
  804b84:	20000d26 	beq	r4,zero,804bbc <___vfprintf_internal_r+0x14a4>
  804b88:	d9003717 	ldw	r4,220(sp)
  804b8c:	d9403417 	ldw	r5,208(sp)
  804b90:	1907883a 	add	r3,r3,r4
  804b94:	d9001f17 	ldw	r4,124(sp)
  804b98:	41400015 	stw	r5,0(r8)
  804b9c:	d9403717 	ldw	r5,220(sp)
  804ba0:	21000044 	addi	r4,r4,1
  804ba4:	d8c02015 	stw	r3,128(sp)
  804ba8:	41400115 	stw	r5,4(r8)
  804bac:	d9001f15 	stw	r4,124(sp)
  804bb0:	014001c4 	movi	r5,7
  804bb4:	2901e816 	blt	r5,r4,805358 <___vfprintf_internal_r+0x1c40>
  804bb8:	42000204 	addi	r8,r8,8
  804bbc:	d9003317 	ldw	r4,204(sp)
  804bc0:	8121883a 	add	r16,r16,r4
  804bc4:	2085c83a 	sub	r2,r4,r2
  804bc8:	8461c83a 	sub	r16,r16,r17
  804bcc:	1400010e 	bge	r2,r16,804bd4 <___vfprintf_internal_r+0x14bc>
  804bd0:	1021883a 	mov	r16,r2
  804bd4:	04000a0e 	bge	zero,r16,804c00 <___vfprintf_internal_r+0x14e8>
  804bd8:	d9001f17 	ldw	r4,124(sp)
  804bdc:	1c07883a 	add	r3,r3,r16
  804be0:	44400015 	stw	r17,0(r8)
  804be4:	21000044 	addi	r4,r4,1
  804be8:	44000115 	stw	r16,4(r8)
  804bec:	d8c02015 	stw	r3,128(sp)
  804bf0:	d9001f15 	stw	r4,124(sp)
  804bf4:	014001c4 	movi	r5,7
  804bf8:	2901fb16 	blt	r5,r4,8053e8 <___vfprintf_internal_r+0x1cd0>
  804bfc:	42000204 	addi	r8,r8,8
  804c00:	8001f716 	blt	r16,zero,8053e0 <___vfprintf_internal_r+0x1cc8>
  804c04:	1421c83a 	sub	r16,r2,r16
  804c08:	043d380e 	bge	zero,r16,8040ec <__alt_mem_onchip_mem+0xff7fc0ec>
  804c0c:	04400404 	movi	r17,16
  804c10:	d8801f17 	ldw	r2,124(sp)
  804c14:	8c3efb0e 	bge	r17,r16,804804 <__alt_mem_onchip_mem+0xff7fc804>
  804c18:	01402074 	movhi	r5,129
  804c1c:	294c0484 	addi	r5,r5,12306
  804c20:	d9402b15 	stw	r5,172(sp)
  804c24:	058001c4 	movi	r22,7
  804c28:	dcc02c17 	ldw	r19,176(sp)
  804c2c:	00000306 	br	804c3c <___vfprintf_internal_r+0x1524>
  804c30:	42000204 	addi	r8,r8,8
  804c34:	843ffc04 	addi	r16,r16,-16
  804c38:	8c3ef50e 	bge	r17,r16,804810 <__alt_mem_onchip_mem+0xff7fc810>
  804c3c:	18c00404 	addi	r3,r3,16
  804c40:	10800044 	addi	r2,r2,1
  804c44:	45000015 	stw	r20,0(r8)
  804c48:	44400115 	stw	r17,4(r8)
  804c4c:	d8c02015 	stw	r3,128(sp)
  804c50:	d8801f15 	stw	r2,124(sp)
  804c54:	b0bff60e 	bge	r22,r2,804c30 <__alt_mem_onchip_mem+0xff7fcc30>
  804c58:	d9801e04 	addi	r6,sp,120
  804c5c:	b80b883a 	mov	r5,r23
  804c60:	9809883a 	mov	r4,r19
  804c64:	080a0d40 	call	80a0d4 <__sprint_r>
  804c68:	103bad1e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  804c6c:	d8c02017 	ldw	r3,128(sp)
  804c70:	d8801f17 	ldw	r2,124(sp)
  804c74:	da000404 	addi	r8,sp,16
  804c78:	003fee06 	br	804c34 <__alt_mem_onchip_mem+0xff7fcc34>
  804c7c:	9088703a 	and	r4,r18,r2
  804c80:	203eab1e 	bne	r4,zero,804730 <__alt_mem_onchip_mem+0xff7fc730>
  804c84:	dc401f17 	ldw	r17,124(sp)
  804c88:	40800115 	stw	r2,4(r8)
  804c8c:	44000015 	stw	r16,0(r8)
  804c90:	8c400044 	addi	r17,r17,1
  804c94:	d8c02015 	stw	r3,128(sp)
  804c98:	dc401f15 	stw	r17,124(sp)
  804c9c:	008001c4 	movi	r2,7
  804ca0:	14400e16 	blt	r2,r17,804cdc <___vfprintf_internal_r+0x15c4>
  804ca4:	45800204 	addi	r22,r8,8
  804ca8:	003eca06 	br	8047d4 <__alt_mem_onchip_mem+0xff7fc7d4>
  804cac:	01002074 	movhi	r4,129
  804cb0:	210c0484 	addi	r4,r4,12306
  804cb4:	d9002b15 	stw	r4,172(sp)
  804cb8:	d8802b17 	ldw	r2,172(sp)
  804cbc:	1c07883a 	add	r3,r3,r16
  804cc0:	8c400044 	addi	r17,r17,1
  804cc4:	b0800015 	stw	r2,0(r22)
  804cc8:	b4000115 	stw	r16,4(r22)
  804ccc:	d8c02015 	stw	r3,128(sp)
  804cd0:	dc401f15 	stw	r17,124(sp)
  804cd4:	008001c4 	movi	r2,7
  804cd8:	147ebd0e 	bge	r2,r17,8047d0 <__alt_mem_onchip_mem+0xff7fc7d0>
  804cdc:	d9002c17 	ldw	r4,176(sp)
  804ce0:	d9801e04 	addi	r6,sp,120
  804ce4:	b80b883a 	mov	r5,r23
  804ce8:	080a0d40 	call	80a0d4 <__sprint_r>
  804cec:	103b8c1e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  804cf0:	d8c02017 	ldw	r3,128(sp)
  804cf4:	dc401f17 	ldw	r17,124(sp)
  804cf8:	dd800404 	addi	r22,sp,16
  804cfc:	003eb506 	br	8047d4 <__alt_mem_onchip_mem+0xff7fc7d4>
  804d00:	d9002c17 	ldw	r4,176(sp)
  804d04:	d9801e04 	addi	r6,sp,120
  804d08:	b80b883a 	mov	r5,r23
  804d0c:	080a0d40 	call	80a0d4 <__sprint_r>
  804d10:	103b831e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  804d14:	d8c02017 	ldw	r3,128(sp)
  804d18:	dc401f17 	ldw	r17,124(sp)
  804d1c:	da000404 	addi	r8,sp,16
  804d20:	003e8d06 	br	804758 <__alt_mem_onchip_mem+0xff7fc758>
  804d24:	d9002c17 	ldw	r4,176(sp)
  804d28:	d9801e04 	addi	r6,sp,120
  804d2c:	b80b883a 	mov	r5,r23
  804d30:	080a0d40 	call	80a0d4 <__sprint_r>
  804d34:	103b7a1e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  804d38:	d8c02017 	ldw	r3,128(sp)
  804d3c:	dc401f17 	ldw	r17,124(sp)
  804d40:	dd800404 	addi	r22,sp,16
  804d44:	003e8f06 	br	804784 <__alt_mem_onchip_mem+0xff7fc784>
  804d48:	0027883a 	mov	r19,zero
  804d4c:	003f4a06 	br	804a78 <__alt_mem_onchip_mem+0xff7fca78>
  804d50:	d9002c17 	ldw	r4,176(sp)
  804d54:	d9801e04 	addi	r6,sp,120
  804d58:	b80b883a 	mov	r5,r23
  804d5c:	080a0d40 	call	80a0d4 <__sprint_r>
  804d60:	103b6f1e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  804d64:	d8c02017 	ldw	r3,128(sp)
  804d68:	da000404 	addi	r8,sp,16
  804d6c:	003c9d06 	br	803fe4 <__alt_mem_onchip_mem+0xff7fbfe4>
  804d70:	04e7c83a 	sub	r19,zero,r19
  804d74:	9804c03a 	cmpne	r2,r19,zero
  804d78:	05adc83a 	sub	r22,zero,r22
  804d7c:	b0adc83a 	sub	r22,r22,r2
  804d80:	d8802917 	ldw	r2,164(sp)
  804d84:	07000b44 	movi	fp,45
  804d88:	df002785 	stb	fp,158(sp)
  804d8c:	10017b16 	blt	r2,zero,80537c <___vfprintf_internal_r+0x1c64>
  804d90:	00bfdfc4 	movi	r2,-129
  804d94:	90a4703a 	and	r18,r18,r2
  804d98:	003bb106 	br	803c60 <__alt_mem_onchip_mem+0xff7fbc60>
  804d9c:	d9003617 	ldw	r4,216(sp)
  804da0:	d9403817 	ldw	r5,224(sp)
  804da4:	da003d15 	stw	r8,244(sp)
  804da8:	0809df00 	call	809df0 <__fpclassifyd>
  804dac:	da003d17 	ldw	r8,244(sp)
  804db0:	1000f026 	beq	r2,zero,805174 <___vfprintf_internal_r+0x1a5c>
  804db4:	d9002917 	ldw	r4,164(sp)
  804db8:	05bff7c4 	movi	r22,-33
  804dbc:	00bfffc4 	movi	r2,-1
  804dc0:	8dac703a 	and	r22,r17,r22
  804dc4:	20820026 	beq	r4,r2,8055c8 <___vfprintf_internal_r+0x1eb0>
  804dc8:	008011c4 	movi	r2,71
  804dcc:	b081f726 	beq	r22,r2,8055ac <___vfprintf_internal_r+0x1e94>
  804dd0:	d9003817 	ldw	r4,224(sp)
  804dd4:	90c04014 	ori	r3,r18,256
  804dd8:	d8c02b15 	stw	r3,172(sp)
  804ddc:	20021516 	blt	r4,zero,805634 <___vfprintf_internal_r+0x1f1c>
  804de0:	dcc03817 	ldw	r19,224(sp)
  804de4:	d8002a05 	stb	zero,168(sp)
  804de8:	00801984 	movi	r2,102
  804dec:	8881f926 	beq	r17,r2,8055d4 <___vfprintf_internal_r+0x1ebc>
  804df0:	00801184 	movi	r2,70
  804df4:	88821c26 	beq	r17,r2,805668 <___vfprintf_internal_r+0x1f50>
  804df8:	00801144 	movi	r2,69
  804dfc:	b081ef26 	beq	r22,r2,8055bc <___vfprintf_internal_r+0x1ea4>
  804e00:	d8c02917 	ldw	r3,164(sp)
  804e04:	d8802104 	addi	r2,sp,132
  804e08:	d8800315 	stw	r2,12(sp)
  804e0c:	d9403617 	ldw	r5,216(sp)
  804e10:	d8802504 	addi	r2,sp,148
  804e14:	d9002c17 	ldw	r4,176(sp)
  804e18:	d8800215 	stw	r2,8(sp)
  804e1c:	d8802604 	addi	r2,sp,152
  804e20:	d8c00015 	stw	r3,0(sp)
  804e24:	d8800115 	stw	r2,4(sp)
  804e28:	01c00084 	movi	r7,2
  804e2c:	980d883a 	mov	r6,r19
  804e30:	d8c03c15 	stw	r3,240(sp)
  804e34:	da003d15 	stw	r8,244(sp)
  804e38:	0805f480 	call	805f48 <_dtoa_r>
  804e3c:	1021883a 	mov	r16,r2
  804e40:	008019c4 	movi	r2,103
  804e44:	d8c03c17 	ldw	r3,240(sp)
  804e48:	da003d17 	ldw	r8,244(sp)
  804e4c:	88817126 	beq	r17,r2,805414 <___vfprintf_internal_r+0x1cfc>
  804e50:	008011c4 	movi	r2,71
  804e54:	88829226 	beq	r17,r2,8058a0 <___vfprintf_internal_r+0x2188>
  804e58:	80f9883a 	add	fp,r16,r3
  804e5c:	d9003617 	ldw	r4,216(sp)
  804e60:	000d883a 	mov	r6,zero
  804e64:	000f883a 	mov	r7,zero
  804e68:	980b883a 	mov	r5,r19
  804e6c:	da003d15 	stw	r8,244(sp)
  804e70:	080d7180 	call	80d718 <__eqdf2>
  804e74:	da003d17 	ldw	r8,244(sp)
  804e78:	10018d26 	beq	r2,zero,8054b0 <___vfprintf_internal_r+0x1d98>
  804e7c:	d8802117 	ldw	r2,132(sp)
  804e80:	1700062e 	bgeu	r2,fp,804e9c <___vfprintf_internal_r+0x1784>
  804e84:	01000c04 	movi	r4,48
  804e88:	10c00044 	addi	r3,r2,1
  804e8c:	d8c02115 	stw	r3,132(sp)
  804e90:	11000005 	stb	r4,0(r2)
  804e94:	d8802117 	ldw	r2,132(sp)
  804e98:	173ffb36 	bltu	r2,fp,804e88 <__alt_mem_onchip_mem+0xff7fce88>
  804e9c:	1405c83a 	sub	r2,r2,r16
  804ea0:	d8803315 	stw	r2,204(sp)
  804ea4:	008011c4 	movi	r2,71
  804ea8:	b0817626 	beq	r22,r2,805484 <___vfprintf_internal_r+0x1d6c>
  804eac:	00801944 	movi	r2,101
  804eb0:	1442810e 	bge	r2,r17,8058b8 <___vfprintf_internal_r+0x21a0>
  804eb4:	d8c02617 	ldw	r3,152(sp)
  804eb8:	00801984 	movi	r2,102
  804ebc:	d8c03215 	stw	r3,200(sp)
  804ec0:	8881fe26 	beq	r17,r2,8056bc <___vfprintf_internal_r+0x1fa4>
  804ec4:	d8c03217 	ldw	r3,200(sp)
  804ec8:	d9003317 	ldw	r4,204(sp)
  804ecc:	1901dd16 	blt	r3,r4,805644 <___vfprintf_internal_r+0x1f2c>
  804ed0:	9480004c 	andi	r18,r18,1
  804ed4:	90022b1e 	bne	r18,zero,805784 <___vfprintf_internal_r+0x206c>
  804ed8:	1805883a 	mov	r2,r3
  804edc:	18028016 	blt	r3,zero,8058e0 <___vfprintf_internal_r+0x21c8>
  804ee0:	d8c03217 	ldw	r3,200(sp)
  804ee4:	044019c4 	movi	r17,103
  804ee8:	d8c02e15 	stw	r3,184(sp)
  804eec:	df002a07 	ldb	fp,168(sp)
  804ef0:	e001531e 	bne	fp,zero,805440 <___vfprintf_internal_r+0x1d28>
  804ef4:	df002783 	ldbu	fp,158(sp)
  804ef8:	d8802a15 	stw	r2,168(sp)
  804efc:	dc802b17 	ldw	r18,172(sp)
  804f00:	d8002915 	stw	zero,164(sp)
  804f04:	003bd106 	br	803e4c <__alt_mem_onchip_mem+0xff7fbe4c>
  804f08:	d8802d17 	ldw	r2,180(sp)
  804f0c:	d8c02d17 	ldw	r3,180(sp)
  804f10:	d9002d17 	ldw	r4,180(sp)
  804f14:	10800017 	ldw	r2,0(r2)
  804f18:	18c00117 	ldw	r3,4(r3)
  804f1c:	21000204 	addi	r4,r4,8
  804f20:	d8803615 	stw	r2,216(sp)
  804f24:	d8c03815 	stw	r3,224(sp)
  804f28:	d9002d15 	stw	r4,180(sp)
  804f2c:	003b7506 	br	803d04 <__alt_mem_onchip_mem+0xff7fbd04>
  804f30:	ac400007 	ldb	r17,0(r21)
  804f34:	003a5906 	br	80389c <__alt_mem_onchip_mem+0xff7fb89c>
  804f38:	9080100c 	andi	r2,r18,64
  804f3c:	1000a826 	beq	r2,zero,8051e0 <___vfprintf_internal_r+0x1ac8>
  804f40:	d9002d17 	ldw	r4,180(sp)
  804f44:	002d883a 	mov	r22,zero
  804f48:	24c0000b 	ldhu	r19,0(r4)
  804f4c:	21000104 	addi	r4,r4,4
  804f50:	d9002d15 	stw	r4,180(sp)
  804f54:	003ccb06 	br	804284 <__alt_mem_onchip_mem+0xff7fc284>
  804f58:	d8c02d17 	ldw	r3,180(sp)
  804f5c:	d9002917 	ldw	r4,164(sp)
  804f60:	002d883a 	mov	r22,zero
  804f64:	18800104 	addi	r2,r3,4
  804f68:	1cc00017 	ldw	r19,0(r3)
  804f6c:	203ebb0e 	bge	r4,zero,804a5c <__alt_mem_onchip_mem+0xff7fca5c>
  804f70:	003ef106 	br	804b38 <__alt_mem_onchip_mem+0xff7fcb38>
  804f74:	9080040c 	andi	r2,r18,16
  804f78:	1000921e 	bne	r2,zero,8051c4 <___vfprintf_internal_r+0x1aac>
  804f7c:	9480100c 	andi	r18,r18,64
  804f80:	90013926 	beq	r18,zero,805468 <___vfprintf_internal_r+0x1d50>
  804f84:	d9002d17 	ldw	r4,180(sp)
  804f88:	d9402f17 	ldw	r5,188(sp)
  804f8c:	20800017 	ldw	r2,0(r4)
  804f90:	21000104 	addi	r4,r4,4
  804f94:	d9002d15 	stw	r4,180(sp)
  804f98:	1140000d 	sth	r5,0(r2)
  804f9c:	003a1606 	br	8037f8 <__alt_mem_onchip_mem+0xff7fb7f8>
  804fa0:	9080100c 	andi	r2,r18,64
  804fa4:	10008026 	beq	r2,zero,8051a8 <___vfprintf_internal_r+0x1a90>
  804fa8:	d8c02d17 	ldw	r3,180(sp)
  804fac:	1cc0000f 	ldh	r19,0(r3)
  804fb0:	18c00104 	addi	r3,r3,4
  804fb4:	d8c02d15 	stw	r3,180(sp)
  804fb8:	982dd7fa 	srai	r22,r19,31
  804fbc:	b005883a 	mov	r2,r22
  804fc0:	003b1f06 	br	803c40 <__alt_mem_onchip_mem+0xff7fbc40>
  804fc4:	9080100c 	andi	r2,r18,64
  804fc8:	d8002785 	stb	zero,158(sp)
  804fcc:	10008a1e 	bne	r2,zero,8051f8 <___vfprintf_internal_r+0x1ae0>
  804fd0:	d9402d17 	ldw	r5,180(sp)
  804fd4:	d8c02917 	ldw	r3,164(sp)
  804fd8:	002d883a 	mov	r22,zero
  804fdc:	28800104 	addi	r2,r5,4
  804fe0:	2cc00017 	ldw	r19,0(r5)
  804fe4:	183e4b0e 	bge	r3,zero,804914 <__alt_mem_onchip_mem+0xff7fc914>
  804fe8:	9d86b03a 	or	r3,r19,r22
  804fec:	d8802d15 	stw	r2,180(sp)
  804ff0:	183e4c1e 	bne	r3,zero,804924 <__alt_mem_onchip_mem+0xff7fc924>
  804ff4:	0039883a 	mov	fp,zero
  804ff8:	0005883a 	mov	r2,zero
  804ffc:	003d4006 	br	804500 <__alt_mem_onchip_mem+0xff7fc500>
  805000:	01402074 	movhi	r5,129
  805004:	294c0484 	addi	r5,r5,12306
  805008:	d9402b15 	stw	r5,172(sp)
  80500c:	d9402b17 	ldw	r5,172(sp)
  805010:	1c47883a 	add	r3,r3,r17
  805014:	10800044 	addi	r2,r2,1
  805018:	41400015 	stw	r5,0(r8)
  80501c:	44400115 	stw	r17,4(r8)
  805020:	d8c02015 	stw	r3,128(sp)
  805024:	d8801f15 	stw	r2,124(sp)
  805028:	010001c4 	movi	r4,7
  80502c:	20bec816 	blt	r4,r2,804b50 <__alt_mem_onchip_mem+0xff7fcb50>
  805030:	42000204 	addi	r8,r8,8
  805034:	003ecd06 	br	804b6c <__alt_mem_onchip_mem+0xff7fcb6c>
  805038:	d9002917 	ldw	r4,164(sp)
  80503c:	d8002785 	stb	zero,158(sp)
  805040:	203d2d16 	blt	r4,zero,8044f8 <__alt_mem_onchip_mem+0xff7fc4f8>
  805044:	00bfdfc4 	movi	r2,-129
  805048:	90a4703a 	and	r18,r18,r2
  80504c:	003a9106 	br	803a94 <__alt_mem_onchip_mem+0xff7fba94>
  805050:	01002074 	movhi	r4,129
  805054:	210c0484 	addi	r4,r4,12306
  805058:	d9002b15 	stw	r4,172(sp)
  80505c:	003c0c06 	br	804090 <__alt_mem_onchip_mem+0xff7fc090>
  805060:	d9002c17 	ldw	r4,176(sp)
  805064:	d9801e04 	addi	r6,sp,120
  805068:	b80b883a 	mov	r5,r23
  80506c:	080a0d40 	call	80a0d4 <__sprint_r>
  805070:	103aab1e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  805074:	d8c02017 	ldw	r3,128(sp)
  805078:	da000404 	addi	r8,sp,16
  80507c:	003d4106 	br	804584 <__alt_mem_onchip_mem+0xff7fc584>
  805080:	d8801f17 	ldw	r2,124(sp)
  805084:	01402074 	movhi	r5,129
  805088:	01000044 	movi	r4,1
  80508c:	18c00044 	addi	r3,r3,1
  805090:	10800044 	addi	r2,r2,1
  805094:	294c0404 	addi	r5,r5,12304
  805098:	41000115 	stw	r4,4(r8)
  80509c:	41400015 	stw	r5,0(r8)
  8050a0:	d8c02015 	stw	r3,128(sp)
  8050a4:	d8801f15 	stw	r2,124(sp)
  8050a8:	010001c4 	movi	r4,7
  8050ac:	20805c16 	blt	r4,r2,805220 <___vfprintf_internal_r+0x1b08>
  8050b0:	42000204 	addi	r8,r8,8
  8050b4:	8800041e 	bne	r17,zero,8050c8 <___vfprintf_internal_r+0x19b0>
  8050b8:	d8803317 	ldw	r2,204(sp)
  8050bc:	1000021e 	bne	r2,zero,8050c8 <___vfprintf_internal_r+0x19b0>
  8050c0:	9080004c 	andi	r2,r18,1
  8050c4:	103c0926 	beq	r2,zero,8040ec <__alt_mem_onchip_mem+0xff7fc0ec>
  8050c8:	d9003717 	ldw	r4,220(sp)
  8050cc:	d8801f17 	ldw	r2,124(sp)
  8050d0:	d9403417 	ldw	r5,208(sp)
  8050d4:	20c7883a 	add	r3,r4,r3
  8050d8:	10800044 	addi	r2,r2,1
  8050dc:	41000115 	stw	r4,4(r8)
  8050e0:	41400015 	stw	r5,0(r8)
  8050e4:	d8c02015 	stw	r3,128(sp)
  8050e8:	d8801f15 	stw	r2,124(sp)
  8050ec:	010001c4 	movi	r4,7
  8050f0:	20812116 	blt	r4,r2,805578 <___vfprintf_internal_r+0x1e60>
  8050f4:	42000204 	addi	r8,r8,8
  8050f8:	0463c83a 	sub	r17,zero,r17
  8050fc:	0440730e 	bge	zero,r17,8052cc <___vfprintf_internal_r+0x1bb4>
  805100:	05800404 	movi	r22,16
  805104:	b440860e 	bge	r22,r17,805320 <___vfprintf_internal_r+0x1c08>
  805108:	01402074 	movhi	r5,129
  80510c:	294c0484 	addi	r5,r5,12306
  805110:	d9402b15 	stw	r5,172(sp)
  805114:	070001c4 	movi	fp,7
  805118:	dcc02c17 	ldw	r19,176(sp)
  80511c:	00000306 	br	80512c <___vfprintf_internal_r+0x1a14>
  805120:	42000204 	addi	r8,r8,8
  805124:	8c7ffc04 	addi	r17,r17,-16
  805128:	b440800e 	bge	r22,r17,80532c <___vfprintf_internal_r+0x1c14>
  80512c:	18c00404 	addi	r3,r3,16
  805130:	10800044 	addi	r2,r2,1
  805134:	45000015 	stw	r20,0(r8)
  805138:	45800115 	stw	r22,4(r8)
  80513c:	d8c02015 	stw	r3,128(sp)
  805140:	d8801f15 	stw	r2,124(sp)
  805144:	e0bff60e 	bge	fp,r2,805120 <__alt_mem_onchip_mem+0xff7fd120>
  805148:	d9801e04 	addi	r6,sp,120
  80514c:	b80b883a 	mov	r5,r23
  805150:	9809883a 	mov	r4,r19
  805154:	080a0d40 	call	80a0d4 <__sprint_r>
  805158:	103a711e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  80515c:	d8c02017 	ldw	r3,128(sp)
  805160:	d8801f17 	ldw	r2,124(sp)
  805164:	da000404 	addi	r8,sp,16
  805168:	003fee06 	br	805124 <__alt_mem_onchip_mem+0xff7fd124>
  80516c:	00bfffc4 	movi	r2,-1
  805170:	003a6f06 	br	803b30 <__alt_mem_onchip_mem+0xff7fbb30>
  805174:	008011c4 	movi	r2,71
  805178:	1440b816 	blt	r2,r17,80545c <___vfprintf_internal_r+0x1d44>
  80517c:	04002074 	movhi	r16,129
  805180:	840bf604 	addi	r16,r16,12248
  805184:	00c000c4 	movi	r3,3
  805188:	00bfdfc4 	movi	r2,-129
  80518c:	d8c02a15 	stw	r3,168(sp)
  805190:	90a4703a 	and	r18,r18,r2
  805194:	df002783 	ldbu	fp,158(sp)
  805198:	d8c02e15 	stw	r3,184(sp)
  80519c:	d8002915 	stw	zero,164(sp)
  8051a0:	d8003215 	stw	zero,200(sp)
  8051a4:	003b2906 	br	803e4c <__alt_mem_onchip_mem+0xff7fbe4c>
  8051a8:	d9002d17 	ldw	r4,180(sp)
  8051ac:	24c00017 	ldw	r19,0(r4)
  8051b0:	21000104 	addi	r4,r4,4
  8051b4:	d9002d15 	stw	r4,180(sp)
  8051b8:	982dd7fa 	srai	r22,r19,31
  8051bc:	b005883a 	mov	r2,r22
  8051c0:	003a9f06 	br	803c40 <__alt_mem_onchip_mem+0xff7fbc40>
  8051c4:	d9402d17 	ldw	r5,180(sp)
  8051c8:	d8c02f17 	ldw	r3,188(sp)
  8051cc:	28800017 	ldw	r2,0(r5)
  8051d0:	29400104 	addi	r5,r5,4
  8051d4:	d9402d15 	stw	r5,180(sp)
  8051d8:	10c00015 	stw	r3,0(r2)
  8051dc:	00398606 	br	8037f8 <__alt_mem_onchip_mem+0xff7fb7f8>
  8051e0:	d9402d17 	ldw	r5,180(sp)
  8051e4:	002d883a 	mov	r22,zero
  8051e8:	2cc00017 	ldw	r19,0(r5)
  8051ec:	29400104 	addi	r5,r5,4
  8051f0:	d9402d15 	stw	r5,180(sp)
  8051f4:	003c2306 	br	804284 <__alt_mem_onchip_mem+0xff7fc284>
  8051f8:	d8c02d17 	ldw	r3,180(sp)
  8051fc:	d9002917 	ldw	r4,164(sp)
  805200:	002d883a 	mov	r22,zero
  805204:	18800104 	addi	r2,r3,4
  805208:	1cc0000b 	ldhu	r19,0(r3)
  80520c:	203dc10e 	bge	r4,zero,804914 <__alt_mem_onchip_mem+0xff7fc914>
  805210:	003f7506 	br	804fe8 <__alt_mem_onchip_mem+0xff7fcfe8>
  805214:	04002074 	movhi	r16,129
  805218:	840bf404 	addi	r16,r16,12240
  80521c:	003acc06 	br	803d50 <__alt_mem_onchip_mem+0xff7fbd50>
  805220:	d9002c17 	ldw	r4,176(sp)
  805224:	d9801e04 	addi	r6,sp,120
  805228:	b80b883a 	mov	r5,r23
  80522c:	080a0d40 	call	80a0d4 <__sprint_r>
  805230:	103a3b1e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  805234:	dc402617 	ldw	r17,152(sp)
  805238:	d8c02017 	ldw	r3,128(sp)
  80523c:	da000404 	addi	r8,sp,16
  805240:	003f9c06 	br	8050b4 <__alt_mem_onchip_mem+0xff7fd0b4>
  805244:	ac400043 	ldbu	r17,1(r21)
  805248:	94800814 	ori	r18,r18,32
  80524c:	ad400044 	addi	r21,r21,1
  805250:	8c403fcc 	andi	r17,r17,255
  805254:	8c40201c 	xori	r17,r17,128
  805258:	8c7fe004 	addi	r17,r17,-128
  80525c:	00398f06 	br	80389c <__alt_mem_onchip_mem+0xff7fb89c>
  805260:	d8c02d15 	stw	r3,180(sp)
  805264:	0039883a 	mov	fp,zero
  805268:	003e3506 	br	804b40 <__alt_mem_onchip_mem+0xff7fcb40>
  80526c:	d9002c17 	ldw	r4,176(sp)
  805270:	d9801e04 	addi	r6,sp,120
  805274:	b80b883a 	mov	r5,r23
  805278:	080a0d40 	call	80a0d4 <__sprint_r>
  80527c:	103a281e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  805280:	d8c02017 	ldw	r3,128(sp)
  805284:	da000404 	addi	r8,sp,16
  805288:	003cd006 	br	8045cc <__alt_mem_onchip_mem+0xff7fc5cc>
  80528c:	8009883a 	mov	r4,r16
  805290:	da003d15 	stw	r8,244(sp)
  805294:	0809f400 	call	809f40 <strlen>
  805298:	d8802e15 	stw	r2,184(sp)
  80529c:	da003d17 	ldw	r8,244(sp)
  8052a0:	103c340e 	bge	r2,zero,804374 <__alt_mem_onchip_mem+0xff7fc374>
  8052a4:	0005883a 	mov	r2,zero
  8052a8:	003c3206 	br	804374 <__alt_mem_onchip_mem+0xff7fc374>
  8052ac:	d9002c17 	ldw	r4,176(sp)
  8052b0:	d9801e04 	addi	r6,sp,120
  8052b4:	b80b883a 	mov	r5,r23
  8052b8:	080a0d40 	call	80a0d4 <__sprint_r>
  8052bc:	103a181e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  8052c0:	d8c02017 	ldw	r3,128(sp)
  8052c4:	d8801f17 	ldw	r2,124(sp)
  8052c8:	da000404 	addi	r8,sp,16
  8052cc:	d9403317 	ldw	r5,204(sp)
  8052d0:	10800044 	addi	r2,r2,1
  8052d4:	44000015 	stw	r16,0(r8)
  8052d8:	28c7883a 	add	r3,r5,r3
  8052dc:	003b7d06 	br	8040d4 <__alt_mem_onchip_mem+0xff7fc0d4>
  8052e0:	01002074 	movhi	r4,129
  8052e4:	210c0884 	addi	r4,r4,12322
  8052e8:	d9003515 	stw	r4,212(sp)
  8052ec:	003b1406 	br	803f40 <__alt_mem_onchip_mem+0xff7fbf40>
  8052f0:	013fffc4 	movi	r4,-1
  8052f4:	003a3506 	br	803bcc <__alt_mem_onchip_mem+0xff7fbbcc>
  8052f8:	0023883a 	mov	r17,zero
  8052fc:	003d9d06 	br	804974 <__alt_mem_onchip_mem+0xff7fc974>
  805300:	d9002c17 	ldw	r4,176(sp)
  805304:	d9801e04 	addi	r6,sp,120
  805308:	b80b883a 	mov	r5,r23
  80530c:	080a0d40 	call	80a0d4 <__sprint_r>
  805310:	103a031e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  805314:	d8c02017 	ldw	r3,128(sp)
  805318:	da000404 	addi	r8,sp,16
  80531c:	003d9406 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  805320:	01002074 	movhi	r4,129
  805324:	210c0484 	addi	r4,r4,12306
  805328:	d9002b15 	stw	r4,172(sp)
  80532c:	d9002b17 	ldw	r4,172(sp)
  805330:	1c47883a 	add	r3,r3,r17
  805334:	10800044 	addi	r2,r2,1
  805338:	41000015 	stw	r4,0(r8)
  80533c:	44400115 	stw	r17,4(r8)
  805340:	d8c02015 	stw	r3,128(sp)
  805344:	d8801f15 	stw	r2,124(sp)
  805348:	010001c4 	movi	r4,7
  80534c:	20bfd716 	blt	r4,r2,8052ac <__alt_mem_onchip_mem+0xff7fd2ac>
  805350:	42000204 	addi	r8,r8,8
  805354:	003fdd06 	br	8052cc <__alt_mem_onchip_mem+0xff7fd2cc>
  805358:	d9002c17 	ldw	r4,176(sp)
  80535c:	d9801e04 	addi	r6,sp,120
  805360:	b80b883a 	mov	r5,r23
  805364:	080a0d40 	call	80a0d4 <__sprint_r>
  805368:	1039ed1e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  80536c:	d8802617 	ldw	r2,152(sp)
  805370:	d8c02017 	ldw	r3,128(sp)
  805374:	da000404 	addi	r8,sp,16
  805378:	003e1006 	br	804bbc <__alt_mem_onchip_mem+0xff7fcbbc>
  80537c:	00800044 	movi	r2,1
  805380:	10803fcc 	andi	r2,r2,255
  805384:	00c00044 	movi	r3,1
  805388:	10fa3526 	beq	r2,r3,803c60 <__alt_mem_onchip_mem+0xff7fbc60>
  80538c:	00c00084 	movi	r3,2
  805390:	10fbcb26 	beq	r2,r3,8042c0 <__alt_mem_onchip_mem+0xff7fc2c0>
  805394:	003a8f06 	br	803dd4 <__alt_mem_onchip_mem+0xff7fbdd4>
  805398:	01002074 	movhi	r4,129
  80539c:	210c0884 	addi	r4,r4,12322
  8053a0:	d9003515 	stw	r4,212(sp)
  8053a4:	003b7606 	br	804180 <__alt_mem_onchip_mem+0xff7fc180>
  8053a8:	d8802917 	ldw	r2,164(sp)
  8053ac:	00c00184 	movi	r3,6
  8053b0:	1880012e 	bgeu	r3,r2,8053b8 <___vfprintf_internal_r+0x1ca0>
  8053b4:	1805883a 	mov	r2,r3
  8053b8:	d8802e15 	stw	r2,184(sp)
  8053bc:	1000ef16 	blt	r2,zero,80577c <___vfprintf_internal_r+0x2064>
  8053c0:	04002074 	movhi	r16,129
  8053c4:	d8802a15 	stw	r2,168(sp)
  8053c8:	dcc02d15 	stw	r19,180(sp)
  8053cc:	d8002915 	stw	zero,164(sp)
  8053d0:	d8003215 	stw	zero,200(sp)
  8053d4:	840c0204 	addi	r16,r16,12296
  8053d8:	0039883a 	mov	fp,zero
  8053dc:	003aa206 	br	803e68 <__alt_mem_onchip_mem+0xff7fbe68>
  8053e0:	0021883a 	mov	r16,zero
  8053e4:	003e0706 	br	804c04 <__alt_mem_onchip_mem+0xff7fcc04>
  8053e8:	d9002c17 	ldw	r4,176(sp)
  8053ec:	d9801e04 	addi	r6,sp,120
  8053f0:	b80b883a 	mov	r5,r23
  8053f4:	080a0d40 	call	80a0d4 <__sprint_r>
  8053f8:	1039c91e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  8053fc:	d8802617 	ldw	r2,152(sp)
  805400:	d9403317 	ldw	r5,204(sp)
  805404:	d8c02017 	ldw	r3,128(sp)
  805408:	da000404 	addi	r8,sp,16
  80540c:	2885c83a 	sub	r2,r5,r2
  805410:	003dfb06 	br	804c00 <__alt_mem_onchip_mem+0xff7fcc00>
  805414:	9080004c 	andi	r2,r18,1
  805418:	103e8f1e 	bne	r2,zero,804e58 <__alt_mem_onchip_mem+0xff7fce58>
  80541c:	d8802117 	ldw	r2,132(sp)
  805420:	003e9e06 	br	804e9c <__alt_mem_onchip_mem+0xff7fce9c>
  805424:	1025883a 	mov	r18,r2
  805428:	0039883a 	mov	fp,zero
  80542c:	00800084 	movi	r2,2
  805430:	003fd306 	br	805380 <__alt_mem_onchip_mem+0xff7fd380>
  805434:	07000b44 	movi	fp,45
  805438:	df002785 	stb	fp,158(sp)
  80543c:	003a4006 	br	803d40 <__alt_mem_onchip_mem+0xff7fbd40>
  805440:	00c00b44 	movi	r3,45
  805444:	d8c02785 	stb	r3,158(sp)
  805448:	d8802a15 	stw	r2,168(sp)
  80544c:	dc802b17 	ldw	r18,172(sp)
  805450:	d8002915 	stw	zero,164(sp)
  805454:	07000b44 	movi	fp,45
  805458:	003a8006 	br	803e5c <__alt_mem_onchip_mem+0xff7fbe5c>
  80545c:	04002074 	movhi	r16,129
  805460:	840bf704 	addi	r16,r16,12252
  805464:	003f4706 	br	805184 <__alt_mem_onchip_mem+0xff7fd184>
  805468:	d8c02d17 	ldw	r3,180(sp)
  80546c:	d9002f17 	ldw	r4,188(sp)
  805470:	18800017 	ldw	r2,0(r3)
  805474:	18c00104 	addi	r3,r3,4
  805478:	d8c02d15 	stw	r3,180(sp)
  80547c:	11000015 	stw	r4,0(r2)
  805480:	0038dd06 	br	8037f8 <__alt_mem_onchip_mem+0xff7fb7f8>
  805484:	dd802617 	ldw	r22,152(sp)
  805488:	00bfff44 	movi	r2,-3
  80548c:	b0801c16 	blt	r22,r2,805500 <___vfprintf_internal_r+0x1de8>
  805490:	d9402917 	ldw	r5,164(sp)
  805494:	2d801a16 	blt	r5,r22,805500 <___vfprintf_internal_r+0x1de8>
  805498:	dd803215 	stw	r22,200(sp)
  80549c:	003e8906 	br	804ec4 <__alt_mem_onchip_mem+0xff7fcec4>
  8054a0:	01002074 	movhi	r4,129
  8054a4:	210c0484 	addi	r4,r4,12306
  8054a8:	d9002b15 	stw	r4,172(sp)
  8054ac:	003c9106 	br	8046f4 <__alt_mem_onchip_mem+0xff7fc6f4>
  8054b0:	e005883a 	mov	r2,fp
  8054b4:	003e7906 	br	804e9c <__alt_mem_onchip_mem+0xff7fce9c>
  8054b8:	d9402917 	ldw	r5,164(sp)
  8054bc:	df002783 	ldbu	fp,158(sp)
  8054c0:	dcc02d15 	stw	r19,180(sp)
  8054c4:	d9402a15 	stw	r5,168(sp)
  8054c8:	d9402e15 	stw	r5,184(sp)
  8054cc:	d8002915 	stw	zero,164(sp)
  8054d0:	d8003215 	stw	zero,200(sp)
  8054d4:	003a5d06 	br	803e4c <__alt_mem_onchip_mem+0xff7fbe4c>
  8054d8:	9080004c 	andi	r2,r18,1
  8054dc:	0039883a 	mov	fp,zero
  8054e0:	10000426 	beq	r2,zero,8054f4 <___vfprintf_internal_r+0x1ddc>
  8054e4:	00800c04 	movi	r2,48
  8054e8:	dc001dc4 	addi	r16,sp,119
  8054ec:	d8801dc5 	stb	r2,119(sp)
  8054f0:	003b8006 	br	8042f4 <__alt_mem_onchip_mem+0xff7fc2f4>
  8054f4:	d8002e15 	stw	zero,184(sp)
  8054f8:	dc001e04 	addi	r16,sp,120
  8054fc:	003a4d06 	br	803e34 <__alt_mem_onchip_mem+0xff7fbe34>
  805500:	8c7fff84 	addi	r17,r17,-2
  805504:	b5bfffc4 	addi	r22,r22,-1
  805508:	dd802615 	stw	r22,152(sp)
  80550c:	dc4022c5 	stb	r17,139(sp)
  805510:	b000bf16 	blt	r22,zero,805810 <___vfprintf_internal_r+0x20f8>
  805514:	00800ac4 	movi	r2,43
  805518:	d8802305 	stb	r2,140(sp)
  80551c:	00800244 	movi	r2,9
  805520:	15807016 	blt	r2,r22,8056e4 <___vfprintf_internal_r+0x1fcc>
  805524:	00800c04 	movi	r2,48
  805528:	b5800c04 	addi	r22,r22,48
  80552c:	d8802345 	stb	r2,141(sp)
  805530:	dd802385 	stb	r22,142(sp)
  805534:	d88023c4 	addi	r2,sp,143
  805538:	df0022c4 	addi	fp,sp,139
  80553c:	d8c03317 	ldw	r3,204(sp)
  805540:	1739c83a 	sub	fp,r2,fp
  805544:	d9003317 	ldw	r4,204(sp)
  805548:	e0c7883a 	add	r3,fp,r3
  80554c:	df003a15 	stw	fp,232(sp)
  805550:	d8c02e15 	stw	r3,184(sp)
  805554:	00800044 	movi	r2,1
  805558:	1100b30e 	bge	r2,r4,805828 <___vfprintf_internal_r+0x2110>
  80555c:	d8c02e17 	ldw	r3,184(sp)
  805560:	18c00044 	addi	r3,r3,1
  805564:	d8c02e15 	stw	r3,184(sp)
  805568:	1805883a 	mov	r2,r3
  80556c:	1800ac16 	blt	r3,zero,805820 <___vfprintf_internal_r+0x2108>
  805570:	d8003215 	stw	zero,200(sp)
  805574:	003e5d06 	br	804eec <__alt_mem_onchip_mem+0xff7fceec>
  805578:	d9002c17 	ldw	r4,176(sp)
  80557c:	d9801e04 	addi	r6,sp,120
  805580:	b80b883a 	mov	r5,r23
  805584:	080a0d40 	call	80a0d4 <__sprint_r>
  805588:	1039651e 	bne	r2,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  80558c:	dc402617 	ldw	r17,152(sp)
  805590:	d8c02017 	ldw	r3,128(sp)
  805594:	d8801f17 	ldw	r2,124(sp)
  805598:	da000404 	addi	r8,sp,16
  80559c:	003ed606 	br	8050f8 <__alt_mem_onchip_mem+0xff7fd0f8>
  8055a0:	582b883a 	mov	r21,r11
  8055a4:	d8002915 	stw	zero,164(sp)
  8055a8:	0038bd06 	br	8038a0 <__alt_mem_onchip_mem+0xff7fb8a0>
  8055ac:	d8802917 	ldw	r2,164(sp)
  8055b0:	103e071e 	bne	r2,zero,804dd0 <__alt_mem_onchip_mem+0xff7fcdd0>
  8055b4:	dc002915 	stw	r16,164(sp)
  8055b8:	003e0506 	br	804dd0 <__alt_mem_onchip_mem+0xff7fcdd0>
  8055bc:	d9002917 	ldw	r4,164(sp)
  8055c0:	20c00044 	addi	r3,r4,1
  8055c4:	003e0f06 	br	804e04 <__alt_mem_onchip_mem+0xff7fce04>
  8055c8:	01400184 	movi	r5,6
  8055cc:	d9402915 	stw	r5,164(sp)
  8055d0:	003dff06 	br	804dd0 <__alt_mem_onchip_mem+0xff7fcdd0>
  8055d4:	d8802104 	addi	r2,sp,132
  8055d8:	d8800315 	stw	r2,12(sp)
  8055dc:	d8802504 	addi	r2,sp,148
  8055e0:	d8800215 	stw	r2,8(sp)
  8055e4:	d8802604 	addi	r2,sp,152
  8055e8:	d8800115 	stw	r2,4(sp)
  8055ec:	d8802917 	ldw	r2,164(sp)
  8055f0:	d9403617 	ldw	r5,216(sp)
  8055f4:	d9002c17 	ldw	r4,176(sp)
  8055f8:	d8800015 	stw	r2,0(sp)
  8055fc:	01c000c4 	movi	r7,3
  805600:	980d883a 	mov	r6,r19
  805604:	da003d15 	stw	r8,244(sp)
  805608:	0805f480 	call	805f48 <_dtoa_r>
  80560c:	d8c02917 	ldw	r3,164(sp)
  805610:	da003d17 	ldw	r8,244(sp)
  805614:	1021883a 	mov	r16,r2
  805618:	10f9883a 	add	fp,r2,r3
  80561c:	81000007 	ldb	r4,0(r16)
  805620:	00800c04 	movi	r2,48
  805624:	20805e26 	beq	r4,r2,8057a0 <___vfprintf_internal_r+0x2088>
  805628:	d8c02617 	ldw	r3,152(sp)
  80562c:	e0f9883a 	add	fp,fp,r3
  805630:	003e0a06 	br	804e5c <__alt_mem_onchip_mem+0xff7fce5c>
  805634:	00c00b44 	movi	r3,45
  805638:	24e0003c 	xorhi	r19,r4,32768
  80563c:	d8c02a05 	stb	r3,168(sp)
  805640:	003de906 	br	804de8 <__alt_mem_onchip_mem+0xff7fcde8>
  805644:	d8c03217 	ldw	r3,200(sp)
  805648:	00c07a0e 	bge	zero,r3,805834 <___vfprintf_internal_r+0x211c>
  80564c:	00800044 	movi	r2,1
  805650:	d9003317 	ldw	r4,204(sp)
  805654:	1105883a 	add	r2,r2,r4
  805658:	d8802e15 	stw	r2,184(sp)
  80565c:	10004e16 	blt	r2,zero,805798 <___vfprintf_internal_r+0x2080>
  805660:	044019c4 	movi	r17,103
  805664:	003e2106 	br	804eec <__alt_mem_onchip_mem+0xff7fceec>
  805668:	d9002917 	ldw	r4,164(sp)
  80566c:	d8802104 	addi	r2,sp,132
  805670:	d8800315 	stw	r2,12(sp)
  805674:	d9000015 	stw	r4,0(sp)
  805678:	d8802504 	addi	r2,sp,148
  80567c:	d9403617 	ldw	r5,216(sp)
  805680:	d9002c17 	ldw	r4,176(sp)
  805684:	d8800215 	stw	r2,8(sp)
  805688:	d8802604 	addi	r2,sp,152
  80568c:	d8800115 	stw	r2,4(sp)
  805690:	01c000c4 	movi	r7,3
  805694:	980d883a 	mov	r6,r19
  805698:	da003d15 	stw	r8,244(sp)
  80569c:	0805f480 	call	805f48 <_dtoa_r>
  8056a0:	d8c02917 	ldw	r3,164(sp)
  8056a4:	da003d17 	ldw	r8,244(sp)
  8056a8:	1021883a 	mov	r16,r2
  8056ac:	00801184 	movi	r2,70
  8056b0:	80f9883a 	add	fp,r16,r3
  8056b4:	88bfd926 	beq	r17,r2,80561c <__alt_mem_onchip_mem+0xff7fd61c>
  8056b8:	003de806 	br	804e5c <__alt_mem_onchip_mem+0xff7fce5c>
  8056bc:	d9002917 	ldw	r4,164(sp)
  8056c0:	00c04d0e 	bge	zero,r3,8057f8 <___vfprintf_internal_r+0x20e0>
  8056c4:	2000441e 	bne	r4,zero,8057d8 <___vfprintf_internal_r+0x20c0>
  8056c8:	9480004c 	andi	r18,r18,1
  8056cc:	9000421e 	bne	r18,zero,8057d8 <___vfprintf_internal_r+0x20c0>
  8056d0:	1805883a 	mov	r2,r3
  8056d4:	18007016 	blt	r3,zero,805898 <___vfprintf_internal_r+0x2180>
  8056d8:	d8c03217 	ldw	r3,200(sp)
  8056dc:	d8c02e15 	stw	r3,184(sp)
  8056e0:	003e0206 	br	804eec <__alt_mem_onchip_mem+0xff7fceec>
  8056e4:	df0022c4 	addi	fp,sp,139
  8056e8:	dc002915 	stw	r16,164(sp)
  8056ec:	4027883a 	mov	r19,r8
  8056f0:	e021883a 	mov	r16,fp
  8056f4:	b009883a 	mov	r4,r22
  8056f8:	01400284 	movi	r5,10
  8056fc:	080145c0 	call	80145c <__modsi3>
  805700:	10800c04 	addi	r2,r2,48
  805704:	843fffc4 	addi	r16,r16,-1
  805708:	b009883a 	mov	r4,r22
  80570c:	01400284 	movi	r5,10
  805710:	80800005 	stb	r2,0(r16)
  805714:	08013d80 	call	8013d8 <__divsi3>
  805718:	102d883a 	mov	r22,r2
  80571c:	00800244 	movi	r2,9
  805720:	15bff416 	blt	r2,r22,8056f4 <__alt_mem_onchip_mem+0xff7fd6f4>
  805724:	9811883a 	mov	r8,r19
  805728:	b0800c04 	addi	r2,r22,48
  80572c:	8027883a 	mov	r19,r16
  805730:	997fffc4 	addi	r5,r19,-1
  805734:	98bfffc5 	stb	r2,-1(r19)
  805738:	dc002917 	ldw	r16,164(sp)
  80573c:	2f006a2e 	bgeu	r5,fp,8058e8 <___vfprintf_internal_r+0x21d0>
  805740:	d9c02384 	addi	r7,sp,142
  805744:	3ccfc83a 	sub	r7,r7,r19
  805748:	d9002344 	addi	r4,sp,141
  80574c:	e1cf883a 	add	r7,fp,r7
  805750:	00000106 	br	805758 <___vfprintf_internal_r+0x2040>
  805754:	28800003 	ldbu	r2,0(r5)
  805758:	20800005 	stb	r2,0(r4)
  80575c:	21000044 	addi	r4,r4,1
  805760:	29400044 	addi	r5,r5,1
  805764:	393ffb1e 	bne	r7,r4,805754 <__alt_mem_onchip_mem+0xff7fd754>
  805768:	d8802304 	addi	r2,sp,140
  80576c:	14c5c83a 	sub	r2,r2,r19
  805770:	d8c02344 	addi	r3,sp,141
  805774:	1885883a 	add	r2,r3,r2
  805778:	003f7006 	br	80553c <__alt_mem_onchip_mem+0xff7fd53c>
  80577c:	0005883a 	mov	r2,zero
  805780:	003f0f06 	br	8053c0 <__alt_mem_onchip_mem+0xff7fd3c0>
  805784:	d8c03217 	ldw	r3,200(sp)
  805788:	18c00044 	addi	r3,r3,1
  80578c:	d8c02e15 	stw	r3,184(sp)
  805790:	1805883a 	mov	r2,r3
  805794:	183fb20e 	bge	r3,zero,805660 <__alt_mem_onchip_mem+0xff7fd660>
  805798:	0005883a 	mov	r2,zero
  80579c:	003fb006 	br	805660 <__alt_mem_onchip_mem+0xff7fd660>
  8057a0:	d9003617 	ldw	r4,216(sp)
  8057a4:	000d883a 	mov	r6,zero
  8057a8:	000f883a 	mov	r7,zero
  8057ac:	980b883a 	mov	r5,r19
  8057b0:	d8c03c15 	stw	r3,240(sp)
  8057b4:	da003d15 	stw	r8,244(sp)
  8057b8:	080d7180 	call	80d718 <__eqdf2>
  8057bc:	d8c03c17 	ldw	r3,240(sp)
  8057c0:	da003d17 	ldw	r8,244(sp)
  8057c4:	103f9826 	beq	r2,zero,805628 <__alt_mem_onchip_mem+0xff7fd628>
  8057c8:	00800044 	movi	r2,1
  8057cc:	10c7c83a 	sub	r3,r2,r3
  8057d0:	d8c02615 	stw	r3,152(sp)
  8057d4:	003f9506 	br	80562c <__alt_mem_onchip_mem+0xff7fd62c>
  8057d8:	d9002917 	ldw	r4,164(sp)
  8057dc:	d8c03217 	ldw	r3,200(sp)
  8057e0:	20800044 	addi	r2,r4,1
  8057e4:	1885883a 	add	r2,r3,r2
  8057e8:	d8802e15 	stw	r2,184(sp)
  8057ec:	103dbf0e 	bge	r2,zero,804eec <__alt_mem_onchip_mem+0xff7fceec>
  8057f0:	0005883a 	mov	r2,zero
  8057f4:	003dbd06 	br	804eec <__alt_mem_onchip_mem+0xff7fceec>
  8057f8:	2000211e 	bne	r4,zero,805880 <___vfprintf_internal_r+0x2168>
  8057fc:	9480004c 	andi	r18,r18,1
  805800:	90001f1e 	bne	r18,zero,805880 <___vfprintf_internal_r+0x2168>
  805804:	00800044 	movi	r2,1
  805808:	d8802e15 	stw	r2,184(sp)
  80580c:	003db706 	br	804eec <__alt_mem_onchip_mem+0xff7fceec>
  805810:	00800b44 	movi	r2,45
  805814:	05adc83a 	sub	r22,zero,r22
  805818:	d8802305 	stb	r2,140(sp)
  80581c:	003f3f06 	br	80551c <__alt_mem_onchip_mem+0xff7fd51c>
  805820:	0005883a 	mov	r2,zero
  805824:	003f5206 	br	805570 <__alt_mem_onchip_mem+0xff7fd570>
  805828:	90a4703a 	and	r18,r18,r2
  80582c:	903f4e26 	beq	r18,zero,805568 <__alt_mem_onchip_mem+0xff7fd568>
  805830:	003f4a06 	br	80555c <__alt_mem_onchip_mem+0xff7fd55c>
  805834:	00800084 	movi	r2,2
  805838:	10c5c83a 	sub	r2,r2,r3
  80583c:	003f8406 	br	805650 <__alt_mem_onchip_mem+0xff7fd650>
  805840:	d8802d17 	ldw	r2,180(sp)
  805844:	d9002d17 	ldw	r4,180(sp)
  805848:	ac400043 	ldbu	r17,1(r21)
  80584c:	10800017 	ldw	r2,0(r2)
  805850:	582b883a 	mov	r21,r11
  805854:	d8802915 	stw	r2,164(sp)
  805858:	20800104 	addi	r2,r4,4
  80585c:	d9002917 	ldw	r4,164(sp)
  805860:	d8802d15 	stw	r2,180(sp)
  805864:	203e7a0e 	bge	r4,zero,805250 <__alt_mem_onchip_mem+0xff7fd250>
  805868:	8c403fcc 	andi	r17,r17,255
  80586c:	00bfffc4 	movi	r2,-1
  805870:	8c40201c 	xori	r17,r17,128
  805874:	d8802915 	stw	r2,164(sp)
  805878:	8c7fe004 	addi	r17,r17,-128
  80587c:	00380706 	br	80389c <__alt_mem_onchip_mem+0xff7fb89c>
  805880:	d8c02917 	ldw	r3,164(sp)
  805884:	18c00084 	addi	r3,r3,2
  805888:	d8c02e15 	stw	r3,184(sp)
  80588c:	1805883a 	mov	r2,r3
  805890:	183d960e 	bge	r3,zero,804eec <__alt_mem_onchip_mem+0xff7fceec>
  805894:	003fd606 	br	8057f0 <__alt_mem_onchip_mem+0xff7fd7f0>
  805898:	0005883a 	mov	r2,zero
  80589c:	003f8e06 	br	8056d8 <__alt_mem_onchip_mem+0xff7fd6d8>
  8058a0:	9080004c 	andi	r2,r18,1
  8058a4:	103f811e 	bne	r2,zero,8056ac <__alt_mem_onchip_mem+0xff7fd6ac>
  8058a8:	d8802117 	ldw	r2,132(sp)
  8058ac:	1405c83a 	sub	r2,r2,r16
  8058b0:	d8803315 	stw	r2,204(sp)
  8058b4:	b47ef326 	beq	r22,r17,805484 <__alt_mem_onchip_mem+0xff7fd484>
  8058b8:	dd802617 	ldw	r22,152(sp)
  8058bc:	003f1106 	br	805504 <__alt_mem_onchip_mem+0xff7fd504>
  8058c0:	d9c02785 	stb	r7,158(sp)
  8058c4:	00390406 	br	803cd8 <__alt_mem_onchip_mem+0xff7fbcd8>
  8058c8:	d9c02785 	stb	r7,158(sp)
  8058cc:	0038d306 	br	803c1c <__alt_mem_onchip_mem+0xff7fbc1c>
  8058d0:	d9c02785 	stb	r7,158(sp)
  8058d4:	003a6106 	br	80425c <__alt_mem_onchip_mem+0xff7fc25c>
  8058d8:	d9c02785 	stb	r7,158(sp)
  8058dc:	003af806 	br	8044c0 <__alt_mem_onchip_mem+0xff7fc4c0>
  8058e0:	0005883a 	mov	r2,zero
  8058e4:	003d7e06 	br	804ee0 <__alt_mem_onchip_mem+0xff7fcee0>
  8058e8:	d8802344 	addi	r2,sp,141
  8058ec:	003f1306 	br	80553c <__alt_mem_onchip_mem+0xff7fd53c>
  8058f0:	d9c02785 	stb	r7,158(sp)
  8058f4:	00392306 	br	803d84 <__alt_mem_onchip_mem+0xff7fbd84>
  8058f8:	d9c02785 	stb	r7,158(sp)
  8058fc:	003aa906 	br	8043a4 <__alt_mem_onchip_mem+0xff7fc3a4>
  805900:	d9c02785 	stb	r7,158(sp)
  805904:	003a3d06 	br	8041fc <__alt_mem_onchip_mem+0xff7fc1fc>
  805908:	d9c02785 	stb	r7,158(sp)
  80590c:	003aca06 	br	804438 <__alt_mem_onchip_mem+0xff7fc438>

00805910 <__vfprintf_internal>:
  805910:	00802074 	movhi	r2,129
  805914:	10948104 	addi	r2,r2,20996
  805918:	300f883a 	mov	r7,r6
  80591c:	280d883a 	mov	r6,r5
  805920:	200b883a 	mov	r5,r4
  805924:	11000017 	ldw	r4,0(r2)
  805928:	08037181 	jmpi	803718 <___vfprintf_internal_r>

0080592c <__sbprintf>:
  80592c:	2880030b 	ldhu	r2,12(r5)
  805930:	2ac01917 	ldw	r11,100(r5)
  805934:	2a80038b 	ldhu	r10,14(r5)
  805938:	2a400717 	ldw	r9,28(r5)
  80593c:	2a000917 	ldw	r8,36(r5)
  805940:	defee204 	addi	sp,sp,-1144
  805944:	00c10004 	movi	r3,1024
  805948:	dc011a15 	stw	r16,1128(sp)
  80594c:	10bfff4c 	andi	r2,r2,65533
  805950:	2821883a 	mov	r16,r5
  805954:	d8cb883a 	add	r5,sp,r3
  805958:	dc811c15 	stw	r18,1136(sp)
  80595c:	dc411b15 	stw	r17,1132(sp)
  805960:	dfc11d15 	stw	ra,1140(sp)
  805964:	2025883a 	mov	r18,r4
  805968:	d881030d 	sth	r2,1036(sp)
  80596c:	dac11915 	stw	r11,1124(sp)
  805970:	da81038d 	sth	r10,1038(sp)
  805974:	da410715 	stw	r9,1052(sp)
  805978:	da010915 	stw	r8,1060(sp)
  80597c:	dec10015 	stw	sp,1024(sp)
  805980:	dec10415 	stw	sp,1040(sp)
  805984:	d8c10215 	stw	r3,1032(sp)
  805988:	d8c10515 	stw	r3,1044(sp)
  80598c:	d8010615 	stw	zero,1048(sp)
  805990:	08037180 	call	803718 <___vfprintf_internal_r>
  805994:	1023883a 	mov	r17,r2
  805998:	10000416 	blt	r2,zero,8059ac <__sbprintf+0x80>
  80599c:	d9410004 	addi	r5,sp,1024
  8059a0:	9009883a 	mov	r4,r18
  8059a4:	08078f00 	call	8078f0 <_fflush_r>
  8059a8:	10000d1e 	bne	r2,zero,8059e0 <__sbprintf+0xb4>
  8059ac:	d881030b 	ldhu	r2,1036(sp)
  8059b0:	1080100c 	andi	r2,r2,64
  8059b4:	10000326 	beq	r2,zero,8059c4 <__sbprintf+0x98>
  8059b8:	8080030b 	ldhu	r2,12(r16)
  8059bc:	10801014 	ori	r2,r2,64
  8059c0:	8080030d 	sth	r2,12(r16)
  8059c4:	8805883a 	mov	r2,r17
  8059c8:	dfc11d17 	ldw	ra,1140(sp)
  8059cc:	dc811c17 	ldw	r18,1136(sp)
  8059d0:	dc411b17 	ldw	r17,1132(sp)
  8059d4:	dc011a17 	ldw	r16,1128(sp)
  8059d8:	dec11e04 	addi	sp,sp,1144
  8059dc:	f800283a 	ret
  8059e0:	047fffc4 	movi	r17,-1
  8059e4:	003ff106 	br	8059ac <__alt_mem_onchip_mem+0xff7fd9ac>

008059e8 <__swbuf_r>:
  8059e8:	defffb04 	addi	sp,sp,-20
  8059ec:	dcc00315 	stw	r19,12(sp)
  8059f0:	dc800215 	stw	r18,8(sp)
  8059f4:	dc000015 	stw	r16,0(sp)
  8059f8:	dfc00415 	stw	ra,16(sp)
  8059fc:	dc400115 	stw	r17,4(sp)
  805a00:	2025883a 	mov	r18,r4
  805a04:	2827883a 	mov	r19,r5
  805a08:	3021883a 	mov	r16,r6
  805a0c:	20000226 	beq	r4,zero,805a18 <__swbuf_r+0x30>
  805a10:	20800e17 	ldw	r2,56(r4)
  805a14:	10004226 	beq	r2,zero,805b20 <__swbuf_r+0x138>
  805a18:	80800617 	ldw	r2,24(r16)
  805a1c:	8100030b 	ldhu	r4,12(r16)
  805a20:	80800215 	stw	r2,8(r16)
  805a24:	2080020c 	andi	r2,r4,8
  805a28:	10003626 	beq	r2,zero,805b04 <__swbuf_r+0x11c>
  805a2c:	80c00417 	ldw	r3,16(r16)
  805a30:	18003426 	beq	r3,zero,805b04 <__swbuf_r+0x11c>
  805a34:	2088000c 	andi	r2,r4,8192
  805a38:	9c403fcc 	andi	r17,r19,255
  805a3c:	10001a26 	beq	r2,zero,805aa8 <__swbuf_r+0xc0>
  805a40:	80800017 	ldw	r2,0(r16)
  805a44:	81000517 	ldw	r4,20(r16)
  805a48:	10c7c83a 	sub	r3,r2,r3
  805a4c:	1900200e 	bge	r3,r4,805ad0 <__swbuf_r+0xe8>
  805a50:	18c00044 	addi	r3,r3,1
  805a54:	81000217 	ldw	r4,8(r16)
  805a58:	11400044 	addi	r5,r2,1
  805a5c:	81400015 	stw	r5,0(r16)
  805a60:	213fffc4 	addi	r4,r4,-1
  805a64:	81000215 	stw	r4,8(r16)
  805a68:	14c00005 	stb	r19,0(r2)
  805a6c:	80800517 	ldw	r2,20(r16)
  805a70:	10c01e26 	beq	r2,r3,805aec <__swbuf_r+0x104>
  805a74:	8080030b 	ldhu	r2,12(r16)
  805a78:	1080004c 	andi	r2,r2,1
  805a7c:	10000226 	beq	r2,zero,805a88 <__swbuf_r+0xa0>
  805a80:	00800284 	movi	r2,10
  805a84:	88801926 	beq	r17,r2,805aec <__swbuf_r+0x104>
  805a88:	8805883a 	mov	r2,r17
  805a8c:	dfc00417 	ldw	ra,16(sp)
  805a90:	dcc00317 	ldw	r19,12(sp)
  805a94:	dc800217 	ldw	r18,8(sp)
  805a98:	dc400117 	ldw	r17,4(sp)
  805a9c:	dc000017 	ldw	r16,0(sp)
  805aa0:	dec00504 	addi	sp,sp,20
  805aa4:	f800283a 	ret
  805aa8:	81401917 	ldw	r5,100(r16)
  805aac:	00b7ffc4 	movi	r2,-8193
  805ab0:	21080014 	ori	r4,r4,8192
  805ab4:	2884703a 	and	r2,r5,r2
  805ab8:	80801915 	stw	r2,100(r16)
  805abc:	80800017 	ldw	r2,0(r16)
  805ac0:	8100030d 	sth	r4,12(r16)
  805ac4:	81000517 	ldw	r4,20(r16)
  805ac8:	10c7c83a 	sub	r3,r2,r3
  805acc:	193fe016 	blt	r3,r4,805a50 <__alt_mem_onchip_mem+0xff7fda50>
  805ad0:	800b883a 	mov	r5,r16
  805ad4:	9009883a 	mov	r4,r18
  805ad8:	08078f00 	call	8078f0 <_fflush_r>
  805adc:	1000071e 	bne	r2,zero,805afc <__swbuf_r+0x114>
  805ae0:	80800017 	ldw	r2,0(r16)
  805ae4:	00c00044 	movi	r3,1
  805ae8:	003fda06 	br	805a54 <__alt_mem_onchip_mem+0xff7fda54>
  805aec:	800b883a 	mov	r5,r16
  805af0:	9009883a 	mov	r4,r18
  805af4:	08078f00 	call	8078f0 <_fflush_r>
  805af8:	103fe326 	beq	r2,zero,805a88 <__alt_mem_onchip_mem+0xff7fda88>
  805afc:	00bfffc4 	movi	r2,-1
  805b00:	003fe206 	br	805a8c <__alt_mem_onchip_mem+0xff7fda8c>
  805b04:	800b883a 	mov	r5,r16
  805b08:	9009883a 	mov	r4,r18
  805b0c:	0805ba00 	call	805ba0 <__swsetup_r>
  805b10:	103ffa1e 	bne	r2,zero,805afc <__alt_mem_onchip_mem+0xff7fdafc>
  805b14:	8100030b 	ldhu	r4,12(r16)
  805b18:	80c00417 	ldw	r3,16(r16)
  805b1c:	003fc506 	br	805a34 <__alt_mem_onchip_mem+0xff7fda34>
  805b20:	08019ec0 	call	8019ec <__sinit>
  805b24:	003fbc06 	br	805a18 <__alt_mem_onchip_mem+0xff7fda18>

00805b28 <__swbuf>:
  805b28:	00802074 	movhi	r2,129
  805b2c:	10948104 	addi	r2,r2,20996
  805b30:	280d883a 	mov	r6,r5
  805b34:	200b883a 	mov	r5,r4
  805b38:	11000017 	ldw	r4,0(r2)
  805b3c:	08059e81 	jmpi	8059e8 <__swbuf_r>

00805b40 <_write_r>:
  805b40:	defffd04 	addi	sp,sp,-12
  805b44:	2805883a 	mov	r2,r5
  805b48:	dc000015 	stw	r16,0(sp)
  805b4c:	04002074 	movhi	r16,129
  805b50:	dc400115 	stw	r17,4(sp)
  805b54:	300b883a 	mov	r5,r6
  805b58:	841be104 	addi	r16,r16,28548
  805b5c:	2023883a 	mov	r17,r4
  805b60:	380d883a 	mov	r6,r7
  805b64:	1009883a 	mov	r4,r2
  805b68:	dfc00215 	stw	ra,8(sp)
  805b6c:	80000015 	stw	zero,0(r16)
  805b70:	080fadc0 	call	80fadc <write>
  805b74:	00ffffc4 	movi	r3,-1
  805b78:	10c00526 	beq	r2,r3,805b90 <_write_r+0x50>
  805b7c:	dfc00217 	ldw	ra,8(sp)
  805b80:	dc400117 	ldw	r17,4(sp)
  805b84:	dc000017 	ldw	r16,0(sp)
  805b88:	dec00304 	addi	sp,sp,12
  805b8c:	f800283a 	ret
  805b90:	80c00017 	ldw	r3,0(r16)
  805b94:	183ff926 	beq	r3,zero,805b7c <__alt_mem_onchip_mem+0xff7fdb7c>
  805b98:	88c00015 	stw	r3,0(r17)
  805b9c:	003ff706 	br	805b7c <__alt_mem_onchip_mem+0xff7fdb7c>

00805ba0 <__swsetup_r>:
  805ba0:	00802074 	movhi	r2,129
  805ba4:	defffd04 	addi	sp,sp,-12
  805ba8:	10948104 	addi	r2,r2,20996
  805bac:	dc400115 	stw	r17,4(sp)
  805bb0:	2023883a 	mov	r17,r4
  805bb4:	11000017 	ldw	r4,0(r2)
  805bb8:	dc000015 	stw	r16,0(sp)
  805bbc:	dfc00215 	stw	ra,8(sp)
  805bc0:	2821883a 	mov	r16,r5
  805bc4:	20000226 	beq	r4,zero,805bd0 <__swsetup_r+0x30>
  805bc8:	20800e17 	ldw	r2,56(r4)
  805bcc:	10003126 	beq	r2,zero,805c94 <__swsetup_r+0xf4>
  805bd0:	8080030b 	ldhu	r2,12(r16)
  805bd4:	10c0020c 	andi	r3,r2,8
  805bd8:	1009883a 	mov	r4,r2
  805bdc:	18000f26 	beq	r3,zero,805c1c <__swsetup_r+0x7c>
  805be0:	80c00417 	ldw	r3,16(r16)
  805be4:	18001526 	beq	r3,zero,805c3c <__swsetup_r+0x9c>
  805be8:	1100004c 	andi	r4,r2,1
  805bec:	20001c1e 	bne	r4,zero,805c60 <__swsetup_r+0xc0>
  805bf0:	1080008c 	andi	r2,r2,2
  805bf4:	1000291e 	bne	r2,zero,805c9c <__swsetup_r+0xfc>
  805bf8:	80800517 	ldw	r2,20(r16)
  805bfc:	80800215 	stw	r2,8(r16)
  805c00:	18001c26 	beq	r3,zero,805c74 <__swsetup_r+0xd4>
  805c04:	0005883a 	mov	r2,zero
  805c08:	dfc00217 	ldw	ra,8(sp)
  805c0c:	dc400117 	ldw	r17,4(sp)
  805c10:	dc000017 	ldw	r16,0(sp)
  805c14:	dec00304 	addi	sp,sp,12
  805c18:	f800283a 	ret
  805c1c:	2080040c 	andi	r2,r4,16
  805c20:	10002e26 	beq	r2,zero,805cdc <__swsetup_r+0x13c>
  805c24:	2080010c 	andi	r2,r4,4
  805c28:	10001e1e 	bne	r2,zero,805ca4 <__swsetup_r+0x104>
  805c2c:	80c00417 	ldw	r3,16(r16)
  805c30:	20800214 	ori	r2,r4,8
  805c34:	8080030d 	sth	r2,12(r16)
  805c38:	183feb1e 	bne	r3,zero,805be8 <__alt_mem_onchip_mem+0xff7fdbe8>
  805c3c:	1100a00c 	andi	r4,r2,640
  805c40:	01408004 	movi	r5,512
  805c44:	217fe826 	beq	r4,r5,805be8 <__alt_mem_onchip_mem+0xff7fdbe8>
  805c48:	800b883a 	mov	r5,r16
  805c4c:	8809883a 	mov	r4,r17
  805c50:	08023980 	call	802398 <__smakebuf_r>
  805c54:	8080030b 	ldhu	r2,12(r16)
  805c58:	80c00417 	ldw	r3,16(r16)
  805c5c:	003fe206 	br	805be8 <__alt_mem_onchip_mem+0xff7fdbe8>
  805c60:	80800517 	ldw	r2,20(r16)
  805c64:	80000215 	stw	zero,8(r16)
  805c68:	0085c83a 	sub	r2,zero,r2
  805c6c:	80800615 	stw	r2,24(r16)
  805c70:	183fe41e 	bne	r3,zero,805c04 <__alt_mem_onchip_mem+0xff7fdc04>
  805c74:	80c0030b 	ldhu	r3,12(r16)
  805c78:	0005883a 	mov	r2,zero
  805c7c:	1900200c 	andi	r4,r3,128
  805c80:	203fe126 	beq	r4,zero,805c08 <__alt_mem_onchip_mem+0xff7fdc08>
  805c84:	18c01014 	ori	r3,r3,64
  805c88:	80c0030d 	sth	r3,12(r16)
  805c8c:	00bfffc4 	movi	r2,-1
  805c90:	003fdd06 	br	805c08 <__alt_mem_onchip_mem+0xff7fdc08>
  805c94:	08019ec0 	call	8019ec <__sinit>
  805c98:	003fcd06 	br	805bd0 <__alt_mem_onchip_mem+0xff7fdbd0>
  805c9c:	0005883a 	mov	r2,zero
  805ca0:	003fd606 	br	805bfc <__alt_mem_onchip_mem+0xff7fdbfc>
  805ca4:	81400c17 	ldw	r5,48(r16)
  805ca8:	28000626 	beq	r5,zero,805cc4 <__swsetup_r+0x124>
  805cac:	80801004 	addi	r2,r16,64
  805cb0:	28800326 	beq	r5,r2,805cc0 <__swsetup_r+0x120>
  805cb4:	8809883a 	mov	r4,r17
  805cb8:	0807b4c0 	call	807b4c <_free_r>
  805cbc:	8100030b 	ldhu	r4,12(r16)
  805cc0:	80000c15 	stw	zero,48(r16)
  805cc4:	80c00417 	ldw	r3,16(r16)
  805cc8:	00bff6c4 	movi	r2,-37
  805ccc:	1108703a 	and	r4,r2,r4
  805cd0:	80000115 	stw	zero,4(r16)
  805cd4:	80c00015 	stw	r3,0(r16)
  805cd8:	003fd506 	br	805c30 <__alt_mem_onchip_mem+0xff7fdc30>
  805cdc:	00800244 	movi	r2,9
  805ce0:	88800015 	stw	r2,0(r17)
  805ce4:	20801014 	ori	r2,r4,64
  805ce8:	8080030d 	sth	r2,12(r16)
  805cec:	00bfffc4 	movi	r2,-1
  805cf0:	003fc506 	br	805c08 <__alt_mem_onchip_mem+0xff7fdc08>

00805cf4 <_close_r>:
  805cf4:	defffd04 	addi	sp,sp,-12
  805cf8:	dc000015 	stw	r16,0(sp)
  805cfc:	04002074 	movhi	r16,129
  805d00:	dc400115 	stw	r17,4(sp)
  805d04:	841be104 	addi	r16,r16,28548
  805d08:	2023883a 	mov	r17,r4
  805d0c:	2809883a 	mov	r4,r5
  805d10:	dfc00215 	stw	ra,8(sp)
  805d14:	80000015 	stw	zero,0(r16)
  805d18:	080ed540 	call	80ed54 <close>
  805d1c:	00ffffc4 	movi	r3,-1
  805d20:	10c00526 	beq	r2,r3,805d38 <_close_r+0x44>
  805d24:	dfc00217 	ldw	ra,8(sp)
  805d28:	dc400117 	ldw	r17,4(sp)
  805d2c:	dc000017 	ldw	r16,0(sp)
  805d30:	dec00304 	addi	sp,sp,12
  805d34:	f800283a 	ret
  805d38:	80c00017 	ldw	r3,0(r16)
  805d3c:	183ff926 	beq	r3,zero,805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  805d40:	88c00015 	stw	r3,0(r17)
  805d44:	003ff706 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>

00805d48 <quorem>:
  805d48:	defff704 	addi	sp,sp,-36
  805d4c:	dc800215 	stw	r18,8(sp)
  805d50:	20800417 	ldw	r2,16(r4)
  805d54:	2c800417 	ldw	r18,16(r5)
  805d58:	dfc00815 	stw	ra,32(sp)
  805d5c:	ddc00715 	stw	r23,28(sp)
  805d60:	dd800615 	stw	r22,24(sp)
  805d64:	dd400515 	stw	r21,20(sp)
  805d68:	dd000415 	stw	r20,16(sp)
  805d6c:	dcc00315 	stw	r19,12(sp)
  805d70:	dc400115 	stw	r17,4(sp)
  805d74:	dc000015 	stw	r16,0(sp)
  805d78:	14807116 	blt	r2,r18,805f40 <quorem+0x1f8>
  805d7c:	94bfffc4 	addi	r18,r18,-1
  805d80:	94ad883a 	add	r22,r18,r18
  805d84:	b5ad883a 	add	r22,r22,r22
  805d88:	2c400504 	addi	r17,r5,20
  805d8c:	8da9883a 	add	r20,r17,r22
  805d90:	25400504 	addi	r21,r4,20
  805d94:	282f883a 	mov	r23,r5
  805d98:	adad883a 	add	r22,r21,r22
  805d9c:	a1400017 	ldw	r5,0(r20)
  805da0:	2021883a 	mov	r16,r4
  805da4:	b1000017 	ldw	r4,0(r22)
  805da8:	29400044 	addi	r5,r5,1
  805dac:	08014d00 	call	8014d0 <__udivsi3>
  805db0:	1027883a 	mov	r19,r2
  805db4:	10002c26 	beq	r2,zero,805e68 <quorem+0x120>
  805db8:	a813883a 	mov	r9,r21
  805dbc:	880b883a 	mov	r5,r17
  805dc0:	0009883a 	mov	r4,zero
  805dc4:	000d883a 	mov	r6,zero
  805dc8:	2a000017 	ldw	r8,0(r5)
  805dcc:	49c00017 	ldw	r7,0(r9)
  805dd0:	29400104 	addi	r5,r5,4
  805dd4:	40bfffcc 	andi	r2,r8,65535
  805dd8:	14c5383a 	mul	r2,r2,r19
  805ddc:	4010d43a 	srli	r8,r8,16
  805de0:	38ffffcc 	andi	r3,r7,65535
  805de4:	1105883a 	add	r2,r2,r4
  805de8:	1008d43a 	srli	r4,r2,16
  805dec:	44d1383a 	mul	r8,r8,r19
  805df0:	198d883a 	add	r6,r3,r6
  805df4:	10ffffcc 	andi	r3,r2,65535
  805df8:	30c7c83a 	sub	r3,r6,r3
  805dfc:	380ed43a 	srli	r7,r7,16
  805e00:	4105883a 	add	r2,r8,r4
  805e04:	180dd43a 	srai	r6,r3,16
  805e08:	113fffcc 	andi	r4,r2,65535
  805e0c:	390fc83a 	sub	r7,r7,r4
  805e10:	398d883a 	add	r6,r7,r6
  805e14:	300e943a 	slli	r7,r6,16
  805e18:	18ffffcc 	andi	r3,r3,65535
  805e1c:	1008d43a 	srli	r4,r2,16
  805e20:	38ceb03a 	or	r7,r7,r3
  805e24:	49c00015 	stw	r7,0(r9)
  805e28:	300dd43a 	srai	r6,r6,16
  805e2c:	4a400104 	addi	r9,r9,4
  805e30:	a17fe52e 	bgeu	r20,r5,805dc8 <__alt_mem_onchip_mem+0xff7fddc8>
  805e34:	b0800017 	ldw	r2,0(r22)
  805e38:	10000b1e 	bne	r2,zero,805e68 <quorem+0x120>
  805e3c:	b0bfff04 	addi	r2,r22,-4
  805e40:	a880082e 	bgeu	r21,r2,805e64 <quorem+0x11c>
  805e44:	b0ffff17 	ldw	r3,-4(r22)
  805e48:	18000326 	beq	r3,zero,805e58 <quorem+0x110>
  805e4c:	00000506 	br	805e64 <quorem+0x11c>
  805e50:	10c00017 	ldw	r3,0(r2)
  805e54:	1800031e 	bne	r3,zero,805e64 <quorem+0x11c>
  805e58:	10bfff04 	addi	r2,r2,-4
  805e5c:	94bfffc4 	addi	r18,r18,-1
  805e60:	a8bffb36 	bltu	r21,r2,805e50 <__alt_mem_onchip_mem+0xff7fde50>
  805e64:	84800415 	stw	r18,16(r16)
  805e68:	b80b883a 	mov	r5,r23
  805e6c:	8009883a 	mov	r4,r16
  805e70:	08090f80 	call	8090f8 <__mcmp>
  805e74:	10002616 	blt	r2,zero,805f10 <quorem+0x1c8>
  805e78:	9cc00044 	addi	r19,r19,1
  805e7c:	a805883a 	mov	r2,r21
  805e80:	000b883a 	mov	r5,zero
  805e84:	11000017 	ldw	r4,0(r2)
  805e88:	89800017 	ldw	r6,0(r17)
  805e8c:	10800104 	addi	r2,r2,4
  805e90:	20ffffcc 	andi	r3,r4,65535
  805e94:	194b883a 	add	r5,r3,r5
  805e98:	30ffffcc 	andi	r3,r6,65535
  805e9c:	28c7c83a 	sub	r3,r5,r3
  805ea0:	300cd43a 	srli	r6,r6,16
  805ea4:	2008d43a 	srli	r4,r4,16
  805ea8:	180bd43a 	srai	r5,r3,16
  805eac:	18ffffcc 	andi	r3,r3,65535
  805eb0:	2189c83a 	sub	r4,r4,r6
  805eb4:	2149883a 	add	r4,r4,r5
  805eb8:	200c943a 	slli	r6,r4,16
  805ebc:	8c400104 	addi	r17,r17,4
  805ec0:	200bd43a 	srai	r5,r4,16
  805ec4:	30c6b03a 	or	r3,r6,r3
  805ec8:	10ffff15 	stw	r3,-4(r2)
  805ecc:	a47fed2e 	bgeu	r20,r17,805e84 <__alt_mem_onchip_mem+0xff7fde84>
  805ed0:	9485883a 	add	r2,r18,r18
  805ed4:	1085883a 	add	r2,r2,r2
  805ed8:	a887883a 	add	r3,r21,r2
  805edc:	18800017 	ldw	r2,0(r3)
  805ee0:	10000b1e 	bne	r2,zero,805f10 <quorem+0x1c8>
  805ee4:	18bfff04 	addi	r2,r3,-4
  805ee8:	a880082e 	bgeu	r21,r2,805f0c <quorem+0x1c4>
  805eec:	18ffff17 	ldw	r3,-4(r3)
  805ef0:	18000326 	beq	r3,zero,805f00 <quorem+0x1b8>
  805ef4:	00000506 	br	805f0c <quorem+0x1c4>
  805ef8:	10c00017 	ldw	r3,0(r2)
  805efc:	1800031e 	bne	r3,zero,805f0c <quorem+0x1c4>
  805f00:	10bfff04 	addi	r2,r2,-4
  805f04:	94bfffc4 	addi	r18,r18,-1
  805f08:	a8bffb36 	bltu	r21,r2,805ef8 <__alt_mem_onchip_mem+0xff7fdef8>
  805f0c:	84800415 	stw	r18,16(r16)
  805f10:	9805883a 	mov	r2,r19
  805f14:	dfc00817 	ldw	ra,32(sp)
  805f18:	ddc00717 	ldw	r23,28(sp)
  805f1c:	dd800617 	ldw	r22,24(sp)
  805f20:	dd400517 	ldw	r21,20(sp)
  805f24:	dd000417 	ldw	r20,16(sp)
  805f28:	dcc00317 	ldw	r19,12(sp)
  805f2c:	dc800217 	ldw	r18,8(sp)
  805f30:	dc400117 	ldw	r17,4(sp)
  805f34:	dc000017 	ldw	r16,0(sp)
  805f38:	dec00904 	addi	sp,sp,36
  805f3c:	f800283a 	ret
  805f40:	0005883a 	mov	r2,zero
  805f44:	003ff306 	br	805f14 <__alt_mem_onchip_mem+0xff7fdf14>

00805f48 <_dtoa_r>:
  805f48:	20801017 	ldw	r2,64(r4)
  805f4c:	deffde04 	addi	sp,sp,-136
  805f50:	df002015 	stw	fp,128(sp)
  805f54:	dcc01b15 	stw	r19,108(sp)
  805f58:	dc801a15 	stw	r18,104(sp)
  805f5c:	dc401915 	stw	r17,100(sp)
  805f60:	dc001815 	stw	r16,96(sp)
  805f64:	dfc02115 	stw	ra,132(sp)
  805f68:	ddc01f15 	stw	r23,124(sp)
  805f6c:	dd801e15 	stw	r22,120(sp)
  805f70:	dd401d15 	stw	r21,116(sp)
  805f74:	dd001c15 	stw	r20,112(sp)
  805f78:	d9c00315 	stw	r7,12(sp)
  805f7c:	2039883a 	mov	fp,r4
  805f80:	3023883a 	mov	r17,r6
  805f84:	2825883a 	mov	r18,r5
  805f88:	dc002417 	ldw	r16,144(sp)
  805f8c:	3027883a 	mov	r19,r6
  805f90:	10000826 	beq	r2,zero,805fb4 <_dtoa_r+0x6c>
  805f94:	21801117 	ldw	r6,68(r4)
  805f98:	00c00044 	movi	r3,1
  805f9c:	100b883a 	mov	r5,r2
  805fa0:	1986983a 	sll	r3,r3,r6
  805fa4:	11800115 	stw	r6,4(r2)
  805fa8:	10c00215 	stw	r3,8(r2)
  805fac:	08088d80 	call	8088d8 <_Bfree>
  805fb0:	e0001015 	stw	zero,64(fp)
  805fb4:	88002e16 	blt	r17,zero,806070 <_dtoa_r+0x128>
  805fb8:	80000015 	stw	zero,0(r16)
  805fbc:	889ffc2c 	andhi	r2,r17,32752
  805fc0:	00dffc34 	movhi	r3,32752
  805fc4:	10c01c26 	beq	r2,r3,806038 <_dtoa_r+0xf0>
  805fc8:	000d883a 	mov	r6,zero
  805fcc:	000f883a 	mov	r7,zero
  805fd0:	9009883a 	mov	r4,r18
  805fd4:	980b883a 	mov	r5,r19
  805fd8:	080d7180 	call	80d718 <__eqdf2>
  805fdc:	10002b1e 	bne	r2,zero,80608c <_dtoa_r+0x144>
  805fe0:	d9c02317 	ldw	r7,140(sp)
  805fe4:	00800044 	movi	r2,1
  805fe8:	38800015 	stw	r2,0(r7)
  805fec:	d8802517 	ldw	r2,148(sp)
  805ff0:	10019e26 	beq	r2,zero,80666c <_dtoa_r+0x724>
  805ff4:	d8c02517 	ldw	r3,148(sp)
  805ff8:	00802074 	movhi	r2,129
  805ffc:	108c0444 	addi	r2,r2,12305
  806000:	18800015 	stw	r2,0(r3)
  806004:	10bfffc4 	addi	r2,r2,-1
  806008:	dfc02117 	ldw	ra,132(sp)
  80600c:	df002017 	ldw	fp,128(sp)
  806010:	ddc01f17 	ldw	r23,124(sp)
  806014:	dd801e17 	ldw	r22,120(sp)
  806018:	dd401d17 	ldw	r21,116(sp)
  80601c:	dd001c17 	ldw	r20,112(sp)
  806020:	dcc01b17 	ldw	r19,108(sp)
  806024:	dc801a17 	ldw	r18,104(sp)
  806028:	dc401917 	ldw	r17,100(sp)
  80602c:	dc001817 	ldw	r16,96(sp)
  806030:	dec02204 	addi	sp,sp,136
  806034:	f800283a 	ret
  806038:	d8c02317 	ldw	r3,140(sp)
  80603c:	0089c3c4 	movi	r2,9999
  806040:	18800015 	stw	r2,0(r3)
  806044:	90017726 	beq	r18,zero,806624 <_dtoa_r+0x6dc>
  806048:	00802074 	movhi	r2,129
  80604c:	108cb004 	addi	r2,r2,12992
  806050:	d9002517 	ldw	r4,148(sp)
  806054:	203fec26 	beq	r4,zero,806008 <__alt_mem_onchip_mem+0xff7fe008>
  806058:	10c000c7 	ldb	r3,3(r2)
  80605c:	1801781e 	bne	r3,zero,806640 <_dtoa_r+0x6f8>
  806060:	10c000c4 	addi	r3,r2,3
  806064:	d9802517 	ldw	r6,148(sp)
  806068:	30c00015 	stw	r3,0(r6)
  80606c:	003fe606 	br	806008 <__alt_mem_onchip_mem+0xff7fe008>
  806070:	04e00034 	movhi	r19,32768
  806074:	9cffffc4 	addi	r19,r19,-1
  806078:	00800044 	movi	r2,1
  80607c:	8ce6703a 	and	r19,r17,r19
  806080:	80800015 	stw	r2,0(r16)
  806084:	9823883a 	mov	r17,r19
  806088:	003fcc06 	br	805fbc <__alt_mem_onchip_mem+0xff7fdfbc>
  80608c:	d8800204 	addi	r2,sp,8
  806090:	d8800015 	stw	r2,0(sp)
  806094:	d9c00104 	addi	r7,sp,4
  806098:	900b883a 	mov	r5,r18
  80609c:	980d883a 	mov	r6,r19
  8060a0:	e009883a 	mov	r4,fp
  8060a4:	8820d53a 	srli	r16,r17,20
  8060a8:	08094c40 	call	8094c4 <__d2b>
  8060ac:	d8800915 	stw	r2,36(sp)
  8060b0:	8001651e 	bne	r16,zero,806648 <_dtoa_r+0x700>
  8060b4:	dd800217 	ldw	r22,8(sp)
  8060b8:	dc000117 	ldw	r16,4(sp)
  8060bc:	00800804 	movi	r2,32
  8060c0:	b421883a 	add	r16,r22,r16
  8060c4:	80c10c84 	addi	r3,r16,1074
  8060c8:	10c2d10e 	bge	r2,r3,806c10 <_dtoa_r+0xcc8>
  8060cc:	00801004 	movi	r2,64
  8060d0:	81010484 	addi	r4,r16,1042
  8060d4:	10c7c83a 	sub	r3,r2,r3
  8060d8:	9108d83a 	srl	r4,r18,r4
  8060dc:	88e2983a 	sll	r17,r17,r3
  8060e0:	2448b03a 	or	r4,r4,r17
  8060e4:	080eae00 	call	80eae0 <__floatunsidf>
  8060e8:	017f8434 	movhi	r5,65040
  8060ec:	01800044 	movi	r6,1
  8060f0:	1009883a 	mov	r4,r2
  8060f4:	194b883a 	add	r5,r3,r5
  8060f8:	843fffc4 	addi	r16,r16,-1
  8060fc:	d9801115 	stw	r6,68(sp)
  806100:	000d883a 	mov	r6,zero
  806104:	01cffe34 	movhi	r7,16376
  806108:	080e0880 	call	80e088 <__subdf3>
  80610c:	0198dbf4 	movhi	r6,25455
  806110:	01cff4f4 	movhi	r7,16339
  806114:	3190d844 	addi	r6,r6,17249
  806118:	39e1e9c4 	addi	r7,r7,-30809
  80611c:	1009883a 	mov	r4,r2
  806120:	180b883a 	mov	r5,r3
  806124:	080d9700 	call	80d970 <__muldf3>
  806128:	01a2d874 	movhi	r6,35681
  80612c:	01cff1f4 	movhi	r7,16327
  806130:	31b22cc4 	addi	r6,r6,-14157
  806134:	39e28a04 	addi	r7,r7,-30168
  806138:	180b883a 	mov	r5,r3
  80613c:	1009883a 	mov	r4,r2
  806140:	080c5840 	call	80c584 <__adddf3>
  806144:	8009883a 	mov	r4,r16
  806148:	1029883a 	mov	r20,r2
  80614c:	1823883a 	mov	r17,r3
  806150:	080ea040 	call	80ea04 <__floatsidf>
  806154:	019427f4 	movhi	r6,20639
  806158:	01cff4f4 	movhi	r7,16339
  80615c:	319e7ec4 	addi	r6,r6,31227
  806160:	39d104c4 	addi	r7,r7,17427
  806164:	1009883a 	mov	r4,r2
  806168:	180b883a 	mov	r5,r3
  80616c:	080d9700 	call	80d970 <__muldf3>
  806170:	100d883a 	mov	r6,r2
  806174:	180f883a 	mov	r7,r3
  806178:	a009883a 	mov	r4,r20
  80617c:	880b883a 	mov	r5,r17
  806180:	080c5840 	call	80c584 <__adddf3>
  806184:	1009883a 	mov	r4,r2
  806188:	180b883a 	mov	r5,r3
  80618c:	1029883a 	mov	r20,r2
  806190:	1823883a 	mov	r17,r3
  806194:	080e9840 	call	80e984 <__fixdfsi>
  806198:	000d883a 	mov	r6,zero
  80619c:	000f883a 	mov	r7,zero
  8061a0:	a009883a 	mov	r4,r20
  8061a4:	880b883a 	mov	r5,r17
  8061a8:	d8800515 	stw	r2,20(sp)
  8061ac:	080d87c0 	call	80d87c <__ledf2>
  8061b0:	10028716 	blt	r2,zero,806bd0 <_dtoa_r+0xc88>
  8061b4:	d8c00517 	ldw	r3,20(sp)
  8061b8:	00800584 	movi	r2,22
  8061bc:	10c27536 	bltu	r2,r3,806b94 <_dtoa_r+0xc4c>
  8061c0:	180490fa 	slli	r2,r3,3
  8061c4:	00c02074 	movhi	r3,129
  8061c8:	18cccb04 	addi	r3,r3,13100
  8061cc:	1885883a 	add	r2,r3,r2
  8061d0:	11000017 	ldw	r4,0(r2)
  8061d4:	11400117 	ldw	r5,4(r2)
  8061d8:	900d883a 	mov	r6,r18
  8061dc:	980f883a 	mov	r7,r19
  8061e0:	080d7a00 	call	80d7a0 <__gedf2>
  8061e4:	00828d0e 	bge	zero,r2,806c1c <_dtoa_r+0xcd4>
  8061e8:	d9000517 	ldw	r4,20(sp)
  8061ec:	d8000e15 	stw	zero,56(sp)
  8061f0:	213fffc4 	addi	r4,r4,-1
  8061f4:	d9000515 	stw	r4,20(sp)
  8061f8:	b42dc83a 	sub	r22,r22,r16
  8061fc:	b5bfffc4 	addi	r22,r22,-1
  806200:	b0026f16 	blt	r22,zero,806bc0 <_dtoa_r+0xc78>
  806204:	d8000815 	stw	zero,32(sp)
  806208:	d9c00517 	ldw	r7,20(sp)
  80620c:	38026416 	blt	r7,zero,806ba0 <_dtoa_r+0xc58>
  806210:	b1ed883a 	add	r22,r22,r7
  806214:	d9c00d15 	stw	r7,52(sp)
  806218:	d8000a15 	stw	zero,40(sp)
  80621c:	d9800317 	ldw	r6,12(sp)
  806220:	00800244 	movi	r2,9
  806224:	11811436 	bltu	r2,r6,806678 <_dtoa_r+0x730>
  806228:	00800144 	movi	r2,5
  80622c:	1184e10e 	bge	r2,r6,8075b4 <_dtoa_r+0x166c>
  806230:	31bfff04 	addi	r6,r6,-4
  806234:	d9800315 	stw	r6,12(sp)
  806238:	0023883a 	mov	r17,zero
  80623c:	d9800317 	ldw	r6,12(sp)
  806240:	008000c4 	movi	r2,3
  806244:	30836726 	beq	r6,r2,806fe4 <_dtoa_r+0x109c>
  806248:	1183410e 	bge	r2,r6,806f50 <_dtoa_r+0x1008>
  80624c:	d9c00317 	ldw	r7,12(sp)
  806250:	00800104 	movi	r2,4
  806254:	38827c26 	beq	r7,r2,806c48 <_dtoa_r+0xd00>
  806258:	00800144 	movi	r2,5
  80625c:	3884c41e 	bne	r7,r2,807570 <_dtoa_r+0x1628>
  806260:	00800044 	movi	r2,1
  806264:	d8800b15 	stw	r2,44(sp)
  806268:	d8c00517 	ldw	r3,20(sp)
  80626c:	d9002217 	ldw	r4,136(sp)
  806270:	1907883a 	add	r3,r3,r4
  806274:	19800044 	addi	r6,r3,1
  806278:	d8c00c15 	stw	r3,48(sp)
  80627c:	d9800615 	stw	r6,24(sp)
  806280:	0183a40e 	bge	zero,r6,807114 <_dtoa_r+0x11cc>
  806284:	d9800617 	ldw	r6,24(sp)
  806288:	3021883a 	mov	r16,r6
  80628c:	e0001115 	stw	zero,68(fp)
  806290:	008005c4 	movi	r2,23
  806294:	1184c92e 	bgeu	r2,r6,8075bc <_dtoa_r+0x1674>
  806298:	00c00044 	movi	r3,1
  80629c:	00800104 	movi	r2,4
  8062a0:	1085883a 	add	r2,r2,r2
  8062a4:	11000504 	addi	r4,r2,20
  8062a8:	180b883a 	mov	r5,r3
  8062ac:	18c00044 	addi	r3,r3,1
  8062b0:	313ffb2e 	bgeu	r6,r4,8062a0 <__alt_mem_onchip_mem+0xff7fe2a0>
  8062b4:	e1401115 	stw	r5,68(fp)
  8062b8:	e009883a 	mov	r4,fp
  8062bc:	08088300 	call	808830 <_Balloc>
  8062c0:	d8800715 	stw	r2,28(sp)
  8062c4:	e0801015 	stw	r2,64(fp)
  8062c8:	00800384 	movi	r2,14
  8062cc:	1400f736 	bltu	r2,r16,8066ac <_dtoa_r+0x764>
  8062d0:	8800f626 	beq	r17,zero,8066ac <_dtoa_r+0x764>
  8062d4:	d9c00517 	ldw	r7,20(sp)
  8062d8:	01c39a0e 	bge	zero,r7,807144 <_dtoa_r+0x11fc>
  8062dc:	388003cc 	andi	r2,r7,15
  8062e0:	100490fa 	slli	r2,r2,3
  8062e4:	382bd13a 	srai	r21,r7,4
  8062e8:	00c02074 	movhi	r3,129
  8062ec:	18cccb04 	addi	r3,r3,13100
  8062f0:	1885883a 	add	r2,r3,r2
  8062f4:	a8c0040c 	andi	r3,r21,16
  8062f8:	12400017 	ldw	r9,0(r2)
  8062fc:	12000117 	ldw	r8,4(r2)
  806300:	18037926 	beq	r3,zero,8070e8 <_dtoa_r+0x11a0>
  806304:	00802074 	movhi	r2,129
  806308:	108cc104 	addi	r2,r2,13060
  80630c:	11800817 	ldw	r6,32(r2)
  806310:	11c00917 	ldw	r7,36(r2)
  806314:	9009883a 	mov	r4,r18
  806318:	980b883a 	mov	r5,r19
  80631c:	da001715 	stw	r8,92(sp)
  806320:	da401615 	stw	r9,88(sp)
  806324:	080ce300 	call	80ce30 <__divdf3>
  806328:	da001717 	ldw	r8,92(sp)
  80632c:	da401617 	ldw	r9,88(sp)
  806330:	ad4003cc 	andi	r21,r21,15
  806334:	040000c4 	movi	r16,3
  806338:	1023883a 	mov	r17,r2
  80633c:	1829883a 	mov	r20,r3
  806340:	a8001126 	beq	r21,zero,806388 <_dtoa_r+0x440>
  806344:	05c02074 	movhi	r23,129
  806348:	bdccc104 	addi	r23,r23,13060
  80634c:	4805883a 	mov	r2,r9
  806350:	4007883a 	mov	r3,r8
  806354:	a980004c 	andi	r6,r21,1
  806358:	1009883a 	mov	r4,r2
  80635c:	a82bd07a 	srai	r21,r21,1
  806360:	180b883a 	mov	r5,r3
  806364:	30000426 	beq	r6,zero,806378 <_dtoa_r+0x430>
  806368:	b9800017 	ldw	r6,0(r23)
  80636c:	b9c00117 	ldw	r7,4(r23)
  806370:	84000044 	addi	r16,r16,1
  806374:	080d9700 	call	80d970 <__muldf3>
  806378:	bdc00204 	addi	r23,r23,8
  80637c:	a83ff51e 	bne	r21,zero,806354 <__alt_mem_onchip_mem+0xff7fe354>
  806380:	1013883a 	mov	r9,r2
  806384:	1811883a 	mov	r8,r3
  806388:	480d883a 	mov	r6,r9
  80638c:	400f883a 	mov	r7,r8
  806390:	8809883a 	mov	r4,r17
  806394:	a00b883a 	mov	r5,r20
  806398:	080ce300 	call	80ce30 <__divdf3>
  80639c:	d8800f15 	stw	r2,60(sp)
  8063a0:	d8c01015 	stw	r3,64(sp)
  8063a4:	d8c00e17 	ldw	r3,56(sp)
  8063a8:	18000626 	beq	r3,zero,8063c4 <_dtoa_r+0x47c>
  8063ac:	d9000f17 	ldw	r4,60(sp)
  8063b0:	d9401017 	ldw	r5,64(sp)
  8063b4:	000d883a 	mov	r6,zero
  8063b8:	01cffc34 	movhi	r7,16368
  8063bc:	080d87c0 	call	80d87c <__ledf2>
  8063c0:	10040b16 	blt	r2,zero,8073f0 <_dtoa_r+0x14a8>
  8063c4:	8009883a 	mov	r4,r16
  8063c8:	080ea040 	call	80ea04 <__floatsidf>
  8063cc:	d9800f17 	ldw	r6,60(sp)
  8063d0:	d9c01017 	ldw	r7,64(sp)
  8063d4:	1009883a 	mov	r4,r2
  8063d8:	180b883a 	mov	r5,r3
  8063dc:	080d9700 	call	80d970 <__muldf3>
  8063e0:	000d883a 	mov	r6,zero
  8063e4:	01d00734 	movhi	r7,16412
  8063e8:	1009883a 	mov	r4,r2
  8063ec:	180b883a 	mov	r5,r3
  8063f0:	080c5840 	call	80c584 <__adddf3>
  8063f4:	1021883a 	mov	r16,r2
  8063f8:	d8800617 	ldw	r2,24(sp)
  8063fc:	047f3034 	movhi	r17,64704
  806400:	1c63883a 	add	r17,r3,r17
  806404:	10031826 	beq	r2,zero,807068 <_dtoa_r+0x1120>
  806408:	d8c00517 	ldw	r3,20(sp)
  80640c:	db000617 	ldw	r12,24(sp)
  806410:	d8c01315 	stw	r3,76(sp)
  806414:	d9000b17 	ldw	r4,44(sp)
  806418:	20038f26 	beq	r4,zero,807258 <_dtoa_r+0x1310>
  80641c:	60bfffc4 	addi	r2,r12,-1
  806420:	100490fa 	slli	r2,r2,3
  806424:	00c02074 	movhi	r3,129
  806428:	18cccb04 	addi	r3,r3,13100
  80642c:	1885883a 	add	r2,r3,r2
  806430:	11800017 	ldw	r6,0(r2)
  806434:	11c00117 	ldw	r7,4(r2)
  806438:	d8800717 	ldw	r2,28(sp)
  80643c:	0009883a 	mov	r4,zero
  806440:	014ff834 	movhi	r5,16352
  806444:	db001615 	stw	r12,88(sp)
  806448:	15c00044 	addi	r23,r2,1
  80644c:	080ce300 	call	80ce30 <__divdf3>
  806450:	800d883a 	mov	r6,r16
  806454:	880f883a 	mov	r7,r17
  806458:	1009883a 	mov	r4,r2
  80645c:	180b883a 	mov	r5,r3
  806460:	080e0880 	call	80e088 <__subdf3>
  806464:	d9401017 	ldw	r5,64(sp)
  806468:	d9000f17 	ldw	r4,60(sp)
  80646c:	102b883a 	mov	r21,r2
  806470:	d8c01215 	stw	r3,72(sp)
  806474:	080e9840 	call	80e984 <__fixdfsi>
  806478:	1009883a 	mov	r4,r2
  80647c:	1029883a 	mov	r20,r2
  806480:	080ea040 	call	80ea04 <__floatsidf>
  806484:	d9000f17 	ldw	r4,60(sp)
  806488:	d9401017 	ldw	r5,64(sp)
  80648c:	100d883a 	mov	r6,r2
  806490:	180f883a 	mov	r7,r3
  806494:	080e0880 	call	80e088 <__subdf3>
  806498:	1823883a 	mov	r17,r3
  80649c:	d8c00717 	ldw	r3,28(sp)
  8064a0:	d9401217 	ldw	r5,72(sp)
  8064a4:	a2000c04 	addi	r8,r20,48
  8064a8:	1021883a 	mov	r16,r2
  8064ac:	1a000005 	stb	r8,0(r3)
  8064b0:	800d883a 	mov	r6,r16
  8064b4:	880f883a 	mov	r7,r17
  8064b8:	a809883a 	mov	r4,r21
  8064bc:	4029883a 	mov	r20,r8
  8064c0:	080d7a00 	call	80d7a0 <__gedf2>
  8064c4:	00841d16 	blt	zero,r2,80753c <_dtoa_r+0x15f4>
  8064c8:	800d883a 	mov	r6,r16
  8064cc:	880f883a 	mov	r7,r17
  8064d0:	0009883a 	mov	r4,zero
  8064d4:	014ffc34 	movhi	r5,16368
  8064d8:	080e0880 	call	80e088 <__subdf3>
  8064dc:	d9401217 	ldw	r5,72(sp)
  8064e0:	100d883a 	mov	r6,r2
  8064e4:	180f883a 	mov	r7,r3
  8064e8:	a809883a 	mov	r4,r21
  8064ec:	080d7a00 	call	80d7a0 <__gedf2>
  8064f0:	db001617 	ldw	r12,88(sp)
  8064f4:	00840e16 	blt	zero,r2,807530 <_dtoa_r+0x15e8>
  8064f8:	00800044 	movi	r2,1
  8064fc:	13006b0e 	bge	r2,r12,8066ac <_dtoa_r+0x764>
  806500:	d9000717 	ldw	r4,28(sp)
  806504:	dd800f15 	stw	r22,60(sp)
  806508:	dcc01015 	stw	r19,64(sp)
  80650c:	2319883a 	add	r12,r4,r12
  806510:	dcc01217 	ldw	r19,72(sp)
  806514:	602d883a 	mov	r22,r12
  806518:	dc801215 	stw	r18,72(sp)
  80651c:	b825883a 	mov	r18,r23
  806520:	00000906 	br	806548 <_dtoa_r+0x600>
  806524:	080e0880 	call	80e088 <__subdf3>
  806528:	a80d883a 	mov	r6,r21
  80652c:	980f883a 	mov	r7,r19
  806530:	1009883a 	mov	r4,r2
  806534:	180b883a 	mov	r5,r3
  806538:	080d87c0 	call	80d87c <__ledf2>
  80653c:	1003e816 	blt	r2,zero,8074e0 <_dtoa_r+0x1598>
  806540:	b825883a 	mov	r18,r23
  806544:	bd83e926 	beq	r23,r22,8074ec <_dtoa_r+0x15a4>
  806548:	a809883a 	mov	r4,r21
  80654c:	980b883a 	mov	r5,r19
  806550:	000d883a 	mov	r6,zero
  806554:	01d00934 	movhi	r7,16420
  806558:	080d9700 	call	80d970 <__muldf3>
  80655c:	000d883a 	mov	r6,zero
  806560:	01d00934 	movhi	r7,16420
  806564:	8009883a 	mov	r4,r16
  806568:	880b883a 	mov	r5,r17
  80656c:	102b883a 	mov	r21,r2
  806570:	1827883a 	mov	r19,r3
  806574:	080d9700 	call	80d970 <__muldf3>
  806578:	180b883a 	mov	r5,r3
  80657c:	1009883a 	mov	r4,r2
  806580:	1821883a 	mov	r16,r3
  806584:	1023883a 	mov	r17,r2
  806588:	080e9840 	call	80e984 <__fixdfsi>
  80658c:	1009883a 	mov	r4,r2
  806590:	1029883a 	mov	r20,r2
  806594:	080ea040 	call	80ea04 <__floatsidf>
  806598:	8809883a 	mov	r4,r17
  80659c:	800b883a 	mov	r5,r16
  8065a0:	100d883a 	mov	r6,r2
  8065a4:	180f883a 	mov	r7,r3
  8065a8:	080e0880 	call	80e088 <__subdf3>
  8065ac:	a5000c04 	addi	r20,r20,48
  8065b0:	a80d883a 	mov	r6,r21
  8065b4:	980f883a 	mov	r7,r19
  8065b8:	1009883a 	mov	r4,r2
  8065bc:	180b883a 	mov	r5,r3
  8065c0:	95000005 	stb	r20,0(r18)
  8065c4:	1021883a 	mov	r16,r2
  8065c8:	1823883a 	mov	r17,r3
  8065cc:	080d87c0 	call	80d87c <__ledf2>
  8065d0:	bdc00044 	addi	r23,r23,1
  8065d4:	800d883a 	mov	r6,r16
  8065d8:	880f883a 	mov	r7,r17
  8065dc:	0009883a 	mov	r4,zero
  8065e0:	014ffc34 	movhi	r5,16368
  8065e4:	103fcf0e 	bge	r2,zero,806524 <__alt_mem_onchip_mem+0xff7fe524>
  8065e8:	d8c01317 	ldw	r3,76(sp)
  8065ec:	d8c00515 	stw	r3,20(sp)
  8065f0:	d9400917 	ldw	r5,36(sp)
  8065f4:	e009883a 	mov	r4,fp
  8065f8:	08088d80 	call	8088d8 <_Bfree>
  8065fc:	d9000517 	ldw	r4,20(sp)
  806600:	d9802317 	ldw	r6,140(sp)
  806604:	d9c02517 	ldw	r7,148(sp)
  806608:	b8000005 	stb	zero,0(r23)
  80660c:	20800044 	addi	r2,r4,1
  806610:	30800015 	stw	r2,0(r6)
  806614:	3802aa26 	beq	r7,zero,8070c0 <_dtoa_r+0x1178>
  806618:	3dc00015 	stw	r23,0(r7)
  80661c:	d8800717 	ldw	r2,28(sp)
  806620:	003e7906 	br	806008 <__alt_mem_onchip_mem+0xff7fe008>
  806624:	00800434 	movhi	r2,16
  806628:	10bfffc4 	addi	r2,r2,-1
  80662c:	88a2703a 	and	r17,r17,r2
  806630:	883e851e 	bne	r17,zero,806048 <__alt_mem_onchip_mem+0xff7fe048>
  806634:	00802074 	movhi	r2,129
  806638:	108cad04 	addi	r2,r2,12980
  80663c:	003e8406 	br	806050 <__alt_mem_onchip_mem+0xff7fe050>
  806640:	10c00204 	addi	r3,r2,8
  806644:	003e8706 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  806648:	01400434 	movhi	r5,16
  80664c:	297fffc4 	addi	r5,r5,-1
  806650:	994a703a 	and	r5,r19,r5
  806654:	9009883a 	mov	r4,r18
  806658:	843f0044 	addi	r16,r16,-1023
  80665c:	294ffc34 	orhi	r5,r5,16368
  806660:	dd800217 	ldw	r22,8(sp)
  806664:	d8001115 	stw	zero,68(sp)
  806668:	003ea506 	br	806100 <__alt_mem_onchip_mem+0xff7fe100>
  80666c:	00802074 	movhi	r2,129
  806670:	108c0404 	addi	r2,r2,12304
  806674:	003e6406 	br	806008 <__alt_mem_onchip_mem+0xff7fe008>
  806678:	e0001115 	stw	zero,68(fp)
  80667c:	000b883a 	mov	r5,zero
  806680:	e009883a 	mov	r4,fp
  806684:	08088300 	call	808830 <_Balloc>
  806688:	01bfffc4 	movi	r6,-1
  80668c:	01c00044 	movi	r7,1
  806690:	d8800715 	stw	r2,28(sp)
  806694:	d9800c15 	stw	r6,48(sp)
  806698:	e0801015 	stw	r2,64(fp)
  80669c:	d8000315 	stw	zero,12(sp)
  8066a0:	d9c00b15 	stw	r7,44(sp)
  8066a4:	d9800615 	stw	r6,24(sp)
  8066a8:	d8002215 	stw	zero,136(sp)
  8066ac:	d8800117 	ldw	r2,4(sp)
  8066b0:	10008916 	blt	r2,zero,8068d8 <_dtoa_r+0x990>
  8066b4:	d9000517 	ldw	r4,20(sp)
  8066b8:	00c00384 	movi	r3,14
  8066bc:	19008616 	blt	r3,r4,8068d8 <_dtoa_r+0x990>
  8066c0:	200490fa 	slli	r2,r4,3
  8066c4:	00c02074 	movhi	r3,129
  8066c8:	d9802217 	ldw	r6,136(sp)
  8066cc:	18cccb04 	addi	r3,r3,13100
  8066d0:	1885883a 	add	r2,r3,r2
  8066d4:	14000017 	ldw	r16,0(r2)
  8066d8:	14400117 	ldw	r17,4(r2)
  8066dc:	30016316 	blt	r6,zero,806c6c <_dtoa_r+0xd24>
  8066e0:	800d883a 	mov	r6,r16
  8066e4:	880f883a 	mov	r7,r17
  8066e8:	9009883a 	mov	r4,r18
  8066ec:	980b883a 	mov	r5,r19
  8066f0:	080ce300 	call	80ce30 <__divdf3>
  8066f4:	180b883a 	mov	r5,r3
  8066f8:	1009883a 	mov	r4,r2
  8066fc:	080e9840 	call	80e984 <__fixdfsi>
  806700:	1009883a 	mov	r4,r2
  806704:	102b883a 	mov	r21,r2
  806708:	080ea040 	call	80ea04 <__floatsidf>
  80670c:	800d883a 	mov	r6,r16
  806710:	880f883a 	mov	r7,r17
  806714:	1009883a 	mov	r4,r2
  806718:	180b883a 	mov	r5,r3
  80671c:	080d9700 	call	80d970 <__muldf3>
  806720:	100d883a 	mov	r6,r2
  806724:	180f883a 	mov	r7,r3
  806728:	9009883a 	mov	r4,r18
  80672c:	980b883a 	mov	r5,r19
  806730:	080e0880 	call	80e088 <__subdf3>
  806734:	d9c00717 	ldw	r7,28(sp)
  806738:	1009883a 	mov	r4,r2
  80673c:	a8800c04 	addi	r2,r21,48
  806740:	38800005 	stb	r2,0(r7)
  806744:	3dc00044 	addi	r23,r7,1
  806748:	d9c00617 	ldw	r7,24(sp)
  80674c:	01800044 	movi	r6,1
  806750:	180b883a 	mov	r5,r3
  806754:	2005883a 	mov	r2,r4
  806758:	39803826 	beq	r7,r6,80683c <_dtoa_r+0x8f4>
  80675c:	000d883a 	mov	r6,zero
  806760:	01d00934 	movhi	r7,16420
  806764:	080d9700 	call	80d970 <__muldf3>
  806768:	000d883a 	mov	r6,zero
  80676c:	000f883a 	mov	r7,zero
  806770:	1009883a 	mov	r4,r2
  806774:	180b883a 	mov	r5,r3
  806778:	1025883a 	mov	r18,r2
  80677c:	1827883a 	mov	r19,r3
  806780:	080d7180 	call	80d718 <__eqdf2>
  806784:	103f9a26 	beq	r2,zero,8065f0 <__alt_mem_onchip_mem+0xff7fe5f0>
  806788:	d9c00617 	ldw	r7,24(sp)
  80678c:	d8c00717 	ldw	r3,28(sp)
  806790:	b829883a 	mov	r20,r23
  806794:	38bfffc4 	addi	r2,r7,-1
  806798:	18ad883a 	add	r22,r3,r2
  80679c:	00000a06 	br	8067c8 <_dtoa_r+0x880>
  8067a0:	080d9700 	call	80d970 <__muldf3>
  8067a4:	000d883a 	mov	r6,zero
  8067a8:	000f883a 	mov	r7,zero
  8067ac:	1009883a 	mov	r4,r2
  8067b0:	180b883a 	mov	r5,r3
  8067b4:	1025883a 	mov	r18,r2
  8067b8:	1827883a 	mov	r19,r3
  8067bc:	b829883a 	mov	r20,r23
  8067c0:	080d7180 	call	80d718 <__eqdf2>
  8067c4:	103f8a26 	beq	r2,zero,8065f0 <__alt_mem_onchip_mem+0xff7fe5f0>
  8067c8:	800d883a 	mov	r6,r16
  8067cc:	880f883a 	mov	r7,r17
  8067d0:	9009883a 	mov	r4,r18
  8067d4:	980b883a 	mov	r5,r19
  8067d8:	080ce300 	call	80ce30 <__divdf3>
  8067dc:	180b883a 	mov	r5,r3
  8067e0:	1009883a 	mov	r4,r2
  8067e4:	080e9840 	call	80e984 <__fixdfsi>
  8067e8:	1009883a 	mov	r4,r2
  8067ec:	102b883a 	mov	r21,r2
  8067f0:	080ea040 	call	80ea04 <__floatsidf>
  8067f4:	800d883a 	mov	r6,r16
  8067f8:	880f883a 	mov	r7,r17
  8067fc:	1009883a 	mov	r4,r2
  806800:	180b883a 	mov	r5,r3
  806804:	080d9700 	call	80d970 <__muldf3>
  806808:	100d883a 	mov	r6,r2
  80680c:	180f883a 	mov	r7,r3
  806810:	9009883a 	mov	r4,r18
  806814:	980b883a 	mov	r5,r19
  806818:	080e0880 	call	80e088 <__subdf3>
  80681c:	aa000c04 	addi	r8,r21,48
  806820:	a2000005 	stb	r8,0(r20)
  806824:	000d883a 	mov	r6,zero
  806828:	01d00934 	movhi	r7,16420
  80682c:	1009883a 	mov	r4,r2
  806830:	180b883a 	mov	r5,r3
  806834:	a5c00044 	addi	r23,r20,1
  806838:	b53fd91e 	bne	r22,r20,8067a0 <__alt_mem_onchip_mem+0xff7fe7a0>
  80683c:	100d883a 	mov	r6,r2
  806840:	180f883a 	mov	r7,r3
  806844:	1009883a 	mov	r4,r2
  806848:	180b883a 	mov	r5,r3
  80684c:	080c5840 	call	80c584 <__adddf3>
  806850:	100d883a 	mov	r6,r2
  806854:	180f883a 	mov	r7,r3
  806858:	8009883a 	mov	r4,r16
  80685c:	880b883a 	mov	r5,r17
  806860:	1027883a 	mov	r19,r2
  806864:	1825883a 	mov	r18,r3
  806868:	080d87c0 	call	80d87c <__ledf2>
  80686c:	10000816 	blt	r2,zero,806890 <_dtoa_r+0x948>
  806870:	980d883a 	mov	r6,r19
  806874:	900f883a 	mov	r7,r18
  806878:	8009883a 	mov	r4,r16
  80687c:	880b883a 	mov	r5,r17
  806880:	080d7180 	call	80d718 <__eqdf2>
  806884:	103f5a1e 	bne	r2,zero,8065f0 <__alt_mem_onchip_mem+0xff7fe5f0>
  806888:	ad40004c 	andi	r21,r21,1
  80688c:	a83f5826 	beq	r21,zero,8065f0 <__alt_mem_onchip_mem+0xff7fe5f0>
  806890:	bd3fffc3 	ldbu	r20,-1(r23)
  806894:	b8bfffc4 	addi	r2,r23,-1
  806898:	1007883a 	mov	r3,r2
  80689c:	01400e44 	movi	r5,57
  8068a0:	d9800717 	ldw	r6,28(sp)
  8068a4:	00000506 	br	8068bc <_dtoa_r+0x974>
  8068a8:	18ffffc4 	addi	r3,r3,-1
  8068ac:	11824726 	beq	r2,r6,8071cc <_dtoa_r+0x1284>
  8068b0:	1d000003 	ldbu	r20,0(r3)
  8068b4:	102f883a 	mov	r23,r2
  8068b8:	10bfffc4 	addi	r2,r2,-1
  8068bc:	a1003fcc 	andi	r4,r20,255
  8068c0:	2100201c 	xori	r4,r4,128
  8068c4:	213fe004 	addi	r4,r4,-128
  8068c8:	217ff726 	beq	r4,r5,8068a8 <__alt_mem_onchip_mem+0xff7fe8a8>
  8068cc:	a2000044 	addi	r8,r20,1
  8068d0:	12000005 	stb	r8,0(r2)
  8068d4:	003f4606 	br	8065f0 <__alt_mem_onchip_mem+0xff7fe5f0>
  8068d8:	d9000b17 	ldw	r4,44(sp)
  8068dc:	2000c826 	beq	r4,zero,806c00 <_dtoa_r+0xcb8>
  8068e0:	d9800317 	ldw	r6,12(sp)
  8068e4:	00c00044 	movi	r3,1
  8068e8:	1980f90e 	bge	r3,r6,806cd0 <_dtoa_r+0xd88>
  8068ec:	d8800617 	ldw	r2,24(sp)
  8068f0:	d8c00a17 	ldw	r3,40(sp)
  8068f4:	157fffc4 	addi	r21,r2,-1
  8068f8:	1d41f316 	blt	r3,r21,8070c8 <_dtoa_r+0x1180>
  8068fc:	1d6bc83a 	sub	r21,r3,r21
  806900:	d9c00617 	ldw	r7,24(sp)
  806904:	3802aa16 	blt	r7,zero,8073b0 <_dtoa_r+0x1468>
  806908:	dd000817 	ldw	r20,32(sp)
  80690c:	d8800617 	ldw	r2,24(sp)
  806910:	d8c00817 	ldw	r3,32(sp)
  806914:	01400044 	movi	r5,1
  806918:	e009883a 	mov	r4,fp
  80691c:	1887883a 	add	r3,r3,r2
  806920:	d8c00815 	stw	r3,32(sp)
  806924:	b0ad883a 	add	r22,r22,r2
  806928:	0808c3c0 	call	808c3c <__i2b>
  80692c:	1023883a 	mov	r17,r2
  806930:	a0000826 	beq	r20,zero,806954 <_dtoa_r+0xa0c>
  806934:	0580070e 	bge	zero,r22,806954 <_dtoa_r+0xa0c>
  806938:	a005883a 	mov	r2,r20
  80693c:	b500b916 	blt	r22,r20,806c24 <_dtoa_r+0xcdc>
  806940:	d9000817 	ldw	r4,32(sp)
  806944:	a0a9c83a 	sub	r20,r20,r2
  806948:	b0adc83a 	sub	r22,r22,r2
  80694c:	2089c83a 	sub	r4,r4,r2
  806950:	d9000815 	stw	r4,32(sp)
  806954:	d9800a17 	ldw	r6,40(sp)
  806958:	0181810e 	bge	zero,r6,806f60 <_dtoa_r+0x1018>
  80695c:	d9c00b17 	ldw	r7,44(sp)
  806960:	3800b326 	beq	r7,zero,806c30 <_dtoa_r+0xce8>
  806964:	a800b226 	beq	r21,zero,806c30 <_dtoa_r+0xce8>
  806968:	880b883a 	mov	r5,r17
  80696c:	a80d883a 	mov	r6,r21
  806970:	e009883a 	mov	r4,fp
  806974:	0808e700 	call	808e70 <__pow5mult>
  806978:	d9800917 	ldw	r6,36(sp)
  80697c:	100b883a 	mov	r5,r2
  806980:	e009883a 	mov	r4,fp
  806984:	1023883a 	mov	r17,r2
  806988:	0808c780 	call	808c78 <__multiply>
  80698c:	1021883a 	mov	r16,r2
  806990:	d8800a17 	ldw	r2,40(sp)
  806994:	d9400917 	ldw	r5,36(sp)
  806998:	e009883a 	mov	r4,fp
  80699c:	1545c83a 	sub	r2,r2,r21
  8069a0:	d8800a15 	stw	r2,40(sp)
  8069a4:	08088d80 	call	8088d8 <_Bfree>
  8069a8:	d8c00a17 	ldw	r3,40(sp)
  8069ac:	18009f1e 	bne	r3,zero,806c2c <_dtoa_r+0xce4>
  8069b0:	05c00044 	movi	r23,1
  8069b4:	e009883a 	mov	r4,fp
  8069b8:	b80b883a 	mov	r5,r23
  8069bc:	0808c3c0 	call	808c3c <__i2b>
  8069c0:	d9000d17 	ldw	r4,52(sp)
  8069c4:	102b883a 	mov	r21,r2
  8069c8:	2000ce26 	beq	r4,zero,806d04 <_dtoa_r+0xdbc>
  8069cc:	200d883a 	mov	r6,r4
  8069d0:	100b883a 	mov	r5,r2
  8069d4:	e009883a 	mov	r4,fp
  8069d8:	0808e700 	call	808e70 <__pow5mult>
  8069dc:	d9800317 	ldw	r6,12(sp)
  8069e0:	102b883a 	mov	r21,r2
  8069e4:	b981810e 	bge	r23,r6,806fec <_dtoa_r+0x10a4>
  8069e8:	0027883a 	mov	r19,zero
  8069ec:	a8800417 	ldw	r2,16(r21)
  8069f0:	05c00804 	movi	r23,32
  8069f4:	10800104 	addi	r2,r2,4
  8069f8:	1085883a 	add	r2,r2,r2
  8069fc:	1085883a 	add	r2,r2,r2
  806a00:	a885883a 	add	r2,r21,r2
  806a04:	11000017 	ldw	r4,0(r2)
  806a08:	0808b240 	call	808b24 <__hi0bits>
  806a0c:	b885c83a 	sub	r2,r23,r2
  806a10:	1585883a 	add	r2,r2,r22
  806a14:	108007cc 	andi	r2,r2,31
  806a18:	1000b326 	beq	r2,zero,806ce8 <_dtoa_r+0xda0>
  806a1c:	00c00804 	movi	r3,32
  806a20:	1887c83a 	sub	r3,r3,r2
  806a24:	01000104 	movi	r4,4
  806a28:	20c2cd0e 	bge	r4,r3,807560 <_dtoa_r+0x1618>
  806a2c:	00c00704 	movi	r3,28
  806a30:	1885c83a 	sub	r2,r3,r2
  806a34:	d8c00817 	ldw	r3,32(sp)
  806a38:	a0a9883a 	add	r20,r20,r2
  806a3c:	b0ad883a 	add	r22,r22,r2
  806a40:	1887883a 	add	r3,r3,r2
  806a44:	d8c00815 	stw	r3,32(sp)
  806a48:	d9800817 	ldw	r6,32(sp)
  806a4c:	0180040e 	bge	zero,r6,806a60 <_dtoa_r+0xb18>
  806a50:	800b883a 	mov	r5,r16
  806a54:	e009883a 	mov	r4,fp
  806a58:	0808fb00 	call	808fb0 <__lshift>
  806a5c:	1021883a 	mov	r16,r2
  806a60:	0580050e 	bge	zero,r22,806a78 <_dtoa_r+0xb30>
  806a64:	a80b883a 	mov	r5,r21
  806a68:	b00d883a 	mov	r6,r22
  806a6c:	e009883a 	mov	r4,fp
  806a70:	0808fb00 	call	808fb0 <__lshift>
  806a74:	102b883a 	mov	r21,r2
  806a78:	d9c00e17 	ldw	r7,56(sp)
  806a7c:	3801211e 	bne	r7,zero,806f04 <_dtoa_r+0xfbc>
  806a80:	d9800617 	ldw	r6,24(sp)
  806a84:	0181380e 	bge	zero,r6,806f68 <_dtoa_r+0x1020>
  806a88:	d8c00b17 	ldw	r3,44(sp)
  806a8c:	1800ab1e 	bne	r3,zero,806d3c <_dtoa_r+0xdf4>
  806a90:	dc800717 	ldw	r18,28(sp)
  806a94:	dcc00617 	ldw	r19,24(sp)
  806a98:	9029883a 	mov	r20,r18
  806a9c:	00000206 	br	806aa8 <_dtoa_r+0xb60>
  806aa0:	08089000 	call	808900 <__multadd>
  806aa4:	1021883a 	mov	r16,r2
  806aa8:	a80b883a 	mov	r5,r21
  806aac:	8009883a 	mov	r4,r16
  806ab0:	0805d480 	call	805d48 <quorem>
  806ab4:	10800c04 	addi	r2,r2,48
  806ab8:	90800005 	stb	r2,0(r18)
  806abc:	94800044 	addi	r18,r18,1
  806ac0:	9507c83a 	sub	r3,r18,r20
  806ac4:	000f883a 	mov	r7,zero
  806ac8:	01800284 	movi	r6,10
  806acc:	800b883a 	mov	r5,r16
  806ad0:	e009883a 	mov	r4,fp
  806ad4:	1cfff216 	blt	r3,r19,806aa0 <__alt_mem_onchip_mem+0xff7feaa0>
  806ad8:	1011883a 	mov	r8,r2
  806adc:	d8800617 	ldw	r2,24(sp)
  806ae0:	0082370e 	bge	zero,r2,8073c0 <_dtoa_r+0x1478>
  806ae4:	d9000717 	ldw	r4,28(sp)
  806ae8:	0025883a 	mov	r18,zero
  806aec:	20af883a 	add	r23,r4,r2
  806af0:	01800044 	movi	r6,1
  806af4:	800b883a 	mov	r5,r16
  806af8:	e009883a 	mov	r4,fp
  806afc:	da001715 	stw	r8,92(sp)
  806b00:	0808fb00 	call	808fb0 <__lshift>
  806b04:	a80b883a 	mov	r5,r21
  806b08:	1009883a 	mov	r4,r2
  806b0c:	d8800915 	stw	r2,36(sp)
  806b10:	08090f80 	call	8090f8 <__mcmp>
  806b14:	da001717 	ldw	r8,92(sp)
  806b18:	0081800e 	bge	zero,r2,80711c <_dtoa_r+0x11d4>
  806b1c:	b93fffc3 	ldbu	r4,-1(r23)
  806b20:	b8bfffc4 	addi	r2,r23,-1
  806b24:	1007883a 	mov	r3,r2
  806b28:	01800e44 	movi	r6,57
  806b2c:	d9c00717 	ldw	r7,28(sp)
  806b30:	00000506 	br	806b48 <_dtoa_r+0xc00>
  806b34:	18ffffc4 	addi	r3,r3,-1
  806b38:	11c12326 	beq	r2,r7,806fc8 <_dtoa_r+0x1080>
  806b3c:	19000003 	ldbu	r4,0(r3)
  806b40:	102f883a 	mov	r23,r2
  806b44:	10bfffc4 	addi	r2,r2,-1
  806b48:	21403fcc 	andi	r5,r4,255
  806b4c:	2940201c 	xori	r5,r5,128
  806b50:	297fe004 	addi	r5,r5,-128
  806b54:	29bff726 	beq	r5,r6,806b34 <__alt_mem_onchip_mem+0xff7feb34>
  806b58:	21000044 	addi	r4,r4,1
  806b5c:	11000005 	stb	r4,0(r2)
  806b60:	a80b883a 	mov	r5,r21
  806b64:	e009883a 	mov	r4,fp
  806b68:	08088d80 	call	8088d8 <_Bfree>
  806b6c:	883ea026 	beq	r17,zero,8065f0 <__alt_mem_onchip_mem+0xff7fe5f0>
  806b70:	90000426 	beq	r18,zero,806b84 <_dtoa_r+0xc3c>
  806b74:	94400326 	beq	r18,r17,806b84 <_dtoa_r+0xc3c>
  806b78:	900b883a 	mov	r5,r18
  806b7c:	e009883a 	mov	r4,fp
  806b80:	08088d80 	call	8088d8 <_Bfree>
  806b84:	880b883a 	mov	r5,r17
  806b88:	e009883a 	mov	r4,fp
  806b8c:	08088d80 	call	8088d8 <_Bfree>
  806b90:	003e9706 	br	8065f0 <__alt_mem_onchip_mem+0xff7fe5f0>
  806b94:	01800044 	movi	r6,1
  806b98:	d9800e15 	stw	r6,56(sp)
  806b9c:	003d9606 	br	8061f8 <__alt_mem_onchip_mem+0xff7fe1f8>
  806ba0:	d8800817 	ldw	r2,32(sp)
  806ba4:	d8c00517 	ldw	r3,20(sp)
  806ba8:	d8000d15 	stw	zero,52(sp)
  806bac:	10c5c83a 	sub	r2,r2,r3
  806bb0:	00c9c83a 	sub	r4,zero,r3
  806bb4:	d8800815 	stw	r2,32(sp)
  806bb8:	d9000a15 	stw	r4,40(sp)
  806bbc:	003d9706 	br	80621c <__alt_mem_onchip_mem+0xff7fe21c>
  806bc0:	05adc83a 	sub	r22,zero,r22
  806bc4:	dd800815 	stw	r22,32(sp)
  806bc8:	002d883a 	mov	r22,zero
  806bcc:	003d8e06 	br	806208 <__alt_mem_onchip_mem+0xff7fe208>
  806bd0:	d9000517 	ldw	r4,20(sp)
  806bd4:	080ea040 	call	80ea04 <__floatsidf>
  806bd8:	100d883a 	mov	r6,r2
  806bdc:	180f883a 	mov	r7,r3
  806be0:	a009883a 	mov	r4,r20
  806be4:	880b883a 	mov	r5,r17
  806be8:	080d7180 	call	80d718 <__eqdf2>
  806bec:	103d7126 	beq	r2,zero,8061b4 <__alt_mem_onchip_mem+0xff7fe1b4>
  806bf0:	d9c00517 	ldw	r7,20(sp)
  806bf4:	39ffffc4 	addi	r7,r7,-1
  806bf8:	d9c00515 	stw	r7,20(sp)
  806bfc:	003d6d06 	br	8061b4 <__alt_mem_onchip_mem+0xff7fe1b4>
  806c00:	dd400a17 	ldw	r21,40(sp)
  806c04:	dd000817 	ldw	r20,32(sp)
  806c08:	0023883a 	mov	r17,zero
  806c0c:	003f4806 	br	806930 <__alt_mem_onchip_mem+0xff7fe930>
  806c10:	10e3c83a 	sub	r17,r2,r3
  806c14:	9448983a 	sll	r4,r18,r17
  806c18:	003d3206 	br	8060e4 <__alt_mem_onchip_mem+0xff7fe0e4>
  806c1c:	d8000e15 	stw	zero,56(sp)
  806c20:	003d7506 	br	8061f8 <__alt_mem_onchip_mem+0xff7fe1f8>
  806c24:	b005883a 	mov	r2,r22
  806c28:	003f4506 	br	806940 <__alt_mem_onchip_mem+0xff7fe940>
  806c2c:	dc000915 	stw	r16,36(sp)
  806c30:	d9800a17 	ldw	r6,40(sp)
  806c34:	d9400917 	ldw	r5,36(sp)
  806c38:	e009883a 	mov	r4,fp
  806c3c:	0808e700 	call	808e70 <__pow5mult>
  806c40:	1021883a 	mov	r16,r2
  806c44:	003f5a06 	br	8069b0 <__alt_mem_onchip_mem+0xff7fe9b0>
  806c48:	01c00044 	movi	r7,1
  806c4c:	d9c00b15 	stw	r7,44(sp)
  806c50:	d8802217 	ldw	r2,136(sp)
  806c54:	0081280e 	bge	zero,r2,8070f8 <_dtoa_r+0x11b0>
  806c58:	100d883a 	mov	r6,r2
  806c5c:	1021883a 	mov	r16,r2
  806c60:	d8800c15 	stw	r2,48(sp)
  806c64:	d8800615 	stw	r2,24(sp)
  806c68:	003d8806 	br	80628c <__alt_mem_onchip_mem+0xff7fe28c>
  806c6c:	d8800617 	ldw	r2,24(sp)
  806c70:	00be9b16 	blt	zero,r2,8066e0 <__alt_mem_onchip_mem+0xff7fe6e0>
  806c74:	10010f1e 	bne	r2,zero,8070b4 <_dtoa_r+0x116c>
  806c78:	880b883a 	mov	r5,r17
  806c7c:	000d883a 	mov	r6,zero
  806c80:	01d00534 	movhi	r7,16404
  806c84:	8009883a 	mov	r4,r16
  806c88:	080d9700 	call	80d970 <__muldf3>
  806c8c:	900d883a 	mov	r6,r18
  806c90:	980f883a 	mov	r7,r19
  806c94:	1009883a 	mov	r4,r2
  806c98:	180b883a 	mov	r5,r3
  806c9c:	080d7a00 	call	80d7a0 <__gedf2>
  806ca0:	002b883a 	mov	r21,zero
  806ca4:	0023883a 	mov	r17,zero
  806ca8:	1000bf16 	blt	r2,zero,806fa8 <_dtoa_r+0x1060>
  806cac:	d9802217 	ldw	r6,136(sp)
  806cb0:	ddc00717 	ldw	r23,28(sp)
  806cb4:	018c303a 	nor	r6,zero,r6
  806cb8:	d9800515 	stw	r6,20(sp)
  806cbc:	a80b883a 	mov	r5,r21
  806cc0:	e009883a 	mov	r4,fp
  806cc4:	08088d80 	call	8088d8 <_Bfree>
  806cc8:	883e4926 	beq	r17,zero,8065f0 <__alt_mem_onchip_mem+0xff7fe5f0>
  806ccc:	003fad06 	br	806b84 <__alt_mem_onchip_mem+0xff7feb84>
  806cd0:	d9c01117 	ldw	r7,68(sp)
  806cd4:	3801bc26 	beq	r7,zero,8073c8 <_dtoa_r+0x1480>
  806cd8:	10810cc4 	addi	r2,r2,1075
  806cdc:	dd400a17 	ldw	r21,40(sp)
  806ce0:	dd000817 	ldw	r20,32(sp)
  806ce4:	003f0a06 	br	806910 <__alt_mem_onchip_mem+0xff7fe910>
  806ce8:	00800704 	movi	r2,28
  806cec:	d9000817 	ldw	r4,32(sp)
  806cf0:	a0a9883a 	add	r20,r20,r2
  806cf4:	b0ad883a 	add	r22,r22,r2
  806cf8:	2089883a 	add	r4,r4,r2
  806cfc:	d9000815 	stw	r4,32(sp)
  806d00:	003f5106 	br	806a48 <__alt_mem_onchip_mem+0xff7fea48>
  806d04:	d8c00317 	ldw	r3,12(sp)
  806d08:	b8c1fc0e 	bge	r23,r3,8074fc <_dtoa_r+0x15b4>
  806d0c:	0027883a 	mov	r19,zero
  806d10:	b805883a 	mov	r2,r23
  806d14:	003f3e06 	br	806a10 <__alt_mem_onchip_mem+0xff7fea10>
  806d18:	880b883a 	mov	r5,r17
  806d1c:	e009883a 	mov	r4,fp
  806d20:	000f883a 	mov	r7,zero
  806d24:	01800284 	movi	r6,10
  806d28:	08089000 	call	808900 <__multadd>
  806d2c:	d9000c17 	ldw	r4,48(sp)
  806d30:	1023883a 	mov	r17,r2
  806d34:	0102040e 	bge	zero,r4,807548 <_dtoa_r+0x1600>
  806d38:	d9000615 	stw	r4,24(sp)
  806d3c:	0500050e 	bge	zero,r20,806d54 <_dtoa_r+0xe0c>
  806d40:	880b883a 	mov	r5,r17
  806d44:	a00d883a 	mov	r6,r20
  806d48:	e009883a 	mov	r4,fp
  806d4c:	0808fb00 	call	808fb0 <__lshift>
  806d50:	1023883a 	mov	r17,r2
  806d54:	9801241e 	bne	r19,zero,8071e8 <_dtoa_r+0x12a0>
  806d58:	8829883a 	mov	r20,r17
  806d5c:	d9000617 	ldw	r4,24(sp)
  806d60:	dcc00717 	ldw	r19,28(sp)
  806d64:	9480004c 	andi	r18,r18,1
  806d68:	20bfffc4 	addi	r2,r4,-1
  806d6c:	9885883a 	add	r2,r19,r2
  806d70:	d8800415 	stw	r2,16(sp)
  806d74:	dc800615 	stw	r18,24(sp)
  806d78:	a80b883a 	mov	r5,r21
  806d7c:	8009883a 	mov	r4,r16
  806d80:	0805d480 	call	805d48 <quorem>
  806d84:	880b883a 	mov	r5,r17
  806d88:	8009883a 	mov	r4,r16
  806d8c:	102f883a 	mov	r23,r2
  806d90:	08090f80 	call	8090f8 <__mcmp>
  806d94:	a80b883a 	mov	r5,r21
  806d98:	a00d883a 	mov	r6,r20
  806d9c:	e009883a 	mov	r4,fp
  806da0:	102d883a 	mov	r22,r2
  806da4:	08091580 	call	809158 <__mdiff>
  806da8:	1007883a 	mov	r3,r2
  806dac:	10800317 	ldw	r2,12(r2)
  806db0:	bc800c04 	addi	r18,r23,48
  806db4:	180b883a 	mov	r5,r3
  806db8:	10004e1e 	bne	r2,zero,806ef4 <_dtoa_r+0xfac>
  806dbc:	8009883a 	mov	r4,r16
  806dc0:	d8c01615 	stw	r3,88(sp)
  806dc4:	08090f80 	call	8090f8 <__mcmp>
  806dc8:	d8c01617 	ldw	r3,88(sp)
  806dcc:	e009883a 	mov	r4,fp
  806dd0:	d8801615 	stw	r2,88(sp)
  806dd4:	180b883a 	mov	r5,r3
  806dd8:	08088d80 	call	8088d8 <_Bfree>
  806ddc:	d8801617 	ldw	r2,88(sp)
  806de0:	1000041e 	bne	r2,zero,806df4 <_dtoa_r+0xeac>
  806de4:	d9800317 	ldw	r6,12(sp)
  806de8:	3000021e 	bne	r6,zero,806df4 <_dtoa_r+0xeac>
  806dec:	d8c00617 	ldw	r3,24(sp)
  806df0:	18003726 	beq	r3,zero,806ed0 <_dtoa_r+0xf88>
  806df4:	b0002016 	blt	r22,zero,806e78 <_dtoa_r+0xf30>
  806df8:	b000041e 	bne	r22,zero,806e0c <_dtoa_r+0xec4>
  806dfc:	d9000317 	ldw	r4,12(sp)
  806e00:	2000021e 	bne	r4,zero,806e0c <_dtoa_r+0xec4>
  806e04:	d8c00617 	ldw	r3,24(sp)
  806e08:	18001b26 	beq	r3,zero,806e78 <_dtoa_r+0xf30>
  806e0c:	00810716 	blt	zero,r2,80722c <_dtoa_r+0x12e4>
  806e10:	d8c00417 	ldw	r3,16(sp)
  806e14:	9d800044 	addi	r22,r19,1
  806e18:	9c800005 	stb	r18,0(r19)
  806e1c:	b02f883a 	mov	r23,r22
  806e20:	98c10626 	beq	r19,r3,80723c <_dtoa_r+0x12f4>
  806e24:	800b883a 	mov	r5,r16
  806e28:	000f883a 	mov	r7,zero
  806e2c:	01800284 	movi	r6,10
  806e30:	e009883a 	mov	r4,fp
  806e34:	08089000 	call	808900 <__multadd>
  806e38:	1021883a 	mov	r16,r2
  806e3c:	000f883a 	mov	r7,zero
  806e40:	01800284 	movi	r6,10
  806e44:	880b883a 	mov	r5,r17
  806e48:	e009883a 	mov	r4,fp
  806e4c:	8d002526 	beq	r17,r20,806ee4 <_dtoa_r+0xf9c>
  806e50:	08089000 	call	808900 <__multadd>
  806e54:	a00b883a 	mov	r5,r20
  806e58:	000f883a 	mov	r7,zero
  806e5c:	01800284 	movi	r6,10
  806e60:	e009883a 	mov	r4,fp
  806e64:	1023883a 	mov	r17,r2
  806e68:	08089000 	call	808900 <__multadd>
  806e6c:	1029883a 	mov	r20,r2
  806e70:	b027883a 	mov	r19,r22
  806e74:	003fc006 	br	806d78 <__alt_mem_onchip_mem+0xff7fed78>
  806e78:	9011883a 	mov	r8,r18
  806e7c:	00800e0e 	bge	zero,r2,806eb8 <_dtoa_r+0xf70>
  806e80:	800b883a 	mov	r5,r16
  806e84:	01800044 	movi	r6,1
  806e88:	e009883a 	mov	r4,fp
  806e8c:	da001715 	stw	r8,92(sp)
  806e90:	0808fb00 	call	808fb0 <__lshift>
  806e94:	a80b883a 	mov	r5,r21
  806e98:	1009883a 	mov	r4,r2
  806e9c:	1021883a 	mov	r16,r2
  806ea0:	08090f80 	call	8090f8 <__mcmp>
  806ea4:	da001717 	ldw	r8,92(sp)
  806ea8:	0081960e 	bge	zero,r2,807504 <_dtoa_r+0x15bc>
  806eac:	00800e44 	movi	r2,57
  806eb0:	40817026 	beq	r8,r2,807474 <_dtoa_r+0x152c>
  806eb4:	ba000c44 	addi	r8,r23,49
  806eb8:	8825883a 	mov	r18,r17
  806ebc:	9dc00044 	addi	r23,r19,1
  806ec0:	9a000005 	stb	r8,0(r19)
  806ec4:	a023883a 	mov	r17,r20
  806ec8:	dc000915 	stw	r16,36(sp)
  806ecc:	003f2406 	br	806b60 <__alt_mem_onchip_mem+0xff7feb60>
  806ed0:	00800e44 	movi	r2,57
  806ed4:	9011883a 	mov	r8,r18
  806ed8:	90816626 	beq	r18,r2,807474 <_dtoa_r+0x152c>
  806edc:	05bff516 	blt	zero,r22,806eb4 <__alt_mem_onchip_mem+0xff7feeb4>
  806ee0:	003ff506 	br	806eb8 <__alt_mem_onchip_mem+0xff7feeb8>
  806ee4:	08089000 	call	808900 <__multadd>
  806ee8:	1023883a 	mov	r17,r2
  806eec:	1029883a 	mov	r20,r2
  806ef0:	003fdf06 	br	806e70 <__alt_mem_onchip_mem+0xff7fee70>
  806ef4:	e009883a 	mov	r4,fp
  806ef8:	08088d80 	call	8088d8 <_Bfree>
  806efc:	00800044 	movi	r2,1
  806f00:	003fbc06 	br	806df4 <__alt_mem_onchip_mem+0xff7fedf4>
  806f04:	a80b883a 	mov	r5,r21
  806f08:	8009883a 	mov	r4,r16
  806f0c:	08090f80 	call	8090f8 <__mcmp>
  806f10:	103edb0e 	bge	r2,zero,806a80 <__alt_mem_onchip_mem+0xff7fea80>
  806f14:	800b883a 	mov	r5,r16
  806f18:	000f883a 	mov	r7,zero
  806f1c:	01800284 	movi	r6,10
  806f20:	e009883a 	mov	r4,fp
  806f24:	08089000 	call	808900 <__multadd>
  806f28:	1021883a 	mov	r16,r2
  806f2c:	d8800517 	ldw	r2,20(sp)
  806f30:	d8c00b17 	ldw	r3,44(sp)
  806f34:	10bfffc4 	addi	r2,r2,-1
  806f38:	d8800515 	stw	r2,20(sp)
  806f3c:	183f761e 	bne	r3,zero,806d18 <__alt_mem_onchip_mem+0xff7fed18>
  806f40:	d9000c17 	ldw	r4,48(sp)
  806f44:	0101730e 	bge	zero,r4,807514 <_dtoa_r+0x15cc>
  806f48:	d9000615 	stw	r4,24(sp)
  806f4c:	003ed006 	br	806a90 <__alt_mem_onchip_mem+0xff7fea90>
  806f50:	00800084 	movi	r2,2
  806f54:	3081861e 	bne	r6,r2,807570 <_dtoa_r+0x1628>
  806f58:	d8000b15 	stw	zero,44(sp)
  806f5c:	003f3c06 	br	806c50 <__alt_mem_onchip_mem+0xff7fec50>
  806f60:	dc000917 	ldw	r16,36(sp)
  806f64:	003e9206 	br	8069b0 <__alt_mem_onchip_mem+0xff7fe9b0>
  806f68:	d9c00317 	ldw	r7,12(sp)
  806f6c:	00800084 	movi	r2,2
  806f70:	11fec50e 	bge	r2,r7,806a88 <__alt_mem_onchip_mem+0xff7fea88>
  806f74:	d9000617 	ldw	r4,24(sp)
  806f78:	20013c1e 	bne	r4,zero,80746c <_dtoa_r+0x1524>
  806f7c:	a80b883a 	mov	r5,r21
  806f80:	000f883a 	mov	r7,zero
  806f84:	01800144 	movi	r6,5
  806f88:	e009883a 	mov	r4,fp
  806f8c:	08089000 	call	808900 <__multadd>
  806f90:	100b883a 	mov	r5,r2
  806f94:	8009883a 	mov	r4,r16
  806f98:	102b883a 	mov	r21,r2
  806f9c:	08090f80 	call	8090f8 <__mcmp>
  806fa0:	dc000915 	stw	r16,36(sp)
  806fa4:	00bf410e 	bge	zero,r2,806cac <__alt_mem_onchip_mem+0xff7fecac>
  806fa8:	d9c00717 	ldw	r7,28(sp)
  806fac:	00800c44 	movi	r2,49
  806fb0:	38800005 	stb	r2,0(r7)
  806fb4:	d8800517 	ldw	r2,20(sp)
  806fb8:	3dc00044 	addi	r23,r7,1
  806fbc:	10800044 	addi	r2,r2,1
  806fc0:	d8800515 	stw	r2,20(sp)
  806fc4:	003f3d06 	br	806cbc <__alt_mem_onchip_mem+0xff7fecbc>
  806fc8:	d9800517 	ldw	r6,20(sp)
  806fcc:	d9c00717 	ldw	r7,28(sp)
  806fd0:	00800c44 	movi	r2,49
  806fd4:	31800044 	addi	r6,r6,1
  806fd8:	d9800515 	stw	r6,20(sp)
  806fdc:	38800005 	stb	r2,0(r7)
  806fe0:	003edf06 	br	806b60 <__alt_mem_onchip_mem+0xff7feb60>
  806fe4:	d8000b15 	stw	zero,44(sp)
  806fe8:	003c9f06 	br	806268 <__alt_mem_onchip_mem+0xff7fe268>
  806fec:	903e7e1e 	bne	r18,zero,8069e8 <__alt_mem_onchip_mem+0xff7fe9e8>
  806ff0:	00800434 	movhi	r2,16
  806ff4:	10bfffc4 	addi	r2,r2,-1
  806ff8:	9884703a 	and	r2,r19,r2
  806ffc:	1000ea1e 	bne	r2,zero,8073a8 <_dtoa_r+0x1460>
  807000:	9cdffc2c 	andhi	r19,r19,32752
  807004:	9800e826 	beq	r19,zero,8073a8 <_dtoa_r+0x1460>
  807008:	d9c00817 	ldw	r7,32(sp)
  80700c:	b5800044 	addi	r22,r22,1
  807010:	04c00044 	movi	r19,1
  807014:	39c00044 	addi	r7,r7,1
  807018:	d9c00815 	stw	r7,32(sp)
  80701c:	d8800d17 	ldw	r2,52(sp)
  807020:	103e721e 	bne	r2,zero,8069ec <__alt_mem_onchip_mem+0xff7fe9ec>
  807024:	00800044 	movi	r2,1
  807028:	003e7906 	br	806a10 <__alt_mem_onchip_mem+0xff7fea10>
  80702c:	8009883a 	mov	r4,r16
  807030:	080ea040 	call	80ea04 <__floatsidf>
  807034:	d9800f17 	ldw	r6,60(sp)
  807038:	d9c01017 	ldw	r7,64(sp)
  80703c:	1009883a 	mov	r4,r2
  807040:	180b883a 	mov	r5,r3
  807044:	080d9700 	call	80d970 <__muldf3>
  807048:	000d883a 	mov	r6,zero
  80704c:	01d00734 	movhi	r7,16412
  807050:	1009883a 	mov	r4,r2
  807054:	180b883a 	mov	r5,r3
  807058:	080c5840 	call	80c584 <__adddf3>
  80705c:	047f3034 	movhi	r17,64704
  807060:	1021883a 	mov	r16,r2
  807064:	1c63883a 	add	r17,r3,r17
  807068:	d9000f17 	ldw	r4,60(sp)
  80706c:	d9401017 	ldw	r5,64(sp)
  807070:	000d883a 	mov	r6,zero
  807074:	01d00534 	movhi	r7,16404
  807078:	080e0880 	call	80e088 <__subdf3>
  80707c:	800d883a 	mov	r6,r16
  807080:	880f883a 	mov	r7,r17
  807084:	1009883a 	mov	r4,r2
  807088:	180b883a 	mov	r5,r3
  80708c:	102b883a 	mov	r21,r2
  807090:	1829883a 	mov	r20,r3
  807094:	080d7a00 	call	80d7a0 <__gedf2>
  807098:	00806c16 	blt	zero,r2,80724c <_dtoa_r+0x1304>
  80709c:	89e0003c 	xorhi	r7,r17,32768
  8070a0:	800d883a 	mov	r6,r16
  8070a4:	a809883a 	mov	r4,r21
  8070a8:	a00b883a 	mov	r5,r20
  8070ac:	080d87c0 	call	80d87c <__ledf2>
  8070b0:	103d7e0e 	bge	r2,zero,8066ac <__alt_mem_onchip_mem+0xff7fe6ac>
  8070b4:	002b883a 	mov	r21,zero
  8070b8:	0023883a 	mov	r17,zero
  8070bc:	003efb06 	br	806cac <__alt_mem_onchip_mem+0xff7fecac>
  8070c0:	d8800717 	ldw	r2,28(sp)
  8070c4:	003bd006 	br	806008 <__alt_mem_onchip_mem+0xff7fe008>
  8070c8:	d9000a17 	ldw	r4,40(sp)
  8070cc:	d9800d17 	ldw	r6,52(sp)
  8070d0:	dd400a15 	stw	r21,40(sp)
  8070d4:	a905c83a 	sub	r2,r21,r4
  8070d8:	308d883a 	add	r6,r6,r2
  8070dc:	d9800d15 	stw	r6,52(sp)
  8070e0:	002b883a 	mov	r21,zero
  8070e4:	003e0606 	br	806900 <__alt_mem_onchip_mem+0xff7fe900>
  8070e8:	9023883a 	mov	r17,r18
  8070ec:	9829883a 	mov	r20,r19
  8070f0:	04000084 	movi	r16,2
  8070f4:	003c9206 	br	806340 <__alt_mem_onchip_mem+0xff7fe340>
  8070f8:	04000044 	movi	r16,1
  8070fc:	dc000c15 	stw	r16,48(sp)
  807100:	dc000615 	stw	r16,24(sp)
  807104:	dc002215 	stw	r16,136(sp)
  807108:	e0001115 	stw	zero,68(fp)
  80710c:	000b883a 	mov	r5,zero
  807110:	003c6906 	br	8062b8 <__alt_mem_onchip_mem+0xff7fe2b8>
  807114:	3021883a 	mov	r16,r6
  807118:	003ffb06 	br	807108 <__alt_mem_onchip_mem+0xff7ff108>
  80711c:	1000021e 	bne	r2,zero,807128 <_dtoa_r+0x11e0>
  807120:	4200004c 	andi	r8,r8,1
  807124:	403e7d1e 	bne	r8,zero,806b1c <__alt_mem_onchip_mem+0xff7feb1c>
  807128:	01000c04 	movi	r4,48
  80712c:	00000106 	br	807134 <_dtoa_r+0x11ec>
  807130:	102f883a 	mov	r23,r2
  807134:	b8bfffc4 	addi	r2,r23,-1
  807138:	10c00007 	ldb	r3,0(r2)
  80713c:	193ffc26 	beq	r3,r4,807130 <__alt_mem_onchip_mem+0xff7ff130>
  807140:	003e8706 	br	806b60 <__alt_mem_onchip_mem+0xff7feb60>
  807144:	d8800517 	ldw	r2,20(sp)
  807148:	00a3c83a 	sub	r17,zero,r2
  80714c:	8800a426 	beq	r17,zero,8073e0 <_dtoa_r+0x1498>
  807150:	888003cc 	andi	r2,r17,15
  807154:	100490fa 	slli	r2,r2,3
  807158:	00c02074 	movhi	r3,129
  80715c:	18cccb04 	addi	r3,r3,13100
  807160:	1885883a 	add	r2,r3,r2
  807164:	11800017 	ldw	r6,0(r2)
  807168:	11c00117 	ldw	r7,4(r2)
  80716c:	9009883a 	mov	r4,r18
  807170:	980b883a 	mov	r5,r19
  807174:	8823d13a 	srai	r17,r17,4
  807178:	080d9700 	call	80d970 <__muldf3>
  80717c:	d8800f15 	stw	r2,60(sp)
  807180:	d8c01015 	stw	r3,64(sp)
  807184:	8800e826 	beq	r17,zero,807528 <_dtoa_r+0x15e0>
  807188:	05002074 	movhi	r20,129
  80718c:	a50cc104 	addi	r20,r20,13060
  807190:	04000084 	movi	r16,2
  807194:	8980004c 	andi	r6,r17,1
  807198:	1009883a 	mov	r4,r2
  80719c:	8823d07a 	srai	r17,r17,1
  8071a0:	180b883a 	mov	r5,r3
  8071a4:	30000426 	beq	r6,zero,8071b8 <_dtoa_r+0x1270>
  8071a8:	a1800017 	ldw	r6,0(r20)
  8071ac:	a1c00117 	ldw	r7,4(r20)
  8071b0:	84000044 	addi	r16,r16,1
  8071b4:	080d9700 	call	80d970 <__muldf3>
  8071b8:	a5000204 	addi	r20,r20,8
  8071bc:	883ff51e 	bne	r17,zero,807194 <__alt_mem_onchip_mem+0xff7ff194>
  8071c0:	d8800f15 	stw	r2,60(sp)
  8071c4:	d8c01015 	stw	r3,64(sp)
  8071c8:	003c7606 	br	8063a4 <__alt_mem_onchip_mem+0xff7fe3a4>
  8071cc:	00c00c04 	movi	r3,48
  8071d0:	10c00005 	stb	r3,0(r2)
  8071d4:	d8c00517 	ldw	r3,20(sp)
  8071d8:	bd3fffc3 	ldbu	r20,-1(r23)
  8071dc:	18c00044 	addi	r3,r3,1
  8071e0:	d8c00515 	stw	r3,20(sp)
  8071e4:	003db906 	br	8068cc <__alt_mem_onchip_mem+0xff7fe8cc>
  8071e8:	89400117 	ldw	r5,4(r17)
  8071ec:	e009883a 	mov	r4,fp
  8071f0:	08088300 	call	808830 <_Balloc>
  8071f4:	89800417 	ldw	r6,16(r17)
  8071f8:	89400304 	addi	r5,r17,12
  8071fc:	11000304 	addi	r4,r2,12
  807200:	31800084 	addi	r6,r6,2
  807204:	318d883a 	add	r6,r6,r6
  807208:	318d883a 	add	r6,r6,r6
  80720c:	1027883a 	mov	r19,r2
  807210:	080858c0 	call	80858c <memcpy>
  807214:	01800044 	movi	r6,1
  807218:	980b883a 	mov	r5,r19
  80721c:	e009883a 	mov	r4,fp
  807220:	0808fb00 	call	808fb0 <__lshift>
  807224:	1029883a 	mov	r20,r2
  807228:	003ecc06 	br	806d5c <__alt_mem_onchip_mem+0xff7fed5c>
  80722c:	00800e44 	movi	r2,57
  807230:	90809026 	beq	r18,r2,807474 <_dtoa_r+0x152c>
  807234:	92000044 	addi	r8,r18,1
  807238:	003f1f06 	br	806eb8 <__alt_mem_onchip_mem+0xff7feeb8>
  80723c:	9011883a 	mov	r8,r18
  807240:	8825883a 	mov	r18,r17
  807244:	a023883a 	mov	r17,r20
  807248:	003e2906 	br	806af0 <__alt_mem_onchip_mem+0xff7feaf0>
  80724c:	002b883a 	mov	r21,zero
  807250:	0023883a 	mov	r17,zero
  807254:	003f5406 	br	806fa8 <__alt_mem_onchip_mem+0xff7fefa8>
  807258:	61bfffc4 	addi	r6,r12,-1
  80725c:	300490fa 	slli	r2,r6,3
  807260:	00c02074 	movhi	r3,129
  807264:	18cccb04 	addi	r3,r3,13100
  807268:	1885883a 	add	r2,r3,r2
  80726c:	11000017 	ldw	r4,0(r2)
  807270:	11400117 	ldw	r5,4(r2)
  807274:	d8800717 	ldw	r2,28(sp)
  807278:	880f883a 	mov	r7,r17
  80727c:	d9801215 	stw	r6,72(sp)
  807280:	800d883a 	mov	r6,r16
  807284:	db001615 	stw	r12,88(sp)
  807288:	15c00044 	addi	r23,r2,1
  80728c:	080d9700 	call	80d970 <__muldf3>
  807290:	d9401017 	ldw	r5,64(sp)
  807294:	d9000f17 	ldw	r4,60(sp)
  807298:	d8c01515 	stw	r3,84(sp)
  80729c:	d8801415 	stw	r2,80(sp)
  8072a0:	080e9840 	call	80e984 <__fixdfsi>
  8072a4:	1009883a 	mov	r4,r2
  8072a8:	1021883a 	mov	r16,r2
  8072ac:	080ea040 	call	80ea04 <__floatsidf>
  8072b0:	d9000f17 	ldw	r4,60(sp)
  8072b4:	d9401017 	ldw	r5,64(sp)
  8072b8:	100d883a 	mov	r6,r2
  8072bc:	180f883a 	mov	r7,r3
  8072c0:	080e0880 	call	80e088 <__subdf3>
  8072c4:	1829883a 	mov	r20,r3
  8072c8:	d8c00717 	ldw	r3,28(sp)
  8072cc:	84000c04 	addi	r16,r16,48
  8072d0:	1023883a 	mov	r17,r2
  8072d4:	1c000005 	stb	r16,0(r3)
  8072d8:	db001617 	ldw	r12,88(sp)
  8072dc:	00800044 	movi	r2,1
  8072e0:	60802226 	beq	r12,r2,80736c <_dtoa_r+0x1424>
  8072e4:	d9c00717 	ldw	r7,28(sp)
  8072e8:	8805883a 	mov	r2,r17
  8072ec:	b82b883a 	mov	r21,r23
  8072f0:	3b19883a 	add	r12,r7,r12
  8072f4:	6023883a 	mov	r17,r12
  8072f8:	a007883a 	mov	r3,r20
  8072fc:	dc800f15 	stw	r18,60(sp)
  807300:	000d883a 	mov	r6,zero
  807304:	01d00934 	movhi	r7,16420
  807308:	1009883a 	mov	r4,r2
  80730c:	180b883a 	mov	r5,r3
  807310:	080d9700 	call	80d970 <__muldf3>
  807314:	180b883a 	mov	r5,r3
  807318:	1009883a 	mov	r4,r2
  80731c:	1829883a 	mov	r20,r3
  807320:	1025883a 	mov	r18,r2
  807324:	080e9840 	call	80e984 <__fixdfsi>
  807328:	1009883a 	mov	r4,r2
  80732c:	1021883a 	mov	r16,r2
  807330:	080ea040 	call	80ea04 <__floatsidf>
  807334:	100d883a 	mov	r6,r2
  807338:	180f883a 	mov	r7,r3
  80733c:	9009883a 	mov	r4,r18
  807340:	a00b883a 	mov	r5,r20
  807344:	84000c04 	addi	r16,r16,48
  807348:	080e0880 	call	80e088 <__subdf3>
  80734c:	ad400044 	addi	r21,r21,1
  807350:	ac3fffc5 	stb	r16,-1(r21)
  807354:	ac7fea1e 	bne	r21,r17,807300 <__alt_mem_onchip_mem+0xff7ff300>
  807358:	1023883a 	mov	r17,r2
  80735c:	d8801217 	ldw	r2,72(sp)
  807360:	dc800f17 	ldw	r18,60(sp)
  807364:	1829883a 	mov	r20,r3
  807368:	b8af883a 	add	r23,r23,r2
  80736c:	d9001417 	ldw	r4,80(sp)
  807370:	d9401517 	ldw	r5,84(sp)
  807374:	000d883a 	mov	r6,zero
  807378:	01cff834 	movhi	r7,16352
  80737c:	080c5840 	call	80c584 <__adddf3>
  807380:	880d883a 	mov	r6,r17
  807384:	a00f883a 	mov	r7,r20
  807388:	1009883a 	mov	r4,r2
  80738c:	180b883a 	mov	r5,r3
  807390:	080d87c0 	call	80d87c <__ledf2>
  807394:	10003e0e 	bge	r2,zero,807490 <_dtoa_r+0x1548>
  807398:	d9001317 	ldw	r4,76(sp)
  80739c:	bd3fffc3 	ldbu	r20,-1(r23)
  8073a0:	d9000515 	stw	r4,20(sp)
  8073a4:	003d3b06 	br	806894 <__alt_mem_onchip_mem+0xff7fe894>
  8073a8:	0027883a 	mov	r19,zero
  8073ac:	003f1b06 	br	80701c <__alt_mem_onchip_mem+0xff7ff01c>
  8073b0:	d8800817 	ldw	r2,32(sp)
  8073b4:	11e9c83a 	sub	r20,r2,r7
  8073b8:	0005883a 	mov	r2,zero
  8073bc:	003d5406 	br	806910 <__alt_mem_onchip_mem+0xff7fe910>
  8073c0:	00800044 	movi	r2,1
  8073c4:	003dc706 	br	806ae4 <__alt_mem_onchip_mem+0xff7feae4>
  8073c8:	d8c00217 	ldw	r3,8(sp)
  8073cc:	00800d84 	movi	r2,54
  8073d0:	dd400a17 	ldw	r21,40(sp)
  8073d4:	10c5c83a 	sub	r2,r2,r3
  8073d8:	dd000817 	ldw	r20,32(sp)
  8073dc:	003d4c06 	br	806910 <__alt_mem_onchip_mem+0xff7fe910>
  8073e0:	dc800f15 	stw	r18,60(sp)
  8073e4:	dcc01015 	stw	r19,64(sp)
  8073e8:	04000084 	movi	r16,2
  8073ec:	003bed06 	br	8063a4 <__alt_mem_onchip_mem+0xff7fe3a4>
  8073f0:	d9000617 	ldw	r4,24(sp)
  8073f4:	203f0d26 	beq	r4,zero,80702c <__alt_mem_onchip_mem+0xff7ff02c>
  8073f8:	d9800c17 	ldw	r6,48(sp)
  8073fc:	01bcab0e 	bge	zero,r6,8066ac <__alt_mem_onchip_mem+0xff7fe6ac>
  807400:	d9401017 	ldw	r5,64(sp)
  807404:	d9000f17 	ldw	r4,60(sp)
  807408:	000d883a 	mov	r6,zero
  80740c:	01d00934 	movhi	r7,16420
  807410:	080d9700 	call	80d970 <__muldf3>
  807414:	81000044 	addi	r4,r16,1
  807418:	d8800f15 	stw	r2,60(sp)
  80741c:	d8c01015 	stw	r3,64(sp)
  807420:	080ea040 	call	80ea04 <__floatsidf>
  807424:	d9800f17 	ldw	r6,60(sp)
  807428:	d9c01017 	ldw	r7,64(sp)
  80742c:	1009883a 	mov	r4,r2
  807430:	180b883a 	mov	r5,r3
  807434:	080d9700 	call	80d970 <__muldf3>
  807438:	01d00734 	movhi	r7,16412
  80743c:	000d883a 	mov	r6,zero
  807440:	1009883a 	mov	r4,r2
  807444:	180b883a 	mov	r5,r3
  807448:	080c5840 	call	80c584 <__adddf3>
  80744c:	d9c00517 	ldw	r7,20(sp)
  807450:	047f3034 	movhi	r17,64704
  807454:	1021883a 	mov	r16,r2
  807458:	39ffffc4 	addi	r7,r7,-1
  80745c:	d9c01315 	stw	r7,76(sp)
  807460:	1c63883a 	add	r17,r3,r17
  807464:	db000c17 	ldw	r12,48(sp)
  807468:	003bea06 	br	806414 <__alt_mem_onchip_mem+0xff7fe414>
  80746c:	dc000915 	stw	r16,36(sp)
  807470:	003e0e06 	br	806cac <__alt_mem_onchip_mem+0xff7fecac>
  807474:	01000e44 	movi	r4,57
  807478:	8825883a 	mov	r18,r17
  80747c:	9dc00044 	addi	r23,r19,1
  807480:	99000005 	stb	r4,0(r19)
  807484:	a023883a 	mov	r17,r20
  807488:	dc000915 	stw	r16,36(sp)
  80748c:	003da406 	br	806b20 <__alt_mem_onchip_mem+0xff7feb20>
  807490:	d9801417 	ldw	r6,80(sp)
  807494:	d9c01517 	ldw	r7,84(sp)
  807498:	0009883a 	mov	r4,zero
  80749c:	014ff834 	movhi	r5,16352
  8074a0:	080e0880 	call	80e088 <__subdf3>
  8074a4:	880d883a 	mov	r6,r17
  8074a8:	a00f883a 	mov	r7,r20
  8074ac:	1009883a 	mov	r4,r2
  8074b0:	180b883a 	mov	r5,r3
  8074b4:	080d7a00 	call	80d7a0 <__gedf2>
  8074b8:	00bc7c0e 	bge	zero,r2,8066ac <__alt_mem_onchip_mem+0xff7fe6ac>
  8074bc:	01000c04 	movi	r4,48
  8074c0:	00000106 	br	8074c8 <_dtoa_r+0x1580>
  8074c4:	102f883a 	mov	r23,r2
  8074c8:	b8bfffc4 	addi	r2,r23,-1
  8074cc:	10c00007 	ldb	r3,0(r2)
  8074d0:	193ffc26 	beq	r3,r4,8074c4 <__alt_mem_onchip_mem+0xff7ff4c4>
  8074d4:	d9801317 	ldw	r6,76(sp)
  8074d8:	d9800515 	stw	r6,20(sp)
  8074dc:	003c4406 	br	8065f0 <__alt_mem_onchip_mem+0xff7fe5f0>
  8074e0:	d9801317 	ldw	r6,76(sp)
  8074e4:	d9800515 	stw	r6,20(sp)
  8074e8:	003cea06 	br	806894 <__alt_mem_onchip_mem+0xff7fe894>
  8074ec:	dd800f17 	ldw	r22,60(sp)
  8074f0:	dcc01017 	ldw	r19,64(sp)
  8074f4:	dc801217 	ldw	r18,72(sp)
  8074f8:	003c6c06 	br	8066ac <__alt_mem_onchip_mem+0xff7fe6ac>
  8074fc:	903e031e 	bne	r18,zero,806d0c <__alt_mem_onchip_mem+0xff7fed0c>
  807500:	003ebb06 	br	806ff0 <__alt_mem_onchip_mem+0xff7feff0>
  807504:	103e6c1e 	bne	r2,zero,806eb8 <__alt_mem_onchip_mem+0xff7feeb8>
  807508:	4080004c 	andi	r2,r8,1
  80750c:	103e6a26 	beq	r2,zero,806eb8 <__alt_mem_onchip_mem+0xff7feeb8>
  807510:	003e6606 	br	806eac <__alt_mem_onchip_mem+0xff7feeac>
  807514:	d8c00317 	ldw	r3,12(sp)
  807518:	00800084 	movi	r2,2
  80751c:	10c02916 	blt	r2,r3,8075c4 <_dtoa_r+0x167c>
  807520:	d9000c17 	ldw	r4,48(sp)
  807524:	003e8806 	br	806f48 <__alt_mem_onchip_mem+0xff7fef48>
  807528:	04000084 	movi	r16,2
  80752c:	003b9d06 	br	8063a4 <__alt_mem_onchip_mem+0xff7fe3a4>
  807530:	d9001317 	ldw	r4,76(sp)
  807534:	d9000515 	stw	r4,20(sp)
  807538:	003cd606 	br	806894 <__alt_mem_onchip_mem+0xff7fe894>
  80753c:	d8801317 	ldw	r2,76(sp)
  807540:	d8800515 	stw	r2,20(sp)
  807544:	003c2a06 	br	8065f0 <__alt_mem_onchip_mem+0xff7fe5f0>
  807548:	d9800317 	ldw	r6,12(sp)
  80754c:	00800084 	movi	r2,2
  807550:	11801516 	blt	r2,r6,8075a8 <_dtoa_r+0x1660>
  807554:	d9c00c17 	ldw	r7,48(sp)
  807558:	d9c00615 	stw	r7,24(sp)
  80755c:	003df706 	br	806d3c <__alt_mem_onchip_mem+0xff7fed3c>
  807560:	193d3926 	beq	r3,r4,806a48 <__alt_mem_onchip_mem+0xff7fea48>
  807564:	00c00f04 	movi	r3,60
  807568:	1885c83a 	sub	r2,r3,r2
  80756c:	003ddf06 	br	806cec <__alt_mem_onchip_mem+0xff7fecec>
  807570:	e009883a 	mov	r4,fp
  807574:	e0001115 	stw	zero,68(fp)
  807578:	000b883a 	mov	r5,zero
  80757c:	08088300 	call	808830 <_Balloc>
  807580:	d8800715 	stw	r2,28(sp)
  807584:	d8c00717 	ldw	r3,28(sp)
  807588:	00bfffc4 	movi	r2,-1
  80758c:	01000044 	movi	r4,1
  807590:	d8800c15 	stw	r2,48(sp)
  807594:	e0c01015 	stw	r3,64(fp)
  807598:	d9000b15 	stw	r4,44(sp)
  80759c:	d8800615 	stw	r2,24(sp)
  8075a0:	d8002215 	stw	zero,136(sp)
  8075a4:	003c4106 	br	8066ac <__alt_mem_onchip_mem+0xff7fe6ac>
  8075a8:	d8c00c17 	ldw	r3,48(sp)
  8075ac:	d8c00615 	stw	r3,24(sp)
  8075b0:	003e7006 	br	806f74 <__alt_mem_onchip_mem+0xff7fef74>
  8075b4:	04400044 	movi	r17,1
  8075b8:	003b2006 	br	80623c <__alt_mem_onchip_mem+0xff7fe23c>
  8075bc:	000b883a 	mov	r5,zero
  8075c0:	003b3d06 	br	8062b8 <__alt_mem_onchip_mem+0xff7fe2b8>
  8075c4:	d8800c17 	ldw	r2,48(sp)
  8075c8:	d8800615 	stw	r2,24(sp)
  8075cc:	003e6906 	br	806f74 <__alt_mem_onchip_mem+0xff7fef74>

008075d0 <_fclose_r>:
  8075d0:	28003926 	beq	r5,zero,8076b8 <_fclose_r+0xe8>
  8075d4:	defffc04 	addi	sp,sp,-16
  8075d8:	dc400115 	stw	r17,4(sp)
  8075dc:	dc000015 	stw	r16,0(sp)
  8075e0:	dfc00315 	stw	ra,12(sp)
  8075e4:	dc800215 	stw	r18,8(sp)
  8075e8:	2023883a 	mov	r17,r4
  8075ec:	2821883a 	mov	r16,r5
  8075f0:	20000226 	beq	r4,zero,8075fc <_fclose_r+0x2c>
  8075f4:	20800e17 	ldw	r2,56(r4)
  8075f8:	10002726 	beq	r2,zero,807698 <_fclose_r+0xc8>
  8075fc:	8080030f 	ldh	r2,12(r16)
  807600:	1000071e 	bne	r2,zero,807620 <_fclose_r+0x50>
  807604:	0005883a 	mov	r2,zero
  807608:	dfc00317 	ldw	ra,12(sp)
  80760c:	dc800217 	ldw	r18,8(sp)
  807610:	dc400117 	ldw	r17,4(sp)
  807614:	dc000017 	ldw	r16,0(sp)
  807618:	dec00404 	addi	sp,sp,16
  80761c:	f800283a 	ret
  807620:	800b883a 	mov	r5,r16
  807624:	8809883a 	mov	r4,r17
  807628:	08076d40 	call	8076d4 <__sflush_r>
  80762c:	1025883a 	mov	r18,r2
  807630:	80800b17 	ldw	r2,44(r16)
  807634:	10000426 	beq	r2,zero,807648 <_fclose_r+0x78>
  807638:	81400717 	ldw	r5,28(r16)
  80763c:	8809883a 	mov	r4,r17
  807640:	103ee83a 	callr	r2
  807644:	10001616 	blt	r2,zero,8076a0 <_fclose_r+0xd0>
  807648:	8080030b 	ldhu	r2,12(r16)
  80764c:	1080200c 	andi	r2,r2,128
  807650:	1000151e 	bne	r2,zero,8076a8 <_fclose_r+0xd8>
  807654:	81400c17 	ldw	r5,48(r16)
  807658:	28000526 	beq	r5,zero,807670 <_fclose_r+0xa0>
  80765c:	80801004 	addi	r2,r16,64
  807660:	28800226 	beq	r5,r2,80766c <_fclose_r+0x9c>
  807664:	8809883a 	mov	r4,r17
  807668:	0807b4c0 	call	807b4c <_free_r>
  80766c:	80000c15 	stw	zero,48(r16)
  807670:	81401117 	ldw	r5,68(r16)
  807674:	28000326 	beq	r5,zero,807684 <_fclose_r+0xb4>
  807678:	8809883a 	mov	r4,r17
  80767c:	0807b4c0 	call	807b4c <_free_r>
  807680:	80001115 	stw	zero,68(r16)
  807684:	08019fc0 	call	8019fc <__sfp_lock_acquire>
  807688:	8000030d 	sth	zero,12(r16)
  80768c:	0801a000 	call	801a00 <__sfp_lock_release>
  807690:	9005883a 	mov	r2,r18
  807694:	003fdc06 	br	807608 <__alt_mem_onchip_mem+0xff7ff608>
  807698:	08019ec0 	call	8019ec <__sinit>
  80769c:	003fd706 	br	8075fc <__alt_mem_onchip_mem+0xff7ff5fc>
  8076a0:	04bfffc4 	movi	r18,-1
  8076a4:	003fe806 	br	807648 <__alt_mem_onchip_mem+0xff7ff648>
  8076a8:	81400417 	ldw	r5,16(r16)
  8076ac:	8809883a 	mov	r4,r17
  8076b0:	0807b4c0 	call	807b4c <_free_r>
  8076b4:	003fe706 	br	807654 <__alt_mem_onchip_mem+0xff7ff654>
  8076b8:	0005883a 	mov	r2,zero
  8076bc:	f800283a 	ret

008076c0 <fclose>:
  8076c0:	00802074 	movhi	r2,129
  8076c4:	10948104 	addi	r2,r2,20996
  8076c8:	200b883a 	mov	r5,r4
  8076cc:	11000017 	ldw	r4,0(r2)
  8076d0:	08075d01 	jmpi	8075d0 <_fclose_r>

008076d4 <__sflush_r>:
  8076d4:	2880030b 	ldhu	r2,12(r5)
  8076d8:	defffb04 	addi	sp,sp,-20
  8076dc:	dcc00315 	stw	r19,12(sp)
  8076e0:	dc400115 	stw	r17,4(sp)
  8076e4:	dfc00415 	stw	ra,16(sp)
  8076e8:	dc800215 	stw	r18,8(sp)
  8076ec:	dc000015 	stw	r16,0(sp)
  8076f0:	10c0020c 	andi	r3,r2,8
  8076f4:	2823883a 	mov	r17,r5
  8076f8:	2027883a 	mov	r19,r4
  8076fc:	1800311e 	bne	r3,zero,8077c4 <__sflush_r+0xf0>
  807700:	28c00117 	ldw	r3,4(r5)
  807704:	10820014 	ori	r2,r2,2048
  807708:	2880030d 	sth	r2,12(r5)
  80770c:	00c04b0e 	bge	zero,r3,80783c <__sflush_r+0x168>
  807710:	8a000a17 	ldw	r8,40(r17)
  807714:	40002326 	beq	r8,zero,8077a4 <__sflush_r+0xd0>
  807718:	9c000017 	ldw	r16,0(r19)
  80771c:	10c4000c 	andi	r3,r2,4096
  807720:	98000015 	stw	zero,0(r19)
  807724:	18004826 	beq	r3,zero,807848 <__sflush_r+0x174>
  807728:	89801417 	ldw	r6,80(r17)
  80772c:	10c0010c 	andi	r3,r2,4
  807730:	18000626 	beq	r3,zero,80774c <__sflush_r+0x78>
  807734:	88c00117 	ldw	r3,4(r17)
  807738:	88800c17 	ldw	r2,48(r17)
  80773c:	30cdc83a 	sub	r6,r6,r3
  807740:	10000226 	beq	r2,zero,80774c <__sflush_r+0x78>
  807744:	88800f17 	ldw	r2,60(r17)
  807748:	308dc83a 	sub	r6,r6,r2
  80774c:	89400717 	ldw	r5,28(r17)
  807750:	000f883a 	mov	r7,zero
  807754:	9809883a 	mov	r4,r19
  807758:	403ee83a 	callr	r8
  80775c:	00ffffc4 	movi	r3,-1
  807760:	10c04426 	beq	r2,r3,807874 <__sflush_r+0x1a0>
  807764:	88c0030b 	ldhu	r3,12(r17)
  807768:	89000417 	ldw	r4,16(r17)
  80776c:	88000115 	stw	zero,4(r17)
  807770:	197dffcc 	andi	r5,r3,63487
  807774:	8940030d 	sth	r5,12(r17)
  807778:	89000015 	stw	r4,0(r17)
  80777c:	18c4000c 	andi	r3,r3,4096
  807780:	18002c1e 	bne	r3,zero,807834 <__sflush_r+0x160>
  807784:	89400c17 	ldw	r5,48(r17)
  807788:	9c000015 	stw	r16,0(r19)
  80778c:	28000526 	beq	r5,zero,8077a4 <__sflush_r+0xd0>
  807790:	88801004 	addi	r2,r17,64
  807794:	28800226 	beq	r5,r2,8077a0 <__sflush_r+0xcc>
  807798:	9809883a 	mov	r4,r19
  80779c:	0807b4c0 	call	807b4c <_free_r>
  8077a0:	88000c15 	stw	zero,48(r17)
  8077a4:	0005883a 	mov	r2,zero
  8077a8:	dfc00417 	ldw	ra,16(sp)
  8077ac:	dcc00317 	ldw	r19,12(sp)
  8077b0:	dc800217 	ldw	r18,8(sp)
  8077b4:	dc400117 	ldw	r17,4(sp)
  8077b8:	dc000017 	ldw	r16,0(sp)
  8077bc:	dec00504 	addi	sp,sp,20
  8077c0:	f800283a 	ret
  8077c4:	2c800417 	ldw	r18,16(r5)
  8077c8:	903ff626 	beq	r18,zero,8077a4 <__alt_mem_onchip_mem+0xff7ff7a4>
  8077cc:	2c000017 	ldw	r16,0(r5)
  8077d0:	108000cc 	andi	r2,r2,3
  8077d4:	2c800015 	stw	r18,0(r5)
  8077d8:	84a1c83a 	sub	r16,r16,r18
  8077dc:	1000131e 	bne	r2,zero,80782c <__sflush_r+0x158>
  8077e0:	28800517 	ldw	r2,20(r5)
  8077e4:	88800215 	stw	r2,8(r17)
  8077e8:	04000316 	blt	zero,r16,8077f8 <__sflush_r+0x124>
  8077ec:	003fed06 	br	8077a4 <__alt_mem_onchip_mem+0xff7ff7a4>
  8077f0:	90a5883a 	add	r18,r18,r2
  8077f4:	043feb0e 	bge	zero,r16,8077a4 <__alt_mem_onchip_mem+0xff7ff7a4>
  8077f8:	88800917 	ldw	r2,36(r17)
  8077fc:	89400717 	ldw	r5,28(r17)
  807800:	800f883a 	mov	r7,r16
  807804:	900d883a 	mov	r6,r18
  807808:	9809883a 	mov	r4,r19
  80780c:	103ee83a 	callr	r2
  807810:	80a1c83a 	sub	r16,r16,r2
  807814:	00bff616 	blt	zero,r2,8077f0 <__alt_mem_onchip_mem+0xff7ff7f0>
  807818:	88c0030b 	ldhu	r3,12(r17)
  80781c:	00bfffc4 	movi	r2,-1
  807820:	18c01014 	ori	r3,r3,64
  807824:	88c0030d 	sth	r3,12(r17)
  807828:	003fdf06 	br	8077a8 <__alt_mem_onchip_mem+0xff7ff7a8>
  80782c:	0005883a 	mov	r2,zero
  807830:	003fec06 	br	8077e4 <__alt_mem_onchip_mem+0xff7ff7e4>
  807834:	88801415 	stw	r2,80(r17)
  807838:	003fd206 	br	807784 <__alt_mem_onchip_mem+0xff7ff784>
  80783c:	28c00f17 	ldw	r3,60(r5)
  807840:	00ffb316 	blt	zero,r3,807710 <__alt_mem_onchip_mem+0xff7ff710>
  807844:	003fd706 	br	8077a4 <__alt_mem_onchip_mem+0xff7ff7a4>
  807848:	89400717 	ldw	r5,28(r17)
  80784c:	000d883a 	mov	r6,zero
  807850:	01c00044 	movi	r7,1
  807854:	9809883a 	mov	r4,r19
  807858:	403ee83a 	callr	r8
  80785c:	100d883a 	mov	r6,r2
  807860:	00bfffc4 	movi	r2,-1
  807864:	30801426 	beq	r6,r2,8078b8 <__sflush_r+0x1e4>
  807868:	8880030b 	ldhu	r2,12(r17)
  80786c:	8a000a17 	ldw	r8,40(r17)
  807870:	003fae06 	br	80772c <__alt_mem_onchip_mem+0xff7ff72c>
  807874:	98c00017 	ldw	r3,0(r19)
  807878:	183fba26 	beq	r3,zero,807764 <__alt_mem_onchip_mem+0xff7ff764>
  80787c:	01000744 	movi	r4,29
  807880:	19000626 	beq	r3,r4,80789c <__sflush_r+0x1c8>
  807884:	01000584 	movi	r4,22
  807888:	19000426 	beq	r3,r4,80789c <__sflush_r+0x1c8>
  80788c:	88c0030b 	ldhu	r3,12(r17)
  807890:	18c01014 	ori	r3,r3,64
  807894:	88c0030d 	sth	r3,12(r17)
  807898:	003fc306 	br	8077a8 <__alt_mem_onchip_mem+0xff7ff7a8>
  80789c:	8880030b 	ldhu	r2,12(r17)
  8078a0:	88c00417 	ldw	r3,16(r17)
  8078a4:	88000115 	stw	zero,4(r17)
  8078a8:	10bdffcc 	andi	r2,r2,63487
  8078ac:	8880030d 	sth	r2,12(r17)
  8078b0:	88c00015 	stw	r3,0(r17)
  8078b4:	003fb306 	br	807784 <__alt_mem_onchip_mem+0xff7ff784>
  8078b8:	98800017 	ldw	r2,0(r19)
  8078bc:	103fea26 	beq	r2,zero,807868 <__alt_mem_onchip_mem+0xff7ff868>
  8078c0:	00c00744 	movi	r3,29
  8078c4:	10c00226 	beq	r2,r3,8078d0 <__sflush_r+0x1fc>
  8078c8:	00c00584 	movi	r3,22
  8078cc:	10c0031e 	bne	r2,r3,8078dc <__sflush_r+0x208>
  8078d0:	9c000015 	stw	r16,0(r19)
  8078d4:	0005883a 	mov	r2,zero
  8078d8:	003fb306 	br	8077a8 <__alt_mem_onchip_mem+0xff7ff7a8>
  8078dc:	88c0030b 	ldhu	r3,12(r17)
  8078e0:	3005883a 	mov	r2,r6
  8078e4:	18c01014 	ori	r3,r3,64
  8078e8:	88c0030d 	sth	r3,12(r17)
  8078ec:	003fae06 	br	8077a8 <__alt_mem_onchip_mem+0xff7ff7a8>

008078f0 <_fflush_r>:
  8078f0:	defffd04 	addi	sp,sp,-12
  8078f4:	dc000115 	stw	r16,4(sp)
  8078f8:	dfc00215 	stw	ra,8(sp)
  8078fc:	2021883a 	mov	r16,r4
  807900:	20000226 	beq	r4,zero,80790c <_fflush_r+0x1c>
  807904:	20800e17 	ldw	r2,56(r4)
  807908:	10000c26 	beq	r2,zero,80793c <_fflush_r+0x4c>
  80790c:	2880030f 	ldh	r2,12(r5)
  807910:	1000051e 	bne	r2,zero,807928 <_fflush_r+0x38>
  807914:	0005883a 	mov	r2,zero
  807918:	dfc00217 	ldw	ra,8(sp)
  80791c:	dc000117 	ldw	r16,4(sp)
  807920:	dec00304 	addi	sp,sp,12
  807924:	f800283a 	ret
  807928:	8009883a 	mov	r4,r16
  80792c:	dfc00217 	ldw	ra,8(sp)
  807930:	dc000117 	ldw	r16,4(sp)
  807934:	dec00304 	addi	sp,sp,12
  807938:	08076d41 	jmpi	8076d4 <__sflush_r>
  80793c:	d9400015 	stw	r5,0(sp)
  807940:	08019ec0 	call	8019ec <__sinit>
  807944:	d9400017 	ldw	r5,0(sp)
  807948:	003ff006 	br	80790c <__alt_mem_onchip_mem+0xff7ff90c>

0080794c <fflush>:
  80794c:	20000526 	beq	r4,zero,807964 <fflush+0x18>
  807950:	00802074 	movhi	r2,129
  807954:	10948104 	addi	r2,r2,20996
  807958:	200b883a 	mov	r5,r4
  80795c:	11000017 	ldw	r4,0(r2)
  807960:	08078f01 	jmpi	8078f0 <_fflush_r>
  807964:	00802074 	movhi	r2,129
  807968:	10948004 	addi	r2,r2,20992
  80796c:	11000017 	ldw	r4,0(r2)
  807970:	01402034 	movhi	r5,128
  807974:	295e3c04 	addi	r5,r5,30960
  807978:	08021d41 	jmpi	8021d4 <_fwalk_reent>

0080797c <__sflags>:
  80797c:	28800007 	ldb	r2,0(r5)
  807980:	00c01c84 	movi	r3,114
  807984:	10c02426 	beq	r2,r3,807a18 <__sflags+0x9c>
  807988:	00c01dc4 	movi	r3,119
  80798c:	10c01e26 	beq	r2,r3,807a08 <__sflags+0x8c>
  807990:	00c01844 	movi	r3,97
  807994:	10c00426 	beq	r2,r3,8079a8 <__sflags+0x2c>
  807998:	00800584 	movi	r2,22
  80799c:	20800015 	stw	r2,0(r4)
  8079a0:	0005883a 	mov	r2,zero
  8079a4:	f800283a 	ret
  8079a8:	02c08204 	movi	r11,520
  8079ac:	01000044 	movi	r4,1
  8079b0:	00804204 	movi	r2,264
  8079b4:	01c00ac4 	movi	r7,43
  8079b8:	02bff8c4 	movi	r10,-29
  8079bc:	027fff04 	movi	r9,-4
  8079c0:	02001e04 	movi	r8,120
  8079c4:	29400044 	addi	r5,r5,1
  8079c8:	28c00007 	ldb	r3,0(r5)
  8079cc:	18000626 	beq	r3,zero,8079e8 <__sflags+0x6c>
  8079d0:	19c00826 	beq	r3,r7,8079f4 <__sflags+0x78>
  8079d4:	1a3ffb1e 	bne	r3,r8,8079c4 <__alt_mem_onchip_mem+0xff7ff9c4>
  8079d8:	29400044 	addi	r5,r5,1
  8079dc:	28c00007 	ldb	r3,0(r5)
  8079e0:	21020014 	ori	r4,r4,2048
  8079e4:	183ffa1e 	bne	r3,zero,8079d0 <__alt_mem_onchip_mem+0xff7ff9d0>
  8079e8:	22c8b03a 	or	r4,r4,r11
  8079ec:	31000015 	stw	r4,0(r6)
  8079f0:	f800283a 	ret
  8079f4:	1284703a 	and	r2,r2,r10
  8079f8:	2248703a 	and	r4,r4,r9
  8079fc:	10800414 	ori	r2,r2,16
  807a00:	21000094 	ori	r4,r4,2
  807a04:	003fef06 	br	8079c4 <__alt_mem_onchip_mem+0xff7ff9c4>
  807a08:	02c18004 	movi	r11,1536
  807a0c:	01000044 	movi	r4,1
  807a10:	00800204 	movi	r2,8
  807a14:	003fe706 	br	8079b4 <__alt_mem_onchip_mem+0xff7ff9b4>
  807a18:	0017883a 	mov	r11,zero
  807a1c:	0009883a 	mov	r4,zero
  807a20:	00800104 	movi	r2,4
  807a24:	003fe306 	br	8079b4 <__alt_mem_onchip_mem+0xff7ff9b4>

00807a28 <_malloc_trim_r>:
  807a28:	defffb04 	addi	sp,sp,-20
  807a2c:	dcc00315 	stw	r19,12(sp)
  807a30:	04c02074 	movhi	r19,129
  807a34:	dc800215 	stw	r18,8(sp)
  807a38:	dc400115 	stw	r17,4(sp)
  807a3c:	dc000015 	stw	r16,0(sp)
  807a40:	dfc00415 	stw	ra,16(sp)
  807a44:	2821883a 	mov	r16,r5
  807a48:	9cce6504 	addi	r19,r19,14740
  807a4c:	2025883a 	mov	r18,r4
  807a50:	080f4140 	call	80f414 <__malloc_lock>
  807a54:	98800217 	ldw	r2,8(r19)
  807a58:	14400117 	ldw	r17,4(r2)
  807a5c:	00bfff04 	movi	r2,-4
  807a60:	88a2703a 	and	r17,r17,r2
  807a64:	8c21c83a 	sub	r16,r17,r16
  807a68:	8403fbc4 	addi	r16,r16,4079
  807a6c:	8020d33a 	srli	r16,r16,12
  807a70:	0083ffc4 	movi	r2,4095
  807a74:	843fffc4 	addi	r16,r16,-1
  807a78:	8020933a 	slli	r16,r16,12
  807a7c:	1400060e 	bge	r2,r16,807a98 <_malloc_trim_r+0x70>
  807a80:	000b883a 	mov	r5,zero
  807a84:	9009883a 	mov	r4,r18
  807a88:	08033340 	call	803334 <_sbrk_r>
  807a8c:	98c00217 	ldw	r3,8(r19)
  807a90:	1c47883a 	add	r3,r3,r17
  807a94:	10c00a26 	beq	r2,r3,807ac0 <_malloc_trim_r+0x98>
  807a98:	9009883a 	mov	r4,r18
  807a9c:	080f4380 	call	80f438 <__malloc_unlock>
  807aa0:	0005883a 	mov	r2,zero
  807aa4:	dfc00417 	ldw	ra,16(sp)
  807aa8:	dcc00317 	ldw	r19,12(sp)
  807aac:	dc800217 	ldw	r18,8(sp)
  807ab0:	dc400117 	ldw	r17,4(sp)
  807ab4:	dc000017 	ldw	r16,0(sp)
  807ab8:	dec00504 	addi	sp,sp,20
  807abc:	f800283a 	ret
  807ac0:	040bc83a 	sub	r5,zero,r16
  807ac4:	9009883a 	mov	r4,r18
  807ac8:	08033340 	call	803334 <_sbrk_r>
  807acc:	00ffffc4 	movi	r3,-1
  807ad0:	10c00d26 	beq	r2,r3,807b08 <_malloc_trim_r+0xe0>
  807ad4:	00c02074 	movhi	r3,129
  807ad8:	18dbef04 	addi	r3,r3,28604
  807adc:	18800017 	ldw	r2,0(r3)
  807ae0:	99000217 	ldw	r4,8(r19)
  807ae4:	8c23c83a 	sub	r17,r17,r16
  807ae8:	8c400054 	ori	r17,r17,1
  807aec:	1421c83a 	sub	r16,r2,r16
  807af0:	24400115 	stw	r17,4(r4)
  807af4:	9009883a 	mov	r4,r18
  807af8:	1c000015 	stw	r16,0(r3)
  807afc:	080f4380 	call	80f438 <__malloc_unlock>
  807b00:	00800044 	movi	r2,1
  807b04:	003fe706 	br	807aa4 <__alt_mem_onchip_mem+0xff7ffaa4>
  807b08:	000b883a 	mov	r5,zero
  807b0c:	9009883a 	mov	r4,r18
  807b10:	08033340 	call	803334 <_sbrk_r>
  807b14:	99000217 	ldw	r4,8(r19)
  807b18:	014003c4 	movi	r5,15
  807b1c:	1107c83a 	sub	r3,r2,r4
  807b20:	28ffdd0e 	bge	r5,r3,807a98 <__alt_mem_onchip_mem+0xff7ffa98>
  807b24:	01402074 	movhi	r5,129
  807b28:	29548204 	addi	r5,r5,21000
  807b2c:	29400017 	ldw	r5,0(r5)
  807b30:	18c00054 	ori	r3,r3,1
  807b34:	20c00115 	stw	r3,4(r4)
  807b38:	00c02074 	movhi	r3,129
  807b3c:	1145c83a 	sub	r2,r2,r5
  807b40:	18dbef04 	addi	r3,r3,28604
  807b44:	18800015 	stw	r2,0(r3)
  807b48:	003fd306 	br	807a98 <__alt_mem_onchip_mem+0xff7ffa98>

00807b4c <_free_r>:
  807b4c:	28004126 	beq	r5,zero,807c54 <_free_r+0x108>
  807b50:	defffd04 	addi	sp,sp,-12
  807b54:	dc400115 	stw	r17,4(sp)
  807b58:	dc000015 	stw	r16,0(sp)
  807b5c:	2023883a 	mov	r17,r4
  807b60:	2821883a 	mov	r16,r5
  807b64:	dfc00215 	stw	ra,8(sp)
  807b68:	080f4140 	call	80f414 <__malloc_lock>
  807b6c:	81ffff17 	ldw	r7,-4(r16)
  807b70:	00bfff84 	movi	r2,-2
  807b74:	01002074 	movhi	r4,129
  807b78:	81bffe04 	addi	r6,r16,-8
  807b7c:	3884703a 	and	r2,r7,r2
  807b80:	210e6504 	addi	r4,r4,14740
  807b84:	308b883a 	add	r5,r6,r2
  807b88:	2a400117 	ldw	r9,4(r5)
  807b8c:	22000217 	ldw	r8,8(r4)
  807b90:	00ffff04 	movi	r3,-4
  807b94:	48c6703a 	and	r3,r9,r3
  807b98:	2a005726 	beq	r5,r8,807cf8 <_free_r+0x1ac>
  807b9c:	28c00115 	stw	r3,4(r5)
  807ba0:	39c0004c 	andi	r7,r7,1
  807ba4:	3800091e 	bne	r7,zero,807bcc <_free_r+0x80>
  807ba8:	823ffe17 	ldw	r8,-8(r16)
  807bac:	22400204 	addi	r9,r4,8
  807bb0:	320dc83a 	sub	r6,r6,r8
  807bb4:	31c00217 	ldw	r7,8(r6)
  807bb8:	1205883a 	add	r2,r2,r8
  807bbc:	3a406526 	beq	r7,r9,807d54 <_free_r+0x208>
  807bc0:	32000317 	ldw	r8,12(r6)
  807bc4:	3a000315 	stw	r8,12(r7)
  807bc8:	41c00215 	stw	r7,8(r8)
  807bcc:	28cf883a 	add	r7,r5,r3
  807bd0:	39c00117 	ldw	r7,4(r7)
  807bd4:	39c0004c 	andi	r7,r7,1
  807bd8:	38003a26 	beq	r7,zero,807cc4 <_free_r+0x178>
  807bdc:	10c00054 	ori	r3,r2,1
  807be0:	30c00115 	stw	r3,4(r6)
  807be4:	3087883a 	add	r3,r6,r2
  807be8:	18800015 	stw	r2,0(r3)
  807bec:	00c07fc4 	movi	r3,511
  807bf0:	18801936 	bltu	r3,r2,807c58 <_free_r+0x10c>
  807bf4:	1004d0fa 	srli	r2,r2,3
  807bf8:	01c00044 	movi	r7,1
  807bfc:	21400117 	ldw	r5,4(r4)
  807c00:	10c00044 	addi	r3,r2,1
  807c04:	18c7883a 	add	r3,r3,r3
  807c08:	1005d0ba 	srai	r2,r2,2
  807c0c:	18c7883a 	add	r3,r3,r3
  807c10:	18c7883a 	add	r3,r3,r3
  807c14:	1907883a 	add	r3,r3,r4
  807c18:	3884983a 	sll	r2,r7,r2
  807c1c:	19c00017 	ldw	r7,0(r3)
  807c20:	1a3ffe04 	addi	r8,r3,-8
  807c24:	1144b03a 	or	r2,r2,r5
  807c28:	32000315 	stw	r8,12(r6)
  807c2c:	31c00215 	stw	r7,8(r6)
  807c30:	20800115 	stw	r2,4(r4)
  807c34:	19800015 	stw	r6,0(r3)
  807c38:	39800315 	stw	r6,12(r7)
  807c3c:	8809883a 	mov	r4,r17
  807c40:	dfc00217 	ldw	ra,8(sp)
  807c44:	dc400117 	ldw	r17,4(sp)
  807c48:	dc000017 	ldw	r16,0(sp)
  807c4c:	dec00304 	addi	sp,sp,12
  807c50:	080f4381 	jmpi	80f438 <__malloc_unlock>
  807c54:	f800283a 	ret
  807c58:	100ad27a 	srli	r5,r2,9
  807c5c:	00c00104 	movi	r3,4
  807c60:	19404a36 	bltu	r3,r5,807d8c <_free_r+0x240>
  807c64:	100ad1ba 	srli	r5,r2,6
  807c68:	28c00e44 	addi	r3,r5,57
  807c6c:	18c7883a 	add	r3,r3,r3
  807c70:	29400e04 	addi	r5,r5,56
  807c74:	18c7883a 	add	r3,r3,r3
  807c78:	18c7883a 	add	r3,r3,r3
  807c7c:	1909883a 	add	r4,r3,r4
  807c80:	20c00017 	ldw	r3,0(r4)
  807c84:	01c02074 	movhi	r7,129
  807c88:	213ffe04 	addi	r4,r4,-8
  807c8c:	39ce6504 	addi	r7,r7,14740
  807c90:	20c04426 	beq	r4,r3,807da4 <_free_r+0x258>
  807c94:	01ffff04 	movi	r7,-4
  807c98:	19400117 	ldw	r5,4(r3)
  807c9c:	29ca703a 	and	r5,r5,r7
  807ca0:	1140022e 	bgeu	r2,r5,807cac <_free_r+0x160>
  807ca4:	18c00217 	ldw	r3,8(r3)
  807ca8:	20fffb1e 	bne	r4,r3,807c98 <__alt_mem_onchip_mem+0xff7ffc98>
  807cac:	19000317 	ldw	r4,12(r3)
  807cb0:	31000315 	stw	r4,12(r6)
  807cb4:	30c00215 	stw	r3,8(r6)
  807cb8:	21800215 	stw	r6,8(r4)
  807cbc:	19800315 	stw	r6,12(r3)
  807cc0:	003fde06 	br	807c3c <__alt_mem_onchip_mem+0xff7ffc3c>
  807cc4:	29c00217 	ldw	r7,8(r5)
  807cc8:	10c5883a 	add	r2,r2,r3
  807ccc:	00c02074 	movhi	r3,129
  807cd0:	18ce6704 	addi	r3,r3,14748
  807cd4:	38c03b26 	beq	r7,r3,807dc4 <_free_r+0x278>
  807cd8:	2a000317 	ldw	r8,12(r5)
  807cdc:	11400054 	ori	r5,r2,1
  807ce0:	3087883a 	add	r3,r6,r2
  807ce4:	3a000315 	stw	r8,12(r7)
  807ce8:	41c00215 	stw	r7,8(r8)
  807cec:	31400115 	stw	r5,4(r6)
  807cf0:	18800015 	stw	r2,0(r3)
  807cf4:	003fbd06 	br	807bec <__alt_mem_onchip_mem+0xff7ffbec>
  807cf8:	39c0004c 	andi	r7,r7,1
  807cfc:	10c5883a 	add	r2,r2,r3
  807d00:	3800071e 	bne	r7,zero,807d20 <_free_r+0x1d4>
  807d04:	81fffe17 	ldw	r7,-8(r16)
  807d08:	31cdc83a 	sub	r6,r6,r7
  807d0c:	30c00317 	ldw	r3,12(r6)
  807d10:	31400217 	ldw	r5,8(r6)
  807d14:	11c5883a 	add	r2,r2,r7
  807d18:	28c00315 	stw	r3,12(r5)
  807d1c:	19400215 	stw	r5,8(r3)
  807d20:	10c00054 	ori	r3,r2,1
  807d24:	30c00115 	stw	r3,4(r6)
  807d28:	00c02074 	movhi	r3,129
  807d2c:	18d48304 	addi	r3,r3,21004
  807d30:	18c00017 	ldw	r3,0(r3)
  807d34:	21800215 	stw	r6,8(r4)
  807d38:	10ffc036 	bltu	r2,r3,807c3c <__alt_mem_onchip_mem+0xff7ffc3c>
  807d3c:	00802074 	movhi	r2,129
  807d40:	109be404 	addi	r2,r2,28560
  807d44:	11400017 	ldw	r5,0(r2)
  807d48:	8809883a 	mov	r4,r17
  807d4c:	0807a280 	call	807a28 <_malloc_trim_r>
  807d50:	003fba06 	br	807c3c <__alt_mem_onchip_mem+0xff7ffc3c>
  807d54:	28c9883a 	add	r4,r5,r3
  807d58:	21000117 	ldw	r4,4(r4)
  807d5c:	2100004c 	andi	r4,r4,1
  807d60:	2000391e 	bne	r4,zero,807e48 <_free_r+0x2fc>
  807d64:	29c00217 	ldw	r7,8(r5)
  807d68:	29000317 	ldw	r4,12(r5)
  807d6c:	1885883a 	add	r2,r3,r2
  807d70:	10c00054 	ori	r3,r2,1
  807d74:	39000315 	stw	r4,12(r7)
  807d78:	21c00215 	stw	r7,8(r4)
  807d7c:	30c00115 	stw	r3,4(r6)
  807d80:	308d883a 	add	r6,r6,r2
  807d84:	30800015 	stw	r2,0(r6)
  807d88:	003fac06 	br	807c3c <__alt_mem_onchip_mem+0xff7ffc3c>
  807d8c:	00c00504 	movi	r3,20
  807d90:	19401536 	bltu	r3,r5,807de8 <_free_r+0x29c>
  807d94:	28c01704 	addi	r3,r5,92
  807d98:	18c7883a 	add	r3,r3,r3
  807d9c:	294016c4 	addi	r5,r5,91
  807da0:	003fb406 	br	807c74 <__alt_mem_onchip_mem+0xff7ffc74>
  807da4:	280bd0ba 	srai	r5,r5,2
  807da8:	00c00044 	movi	r3,1
  807dac:	38800117 	ldw	r2,4(r7)
  807db0:	194a983a 	sll	r5,r3,r5
  807db4:	2007883a 	mov	r3,r4
  807db8:	2884b03a 	or	r2,r5,r2
  807dbc:	38800115 	stw	r2,4(r7)
  807dc0:	003fbb06 	br	807cb0 <__alt_mem_onchip_mem+0xff7ffcb0>
  807dc4:	21800515 	stw	r6,20(r4)
  807dc8:	21800415 	stw	r6,16(r4)
  807dcc:	10c00054 	ori	r3,r2,1
  807dd0:	31c00315 	stw	r7,12(r6)
  807dd4:	31c00215 	stw	r7,8(r6)
  807dd8:	30c00115 	stw	r3,4(r6)
  807ddc:	308d883a 	add	r6,r6,r2
  807de0:	30800015 	stw	r2,0(r6)
  807de4:	003f9506 	br	807c3c <__alt_mem_onchip_mem+0xff7ffc3c>
  807de8:	00c01504 	movi	r3,84
  807dec:	19400536 	bltu	r3,r5,807e04 <_free_r+0x2b8>
  807df0:	100ad33a 	srli	r5,r2,12
  807df4:	28c01bc4 	addi	r3,r5,111
  807df8:	18c7883a 	add	r3,r3,r3
  807dfc:	29401b84 	addi	r5,r5,110
  807e00:	003f9c06 	br	807c74 <__alt_mem_onchip_mem+0xff7ffc74>
  807e04:	00c05504 	movi	r3,340
  807e08:	19400536 	bltu	r3,r5,807e20 <_free_r+0x2d4>
  807e0c:	100ad3fa 	srli	r5,r2,15
  807e10:	28c01e04 	addi	r3,r5,120
  807e14:	18c7883a 	add	r3,r3,r3
  807e18:	29401dc4 	addi	r5,r5,119
  807e1c:	003f9506 	br	807c74 <__alt_mem_onchip_mem+0xff7ffc74>
  807e20:	00c15504 	movi	r3,1364
  807e24:	19400536 	bltu	r3,r5,807e3c <_free_r+0x2f0>
  807e28:	100ad4ba 	srli	r5,r2,18
  807e2c:	28c01f44 	addi	r3,r5,125
  807e30:	18c7883a 	add	r3,r3,r3
  807e34:	29401f04 	addi	r5,r5,124
  807e38:	003f8e06 	br	807c74 <__alt_mem_onchip_mem+0xff7ffc74>
  807e3c:	00c03f84 	movi	r3,254
  807e40:	01401f84 	movi	r5,126
  807e44:	003f8b06 	br	807c74 <__alt_mem_onchip_mem+0xff7ffc74>
  807e48:	10c00054 	ori	r3,r2,1
  807e4c:	30c00115 	stw	r3,4(r6)
  807e50:	308d883a 	add	r6,r6,r2
  807e54:	30800015 	stw	r2,0(r6)
  807e58:	003f7806 	br	807c3c <__alt_mem_onchip_mem+0xff7ffc3c>

00807e5c <__sfvwrite_r>:
  807e5c:	30800217 	ldw	r2,8(r6)
  807e60:	10006726 	beq	r2,zero,808000 <__sfvwrite_r+0x1a4>
  807e64:	28c0030b 	ldhu	r3,12(r5)
  807e68:	defff404 	addi	sp,sp,-48
  807e6c:	dd400715 	stw	r21,28(sp)
  807e70:	dd000615 	stw	r20,24(sp)
  807e74:	dc000215 	stw	r16,8(sp)
  807e78:	dfc00b15 	stw	ra,44(sp)
  807e7c:	df000a15 	stw	fp,40(sp)
  807e80:	ddc00915 	stw	r23,36(sp)
  807e84:	dd800815 	stw	r22,32(sp)
  807e88:	dcc00515 	stw	r19,20(sp)
  807e8c:	dc800415 	stw	r18,16(sp)
  807e90:	dc400315 	stw	r17,12(sp)
  807e94:	1880020c 	andi	r2,r3,8
  807e98:	2821883a 	mov	r16,r5
  807e9c:	202b883a 	mov	r21,r4
  807ea0:	3029883a 	mov	r20,r6
  807ea4:	10002726 	beq	r2,zero,807f44 <__sfvwrite_r+0xe8>
  807ea8:	28800417 	ldw	r2,16(r5)
  807eac:	10002526 	beq	r2,zero,807f44 <__sfvwrite_r+0xe8>
  807eb0:	1880008c 	andi	r2,r3,2
  807eb4:	a4400017 	ldw	r17,0(r20)
  807eb8:	10002a26 	beq	r2,zero,807f64 <__sfvwrite_r+0x108>
  807ebc:	05a00034 	movhi	r22,32768
  807ec0:	0027883a 	mov	r19,zero
  807ec4:	0025883a 	mov	r18,zero
  807ec8:	b5bf0004 	addi	r22,r22,-1024
  807ecc:	980d883a 	mov	r6,r19
  807ed0:	a809883a 	mov	r4,r21
  807ed4:	90004626 	beq	r18,zero,807ff0 <__sfvwrite_r+0x194>
  807ed8:	900f883a 	mov	r7,r18
  807edc:	b480022e 	bgeu	r22,r18,807ee8 <__sfvwrite_r+0x8c>
  807ee0:	01e00034 	movhi	r7,32768
  807ee4:	39ff0004 	addi	r7,r7,-1024
  807ee8:	80800917 	ldw	r2,36(r16)
  807eec:	81400717 	ldw	r5,28(r16)
  807ef0:	103ee83a 	callr	r2
  807ef4:	0080570e 	bge	zero,r2,808054 <__sfvwrite_r+0x1f8>
  807ef8:	a0c00217 	ldw	r3,8(r20)
  807efc:	98a7883a 	add	r19,r19,r2
  807f00:	90a5c83a 	sub	r18,r18,r2
  807f04:	1885c83a 	sub	r2,r3,r2
  807f08:	a0800215 	stw	r2,8(r20)
  807f0c:	103fef1e 	bne	r2,zero,807ecc <__alt_mem_onchip_mem+0xff7ffecc>
  807f10:	0005883a 	mov	r2,zero
  807f14:	dfc00b17 	ldw	ra,44(sp)
  807f18:	df000a17 	ldw	fp,40(sp)
  807f1c:	ddc00917 	ldw	r23,36(sp)
  807f20:	dd800817 	ldw	r22,32(sp)
  807f24:	dd400717 	ldw	r21,28(sp)
  807f28:	dd000617 	ldw	r20,24(sp)
  807f2c:	dcc00517 	ldw	r19,20(sp)
  807f30:	dc800417 	ldw	r18,16(sp)
  807f34:	dc400317 	ldw	r17,12(sp)
  807f38:	dc000217 	ldw	r16,8(sp)
  807f3c:	dec00c04 	addi	sp,sp,48
  807f40:	f800283a 	ret
  807f44:	800b883a 	mov	r5,r16
  807f48:	a809883a 	mov	r4,r21
  807f4c:	0805ba00 	call	805ba0 <__swsetup_r>
  807f50:	1000eb1e 	bne	r2,zero,808300 <__sfvwrite_r+0x4a4>
  807f54:	80c0030b 	ldhu	r3,12(r16)
  807f58:	a4400017 	ldw	r17,0(r20)
  807f5c:	1880008c 	andi	r2,r3,2
  807f60:	103fd61e 	bne	r2,zero,807ebc <__alt_mem_onchip_mem+0xff7ffebc>
  807f64:	1880004c 	andi	r2,r3,1
  807f68:	10003f1e 	bne	r2,zero,808068 <__sfvwrite_r+0x20c>
  807f6c:	0039883a 	mov	fp,zero
  807f70:	0025883a 	mov	r18,zero
  807f74:	90001a26 	beq	r18,zero,807fe0 <__sfvwrite_r+0x184>
  807f78:	1880800c 	andi	r2,r3,512
  807f7c:	84c00217 	ldw	r19,8(r16)
  807f80:	10002126 	beq	r2,zero,808008 <__sfvwrite_r+0x1ac>
  807f84:	982f883a 	mov	r23,r19
  807f88:	94c09336 	bltu	r18,r19,8081d8 <__sfvwrite_r+0x37c>
  807f8c:	1881200c 	andi	r2,r3,1152
  807f90:	10009e1e 	bne	r2,zero,80820c <__sfvwrite_r+0x3b0>
  807f94:	81000017 	ldw	r4,0(r16)
  807f98:	b80d883a 	mov	r6,r23
  807f9c:	e00b883a 	mov	r5,fp
  807fa0:	08086d40 	call	8086d4 <memmove>
  807fa4:	80c00217 	ldw	r3,8(r16)
  807fa8:	81000017 	ldw	r4,0(r16)
  807fac:	9005883a 	mov	r2,r18
  807fb0:	1ce7c83a 	sub	r19,r3,r19
  807fb4:	25cf883a 	add	r7,r4,r23
  807fb8:	84c00215 	stw	r19,8(r16)
  807fbc:	81c00015 	stw	r7,0(r16)
  807fc0:	a0c00217 	ldw	r3,8(r20)
  807fc4:	e0b9883a 	add	fp,fp,r2
  807fc8:	90a5c83a 	sub	r18,r18,r2
  807fcc:	18a7c83a 	sub	r19,r3,r2
  807fd0:	a4c00215 	stw	r19,8(r20)
  807fd4:	983fce26 	beq	r19,zero,807f10 <__alt_mem_onchip_mem+0xff7fff10>
  807fd8:	80c0030b 	ldhu	r3,12(r16)
  807fdc:	903fe61e 	bne	r18,zero,807f78 <__alt_mem_onchip_mem+0xff7fff78>
  807fe0:	8f000017 	ldw	fp,0(r17)
  807fe4:	8c800117 	ldw	r18,4(r17)
  807fe8:	8c400204 	addi	r17,r17,8
  807fec:	003fe106 	br	807f74 <__alt_mem_onchip_mem+0xff7fff74>
  807ff0:	8cc00017 	ldw	r19,0(r17)
  807ff4:	8c800117 	ldw	r18,4(r17)
  807ff8:	8c400204 	addi	r17,r17,8
  807ffc:	003fb306 	br	807ecc <__alt_mem_onchip_mem+0xff7ffecc>
  808000:	0005883a 	mov	r2,zero
  808004:	f800283a 	ret
  808008:	81000017 	ldw	r4,0(r16)
  80800c:	80800417 	ldw	r2,16(r16)
  808010:	11005736 	bltu	r2,r4,808170 <__sfvwrite_r+0x314>
  808014:	85c00517 	ldw	r23,20(r16)
  808018:	95c05536 	bltu	r18,r23,808170 <__sfvwrite_r+0x314>
  80801c:	00a00034 	movhi	r2,32768
  808020:	10bfffc4 	addi	r2,r2,-1
  808024:	9009883a 	mov	r4,r18
  808028:	1480012e 	bgeu	r2,r18,808030 <__sfvwrite_r+0x1d4>
  80802c:	1009883a 	mov	r4,r2
  808030:	b80b883a 	mov	r5,r23
  808034:	08013d80 	call	8013d8 <__divsi3>
  808038:	15cf383a 	mul	r7,r2,r23
  80803c:	81400717 	ldw	r5,28(r16)
  808040:	80800917 	ldw	r2,36(r16)
  808044:	e00d883a 	mov	r6,fp
  808048:	a809883a 	mov	r4,r21
  80804c:	103ee83a 	callr	r2
  808050:	00bfdb16 	blt	zero,r2,807fc0 <__alt_mem_onchip_mem+0xff7fffc0>
  808054:	8080030b 	ldhu	r2,12(r16)
  808058:	10801014 	ori	r2,r2,64
  80805c:	8080030d 	sth	r2,12(r16)
  808060:	00bfffc4 	movi	r2,-1
  808064:	003fab06 	br	807f14 <__alt_mem_onchip_mem+0xff7fff14>
  808068:	0027883a 	mov	r19,zero
  80806c:	0011883a 	mov	r8,zero
  808070:	0039883a 	mov	fp,zero
  808074:	0025883a 	mov	r18,zero
  808078:	90001f26 	beq	r18,zero,8080f8 <__sfvwrite_r+0x29c>
  80807c:	40005a26 	beq	r8,zero,8081e8 <__sfvwrite_r+0x38c>
  808080:	982d883a 	mov	r22,r19
  808084:	94c0012e 	bgeu	r18,r19,80808c <__sfvwrite_r+0x230>
  808088:	902d883a 	mov	r22,r18
  80808c:	81000017 	ldw	r4,0(r16)
  808090:	80800417 	ldw	r2,16(r16)
  808094:	b02f883a 	mov	r23,r22
  808098:	81c00517 	ldw	r7,20(r16)
  80809c:	1100032e 	bgeu	r2,r4,8080ac <__sfvwrite_r+0x250>
  8080a0:	80c00217 	ldw	r3,8(r16)
  8080a4:	38c7883a 	add	r3,r7,r3
  8080a8:	1d801816 	blt	r3,r22,80810c <__sfvwrite_r+0x2b0>
  8080ac:	b1c03e16 	blt	r22,r7,8081a8 <__sfvwrite_r+0x34c>
  8080b0:	80800917 	ldw	r2,36(r16)
  8080b4:	81400717 	ldw	r5,28(r16)
  8080b8:	e00d883a 	mov	r6,fp
  8080bc:	da000115 	stw	r8,4(sp)
  8080c0:	a809883a 	mov	r4,r21
  8080c4:	103ee83a 	callr	r2
  8080c8:	102f883a 	mov	r23,r2
  8080cc:	da000117 	ldw	r8,4(sp)
  8080d0:	00bfe00e 	bge	zero,r2,808054 <__alt_mem_onchip_mem+0xff800054>
  8080d4:	9de7c83a 	sub	r19,r19,r23
  8080d8:	98001f26 	beq	r19,zero,808158 <__sfvwrite_r+0x2fc>
  8080dc:	a0800217 	ldw	r2,8(r20)
  8080e0:	e5f9883a 	add	fp,fp,r23
  8080e4:	95e5c83a 	sub	r18,r18,r23
  8080e8:	15efc83a 	sub	r23,r2,r23
  8080ec:	a5c00215 	stw	r23,8(r20)
  8080f0:	b83f8726 	beq	r23,zero,807f10 <__alt_mem_onchip_mem+0xff7fff10>
  8080f4:	903fe11e 	bne	r18,zero,80807c <__alt_mem_onchip_mem+0xff80007c>
  8080f8:	8f000017 	ldw	fp,0(r17)
  8080fc:	8c800117 	ldw	r18,4(r17)
  808100:	0011883a 	mov	r8,zero
  808104:	8c400204 	addi	r17,r17,8
  808108:	003fdb06 	br	808078 <__alt_mem_onchip_mem+0xff800078>
  80810c:	180d883a 	mov	r6,r3
  808110:	e00b883a 	mov	r5,fp
  808114:	da000115 	stw	r8,4(sp)
  808118:	d8c00015 	stw	r3,0(sp)
  80811c:	08086d40 	call	8086d4 <memmove>
  808120:	d8c00017 	ldw	r3,0(sp)
  808124:	80800017 	ldw	r2,0(r16)
  808128:	800b883a 	mov	r5,r16
  80812c:	a809883a 	mov	r4,r21
  808130:	10c5883a 	add	r2,r2,r3
  808134:	80800015 	stw	r2,0(r16)
  808138:	d8c00015 	stw	r3,0(sp)
  80813c:	08078f00 	call	8078f0 <_fflush_r>
  808140:	d8c00017 	ldw	r3,0(sp)
  808144:	da000117 	ldw	r8,4(sp)
  808148:	103fc21e 	bne	r2,zero,808054 <__alt_mem_onchip_mem+0xff800054>
  80814c:	182f883a 	mov	r23,r3
  808150:	9de7c83a 	sub	r19,r19,r23
  808154:	983fe11e 	bne	r19,zero,8080dc <__alt_mem_onchip_mem+0xff8000dc>
  808158:	800b883a 	mov	r5,r16
  80815c:	a809883a 	mov	r4,r21
  808160:	08078f00 	call	8078f0 <_fflush_r>
  808164:	103fbb1e 	bne	r2,zero,808054 <__alt_mem_onchip_mem+0xff800054>
  808168:	0011883a 	mov	r8,zero
  80816c:	003fdb06 	br	8080dc <__alt_mem_onchip_mem+0xff8000dc>
  808170:	94c0012e 	bgeu	r18,r19,808178 <__sfvwrite_r+0x31c>
  808174:	9027883a 	mov	r19,r18
  808178:	980d883a 	mov	r6,r19
  80817c:	e00b883a 	mov	r5,fp
  808180:	08086d40 	call	8086d4 <memmove>
  808184:	80800217 	ldw	r2,8(r16)
  808188:	80c00017 	ldw	r3,0(r16)
  80818c:	14c5c83a 	sub	r2,r2,r19
  808190:	1cc7883a 	add	r3,r3,r19
  808194:	80800215 	stw	r2,8(r16)
  808198:	80c00015 	stw	r3,0(r16)
  80819c:	10004326 	beq	r2,zero,8082ac <__sfvwrite_r+0x450>
  8081a0:	9805883a 	mov	r2,r19
  8081a4:	003f8606 	br	807fc0 <__alt_mem_onchip_mem+0xff7fffc0>
  8081a8:	b00d883a 	mov	r6,r22
  8081ac:	e00b883a 	mov	r5,fp
  8081b0:	da000115 	stw	r8,4(sp)
  8081b4:	08086d40 	call	8086d4 <memmove>
  8081b8:	80800217 	ldw	r2,8(r16)
  8081bc:	80c00017 	ldw	r3,0(r16)
  8081c0:	da000117 	ldw	r8,4(sp)
  8081c4:	1585c83a 	sub	r2,r2,r22
  8081c8:	1dad883a 	add	r22,r3,r22
  8081cc:	80800215 	stw	r2,8(r16)
  8081d0:	85800015 	stw	r22,0(r16)
  8081d4:	003fbf06 	br	8080d4 <__alt_mem_onchip_mem+0xff8000d4>
  8081d8:	81000017 	ldw	r4,0(r16)
  8081dc:	9027883a 	mov	r19,r18
  8081e0:	902f883a 	mov	r23,r18
  8081e4:	003f6c06 	br	807f98 <__alt_mem_onchip_mem+0xff7fff98>
  8081e8:	900d883a 	mov	r6,r18
  8081ec:	01400284 	movi	r5,10
  8081f0:	e009883a 	mov	r4,fp
  8081f4:	08084a80 	call	8084a8 <memchr>
  8081f8:	10003e26 	beq	r2,zero,8082f4 <__sfvwrite_r+0x498>
  8081fc:	10800044 	addi	r2,r2,1
  808200:	1727c83a 	sub	r19,r2,fp
  808204:	02000044 	movi	r8,1
  808208:	003f9d06 	br	808080 <__alt_mem_onchip_mem+0xff800080>
  80820c:	80800517 	ldw	r2,20(r16)
  808210:	81400417 	ldw	r5,16(r16)
  808214:	81c00017 	ldw	r7,0(r16)
  808218:	10a7883a 	add	r19,r2,r2
  80821c:	9885883a 	add	r2,r19,r2
  808220:	1026d7fa 	srli	r19,r2,31
  808224:	396dc83a 	sub	r22,r7,r5
  808228:	b1000044 	addi	r4,r22,1
  80822c:	9885883a 	add	r2,r19,r2
  808230:	1027d07a 	srai	r19,r2,1
  808234:	2485883a 	add	r2,r4,r18
  808238:	980d883a 	mov	r6,r19
  80823c:	9880022e 	bgeu	r19,r2,808248 <__sfvwrite_r+0x3ec>
  808240:	1027883a 	mov	r19,r2
  808244:	100d883a 	mov	r6,r2
  808248:	18c1000c 	andi	r3,r3,1024
  80824c:	18001c26 	beq	r3,zero,8082c0 <__sfvwrite_r+0x464>
  808250:	300b883a 	mov	r5,r6
  808254:	a809883a 	mov	r4,r21
  808258:	08025540 	call	802554 <_malloc_r>
  80825c:	102f883a 	mov	r23,r2
  808260:	10002926 	beq	r2,zero,808308 <__sfvwrite_r+0x4ac>
  808264:	81400417 	ldw	r5,16(r16)
  808268:	b00d883a 	mov	r6,r22
  80826c:	1009883a 	mov	r4,r2
  808270:	080858c0 	call	80858c <memcpy>
  808274:	8080030b 	ldhu	r2,12(r16)
  808278:	00fedfc4 	movi	r3,-1153
  80827c:	10c4703a 	and	r2,r2,r3
  808280:	10802014 	ori	r2,r2,128
  808284:	8080030d 	sth	r2,12(r16)
  808288:	bd89883a 	add	r4,r23,r22
  80828c:	9d8fc83a 	sub	r7,r19,r22
  808290:	85c00415 	stw	r23,16(r16)
  808294:	84c00515 	stw	r19,20(r16)
  808298:	81000015 	stw	r4,0(r16)
  80829c:	9027883a 	mov	r19,r18
  8082a0:	81c00215 	stw	r7,8(r16)
  8082a4:	902f883a 	mov	r23,r18
  8082a8:	003f3b06 	br	807f98 <__alt_mem_onchip_mem+0xff7fff98>
  8082ac:	800b883a 	mov	r5,r16
  8082b0:	a809883a 	mov	r4,r21
  8082b4:	08078f00 	call	8078f0 <_fflush_r>
  8082b8:	103fb926 	beq	r2,zero,8081a0 <__alt_mem_onchip_mem+0xff8001a0>
  8082bc:	003f6506 	br	808054 <__alt_mem_onchip_mem+0xff800054>
  8082c0:	a809883a 	mov	r4,r21
  8082c4:	080988c0 	call	80988c <_realloc_r>
  8082c8:	102f883a 	mov	r23,r2
  8082cc:	103fee1e 	bne	r2,zero,808288 <__alt_mem_onchip_mem+0xff800288>
  8082d0:	81400417 	ldw	r5,16(r16)
  8082d4:	a809883a 	mov	r4,r21
  8082d8:	0807b4c0 	call	807b4c <_free_r>
  8082dc:	8080030b 	ldhu	r2,12(r16)
  8082e0:	00ffdfc4 	movi	r3,-129
  8082e4:	1884703a 	and	r2,r3,r2
  8082e8:	00c00304 	movi	r3,12
  8082ec:	a8c00015 	stw	r3,0(r21)
  8082f0:	003f5906 	br	808058 <__alt_mem_onchip_mem+0xff800058>
  8082f4:	94c00044 	addi	r19,r18,1
  8082f8:	02000044 	movi	r8,1
  8082fc:	003f6006 	br	808080 <__alt_mem_onchip_mem+0xff800080>
  808300:	00bfffc4 	movi	r2,-1
  808304:	003f0306 	br	807f14 <__alt_mem_onchip_mem+0xff7fff14>
  808308:	00800304 	movi	r2,12
  80830c:	a8800015 	stw	r2,0(r21)
  808310:	8080030b 	ldhu	r2,12(r16)
  808314:	003f5006 	br	808058 <__alt_mem_onchip_mem+0xff800058>

00808318 <_isatty_r>:
  808318:	defffd04 	addi	sp,sp,-12
  80831c:	dc000015 	stw	r16,0(sp)
  808320:	04002074 	movhi	r16,129
  808324:	dc400115 	stw	r17,4(sp)
  808328:	841be104 	addi	r16,r16,28548
  80832c:	2023883a 	mov	r17,r4
  808330:	2809883a 	mov	r4,r5
  808334:	dfc00215 	stw	ra,8(sp)
  808338:	80000015 	stw	zero,0(r16)
  80833c:	080f0f80 	call	80f0f8 <isatty>
  808340:	00ffffc4 	movi	r3,-1
  808344:	10c00526 	beq	r2,r3,80835c <_isatty_r+0x44>
  808348:	dfc00217 	ldw	ra,8(sp)
  80834c:	dc400117 	ldw	r17,4(sp)
  808350:	dc000017 	ldw	r16,0(sp)
  808354:	dec00304 	addi	sp,sp,12
  808358:	f800283a 	ret
  80835c:	80c00017 	ldw	r3,0(r16)
  808360:	183ff926 	beq	r3,zero,808348 <__alt_mem_onchip_mem+0xff800348>
  808364:	88c00015 	stw	r3,0(r17)
  808368:	003ff706 	br	808348 <__alt_mem_onchip_mem+0xff800348>

0080836c <_setlocale_r>:
  80836c:	30001b26 	beq	r6,zero,8083dc <_setlocale_r+0x70>
  808370:	01402074 	movhi	r5,129
  808374:	defffe04 	addi	sp,sp,-8
  808378:	294cb104 	addi	r5,r5,12996
  80837c:	3009883a 	mov	r4,r6
  808380:	dc000015 	stw	r16,0(sp)
  808384:	dfc00115 	stw	ra,4(sp)
  808388:	3021883a 	mov	r16,r6
  80838c:	0809e640 	call	809e64 <strcmp>
  808390:	1000061e 	bne	r2,zero,8083ac <_setlocale_r+0x40>
  808394:	00802074 	movhi	r2,129
  808398:	108bf304 	addi	r2,r2,12236
  80839c:	dfc00117 	ldw	ra,4(sp)
  8083a0:	dc000017 	ldw	r16,0(sp)
  8083a4:	dec00204 	addi	sp,sp,8
  8083a8:	f800283a 	ret
  8083ac:	01402074 	movhi	r5,129
  8083b0:	294bf304 	addi	r5,r5,12236
  8083b4:	8009883a 	mov	r4,r16
  8083b8:	0809e640 	call	809e64 <strcmp>
  8083bc:	103ff526 	beq	r2,zero,808394 <__alt_mem_onchip_mem+0xff800394>
  8083c0:	01402074 	movhi	r5,129
  8083c4:	294bfc04 	addi	r5,r5,12272
  8083c8:	8009883a 	mov	r4,r16
  8083cc:	0809e640 	call	809e64 <strcmp>
  8083d0:	103ff026 	beq	r2,zero,808394 <__alt_mem_onchip_mem+0xff800394>
  8083d4:	0005883a 	mov	r2,zero
  8083d8:	003ff006 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  8083dc:	00802074 	movhi	r2,129
  8083e0:	108bf304 	addi	r2,r2,12236
  8083e4:	f800283a 	ret

008083e8 <__locale_charset>:
  8083e8:	00802074 	movhi	r2,129
  8083ec:	108f6f04 	addi	r2,r2,15804
  8083f0:	f800283a 	ret

008083f4 <__locale_mb_cur_max>:
  8083f4:	00802074 	movhi	r2,129
  8083f8:	10948504 	addi	r2,r2,21012
  8083fc:	10800017 	ldw	r2,0(r2)
  808400:	f800283a 	ret

00808404 <__locale_msgcharset>:
  808404:	00802074 	movhi	r2,129
  808408:	108f6704 	addi	r2,r2,15772
  80840c:	f800283a 	ret

00808410 <__locale_cjk_lang>:
  808410:	0005883a 	mov	r2,zero
  808414:	f800283a 	ret

00808418 <_localeconv_r>:
  808418:	00802074 	movhi	r2,129
  80841c:	108f7704 	addi	r2,r2,15836
  808420:	f800283a 	ret

00808424 <setlocale>:
  808424:	00802074 	movhi	r2,129
  808428:	10948104 	addi	r2,r2,20996
  80842c:	280d883a 	mov	r6,r5
  808430:	200b883a 	mov	r5,r4
  808434:	11000017 	ldw	r4,0(r2)
  808438:	080836c1 	jmpi	80836c <_setlocale_r>

0080843c <localeconv>:
  80843c:	00802074 	movhi	r2,129
  808440:	108f7704 	addi	r2,r2,15836
  808444:	f800283a 	ret

00808448 <_lseek_r>:
  808448:	defffd04 	addi	sp,sp,-12
  80844c:	2805883a 	mov	r2,r5
  808450:	dc000015 	stw	r16,0(sp)
  808454:	04002074 	movhi	r16,129
  808458:	dc400115 	stw	r17,4(sp)
  80845c:	300b883a 	mov	r5,r6
  808460:	841be104 	addi	r16,r16,28548
  808464:	2023883a 	mov	r17,r4
  808468:	380d883a 	mov	r6,r7
  80846c:	1009883a 	mov	r4,r2
  808470:	dfc00215 	stw	ra,8(sp)
  808474:	80000015 	stw	zero,0(r16)
  808478:	080f2c40 	call	80f2c4 <lseek>
  80847c:	00ffffc4 	movi	r3,-1
  808480:	10c00526 	beq	r2,r3,808498 <_lseek_r+0x50>
  808484:	dfc00217 	ldw	ra,8(sp)
  808488:	dc400117 	ldw	r17,4(sp)
  80848c:	dc000017 	ldw	r16,0(sp)
  808490:	dec00304 	addi	sp,sp,12
  808494:	f800283a 	ret
  808498:	80c00017 	ldw	r3,0(r16)
  80849c:	183ff926 	beq	r3,zero,808484 <__alt_mem_onchip_mem+0xff800484>
  8084a0:	88c00015 	stw	r3,0(r17)
  8084a4:	003ff706 	br	808484 <__alt_mem_onchip_mem+0xff800484>

008084a8 <memchr>:
  8084a8:	208000cc 	andi	r2,r4,3
  8084ac:	280f883a 	mov	r7,r5
  8084b0:	10003426 	beq	r2,zero,808584 <memchr+0xdc>
  8084b4:	30bfffc4 	addi	r2,r6,-1
  8084b8:	30001a26 	beq	r6,zero,808524 <memchr+0x7c>
  8084bc:	20c00003 	ldbu	r3,0(r4)
  8084c0:	29803fcc 	andi	r6,r5,255
  8084c4:	30c0051e 	bne	r6,r3,8084dc <memchr+0x34>
  8084c8:	00001806 	br	80852c <memchr+0x84>
  8084cc:	10001526 	beq	r2,zero,808524 <memchr+0x7c>
  8084d0:	20c00003 	ldbu	r3,0(r4)
  8084d4:	10bfffc4 	addi	r2,r2,-1
  8084d8:	30c01426 	beq	r6,r3,80852c <memchr+0x84>
  8084dc:	21000044 	addi	r4,r4,1
  8084e0:	20c000cc 	andi	r3,r4,3
  8084e4:	183ff91e 	bne	r3,zero,8084cc <__alt_mem_onchip_mem+0xff8004cc>
  8084e8:	020000c4 	movi	r8,3
  8084ec:	40801136 	bltu	r8,r2,808534 <memchr+0x8c>
  8084f0:	10000c26 	beq	r2,zero,808524 <memchr+0x7c>
  8084f4:	20c00003 	ldbu	r3,0(r4)
  8084f8:	29403fcc 	andi	r5,r5,255
  8084fc:	28c00b26 	beq	r5,r3,80852c <memchr+0x84>
  808500:	20c00044 	addi	r3,r4,1
  808504:	39803fcc 	andi	r6,r7,255
  808508:	2089883a 	add	r4,r4,r2
  80850c:	00000306 	br	80851c <memchr+0x74>
  808510:	18c00044 	addi	r3,r3,1
  808514:	197fffc3 	ldbu	r5,-1(r3)
  808518:	31400526 	beq	r6,r5,808530 <memchr+0x88>
  80851c:	1805883a 	mov	r2,r3
  808520:	20fffb1e 	bne	r4,r3,808510 <__alt_mem_onchip_mem+0xff800510>
  808524:	0005883a 	mov	r2,zero
  808528:	f800283a 	ret
  80852c:	2005883a 	mov	r2,r4
  808530:	f800283a 	ret
  808534:	28c03fcc 	andi	r3,r5,255
  808538:	1812923a 	slli	r9,r3,8
  80853c:	02ffbff4 	movhi	r11,65279
  808540:	02a02074 	movhi	r10,32897
  808544:	48d2b03a 	or	r9,r9,r3
  808548:	4806943a 	slli	r3,r9,16
  80854c:	5affbfc4 	addi	r11,r11,-257
  808550:	52a02004 	addi	r10,r10,-32640
  808554:	48d2b03a 	or	r9,r9,r3
  808558:	20c00017 	ldw	r3,0(r4)
  80855c:	48c6f03a 	xor	r3,r9,r3
  808560:	1acd883a 	add	r6,r3,r11
  808564:	00c6303a 	nor	r3,zero,r3
  808568:	30c6703a 	and	r3,r6,r3
  80856c:	1a86703a 	and	r3,r3,r10
  808570:	183fe01e 	bne	r3,zero,8084f4 <__alt_mem_onchip_mem+0xff8004f4>
  808574:	10bfff04 	addi	r2,r2,-4
  808578:	21000104 	addi	r4,r4,4
  80857c:	40bff636 	bltu	r8,r2,808558 <__alt_mem_onchip_mem+0xff800558>
  808580:	003fdb06 	br	8084f0 <__alt_mem_onchip_mem+0xff8004f0>
  808584:	3005883a 	mov	r2,r6
  808588:	003fd706 	br	8084e8 <__alt_mem_onchip_mem+0xff8004e8>

0080858c <memcpy>:
  80858c:	defffd04 	addi	sp,sp,-12
  808590:	dfc00215 	stw	ra,8(sp)
  808594:	dc400115 	stw	r17,4(sp)
  808598:	dc000015 	stw	r16,0(sp)
  80859c:	00c003c4 	movi	r3,15
  8085a0:	2005883a 	mov	r2,r4
  8085a4:	1980452e 	bgeu	r3,r6,8086bc <memcpy+0x130>
  8085a8:	2906b03a 	or	r3,r5,r4
  8085ac:	18c000cc 	andi	r3,r3,3
  8085b0:	1800441e 	bne	r3,zero,8086c4 <memcpy+0x138>
  8085b4:	347ffc04 	addi	r17,r6,-16
  8085b8:	8822d13a 	srli	r17,r17,4
  8085bc:	28c00104 	addi	r3,r5,4
  8085c0:	23400104 	addi	r13,r4,4
  8085c4:	8820913a 	slli	r16,r17,4
  8085c8:	2b000204 	addi	r12,r5,8
  8085cc:	22c00204 	addi	r11,r4,8
  8085d0:	84000504 	addi	r16,r16,20
  8085d4:	2a800304 	addi	r10,r5,12
  8085d8:	22400304 	addi	r9,r4,12
  8085dc:	2c21883a 	add	r16,r5,r16
  8085e0:	2811883a 	mov	r8,r5
  8085e4:	200f883a 	mov	r7,r4
  8085e8:	41000017 	ldw	r4,0(r8)
  8085ec:	1fc00017 	ldw	ra,0(r3)
  8085f0:	63c00017 	ldw	r15,0(r12)
  8085f4:	39000015 	stw	r4,0(r7)
  8085f8:	53800017 	ldw	r14,0(r10)
  8085fc:	6fc00015 	stw	ra,0(r13)
  808600:	5bc00015 	stw	r15,0(r11)
  808604:	4b800015 	stw	r14,0(r9)
  808608:	18c00404 	addi	r3,r3,16
  80860c:	39c00404 	addi	r7,r7,16
  808610:	42000404 	addi	r8,r8,16
  808614:	6b400404 	addi	r13,r13,16
  808618:	63000404 	addi	r12,r12,16
  80861c:	5ac00404 	addi	r11,r11,16
  808620:	52800404 	addi	r10,r10,16
  808624:	4a400404 	addi	r9,r9,16
  808628:	1c3fef1e 	bne	r3,r16,8085e8 <__alt_mem_onchip_mem+0xff8005e8>
  80862c:	89c00044 	addi	r7,r17,1
  808630:	380e913a 	slli	r7,r7,4
  808634:	310003cc 	andi	r4,r6,15
  808638:	02c000c4 	movi	r11,3
  80863c:	11c7883a 	add	r3,r2,r7
  808640:	29cb883a 	add	r5,r5,r7
  808644:	5900212e 	bgeu	r11,r4,8086cc <memcpy+0x140>
  808648:	1813883a 	mov	r9,r3
  80864c:	2811883a 	mov	r8,r5
  808650:	200f883a 	mov	r7,r4
  808654:	42800017 	ldw	r10,0(r8)
  808658:	4a400104 	addi	r9,r9,4
  80865c:	39ffff04 	addi	r7,r7,-4
  808660:	4abfff15 	stw	r10,-4(r9)
  808664:	42000104 	addi	r8,r8,4
  808668:	59fffa36 	bltu	r11,r7,808654 <__alt_mem_onchip_mem+0xff800654>
  80866c:	213fff04 	addi	r4,r4,-4
  808670:	2008d0ba 	srli	r4,r4,2
  808674:	318000cc 	andi	r6,r6,3
  808678:	21000044 	addi	r4,r4,1
  80867c:	2109883a 	add	r4,r4,r4
  808680:	2109883a 	add	r4,r4,r4
  808684:	1907883a 	add	r3,r3,r4
  808688:	290b883a 	add	r5,r5,r4
  80868c:	30000626 	beq	r6,zero,8086a8 <memcpy+0x11c>
  808690:	198d883a 	add	r6,r3,r6
  808694:	29c00003 	ldbu	r7,0(r5)
  808698:	18c00044 	addi	r3,r3,1
  80869c:	29400044 	addi	r5,r5,1
  8086a0:	19ffffc5 	stb	r7,-1(r3)
  8086a4:	19bffb1e 	bne	r3,r6,808694 <__alt_mem_onchip_mem+0xff800694>
  8086a8:	dfc00217 	ldw	ra,8(sp)
  8086ac:	dc400117 	ldw	r17,4(sp)
  8086b0:	dc000017 	ldw	r16,0(sp)
  8086b4:	dec00304 	addi	sp,sp,12
  8086b8:	f800283a 	ret
  8086bc:	2007883a 	mov	r3,r4
  8086c0:	003ff206 	br	80868c <__alt_mem_onchip_mem+0xff80068c>
  8086c4:	2007883a 	mov	r3,r4
  8086c8:	003ff106 	br	808690 <__alt_mem_onchip_mem+0xff800690>
  8086cc:	200d883a 	mov	r6,r4
  8086d0:	003fee06 	br	80868c <__alt_mem_onchip_mem+0xff80068c>

008086d4 <memmove>:
  8086d4:	2005883a 	mov	r2,r4
  8086d8:	29000b2e 	bgeu	r5,r4,808708 <memmove+0x34>
  8086dc:	298f883a 	add	r7,r5,r6
  8086e0:	21c0092e 	bgeu	r4,r7,808708 <memmove+0x34>
  8086e4:	2187883a 	add	r3,r4,r6
  8086e8:	198bc83a 	sub	r5,r3,r6
  8086ec:	30004826 	beq	r6,zero,808810 <memmove+0x13c>
  8086f0:	39ffffc4 	addi	r7,r7,-1
  8086f4:	39000003 	ldbu	r4,0(r7)
  8086f8:	18ffffc4 	addi	r3,r3,-1
  8086fc:	19000005 	stb	r4,0(r3)
  808700:	28fffb1e 	bne	r5,r3,8086f0 <__alt_mem_onchip_mem+0xff8006f0>
  808704:	f800283a 	ret
  808708:	00c003c4 	movi	r3,15
  80870c:	1980412e 	bgeu	r3,r6,808814 <memmove+0x140>
  808710:	2886b03a 	or	r3,r5,r2
  808714:	18c000cc 	andi	r3,r3,3
  808718:	1800401e 	bne	r3,zero,80881c <memmove+0x148>
  80871c:	33fffc04 	addi	r15,r6,-16
  808720:	781ed13a 	srli	r15,r15,4
  808724:	28c00104 	addi	r3,r5,4
  808728:	13400104 	addi	r13,r2,4
  80872c:	781c913a 	slli	r14,r15,4
  808730:	2b000204 	addi	r12,r5,8
  808734:	12c00204 	addi	r11,r2,8
  808738:	73800504 	addi	r14,r14,20
  80873c:	2a800304 	addi	r10,r5,12
  808740:	12400304 	addi	r9,r2,12
  808744:	2b9d883a 	add	r14,r5,r14
  808748:	2811883a 	mov	r8,r5
  80874c:	100f883a 	mov	r7,r2
  808750:	41000017 	ldw	r4,0(r8)
  808754:	39c00404 	addi	r7,r7,16
  808758:	18c00404 	addi	r3,r3,16
  80875c:	393ffc15 	stw	r4,-16(r7)
  808760:	193ffc17 	ldw	r4,-16(r3)
  808764:	6b400404 	addi	r13,r13,16
  808768:	5ac00404 	addi	r11,r11,16
  80876c:	693ffc15 	stw	r4,-16(r13)
  808770:	61000017 	ldw	r4,0(r12)
  808774:	4a400404 	addi	r9,r9,16
  808778:	42000404 	addi	r8,r8,16
  80877c:	593ffc15 	stw	r4,-16(r11)
  808780:	51000017 	ldw	r4,0(r10)
  808784:	63000404 	addi	r12,r12,16
  808788:	52800404 	addi	r10,r10,16
  80878c:	493ffc15 	stw	r4,-16(r9)
  808790:	1bbfef1e 	bne	r3,r14,808750 <__alt_mem_onchip_mem+0xff800750>
  808794:	79000044 	addi	r4,r15,1
  808798:	2008913a 	slli	r4,r4,4
  80879c:	328003cc 	andi	r10,r6,15
  8087a0:	02c000c4 	movi	r11,3
  8087a4:	1107883a 	add	r3,r2,r4
  8087a8:	290b883a 	add	r5,r5,r4
  8087ac:	5a801e2e 	bgeu	r11,r10,808828 <memmove+0x154>
  8087b0:	1813883a 	mov	r9,r3
  8087b4:	2811883a 	mov	r8,r5
  8087b8:	500f883a 	mov	r7,r10
  8087bc:	41000017 	ldw	r4,0(r8)
  8087c0:	4a400104 	addi	r9,r9,4
  8087c4:	39ffff04 	addi	r7,r7,-4
  8087c8:	493fff15 	stw	r4,-4(r9)
  8087cc:	42000104 	addi	r8,r8,4
  8087d0:	59fffa36 	bltu	r11,r7,8087bc <__alt_mem_onchip_mem+0xff8007bc>
  8087d4:	513fff04 	addi	r4,r10,-4
  8087d8:	2008d0ba 	srli	r4,r4,2
  8087dc:	318000cc 	andi	r6,r6,3
  8087e0:	21000044 	addi	r4,r4,1
  8087e4:	2109883a 	add	r4,r4,r4
  8087e8:	2109883a 	add	r4,r4,r4
  8087ec:	1907883a 	add	r3,r3,r4
  8087f0:	290b883a 	add	r5,r5,r4
  8087f4:	30000b26 	beq	r6,zero,808824 <memmove+0x150>
  8087f8:	198d883a 	add	r6,r3,r6
  8087fc:	29c00003 	ldbu	r7,0(r5)
  808800:	18c00044 	addi	r3,r3,1
  808804:	29400044 	addi	r5,r5,1
  808808:	19ffffc5 	stb	r7,-1(r3)
  80880c:	19bffb1e 	bne	r3,r6,8087fc <__alt_mem_onchip_mem+0xff8007fc>
  808810:	f800283a 	ret
  808814:	1007883a 	mov	r3,r2
  808818:	003ff606 	br	8087f4 <__alt_mem_onchip_mem+0xff8007f4>
  80881c:	1007883a 	mov	r3,r2
  808820:	003ff506 	br	8087f8 <__alt_mem_onchip_mem+0xff8007f8>
  808824:	f800283a 	ret
  808828:	500d883a 	mov	r6,r10
  80882c:	003ff106 	br	8087f4 <__alt_mem_onchip_mem+0xff8007f4>

00808830 <_Balloc>:
  808830:	20801317 	ldw	r2,76(r4)
  808834:	defffc04 	addi	sp,sp,-16
  808838:	dc400115 	stw	r17,4(sp)
  80883c:	dc000015 	stw	r16,0(sp)
  808840:	dfc00315 	stw	ra,12(sp)
  808844:	dc800215 	stw	r18,8(sp)
  808848:	2023883a 	mov	r17,r4
  80884c:	2821883a 	mov	r16,r5
  808850:	10000f26 	beq	r2,zero,808890 <_Balloc+0x60>
  808854:	8407883a 	add	r3,r16,r16
  808858:	18c7883a 	add	r3,r3,r3
  80885c:	10c7883a 	add	r3,r2,r3
  808860:	18800017 	ldw	r2,0(r3)
  808864:	10001126 	beq	r2,zero,8088ac <_Balloc+0x7c>
  808868:	11000017 	ldw	r4,0(r2)
  80886c:	19000015 	stw	r4,0(r3)
  808870:	10000415 	stw	zero,16(r2)
  808874:	10000315 	stw	zero,12(r2)
  808878:	dfc00317 	ldw	ra,12(sp)
  80887c:	dc800217 	ldw	r18,8(sp)
  808880:	dc400117 	ldw	r17,4(sp)
  808884:	dc000017 	ldw	r16,0(sp)
  808888:	dec00404 	addi	sp,sp,16
  80888c:	f800283a 	ret
  808890:	01800844 	movi	r6,33
  808894:	01400104 	movi	r5,4
  808898:	080b6200 	call	80b620 <_calloc_r>
  80889c:	88801315 	stw	r2,76(r17)
  8088a0:	103fec1e 	bne	r2,zero,808854 <__alt_mem_onchip_mem+0xff800854>
  8088a4:	0005883a 	mov	r2,zero
  8088a8:	003ff306 	br	808878 <__alt_mem_onchip_mem+0xff800878>
  8088ac:	01400044 	movi	r5,1
  8088b0:	2c24983a 	sll	r18,r5,r16
  8088b4:	8809883a 	mov	r4,r17
  8088b8:	91800144 	addi	r6,r18,5
  8088bc:	318d883a 	add	r6,r6,r6
  8088c0:	318d883a 	add	r6,r6,r6
  8088c4:	080b6200 	call	80b620 <_calloc_r>
  8088c8:	103ff626 	beq	r2,zero,8088a4 <__alt_mem_onchip_mem+0xff8008a4>
  8088cc:	14000115 	stw	r16,4(r2)
  8088d0:	14800215 	stw	r18,8(r2)
  8088d4:	003fe606 	br	808870 <__alt_mem_onchip_mem+0xff800870>

008088d8 <_Bfree>:
  8088d8:	28000826 	beq	r5,zero,8088fc <_Bfree+0x24>
  8088dc:	28c00117 	ldw	r3,4(r5)
  8088e0:	20801317 	ldw	r2,76(r4)
  8088e4:	18c7883a 	add	r3,r3,r3
  8088e8:	18c7883a 	add	r3,r3,r3
  8088ec:	10c5883a 	add	r2,r2,r3
  8088f0:	10c00017 	ldw	r3,0(r2)
  8088f4:	28c00015 	stw	r3,0(r5)
  8088f8:	11400015 	stw	r5,0(r2)
  8088fc:	f800283a 	ret

00808900 <__multadd>:
  808900:	defffa04 	addi	sp,sp,-24
  808904:	dc800315 	stw	r18,12(sp)
  808908:	dc400215 	stw	r17,8(sp)
  80890c:	dc000115 	stw	r16,4(sp)
  808910:	2823883a 	mov	r17,r5
  808914:	2c000417 	ldw	r16,16(r5)
  808918:	dfc00515 	stw	ra,20(sp)
  80891c:	dcc00415 	stw	r19,16(sp)
  808920:	2025883a 	mov	r18,r4
  808924:	29400504 	addi	r5,r5,20
  808928:	0011883a 	mov	r8,zero
  80892c:	28c00017 	ldw	r3,0(r5)
  808930:	29400104 	addi	r5,r5,4
  808934:	42000044 	addi	r8,r8,1
  808938:	18bfffcc 	andi	r2,r3,65535
  80893c:	1185383a 	mul	r2,r2,r6
  808940:	1806d43a 	srli	r3,r3,16
  808944:	11cf883a 	add	r7,r2,r7
  808948:	3808d43a 	srli	r4,r7,16
  80894c:	1987383a 	mul	r3,r3,r6
  808950:	38bfffcc 	andi	r2,r7,65535
  808954:	1907883a 	add	r3,r3,r4
  808958:	1808943a 	slli	r4,r3,16
  80895c:	180ed43a 	srli	r7,r3,16
  808960:	2085883a 	add	r2,r4,r2
  808964:	28bfff15 	stw	r2,-4(r5)
  808968:	443ff016 	blt	r8,r16,80892c <__alt_mem_onchip_mem+0xff80092c>
  80896c:	38000926 	beq	r7,zero,808994 <__multadd+0x94>
  808970:	88800217 	ldw	r2,8(r17)
  808974:	80800f0e 	bge	r16,r2,8089b4 <__multadd+0xb4>
  808978:	80800144 	addi	r2,r16,5
  80897c:	1085883a 	add	r2,r2,r2
  808980:	1085883a 	add	r2,r2,r2
  808984:	8885883a 	add	r2,r17,r2
  808988:	11c00015 	stw	r7,0(r2)
  80898c:	84000044 	addi	r16,r16,1
  808990:	8c000415 	stw	r16,16(r17)
  808994:	8805883a 	mov	r2,r17
  808998:	dfc00517 	ldw	ra,20(sp)
  80899c:	dcc00417 	ldw	r19,16(sp)
  8089a0:	dc800317 	ldw	r18,12(sp)
  8089a4:	dc400217 	ldw	r17,8(sp)
  8089a8:	dc000117 	ldw	r16,4(sp)
  8089ac:	dec00604 	addi	sp,sp,24
  8089b0:	f800283a 	ret
  8089b4:	89400117 	ldw	r5,4(r17)
  8089b8:	9009883a 	mov	r4,r18
  8089bc:	d9c00015 	stw	r7,0(sp)
  8089c0:	29400044 	addi	r5,r5,1
  8089c4:	08088300 	call	808830 <_Balloc>
  8089c8:	89800417 	ldw	r6,16(r17)
  8089cc:	89400304 	addi	r5,r17,12
  8089d0:	11000304 	addi	r4,r2,12
  8089d4:	31800084 	addi	r6,r6,2
  8089d8:	318d883a 	add	r6,r6,r6
  8089dc:	318d883a 	add	r6,r6,r6
  8089e0:	1027883a 	mov	r19,r2
  8089e4:	080858c0 	call	80858c <memcpy>
  8089e8:	d9c00017 	ldw	r7,0(sp)
  8089ec:	88000a26 	beq	r17,zero,808a18 <__multadd+0x118>
  8089f0:	88c00117 	ldw	r3,4(r17)
  8089f4:	90801317 	ldw	r2,76(r18)
  8089f8:	18c7883a 	add	r3,r3,r3
  8089fc:	18c7883a 	add	r3,r3,r3
  808a00:	10c5883a 	add	r2,r2,r3
  808a04:	10c00017 	ldw	r3,0(r2)
  808a08:	88c00015 	stw	r3,0(r17)
  808a0c:	14400015 	stw	r17,0(r2)
  808a10:	9823883a 	mov	r17,r19
  808a14:	003fd806 	br	808978 <__alt_mem_onchip_mem+0xff800978>
  808a18:	9823883a 	mov	r17,r19
  808a1c:	003fd606 	br	808978 <__alt_mem_onchip_mem+0xff800978>

00808a20 <__s2b>:
  808a20:	defff904 	addi	sp,sp,-28
  808a24:	dc400115 	stw	r17,4(sp)
  808a28:	dc000015 	stw	r16,0(sp)
  808a2c:	2023883a 	mov	r17,r4
  808a30:	2821883a 	mov	r16,r5
  808a34:	39000204 	addi	r4,r7,8
  808a38:	01400244 	movi	r5,9
  808a3c:	dcc00315 	stw	r19,12(sp)
  808a40:	dc800215 	stw	r18,8(sp)
  808a44:	dfc00615 	stw	ra,24(sp)
  808a48:	dd400515 	stw	r21,20(sp)
  808a4c:	dd000415 	stw	r20,16(sp)
  808a50:	3825883a 	mov	r18,r7
  808a54:	3027883a 	mov	r19,r6
  808a58:	08013d80 	call	8013d8 <__divsi3>
  808a5c:	00c00044 	movi	r3,1
  808a60:	000b883a 	mov	r5,zero
  808a64:	1880030e 	bge	r3,r2,808a74 <__s2b+0x54>
  808a68:	18c7883a 	add	r3,r3,r3
  808a6c:	29400044 	addi	r5,r5,1
  808a70:	18bffd16 	blt	r3,r2,808a68 <__alt_mem_onchip_mem+0xff800a68>
  808a74:	8809883a 	mov	r4,r17
  808a78:	08088300 	call	808830 <_Balloc>
  808a7c:	d8c00717 	ldw	r3,28(sp)
  808a80:	10c00515 	stw	r3,20(r2)
  808a84:	00c00044 	movi	r3,1
  808a88:	10c00415 	stw	r3,16(r2)
  808a8c:	00c00244 	movi	r3,9
  808a90:	1cc0210e 	bge	r3,r19,808b18 <__s2b+0xf8>
  808a94:	80eb883a 	add	r21,r16,r3
  808a98:	a829883a 	mov	r20,r21
  808a9c:	84e1883a 	add	r16,r16,r19
  808aa0:	a1c00007 	ldb	r7,0(r20)
  808aa4:	01800284 	movi	r6,10
  808aa8:	a5000044 	addi	r20,r20,1
  808aac:	100b883a 	mov	r5,r2
  808ab0:	39fff404 	addi	r7,r7,-48
  808ab4:	8809883a 	mov	r4,r17
  808ab8:	08089000 	call	808900 <__multadd>
  808abc:	a43ff81e 	bne	r20,r16,808aa0 <__alt_mem_onchip_mem+0xff800aa0>
  808ac0:	ace1883a 	add	r16,r21,r19
  808ac4:	843ffe04 	addi	r16,r16,-8
  808ac8:	9c800a0e 	bge	r19,r18,808af4 <__s2b+0xd4>
  808acc:	94e5c83a 	sub	r18,r18,r19
  808ad0:	84a5883a 	add	r18,r16,r18
  808ad4:	81c00007 	ldb	r7,0(r16)
  808ad8:	01800284 	movi	r6,10
  808adc:	84000044 	addi	r16,r16,1
  808ae0:	100b883a 	mov	r5,r2
  808ae4:	39fff404 	addi	r7,r7,-48
  808ae8:	8809883a 	mov	r4,r17
  808aec:	08089000 	call	808900 <__multadd>
  808af0:	84bff81e 	bne	r16,r18,808ad4 <__alt_mem_onchip_mem+0xff800ad4>
  808af4:	dfc00617 	ldw	ra,24(sp)
  808af8:	dd400517 	ldw	r21,20(sp)
  808afc:	dd000417 	ldw	r20,16(sp)
  808b00:	dcc00317 	ldw	r19,12(sp)
  808b04:	dc800217 	ldw	r18,8(sp)
  808b08:	dc400117 	ldw	r17,4(sp)
  808b0c:	dc000017 	ldw	r16,0(sp)
  808b10:	dec00704 	addi	sp,sp,28
  808b14:	f800283a 	ret
  808b18:	84000284 	addi	r16,r16,10
  808b1c:	1827883a 	mov	r19,r3
  808b20:	003fe906 	br	808ac8 <__alt_mem_onchip_mem+0xff800ac8>

00808b24 <__hi0bits>:
  808b24:	20bfffec 	andhi	r2,r4,65535
  808b28:	1000141e 	bne	r2,zero,808b7c <__hi0bits+0x58>
  808b2c:	2008943a 	slli	r4,r4,16
  808b30:	00800404 	movi	r2,16
  808b34:	20ffc02c 	andhi	r3,r4,65280
  808b38:	1800021e 	bne	r3,zero,808b44 <__hi0bits+0x20>
  808b3c:	2008923a 	slli	r4,r4,8
  808b40:	10800204 	addi	r2,r2,8
  808b44:	20fc002c 	andhi	r3,r4,61440
  808b48:	1800021e 	bne	r3,zero,808b54 <__hi0bits+0x30>
  808b4c:	2008913a 	slli	r4,r4,4
  808b50:	10800104 	addi	r2,r2,4
  808b54:	20f0002c 	andhi	r3,r4,49152
  808b58:	1800031e 	bne	r3,zero,808b68 <__hi0bits+0x44>
  808b5c:	2109883a 	add	r4,r4,r4
  808b60:	10800084 	addi	r2,r2,2
  808b64:	2109883a 	add	r4,r4,r4
  808b68:	20000316 	blt	r4,zero,808b78 <__hi0bits+0x54>
  808b6c:	2110002c 	andhi	r4,r4,16384
  808b70:	2000041e 	bne	r4,zero,808b84 <__hi0bits+0x60>
  808b74:	00800804 	movi	r2,32
  808b78:	f800283a 	ret
  808b7c:	0005883a 	mov	r2,zero
  808b80:	003fec06 	br	808b34 <__alt_mem_onchip_mem+0xff800b34>
  808b84:	10800044 	addi	r2,r2,1
  808b88:	f800283a 	ret

00808b8c <__lo0bits>:
  808b8c:	20c00017 	ldw	r3,0(r4)
  808b90:	188001cc 	andi	r2,r3,7
  808b94:	10000826 	beq	r2,zero,808bb8 <__lo0bits+0x2c>
  808b98:	1880004c 	andi	r2,r3,1
  808b9c:	1000211e 	bne	r2,zero,808c24 <__lo0bits+0x98>
  808ba0:	1880008c 	andi	r2,r3,2
  808ba4:	1000211e 	bne	r2,zero,808c2c <__lo0bits+0xa0>
  808ba8:	1806d0ba 	srli	r3,r3,2
  808bac:	00800084 	movi	r2,2
  808bb0:	20c00015 	stw	r3,0(r4)
  808bb4:	f800283a 	ret
  808bb8:	18bfffcc 	andi	r2,r3,65535
  808bbc:	10001326 	beq	r2,zero,808c0c <__lo0bits+0x80>
  808bc0:	0005883a 	mov	r2,zero
  808bc4:	19403fcc 	andi	r5,r3,255
  808bc8:	2800021e 	bne	r5,zero,808bd4 <__lo0bits+0x48>
  808bcc:	1806d23a 	srli	r3,r3,8
  808bd0:	10800204 	addi	r2,r2,8
  808bd4:	194003cc 	andi	r5,r3,15
  808bd8:	2800021e 	bne	r5,zero,808be4 <__lo0bits+0x58>
  808bdc:	1806d13a 	srli	r3,r3,4
  808be0:	10800104 	addi	r2,r2,4
  808be4:	194000cc 	andi	r5,r3,3
  808be8:	2800021e 	bne	r5,zero,808bf4 <__lo0bits+0x68>
  808bec:	1806d0ba 	srli	r3,r3,2
  808bf0:	10800084 	addi	r2,r2,2
  808bf4:	1940004c 	andi	r5,r3,1
  808bf8:	2800081e 	bne	r5,zero,808c1c <__lo0bits+0x90>
  808bfc:	1806d07a 	srli	r3,r3,1
  808c00:	1800051e 	bne	r3,zero,808c18 <__lo0bits+0x8c>
  808c04:	00800804 	movi	r2,32
  808c08:	f800283a 	ret
  808c0c:	1806d43a 	srli	r3,r3,16
  808c10:	00800404 	movi	r2,16
  808c14:	003feb06 	br	808bc4 <__alt_mem_onchip_mem+0xff800bc4>
  808c18:	10800044 	addi	r2,r2,1
  808c1c:	20c00015 	stw	r3,0(r4)
  808c20:	f800283a 	ret
  808c24:	0005883a 	mov	r2,zero
  808c28:	f800283a 	ret
  808c2c:	1806d07a 	srli	r3,r3,1
  808c30:	00800044 	movi	r2,1
  808c34:	20c00015 	stw	r3,0(r4)
  808c38:	f800283a 	ret

00808c3c <__i2b>:
  808c3c:	defffd04 	addi	sp,sp,-12
  808c40:	dc000015 	stw	r16,0(sp)
  808c44:	04000044 	movi	r16,1
  808c48:	dc400115 	stw	r17,4(sp)
  808c4c:	2823883a 	mov	r17,r5
  808c50:	800b883a 	mov	r5,r16
  808c54:	dfc00215 	stw	ra,8(sp)
  808c58:	08088300 	call	808830 <_Balloc>
  808c5c:	14400515 	stw	r17,20(r2)
  808c60:	14000415 	stw	r16,16(r2)
  808c64:	dfc00217 	ldw	ra,8(sp)
  808c68:	dc400117 	ldw	r17,4(sp)
  808c6c:	dc000017 	ldw	r16,0(sp)
  808c70:	dec00304 	addi	sp,sp,12
  808c74:	f800283a 	ret

00808c78 <__multiply>:
  808c78:	defffa04 	addi	sp,sp,-24
  808c7c:	dcc00315 	stw	r19,12(sp)
  808c80:	dc800215 	stw	r18,8(sp)
  808c84:	34c00417 	ldw	r19,16(r6)
  808c88:	2c800417 	ldw	r18,16(r5)
  808c8c:	dd000415 	stw	r20,16(sp)
  808c90:	dc400115 	stw	r17,4(sp)
  808c94:	dfc00515 	stw	ra,20(sp)
  808c98:	dc000015 	stw	r16,0(sp)
  808c9c:	2829883a 	mov	r20,r5
  808ca0:	3023883a 	mov	r17,r6
  808ca4:	94c0050e 	bge	r18,r19,808cbc <__multiply+0x44>
  808ca8:	9007883a 	mov	r3,r18
  808cac:	3029883a 	mov	r20,r6
  808cb0:	9825883a 	mov	r18,r19
  808cb4:	2823883a 	mov	r17,r5
  808cb8:	1827883a 	mov	r19,r3
  808cbc:	a0800217 	ldw	r2,8(r20)
  808cc0:	94e1883a 	add	r16,r18,r19
  808cc4:	a1400117 	ldw	r5,4(r20)
  808cc8:	1400010e 	bge	r2,r16,808cd0 <__multiply+0x58>
  808ccc:	29400044 	addi	r5,r5,1
  808cd0:	08088300 	call	808830 <_Balloc>
  808cd4:	8415883a 	add	r10,r16,r16
  808cd8:	12c00504 	addi	r11,r2,20
  808cdc:	5295883a 	add	r10,r10,r10
  808ce0:	5a95883a 	add	r10,r11,r10
  808ce4:	5807883a 	mov	r3,r11
  808ce8:	5a80032e 	bgeu	r11,r10,808cf8 <__multiply+0x80>
  808cec:	18000015 	stw	zero,0(r3)
  808cf0:	18c00104 	addi	r3,r3,4
  808cf4:	1abffd36 	bltu	r3,r10,808cec <__alt_mem_onchip_mem+0xff800cec>
  808cf8:	9ce7883a 	add	r19,r19,r19
  808cfc:	94a5883a 	add	r18,r18,r18
  808d00:	89800504 	addi	r6,r17,20
  808d04:	9ce7883a 	add	r19,r19,r19
  808d08:	a3400504 	addi	r13,r20,20
  808d0c:	94a5883a 	add	r18,r18,r18
  808d10:	34d9883a 	add	r12,r6,r19
  808d14:	6c93883a 	add	r9,r13,r18
  808d18:	3300422e 	bgeu	r6,r12,808e24 <__multiply+0x1ac>
  808d1c:	37c00017 	ldw	ra,0(r6)
  808d20:	fbffffcc 	andi	r15,ra,65535
  808d24:	78001b26 	beq	r15,zero,808d94 <__multiply+0x11c>
  808d28:	5811883a 	mov	r8,r11
  808d2c:	681d883a 	mov	r14,r13
  808d30:	000f883a 	mov	r7,zero
  808d34:	71000017 	ldw	r4,0(r14)
  808d38:	40c00017 	ldw	r3,0(r8)
  808d3c:	73800104 	addi	r14,r14,4
  808d40:	217fffcc 	andi	r5,r4,65535
  808d44:	2bcb383a 	mul	r5,r5,r15
  808d48:	2008d43a 	srli	r4,r4,16
  808d4c:	1c7fffcc 	andi	r17,r3,65535
  808d50:	2c4b883a 	add	r5,r5,r17
  808d54:	29cb883a 	add	r5,r5,r7
  808d58:	23c9383a 	mul	r4,r4,r15
  808d5c:	1806d43a 	srli	r3,r3,16
  808d60:	280ed43a 	srli	r7,r5,16
  808d64:	297fffcc 	andi	r5,r5,65535
  808d68:	20c7883a 	add	r3,r4,r3
  808d6c:	19c7883a 	add	r3,r3,r7
  808d70:	1808943a 	slli	r4,r3,16
  808d74:	4023883a 	mov	r17,r8
  808d78:	180ed43a 	srli	r7,r3,16
  808d7c:	214ab03a 	or	r5,r4,r5
  808d80:	41400015 	stw	r5,0(r8)
  808d84:	42000104 	addi	r8,r8,4
  808d88:	727fea36 	bltu	r14,r9,808d34 <__alt_mem_onchip_mem+0xff800d34>
  808d8c:	89c00115 	stw	r7,4(r17)
  808d90:	37c00017 	ldw	ra,0(r6)
  808d94:	f83ed43a 	srli	ra,ra,16
  808d98:	f8001f26 	beq	ra,zero,808e18 <__multiply+0x1a0>
  808d9c:	58c00017 	ldw	r3,0(r11)
  808da0:	681d883a 	mov	r14,r13
  808da4:	581f883a 	mov	r15,r11
  808da8:	1811883a 	mov	r8,r3
  808dac:	5825883a 	mov	r18,r11
  808db0:	000f883a 	mov	r7,zero
  808db4:	00000106 	br	808dbc <__multiply+0x144>
  808db8:	8825883a 	mov	r18,r17
  808dbc:	7140000b 	ldhu	r5,0(r14)
  808dc0:	4010d43a 	srli	r8,r8,16
  808dc4:	193fffcc 	andi	r4,r3,65535
  808dc8:	2fcb383a 	mul	r5,r5,ra
  808dcc:	7bc00104 	addi	r15,r15,4
  808dd0:	73800104 	addi	r14,r14,4
  808dd4:	2a0b883a 	add	r5,r5,r8
  808dd8:	29cb883a 	add	r5,r5,r7
  808ddc:	2806943a 	slli	r3,r5,16
  808de0:	94400104 	addi	r17,r18,4
  808de4:	280ad43a 	srli	r5,r5,16
  808de8:	1908b03a 	or	r4,r3,r4
  808dec:	793fff15 	stw	r4,-4(r15)
  808df0:	70ffff17 	ldw	r3,-4(r14)
  808df4:	8a000017 	ldw	r8,0(r17)
  808df8:	1806d43a 	srli	r3,r3,16
  808dfc:	413fffcc 	andi	r4,r8,65535
  808e00:	1fc7383a 	mul	r3,r3,ra
  808e04:	1907883a 	add	r3,r3,r4
  808e08:	1947883a 	add	r3,r3,r5
  808e0c:	180ed43a 	srli	r7,r3,16
  808e10:	727fe936 	bltu	r14,r9,808db8 <__alt_mem_onchip_mem+0xff800db8>
  808e14:	90c00115 	stw	r3,4(r18)
  808e18:	31800104 	addi	r6,r6,4
  808e1c:	5ac00104 	addi	r11,r11,4
  808e20:	333fbe36 	bltu	r6,r12,808d1c <__alt_mem_onchip_mem+0xff800d1c>
  808e24:	0400090e 	bge	zero,r16,808e4c <__multiply+0x1d4>
  808e28:	50ffff17 	ldw	r3,-4(r10)
  808e2c:	52bfff04 	addi	r10,r10,-4
  808e30:	18000326 	beq	r3,zero,808e40 <__multiply+0x1c8>
  808e34:	00000506 	br	808e4c <__multiply+0x1d4>
  808e38:	50c00017 	ldw	r3,0(r10)
  808e3c:	1800031e 	bne	r3,zero,808e4c <__multiply+0x1d4>
  808e40:	843fffc4 	addi	r16,r16,-1
  808e44:	52bfff04 	addi	r10,r10,-4
  808e48:	803ffb1e 	bne	r16,zero,808e38 <__alt_mem_onchip_mem+0xff800e38>
  808e4c:	14000415 	stw	r16,16(r2)
  808e50:	dfc00517 	ldw	ra,20(sp)
  808e54:	dd000417 	ldw	r20,16(sp)
  808e58:	dcc00317 	ldw	r19,12(sp)
  808e5c:	dc800217 	ldw	r18,8(sp)
  808e60:	dc400117 	ldw	r17,4(sp)
  808e64:	dc000017 	ldw	r16,0(sp)
  808e68:	dec00604 	addi	sp,sp,24
  808e6c:	f800283a 	ret

00808e70 <__pow5mult>:
  808e70:	defffa04 	addi	sp,sp,-24
  808e74:	dcc00315 	stw	r19,12(sp)
  808e78:	dc000015 	stw	r16,0(sp)
  808e7c:	dfc00515 	stw	ra,20(sp)
  808e80:	dd000415 	stw	r20,16(sp)
  808e84:	dc800215 	stw	r18,8(sp)
  808e88:	dc400115 	stw	r17,4(sp)
  808e8c:	308000cc 	andi	r2,r6,3
  808e90:	3021883a 	mov	r16,r6
  808e94:	2027883a 	mov	r19,r4
  808e98:	10002f1e 	bne	r2,zero,808f58 <__pow5mult+0xe8>
  808e9c:	2825883a 	mov	r18,r5
  808ea0:	8021d0ba 	srai	r16,r16,2
  808ea4:	80001a26 	beq	r16,zero,808f10 <__pow5mult+0xa0>
  808ea8:	9c401217 	ldw	r17,72(r19)
  808eac:	8800061e 	bne	r17,zero,808ec8 <__pow5mult+0x58>
  808eb0:	00003406 	br	808f84 <__pow5mult+0x114>
  808eb4:	8021d07a 	srai	r16,r16,1
  808eb8:	80001526 	beq	r16,zero,808f10 <__pow5mult+0xa0>
  808ebc:	88800017 	ldw	r2,0(r17)
  808ec0:	10001c26 	beq	r2,zero,808f34 <__pow5mult+0xc4>
  808ec4:	1023883a 	mov	r17,r2
  808ec8:	8080004c 	andi	r2,r16,1
  808ecc:	103ff926 	beq	r2,zero,808eb4 <__alt_mem_onchip_mem+0xff800eb4>
  808ed0:	880d883a 	mov	r6,r17
  808ed4:	900b883a 	mov	r5,r18
  808ed8:	9809883a 	mov	r4,r19
  808edc:	0808c780 	call	808c78 <__multiply>
  808ee0:	90001b26 	beq	r18,zero,808f50 <__pow5mult+0xe0>
  808ee4:	91000117 	ldw	r4,4(r18)
  808ee8:	98c01317 	ldw	r3,76(r19)
  808eec:	8021d07a 	srai	r16,r16,1
  808ef0:	2109883a 	add	r4,r4,r4
  808ef4:	2109883a 	add	r4,r4,r4
  808ef8:	1907883a 	add	r3,r3,r4
  808efc:	19000017 	ldw	r4,0(r3)
  808f00:	91000015 	stw	r4,0(r18)
  808f04:	1c800015 	stw	r18,0(r3)
  808f08:	1025883a 	mov	r18,r2
  808f0c:	803feb1e 	bne	r16,zero,808ebc <__alt_mem_onchip_mem+0xff800ebc>
  808f10:	9005883a 	mov	r2,r18
  808f14:	dfc00517 	ldw	ra,20(sp)
  808f18:	dd000417 	ldw	r20,16(sp)
  808f1c:	dcc00317 	ldw	r19,12(sp)
  808f20:	dc800217 	ldw	r18,8(sp)
  808f24:	dc400117 	ldw	r17,4(sp)
  808f28:	dc000017 	ldw	r16,0(sp)
  808f2c:	dec00604 	addi	sp,sp,24
  808f30:	f800283a 	ret
  808f34:	880d883a 	mov	r6,r17
  808f38:	880b883a 	mov	r5,r17
  808f3c:	9809883a 	mov	r4,r19
  808f40:	0808c780 	call	808c78 <__multiply>
  808f44:	88800015 	stw	r2,0(r17)
  808f48:	10000015 	stw	zero,0(r2)
  808f4c:	003fdd06 	br	808ec4 <__alt_mem_onchip_mem+0xff800ec4>
  808f50:	1025883a 	mov	r18,r2
  808f54:	003fd706 	br	808eb4 <__alt_mem_onchip_mem+0xff800eb4>
  808f58:	10bfffc4 	addi	r2,r2,-1
  808f5c:	1085883a 	add	r2,r2,r2
  808f60:	00c02074 	movhi	r3,129
  808f64:	18ccb404 	addi	r3,r3,13008
  808f68:	1085883a 	add	r2,r2,r2
  808f6c:	1885883a 	add	r2,r3,r2
  808f70:	11800017 	ldw	r6,0(r2)
  808f74:	000f883a 	mov	r7,zero
  808f78:	08089000 	call	808900 <__multadd>
  808f7c:	1025883a 	mov	r18,r2
  808f80:	003fc706 	br	808ea0 <__alt_mem_onchip_mem+0xff800ea0>
  808f84:	05000044 	movi	r20,1
  808f88:	a00b883a 	mov	r5,r20
  808f8c:	9809883a 	mov	r4,r19
  808f90:	08088300 	call	808830 <_Balloc>
  808f94:	1023883a 	mov	r17,r2
  808f98:	00809c44 	movi	r2,625
  808f9c:	88800515 	stw	r2,20(r17)
  808fa0:	8d000415 	stw	r20,16(r17)
  808fa4:	9c401215 	stw	r17,72(r19)
  808fa8:	88000015 	stw	zero,0(r17)
  808fac:	003fc606 	br	808ec8 <__alt_mem_onchip_mem+0xff800ec8>

00808fb0 <__lshift>:
  808fb0:	defff904 	addi	sp,sp,-28
  808fb4:	dd400515 	stw	r21,20(sp)
  808fb8:	dcc00315 	stw	r19,12(sp)
  808fbc:	302bd17a 	srai	r21,r6,5
  808fc0:	2cc00417 	ldw	r19,16(r5)
  808fc4:	28800217 	ldw	r2,8(r5)
  808fc8:	dd000415 	stw	r20,16(sp)
  808fcc:	ace7883a 	add	r19,r21,r19
  808fd0:	dc800215 	stw	r18,8(sp)
  808fd4:	dc400115 	stw	r17,4(sp)
  808fd8:	dc000015 	stw	r16,0(sp)
  808fdc:	dfc00615 	stw	ra,24(sp)
  808fe0:	9c000044 	addi	r16,r19,1
  808fe4:	2823883a 	mov	r17,r5
  808fe8:	3029883a 	mov	r20,r6
  808fec:	2025883a 	mov	r18,r4
  808ff0:	29400117 	ldw	r5,4(r5)
  808ff4:	1400030e 	bge	r2,r16,809004 <__lshift+0x54>
  808ff8:	1085883a 	add	r2,r2,r2
  808ffc:	29400044 	addi	r5,r5,1
  809000:	143ffd16 	blt	r2,r16,808ff8 <__alt_mem_onchip_mem+0xff800ff8>
  809004:	9009883a 	mov	r4,r18
  809008:	08088300 	call	808830 <_Balloc>
  80900c:	10c00504 	addi	r3,r2,20
  809010:	0540070e 	bge	zero,r21,809030 <__lshift+0x80>
  809014:	ad6b883a 	add	r21,r21,r21
  809018:	ad6b883a 	add	r21,r21,r21
  80901c:	1809883a 	mov	r4,r3
  809020:	1d47883a 	add	r3,r3,r21
  809024:	20000015 	stw	zero,0(r4)
  809028:	21000104 	addi	r4,r4,4
  80902c:	193ffd1e 	bne	r3,r4,809024 <__alt_mem_onchip_mem+0xff801024>
  809030:	8a000417 	ldw	r8,16(r17)
  809034:	89000504 	addi	r4,r17,20
  809038:	a18007cc 	andi	r6,r20,31
  80903c:	4211883a 	add	r8,r8,r8
  809040:	4211883a 	add	r8,r8,r8
  809044:	2211883a 	add	r8,r4,r8
  809048:	30002326 	beq	r6,zero,8090d8 <__lshift+0x128>
  80904c:	02400804 	movi	r9,32
  809050:	4993c83a 	sub	r9,r9,r6
  809054:	000b883a 	mov	r5,zero
  809058:	21c00017 	ldw	r7,0(r4)
  80905c:	1815883a 	mov	r10,r3
  809060:	18c00104 	addi	r3,r3,4
  809064:	398e983a 	sll	r7,r7,r6
  809068:	21000104 	addi	r4,r4,4
  80906c:	394ab03a 	or	r5,r7,r5
  809070:	197fff15 	stw	r5,-4(r3)
  809074:	217fff17 	ldw	r5,-4(r4)
  809078:	2a4ad83a 	srl	r5,r5,r9
  80907c:	223ff636 	bltu	r4,r8,809058 <__alt_mem_onchip_mem+0xff801058>
  809080:	51400115 	stw	r5,4(r10)
  809084:	28001a1e 	bne	r5,zero,8090f0 <__lshift+0x140>
  809088:	843fffc4 	addi	r16,r16,-1
  80908c:	14000415 	stw	r16,16(r2)
  809090:	88000826 	beq	r17,zero,8090b4 <__lshift+0x104>
  809094:	89000117 	ldw	r4,4(r17)
  809098:	90c01317 	ldw	r3,76(r18)
  80909c:	2109883a 	add	r4,r4,r4
  8090a0:	2109883a 	add	r4,r4,r4
  8090a4:	1907883a 	add	r3,r3,r4
  8090a8:	19000017 	ldw	r4,0(r3)
  8090ac:	89000015 	stw	r4,0(r17)
  8090b0:	1c400015 	stw	r17,0(r3)
  8090b4:	dfc00617 	ldw	ra,24(sp)
  8090b8:	dd400517 	ldw	r21,20(sp)
  8090bc:	dd000417 	ldw	r20,16(sp)
  8090c0:	dcc00317 	ldw	r19,12(sp)
  8090c4:	dc800217 	ldw	r18,8(sp)
  8090c8:	dc400117 	ldw	r17,4(sp)
  8090cc:	dc000017 	ldw	r16,0(sp)
  8090d0:	dec00704 	addi	sp,sp,28
  8090d4:	f800283a 	ret
  8090d8:	21400017 	ldw	r5,0(r4)
  8090dc:	18c00104 	addi	r3,r3,4
  8090e0:	21000104 	addi	r4,r4,4
  8090e4:	197fff15 	stw	r5,-4(r3)
  8090e8:	223ffb36 	bltu	r4,r8,8090d8 <__alt_mem_onchip_mem+0xff8010d8>
  8090ec:	003fe606 	br	809088 <__alt_mem_onchip_mem+0xff801088>
  8090f0:	9c000084 	addi	r16,r19,2
  8090f4:	003fe406 	br	809088 <__alt_mem_onchip_mem+0xff801088>

008090f8 <__mcmp>:
  8090f8:	20800417 	ldw	r2,16(r4)
  8090fc:	28c00417 	ldw	r3,16(r5)
  809100:	10c5c83a 	sub	r2,r2,r3
  809104:	1000111e 	bne	r2,zero,80914c <__mcmp+0x54>
  809108:	18c7883a 	add	r3,r3,r3
  80910c:	18c7883a 	add	r3,r3,r3
  809110:	21000504 	addi	r4,r4,20
  809114:	29400504 	addi	r5,r5,20
  809118:	20c5883a 	add	r2,r4,r3
  80911c:	28cb883a 	add	r5,r5,r3
  809120:	00000106 	br	809128 <__mcmp+0x30>
  809124:	20800a2e 	bgeu	r4,r2,809150 <__mcmp+0x58>
  809128:	10bfff04 	addi	r2,r2,-4
  80912c:	297fff04 	addi	r5,r5,-4
  809130:	11800017 	ldw	r6,0(r2)
  809134:	28c00017 	ldw	r3,0(r5)
  809138:	30fffa26 	beq	r6,r3,809124 <__alt_mem_onchip_mem+0xff801124>
  80913c:	30c00236 	bltu	r6,r3,809148 <__mcmp+0x50>
  809140:	00800044 	movi	r2,1
  809144:	f800283a 	ret
  809148:	00bfffc4 	movi	r2,-1
  80914c:	f800283a 	ret
  809150:	0005883a 	mov	r2,zero
  809154:	f800283a 	ret

00809158 <__mdiff>:
  809158:	28c00417 	ldw	r3,16(r5)
  80915c:	30800417 	ldw	r2,16(r6)
  809160:	defffa04 	addi	sp,sp,-24
  809164:	dcc00315 	stw	r19,12(sp)
  809168:	dc800215 	stw	r18,8(sp)
  80916c:	dfc00515 	stw	ra,20(sp)
  809170:	dd000415 	stw	r20,16(sp)
  809174:	dc400115 	stw	r17,4(sp)
  809178:	dc000015 	stw	r16,0(sp)
  80917c:	1887c83a 	sub	r3,r3,r2
  809180:	2825883a 	mov	r18,r5
  809184:	3027883a 	mov	r19,r6
  809188:	1800141e 	bne	r3,zero,8091dc <__mdiff+0x84>
  80918c:	1085883a 	add	r2,r2,r2
  809190:	1085883a 	add	r2,r2,r2
  809194:	2a000504 	addi	r8,r5,20
  809198:	34000504 	addi	r16,r6,20
  80919c:	4087883a 	add	r3,r8,r2
  8091a0:	8085883a 	add	r2,r16,r2
  8091a4:	00000106 	br	8091ac <__mdiff+0x54>
  8091a8:	40c0592e 	bgeu	r8,r3,809310 <__mdiff+0x1b8>
  8091ac:	18ffff04 	addi	r3,r3,-4
  8091b0:	10bfff04 	addi	r2,r2,-4
  8091b4:	19c00017 	ldw	r7,0(r3)
  8091b8:	11400017 	ldw	r5,0(r2)
  8091bc:	397ffa26 	beq	r7,r5,8091a8 <__alt_mem_onchip_mem+0xff8011a8>
  8091c0:	3940592e 	bgeu	r7,r5,809328 <__mdiff+0x1d0>
  8091c4:	9005883a 	mov	r2,r18
  8091c8:	4023883a 	mov	r17,r8
  8091cc:	9825883a 	mov	r18,r19
  8091d0:	05000044 	movi	r20,1
  8091d4:	1027883a 	mov	r19,r2
  8091d8:	00000406 	br	8091ec <__mdiff+0x94>
  8091dc:	18005616 	blt	r3,zero,809338 <__mdiff+0x1e0>
  8091e0:	34400504 	addi	r17,r6,20
  8091e4:	2c000504 	addi	r16,r5,20
  8091e8:	0029883a 	mov	r20,zero
  8091ec:	91400117 	ldw	r5,4(r18)
  8091f0:	08088300 	call	808830 <_Balloc>
  8091f4:	92400417 	ldw	r9,16(r18)
  8091f8:	9b000417 	ldw	r12,16(r19)
  8091fc:	12c00504 	addi	r11,r2,20
  809200:	4a51883a 	add	r8,r9,r9
  809204:	6319883a 	add	r12,r12,r12
  809208:	4211883a 	add	r8,r8,r8
  80920c:	6319883a 	add	r12,r12,r12
  809210:	15000315 	stw	r20,12(r2)
  809214:	8211883a 	add	r8,r16,r8
  809218:	8b19883a 	add	r12,r17,r12
  80921c:	0007883a 	mov	r3,zero
  809220:	81400017 	ldw	r5,0(r16)
  809224:	89c00017 	ldw	r7,0(r17)
  809228:	59800104 	addi	r6,r11,4
  80922c:	293fffcc 	andi	r4,r5,65535
  809230:	20c7883a 	add	r3,r4,r3
  809234:	393fffcc 	andi	r4,r7,65535
  809238:	1909c83a 	sub	r4,r3,r4
  80923c:	280ad43a 	srli	r5,r5,16
  809240:	380ed43a 	srli	r7,r7,16
  809244:	2007d43a 	srai	r3,r4,16
  809248:	213fffcc 	andi	r4,r4,65535
  80924c:	29cbc83a 	sub	r5,r5,r7
  809250:	28c7883a 	add	r3,r5,r3
  809254:	180a943a 	slli	r5,r3,16
  809258:	8c400104 	addi	r17,r17,4
  80925c:	84000104 	addi	r16,r16,4
  809260:	2908b03a 	or	r4,r5,r4
  809264:	59000015 	stw	r4,0(r11)
  809268:	1807d43a 	srai	r3,r3,16
  80926c:	3015883a 	mov	r10,r6
  809270:	3017883a 	mov	r11,r6
  809274:	8b3fea36 	bltu	r17,r12,809220 <__alt_mem_onchip_mem+0xff801220>
  809278:	8200162e 	bgeu	r16,r8,8092d4 <__mdiff+0x17c>
  80927c:	8017883a 	mov	r11,r16
  809280:	59400017 	ldw	r5,0(r11)
  809284:	31800104 	addi	r6,r6,4
  809288:	5ac00104 	addi	r11,r11,4
  80928c:	293fffcc 	andi	r4,r5,65535
  809290:	20c7883a 	add	r3,r4,r3
  809294:	280ed43a 	srli	r7,r5,16
  809298:	180bd43a 	srai	r5,r3,16
  80929c:	193fffcc 	andi	r4,r3,65535
  8092a0:	3947883a 	add	r3,r7,r5
  8092a4:	180a943a 	slli	r5,r3,16
  8092a8:	1807d43a 	srai	r3,r3,16
  8092ac:	2908b03a 	or	r4,r5,r4
  8092b0:	313fff15 	stw	r4,-4(r6)
  8092b4:	5a3ff236 	bltu	r11,r8,809280 <__alt_mem_onchip_mem+0xff801280>
  8092b8:	0406303a 	nor	r3,zero,r16
  8092bc:	1a07883a 	add	r3,r3,r8
  8092c0:	1806d0ba 	srli	r3,r3,2
  8092c4:	18c00044 	addi	r3,r3,1
  8092c8:	18c7883a 	add	r3,r3,r3
  8092cc:	18c7883a 	add	r3,r3,r3
  8092d0:	50d5883a 	add	r10,r10,r3
  8092d4:	50ffff04 	addi	r3,r10,-4
  8092d8:	2000041e 	bne	r4,zero,8092ec <__mdiff+0x194>
  8092dc:	18ffff04 	addi	r3,r3,-4
  8092e0:	19000017 	ldw	r4,0(r3)
  8092e4:	4a7fffc4 	addi	r9,r9,-1
  8092e8:	203ffc26 	beq	r4,zero,8092dc <__alt_mem_onchip_mem+0xff8012dc>
  8092ec:	12400415 	stw	r9,16(r2)
  8092f0:	dfc00517 	ldw	ra,20(sp)
  8092f4:	dd000417 	ldw	r20,16(sp)
  8092f8:	dcc00317 	ldw	r19,12(sp)
  8092fc:	dc800217 	ldw	r18,8(sp)
  809300:	dc400117 	ldw	r17,4(sp)
  809304:	dc000017 	ldw	r16,0(sp)
  809308:	dec00604 	addi	sp,sp,24
  80930c:	f800283a 	ret
  809310:	000b883a 	mov	r5,zero
  809314:	08088300 	call	808830 <_Balloc>
  809318:	00c00044 	movi	r3,1
  80931c:	10c00415 	stw	r3,16(r2)
  809320:	10000515 	stw	zero,20(r2)
  809324:	003ff206 	br	8092f0 <__alt_mem_onchip_mem+0xff8012f0>
  809328:	8023883a 	mov	r17,r16
  80932c:	0029883a 	mov	r20,zero
  809330:	4021883a 	mov	r16,r8
  809334:	003fad06 	br	8091ec <__alt_mem_onchip_mem+0xff8011ec>
  809338:	9005883a 	mov	r2,r18
  80933c:	94400504 	addi	r17,r18,20
  809340:	9c000504 	addi	r16,r19,20
  809344:	9825883a 	mov	r18,r19
  809348:	05000044 	movi	r20,1
  80934c:	1027883a 	mov	r19,r2
  809350:	003fa606 	br	8091ec <__alt_mem_onchip_mem+0xff8011ec>

00809354 <__ulp>:
  809354:	295ffc2c 	andhi	r5,r5,32752
  809358:	00bf3034 	movhi	r2,64704
  80935c:	2887883a 	add	r3,r5,r2
  809360:	00c0020e 	bge	zero,r3,80936c <__ulp+0x18>
  809364:	0005883a 	mov	r2,zero
  809368:	f800283a 	ret
  80936c:	00c7c83a 	sub	r3,zero,r3
  809370:	1807d53a 	srai	r3,r3,20
  809374:	008004c4 	movi	r2,19
  809378:	10c00b0e 	bge	r2,r3,8093a8 <__ulp+0x54>
  80937c:	18bffb04 	addi	r2,r3,-20
  809380:	01000784 	movi	r4,30
  809384:	0007883a 	mov	r3,zero
  809388:	20800516 	blt	r4,r2,8093a0 <__ulp+0x4c>
  80938c:	010007c4 	movi	r4,31
  809390:	2089c83a 	sub	r4,r4,r2
  809394:	00800044 	movi	r2,1
  809398:	1104983a 	sll	r2,r2,r4
  80939c:	f800283a 	ret
  8093a0:	00800044 	movi	r2,1
  8093a4:	f800283a 	ret
  8093a8:	01400234 	movhi	r5,8
  8093ac:	28c7d83a 	sra	r3,r5,r3
  8093b0:	0005883a 	mov	r2,zero
  8093b4:	f800283a 	ret

008093b8 <__b2d>:
  8093b8:	defffa04 	addi	sp,sp,-24
  8093bc:	dc000015 	stw	r16,0(sp)
  8093c0:	24000417 	ldw	r16,16(r4)
  8093c4:	dc400115 	stw	r17,4(sp)
  8093c8:	24400504 	addi	r17,r4,20
  8093cc:	8421883a 	add	r16,r16,r16
  8093d0:	8421883a 	add	r16,r16,r16
  8093d4:	8c21883a 	add	r16,r17,r16
  8093d8:	dc800215 	stw	r18,8(sp)
  8093dc:	84bfff17 	ldw	r18,-4(r16)
  8093e0:	dd000415 	stw	r20,16(sp)
  8093e4:	dcc00315 	stw	r19,12(sp)
  8093e8:	9009883a 	mov	r4,r18
  8093ec:	2829883a 	mov	r20,r5
  8093f0:	dfc00515 	stw	ra,20(sp)
  8093f4:	0808b240 	call	808b24 <__hi0bits>
  8093f8:	00c00804 	movi	r3,32
  8093fc:	1889c83a 	sub	r4,r3,r2
  809400:	a1000015 	stw	r4,0(r20)
  809404:	01000284 	movi	r4,10
  809408:	84ffff04 	addi	r19,r16,-4
  80940c:	20801216 	blt	r4,r2,809458 <__b2d+0xa0>
  809410:	018002c4 	movi	r6,11
  809414:	308dc83a 	sub	r6,r6,r2
  809418:	9186d83a 	srl	r3,r18,r6
  80941c:	18cffc34 	orhi	r3,r3,16368
  809420:	8cc0212e 	bgeu	r17,r19,8094a8 <__b2d+0xf0>
  809424:	813ffe17 	ldw	r4,-8(r16)
  809428:	218cd83a 	srl	r6,r4,r6
  80942c:	10800544 	addi	r2,r2,21
  809430:	9084983a 	sll	r2,r18,r2
  809434:	1184b03a 	or	r2,r2,r6
  809438:	dfc00517 	ldw	ra,20(sp)
  80943c:	dd000417 	ldw	r20,16(sp)
  809440:	dcc00317 	ldw	r19,12(sp)
  809444:	dc800217 	ldw	r18,8(sp)
  809448:	dc400117 	ldw	r17,4(sp)
  80944c:	dc000017 	ldw	r16,0(sp)
  809450:	dec00604 	addi	sp,sp,24
  809454:	f800283a 	ret
  809458:	8cc00f2e 	bgeu	r17,r19,809498 <__b2d+0xe0>
  80945c:	117ffd44 	addi	r5,r2,-11
  809460:	80bffe17 	ldw	r2,-8(r16)
  809464:	28000e26 	beq	r5,zero,8094a0 <__b2d+0xe8>
  809468:	1949c83a 	sub	r4,r3,r5
  80946c:	9164983a 	sll	r18,r18,r5
  809470:	1106d83a 	srl	r3,r2,r4
  809474:	81bffe04 	addi	r6,r16,-8
  809478:	948ffc34 	orhi	r18,r18,16368
  80947c:	90c6b03a 	or	r3,r18,r3
  809480:	89800e2e 	bgeu	r17,r6,8094bc <__b2d+0x104>
  809484:	81bffd17 	ldw	r6,-12(r16)
  809488:	1144983a 	sll	r2,r2,r5
  80948c:	310ad83a 	srl	r5,r6,r4
  809490:	2884b03a 	or	r2,r5,r2
  809494:	003fe806 	br	809438 <__alt_mem_onchip_mem+0xff801438>
  809498:	10bffd44 	addi	r2,r2,-11
  80949c:	1000041e 	bne	r2,zero,8094b0 <__b2d+0xf8>
  8094a0:	90cffc34 	orhi	r3,r18,16368
  8094a4:	003fe406 	br	809438 <__alt_mem_onchip_mem+0xff801438>
  8094a8:	000d883a 	mov	r6,zero
  8094ac:	003fdf06 	br	80942c <__alt_mem_onchip_mem+0xff80142c>
  8094b0:	90a4983a 	sll	r18,r18,r2
  8094b4:	0005883a 	mov	r2,zero
  8094b8:	003ff906 	br	8094a0 <__alt_mem_onchip_mem+0xff8014a0>
  8094bc:	1144983a 	sll	r2,r2,r5
  8094c0:	003fdd06 	br	809438 <__alt_mem_onchip_mem+0xff801438>

008094c4 <__d2b>:
  8094c4:	defff804 	addi	sp,sp,-32
  8094c8:	dc000215 	stw	r16,8(sp)
  8094cc:	3021883a 	mov	r16,r6
  8094d0:	dc400315 	stw	r17,12(sp)
  8094d4:	8022907a 	slli	r17,r16,1
  8094d8:	dd000615 	stw	r20,24(sp)
  8094dc:	2829883a 	mov	r20,r5
  8094e0:	01400044 	movi	r5,1
  8094e4:	dcc00515 	stw	r19,20(sp)
  8094e8:	dc800415 	stw	r18,16(sp)
  8094ec:	dfc00715 	stw	ra,28(sp)
  8094f0:	3825883a 	mov	r18,r7
  8094f4:	8822d57a 	srli	r17,r17,21
  8094f8:	08088300 	call	808830 <_Balloc>
  8094fc:	1027883a 	mov	r19,r2
  809500:	00800434 	movhi	r2,16
  809504:	10bfffc4 	addi	r2,r2,-1
  809508:	808c703a 	and	r6,r16,r2
  80950c:	88000126 	beq	r17,zero,809514 <__d2b+0x50>
  809510:	31800434 	orhi	r6,r6,16
  809514:	d9800015 	stw	r6,0(sp)
  809518:	a0002426 	beq	r20,zero,8095ac <__d2b+0xe8>
  80951c:	d9000104 	addi	r4,sp,4
  809520:	dd000115 	stw	r20,4(sp)
  809524:	0808b8c0 	call	808b8c <__lo0bits>
  809528:	d8c00017 	ldw	r3,0(sp)
  80952c:	10002f1e 	bne	r2,zero,8095ec <__d2b+0x128>
  809530:	d9000117 	ldw	r4,4(sp)
  809534:	99000515 	stw	r4,20(r19)
  809538:	1821003a 	cmpeq	r16,r3,zero
  80953c:	01000084 	movi	r4,2
  809540:	2421c83a 	sub	r16,r4,r16
  809544:	98c00615 	stw	r3,24(r19)
  809548:	9c000415 	stw	r16,16(r19)
  80954c:	88001f1e 	bne	r17,zero,8095cc <__d2b+0x108>
  809550:	10bef384 	addi	r2,r2,-1074
  809554:	90800015 	stw	r2,0(r18)
  809558:	00900034 	movhi	r2,16384
  80955c:	10bfffc4 	addi	r2,r2,-1
  809560:	8085883a 	add	r2,r16,r2
  809564:	1085883a 	add	r2,r2,r2
  809568:	1085883a 	add	r2,r2,r2
  80956c:	9885883a 	add	r2,r19,r2
  809570:	11000517 	ldw	r4,20(r2)
  809574:	8020917a 	slli	r16,r16,5
  809578:	0808b240 	call	808b24 <__hi0bits>
  80957c:	d8c00817 	ldw	r3,32(sp)
  809580:	8085c83a 	sub	r2,r16,r2
  809584:	18800015 	stw	r2,0(r3)
  809588:	9805883a 	mov	r2,r19
  80958c:	dfc00717 	ldw	ra,28(sp)
  809590:	dd000617 	ldw	r20,24(sp)
  809594:	dcc00517 	ldw	r19,20(sp)
  809598:	dc800417 	ldw	r18,16(sp)
  80959c:	dc400317 	ldw	r17,12(sp)
  8095a0:	dc000217 	ldw	r16,8(sp)
  8095a4:	dec00804 	addi	sp,sp,32
  8095a8:	f800283a 	ret
  8095ac:	d809883a 	mov	r4,sp
  8095b0:	0808b8c0 	call	808b8c <__lo0bits>
  8095b4:	d8c00017 	ldw	r3,0(sp)
  8095b8:	04000044 	movi	r16,1
  8095bc:	9c000415 	stw	r16,16(r19)
  8095c0:	98c00515 	stw	r3,20(r19)
  8095c4:	10800804 	addi	r2,r2,32
  8095c8:	883fe126 	beq	r17,zero,809550 <__alt_mem_onchip_mem+0xff801550>
  8095cc:	00c00d44 	movi	r3,53
  8095d0:	8c7ef344 	addi	r17,r17,-1075
  8095d4:	88a3883a 	add	r17,r17,r2
  8095d8:	1885c83a 	sub	r2,r3,r2
  8095dc:	d8c00817 	ldw	r3,32(sp)
  8095e0:	94400015 	stw	r17,0(r18)
  8095e4:	18800015 	stw	r2,0(r3)
  8095e8:	003fe706 	br	809588 <__alt_mem_onchip_mem+0xff801588>
  8095ec:	01000804 	movi	r4,32
  8095f0:	2089c83a 	sub	r4,r4,r2
  8095f4:	1908983a 	sll	r4,r3,r4
  8095f8:	d9400117 	ldw	r5,4(sp)
  8095fc:	1886d83a 	srl	r3,r3,r2
  809600:	2148b03a 	or	r4,r4,r5
  809604:	99000515 	stw	r4,20(r19)
  809608:	d8c00015 	stw	r3,0(sp)
  80960c:	003fca06 	br	809538 <__alt_mem_onchip_mem+0xff801538>

00809610 <__ratio>:
  809610:	defff904 	addi	sp,sp,-28
  809614:	dc400315 	stw	r17,12(sp)
  809618:	2823883a 	mov	r17,r5
  80961c:	d9400104 	addi	r5,sp,4
  809620:	dfc00615 	stw	ra,24(sp)
  809624:	dcc00515 	stw	r19,20(sp)
  809628:	dc800415 	stw	r18,16(sp)
  80962c:	2027883a 	mov	r19,r4
  809630:	dc000215 	stw	r16,8(sp)
  809634:	08093b80 	call	8093b8 <__b2d>
  809638:	d80b883a 	mov	r5,sp
  80963c:	8809883a 	mov	r4,r17
  809640:	1025883a 	mov	r18,r2
  809644:	1821883a 	mov	r16,r3
  809648:	08093b80 	call	8093b8 <__b2d>
  80964c:	8a000417 	ldw	r8,16(r17)
  809650:	99000417 	ldw	r4,16(r19)
  809654:	d9400117 	ldw	r5,4(sp)
  809658:	2209c83a 	sub	r4,r4,r8
  80965c:	2010917a 	slli	r8,r4,5
  809660:	d9000017 	ldw	r4,0(sp)
  809664:	2909c83a 	sub	r4,r5,r4
  809668:	4109883a 	add	r4,r8,r4
  80966c:	01000e0e 	bge	zero,r4,8096a8 <__ratio+0x98>
  809670:	2008953a 	slli	r4,r4,20
  809674:	2421883a 	add	r16,r4,r16
  809678:	100d883a 	mov	r6,r2
  80967c:	180f883a 	mov	r7,r3
  809680:	9009883a 	mov	r4,r18
  809684:	800b883a 	mov	r5,r16
  809688:	080ce300 	call	80ce30 <__divdf3>
  80968c:	dfc00617 	ldw	ra,24(sp)
  809690:	dcc00517 	ldw	r19,20(sp)
  809694:	dc800417 	ldw	r18,16(sp)
  809698:	dc400317 	ldw	r17,12(sp)
  80969c:	dc000217 	ldw	r16,8(sp)
  8096a0:	dec00704 	addi	sp,sp,28
  8096a4:	f800283a 	ret
  8096a8:	2008953a 	slli	r4,r4,20
  8096ac:	1907c83a 	sub	r3,r3,r4
  8096b0:	003ff106 	br	809678 <__alt_mem_onchip_mem+0xff801678>

008096b4 <_mprec_log10>:
  8096b4:	defffe04 	addi	sp,sp,-8
  8096b8:	dc000015 	stw	r16,0(sp)
  8096bc:	dfc00115 	stw	ra,4(sp)
  8096c0:	008005c4 	movi	r2,23
  8096c4:	2021883a 	mov	r16,r4
  8096c8:	11000d0e 	bge	r2,r4,809700 <_mprec_log10+0x4c>
  8096cc:	0005883a 	mov	r2,zero
  8096d0:	00cffc34 	movhi	r3,16368
  8096d4:	843fffc4 	addi	r16,r16,-1
  8096d8:	000d883a 	mov	r6,zero
  8096dc:	01d00934 	movhi	r7,16420
  8096e0:	1009883a 	mov	r4,r2
  8096e4:	180b883a 	mov	r5,r3
  8096e8:	080d9700 	call	80d970 <__muldf3>
  8096ec:	803ff91e 	bne	r16,zero,8096d4 <__alt_mem_onchip_mem+0xff8016d4>
  8096f0:	dfc00117 	ldw	ra,4(sp)
  8096f4:	dc000017 	ldw	r16,0(sp)
  8096f8:	dec00204 	addi	sp,sp,8
  8096fc:	f800283a 	ret
  809700:	202090fa 	slli	r16,r4,3
  809704:	00802074 	movhi	r2,129
  809708:	108ccb04 	addi	r2,r2,13100
  80970c:	1421883a 	add	r16,r2,r16
  809710:	80800017 	ldw	r2,0(r16)
  809714:	80c00117 	ldw	r3,4(r16)
  809718:	dfc00117 	ldw	ra,4(sp)
  80971c:	dc000017 	ldw	r16,0(sp)
  809720:	dec00204 	addi	sp,sp,8
  809724:	f800283a 	ret

00809728 <__copybits>:
  809728:	297fffc4 	addi	r5,r5,-1
  80972c:	280fd17a 	srai	r7,r5,5
  809730:	30c00417 	ldw	r3,16(r6)
  809734:	30800504 	addi	r2,r6,20
  809738:	39c00044 	addi	r7,r7,1
  80973c:	18c7883a 	add	r3,r3,r3
  809740:	39cf883a 	add	r7,r7,r7
  809744:	18c7883a 	add	r3,r3,r3
  809748:	39cf883a 	add	r7,r7,r7
  80974c:	10c7883a 	add	r3,r2,r3
  809750:	21cf883a 	add	r7,r4,r7
  809754:	10c00d2e 	bgeu	r2,r3,80978c <__copybits+0x64>
  809758:	200b883a 	mov	r5,r4
  80975c:	12000017 	ldw	r8,0(r2)
  809760:	29400104 	addi	r5,r5,4
  809764:	10800104 	addi	r2,r2,4
  809768:	2a3fff15 	stw	r8,-4(r5)
  80976c:	10fffb36 	bltu	r2,r3,80975c <__alt_mem_onchip_mem+0xff80175c>
  809770:	1985c83a 	sub	r2,r3,r6
  809774:	10bffac4 	addi	r2,r2,-21
  809778:	1004d0ba 	srli	r2,r2,2
  80977c:	10800044 	addi	r2,r2,1
  809780:	1085883a 	add	r2,r2,r2
  809784:	1085883a 	add	r2,r2,r2
  809788:	2089883a 	add	r4,r4,r2
  80978c:	21c0032e 	bgeu	r4,r7,80979c <__copybits+0x74>
  809790:	20000015 	stw	zero,0(r4)
  809794:	21000104 	addi	r4,r4,4
  809798:	21fffd36 	bltu	r4,r7,809790 <__alt_mem_onchip_mem+0xff801790>
  80979c:	f800283a 	ret

008097a0 <__any_on>:
  8097a0:	20c00417 	ldw	r3,16(r4)
  8097a4:	2805d17a 	srai	r2,r5,5
  8097a8:	21000504 	addi	r4,r4,20
  8097ac:	18800d0e 	bge	r3,r2,8097e4 <__any_on+0x44>
  8097b0:	18c7883a 	add	r3,r3,r3
  8097b4:	18c7883a 	add	r3,r3,r3
  8097b8:	20c7883a 	add	r3,r4,r3
  8097bc:	20c0192e 	bgeu	r4,r3,809824 <__any_on+0x84>
  8097c0:	18bfff17 	ldw	r2,-4(r3)
  8097c4:	18ffff04 	addi	r3,r3,-4
  8097c8:	1000041e 	bne	r2,zero,8097dc <__any_on+0x3c>
  8097cc:	20c0142e 	bgeu	r4,r3,809820 <__any_on+0x80>
  8097d0:	18ffff04 	addi	r3,r3,-4
  8097d4:	19400017 	ldw	r5,0(r3)
  8097d8:	283ffc26 	beq	r5,zero,8097cc <__alt_mem_onchip_mem+0xff8017cc>
  8097dc:	00800044 	movi	r2,1
  8097e0:	f800283a 	ret
  8097e4:	10c00a0e 	bge	r2,r3,809810 <__any_on+0x70>
  8097e8:	1085883a 	add	r2,r2,r2
  8097ec:	1085883a 	add	r2,r2,r2
  8097f0:	294007cc 	andi	r5,r5,31
  8097f4:	2087883a 	add	r3,r4,r2
  8097f8:	283ff026 	beq	r5,zero,8097bc <__alt_mem_onchip_mem+0xff8017bc>
  8097fc:	19800017 	ldw	r6,0(r3)
  809800:	3144d83a 	srl	r2,r6,r5
  809804:	114a983a 	sll	r5,r2,r5
  809808:	317ff41e 	bne	r6,r5,8097dc <__alt_mem_onchip_mem+0xff8017dc>
  80980c:	003feb06 	br	8097bc <__alt_mem_onchip_mem+0xff8017bc>
  809810:	1085883a 	add	r2,r2,r2
  809814:	1085883a 	add	r2,r2,r2
  809818:	2087883a 	add	r3,r4,r2
  80981c:	003fe706 	br	8097bc <__alt_mem_onchip_mem+0xff8017bc>
  809820:	f800283a 	ret
  809824:	0005883a 	mov	r2,zero
  809828:	f800283a 	ret

0080982c <_read_r>:
  80982c:	defffd04 	addi	sp,sp,-12
  809830:	2805883a 	mov	r2,r5
  809834:	dc000015 	stw	r16,0(sp)
  809838:	04002074 	movhi	r16,129
  80983c:	dc400115 	stw	r17,4(sp)
  809840:	300b883a 	mov	r5,r6
  809844:	841be104 	addi	r16,r16,28548
  809848:	2023883a 	mov	r17,r4
  80984c:	380d883a 	mov	r6,r7
  809850:	1009883a 	mov	r4,r2
  809854:	dfc00215 	stw	ra,8(sp)
  809858:	80000015 	stw	zero,0(r16)
  80985c:	080f6ec0 	call	80f6ec <read>
  809860:	00ffffc4 	movi	r3,-1
  809864:	10c00526 	beq	r2,r3,80987c <_read_r+0x50>
  809868:	dfc00217 	ldw	ra,8(sp)
  80986c:	dc400117 	ldw	r17,4(sp)
  809870:	dc000017 	ldw	r16,0(sp)
  809874:	dec00304 	addi	sp,sp,12
  809878:	f800283a 	ret
  80987c:	80c00017 	ldw	r3,0(r16)
  809880:	183ff926 	beq	r3,zero,809868 <__alt_mem_onchip_mem+0xff801868>
  809884:	88c00015 	stw	r3,0(r17)
  809888:	003ff706 	br	809868 <__alt_mem_onchip_mem+0xff801868>

0080988c <_realloc_r>:
  80988c:	defff604 	addi	sp,sp,-40
  809890:	dc800215 	stw	r18,8(sp)
  809894:	dfc00915 	stw	ra,36(sp)
  809898:	df000815 	stw	fp,32(sp)
  80989c:	ddc00715 	stw	r23,28(sp)
  8098a0:	dd800615 	stw	r22,24(sp)
  8098a4:	dd400515 	stw	r21,20(sp)
  8098a8:	dd000415 	stw	r20,16(sp)
  8098ac:	dcc00315 	stw	r19,12(sp)
  8098b0:	dc400115 	stw	r17,4(sp)
  8098b4:	dc000015 	stw	r16,0(sp)
  8098b8:	3025883a 	mov	r18,r6
  8098bc:	2800b726 	beq	r5,zero,809b9c <_realloc_r+0x310>
  8098c0:	282b883a 	mov	r21,r5
  8098c4:	2029883a 	mov	r20,r4
  8098c8:	080f4140 	call	80f414 <__malloc_lock>
  8098cc:	a8bfff17 	ldw	r2,-4(r21)
  8098d0:	043fff04 	movi	r16,-4
  8098d4:	90c002c4 	addi	r3,r18,11
  8098d8:	01000584 	movi	r4,22
  8098dc:	acfffe04 	addi	r19,r21,-8
  8098e0:	1420703a 	and	r16,r2,r16
  8098e4:	20c0332e 	bgeu	r4,r3,8099b4 <_realloc_r+0x128>
  8098e8:	047ffe04 	movi	r17,-8
  8098ec:	1c62703a 	and	r17,r3,r17
  8098f0:	8807883a 	mov	r3,r17
  8098f4:	88005816 	blt	r17,zero,809a58 <_realloc_r+0x1cc>
  8098f8:	8c805736 	bltu	r17,r18,809a58 <_realloc_r+0x1cc>
  8098fc:	80c0300e 	bge	r16,r3,8099c0 <_realloc_r+0x134>
  809900:	07002074 	movhi	fp,129
  809904:	e70e6504 	addi	fp,fp,14740
  809908:	e1c00217 	ldw	r7,8(fp)
  80990c:	9c09883a 	add	r4,r19,r16
  809910:	22000117 	ldw	r8,4(r4)
  809914:	21c06326 	beq	r4,r7,809aa4 <_realloc_r+0x218>
  809918:	017fff84 	movi	r5,-2
  80991c:	414a703a 	and	r5,r8,r5
  809920:	214b883a 	add	r5,r4,r5
  809924:	29800117 	ldw	r6,4(r5)
  809928:	3180004c 	andi	r6,r6,1
  80992c:	30003f26 	beq	r6,zero,809a2c <_realloc_r+0x1a0>
  809930:	1080004c 	andi	r2,r2,1
  809934:	10008326 	beq	r2,zero,809b44 <_realloc_r+0x2b8>
  809938:	900b883a 	mov	r5,r18
  80993c:	a009883a 	mov	r4,r20
  809940:	08025540 	call	802554 <_malloc_r>
  809944:	1025883a 	mov	r18,r2
  809948:	10011e26 	beq	r2,zero,809dc4 <_realloc_r+0x538>
  80994c:	a93fff17 	ldw	r4,-4(r21)
  809950:	10fffe04 	addi	r3,r2,-8
  809954:	00bfff84 	movi	r2,-2
  809958:	2084703a 	and	r2,r4,r2
  80995c:	9885883a 	add	r2,r19,r2
  809960:	1880ee26 	beq	r3,r2,809d1c <_realloc_r+0x490>
  809964:	81bfff04 	addi	r6,r16,-4
  809968:	00800904 	movi	r2,36
  80996c:	1180b836 	bltu	r2,r6,809c50 <_realloc_r+0x3c4>
  809970:	00c004c4 	movi	r3,19
  809974:	19809636 	bltu	r3,r6,809bd0 <_realloc_r+0x344>
  809978:	9005883a 	mov	r2,r18
  80997c:	a807883a 	mov	r3,r21
  809980:	19000017 	ldw	r4,0(r3)
  809984:	11000015 	stw	r4,0(r2)
  809988:	19000117 	ldw	r4,4(r3)
  80998c:	11000115 	stw	r4,4(r2)
  809990:	18c00217 	ldw	r3,8(r3)
  809994:	10c00215 	stw	r3,8(r2)
  809998:	a80b883a 	mov	r5,r21
  80999c:	a009883a 	mov	r4,r20
  8099a0:	0807b4c0 	call	807b4c <_free_r>
  8099a4:	a009883a 	mov	r4,r20
  8099a8:	080f4380 	call	80f438 <__malloc_unlock>
  8099ac:	9005883a 	mov	r2,r18
  8099b0:	00001206 	br	8099fc <_realloc_r+0x170>
  8099b4:	00c00404 	movi	r3,16
  8099b8:	1823883a 	mov	r17,r3
  8099bc:	003fce06 	br	8098f8 <__alt_mem_onchip_mem+0xff8018f8>
  8099c0:	a825883a 	mov	r18,r21
  8099c4:	8445c83a 	sub	r2,r16,r17
  8099c8:	00c003c4 	movi	r3,15
  8099cc:	18802636 	bltu	r3,r2,809a68 <_realloc_r+0x1dc>
  8099d0:	99800117 	ldw	r6,4(r19)
  8099d4:	9c07883a 	add	r3,r19,r16
  8099d8:	3180004c 	andi	r6,r6,1
  8099dc:	3420b03a 	or	r16,r6,r16
  8099e0:	9c000115 	stw	r16,4(r19)
  8099e4:	18800117 	ldw	r2,4(r3)
  8099e8:	10800054 	ori	r2,r2,1
  8099ec:	18800115 	stw	r2,4(r3)
  8099f0:	a009883a 	mov	r4,r20
  8099f4:	080f4380 	call	80f438 <__malloc_unlock>
  8099f8:	9005883a 	mov	r2,r18
  8099fc:	dfc00917 	ldw	ra,36(sp)
  809a00:	df000817 	ldw	fp,32(sp)
  809a04:	ddc00717 	ldw	r23,28(sp)
  809a08:	dd800617 	ldw	r22,24(sp)
  809a0c:	dd400517 	ldw	r21,20(sp)
  809a10:	dd000417 	ldw	r20,16(sp)
  809a14:	dcc00317 	ldw	r19,12(sp)
  809a18:	dc800217 	ldw	r18,8(sp)
  809a1c:	dc400117 	ldw	r17,4(sp)
  809a20:	dc000017 	ldw	r16,0(sp)
  809a24:	dec00a04 	addi	sp,sp,40
  809a28:	f800283a 	ret
  809a2c:	017fff04 	movi	r5,-4
  809a30:	414a703a 	and	r5,r8,r5
  809a34:	814d883a 	add	r6,r16,r5
  809a38:	30c01f16 	blt	r6,r3,809ab8 <_realloc_r+0x22c>
  809a3c:	20800317 	ldw	r2,12(r4)
  809a40:	20c00217 	ldw	r3,8(r4)
  809a44:	a825883a 	mov	r18,r21
  809a48:	3021883a 	mov	r16,r6
  809a4c:	18800315 	stw	r2,12(r3)
  809a50:	10c00215 	stw	r3,8(r2)
  809a54:	003fdb06 	br	8099c4 <__alt_mem_onchip_mem+0xff8019c4>
  809a58:	00800304 	movi	r2,12
  809a5c:	a0800015 	stw	r2,0(r20)
  809a60:	0005883a 	mov	r2,zero
  809a64:	003fe506 	br	8099fc <__alt_mem_onchip_mem+0xff8019fc>
  809a68:	98c00117 	ldw	r3,4(r19)
  809a6c:	9c4b883a 	add	r5,r19,r17
  809a70:	11000054 	ori	r4,r2,1
  809a74:	18c0004c 	andi	r3,r3,1
  809a78:	1c62b03a 	or	r17,r3,r17
  809a7c:	9c400115 	stw	r17,4(r19)
  809a80:	29000115 	stw	r4,4(r5)
  809a84:	2885883a 	add	r2,r5,r2
  809a88:	10c00117 	ldw	r3,4(r2)
  809a8c:	29400204 	addi	r5,r5,8
  809a90:	a009883a 	mov	r4,r20
  809a94:	18c00054 	ori	r3,r3,1
  809a98:	10c00115 	stw	r3,4(r2)
  809a9c:	0807b4c0 	call	807b4c <_free_r>
  809aa0:	003fd306 	br	8099f0 <__alt_mem_onchip_mem+0xff8019f0>
  809aa4:	017fff04 	movi	r5,-4
  809aa8:	414a703a 	and	r5,r8,r5
  809aac:	89800404 	addi	r6,r17,16
  809ab0:	8151883a 	add	r8,r16,r5
  809ab4:	4180590e 	bge	r8,r6,809c1c <_realloc_r+0x390>
  809ab8:	1080004c 	andi	r2,r2,1
  809abc:	103f9e1e 	bne	r2,zero,809938 <__alt_mem_onchip_mem+0xff801938>
  809ac0:	adbffe17 	ldw	r22,-8(r21)
  809ac4:	00bfff04 	movi	r2,-4
  809ac8:	9dadc83a 	sub	r22,r19,r22
  809acc:	b1800117 	ldw	r6,4(r22)
  809ad0:	3084703a 	and	r2,r6,r2
  809ad4:	20002026 	beq	r4,zero,809b58 <_realloc_r+0x2cc>
  809ad8:	80af883a 	add	r23,r16,r2
  809adc:	b96f883a 	add	r23,r23,r5
  809ae0:	21c05f26 	beq	r4,r7,809c60 <_realloc_r+0x3d4>
  809ae4:	b8c01c16 	blt	r23,r3,809b58 <_realloc_r+0x2cc>
  809ae8:	20800317 	ldw	r2,12(r4)
  809aec:	20c00217 	ldw	r3,8(r4)
  809af0:	81bfff04 	addi	r6,r16,-4
  809af4:	01000904 	movi	r4,36
  809af8:	18800315 	stw	r2,12(r3)
  809afc:	10c00215 	stw	r3,8(r2)
  809b00:	b0c00217 	ldw	r3,8(r22)
  809b04:	b0800317 	ldw	r2,12(r22)
  809b08:	b4800204 	addi	r18,r22,8
  809b0c:	18800315 	stw	r2,12(r3)
  809b10:	10c00215 	stw	r3,8(r2)
  809b14:	21801b36 	bltu	r4,r6,809b84 <_realloc_r+0x2f8>
  809b18:	008004c4 	movi	r2,19
  809b1c:	1180352e 	bgeu	r2,r6,809bf4 <_realloc_r+0x368>
  809b20:	a8800017 	ldw	r2,0(r21)
  809b24:	b0800215 	stw	r2,8(r22)
  809b28:	a8800117 	ldw	r2,4(r21)
  809b2c:	b0800315 	stw	r2,12(r22)
  809b30:	008006c4 	movi	r2,27
  809b34:	11807f36 	bltu	r2,r6,809d34 <_realloc_r+0x4a8>
  809b38:	b0800404 	addi	r2,r22,16
  809b3c:	ad400204 	addi	r21,r21,8
  809b40:	00002d06 	br	809bf8 <_realloc_r+0x36c>
  809b44:	adbffe17 	ldw	r22,-8(r21)
  809b48:	00bfff04 	movi	r2,-4
  809b4c:	9dadc83a 	sub	r22,r19,r22
  809b50:	b1000117 	ldw	r4,4(r22)
  809b54:	2084703a 	and	r2,r4,r2
  809b58:	b03f7726 	beq	r22,zero,809938 <__alt_mem_onchip_mem+0xff801938>
  809b5c:	80af883a 	add	r23,r16,r2
  809b60:	b8ff7516 	blt	r23,r3,809938 <__alt_mem_onchip_mem+0xff801938>
  809b64:	b0800317 	ldw	r2,12(r22)
  809b68:	b0c00217 	ldw	r3,8(r22)
  809b6c:	81bfff04 	addi	r6,r16,-4
  809b70:	01000904 	movi	r4,36
  809b74:	18800315 	stw	r2,12(r3)
  809b78:	10c00215 	stw	r3,8(r2)
  809b7c:	b4800204 	addi	r18,r22,8
  809b80:	21bfe52e 	bgeu	r4,r6,809b18 <__alt_mem_onchip_mem+0xff801b18>
  809b84:	a80b883a 	mov	r5,r21
  809b88:	9009883a 	mov	r4,r18
  809b8c:	08086d40 	call	8086d4 <memmove>
  809b90:	b821883a 	mov	r16,r23
  809b94:	b027883a 	mov	r19,r22
  809b98:	003f8a06 	br	8099c4 <__alt_mem_onchip_mem+0xff8019c4>
  809b9c:	300b883a 	mov	r5,r6
  809ba0:	dfc00917 	ldw	ra,36(sp)
  809ba4:	df000817 	ldw	fp,32(sp)
  809ba8:	ddc00717 	ldw	r23,28(sp)
  809bac:	dd800617 	ldw	r22,24(sp)
  809bb0:	dd400517 	ldw	r21,20(sp)
  809bb4:	dd000417 	ldw	r20,16(sp)
  809bb8:	dcc00317 	ldw	r19,12(sp)
  809bbc:	dc800217 	ldw	r18,8(sp)
  809bc0:	dc400117 	ldw	r17,4(sp)
  809bc4:	dc000017 	ldw	r16,0(sp)
  809bc8:	dec00a04 	addi	sp,sp,40
  809bcc:	08025541 	jmpi	802554 <_malloc_r>
  809bd0:	a8c00017 	ldw	r3,0(r21)
  809bd4:	90c00015 	stw	r3,0(r18)
  809bd8:	a8c00117 	ldw	r3,4(r21)
  809bdc:	90c00115 	stw	r3,4(r18)
  809be0:	00c006c4 	movi	r3,27
  809be4:	19804536 	bltu	r3,r6,809cfc <_realloc_r+0x470>
  809be8:	90800204 	addi	r2,r18,8
  809bec:	a8c00204 	addi	r3,r21,8
  809bf0:	003f6306 	br	809980 <__alt_mem_onchip_mem+0xff801980>
  809bf4:	9005883a 	mov	r2,r18
  809bf8:	a8c00017 	ldw	r3,0(r21)
  809bfc:	b821883a 	mov	r16,r23
  809c00:	b027883a 	mov	r19,r22
  809c04:	10c00015 	stw	r3,0(r2)
  809c08:	a8c00117 	ldw	r3,4(r21)
  809c0c:	10c00115 	stw	r3,4(r2)
  809c10:	a8c00217 	ldw	r3,8(r21)
  809c14:	10c00215 	stw	r3,8(r2)
  809c18:	003f6a06 	br	8099c4 <__alt_mem_onchip_mem+0xff8019c4>
  809c1c:	9c67883a 	add	r19,r19,r17
  809c20:	4445c83a 	sub	r2,r8,r17
  809c24:	e4c00215 	stw	r19,8(fp)
  809c28:	10800054 	ori	r2,r2,1
  809c2c:	98800115 	stw	r2,4(r19)
  809c30:	a8bfff17 	ldw	r2,-4(r21)
  809c34:	a009883a 	mov	r4,r20
  809c38:	1080004c 	andi	r2,r2,1
  809c3c:	1462b03a 	or	r17,r2,r17
  809c40:	ac7fff15 	stw	r17,-4(r21)
  809c44:	080f4380 	call	80f438 <__malloc_unlock>
  809c48:	a805883a 	mov	r2,r21
  809c4c:	003f6b06 	br	8099fc <__alt_mem_onchip_mem+0xff8019fc>
  809c50:	a80b883a 	mov	r5,r21
  809c54:	9009883a 	mov	r4,r18
  809c58:	08086d40 	call	8086d4 <memmove>
  809c5c:	003f4e06 	br	809998 <__alt_mem_onchip_mem+0xff801998>
  809c60:	89000404 	addi	r4,r17,16
  809c64:	b93fbc16 	blt	r23,r4,809b58 <__alt_mem_onchip_mem+0xff801b58>
  809c68:	b0800317 	ldw	r2,12(r22)
  809c6c:	b0c00217 	ldw	r3,8(r22)
  809c70:	81bfff04 	addi	r6,r16,-4
  809c74:	01000904 	movi	r4,36
  809c78:	18800315 	stw	r2,12(r3)
  809c7c:	10c00215 	stw	r3,8(r2)
  809c80:	b4800204 	addi	r18,r22,8
  809c84:	21804336 	bltu	r4,r6,809d94 <_realloc_r+0x508>
  809c88:	008004c4 	movi	r2,19
  809c8c:	11803f2e 	bgeu	r2,r6,809d8c <_realloc_r+0x500>
  809c90:	a8800017 	ldw	r2,0(r21)
  809c94:	b0800215 	stw	r2,8(r22)
  809c98:	a8800117 	ldw	r2,4(r21)
  809c9c:	b0800315 	stw	r2,12(r22)
  809ca0:	008006c4 	movi	r2,27
  809ca4:	11803f36 	bltu	r2,r6,809da4 <_realloc_r+0x518>
  809ca8:	b0800404 	addi	r2,r22,16
  809cac:	ad400204 	addi	r21,r21,8
  809cb0:	a8c00017 	ldw	r3,0(r21)
  809cb4:	10c00015 	stw	r3,0(r2)
  809cb8:	a8c00117 	ldw	r3,4(r21)
  809cbc:	10c00115 	stw	r3,4(r2)
  809cc0:	a8c00217 	ldw	r3,8(r21)
  809cc4:	10c00215 	stw	r3,8(r2)
  809cc8:	b447883a 	add	r3,r22,r17
  809ccc:	bc45c83a 	sub	r2,r23,r17
  809cd0:	e0c00215 	stw	r3,8(fp)
  809cd4:	10800054 	ori	r2,r2,1
  809cd8:	18800115 	stw	r2,4(r3)
  809cdc:	b0800117 	ldw	r2,4(r22)
  809ce0:	a009883a 	mov	r4,r20
  809ce4:	1080004c 	andi	r2,r2,1
  809ce8:	1462b03a 	or	r17,r2,r17
  809cec:	b4400115 	stw	r17,4(r22)
  809cf0:	080f4380 	call	80f438 <__malloc_unlock>
  809cf4:	9005883a 	mov	r2,r18
  809cf8:	003f4006 	br	8099fc <__alt_mem_onchip_mem+0xff8019fc>
  809cfc:	a8c00217 	ldw	r3,8(r21)
  809d00:	90c00215 	stw	r3,8(r18)
  809d04:	a8c00317 	ldw	r3,12(r21)
  809d08:	90c00315 	stw	r3,12(r18)
  809d0c:	30801126 	beq	r6,r2,809d54 <_realloc_r+0x4c8>
  809d10:	90800404 	addi	r2,r18,16
  809d14:	a8c00404 	addi	r3,r21,16
  809d18:	003f1906 	br	809980 <__alt_mem_onchip_mem+0xff801980>
  809d1c:	90ffff17 	ldw	r3,-4(r18)
  809d20:	00bfff04 	movi	r2,-4
  809d24:	a825883a 	mov	r18,r21
  809d28:	1884703a 	and	r2,r3,r2
  809d2c:	80a1883a 	add	r16,r16,r2
  809d30:	003f2406 	br	8099c4 <__alt_mem_onchip_mem+0xff8019c4>
  809d34:	a8800217 	ldw	r2,8(r21)
  809d38:	b0800415 	stw	r2,16(r22)
  809d3c:	a8800317 	ldw	r2,12(r21)
  809d40:	b0800515 	stw	r2,20(r22)
  809d44:	31000a26 	beq	r6,r4,809d70 <_realloc_r+0x4e4>
  809d48:	b0800604 	addi	r2,r22,24
  809d4c:	ad400404 	addi	r21,r21,16
  809d50:	003fa906 	br	809bf8 <__alt_mem_onchip_mem+0xff801bf8>
  809d54:	a9000417 	ldw	r4,16(r21)
  809d58:	90800604 	addi	r2,r18,24
  809d5c:	a8c00604 	addi	r3,r21,24
  809d60:	91000415 	stw	r4,16(r18)
  809d64:	a9000517 	ldw	r4,20(r21)
  809d68:	91000515 	stw	r4,20(r18)
  809d6c:	003f0406 	br	809980 <__alt_mem_onchip_mem+0xff801980>
  809d70:	a8c00417 	ldw	r3,16(r21)
  809d74:	ad400604 	addi	r21,r21,24
  809d78:	b0800804 	addi	r2,r22,32
  809d7c:	b0c00615 	stw	r3,24(r22)
  809d80:	a8ffff17 	ldw	r3,-4(r21)
  809d84:	b0c00715 	stw	r3,28(r22)
  809d88:	003f9b06 	br	809bf8 <__alt_mem_onchip_mem+0xff801bf8>
  809d8c:	9005883a 	mov	r2,r18
  809d90:	003fc706 	br	809cb0 <__alt_mem_onchip_mem+0xff801cb0>
  809d94:	a80b883a 	mov	r5,r21
  809d98:	9009883a 	mov	r4,r18
  809d9c:	08086d40 	call	8086d4 <memmove>
  809da0:	003fc906 	br	809cc8 <__alt_mem_onchip_mem+0xff801cc8>
  809da4:	a8800217 	ldw	r2,8(r21)
  809da8:	b0800415 	stw	r2,16(r22)
  809dac:	a8800317 	ldw	r2,12(r21)
  809db0:	b0800515 	stw	r2,20(r22)
  809db4:	31000726 	beq	r6,r4,809dd4 <_realloc_r+0x548>
  809db8:	b0800604 	addi	r2,r22,24
  809dbc:	ad400404 	addi	r21,r21,16
  809dc0:	003fbb06 	br	809cb0 <__alt_mem_onchip_mem+0xff801cb0>
  809dc4:	a009883a 	mov	r4,r20
  809dc8:	080f4380 	call	80f438 <__malloc_unlock>
  809dcc:	0005883a 	mov	r2,zero
  809dd0:	003f0a06 	br	8099fc <__alt_mem_onchip_mem+0xff8019fc>
  809dd4:	a8c00417 	ldw	r3,16(r21)
  809dd8:	ad400604 	addi	r21,r21,24
  809ddc:	b0800804 	addi	r2,r22,32
  809de0:	b0c00615 	stw	r3,24(r22)
  809de4:	a8ffff17 	ldw	r3,-4(r21)
  809de8:	b0c00715 	stw	r3,28(r22)
  809dec:	003fb006 	br	809cb0 <__alt_mem_onchip_mem+0xff801cb0>

00809df0 <__fpclassifyd>:
  809df0:	00a00034 	movhi	r2,32768
  809df4:	10bfffc4 	addi	r2,r2,-1
  809df8:	2884703a 	and	r2,r5,r2
  809dfc:	10000726 	beq	r2,zero,809e1c <__fpclassifyd+0x2c>
  809e00:	00fffc34 	movhi	r3,65520
  809e04:	019ff834 	movhi	r6,32736
  809e08:	28c7883a 	add	r3,r5,r3
  809e0c:	31bfffc4 	addi	r6,r6,-1
  809e10:	30c00536 	bltu	r6,r3,809e28 <__fpclassifyd+0x38>
  809e14:	00800104 	movi	r2,4
  809e18:	f800283a 	ret
  809e1c:	2000021e 	bne	r4,zero,809e28 <__fpclassifyd+0x38>
  809e20:	00800084 	movi	r2,2
  809e24:	f800283a 	ret
  809e28:	00dffc34 	movhi	r3,32752
  809e2c:	019ff834 	movhi	r6,32736
  809e30:	28cb883a 	add	r5,r5,r3
  809e34:	31bfffc4 	addi	r6,r6,-1
  809e38:	317ff62e 	bgeu	r6,r5,809e14 <__alt_mem_onchip_mem+0xff801e14>
  809e3c:	01400434 	movhi	r5,16
  809e40:	297fffc4 	addi	r5,r5,-1
  809e44:	28800236 	bltu	r5,r2,809e50 <__fpclassifyd+0x60>
  809e48:	008000c4 	movi	r2,3
  809e4c:	f800283a 	ret
  809e50:	10c00226 	beq	r2,r3,809e5c <__fpclassifyd+0x6c>
  809e54:	0005883a 	mov	r2,zero
  809e58:	f800283a 	ret
  809e5c:	2005003a 	cmpeq	r2,r4,zero
  809e60:	f800283a 	ret

00809e64 <strcmp>:
  809e64:	2144b03a 	or	r2,r4,r5
  809e68:	108000cc 	andi	r2,r2,3
  809e6c:	1000171e 	bne	r2,zero,809ecc <strcmp+0x68>
  809e70:	20800017 	ldw	r2,0(r4)
  809e74:	28c00017 	ldw	r3,0(r5)
  809e78:	10c0141e 	bne	r2,r3,809ecc <strcmp+0x68>
  809e7c:	027fbff4 	movhi	r9,65279
  809e80:	4a7fbfc4 	addi	r9,r9,-257
  809e84:	0086303a 	nor	r3,zero,r2
  809e88:	02202074 	movhi	r8,32897
  809e8c:	1245883a 	add	r2,r2,r9
  809e90:	42202004 	addi	r8,r8,-32640
  809e94:	10c4703a 	and	r2,r2,r3
  809e98:	1204703a 	and	r2,r2,r8
  809e9c:	10000226 	beq	r2,zero,809ea8 <strcmp+0x44>
  809ea0:	00002306 	br	809f30 <strcmp+0xcc>
  809ea4:	1000221e 	bne	r2,zero,809f30 <strcmp+0xcc>
  809ea8:	21000104 	addi	r4,r4,4
  809eac:	20c00017 	ldw	r3,0(r4)
  809eb0:	29400104 	addi	r5,r5,4
  809eb4:	29800017 	ldw	r6,0(r5)
  809eb8:	1a4f883a 	add	r7,r3,r9
  809ebc:	00c4303a 	nor	r2,zero,r3
  809ec0:	3884703a 	and	r2,r7,r2
  809ec4:	1204703a 	and	r2,r2,r8
  809ec8:	19bff626 	beq	r3,r6,809ea4 <__alt_mem_onchip_mem+0xff801ea4>
  809ecc:	20800003 	ldbu	r2,0(r4)
  809ed0:	10c03fcc 	andi	r3,r2,255
  809ed4:	18c0201c 	xori	r3,r3,128
  809ed8:	18ffe004 	addi	r3,r3,-128
  809edc:	18000c26 	beq	r3,zero,809f10 <strcmp+0xac>
  809ee0:	29800007 	ldb	r6,0(r5)
  809ee4:	19800326 	beq	r3,r6,809ef4 <strcmp+0x90>
  809ee8:	00001306 	br	809f38 <strcmp+0xd4>
  809eec:	29800007 	ldb	r6,0(r5)
  809ef0:	11800b1e 	bne	r2,r6,809f20 <strcmp+0xbc>
  809ef4:	21000044 	addi	r4,r4,1
  809ef8:	20c00003 	ldbu	r3,0(r4)
  809efc:	29400044 	addi	r5,r5,1
  809f00:	18803fcc 	andi	r2,r3,255
  809f04:	1080201c 	xori	r2,r2,128
  809f08:	10bfe004 	addi	r2,r2,-128
  809f0c:	103ff71e 	bne	r2,zero,809eec <__alt_mem_onchip_mem+0xff801eec>
  809f10:	0007883a 	mov	r3,zero
  809f14:	28800003 	ldbu	r2,0(r5)
  809f18:	1885c83a 	sub	r2,r3,r2
  809f1c:	f800283a 	ret
  809f20:	28800003 	ldbu	r2,0(r5)
  809f24:	18c03fcc 	andi	r3,r3,255
  809f28:	1885c83a 	sub	r2,r3,r2
  809f2c:	f800283a 	ret
  809f30:	0005883a 	mov	r2,zero
  809f34:	f800283a 	ret
  809f38:	10c03fcc 	andi	r3,r2,255
  809f3c:	003ff506 	br	809f14 <__alt_mem_onchip_mem+0xff801f14>

00809f40 <strlen>:
  809f40:	208000cc 	andi	r2,r4,3
  809f44:	10002026 	beq	r2,zero,809fc8 <strlen+0x88>
  809f48:	20800007 	ldb	r2,0(r4)
  809f4c:	10002026 	beq	r2,zero,809fd0 <strlen+0x90>
  809f50:	2005883a 	mov	r2,r4
  809f54:	00000206 	br	809f60 <strlen+0x20>
  809f58:	10c00007 	ldb	r3,0(r2)
  809f5c:	18001826 	beq	r3,zero,809fc0 <strlen+0x80>
  809f60:	10800044 	addi	r2,r2,1
  809f64:	10c000cc 	andi	r3,r2,3
  809f68:	183ffb1e 	bne	r3,zero,809f58 <__alt_mem_onchip_mem+0xff801f58>
  809f6c:	10c00017 	ldw	r3,0(r2)
  809f70:	01ffbff4 	movhi	r7,65279
  809f74:	39ffbfc4 	addi	r7,r7,-257
  809f78:	00ca303a 	nor	r5,zero,r3
  809f7c:	01a02074 	movhi	r6,32897
  809f80:	19c7883a 	add	r3,r3,r7
  809f84:	31a02004 	addi	r6,r6,-32640
  809f88:	1946703a 	and	r3,r3,r5
  809f8c:	1986703a 	and	r3,r3,r6
  809f90:	1800091e 	bne	r3,zero,809fb8 <strlen+0x78>
  809f94:	10800104 	addi	r2,r2,4
  809f98:	10c00017 	ldw	r3,0(r2)
  809f9c:	19cb883a 	add	r5,r3,r7
  809fa0:	00c6303a 	nor	r3,zero,r3
  809fa4:	28c6703a 	and	r3,r5,r3
  809fa8:	1986703a 	and	r3,r3,r6
  809fac:	183ff926 	beq	r3,zero,809f94 <__alt_mem_onchip_mem+0xff801f94>
  809fb0:	00000106 	br	809fb8 <strlen+0x78>
  809fb4:	10800044 	addi	r2,r2,1
  809fb8:	10c00007 	ldb	r3,0(r2)
  809fbc:	183ffd1e 	bne	r3,zero,809fb4 <__alt_mem_onchip_mem+0xff801fb4>
  809fc0:	1105c83a 	sub	r2,r2,r4
  809fc4:	f800283a 	ret
  809fc8:	2005883a 	mov	r2,r4
  809fcc:	003fe706 	br	809f6c <__alt_mem_onchip_mem+0xff801f6c>
  809fd0:	0005883a 	mov	r2,zero
  809fd4:	f800283a 	ret

00809fd8 <__sprint_r.part.0>:
  809fd8:	28801917 	ldw	r2,100(r5)
  809fdc:	defff604 	addi	sp,sp,-40
  809fe0:	dd400515 	stw	r21,20(sp)
  809fe4:	dfc00915 	stw	ra,36(sp)
  809fe8:	df000815 	stw	fp,32(sp)
  809fec:	ddc00715 	stw	r23,28(sp)
  809ff0:	dd800615 	stw	r22,24(sp)
  809ff4:	dd000415 	stw	r20,16(sp)
  809ff8:	dcc00315 	stw	r19,12(sp)
  809ffc:	dc800215 	stw	r18,8(sp)
  80a000:	dc400115 	stw	r17,4(sp)
  80a004:	dc000015 	stw	r16,0(sp)
  80a008:	1088000c 	andi	r2,r2,8192
  80a00c:	302b883a 	mov	r21,r6
  80a010:	10002e26 	beq	r2,zero,80a0cc <__sprint_r.part.0+0xf4>
  80a014:	30800217 	ldw	r2,8(r6)
  80a018:	35800017 	ldw	r22,0(r6)
  80a01c:	10002926 	beq	r2,zero,80a0c4 <__sprint_r.part.0+0xec>
  80a020:	2827883a 	mov	r19,r5
  80a024:	2029883a 	mov	r20,r4
  80a028:	b5c00104 	addi	r23,r22,4
  80a02c:	04bfffc4 	movi	r18,-1
  80a030:	bc400017 	ldw	r17,0(r23)
  80a034:	b4000017 	ldw	r16,0(r22)
  80a038:	0039883a 	mov	fp,zero
  80a03c:	8822d0ba 	srli	r17,r17,2
  80a040:	8800031e 	bne	r17,zero,80a050 <__sprint_r.part.0+0x78>
  80a044:	00001806 	br	80a0a8 <__sprint_r.part.0+0xd0>
  80a048:	84000104 	addi	r16,r16,4
  80a04c:	8f001526 	beq	r17,fp,80a0a4 <__sprint_r.part.0+0xcc>
  80a050:	81400017 	ldw	r5,0(r16)
  80a054:	980d883a 	mov	r6,r19
  80a058:	a009883a 	mov	r4,r20
  80a05c:	080b8480 	call	80b848 <_fputwc_r>
  80a060:	e7000044 	addi	fp,fp,1
  80a064:	14bff81e 	bne	r2,r18,80a048 <__alt_mem_onchip_mem+0xff802048>
  80a068:	9005883a 	mov	r2,r18
  80a06c:	a8000215 	stw	zero,8(r21)
  80a070:	a8000115 	stw	zero,4(r21)
  80a074:	dfc00917 	ldw	ra,36(sp)
  80a078:	df000817 	ldw	fp,32(sp)
  80a07c:	ddc00717 	ldw	r23,28(sp)
  80a080:	dd800617 	ldw	r22,24(sp)
  80a084:	dd400517 	ldw	r21,20(sp)
  80a088:	dd000417 	ldw	r20,16(sp)
  80a08c:	dcc00317 	ldw	r19,12(sp)
  80a090:	dc800217 	ldw	r18,8(sp)
  80a094:	dc400117 	ldw	r17,4(sp)
  80a098:	dc000017 	ldw	r16,0(sp)
  80a09c:	dec00a04 	addi	sp,sp,40
  80a0a0:	f800283a 	ret
  80a0a4:	a8800217 	ldw	r2,8(r21)
  80a0a8:	8c63883a 	add	r17,r17,r17
  80a0ac:	8c63883a 	add	r17,r17,r17
  80a0b0:	1445c83a 	sub	r2,r2,r17
  80a0b4:	a8800215 	stw	r2,8(r21)
  80a0b8:	b5800204 	addi	r22,r22,8
  80a0bc:	bdc00204 	addi	r23,r23,8
  80a0c0:	103fdb1e 	bne	r2,zero,80a030 <__alt_mem_onchip_mem+0xff802030>
  80a0c4:	0005883a 	mov	r2,zero
  80a0c8:	003fe806 	br	80a06c <__alt_mem_onchip_mem+0xff80206c>
  80a0cc:	0807e5c0 	call	807e5c <__sfvwrite_r>
  80a0d0:	003fe606 	br	80a06c <__alt_mem_onchip_mem+0xff80206c>

0080a0d4 <__sprint_r>:
  80a0d4:	30c00217 	ldw	r3,8(r6)
  80a0d8:	18000126 	beq	r3,zero,80a0e0 <__sprint_r+0xc>
  80a0dc:	0809fd81 	jmpi	809fd8 <__sprint_r.part.0>
  80a0e0:	30000115 	stw	zero,4(r6)
  80a0e4:	0005883a 	mov	r2,zero
  80a0e8:	f800283a 	ret

0080a0ec <___vfiprintf_internal_r>:
  80a0ec:	deffc904 	addi	sp,sp,-220
  80a0f0:	df003515 	stw	fp,212(sp)
  80a0f4:	dd003115 	stw	r20,196(sp)
  80a0f8:	dfc03615 	stw	ra,216(sp)
  80a0fc:	ddc03415 	stw	r23,208(sp)
  80a100:	dd803315 	stw	r22,204(sp)
  80a104:	dd403215 	stw	r21,200(sp)
  80a108:	dcc03015 	stw	r19,192(sp)
  80a10c:	dc802f15 	stw	r18,188(sp)
  80a110:	dc402e15 	stw	r17,184(sp)
  80a114:	dc002d15 	stw	r16,180(sp)
  80a118:	d9002015 	stw	r4,128(sp)
  80a11c:	d9c02215 	stw	r7,136(sp)
  80a120:	2829883a 	mov	r20,r5
  80a124:	3039883a 	mov	fp,r6
  80a128:	20000226 	beq	r4,zero,80a134 <___vfiprintf_internal_r+0x48>
  80a12c:	20800e17 	ldw	r2,56(r4)
  80a130:	1000cf26 	beq	r2,zero,80a470 <___vfiprintf_internal_r+0x384>
  80a134:	a080030b 	ldhu	r2,12(r20)
  80a138:	10c8000c 	andi	r3,r2,8192
  80a13c:	1800061e 	bne	r3,zero,80a158 <___vfiprintf_internal_r+0x6c>
  80a140:	a1001917 	ldw	r4,100(r20)
  80a144:	00f7ffc4 	movi	r3,-8193
  80a148:	10880014 	ori	r2,r2,8192
  80a14c:	20c6703a 	and	r3,r4,r3
  80a150:	a080030d 	sth	r2,12(r20)
  80a154:	a0c01915 	stw	r3,100(r20)
  80a158:	10c0020c 	andi	r3,r2,8
  80a15c:	1800a926 	beq	r3,zero,80a404 <___vfiprintf_internal_r+0x318>
  80a160:	a0c00417 	ldw	r3,16(r20)
  80a164:	1800a726 	beq	r3,zero,80a404 <___vfiprintf_internal_r+0x318>
  80a168:	1080068c 	andi	r2,r2,26
  80a16c:	00c00284 	movi	r3,10
  80a170:	10c0ac26 	beq	r2,r3,80a424 <___vfiprintf_internal_r+0x338>
  80a174:	da801a04 	addi	r10,sp,104
  80a178:	da801e15 	stw	r10,120(sp)
  80a17c:	d8801e17 	ldw	r2,120(sp)
  80a180:	da8019c4 	addi	r10,sp,103
  80a184:	05802074 	movhi	r22,129
  80a188:	05c02074 	movhi	r23,129
  80a18c:	da801f15 	stw	r10,124(sp)
  80a190:	1295c83a 	sub	r10,r2,r10
  80a194:	b58d0104 	addi	r22,r22,13316
  80a198:	bdccfd04 	addi	r23,r23,13300
  80a19c:	dec01a15 	stw	sp,104(sp)
  80a1a0:	d8001c15 	stw	zero,112(sp)
  80a1a4:	d8001b15 	stw	zero,108(sp)
  80a1a8:	d8002615 	stw	zero,152(sp)
  80a1ac:	d8002315 	stw	zero,140(sp)
  80a1b0:	da802715 	stw	r10,156(sp)
  80a1b4:	d811883a 	mov	r8,sp
  80a1b8:	dd002115 	stw	r20,132(sp)
  80a1bc:	e021883a 	mov	r16,fp
  80a1c0:	80800007 	ldb	r2,0(r16)
  80a1c4:	1003ea26 	beq	r2,zero,80b170 <___vfiprintf_internal_r+0x1084>
  80a1c8:	00c00944 	movi	r3,37
  80a1cc:	8025883a 	mov	r18,r16
  80a1d0:	10c0021e 	bne	r2,r3,80a1dc <___vfiprintf_internal_r+0xf0>
  80a1d4:	00001606 	br	80a230 <___vfiprintf_internal_r+0x144>
  80a1d8:	10c00326 	beq	r2,r3,80a1e8 <___vfiprintf_internal_r+0xfc>
  80a1dc:	94800044 	addi	r18,r18,1
  80a1e0:	90800007 	ldb	r2,0(r18)
  80a1e4:	103ffc1e 	bne	r2,zero,80a1d8 <__alt_mem_onchip_mem+0xff8021d8>
  80a1e8:	9423c83a 	sub	r17,r18,r16
  80a1ec:	88001026 	beq	r17,zero,80a230 <___vfiprintf_internal_r+0x144>
  80a1f0:	d8c01c17 	ldw	r3,112(sp)
  80a1f4:	d8801b17 	ldw	r2,108(sp)
  80a1f8:	44000015 	stw	r16,0(r8)
  80a1fc:	88c7883a 	add	r3,r17,r3
  80a200:	10800044 	addi	r2,r2,1
  80a204:	44400115 	stw	r17,4(r8)
  80a208:	d8c01c15 	stw	r3,112(sp)
  80a20c:	d8801b15 	stw	r2,108(sp)
  80a210:	010001c4 	movi	r4,7
  80a214:	2080760e 	bge	r4,r2,80a3f0 <___vfiprintf_internal_r+0x304>
  80a218:	1803821e 	bne	r3,zero,80b024 <___vfiprintf_internal_r+0xf38>
  80a21c:	da802317 	ldw	r10,140(sp)
  80a220:	d8001b15 	stw	zero,108(sp)
  80a224:	d811883a 	mov	r8,sp
  80a228:	5455883a 	add	r10,r10,r17
  80a22c:	da802315 	stw	r10,140(sp)
  80a230:	90800007 	ldb	r2,0(r18)
  80a234:	10044626 	beq	r2,zero,80b350 <___vfiprintf_internal_r+0x1264>
  80a238:	90c00047 	ldb	r3,1(r18)
  80a23c:	94000044 	addi	r16,r18,1
  80a240:	d8001d85 	stb	zero,118(sp)
  80a244:	0009883a 	mov	r4,zero
  80a248:	000f883a 	mov	r7,zero
  80a24c:	027fffc4 	movi	r9,-1
  80a250:	0023883a 	mov	r17,zero
  80a254:	0029883a 	mov	r20,zero
  80a258:	01401604 	movi	r5,88
  80a25c:	01800244 	movi	r6,9
  80a260:	03400a84 	movi	r13,42
  80a264:	03001b04 	movi	r12,108
  80a268:	84000044 	addi	r16,r16,1
  80a26c:	18bff804 	addi	r2,r3,-32
  80a270:	28827336 	bltu	r5,r2,80ac40 <___vfiprintf_internal_r+0xb54>
  80a274:	100490ba 	slli	r2,r2,2
  80a278:	02802074 	movhi	r10,129
  80a27c:	52a8a304 	addi	r10,r10,-23924
  80a280:	1285883a 	add	r2,r2,r10
  80a284:	10800017 	ldw	r2,0(r2)
  80a288:	1000683a 	jmp	r2
  80a28c:	0080a974 	movhi	r2,677
  80a290:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a294:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a298:	0080a994 	movui	r2,678
  80a29c:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a2a0:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a2a4:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a2a8:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a2ac:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a2b0:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a2b4:	0080ab7c 	xorhi	r2,zero,685
  80a2b8:	0080ab98 	cmpnei	r2,zero,686
  80a2bc:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a2c0:	0080a480 	call	80a48 <__reset-0x77f5b8>
  80a2c4:	0080aba8 	cmpgeui	r2,zero,686
  80a2c8:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a2cc:	0080a9a0 	cmpeqi	r2,zero,678
  80a2d0:	0080a9ac 	andhi	r2,zero,678
  80a2d4:	0080a9ac 	andhi	r2,zero,678
  80a2d8:	0080a9ac 	andhi	r2,zero,678
  80a2dc:	0080a9ac 	andhi	r2,zero,678
  80a2e0:	0080a9ac 	andhi	r2,zero,678
  80a2e4:	0080a9ac 	andhi	r2,zero,678
  80a2e8:	0080a9ac 	andhi	r2,zero,678
  80a2ec:	0080a9ac 	andhi	r2,zero,678
  80a2f0:	0080a9ac 	andhi	r2,zero,678
  80a2f4:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a2f8:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a2fc:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a300:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a304:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a308:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a30c:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a310:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a314:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a318:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a31c:	0080a9d8 	cmpnei	r2,zero,679
  80a320:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a324:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a328:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a32c:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a330:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a334:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a338:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a33c:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a340:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a344:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a348:	0080aa10 	cmplti	r2,zero,680
  80a34c:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a350:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a354:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a358:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a35c:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a360:	0080aa68 	cmpgeui	r2,zero,681
  80a364:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a368:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a36c:	0080aad8 	cmpnei	r2,zero,683
  80a370:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a374:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a378:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a37c:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a380:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a384:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a388:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a38c:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a390:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a394:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a398:	0080a884 	movi	r2,674
  80a39c:	0080a8b0 	cmpltui	r2,zero,674
  80a3a0:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a3a4:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a3a8:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a3ac:	0080abe8 	cmpgeui	r2,zero,687
  80a3b0:	0080a8b0 	cmpltui	r2,zero,674
  80a3b4:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a3b8:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a3bc:	0080a744 	movi	r2,669
  80a3c0:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a3c4:	0080a754 	movui	r2,669
  80a3c8:	0080a790 	cmplti	r2,zero,670
  80a3cc:	0080a48c 	andi	r2,zero,658
  80a3d0:	0080a738 	rdprs	r2,zero,668
  80a3d4:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a3d8:	0080ab14 	movui	r2,684
  80a3dc:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a3e0:	0080ab6c 	andhi	r2,zero,685
  80a3e4:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a3e8:	0080ac40 	call	80ac4 <__reset-0x77f53c>
  80a3ec:	0080a830 	cmpltui	r2,zero,672
  80a3f0:	42000204 	addi	r8,r8,8
  80a3f4:	da802317 	ldw	r10,140(sp)
  80a3f8:	5455883a 	add	r10,r10,r17
  80a3fc:	da802315 	stw	r10,140(sp)
  80a400:	003f8b06 	br	80a230 <__alt_mem_onchip_mem+0xff802230>
  80a404:	d9002017 	ldw	r4,128(sp)
  80a408:	a00b883a 	mov	r5,r20
  80a40c:	0805ba00 	call	805ba0 <__swsetup_r>
  80a410:	1003b11e 	bne	r2,zero,80b2d8 <___vfiprintf_internal_r+0x11ec>
  80a414:	a080030b 	ldhu	r2,12(r20)
  80a418:	00c00284 	movi	r3,10
  80a41c:	1080068c 	andi	r2,r2,26
  80a420:	10ff541e 	bne	r2,r3,80a174 <__alt_mem_onchip_mem+0xff802174>
  80a424:	a080038f 	ldh	r2,14(r20)
  80a428:	103f5216 	blt	r2,zero,80a174 <__alt_mem_onchip_mem+0xff802174>
  80a42c:	d9c02217 	ldw	r7,136(sp)
  80a430:	d9002017 	ldw	r4,128(sp)
  80a434:	e00d883a 	mov	r6,fp
  80a438:	a00b883a 	mov	r5,r20
  80a43c:	080b5640 	call	80b564 <__sbprintf>
  80a440:	dfc03617 	ldw	ra,216(sp)
  80a444:	df003517 	ldw	fp,212(sp)
  80a448:	ddc03417 	ldw	r23,208(sp)
  80a44c:	dd803317 	ldw	r22,204(sp)
  80a450:	dd403217 	ldw	r21,200(sp)
  80a454:	dd003117 	ldw	r20,196(sp)
  80a458:	dcc03017 	ldw	r19,192(sp)
  80a45c:	dc802f17 	ldw	r18,188(sp)
  80a460:	dc402e17 	ldw	r17,184(sp)
  80a464:	dc002d17 	ldw	r16,180(sp)
  80a468:	dec03704 	addi	sp,sp,220
  80a46c:	f800283a 	ret
  80a470:	08019ec0 	call	8019ec <__sinit>
  80a474:	003f2f06 	br	80a134 <__alt_mem_onchip_mem+0xff802134>
  80a478:	0463c83a 	sub	r17,zero,r17
  80a47c:	d8802215 	stw	r2,136(sp)
  80a480:	a5000114 	ori	r20,r20,4
  80a484:	80c00007 	ldb	r3,0(r16)
  80a488:	003f7706 	br	80a268 <__alt_mem_onchip_mem+0xff802268>
  80a48c:	00800c04 	movi	r2,48
  80a490:	da802217 	ldw	r10,136(sp)
  80a494:	d8801d05 	stb	r2,116(sp)
  80a498:	00801e04 	movi	r2,120
  80a49c:	d8801d45 	stb	r2,117(sp)
  80a4a0:	d8001d85 	stb	zero,118(sp)
  80a4a4:	50c00104 	addi	r3,r10,4
  80a4a8:	54800017 	ldw	r18,0(r10)
  80a4ac:	0027883a 	mov	r19,zero
  80a4b0:	a0800094 	ori	r2,r20,2
  80a4b4:	48030b16 	blt	r9,zero,80b0e4 <___vfiprintf_internal_r+0xff8>
  80a4b8:	00bfdfc4 	movi	r2,-129
  80a4bc:	a096703a 	and	r11,r20,r2
  80a4c0:	d8c02215 	stw	r3,136(sp)
  80a4c4:	5d000094 	ori	r20,r11,2
  80a4c8:	90032b1e 	bne	r18,zero,80b178 <___vfiprintf_internal_r+0x108c>
  80a4cc:	00802074 	movhi	r2,129
  80a4d0:	108bfd04 	addi	r2,r2,12276
  80a4d4:	d8802615 	stw	r2,152(sp)
  80a4d8:	0039883a 	mov	fp,zero
  80a4dc:	48017b1e 	bne	r9,zero,80aacc <___vfiprintf_internal_r+0x9e0>
  80a4e0:	0013883a 	mov	r9,zero
  80a4e4:	0027883a 	mov	r19,zero
  80a4e8:	dd401a04 	addi	r21,sp,104
  80a4ec:	4825883a 	mov	r18,r9
  80a4f0:	4cc0010e 	bge	r9,r19,80a4f8 <___vfiprintf_internal_r+0x40c>
  80a4f4:	9825883a 	mov	r18,r19
  80a4f8:	e7003fcc 	andi	fp,fp,255
  80a4fc:	e700201c 	xori	fp,fp,128
  80a500:	e73fe004 	addi	fp,fp,-128
  80a504:	e0000126 	beq	fp,zero,80a50c <___vfiprintf_internal_r+0x420>
  80a508:	94800044 	addi	r18,r18,1
  80a50c:	a380008c 	andi	r14,r20,2
  80a510:	70000126 	beq	r14,zero,80a518 <___vfiprintf_internal_r+0x42c>
  80a514:	94800084 	addi	r18,r18,2
  80a518:	a700210c 	andi	fp,r20,132
  80a51c:	e001df1e 	bne	fp,zero,80ac9c <___vfiprintf_internal_r+0xbb0>
  80a520:	8c87c83a 	sub	r3,r17,r18
  80a524:	00c1dd0e 	bge	zero,r3,80ac9c <___vfiprintf_internal_r+0xbb0>
  80a528:	01c00404 	movi	r7,16
  80a52c:	d8801c17 	ldw	r2,112(sp)
  80a530:	38c3ad0e 	bge	r7,r3,80b3e8 <___vfiprintf_internal_r+0x12fc>
  80a534:	02802074 	movhi	r10,129
  80a538:	528d0104 	addi	r10,r10,13316
  80a53c:	dc002915 	stw	r16,164(sp)
  80a540:	d9801b17 	ldw	r6,108(sp)
  80a544:	da802415 	stw	r10,144(sp)
  80a548:	03c001c4 	movi	r15,7
  80a54c:	da402515 	stw	r9,148(sp)
  80a550:	db802815 	stw	r14,160(sp)
  80a554:	1821883a 	mov	r16,r3
  80a558:	00000506 	br	80a570 <___vfiprintf_internal_r+0x484>
  80a55c:	31400084 	addi	r5,r6,2
  80a560:	42000204 	addi	r8,r8,8
  80a564:	200d883a 	mov	r6,r4
  80a568:	843ffc04 	addi	r16,r16,-16
  80a56c:	3c000d0e 	bge	r7,r16,80a5a4 <___vfiprintf_internal_r+0x4b8>
  80a570:	10800404 	addi	r2,r2,16
  80a574:	31000044 	addi	r4,r6,1
  80a578:	45800015 	stw	r22,0(r8)
  80a57c:	41c00115 	stw	r7,4(r8)
  80a580:	d8801c15 	stw	r2,112(sp)
  80a584:	d9001b15 	stw	r4,108(sp)
  80a588:	793ff40e 	bge	r15,r4,80a55c <__alt_mem_onchip_mem+0xff80255c>
  80a58c:	1001b51e 	bne	r2,zero,80ac64 <___vfiprintf_internal_r+0xb78>
  80a590:	843ffc04 	addi	r16,r16,-16
  80a594:	000d883a 	mov	r6,zero
  80a598:	01400044 	movi	r5,1
  80a59c:	d811883a 	mov	r8,sp
  80a5a0:	3c3ff316 	blt	r7,r16,80a570 <__alt_mem_onchip_mem+0xff802570>
  80a5a4:	8007883a 	mov	r3,r16
  80a5a8:	da402517 	ldw	r9,148(sp)
  80a5ac:	db802817 	ldw	r14,160(sp)
  80a5b0:	dc002917 	ldw	r16,164(sp)
  80a5b4:	da802417 	ldw	r10,144(sp)
  80a5b8:	1885883a 	add	r2,r3,r2
  80a5bc:	40c00115 	stw	r3,4(r8)
  80a5c0:	42800015 	stw	r10,0(r8)
  80a5c4:	d8801c15 	stw	r2,112(sp)
  80a5c8:	d9401b15 	stw	r5,108(sp)
  80a5cc:	00c001c4 	movi	r3,7
  80a5d0:	19426016 	blt	r3,r5,80af54 <___vfiprintf_internal_r+0xe68>
  80a5d4:	d8c01d87 	ldb	r3,118(sp)
  80a5d8:	42000204 	addi	r8,r8,8
  80a5dc:	29000044 	addi	r4,r5,1
  80a5e0:	1801b31e 	bne	r3,zero,80acb0 <___vfiprintf_internal_r+0xbc4>
  80a5e4:	7001c026 	beq	r14,zero,80ace8 <___vfiprintf_internal_r+0xbfc>
  80a5e8:	d8c01d04 	addi	r3,sp,116
  80a5ec:	10800084 	addi	r2,r2,2
  80a5f0:	40c00015 	stw	r3,0(r8)
  80a5f4:	00c00084 	movi	r3,2
  80a5f8:	40c00115 	stw	r3,4(r8)
  80a5fc:	d8801c15 	stw	r2,112(sp)
  80a600:	d9001b15 	stw	r4,108(sp)
  80a604:	00c001c4 	movi	r3,7
  80a608:	1902650e 	bge	r3,r4,80afa0 <___vfiprintf_internal_r+0xeb4>
  80a60c:	10029a1e 	bne	r2,zero,80b078 <___vfiprintf_internal_r+0xf8c>
  80a610:	00c02004 	movi	r3,128
  80a614:	01000044 	movi	r4,1
  80a618:	000b883a 	mov	r5,zero
  80a61c:	d811883a 	mov	r8,sp
  80a620:	e0c1b31e 	bne	fp,r3,80acf0 <___vfiprintf_internal_r+0xc04>
  80a624:	8cb9c83a 	sub	fp,r17,r18
  80a628:	0701b10e 	bge	zero,fp,80acf0 <___vfiprintf_internal_r+0xc04>
  80a62c:	01c00404 	movi	r7,16
  80a630:	3f03890e 	bge	r7,fp,80b458 <___vfiprintf_internal_r+0x136c>
  80a634:	00c02074 	movhi	r3,129
  80a638:	18ccfd04 	addi	r3,r3,13300
  80a63c:	d8c02415 	stw	r3,144(sp)
  80a640:	8007883a 	mov	r3,r16
  80a644:	034001c4 	movi	r13,7
  80a648:	e021883a 	mov	r16,fp
  80a64c:	da402515 	stw	r9,148(sp)
  80a650:	1839883a 	mov	fp,r3
  80a654:	00000506 	br	80a66c <___vfiprintf_internal_r+0x580>
  80a658:	29800084 	addi	r6,r5,2
  80a65c:	42000204 	addi	r8,r8,8
  80a660:	180b883a 	mov	r5,r3
  80a664:	843ffc04 	addi	r16,r16,-16
  80a668:	3c000d0e 	bge	r7,r16,80a6a0 <___vfiprintf_internal_r+0x5b4>
  80a66c:	10800404 	addi	r2,r2,16
  80a670:	28c00044 	addi	r3,r5,1
  80a674:	45c00015 	stw	r23,0(r8)
  80a678:	41c00115 	stw	r7,4(r8)
  80a67c:	d8801c15 	stw	r2,112(sp)
  80a680:	d8c01b15 	stw	r3,108(sp)
  80a684:	68fff40e 	bge	r13,r3,80a658 <__alt_mem_onchip_mem+0xff802658>
  80a688:	1002241e 	bne	r2,zero,80af1c <___vfiprintf_internal_r+0xe30>
  80a68c:	843ffc04 	addi	r16,r16,-16
  80a690:	01800044 	movi	r6,1
  80a694:	000b883a 	mov	r5,zero
  80a698:	d811883a 	mov	r8,sp
  80a69c:	3c3ff316 	blt	r7,r16,80a66c <__alt_mem_onchip_mem+0xff80266c>
  80a6a0:	da402517 	ldw	r9,148(sp)
  80a6a4:	e007883a 	mov	r3,fp
  80a6a8:	8039883a 	mov	fp,r16
  80a6ac:	1821883a 	mov	r16,r3
  80a6b0:	d8c02417 	ldw	r3,144(sp)
  80a6b4:	1705883a 	add	r2,r2,fp
  80a6b8:	47000115 	stw	fp,4(r8)
  80a6bc:	40c00015 	stw	r3,0(r8)
  80a6c0:	d8801c15 	stw	r2,112(sp)
  80a6c4:	d9801b15 	stw	r6,108(sp)
  80a6c8:	00c001c4 	movi	r3,7
  80a6cc:	19827616 	blt	r3,r6,80b0a8 <___vfiprintf_internal_r+0xfbc>
  80a6d0:	4cf9c83a 	sub	fp,r9,r19
  80a6d4:	42000204 	addi	r8,r8,8
  80a6d8:	31000044 	addi	r4,r6,1
  80a6dc:	300b883a 	mov	r5,r6
  80a6e0:	07018516 	blt	zero,fp,80acf8 <___vfiprintf_internal_r+0xc0c>
  80a6e4:	9885883a 	add	r2,r19,r2
  80a6e8:	45400015 	stw	r21,0(r8)
  80a6ec:	44c00115 	stw	r19,4(r8)
  80a6f0:	d8801c15 	stw	r2,112(sp)
  80a6f4:	d9001b15 	stw	r4,108(sp)
  80a6f8:	00c001c4 	movi	r3,7
  80a6fc:	1901dd0e 	bge	r3,r4,80ae74 <___vfiprintf_internal_r+0xd88>
  80a700:	1002401e 	bne	r2,zero,80b004 <___vfiprintf_internal_r+0xf18>
  80a704:	d8001b15 	stw	zero,108(sp)
  80a708:	a2c0010c 	andi	r11,r20,4
  80a70c:	58000226 	beq	r11,zero,80a718 <___vfiprintf_internal_r+0x62c>
  80a710:	8ca7c83a 	sub	r19,r17,r18
  80a714:	04c2f216 	blt	zero,r19,80b2e0 <___vfiprintf_internal_r+0x11f4>
  80a718:	8c80010e 	bge	r17,r18,80a720 <___vfiprintf_internal_r+0x634>
  80a71c:	9023883a 	mov	r17,r18
  80a720:	da802317 	ldw	r10,140(sp)
  80a724:	5455883a 	add	r10,r10,r17
  80a728:	da802315 	stw	r10,140(sp)
  80a72c:	d8001b15 	stw	zero,108(sp)
  80a730:	d811883a 	mov	r8,sp
  80a734:	003ea206 	br	80a1c0 <__alt_mem_onchip_mem+0xff8021c0>
  80a738:	a5000814 	ori	r20,r20,32
  80a73c:	80c00007 	ldb	r3,0(r16)
  80a740:	003ec906 	br	80a268 <__alt_mem_onchip_mem+0xff802268>
  80a744:	80c00007 	ldb	r3,0(r16)
  80a748:	1b030926 	beq	r3,r12,80b370 <___vfiprintf_internal_r+0x1284>
  80a74c:	a5000414 	ori	r20,r20,16
  80a750:	003ec506 	br	80a268 <__alt_mem_onchip_mem+0xff802268>
  80a754:	21003fcc 	andi	r4,r4,255
  80a758:	20035e1e 	bne	r4,zero,80b4d4 <___vfiprintf_internal_r+0x13e8>
  80a75c:	a080080c 	andi	r2,r20,32
  80a760:	1002a526 	beq	r2,zero,80b1f8 <___vfiprintf_internal_r+0x110c>
  80a764:	da802217 	ldw	r10,136(sp)
  80a768:	50800017 	ldw	r2,0(r10)
  80a76c:	da802317 	ldw	r10,140(sp)
  80a770:	5007d7fa 	srai	r3,r10,31
  80a774:	da802217 	ldw	r10,136(sp)
  80a778:	10c00115 	stw	r3,4(r2)
  80a77c:	52800104 	addi	r10,r10,4
  80a780:	da802215 	stw	r10,136(sp)
  80a784:	da802317 	ldw	r10,140(sp)
  80a788:	12800015 	stw	r10,0(r2)
  80a78c:	003e8c06 	br	80a1c0 <__alt_mem_onchip_mem+0xff8021c0>
  80a790:	21003fcc 	andi	r4,r4,255
  80a794:	2003511e 	bne	r4,zero,80b4dc <___vfiprintf_internal_r+0x13f0>
  80a798:	a080080c 	andi	r2,r20,32
  80a79c:	1000a126 	beq	r2,zero,80aa24 <___vfiprintf_internal_r+0x938>
  80a7a0:	da802217 	ldw	r10,136(sp)
  80a7a4:	d8001d85 	stb	zero,118(sp)
  80a7a8:	50800204 	addi	r2,r10,8
  80a7ac:	54800017 	ldw	r18,0(r10)
  80a7b0:	54c00117 	ldw	r19,4(r10)
  80a7b4:	4802b416 	blt	r9,zero,80b288 <___vfiprintf_internal_r+0x119c>
  80a7b8:	013fdfc4 	movi	r4,-129
  80a7bc:	94c6b03a 	or	r3,r18,r19
  80a7c0:	d8802215 	stw	r2,136(sp)
  80a7c4:	a128703a 	and	r20,r20,r4
  80a7c8:	1800a226 	beq	r3,zero,80aa54 <___vfiprintf_internal_r+0x968>
  80a7cc:	0039883a 	mov	fp,zero
  80a7d0:	dd401a04 	addi	r21,sp,104
  80a7d4:	9006d0fa 	srli	r3,r18,3
  80a7d8:	9808977a 	slli	r4,r19,29
  80a7dc:	9826d0fa 	srli	r19,r19,3
  80a7e0:	948001cc 	andi	r18,r18,7
  80a7e4:	90800c04 	addi	r2,r18,48
  80a7e8:	ad7fffc4 	addi	r21,r21,-1
  80a7ec:	20e4b03a 	or	r18,r4,r3
  80a7f0:	a8800005 	stb	r2,0(r21)
  80a7f4:	94c6b03a 	or	r3,r18,r19
  80a7f8:	183ff61e 	bne	r3,zero,80a7d4 <__alt_mem_onchip_mem+0xff8027d4>
  80a7fc:	a0c0004c 	andi	r3,r20,1
  80a800:	18005926 	beq	r3,zero,80a968 <___vfiprintf_internal_r+0x87c>
  80a804:	10803fcc 	andi	r2,r2,255
  80a808:	1080201c 	xori	r2,r2,128
  80a80c:	10bfe004 	addi	r2,r2,-128
  80a810:	00c00c04 	movi	r3,48
  80a814:	10c05426 	beq	r2,r3,80a968 <___vfiprintf_internal_r+0x87c>
  80a818:	da801e17 	ldw	r10,120(sp)
  80a81c:	a8bfffc4 	addi	r2,r21,-1
  80a820:	a8ffffc5 	stb	r3,-1(r21)
  80a824:	50a7c83a 	sub	r19,r10,r2
  80a828:	102b883a 	mov	r21,r2
  80a82c:	003f2f06 	br	80a4ec <__alt_mem_onchip_mem+0xff8024ec>
  80a830:	21003fcc 	andi	r4,r4,255
  80a834:	2003421e 	bne	r4,zero,80b540 <___vfiprintf_internal_r+0x1454>
  80a838:	00802074 	movhi	r2,129
  80a83c:	108bfd04 	addi	r2,r2,12276
  80a840:	d8802615 	stw	r2,152(sp)
  80a844:	a080080c 	andi	r2,r20,32
  80a848:	1000aa26 	beq	r2,zero,80aaf4 <___vfiprintf_internal_r+0xa08>
  80a84c:	da802217 	ldw	r10,136(sp)
  80a850:	54800017 	ldw	r18,0(r10)
  80a854:	54c00117 	ldw	r19,4(r10)
  80a858:	52800204 	addi	r10,r10,8
  80a85c:	da802215 	stw	r10,136(sp)
  80a860:	a080004c 	andi	r2,r20,1
  80a864:	1001d226 	beq	r2,zero,80afb0 <___vfiprintf_internal_r+0xec4>
  80a868:	94c4b03a 	or	r2,r18,r19
  80a86c:	1002351e 	bne	r2,zero,80b144 <___vfiprintf_internal_r+0x1058>
  80a870:	d8001d85 	stb	zero,118(sp)
  80a874:	48022216 	blt	r9,zero,80b100 <___vfiprintf_internal_r+0x1014>
  80a878:	00bfdfc4 	movi	r2,-129
  80a87c:	a0a8703a 	and	r20,r20,r2
  80a880:	003f1506 	br	80a4d8 <__alt_mem_onchip_mem+0xff8024d8>
  80a884:	da802217 	ldw	r10,136(sp)
  80a888:	04800044 	movi	r18,1
  80a88c:	d8001d85 	stb	zero,118(sp)
  80a890:	50800017 	ldw	r2,0(r10)
  80a894:	52800104 	addi	r10,r10,4
  80a898:	da802215 	stw	r10,136(sp)
  80a89c:	d8801005 	stb	r2,64(sp)
  80a8a0:	9027883a 	mov	r19,r18
  80a8a4:	dd401004 	addi	r21,sp,64
  80a8a8:	0013883a 	mov	r9,zero
  80a8ac:	003f1706 	br	80a50c <__alt_mem_onchip_mem+0xff80250c>
  80a8b0:	21003fcc 	andi	r4,r4,255
  80a8b4:	2003201e 	bne	r4,zero,80b538 <___vfiprintf_internal_r+0x144c>
  80a8b8:	a080080c 	andi	r2,r20,32
  80a8bc:	10004b26 	beq	r2,zero,80a9ec <___vfiprintf_internal_r+0x900>
  80a8c0:	da802217 	ldw	r10,136(sp)
  80a8c4:	50800117 	ldw	r2,4(r10)
  80a8c8:	54800017 	ldw	r18,0(r10)
  80a8cc:	52800204 	addi	r10,r10,8
  80a8d0:	da802215 	stw	r10,136(sp)
  80a8d4:	1027883a 	mov	r19,r2
  80a8d8:	10022c16 	blt	r2,zero,80b18c <___vfiprintf_internal_r+0x10a0>
  80a8dc:	df001d83 	ldbu	fp,118(sp)
  80a8e0:	48007216 	blt	r9,zero,80aaac <___vfiprintf_internal_r+0x9c0>
  80a8e4:	00ffdfc4 	movi	r3,-129
  80a8e8:	94c4b03a 	or	r2,r18,r19
  80a8ec:	a0e8703a 	and	r20,r20,r3
  80a8f0:	1000cc26 	beq	r2,zero,80ac24 <___vfiprintf_internal_r+0xb38>
  80a8f4:	98021026 	beq	r19,zero,80b138 <___vfiprintf_internal_r+0x104c>
  80a8f8:	dc402415 	stw	r17,144(sp)
  80a8fc:	dc002515 	stw	r16,148(sp)
  80a900:	9823883a 	mov	r17,r19
  80a904:	9021883a 	mov	r16,r18
  80a908:	dd401a04 	addi	r21,sp,104
  80a90c:	4825883a 	mov	r18,r9
  80a910:	4027883a 	mov	r19,r8
  80a914:	8009883a 	mov	r4,r16
  80a918:	880b883a 	mov	r5,r17
  80a91c:	01800284 	movi	r6,10
  80a920:	000f883a 	mov	r7,zero
  80a924:	080c04c0 	call	80c04c <__umoddi3>
  80a928:	10800c04 	addi	r2,r2,48
  80a92c:	ad7fffc4 	addi	r21,r21,-1
  80a930:	8009883a 	mov	r4,r16
  80a934:	880b883a 	mov	r5,r17
  80a938:	a8800005 	stb	r2,0(r21)
  80a93c:	01800284 	movi	r6,10
  80a940:	000f883a 	mov	r7,zero
  80a944:	080bad40 	call	80bad4 <__udivdi3>
  80a948:	1021883a 	mov	r16,r2
  80a94c:	10c4b03a 	or	r2,r2,r3
  80a950:	1823883a 	mov	r17,r3
  80a954:	103fef1e 	bne	r2,zero,80a914 <__alt_mem_onchip_mem+0xff802914>
  80a958:	dc402417 	ldw	r17,144(sp)
  80a95c:	dc002517 	ldw	r16,148(sp)
  80a960:	9013883a 	mov	r9,r18
  80a964:	9811883a 	mov	r8,r19
  80a968:	da801e17 	ldw	r10,120(sp)
  80a96c:	5567c83a 	sub	r19,r10,r21
  80a970:	003ede06 	br	80a4ec <__alt_mem_onchip_mem+0xff8024ec>
  80a974:	38803fcc 	andi	r2,r7,255
  80a978:	1080201c 	xori	r2,r2,128
  80a97c:	10bfe004 	addi	r2,r2,-128
  80a980:	1002371e 	bne	r2,zero,80b260 <___vfiprintf_internal_r+0x1174>
  80a984:	01000044 	movi	r4,1
  80a988:	01c00804 	movi	r7,32
  80a98c:	80c00007 	ldb	r3,0(r16)
  80a990:	003e3506 	br	80a268 <__alt_mem_onchip_mem+0xff802268>
  80a994:	a5000054 	ori	r20,r20,1
  80a998:	80c00007 	ldb	r3,0(r16)
  80a99c:	003e3206 	br	80a268 <__alt_mem_onchip_mem+0xff802268>
  80a9a0:	a5002014 	ori	r20,r20,128
  80a9a4:	80c00007 	ldb	r3,0(r16)
  80a9a8:	003e2f06 	br	80a268 <__alt_mem_onchip_mem+0xff802268>
  80a9ac:	8015883a 	mov	r10,r16
  80a9b0:	0023883a 	mov	r17,zero
  80a9b4:	18bff404 	addi	r2,r3,-48
  80a9b8:	50c00007 	ldb	r3,0(r10)
  80a9bc:	8c4002a4 	muli	r17,r17,10
  80a9c0:	84000044 	addi	r16,r16,1
  80a9c4:	8015883a 	mov	r10,r16
  80a9c8:	1463883a 	add	r17,r2,r17
  80a9cc:	18bff404 	addi	r2,r3,-48
  80a9d0:	30bff92e 	bgeu	r6,r2,80a9b8 <__alt_mem_onchip_mem+0xff8029b8>
  80a9d4:	003e2506 	br	80a26c <__alt_mem_onchip_mem+0xff80226c>
  80a9d8:	21003fcc 	andi	r4,r4,255
  80a9dc:	2002d41e 	bne	r4,zero,80b530 <___vfiprintf_internal_r+0x1444>
  80a9e0:	a5000414 	ori	r20,r20,16
  80a9e4:	a080080c 	andi	r2,r20,32
  80a9e8:	103fb51e 	bne	r2,zero,80a8c0 <__alt_mem_onchip_mem+0xff8028c0>
  80a9ec:	a080040c 	andi	r2,r20,16
  80a9f0:	1001f826 	beq	r2,zero,80b1d4 <___vfiprintf_internal_r+0x10e8>
  80a9f4:	da802217 	ldw	r10,136(sp)
  80a9f8:	54800017 	ldw	r18,0(r10)
  80a9fc:	52800104 	addi	r10,r10,4
  80aa00:	da802215 	stw	r10,136(sp)
  80aa04:	9027d7fa 	srai	r19,r18,31
  80aa08:	9805883a 	mov	r2,r19
  80aa0c:	003fb206 	br	80a8d8 <__alt_mem_onchip_mem+0xff8028d8>
  80aa10:	21003fcc 	andi	r4,r4,255
  80aa14:	2002c41e 	bne	r4,zero,80b528 <___vfiprintf_internal_r+0x143c>
  80aa18:	a5000414 	ori	r20,r20,16
  80aa1c:	a080080c 	andi	r2,r20,32
  80aa20:	103f5f1e 	bne	r2,zero,80a7a0 <__alt_mem_onchip_mem+0xff8027a0>
  80aa24:	a080040c 	andi	r2,r20,16
  80aa28:	10020f26 	beq	r2,zero,80b268 <___vfiprintf_internal_r+0x117c>
  80aa2c:	da802217 	ldw	r10,136(sp)
  80aa30:	d8001d85 	stb	zero,118(sp)
  80aa34:	0027883a 	mov	r19,zero
  80aa38:	50800104 	addi	r2,r10,4
  80aa3c:	54800017 	ldw	r18,0(r10)
  80aa40:	48021116 	blt	r9,zero,80b288 <___vfiprintf_internal_r+0x119c>
  80aa44:	00ffdfc4 	movi	r3,-129
  80aa48:	d8802215 	stw	r2,136(sp)
  80aa4c:	a0e8703a 	and	r20,r20,r3
  80aa50:	903f5e1e 	bne	r18,zero,80a7cc <__alt_mem_onchip_mem+0xff8027cc>
  80aa54:	0039883a 	mov	fp,zero
  80aa58:	4802a626 	beq	r9,zero,80b4f4 <___vfiprintf_internal_r+0x1408>
  80aa5c:	0025883a 	mov	r18,zero
  80aa60:	0027883a 	mov	r19,zero
  80aa64:	003f5a06 	br	80a7d0 <__alt_mem_onchip_mem+0xff8027d0>
  80aa68:	21003fcc 	andi	r4,r4,255
  80aa6c:	20029f1e 	bne	r4,zero,80b4ec <___vfiprintf_internal_r+0x1400>
  80aa70:	a5000414 	ori	r20,r20,16
  80aa74:	a080080c 	andi	r2,r20,32
  80aa78:	10005e1e 	bne	r2,zero,80abf4 <___vfiprintf_internal_r+0xb08>
  80aa7c:	a080040c 	andi	r2,r20,16
  80aa80:	1001a21e 	bne	r2,zero,80b10c <___vfiprintf_internal_r+0x1020>
  80aa84:	a080100c 	andi	r2,r20,64
  80aa88:	d8001d85 	stb	zero,118(sp)
  80aa8c:	da802217 	ldw	r10,136(sp)
  80aa90:	1002231e 	bne	r2,zero,80b320 <___vfiprintf_internal_r+0x1234>
  80aa94:	50800104 	addi	r2,r10,4
  80aa98:	54800017 	ldw	r18,0(r10)
  80aa9c:	0027883a 	mov	r19,zero
  80aaa0:	4801a00e 	bge	r9,zero,80b124 <___vfiprintf_internal_r+0x1038>
  80aaa4:	d8802215 	stw	r2,136(sp)
  80aaa8:	0039883a 	mov	fp,zero
  80aaac:	94c4b03a 	or	r2,r18,r19
  80aab0:	103f901e 	bne	r2,zero,80a8f4 <__alt_mem_onchip_mem+0xff8028f4>
  80aab4:	00800044 	movi	r2,1
  80aab8:	10803fcc 	andi	r2,r2,255
  80aabc:	00c00044 	movi	r3,1
  80aac0:	10c05926 	beq	r2,r3,80ac28 <___vfiprintf_internal_r+0xb3c>
  80aac4:	00c00084 	movi	r3,2
  80aac8:	10ffe41e 	bne	r2,r3,80aa5c <__alt_mem_onchip_mem+0xff802a5c>
  80aacc:	0025883a 	mov	r18,zero
  80aad0:	0027883a 	mov	r19,zero
  80aad4:	00013d06 	br	80afcc <___vfiprintf_internal_r+0xee0>
  80aad8:	21003fcc 	andi	r4,r4,255
  80aadc:	2002811e 	bne	r4,zero,80b4e4 <___vfiprintf_internal_r+0x13f8>
  80aae0:	00802074 	movhi	r2,129
  80aae4:	108bf804 	addi	r2,r2,12256
  80aae8:	d8802615 	stw	r2,152(sp)
  80aaec:	a080080c 	andi	r2,r20,32
  80aaf0:	103f561e 	bne	r2,zero,80a84c <__alt_mem_onchip_mem+0xff80284c>
  80aaf4:	a080040c 	andi	r2,r20,16
  80aaf8:	1001d126 	beq	r2,zero,80b240 <___vfiprintf_internal_r+0x1154>
  80aafc:	da802217 	ldw	r10,136(sp)
  80ab00:	0027883a 	mov	r19,zero
  80ab04:	54800017 	ldw	r18,0(r10)
  80ab08:	52800104 	addi	r10,r10,4
  80ab0c:	da802215 	stw	r10,136(sp)
  80ab10:	003f5306 	br	80a860 <__alt_mem_onchip_mem+0xff802860>
  80ab14:	da802217 	ldw	r10,136(sp)
  80ab18:	d8001d85 	stb	zero,118(sp)
  80ab1c:	55400017 	ldw	r21,0(r10)
  80ab20:	50c00104 	addi	r3,r10,4
  80ab24:	a8024226 	beq	r21,zero,80b430 <___vfiprintf_internal_r+0x1344>
  80ab28:	48021816 	blt	r9,zero,80b38c <___vfiprintf_internal_r+0x12a0>
  80ab2c:	480d883a 	mov	r6,r9
  80ab30:	000b883a 	mov	r5,zero
  80ab34:	a809883a 	mov	r4,r21
  80ab38:	d8c02a15 	stw	r3,168(sp)
  80ab3c:	da002b15 	stw	r8,172(sp)
  80ab40:	da402c15 	stw	r9,176(sp)
  80ab44:	08084a80 	call	8084a8 <memchr>
  80ab48:	d8c02a17 	ldw	r3,168(sp)
  80ab4c:	da002b17 	ldw	r8,172(sp)
  80ab50:	da402c17 	ldw	r9,176(sp)
  80ab54:	10024826 	beq	r2,zero,80b478 <___vfiprintf_internal_r+0x138c>
  80ab58:	1567c83a 	sub	r19,r2,r21
  80ab5c:	df001d83 	ldbu	fp,118(sp)
  80ab60:	d8c02215 	stw	r3,136(sp)
  80ab64:	0013883a 	mov	r9,zero
  80ab68:	003e6006 	br	80a4ec <__alt_mem_onchip_mem+0xff8024ec>
  80ab6c:	21003fcc 	andi	r4,r4,255
  80ab70:	203fc026 	beq	r4,zero,80aa74 <__alt_mem_onchip_mem+0xff802a74>
  80ab74:	d9c01d85 	stb	r7,118(sp)
  80ab78:	003fbe06 	br	80aa74 <__alt_mem_onchip_mem+0xff802a74>
  80ab7c:	da802217 	ldw	r10,136(sp)
  80ab80:	54400017 	ldw	r17,0(r10)
  80ab84:	50800104 	addi	r2,r10,4
  80ab88:	883e3b16 	blt	r17,zero,80a478 <__alt_mem_onchip_mem+0xff802478>
  80ab8c:	d8802215 	stw	r2,136(sp)
  80ab90:	80c00007 	ldb	r3,0(r16)
  80ab94:	003db406 	br	80a268 <__alt_mem_onchip_mem+0xff802268>
  80ab98:	01000044 	movi	r4,1
  80ab9c:	01c00ac4 	movi	r7,43
  80aba0:	80c00007 	ldb	r3,0(r16)
  80aba4:	003db006 	br	80a268 <__alt_mem_onchip_mem+0xff802268>
  80aba8:	80c00007 	ldb	r3,0(r16)
  80abac:	82800044 	addi	r10,r16,1
  80abb0:	1b423c26 	beq	r3,r13,80b4a4 <___vfiprintf_internal_r+0x13b8>
  80abb4:	18bff404 	addi	r2,r3,-48
  80abb8:	0013883a 	mov	r9,zero
  80abbc:	30822b36 	bltu	r6,r2,80b46c <___vfiprintf_internal_r+0x1380>
  80abc0:	50c00007 	ldb	r3,0(r10)
  80abc4:	4a4002a4 	muli	r9,r9,10
  80abc8:	54000044 	addi	r16,r10,1
  80abcc:	8015883a 	mov	r10,r16
  80abd0:	4893883a 	add	r9,r9,r2
  80abd4:	18bff404 	addi	r2,r3,-48
  80abd8:	30bff92e 	bgeu	r6,r2,80abc0 <__alt_mem_onchip_mem+0xff802bc0>
  80abdc:	483da30e 	bge	r9,zero,80a26c <__alt_mem_onchip_mem+0xff80226c>
  80abe0:	027fffc4 	movi	r9,-1
  80abe4:	003da106 	br	80a26c <__alt_mem_onchip_mem+0xff80226c>
  80abe8:	a5001014 	ori	r20,r20,64
  80abec:	80c00007 	ldb	r3,0(r16)
  80abf0:	003d9d06 	br	80a268 <__alt_mem_onchip_mem+0xff802268>
  80abf4:	da802217 	ldw	r10,136(sp)
  80abf8:	d8001d85 	stb	zero,118(sp)
  80abfc:	50c00204 	addi	r3,r10,8
  80ac00:	54800017 	ldw	r18,0(r10)
  80ac04:	54c00117 	ldw	r19,4(r10)
  80ac08:	4801ca16 	blt	r9,zero,80b334 <___vfiprintf_internal_r+0x1248>
  80ac0c:	013fdfc4 	movi	r4,-129
  80ac10:	94c4b03a 	or	r2,r18,r19
  80ac14:	d8c02215 	stw	r3,136(sp)
  80ac18:	a128703a 	and	r20,r20,r4
  80ac1c:	0039883a 	mov	fp,zero
  80ac20:	103f341e 	bne	r2,zero,80a8f4 <__alt_mem_onchip_mem+0xff8028f4>
  80ac24:	483e2e26 	beq	r9,zero,80a4e0 <__alt_mem_onchip_mem+0xff8024e0>
  80ac28:	0025883a 	mov	r18,zero
  80ac2c:	94800c04 	addi	r18,r18,48
  80ac30:	dc8019c5 	stb	r18,103(sp)
  80ac34:	dcc02717 	ldw	r19,156(sp)
  80ac38:	dd4019c4 	addi	r21,sp,103
  80ac3c:	003e2b06 	br	80a4ec <__alt_mem_onchip_mem+0xff8024ec>
  80ac40:	21003fcc 	andi	r4,r4,255
  80ac44:	2002361e 	bne	r4,zero,80b520 <___vfiprintf_internal_r+0x1434>
  80ac48:	1801c126 	beq	r3,zero,80b350 <___vfiprintf_internal_r+0x1264>
  80ac4c:	04800044 	movi	r18,1
  80ac50:	d8c01005 	stb	r3,64(sp)
  80ac54:	d8001d85 	stb	zero,118(sp)
  80ac58:	9027883a 	mov	r19,r18
  80ac5c:	dd401004 	addi	r21,sp,64
  80ac60:	003f1106 	br	80a8a8 <__alt_mem_onchip_mem+0xff8028a8>
  80ac64:	d9402117 	ldw	r5,132(sp)
  80ac68:	d9002017 	ldw	r4,128(sp)
  80ac6c:	d9801a04 	addi	r6,sp,104
  80ac70:	d9c02b15 	stw	r7,172(sp)
  80ac74:	dbc02a15 	stw	r15,168(sp)
  80ac78:	0809fd80 	call	809fd8 <__sprint_r.part.0>
  80ac7c:	d9c02b17 	ldw	r7,172(sp)
  80ac80:	dbc02a17 	ldw	r15,168(sp)
  80ac84:	10006d1e 	bne	r2,zero,80ae3c <___vfiprintf_internal_r+0xd50>
  80ac88:	d9801b17 	ldw	r6,108(sp)
  80ac8c:	d8801c17 	ldw	r2,112(sp)
  80ac90:	d811883a 	mov	r8,sp
  80ac94:	31400044 	addi	r5,r6,1
  80ac98:	003e3306 	br	80a568 <__alt_mem_onchip_mem+0xff802568>
  80ac9c:	d9401b17 	ldw	r5,108(sp)
  80aca0:	d8801c17 	ldw	r2,112(sp)
  80aca4:	29000044 	addi	r4,r5,1
  80aca8:	d8c01d87 	ldb	r3,118(sp)
  80acac:	183e4d26 	beq	r3,zero,80a5e4 <__alt_mem_onchip_mem+0xff8025e4>
  80acb0:	00c00044 	movi	r3,1
  80acb4:	d9401d84 	addi	r5,sp,118
  80acb8:	10c5883a 	add	r2,r2,r3
  80acbc:	41400015 	stw	r5,0(r8)
  80acc0:	40c00115 	stw	r3,4(r8)
  80acc4:	d8801c15 	stw	r2,112(sp)
  80acc8:	d9001b15 	stw	r4,108(sp)
  80accc:	014001c4 	movi	r5,7
  80acd0:	2900a90e 	bge	r5,r4,80af78 <___vfiprintf_internal_r+0xe8c>
  80acd4:	1000da1e 	bne	r2,zero,80b040 <___vfiprintf_internal_r+0xf54>
  80acd8:	7000ab1e 	bne	r14,zero,80af88 <___vfiprintf_internal_r+0xe9c>
  80acdc:	000b883a 	mov	r5,zero
  80ace0:	1809883a 	mov	r4,r3
  80ace4:	d811883a 	mov	r8,sp
  80ace8:	00c02004 	movi	r3,128
  80acec:	e0fe4d26 	beq	fp,r3,80a624 <__alt_mem_onchip_mem+0xff802624>
  80acf0:	4cf9c83a 	sub	fp,r9,r19
  80acf4:	073e7b0e 	bge	zero,fp,80a6e4 <__alt_mem_onchip_mem+0xff8026e4>
  80acf8:	01c00404 	movi	r7,16
  80acfc:	3f01900e 	bge	r7,fp,80b340 <___vfiprintf_internal_r+0x1254>
  80ad00:	00c02074 	movhi	r3,129
  80ad04:	18ccfd04 	addi	r3,r3,13300
  80ad08:	d8c02415 	stw	r3,144(sp)
  80ad0c:	034001c4 	movi	r13,7
  80ad10:	00000506 	br	80ad28 <___vfiprintf_internal_r+0xc3c>
  80ad14:	29000084 	addi	r4,r5,2
  80ad18:	42000204 	addi	r8,r8,8
  80ad1c:	180b883a 	mov	r5,r3
  80ad20:	e73ffc04 	addi	fp,fp,-16
  80ad24:	3f000d0e 	bge	r7,fp,80ad5c <___vfiprintf_internal_r+0xc70>
  80ad28:	10800404 	addi	r2,r2,16
  80ad2c:	28c00044 	addi	r3,r5,1
  80ad30:	45c00015 	stw	r23,0(r8)
  80ad34:	41c00115 	stw	r7,4(r8)
  80ad38:	d8801c15 	stw	r2,112(sp)
  80ad3c:	d8c01b15 	stw	r3,108(sp)
  80ad40:	68fff40e 	bge	r13,r3,80ad14 <__alt_mem_onchip_mem+0xff802d14>
  80ad44:	1000101e 	bne	r2,zero,80ad88 <___vfiprintf_internal_r+0xc9c>
  80ad48:	e73ffc04 	addi	fp,fp,-16
  80ad4c:	01000044 	movi	r4,1
  80ad50:	000b883a 	mov	r5,zero
  80ad54:	d811883a 	mov	r8,sp
  80ad58:	3f3ff316 	blt	r7,fp,80ad28 <__alt_mem_onchip_mem+0xff802d28>
  80ad5c:	da802417 	ldw	r10,144(sp)
  80ad60:	1705883a 	add	r2,r2,fp
  80ad64:	47000115 	stw	fp,4(r8)
  80ad68:	42800015 	stw	r10,0(r8)
  80ad6c:	d8801c15 	stw	r2,112(sp)
  80ad70:	d9001b15 	stw	r4,108(sp)
  80ad74:	00c001c4 	movi	r3,7
  80ad78:	19003616 	blt	r3,r4,80ae54 <___vfiprintf_internal_r+0xd68>
  80ad7c:	42000204 	addi	r8,r8,8
  80ad80:	21000044 	addi	r4,r4,1
  80ad84:	003e5706 	br	80a6e4 <__alt_mem_onchip_mem+0xff8026e4>
  80ad88:	d9402117 	ldw	r5,132(sp)
  80ad8c:	d9002017 	ldw	r4,128(sp)
  80ad90:	d9801a04 	addi	r6,sp,104
  80ad94:	d9c02b15 	stw	r7,172(sp)
  80ad98:	db402a15 	stw	r13,168(sp)
  80ad9c:	0809fd80 	call	809fd8 <__sprint_r.part.0>
  80ada0:	d9c02b17 	ldw	r7,172(sp)
  80ada4:	db402a17 	ldw	r13,168(sp)
  80ada8:	1000241e 	bne	r2,zero,80ae3c <___vfiprintf_internal_r+0xd50>
  80adac:	d9401b17 	ldw	r5,108(sp)
  80adb0:	d8801c17 	ldw	r2,112(sp)
  80adb4:	d811883a 	mov	r8,sp
  80adb8:	29000044 	addi	r4,r5,1
  80adbc:	003fd806 	br	80ad20 <__alt_mem_onchip_mem+0xff802d20>
  80adc0:	d9401b17 	ldw	r5,108(sp)
  80adc4:	00c02074 	movhi	r3,129
  80adc8:	18cd0104 	addi	r3,r3,13316
  80adcc:	d8c02415 	stw	r3,144(sp)
  80add0:	29400044 	addi	r5,r5,1
  80add4:	d8c02417 	ldw	r3,144(sp)
  80add8:	14c5883a 	add	r2,r2,r19
  80addc:	44c00115 	stw	r19,4(r8)
  80ade0:	40c00015 	stw	r3,0(r8)
  80ade4:	d8801c15 	stw	r2,112(sp)
  80ade8:	d9401b15 	stw	r5,108(sp)
  80adec:	00c001c4 	movi	r3,7
  80adf0:	1940070e 	bge	r3,r5,80ae10 <___vfiprintf_internal_r+0xd24>
  80adf4:	103e4826 	beq	r2,zero,80a718 <__alt_mem_onchip_mem+0xff802718>
  80adf8:	d9402117 	ldw	r5,132(sp)
  80adfc:	d9002017 	ldw	r4,128(sp)
  80ae00:	d9801a04 	addi	r6,sp,104
  80ae04:	0809fd80 	call	809fd8 <__sprint_r.part.0>
  80ae08:	10000c1e 	bne	r2,zero,80ae3c <___vfiprintf_internal_r+0xd50>
  80ae0c:	d8801c17 	ldw	r2,112(sp)
  80ae10:	8c80010e 	bge	r17,r18,80ae18 <___vfiprintf_internal_r+0xd2c>
  80ae14:	9023883a 	mov	r17,r18
  80ae18:	da802317 	ldw	r10,140(sp)
  80ae1c:	5455883a 	add	r10,r10,r17
  80ae20:	da802315 	stw	r10,140(sp)
  80ae24:	103e4126 	beq	r2,zero,80a72c <__alt_mem_onchip_mem+0xff80272c>
  80ae28:	d9402117 	ldw	r5,132(sp)
  80ae2c:	d9002017 	ldw	r4,128(sp)
  80ae30:	d9801a04 	addi	r6,sp,104
  80ae34:	0809fd80 	call	809fd8 <__sprint_r.part.0>
  80ae38:	103e3c26 	beq	r2,zero,80a72c <__alt_mem_onchip_mem+0xff80272c>
  80ae3c:	dd002117 	ldw	r20,132(sp)
  80ae40:	a080030b 	ldhu	r2,12(r20)
  80ae44:	1080100c 	andi	r2,r2,64
  80ae48:	1001231e 	bne	r2,zero,80b2d8 <___vfiprintf_internal_r+0x11ec>
  80ae4c:	d8802317 	ldw	r2,140(sp)
  80ae50:	003d7b06 	br	80a440 <__alt_mem_onchip_mem+0xff802440>
  80ae54:	1000991e 	bne	r2,zero,80b0bc <___vfiprintf_internal_r+0xfd0>
  80ae58:	00c00044 	movi	r3,1
  80ae5c:	9805883a 	mov	r2,r19
  80ae60:	dd400015 	stw	r21,0(sp)
  80ae64:	dcc00115 	stw	r19,4(sp)
  80ae68:	dcc01c15 	stw	r19,112(sp)
  80ae6c:	d8c01b15 	stw	r3,108(sp)
  80ae70:	d811883a 	mov	r8,sp
  80ae74:	42000204 	addi	r8,r8,8
  80ae78:	a2c0010c 	andi	r11,r20,4
  80ae7c:	583fe426 	beq	r11,zero,80ae10 <__alt_mem_onchip_mem+0xff802e10>
  80ae80:	8ca7c83a 	sub	r19,r17,r18
  80ae84:	04ffe20e 	bge	zero,r19,80ae10 <__alt_mem_onchip_mem+0xff802e10>
  80ae88:	01c00404 	movi	r7,16
  80ae8c:	3cffcc0e 	bge	r7,r19,80adc0 <__alt_mem_onchip_mem+0xff802dc0>
  80ae90:	02802074 	movhi	r10,129
  80ae94:	528d0104 	addi	r10,r10,13316
  80ae98:	d9001b17 	ldw	r4,108(sp)
  80ae9c:	da802415 	stw	r10,144(sp)
  80aea0:	382b883a 	mov	r21,r7
  80aea4:	050001c4 	movi	r20,7
  80aea8:	df002017 	ldw	fp,128(sp)
  80aeac:	00000506 	br	80aec4 <___vfiprintf_internal_r+0xdd8>
  80aeb0:	21400084 	addi	r5,r4,2
  80aeb4:	42000204 	addi	r8,r8,8
  80aeb8:	1809883a 	mov	r4,r3
  80aebc:	9cfffc04 	addi	r19,r19,-16
  80aec0:	acffc40e 	bge	r21,r19,80add4 <__alt_mem_onchip_mem+0xff802dd4>
  80aec4:	10800404 	addi	r2,r2,16
  80aec8:	20c00044 	addi	r3,r4,1
  80aecc:	45800015 	stw	r22,0(r8)
  80aed0:	45400115 	stw	r21,4(r8)
  80aed4:	d8801c15 	stw	r2,112(sp)
  80aed8:	d8c01b15 	stw	r3,108(sp)
  80aedc:	a0fff40e 	bge	r20,r3,80aeb0 <__alt_mem_onchip_mem+0xff802eb0>
  80aee0:	1000041e 	bne	r2,zero,80aef4 <___vfiprintf_internal_r+0xe08>
  80aee4:	01400044 	movi	r5,1
  80aee8:	0009883a 	mov	r4,zero
  80aeec:	d811883a 	mov	r8,sp
  80aef0:	003ff206 	br	80aebc <__alt_mem_onchip_mem+0xff802ebc>
  80aef4:	d9402117 	ldw	r5,132(sp)
  80aef8:	d9801a04 	addi	r6,sp,104
  80aefc:	e009883a 	mov	r4,fp
  80af00:	0809fd80 	call	809fd8 <__sprint_r.part.0>
  80af04:	103fcd1e 	bne	r2,zero,80ae3c <__alt_mem_onchip_mem+0xff802e3c>
  80af08:	d9001b17 	ldw	r4,108(sp)
  80af0c:	d8801c17 	ldw	r2,112(sp)
  80af10:	d811883a 	mov	r8,sp
  80af14:	21400044 	addi	r5,r4,1
  80af18:	003fe806 	br	80aebc <__alt_mem_onchip_mem+0xff802ebc>
  80af1c:	d9402117 	ldw	r5,132(sp)
  80af20:	d9002017 	ldw	r4,128(sp)
  80af24:	d9801a04 	addi	r6,sp,104
  80af28:	d9c02b15 	stw	r7,172(sp)
  80af2c:	db402a15 	stw	r13,168(sp)
  80af30:	0809fd80 	call	809fd8 <__sprint_r.part.0>
  80af34:	d9c02b17 	ldw	r7,172(sp)
  80af38:	db402a17 	ldw	r13,168(sp)
  80af3c:	103fbf1e 	bne	r2,zero,80ae3c <__alt_mem_onchip_mem+0xff802e3c>
  80af40:	d9401b17 	ldw	r5,108(sp)
  80af44:	d8801c17 	ldw	r2,112(sp)
  80af48:	d811883a 	mov	r8,sp
  80af4c:	29800044 	addi	r6,r5,1
  80af50:	003dc406 	br	80a664 <__alt_mem_onchip_mem+0xff802664>
  80af54:	1000d21e 	bne	r2,zero,80b2a0 <___vfiprintf_internal_r+0x11b4>
  80af58:	d8c01d87 	ldb	r3,118(sp)
  80af5c:	18009526 	beq	r3,zero,80b1b4 <___vfiprintf_internal_r+0x10c8>
  80af60:	00800044 	movi	r2,1
  80af64:	d8c01d84 	addi	r3,sp,118
  80af68:	1009883a 	mov	r4,r2
  80af6c:	d8c00015 	stw	r3,0(sp)
  80af70:	d8800115 	stw	r2,4(sp)
  80af74:	d811883a 	mov	r8,sp
  80af78:	200b883a 	mov	r5,r4
  80af7c:	42000204 	addi	r8,r8,8
  80af80:	21000044 	addi	r4,r4,1
  80af84:	003d9706 	br	80a5e4 <__alt_mem_onchip_mem+0xff8025e4>
  80af88:	d9001d04 	addi	r4,sp,116
  80af8c:	00800084 	movi	r2,2
  80af90:	d9000015 	stw	r4,0(sp)
  80af94:	d8800115 	stw	r2,4(sp)
  80af98:	1809883a 	mov	r4,r3
  80af9c:	d811883a 	mov	r8,sp
  80afa0:	200b883a 	mov	r5,r4
  80afa4:	42000204 	addi	r8,r8,8
  80afa8:	21000044 	addi	r4,r4,1
  80afac:	003f4e06 	br	80ace8 <__alt_mem_onchip_mem+0xff802ce8>
  80afb0:	d8001d85 	stb	zero,118(sp)
  80afb4:	48005016 	blt	r9,zero,80b0f8 <___vfiprintf_internal_r+0x100c>
  80afb8:	00ffdfc4 	movi	r3,-129
  80afbc:	94c4b03a 	or	r2,r18,r19
  80afc0:	a0e8703a 	and	r20,r20,r3
  80afc4:	103d4426 	beq	r2,zero,80a4d8 <__alt_mem_onchip_mem+0xff8024d8>
  80afc8:	0039883a 	mov	fp,zero
  80afcc:	d9002617 	ldw	r4,152(sp)
  80afd0:	dd401a04 	addi	r21,sp,104
  80afd4:	908003cc 	andi	r2,r18,15
  80afd8:	9806973a 	slli	r3,r19,28
  80afdc:	2085883a 	add	r2,r4,r2
  80afe0:	9024d13a 	srli	r18,r18,4
  80afe4:	10800003 	ldbu	r2,0(r2)
  80afe8:	9826d13a 	srli	r19,r19,4
  80afec:	ad7fffc4 	addi	r21,r21,-1
  80aff0:	1ca4b03a 	or	r18,r3,r18
  80aff4:	a8800005 	stb	r2,0(r21)
  80aff8:	94c4b03a 	or	r2,r18,r19
  80affc:	103ff51e 	bne	r2,zero,80afd4 <__alt_mem_onchip_mem+0xff802fd4>
  80b000:	003e5906 	br	80a968 <__alt_mem_onchip_mem+0xff802968>
  80b004:	d9402117 	ldw	r5,132(sp)
  80b008:	d9002017 	ldw	r4,128(sp)
  80b00c:	d9801a04 	addi	r6,sp,104
  80b010:	0809fd80 	call	809fd8 <__sprint_r.part.0>
  80b014:	103f891e 	bne	r2,zero,80ae3c <__alt_mem_onchip_mem+0xff802e3c>
  80b018:	d8801c17 	ldw	r2,112(sp)
  80b01c:	d811883a 	mov	r8,sp
  80b020:	003f9506 	br	80ae78 <__alt_mem_onchip_mem+0xff802e78>
  80b024:	d9402117 	ldw	r5,132(sp)
  80b028:	d9002017 	ldw	r4,128(sp)
  80b02c:	d9801a04 	addi	r6,sp,104
  80b030:	0809fd80 	call	809fd8 <__sprint_r.part.0>
  80b034:	103f811e 	bne	r2,zero,80ae3c <__alt_mem_onchip_mem+0xff802e3c>
  80b038:	d811883a 	mov	r8,sp
  80b03c:	003ced06 	br	80a3f4 <__alt_mem_onchip_mem+0xff8023f4>
  80b040:	d9402117 	ldw	r5,132(sp)
  80b044:	d9002017 	ldw	r4,128(sp)
  80b048:	d9801a04 	addi	r6,sp,104
  80b04c:	da402c15 	stw	r9,176(sp)
  80b050:	db802a15 	stw	r14,168(sp)
  80b054:	0809fd80 	call	809fd8 <__sprint_r.part.0>
  80b058:	da402c17 	ldw	r9,176(sp)
  80b05c:	db802a17 	ldw	r14,168(sp)
  80b060:	103f761e 	bne	r2,zero,80ae3c <__alt_mem_onchip_mem+0xff802e3c>
  80b064:	d9401b17 	ldw	r5,108(sp)
  80b068:	d8801c17 	ldw	r2,112(sp)
  80b06c:	d811883a 	mov	r8,sp
  80b070:	29000044 	addi	r4,r5,1
  80b074:	003d5b06 	br	80a5e4 <__alt_mem_onchip_mem+0xff8025e4>
  80b078:	d9402117 	ldw	r5,132(sp)
  80b07c:	d9002017 	ldw	r4,128(sp)
  80b080:	d9801a04 	addi	r6,sp,104
  80b084:	da402c15 	stw	r9,176(sp)
  80b088:	0809fd80 	call	809fd8 <__sprint_r.part.0>
  80b08c:	da402c17 	ldw	r9,176(sp)
  80b090:	103f6a1e 	bne	r2,zero,80ae3c <__alt_mem_onchip_mem+0xff802e3c>
  80b094:	d9401b17 	ldw	r5,108(sp)
  80b098:	d8801c17 	ldw	r2,112(sp)
  80b09c:	d811883a 	mov	r8,sp
  80b0a0:	29000044 	addi	r4,r5,1
  80b0a4:	003f1006 	br	80ace8 <__alt_mem_onchip_mem+0xff802ce8>
  80b0a8:	1000c31e 	bne	r2,zero,80b3b8 <___vfiprintf_internal_r+0x12cc>
  80b0ac:	01000044 	movi	r4,1
  80b0b0:	000b883a 	mov	r5,zero
  80b0b4:	d811883a 	mov	r8,sp
  80b0b8:	003f0d06 	br	80acf0 <__alt_mem_onchip_mem+0xff802cf0>
  80b0bc:	d9402117 	ldw	r5,132(sp)
  80b0c0:	d9002017 	ldw	r4,128(sp)
  80b0c4:	d9801a04 	addi	r6,sp,104
  80b0c8:	0809fd80 	call	809fd8 <__sprint_r.part.0>
  80b0cc:	103f5b1e 	bne	r2,zero,80ae3c <__alt_mem_onchip_mem+0xff802e3c>
  80b0d0:	d9001b17 	ldw	r4,108(sp)
  80b0d4:	d8801c17 	ldw	r2,112(sp)
  80b0d8:	d811883a 	mov	r8,sp
  80b0dc:	21000044 	addi	r4,r4,1
  80b0e0:	003d8006 	br	80a6e4 <__alt_mem_onchip_mem+0xff8026e4>
  80b0e4:	01002074 	movhi	r4,129
  80b0e8:	210bfd04 	addi	r4,r4,12276
  80b0ec:	d9002615 	stw	r4,152(sp)
  80b0f0:	d8c02215 	stw	r3,136(sp)
  80b0f4:	1029883a 	mov	r20,r2
  80b0f8:	94c4b03a 	or	r2,r18,r19
  80b0fc:	103fb21e 	bne	r2,zero,80afc8 <__alt_mem_onchip_mem+0xff802fc8>
  80b100:	0039883a 	mov	fp,zero
  80b104:	00800084 	movi	r2,2
  80b108:	003e6b06 	br	80aab8 <__alt_mem_onchip_mem+0xff802ab8>
  80b10c:	da802217 	ldw	r10,136(sp)
  80b110:	d8001d85 	stb	zero,118(sp)
  80b114:	0027883a 	mov	r19,zero
  80b118:	50800104 	addi	r2,r10,4
  80b11c:	54800017 	ldw	r18,0(r10)
  80b120:	483e6016 	blt	r9,zero,80aaa4 <__alt_mem_onchip_mem+0xff802aa4>
  80b124:	00ffdfc4 	movi	r3,-129
  80b128:	d8802215 	stw	r2,136(sp)
  80b12c:	a0e8703a 	and	r20,r20,r3
  80b130:	0039883a 	mov	fp,zero
  80b134:	903ebb26 	beq	r18,zero,80ac24 <__alt_mem_onchip_mem+0xff802c24>
  80b138:	00800244 	movi	r2,9
  80b13c:	14bdee36 	bltu	r2,r18,80a8f8 <__alt_mem_onchip_mem+0xff8028f8>
  80b140:	003eba06 	br	80ac2c <__alt_mem_onchip_mem+0xff802c2c>
  80b144:	00800c04 	movi	r2,48
  80b148:	d8c01d45 	stb	r3,117(sp)
  80b14c:	d8801d05 	stb	r2,116(sp)
  80b150:	d8001d85 	stb	zero,118(sp)
  80b154:	a0c00094 	ori	r3,r20,2
  80b158:	4800a916 	blt	r9,zero,80b400 <___vfiprintf_internal_r+0x1314>
  80b15c:	00bfdfc4 	movi	r2,-129
  80b160:	a096703a 	and	r11,r20,r2
  80b164:	5d000094 	ori	r20,r11,2
  80b168:	0039883a 	mov	fp,zero
  80b16c:	003f9706 	br	80afcc <__alt_mem_onchip_mem+0xff802fcc>
  80b170:	8025883a 	mov	r18,r16
  80b174:	003c2e06 	br	80a230 <__alt_mem_onchip_mem+0xff802230>
  80b178:	00802074 	movhi	r2,129
  80b17c:	108bfd04 	addi	r2,r2,12276
  80b180:	0039883a 	mov	fp,zero
  80b184:	d8802615 	stw	r2,152(sp)
  80b188:	003f9006 	br	80afcc <__alt_mem_onchip_mem+0xff802fcc>
  80b18c:	04a5c83a 	sub	r18,zero,r18
  80b190:	07000b44 	movi	fp,45
  80b194:	9004c03a 	cmpne	r2,r18,zero
  80b198:	04e7c83a 	sub	r19,zero,r19
  80b19c:	df001d85 	stb	fp,118(sp)
  80b1a0:	98a7c83a 	sub	r19,r19,r2
  80b1a4:	48009f16 	blt	r9,zero,80b424 <___vfiprintf_internal_r+0x1338>
  80b1a8:	00bfdfc4 	movi	r2,-129
  80b1ac:	a0a8703a 	and	r20,r20,r2
  80b1b0:	003dd006 	br	80a8f4 <__alt_mem_onchip_mem+0xff8028f4>
  80b1b4:	70004c26 	beq	r14,zero,80b2e8 <___vfiprintf_internal_r+0x11fc>
  80b1b8:	00800084 	movi	r2,2
  80b1bc:	d8c01d04 	addi	r3,sp,116
  80b1c0:	d8c00015 	stw	r3,0(sp)
  80b1c4:	d8800115 	stw	r2,4(sp)
  80b1c8:	01000044 	movi	r4,1
  80b1cc:	d811883a 	mov	r8,sp
  80b1d0:	003f7306 	br	80afa0 <__alt_mem_onchip_mem+0xff802fa0>
  80b1d4:	a080100c 	andi	r2,r20,64
  80b1d8:	da802217 	ldw	r10,136(sp)
  80b1dc:	103e0626 	beq	r2,zero,80a9f8 <__alt_mem_onchip_mem+0xff8029f8>
  80b1e0:	5480000f 	ldh	r18,0(r10)
  80b1e4:	52800104 	addi	r10,r10,4
  80b1e8:	da802215 	stw	r10,136(sp)
  80b1ec:	9027d7fa 	srai	r19,r18,31
  80b1f0:	9805883a 	mov	r2,r19
  80b1f4:	003db806 	br	80a8d8 <__alt_mem_onchip_mem+0xff8028d8>
  80b1f8:	a080040c 	andi	r2,r20,16
  80b1fc:	1000091e 	bne	r2,zero,80b224 <___vfiprintf_internal_r+0x1138>
  80b200:	a2c0100c 	andi	r11,r20,64
  80b204:	58000726 	beq	r11,zero,80b224 <___vfiprintf_internal_r+0x1138>
  80b208:	da802217 	ldw	r10,136(sp)
  80b20c:	50800017 	ldw	r2,0(r10)
  80b210:	52800104 	addi	r10,r10,4
  80b214:	da802215 	stw	r10,136(sp)
  80b218:	da802317 	ldw	r10,140(sp)
  80b21c:	1280000d 	sth	r10,0(r2)
  80b220:	003be706 	br	80a1c0 <__alt_mem_onchip_mem+0xff8021c0>
  80b224:	da802217 	ldw	r10,136(sp)
  80b228:	50800017 	ldw	r2,0(r10)
  80b22c:	52800104 	addi	r10,r10,4
  80b230:	da802215 	stw	r10,136(sp)
  80b234:	da802317 	ldw	r10,140(sp)
  80b238:	12800015 	stw	r10,0(r2)
  80b23c:	003be006 	br	80a1c0 <__alt_mem_onchip_mem+0xff8021c0>
  80b240:	a080100c 	andi	r2,r20,64
  80b244:	da802217 	ldw	r10,136(sp)
  80b248:	10003026 	beq	r2,zero,80b30c <___vfiprintf_internal_r+0x1220>
  80b24c:	5480000b 	ldhu	r18,0(r10)
  80b250:	52800104 	addi	r10,r10,4
  80b254:	0027883a 	mov	r19,zero
  80b258:	da802215 	stw	r10,136(sp)
  80b25c:	003d8006 	br	80a860 <__alt_mem_onchip_mem+0xff802860>
  80b260:	80c00007 	ldb	r3,0(r16)
  80b264:	003c0006 	br	80a268 <__alt_mem_onchip_mem+0xff802268>
  80b268:	a080100c 	andi	r2,r20,64
  80b26c:	d8001d85 	stb	zero,118(sp)
  80b270:	da802217 	ldw	r10,136(sp)
  80b274:	1000201e 	bne	r2,zero,80b2f8 <___vfiprintf_internal_r+0x120c>
  80b278:	50800104 	addi	r2,r10,4
  80b27c:	54800017 	ldw	r18,0(r10)
  80b280:	0027883a 	mov	r19,zero
  80b284:	483def0e 	bge	r9,zero,80aa44 <__alt_mem_onchip_mem+0xff802a44>
  80b288:	94c6b03a 	or	r3,r18,r19
  80b28c:	d8802215 	stw	r2,136(sp)
  80b290:	183d4e1e 	bne	r3,zero,80a7cc <__alt_mem_onchip_mem+0xff8027cc>
  80b294:	0039883a 	mov	fp,zero
  80b298:	0005883a 	mov	r2,zero
  80b29c:	003e0606 	br	80aab8 <__alt_mem_onchip_mem+0xff802ab8>
  80b2a0:	d9402117 	ldw	r5,132(sp)
  80b2a4:	d9002017 	ldw	r4,128(sp)
  80b2a8:	d9801a04 	addi	r6,sp,104
  80b2ac:	da402c15 	stw	r9,176(sp)
  80b2b0:	db802a15 	stw	r14,168(sp)
  80b2b4:	0809fd80 	call	809fd8 <__sprint_r.part.0>
  80b2b8:	da402c17 	ldw	r9,176(sp)
  80b2bc:	db802a17 	ldw	r14,168(sp)
  80b2c0:	103ede1e 	bne	r2,zero,80ae3c <__alt_mem_onchip_mem+0xff802e3c>
  80b2c4:	d9401b17 	ldw	r5,108(sp)
  80b2c8:	d8801c17 	ldw	r2,112(sp)
  80b2cc:	d811883a 	mov	r8,sp
  80b2d0:	29000044 	addi	r4,r5,1
  80b2d4:	003e7406 	br	80aca8 <__alt_mem_onchip_mem+0xff802ca8>
  80b2d8:	00bfffc4 	movi	r2,-1
  80b2dc:	003c5806 	br	80a440 <__alt_mem_onchip_mem+0xff802440>
  80b2e0:	d811883a 	mov	r8,sp
  80b2e4:	003ee806 	br	80ae88 <__alt_mem_onchip_mem+0xff802e88>
  80b2e8:	000b883a 	mov	r5,zero
  80b2ec:	01000044 	movi	r4,1
  80b2f0:	d811883a 	mov	r8,sp
  80b2f4:	003e7c06 	br	80ace8 <__alt_mem_onchip_mem+0xff802ce8>
  80b2f8:	50800104 	addi	r2,r10,4
  80b2fc:	5480000b 	ldhu	r18,0(r10)
  80b300:	0027883a 	mov	r19,zero
  80b304:	483dcf0e 	bge	r9,zero,80aa44 <__alt_mem_onchip_mem+0xff802a44>
  80b308:	003fdf06 	br	80b288 <__alt_mem_onchip_mem+0xff803288>
  80b30c:	54800017 	ldw	r18,0(r10)
  80b310:	52800104 	addi	r10,r10,4
  80b314:	0027883a 	mov	r19,zero
  80b318:	da802215 	stw	r10,136(sp)
  80b31c:	003d5006 	br	80a860 <__alt_mem_onchip_mem+0xff802860>
  80b320:	50800104 	addi	r2,r10,4
  80b324:	5480000b 	ldhu	r18,0(r10)
  80b328:	0027883a 	mov	r19,zero
  80b32c:	483f7d0e 	bge	r9,zero,80b124 <__alt_mem_onchip_mem+0xff803124>
  80b330:	003ddc06 	br	80aaa4 <__alt_mem_onchip_mem+0xff802aa4>
  80b334:	d8c02215 	stw	r3,136(sp)
  80b338:	0039883a 	mov	fp,zero
  80b33c:	003ddb06 	br	80aaac <__alt_mem_onchip_mem+0xff802aac>
  80b340:	02802074 	movhi	r10,129
  80b344:	528cfd04 	addi	r10,r10,13300
  80b348:	da802415 	stw	r10,144(sp)
  80b34c:	003e8306 	br	80ad5c <__alt_mem_onchip_mem+0xff802d5c>
  80b350:	d8801c17 	ldw	r2,112(sp)
  80b354:	dd002117 	ldw	r20,132(sp)
  80b358:	103eb926 	beq	r2,zero,80ae40 <__alt_mem_onchip_mem+0xff802e40>
  80b35c:	d9002017 	ldw	r4,128(sp)
  80b360:	d9801a04 	addi	r6,sp,104
  80b364:	a00b883a 	mov	r5,r20
  80b368:	0809fd80 	call	809fd8 <__sprint_r.part.0>
  80b36c:	003eb406 	br	80ae40 <__alt_mem_onchip_mem+0xff802e40>
  80b370:	80c00043 	ldbu	r3,1(r16)
  80b374:	a5000814 	ori	r20,r20,32
  80b378:	84000044 	addi	r16,r16,1
  80b37c:	18c03fcc 	andi	r3,r3,255
  80b380:	18c0201c 	xori	r3,r3,128
  80b384:	18ffe004 	addi	r3,r3,-128
  80b388:	003bb706 	br	80a268 <__alt_mem_onchip_mem+0xff802268>
  80b38c:	a809883a 	mov	r4,r21
  80b390:	d8c02a15 	stw	r3,168(sp)
  80b394:	da002b15 	stw	r8,172(sp)
  80b398:	0809f400 	call	809f40 <strlen>
  80b39c:	d8c02a17 	ldw	r3,168(sp)
  80b3a0:	1027883a 	mov	r19,r2
  80b3a4:	df001d83 	ldbu	fp,118(sp)
  80b3a8:	d8c02215 	stw	r3,136(sp)
  80b3ac:	0013883a 	mov	r9,zero
  80b3b0:	da002b17 	ldw	r8,172(sp)
  80b3b4:	003c4d06 	br	80a4ec <__alt_mem_onchip_mem+0xff8024ec>
  80b3b8:	d9402117 	ldw	r5,132(sp)
  80b3bc:	d9002017 	ldw	r4,128(sp)
  80b3c0:	d9801a04 	addi	r6,sp,104
  80b3c4:	da402c15 	stw	r9,176(sp)
  80b3c8:	0809fd80 	call	809fd8 <__sprint_r.part.0>
  80b3cc:	da402c17 	ldw	r9,176(sp)
  80b3d0:	103e9a1e 	bne	r2,zero,80ae3c <__alt_mem_onchip_mem+0xff802e3c>
  80b3d4:	d9401b17 	ldw	r5,108(sp)
  80b3d8:	d8801c17 	ldw	r2,112(sp)
  80b3dc:	d811883a 	mov	r8,sp
  80b3e0:	29000044 	addi	r4,r5,1
  80b3e4:	003e4206 	br	80acf0 <__alt_mem_onchip_mem+0xff802cf0>
  80b3e8:	d9401b17 	ldw	r5,108(sp)
  80b3ec:	01002074 	movhi	r4,129
  80b3f0:	210d0104 	addi	r4,r4,13316
  80b3f4:	d9002415 	stw	r4,144(sp)
  80b3f8:	29400044 	addi	r5,r5,1
  80b3fc:	003c6d06 	br	80a5b4 <__alt_mem_onchip_mem+0xff8025b4>
  80b400:	0039883a 	mov	fp,zero
  80b404:	00800084 	movi	r2,2
  80b408:	10803fcc 	andi	r2,r2,255
  80b40c:	01000044 	movi	r4,1
  80b410:	11001e26 	beq	r2,r4,80b48c <___vfiprintf_internal_r+0x13a0>
  80b414:	01000084 	movi	r4,2
  80b418:	11001e1e 	bne	r2,r4,80b494 <___vfiprintf_internal_r+0x13a8>
  80b41c:	1829883a 	mov	r20,r3
  80b420:	003eea06 	br	80afcc <__alt_mem_onchip_mem+0xff802fcc>
  80b424:	a007883a 	mov	r3,r20
  80b428:	00800044 	movi	r2,1
  80b42c:	003ff606 	br	80b408 <__alt_mem_onchip_mem+0xff803408>
  80b430:	00800184 	movi	r2,6
  80b434:	1240012e 	bgeu	r2,r9,80b43c <___vfiprintf_internal_r+0x1350>
  80b438:	1013883a 	mov	r9,r2
  80b43c:	4827883a 	mov	r19,r9
  80b440:	4825883a 	mov	r18,r9
  80b444:	48001516 	blt	r9,zero,80b49c <___vfiprintf_internal_r+0x13b0>
  80b448:	05402074 	movhi	r21,129
  80b44c:	d8c02215 	stw	r3,136(sp)
  80b450:	ad4c0204 	addi	r21,r21,12296
  80b454:	003d1406 	br	80a8a8 <__alt_mem_onchip_mem+0xff8028a8>
  80b458:	02802074 	movhi	r10,129
  80b45c:	528cfd04 	addi	r10,r10,13300
  80b460:	da802415 	stw	r10,144(sp)
  80b464:	200d883a 	mov	r6,r4
  80b468:	003c9106 	br	80a6b0 <__alt_mem_onchip_mem+0xff8026b0>
  80b46c:	5021883a 	mov	r16,r10
  80b470:	0013883a 	mov	r9,zero
  80b474:	003b7d06 	br	80a26c <__alt_mem_onchip_mem+0xff80226c>
  80b478:	4827883a 	mov	r19,r9
  80b47c:	df001d83 	ldbu	fp,118(sp)
  80b480:	d8c02215 	stw	r3,136(sp)
  80b484:	0013883a 	mov	r9,zero
  80b488:	003c1806 	br	80a4ec <__alt_mem_onchip_mem+0xff8024ec>
  80b48c:	1829883a 	mov	r20,r3
  80b490:	003d1806 	br	80a8f4 <__alt_mem_onchip_mem+0xff8028f4>
  80b494:	1829883a 	mov	r20,r3
  80b498:	003ccd06 	br	80a7d0 <__alt_mem_onchip_mem+0xff8027d0>
  80b49c:	0025883a 	mov	r18,zero
  80b4a0:	003fe906 	br	80b448 <__alt_mem_onchip_mem+0xff803448>
  80b4a4:	d8802217 	ldw	r2,136(sp)
  80b4a8:	80c00043 	ldbu	r3,1(r16)
  80b4ac:	5021883a 	mov	r16,r10
  80b4b0:	12400017 	ldw	r9,0(r2)
  80b4b4:	10800104 	addi	r2,r2,4
  80b4b8:	d8802215 	stw	r2,136(sp)
  80b4bc:	483faf0e 	bge	r9,zero,80b37c <__alt_mem_onchip_mem+0xff80337c>
  80b4c0:	18c03fcc 	andi	r3,r3,255
  80b4c4:	18c0201c 	xori	r3,r3,128
  80b4c8:	027fffc4 	movi	r9,-1
  80b4cc:	18ffe004 	addi	r3,r3,-128
  80b4d0:	003b6506 	br	80a268 <__alt_mem_onchip_mem+0xff802268>
  80b4d4:	d9c01d85 	stb	r7,118(sp)
  80b4d8:	003ca006 	br	80a75c <__alt_mem_onchip_mem+0xff80275c>
  80b4dc:	d9c01d85 	stb	r7,118(sp)
  80b4e0:	003cad06 	br	80a798 <__alt_mem_onchip_mem+0xff802798>
  80b4e4:	d9c01d85 	stb	r7,118(sp)
  80b4e8:	003d7d06 	br	80aae0 <__alt_mem_onchip_mem+0xff802ae0>
  80b4ec:	d9c01d85 	stb	r7,118(sp)
  80b4f0:	003d5f06 	br	80aa70 <__alt_mem_onchip_mem+0xff802a70>
  80b4f4:	a080004c 	andi	r2,r20,1
  80b4f8:	0039883a 	mov	fp,zero
  80b4fc:	10000526 	beq	r2,zero,80b514 <___vfiprintf_internal_r+0x1428>
  80b500:	00800c04 	movi	r2,48
  80b504:	d88019c5 	stb	r2,103(sp)
  80b508:	dcc02717 	ldw	r19,156(sp)
  80b50c:	dd4019c4 	addi	r21,sp,103
  80b510:	003bf606 	br	80a4ec <__alt_mem_onchip_mem+0xff8024ec>
  80b514:	0027883a 	mov	r19,zero
  80b518:	dd401a04 	addi	r21,sp,104
  80b51c:	003bf306 	br	80a4ec <__alt_mem_onchip_mem+0xff8024ec>
  80b520:	d9c01d85 	stb	r7,118(sp)
  80b524:	003dc806 	br	80ac48 <__alt_mem_onchip_mem+0xff802c48>
  80b528:	d9c01d85 	stb	r7,118(sp)
  80b52c:	003d3a06 	br	80aa18 <__alt_mem_onchip_mem+0xff802a18>
  80b530:	d9c01d85 	stb	r7,118(sp)
  80b534:	003d2a06 	br	80a9e0 <__alt_mem_onchip_mem+0xff8029e0>
  80b538:	d9c01d85 	stb	r7,118(sp)
  80b53c:	003cde06 	br	80a8b8 <__alt_mem_onchip_mem+0xff8028b8>
  80b540:	d9c01d85 	stb	r7,118(sp)
  80b544:	003cbc06 	br	80a838 <__alt_mem_onchip_mem+0xff802838>

0080b548 <__vfiprintf_internal>:
  80b548:	00802074 	movhi	r2,129
  80b54c:	10948104 	addi	r2,r2,20996
  80b550:	300f883a 	mov	r7,r6
  80b554:	280d883a 	mov	r6,r5
  80b558:	200b883a 	mov	r5,r4
  80b55c:	11000017 	ldw	r4,0(r2)
  80b560:	080a0ec1 	jmpi	80a0ec <___vfiprintf_internal_r>

0080b564 <__sbprintf>:
  80b564:	2880030b 	ldhu	r2,12(r5)
  80b568:	2ac01917 	ldw	r11,100(r5)
  80b56c:	2a80038b 	ldhu	r10,14(r5)
  80b570:	2a400717 	ldw	r9,28(r5)
  80b574:	2a000917 	ldw	r8,36(r5)
  80b578:	defee204 	addi	sp,sp,-1144
  80b57c:	00c10004 	movi	r3,1024
  80b580:	dc011a15 	stw	r16,1128(sp)
  80b584:	10bfff4c 	andi	r2,r2,65533
  80b588:	2821883a 	mov	r16,r5
  80b58c:	d8cb883a 	add	r5,sp,r3
  80b590:	dc811c15 	stw	r18,1136(sp)
  80b594:	dc411b15 	stw	r17,1132(sp)
  80b598:	dfc11d15 	stw	ra,1140(sp)
  80b59c:	2025883a 	mov	r18,r4
  80b5a0:	d881030d 	sth	r2,1036(sp)
  80b5a4:	dac11915 	stw	r11,1124(sp)
  80b5a8:	da81038d 	sth	r10,1038(sp)
  80b5ac:	da410715 	stw	r9,1052(sp)
  80b5b0:	da010915 	stw	r8,1060(sp)
  80b5b4:	dec10015 	stw	sp,1024(sp)
  80b5b8:	dec10415 	stw	sp,1040(sp)
  80b5bc:	d8c10215 	stw	r3,1032(sp)
  80b5c0:	d8c10515 	stw	r3,1044(sp)
  80b5c4:	d8010615 	stw	zero,1048(sp)
  80b5c8:	080a0ec0 	call	80a0ec <___vfiprintf_internal_r>
  80b5cc:	1023883a 	mov	r17,r2
  80b5d0:	10000416 	blt	r2,zero,80b5e4 <__sbprintf+0x80>
  80b5d4:	d9410004 	addi	r5,sp,1024
  80b5d8:	9009883a 	mov	r4,r18
  80b5dc:	08078f00 	call	8078f0 <_fflush_r>
  80b5e0:	10000d1e 	bne	r2,zero,80b618 <__sbprintf+0xb4>
  80b5e4:	d881030b 	ldhu	r2,1036(sp)
  80b5e8:	1080100c 	andi	r2,r2,64
  80b5ec:	10000326 	beq	r2,zero,80b5fc <__sbprintf+0x98>
  80b5f0:	8080030b 	ldhu	r2,12(r16)
  80b5f4:	10801014 	ori	r2,r2,64
  80b5f8:	8080030d 	sth	r2,12(r16)
  80b5fc:	8805883a 	mov	r2,r17
  80b600:	dfc11d17 	ldw	ra,1140(sp)
  80b604:	dc811c17 	ldw	r18,1136(sp)
  80b608:	dc411b17 	ldw	r17,1132(sp)
  80b60c:	dc011a17 	ldw	r16,1128(sp)
  80b610:	dec11e04 	addi	sp,sp,1144
  80b614:	f800283a 	ret
  80b618:	047fffc4 	movi	r17,-1
  80b61c:	003ff106 	br	80b5e4 <__alt_mem_onchip_mem+0xff8035e4>

0080b620 <_calloc_r>:
  80b620:	298b383a 	mul	r5,r5,r6
  80b624:	defffe04 	addi	sp,sp,-8
  80b628:	dfc00115 	stw	ra,4(sp)
  80b62c:	dc000015 	stw	r16,0(sp)
  80b630:	08025540 	call	802554 <_malloc_r>
  80b634:	10002926 	beq	r2,zero,80b6dc <_calloc_r+0xbc>
  80b638:	11bfff17 	ldw	r6,-4(r2)
  80b63c:	1021883a 	mov	r16,r2
  80b640:	00bfff04 	movi	r2,-4
  80b644:	308c703a 	and	r6,r6,r2
  80b648:	00c00904 	movi	r3,36
  80b64c:	308d883a 	add	r6,r6,r2
  80b650:	19801636 	bltu	r3,r6,80b6ac <_calloc_r+0x8c>
  80b654:	008004c4 	movi	r2,19
  80b658:	11800b2e 	bgeu	r2,r6,80b688 <_calloc_r+0x68>
  80b65c:	80000015 	stw	zero,0(r16)
  80b660:	80000115 	stw	zero,4(r16)
  80b664:	008006c4 	movi	r2,27
  80b668:	11801a2e 	bgeu	r2,r6,80b6d4 <_calloc_r+0xb4>
  80b66c:	80000215 	stw	zero,8(r16)
  80b670:	80000315 	stw	zero,12(r16)
  80b674:	30c0151e 	bne	r6,r3,80b6cc <_calloc_r+0xac>
  80b678:	80000415 	stw	zero,16(r16)
  80b67c:	80800604 	addi	r2,r16,24
  80b680:	80000515 	stw	zero,20(r16)
  80b684:	00000106 	br	80b68c <_calloc_r+0x6c>
  80b688:	8005883a 	mov	r2,r16
  80b68c:	10000015 	stw	zero,0(r2)
  80b690:	10000115 	stw	zero,4(r2)
  80b694:	10000215 	stw	zero,8(r2)
  80b698:	8005883a 	mov	r2,r16
  80b69c:	dfc00117 	ldw	ra,4(sp)
  80b6a0:	dc000017 	ldw	r16,0(sp)
  80b6a4:	dec00204 	addi	sp,sp,8
  80b6a8:	f800283a 	ret
  80b6ac:	000b883a 	mov	r5,zero
  80b6b0:	8009883a 	mov	r4,r16
  80b6b4:	0802d600 	call	802d60 <memset>
  80b6b8:	8005883a 	mov	r2,r16
  80b6bc:	dfc00117 	ldw	ra,4(sp)
  80b6c0:	dc000017 	ldw	r16,0(sp)
  80b6c4:	dec00204 	addi	sp,sp,8
  80b6c8:	f800283a 	ret
  80b6cc:	80800404 	addi	r2,r16,16
  80b6d0:	003fee06 	br	80b68c <__alt_mem_onchip_mem+0xff80368c>
  80b6d4:	80800204 	addi	r2,r16,8
  80b6d8:	003fec06 	br	80b68c <__alt_mem_onchip_mem+0xff80368c>
  80b6dc:	0005883a 	mov	r2,zero
  80b6e0:	003fee06 	br	80b69c <__alt_mem_onchip_mem+0xff80369c>

0080b6e4 <__fputwc>:
  80b6e4:	defff804 	addi	sp,sp,-32
  80b6e8:	dcc00415 	stw	r19,16(sp)
  80b6ec:	dc800315 	stw	r18,12(sp)
  80b6f0:	dc000115 	stw	r16,4(sp)
  80b6f4:	dfc00715 	stw	ra,28(sp)
  80b6f8:	dd400615 	stw	r21,24(sp)
  80b6fc:	dd000515 	stw	r20,20(sp)
  80b700:	dc400215 	stw	r17,8(sp)
  80b704:	2027883a 	mov	r19,r4
  80b708:	2825883a 	mov	r18,r5
  80b70c:	3021883a 	mov	r16,r6
  80b710:	08083f40 	call	8083f4 <__locale_mb_cur_max>
  80b714:	00c00044 	movi	r3,1
  80b718:	10c03e26 	beq	r2,r3,80b814 <__fputwc+0x130>
  80b71c:	81c01704 	addi	r7,r16,92
  80b720:	900d883a 	mov	r6,r18
  80b724:	d80b883a 	mov	r5,sp
  80b728:	9809883a 	mov	r4,r19
  80b72c:	080b8ec0 	call	80b8ec <_wcrtomb_r>
  80b730:	1029883a 	mov	r20,r2
  80b734:	00bfffc4 	movi	r2,-1
  80b738:	a0802026 	beq	r20,r2,80b7bc <__fputwc+0xd8>
  80b73c:	d9400003 	ldbu	r5,0(sp)
  80b740:	a0001c26 	beq	r20,zero,80b7b4 <__fputwc+0xd0>
  80b744:	0023883a 	mov	r17,zero
  80b748:	05400284 	movi	r21,10
  80b74c:	00000906 	br	80b774 <__fputwc+0x90>
  80b750:	80800017 	ldw	r2,0(r16)
  80b754:	11400005 	stb	r5,0(r2)
  80b758:	80c00017 	ldw	r3,0(r16)
  80b75c:	18c00044 	addi	r3,r3,1
  80b760:	80c00015 	stw	r3,0(r16)
  80b764:	8c400044 	addi	r17,r17,1
  80b768:	dc45883a 	add	r2,sp,r17
  80b76c:	8d00112e 	bgeu	r17,r20,80b7b4 <__fputwc+0xd0>
  80b770:	11400003 	ldbu	r5,0(r2)
  80b774:	80c00217 	ldw	r3,8(r16)
  80b778:	18ffffc4 	addi	r3,r3,-1
  80b77c:	80c00215 	stw	r3,8(r16)
  80b780:	183ff30e 	bge	r3,zero,80b750 <__alt_mem_onchip_mem+0xff803750>
  80b784:	80800617 	ldw	r2,24(r16)
  80b788:	18801916 	blt	r3,r2,80b7f0 <__fputwc+0x10c>
  80b78c:	80800017 	ldw	r2,0(r16)
  80b790:	11400005 	stb	r5,0(r2)
  80b794:	80800017 	ldw	r2,0(r16)
  80b798:	10c00003 	ldbu	r3,0(r2)
  80b79c:	10800044 	addi	r2,r2,1
  80b7a0:	1d402326 	beq	r3,r21,80b830 <__fputwc+0x14c>
  80b7a4:	80800015 	stw	r2,0(r16)
  80b7a8:	8c400044 	addi	r17,r17,1
  80b7ac:	dc45883a 	add	r2,sp,r17
  80b7b0:	8d3fef36 	bltu	r17,r20,80b770 <__alt_mem_onchip_mem+0xff803770>
  80b7b4:	9005883a 	mov	r2,r18
  80b7b8:	00000406 	br	80b7cc <__fputwc+0xe8>
  80b7bc:	80c0030b 	ldhu	r3,12(r16)
  80b7c0:	a005883a 	mov	r2,r20
  80b7c4:	18c01014 	ori	r3,r3,64
  80b7c8:	80c0030d 	sth	r3,12(r16)
  80b7cc:	dfc00717 	ldw	ra,28(sp)
  80b7d0:	dd400617 	ldw	r21,24(sp)
  80b7d4:	dd000517 	ldw	r20,20(sp)
  80b7d8:	dcc00417 	ldw	r19,16(sp)
  80b7dc:	dc800317 	ldw	r18,12(sp)
  80b7e0:	dc400217 	ldw	r17,8(sp)
  80b7e4:	dc000117 	ldw	r16,4(sp)
  80b7e8:	dec00804 	addi	sp,sp,32
  80b7ec:	f800283a 	ret
  80b7f0:	800d883a 	mov	r6,r16
  80b7f4:	29403fcc 	andi	r5,r5,255
  80b7f8:	9809883a 	mov	r4,r19
  80b7fc:	08059e80 	call	8059e8 <__swbuf_r>
  80b800:	10bfffe0 	cmpeqi	r2,r2,-1
  80b804:	10803fcc 	andi	r2,r2,255
  80b808:	103fd626 	beq	r2,zero,80b764 <__alt_mem_onchip_mem+0xff803764>
  80b80c:	00bfffc4 	movi	r2,-1
  80b810:	003fee06 	br	80b7cc <__alt_mem_onchip_mem+0xff8037cc>
  80b814:	90ffffc4 	addi	r3,r18,-1
  80b818:	01003f84 	movi	r4,254
  80b81c:	20ffbf36 	bltu	r4,r3,80b71c <__alt_mem_onchip_mem+0xff80371c>
  80b820:	900b883a 	mov	r5,r18
  80b824:	dc800005 	stb	r18,0(sp)
  80b828:	1029883a 	mov	r20,r2
  80b82c:	003fc506 	br	80b744 <__alt_mem_onchip_mem+0xff803744>
  80b830:	800d883a 	mov	r6,r16
  80b834:	a80b883a 	mov	r5,r21
  80b838:	9809883a 	mov	r4,r19
  80b83c:	08059e80 	call	8059e8 <__swbuf_r>
  80b840:	10bfffe0 	cmpeqi	r2,r2,-1
  80b844:	003fef06 	br	80b804 <__alt_mem_onchip_mem+0xff803804>

0080b848 <_fputwc_r>:
  80b848:	3080030b 	ldhu	r2,12(r6)
  80b84c:	10c8000c 	andi	r3,r2,8192
  80b850:	1800051e 	bne	r3,zero,80b868 <_fputwc_r+0x20>
  80b854:	30c01917 	ldw	r3,100(r6)
  80b858:	10880014 	ori	r2,r2,8192
  80b85c:	3080030d 	sth	r2,12(r6)
  80b860:	18880014 	ori	r2,r3,8192
  80b864:	30801915 	stw	r2,100(r6)
  80b868:	080b6e41 	jmpi	80b6e4 <__fputwc>

0080b86c <fputwc>:
  80b86c:	00802074 	movhi	r2,129
  80b870:	defffc04 	addi	sp,sp,-16
  80b874:	10948104 	addi	r2,r2,20996
  80b878:	dc000115 	stw	r16,4(sp)
  80b87c:	14000017 	ldw	r16,0(r2)
  80b880:	dc400215 	stw	r17,8(sp)
  80b884:	dfc00315 	stw	ra,12(sp)
  80b888:	2023883a 	mov	r17,r4
  80b88c:	80000226 	beq	r16,zero,80b898 <fputwc+0x2c>
  80b890:	80800e17 	ldw	r2,56(r16)
  80b894:	10001026 	beq	r2,zero,80b8d8 <fputwc+0x6c>
  80b898:	2880030b 	ldhu	r2,12(r5)
  80b89c:	10c8000c 	andi	r3,r2,8192
  80b8a0:	1800051e 	bne	r3,zero,80b8b8 <fputwc+0x4c>
  80b8a4:	28c01917 	ldw	r3,100(r5)
  80b8a8:	10880014 	ori	r2,r2,8192
  80b8ac:	2880030d 	sth	r2,12(r5)
  80b8b0:	18880014 	ori	r2,r3,8192
  80b8b4:	28801915 	stw	r2,100(r5)
  80b8b8:	280d883a 	mov	r6,r5
  80b8bc:	8009883a 	mov	r4,r16
  80b8c0:	880b883a 	mov	r5,r17
  80b8c4:	dfc00317 	ldw	ra,12(sp)
  80b8c8:	dc400217 	ldw	r17,8(sp)
  80b8cc:	dc000117 	ldw	r16,4(sp)
  80b8d0:	dec00404 	addi	sp,sp,16
  80b8d4:	080b6e41 	jmpi	80b6e4 <__fputwc>
  80b8d8:	8009883a 	mov	r4,r16
  80b8dc:	d9400015 	stw	r5,0(sp)
  80b8e0:	08019ec0 	call	8019ec <__sinit>
  80b8e4:	d9400017 	ldw	r5,0(sp)
  80b8e8:	003feb06 	br	80b898 <__alt_mem_onchip_mem+0xff803898>

0080b8ec <_wcrtomb_r>:
  80b8ec:	defff604 	addi	sp,sp,-40
  80b8f0:	00802074 	movhi	r2,129
  80b8f4:	dc800815 	stw	r18,32(sp)
  80b8f8:	dc400715 	stw	r17,28(sp)
  80b8fc:	dc000615 	stw	r16,24(sp)
  80b900:	10948604 	addi	r2,r2,21016
  80b904:	dfc00915 	stw	ra,36(sp)
  80b908:	2021883a 	mov	r16,r4
  80b90c:	3823883a 	mov	r17,r7
  80b910:	14800017 	ldw	r18,0(r2)
  80b914:	28001426 	beq	r5,zero,80b968 <_wcrtomb_r+0x7c>
  80b918:	d9400415 	stw	r5,16(sp)
  80b91c:	d9800515 	stw	r6,20(sp)
  80b920:	08083e80 	call	8083e8 <__locale_charset>
  80b924:	d9800517 	ldw	r6,20(sp)
  80b928:	d9400417 	ldw	r5,16(sp)
  80b92c:	100f883a 	mov	r7,r2
  80b930:	dc400015 	stw	r17,0(sp)
  80b934:	8009883a 	mov	r4,r16
  80b938:	903ee83a 	callr	r18
  80b93c:	00ffffc4 	movi	r3,-1
  80b940:	10c0031e 	bne	r2,r3,80b950 <_wcrtomb_r+0x64>
  80b944:	88000015 	stw	zero,0(r17)
  80b948:	00c02284 	movi	r3,138
  80b94c:	80c00015 	stw	r3,0(r16)
  80b950:	dfc00917 	ldw	ra,36(sp)
  80b954:	dc800817 	ldw	r18,32(sp)
  80b958:	dc400717 	ldw	r17,28(sp)
  80b95c:	dc000617 	ldw	r16,24(sp)
  80b960:	dec00a04 	addi	sp,sp,40
  80b964:	f800283a 	ret
  80b968:	08083e80 	call	8083e8 <__locale_charset>
  80b96c:	100f883a 	mov	r7,r2
  80b970:	dc400015 	stw	r17,0(sp)
  80b974:	000d883a 	mov	r6,zero
  80b978:	d9400104 	addi	r5,sp,4
  80b97c:	8009883a 	mov	r4,r16
  80b980:	903ee83a 	callr	r18
  80b984:	003fed06 	br	80b93c <__alt_mem_onchip_mem+0xff80393c>

0080b988 <wcrtomb>:
  80b988:	defff604 	addi	sp,sp,-40
  80b98c:	00802074 	movhi	r2,129
  80b990:	dc800615 	stw	r18,24(sp)
  80b994:	dc400515 	stw	r17,20(sp)
  80b998:	10948104 	addi	r2,r2,20996
  80b99c:	dfc00915 	stw	ra,36(sp)
  80b9a0:	dd000815 	stw	r20,32(sp)
  80b9a4:	dcc00715 	stw	r19,28(sp)
  80b9a8:	dc000415 	stw	r16,16(sp)
  80b9ac:	3025883a 	mov	r18,r6
  80b9b0:	14400017 	ldw	r17,0(r2)
  80b9b4:	20001926 	beq	r4,zero,80ba1c <wcrtomb+0x94>
  80b9b8:	00802074 	movhi	r2,129
  80b9bc:	10948604 	addi	r2,r2,21016
  80b9c0:	15000017 	ldw	r20,0(r2)
  80b9c4:	2021883a 	mov	r16,r4
  80b9c8:	2827883a 	mov	r19,r5
  80b9cc:	08083e80 	call	8083e8 <__locale_charset>
  80b9d0:	100f883a 	mov	r7,r2
  80b9d4:	dc800015 	stw	r18,0(sp)
  80b9d8:	980d883a 	mov	r6,r19
  80b9dc:	800b883a 	mov	r5,r16
  80b9e0:	8809883a 	mov	r4,r17
  80b9e4:	a03ee83a 	callr	r20
  80b9e8:	00ffffc4 	movi	r3,-1
  80b9ec:	10c0031e 	bne	r2,r3,80b9fc <wcrtomb+0x74>
  80b9f0:	90000015 	stw	zero,0(r18)
  80b9f4:	00c02284 	movi	r3,138
  80b9f8:	88c00015 	stw	r3,0(r17)
  80b9fc:	dfc00917 	ldw	ra,36(sp)
  80ba00:	dd000817 	ldw	r20,32(sp)
  80ba04:	dcc00717 	ldw	r19,28(sp)
  80ba08:	dc800617 	ldw	r18,24(sp)
  80ba0c:	dc400517 	ldw	r17,20(sp)
  80ba10:	dc000417 	ldw	r16,16(sp)
  80ba14:	dec00a04 	addi	sp,sp,40
  80ba18:	f800283a 	ret
  80ba1c:	00802074 	movhi	r2,129
  80ba20:	10948604 	addi	r2,r2,21016
  80ba24:	14000017 	ldw	r16,0(r2)
  80ba28:	08083e80 	call	8083e8 <__locale_charset>
  80ba2c:	100f883a 	mov	r7,r2
  80ba30:	dc800015 	stw	r18,0(sp)
  80ba34:	000d883a 	mov	r6,zero
  80ba38:	d9400104 	addi	r5,sp,4
  80ba3c:	8809883a 	mov	r4,r17
  80ba40:	803ee83a 	callr	r16
  80ba44:	003fe806 	br	80b9e8 <__alt_mem_onchip_mem+0xff8039e8>

0080ba48 <__ascii_wctomb>:
  80ba48:	28000526 	beq	r5,zero,80ba60 <__ascii_wctomb+0x18>
  80ba4c:	00803fc4 	movi	r2,255
  80ba50:	11800536 	bltu	r2,r6,80ba68 <__ascii_wctomb+0x20>
  80ba54:	29800005 	stb	r6,0(r5)
  80ba58:	00800044 	movi	r2,1
  80ba5c:	f800283a 	ret
  80ba60:	0005883a 	mov	r2,zero
  80ba64:	f800283a 	ret
  80ba68:	00802284 	movi	r2,138
  80ba6c:	20800015 	stw	r2,0(r4)
  80ba70:	00bfffc4 	movi	r2,-1
  80ba74:	f800283a 	ret

0080ba78 <_wctomb_r>:
  80ba78:	00802074 	movhi	r2,129
  80ba7c:	defff904 	addi	sp,sp,-28
  80ba80:	10948604 	addi	r2,r2,21016
  80ba84:	dfc00615 	stw	ra,24(sp)
  80ba88:	dc400515 	stw	r17,20(sp)
  80ba8c:	dc000415 	stw	r16,16(sp)
  80ba90:	3823883a 	mov	r17,r7
  80ba94:	14000017 	ldw	r16,0(r2)
  80ba98:	d9000115 	stw	r4,4(sp)
  80ba9c:	d9400215 	stw	r5,8(sp)
  80baa0:	d9800315 	stw	r6,12(sp)
  80baa4:	08083e80 	call	8083e8 <__locale_charset>
  80baa8:	d9800317 	ldw	r6,12(sp)
  80baac:	d9400217 	ldw	r5,8(sp)
  80bab0:	d9000117 	ldw	r4,4(sp)
  80bab4:	100f883a 	mov	r7,r2
  80bab8:	dc400015 	stw	r17,0(sp)
  80babc:	803ee83a 	callr	r16
  80bac0:	dfc00617 	ldw	ra,24(sp)
  80bac4:	dc400517 	ldw	r17,20(sp)
  80bac8:	dc000417 	ldw	r16,16(sp)
  80bacc:	dec00704 	addi	sp,sp,28
  80bad0:	f800283a 	ret

0080bad4 <__udivdi3>:
  80bad4:	defff504 	addi	sp,sp,-44
  80bad8:	dcc00415 	stw	r19,16(sp)
  80badc:	dc000115 	stw	r16,4(sp)
  80bae0:	dfc00a15 	stw	ra,40(sp)
  80bae4:	df000915 	stw	fp,36(sp)
  80bae8:	ddc00815 	stw	r23,32(sp)
  80baec:	dd800715 	stw	r22,28(sp)
  80baf0:	dd400615 	stw	r21,24(sp)
  80baf4:	dd000515 	stw	r20,20(sp)
  80baf8:	dc800315 	stw	r18,12(sp)
  80bafc:	dc400215 	stw	r17,8(sp)
  80bb00:	2027883a 	mov	r19,r4
  80bb04:	2821883a 	mov	r16,r5
  80bb08:	3800411e 	bne	r7,zero,80bc10 <__udivdi3+0x13c>
  80bb0c:	3023883a 	mov	r17,r6
  80bb10:	2025883a 	mov	r18,r4
  80bb14:	2980522e 	bgeu	r5,r6,80bc60 <__udivdi3+0x18c>
  80bb18:	00bfffd4 	movui	r2,65535
  80bb1c:	282d883a 	mov	r22,r5
  80bb20:	1180a836 	bltu	r2,r6,80bdc4 <__udivdi3+0x2f0>
  80bb24:	00803fc4 	movi	r2,255
  80bb28:	1185803a 	cmpltu	r2,r2,r6
  80bb2c:	100490fa 	slli	r2,r2,3
  80bb30:	3086d83a 	srl	r3,r6,r2
  80bb34:	01002074 	movhi	r4,129
  80bb38:	210d0504 	addi	r4,r4,13332
  80bb3c:	20c7883a 	add	r3,r4,r3
  80bb40:	18c00003 	ldbu	r3,0(r3)
  80bb44:	1885883a 	add	r2,r3,r2
  80bb48:	00c00804 	movi	r3,32
  80bb4c:	1887c83a 	sub	r3,r3,r2
  80bb50:	18000526 	beq	r3,zero,80bb68 <__udivdi3+0x94>
  80bb54:	80e0983a 	sll	r16,r16,r3
  80bb58:	9884d83a 	srl	r2,r19,r2
  80bb5c:	30e2983a 	sll	r17,r6,r3
  80bb60:	98e4983a 	sll	r18,r19,r3
  80bb64:	142cb03a 	or	r22,r2,r16
  80bb68:	882ad43a 	srli	r21,r17,16
  80bb6c:	b009883a 	mov	r4,r22
  80bb70:	8d3fffcc 	andi	r20,r17,65535
  80bb74:	a80b883a 	mov	r5,r21
  80bb78:	08015340 	call	801534 <__umodsi3>
  80bb7c:	b009883a 	mov	r4,r22
  80bb80:	a80b883a 	mov	r5,r21
  80bb84:	1027883a 	mov	r19,r2
  80bb88:	08014d00 	call	8014d0 <__udivsi3>
  80bb8c:	102d883a 	mov	r22,r2
  80bb90:	9826943a 	slli	r19,r19,16
  80bb94:	9004d43a 	srli	r2,r18,16
  80bb98:	a5a1383a 	mul	r16,r20,r22
  80bb9c:	14c4b03a 	or	r2,r2,r19
  80bba0:	1400052e 	bgeu	r2,r16,80bbb8 <__udivdi3+0xe4>
  80bba4:	1445883a 	add	r2,r2,r17
  80bba8:	b0ffffc4 	addi	r3,r22,-1
  80bbac:	14400136 	bltu	r2,r17,80bbb4 <__udivdi3+0xe0>
  80bbb0:	14012336 	bltu	r2,r16,80c040 <__udivdi3+0x56c>
  80bbb4:	182d883a 	mov	r22,r3
  80bbb8:	1421c83a 	sub	r16,r2,r16
  80bbbc:	a80b883a 	mov	r5,r21
  80bbc0:	8009883a 	mov	r4,r16
  80bbc4:	08015340 	call	801534 <__umodsi3>
  80bbc8:	1027883a 	mov	r19,r2
  80bbcc:	a80b883a 	mov	r5,r21
  80bbd0:	8009883a 	mov	r4,r16
  80bbd4:	08014d00 	call	8014d0 <__udivsi3>
  80bbd8:	9826943a 	slli	r19,r19,16
  80bbdc:	a0a9383a 	mul	r20,r20,r2
  80bbe0:	94bfffcc 	andi	r18,r18,65535
  80bbe4:	94e4b03a 	or	r18,r18,r19
  80bbe8:	9500052e 	bgeu	r18,r20,80bc00 <__udivdi3+0x12c>
  80bbec:	8ca5883a 	add	r18,r17,r18
  80bbf0:	10ffffc4 	addi	r3,r2,-1
  80bbf4:	9440f136 	bltu	r18,r17,80bfbc <__udivdi3+0x4e8>
  80bbf8:	9500f02e 	bgeu	r18,r20,80bfbc <__udivdi3+0x4e8>
  80bbfc:	10bfff84 	addi	r2,r2,-2
  80bc00:	b00c943a 	slli	r6,r22,16
  80bc04:	0007883a 	mov	r3,zero
  80bc08:	3084b03a 	or	r2,r6,r2
  80bc0c:	00005906 	br	80bd74 <__udivdi3+0x2a0>
  80bc10:	29c05636 	bltu	r5,r7,80bd6c <__udivdi3+0x298>
  80bc14:	00bfffd4 	movui	r2,65535
  80bc18:	11c0622e 	bgeu	r2,r7,80bda4 <__udivdi3+0x2d0>
  80bc1c:	00804034 	movhi	r2,256
  80bc20:	10bfffc4 	addi	r2,r2,-1
  80bc24:	11c0ee36 	bltu	r2,r7,80bfe0 <__udivdi3+0x50c>
  80bc28:	00800404 	movi	r2,16
  80bc2c:	3886d83a 	srl	r3,r7,r2
  80bc30:	01002074 	movhi	r4,129
  80bc34:	210d0504 	addi	r4,r4,13332
  80bc38:	20c7883a 	add	r3,r4,r3
  80bc3c:	18c00003 	ldbu	r3,0(r3)
  80bc40:	05400804 	movi	r21,32
  80bc44:	1885883a 	add	r2,r3,r2
  80bc48:	a8abc83a 	sub	r21,r21,r2
  80bc4c:	a800621e 	bne	r21,zero,80bdd8 <__udivdi3+0x304>
  80bc50:	3c00e936 	bltu	r7,r16,80bff8 <__udivdi3+0x524>
  80bc54:	9985403a 	cmpgeu	r2,r19,r6
  80bc58:	0007883a 	mov	r3,zero
  80bc5c:	00004506 	br	80bd74 <__udivdi3+0x2a0>
  80bc60:	3000041e 	bne	r6,zero,80bc74 <__udivdi3+0x1a0>
  80bc64:	000b883a 	mov	r5,zero
  80bc68:	01000044 	movi	r4,1
  80bc6c:	08014d00 	call	8014d0 <__udivsi3>
  80bc70:	1023883a 	mov	r17,r2
  80bc74:	00bfffd4 	movui	r2,65535
  80bc78:	14404e2e 	bgeu	r2,r17,80bdb4 <__udivdi3+0x2e0>
  80bc7c:	00804034 	movhi	r2,256
  80bc80:	10bfffc4 	addi	r2,r2,-1
  80bc84:	1440d836 	bltu	r2,r17,80bfe8 <__udivdi3+0x514>
  80bc88:	00800404 	movi	r2,16
  80bc8c:	8886d83a 	srl	r3,r17,r2
  80bc90:	01002074 	movhi	r4,129
  80bc94:	210d0504 	addi	r4,r4,13332
  80bc98:	20c7883a 	add	r3,r4,r3
  80bc9c:	18c00003 	ldbu	r3,0(r3)
  80bca0:	1885883a 	add	r2,r3,r2
  80bca4:	00c00804 	movi	r3,32
  80bca8:	1887c83a 	sub	r3,r3,r2
  80bcac:	18008f1e 	bne	r3,zero,80beec <__udivdi3+0x418>
  80bcb0:	882ad43a 	srli	r21,r17,16
  80bcb4:	8461c83a 	sub	r16,r16,r17
  80bcb8:	8d3fffcc 	andi	r20,r17,65535
  80bcbc:	00c00044 	movi	r3,1
  80bcc0:	8009883a 	mov	r4,r16
  80bcc4:	a80b883a 	mov	r5,r21
  80bcc8:	d8c00015 	stw	r3,0(sp)
  80bccc:	08015340 	call	801534 <__umodsi3>
  80bcd0:	8009883a 	mov	r4,r16
  80bcd4:	a80b883a 	mov	r5,r21
  80bcd8:	1027883a 	mov	r19,r2
  80bcdc:	08014d00 	call	8014d0 <__udivsi3>
  80bce0:	9826943a 	slli	r19,r19,16
  80bce4:	9008d43a 	srli	r4,r18,16
  80bce8:	1521383a 	mul	r16,r2,r20
  80bcec:	102d883a 	mov	r22,r2
  80bcf0:	24c8b03a 	or	r4,r4,r19
  80bcf4:	d8c00017 	ldw	r3,0(sp)
  80bcf8:	2400052e 	bgeu	r4,r16,80bd10 <__udivdi3+0x23c>
  80bcfc:	2449883a 	add	r4,r4,r17
  80bd00:	b0bfffc4 	addi	r2,r22,-1
  80bd04:	24400136 	bltu	r4,r17,80bd0c <__udivdi3+0x238>
  80bd08:	2400ca36 	bltu	r4,r16,80c034 <__udivdi3+0x560>
  80bd0c:	102d883a 	mov	r22,r2
  80bd10:	2421c83a 	sub	r16,r4,r16
  80bd14:	a80b883a 	mov	r5,r21
  80bd18:	8009883a 	mov	r4,r16
  80bd1c:	d8c00015 	stw	r3,0(sp)
  80bd20:	08015340 	call	801534 <__umodsi3>
  80bd24:	1027883a 	mov	r19,r2
  80bd28:	a80b883a 	mov	r5,r21
  80bd2c:	8009883a 	mov	r4,r16
  80bd30:	08014d00 	call	8014d0 <__udivsi3>
  80bd34:	9826943a 	slli	r19,r19,16
  80bd38:	1529383a 	mul	r20,r2,r20
  80bd3c:	94bfffcc 	andi	r18,r18,65535
  80bd40:	94e4b03a 	or	r18,r18,r19
  80bd44:	d8c00017 	ldw	r3,0(sp)
  80bd48:	9500052e 	bgeu	r18,r20,80bd60 <__udivdi3+0x28c>
  80bd4c:	8ca5883a 	add	r18,r17,r18
  80bd50:	113fffc4 	addi	r4,r2,-1
  80bd54:	94409736 	bltu	r18,r17,80bfb4 <__udivdi3+0x4e0>
  80bd58:	9500962e 	bgeu	r18,r20,80bfb4 <__udivdi3+0x4e0>
  80bd5c:	10bfff84 	addi	r2,r2,-2
  80bd60:	b00c943a 	slli	r6,r22,16
  80bd64:	3084b03a 	or	r2,r6,r2
  80bd68:	00000206 	br	80bd74 <__udivdi3+0x2a0>
  80bd6c:	0007883a 	mov	r3,zero
  80bd70:	0005883a 	mov	r2,zero
  80bd74:	dfc00a17 	ldw	ra,40(sp)
  80bd78:	df000917 	ldw	fp,36(sp)
  80bd7c:	ddc00817 	ldw	r23,32(sp)
  80bd80:	dd800717 	ldw	r22,28(sp)
  80bd84:	dd400617 	ldw	r21,24(sp)
  80bd88:	dd000517 	ldw	r20,20(sp)
  80bd8c:	dcc00417 	ldw	r19,16(sp)
  80bd90:	dc800317 	ldw	r18,12(sp)
  80bd94:	dc400217 	ldw	r17,8(sp)
  80bd98:	dc000117 	ldw	r16,4(sp)
  80bd9c:	dec00b04 	addi	sp,sp,44
  80bda0:	f800283a 	ret
  80bda4:	00803fc4 	movi	r2,255
  80bda8:	11c5803a 	cmpltu	r2,r2,r7
  80bdac:	100490fa 	slli	r2,r2,3
  80bdb0:	003f9e06 	br	80bc2c <__alt_mem_onchip_mem+0xff803c2c>
  80bdb4:	00803fc4 	movi	r2,255
  80bdb8:	1445803a 	cmpltu	r2,r2,r17
  80bdbc:	100490fa 	slli	r2,r2,3
  80bdc0:	003fb206 	br	80bc8c <__alt_mem_onchip_mem+0xff803c8c>
  80bdc4:	00804034 	movhi	r2,256
  80bdc8:	10bfffc4 	addi	r2,r2,-1
  80bdcc:	11808836 	bltu	r2,r6,80bff0 <__udivdi3+0x51c>
  80bdd0:	00800404 	movi	r2,16
  80bdd4:	003f5606 	br	80bb30 <__alt_mem_onchip_mem+0xff803b30>
  80bdd8:	30aed83a 	srl	r23,r6,r2
  80bddc:	3d4e983a 	sll	r7,r7,r21
  80bde0:	80acd83a 	srl	r22,r16,r2
  80bde4:	9884d83a 	srl	r2,r19,r2
  80bde8:	3deeb03a 	or	r23,r7,r23
  80bdec:	b824d43a 	srli	r18,r23,16
  80bdf0:	8560983a 	sll	r16,r16,r21
  80bdf4:	b009883a 	mov	r4,r22
  80bdf8:	900b883a 	mov	r5,r18
  80bdfc:	3568983a 	sll	r20,r6,r21
  80be00:	1420b03a 	or	r16,r2,r16
  80be04:	08015340 	call	801534 <__umodsi3>
  80be08:	b009883a 	mov	r4,r22
  80be0c:	900b883a 	mov	r5,r18
  80be10:	1023883a 	mov	r17,r2
  80be14:	08014d00 	call	8014d0 <__udivsi3>
  80be18:	8808943a 	slli	r4,r17,16
  80be1c:	bf3fffcc 	andi	fp,r23,65535
  80be20:	8006d43a 	srli	r3,r16,16
  80be24:	e0a3383a 	mul	r17,fp,r2
  80be28:	100d883a 	mov	r6,r2
  80be2c:	1906b03a 	or	r3,r3,r4
  80be30:	1c40042e 	bgeu	r3,r17,80be44 <__udivdi3+0x370>
  80be34:	1dc7883a 	add	r3,r3,r23
  80be38:	10bfffc4 	addi	r2,r2,-1
  80be3c:	1dc0752e 	bgeu	r3,r23,80c014 <__udivdi3+0x540>
  80be40:	100d883a 	mov	r6,r2
  80be44:	1c63c83a 	sub	r17,r3,r17
  80be48:	900b883a 	mov	r5,r18
  80be4c:	8809883a 	mov	r4,r17
  80be50:	d9800015 	stw	r6,0(sp)
  80be54:	08015340 	call	801534 <__umodsi3>
  80be58:	102d883a 	mov	r22,r2
  80be5c:	8809883a 	mov	r4,r17
  80be60:	900b883a 	mov	r5,r18
  80be64:	08014d00 	call	8014d0 <__udivsi3>
  80be68:	b02c943a 	slli	r22,r22,16
  80be6c:	e089383a 	mul	r4,fp,r2
  80be70:	843fffcc 	andi	r16,r16,65535
  80be74:	85a0b03a 	or	r16,r16,r22
  80be78:	d9800017 	ldw	r6,0(sp)
  80be7c:	8100042e 	bgeu	r16,r4,80be90 <__udivdi3+0x3bc>
  80be80:	85e1883a 	add	r16,r16,r23
  80be84:	10ffffc4 	addi	r3,r2,-1
  80be88:	85c05e2e 	bgeu	r16,r23,80c004 <__udivdi3+0x530>
  80be8c:	1805883a 	mov	r2,r3
  80be90:	300c943a 	slli	r6,r6,16
  80be94:	a17fffcc 	andi	r5,r20,65535
  80be98:	a028d43a 	srli	r20,r20,16
  80be9c:	3084b03a 	or	r2,r6,r2
  80bea0:	10ffffcc 	andi	r3,r2,65535
  80bea4:	100cd43a 	srli	r6,r2,16
  80bea8:	194f383a 	mul	r7,r3,r5
  80beac:	1d07383a 	mul	r3,r3,r20
  80beb0:	314b383a 	mul	r5,r6,r5
  80beb4:	3810d43a 	srli	r8,r7,16
  80beb8:	8121c83a 	sub	r16,r16,r4
  80bebc:	1947883a 	add	r3,r3,r5
  80bec0:	40c7883a 	add	r3,r8,r3
  80bec4:	350d383a 	mul	r6,r6,r20
  80bec8:	1940022e 	bgeu	r3,r5,80bed4 <__udivdi3+0x400>
  80becc:	01000074 	movhi	r4,1
  80bed0:	310d883a 	add	r6,r6,r4
  80bed4:	1828d43a 	srli	r20,r3,16
  80bed8:	a18d883a 	add	r6,r20,r6
  80bedc:	81803e36 	bltu	r16,r6,80bfd8 <__udivdi3+0x504>
  80bee0:	81803826 	beq	r16,r6,80bfc4 <__udivdi3+0x4f0>
  80bee4:	0007883a 	mov	r3,zero
  80bee8:	003fa206 	br	80bd74 <__alt_mem_onchip_mem+0xff803d74>
  80beec:	88e2983a 	sll	r17,r17,r3
  80bef0:	80a8d83a 	srl	r20,r16,r2
  80bef4:	80e0983a 	sll	r16,r16,r3
  80bef8:	882ad43a 	srli	r21,r17,16
  80befc:	9884d83a 	srl	r2,r19,r2
  80bf00:	a009883a 	mov	r4,r20
  80bf04:	a80b883a 	mov	r5,r21
  80bf08:	142eb03a 	or	r23,r2,r16
  80bf0c:	98e4983a 	sll	r18,r19,r3
  80bf10:	08015340 	call	801534 <__umodsi3>
  80bf14:	a009883a 	mov	r4,r20
  80bf18:	a80b883a 	mov	r5,r21
  80bf1c:	1021883a 	mov	r16,r2
  80bf20:	08014d00 	call	8014d0 <__udivsi3>
  80bf24:	1039883a 	mov	fp,r2
  80bf28:	8d3fffcc 	andi	r20,r17,65535
  80bf2c:	8020943a 	slli	r16,r16,16
  80bf30:	b804d43a 	srli	r2,r23,16
  80bf34:	a72d383a 	mul	r22,r20,fp
  80bf38:	1404b03a 	or	r2,r2,r16
  80bf3c:	1580062e 	bgeu	r2,r22,80bf58 <__udivdi3+0x484>
  80bf40:	1445883a 	add	r2,r2,r17
  80bf44:	e0ffffc4 	addi	r3,fp,-1
  80bf48:	14403836 	bltu	r2,r17,80c02c <__udivdi3+0x558>
  80bf4c:	1580372e 	bgeu	r2,r22,80c02c <__udivdi3+0x558>
  80bf50:	e73fff84 	addi	fp,fp,-2
  80bf54:	1445883a 	add	r2,r2,r17
  80bf58:	15adc83a 	sub	r22,r2,r22
  80bf5c:	a80b883a 	mov	r5,r21
  80bf60:	b009883a 	mov	r4,r22
  80bf64:	08015340 	call	801534 <__umodsi3>
  80bf68:	1027883a 	mov	r19,r2
  80bf6c:	b009883a 	mov	r4,r22
  80bf70:	a80b883a 	mov	r5,r21
  80bf74:	08014d00 	call	8014d0 <__udivsi3>
  80bf78:	9826943a 	slli	r19,r19,16
  80bf7c:	a0a1383a 	mul	r16,r20,r2
  80bf80:	b93fffcc 	andi	r4,r23,65535
  80bf84:	24c8b03a 	or	r4,r4,r19
  80bf88:	2400062e 	bgeu	r4,r16,80bfa4 <__udivdi3+0x4d0>
  80bf8c:	2449883a 	add	r4,r4,r17
  80bf90:	10ffffc4 	addi	r3,r2,-1
  80bf94:	24402336 	bltu	r4,r17,80c024 <__udivdi3+0x550>
  80bf98:	2400222e 	bgeu	r4,r16,80c024 <__udivdi3+0x550>
  80bf9c:	10bfff84 	addi	r2,r2,-2
  80bfa0:	2449883a 	add	r4,r4,r17
  80bfa4:	e038943a 	slli	fp,fp,16
  80bfa8:	2421c83a 	sub	r16,r4,r16
  80bfac:	e086b03a 	or	r3,fp,r2
  80bfb0:	003f4306 	br	80bcc0 <__alt_mem_onchip_mem+0xff803cc0>
  80bfb4:	2005883a 	mov	r2,r4
  80bfb8:	003f6906 	br	80bd60 <__alt_mem_onchip_mem+0xff803d60>
  80bfbc:	1805883a 	mov	r2,r3
  80bfc0:	003f0f06 	br	80bc00 <__alt_mem_onchip_mem+0xff803c00>
  80bfc4:	1806943a 	slli	r3,r3,16
  80bfc8:	9d66983a 	sll	r19,r19,r21
  80bfcc:	39ffffcc 	andi	r7,r7,65535
  80bfd0:	19c7883a 	add	r3,r3,r7
  80bfd4:	98ffc32e 	bgeu	r19,r3,80bee4 <__alt_mem_onchip_mem+0xff803ee4>
  80bfd8:	10bfffc4 	addi	r2,r2,-1
  80bfdc:	003fc106 	br	80bee4 <__alt_mem_onchip_mem+0xff803ee4>
  80bfe0:	00800604 	movi	r2,24
  80bfe4:	003f1106 	br	80bc2c <__alt_mem_onchip_mem+0xff803c2c>
  80bfe8:	00800604 	movi	r2,24
  80bfec:	003f2706 	br	80bc8c <__alt_mem_onchip_mem+0xff803c8c>
  80bff0:	00800604 	movi	r2,24
  80bff4:	003ece06 	br	80bb30 <__alt_mem_onchip_mem+0xff803b30>
  80bff8:	0007883a 	mov	r3,zero
  80bffc:	00800044 	movi	r2,1
  80c000:	003f5c06 	br	80bd74 <__alt_mem_onchip_mem+0xff803d74>
  80c004:	813fa12e 	bgeu	r16,r4,80be8c <__alt_mem_onchip_mem+0xff803e8c>
  80c008:	10bfff84 	addi	r2,r2,-2
  80c00c:	85e1883a 	add	r16,r16,r23
  80c010:	003f9f06 	br	80be90 <__alt_mem_onchip_mem+0xff803e90>
  80c014:	1c7f8a2e 	bgeu	r3,r17,80be40 <__alt_mem_onchip_mem+0xff803e40>
  80c018:	31bfff84 	addi	r6,r6,-2
  80c01c:	1dc7883a 	add	r3,r3,r23
  80c020:	003f8806 	br	80be44 <__alt_mem_onchip_mem+0xff803e44>
  80c024:	1805883a 	mov	r2,r3
  80c028:	003fde06 	br	80bfa4 <__alt_mem_onchip_mem+0xff803fa4>
  80c02c:	1839883a 	mov	fp,r3
  80c030:	003fc906 	br	80bf58 <__alt_mem_onchip_mem+0xff803f58>
  80c034:	b5bfff84 	addi	r22,r22,-2
  80c038:	2449883a 	add	r4,r4,r17
  80c03c:	003f3406 	br	80bd10 <__alt_mem_onchip_mem+0xff803d10>
  80c040:	b5bfff84 	addi	r22,r22,-2
  80c044:	1445883a 	add	r2,r2,r17
  80c048:	003edb06 	br	80bbb8 <__alt_mem_onchip_mem+0xff803bb8>

0080c04c <__umoddi3>:
  80c04c:	defff404 	addi	sp,sp,-48
  80c050:	df000a15 	stw	fp,40(sp)
  80c054:	dc400315 	stw	r17,12(sp)
  80c058:	dc000215 	stw	r16,8(sp)
  80c05c:	dfc00b15 	stw	ra,44(sp)
  80c060:	ddc00915 	stw	r23,36(sp)
  80c064:	dd800815 	stw	r22,32(sp)
  80c068:	dd400715 	stw	r21,28(sp)
  80c06c:	dd000615 	stw	r20,24(sp)
  80c070:	dcc00515 	stw	r19,20(sp)
  80c074:	dc800415 	stw	r18,16(sp)
  80c078:	2021883a 	mov	r16,r4
  80c07c:	2823883a 	mov	r17,r5
  80c080:	2839883a 	mov	fp,r5
  80c084:	38003c1e 	bne	r7,zero,80c178 <__umoddi3+0x12c>
  80c088:	3027883a 	mov	r19,r6
  80c08c:	2029883a 	mov	r20,r4
  80c090:	2980512e 	bgeu	r5,r6,80c1d8 <__umoddi3+0x18c>
  80c094:	00bfffd4 	movui	r2,65535
  80c098:	11809a36 	bltu	r2,r6,80c304 <__umoddi3+0x2b8>
  80c09c:	01003fc4 	movi	r4,255
  80c0a0:	2189803a 	cmpltu	r4,r4,r6
  80c0a4:	200890fa 	slli	r4,r4,3
  80c0a8:	3104d83a 	srl	r2,r6,r4
  80c0ac:	00c02074 	movhi	r3,129
  80c0b0:	18cd0504 	addi	r3,r3,13332
  80c0b4:	1885883a 	add	r2,r3,r2
  80c0b8:	10c00003 	ldbu	r3,0(r2)
  80c0bc:	00800804 	movi	r2,32
  80c0c0:	1909883a 	add	r4,r3,r4
  80c0c4:	1125c83a 	sub	r18,r2,r4
  80c0c8:	90000526 	beq	r18,zero,80c0e0 <__umoddi3+0x94>
  80c0cc:	8ca2983a 	sll	r17,r17,r18
  80c0d0:	8108d83a 	srl	r4,r16,r4
  80c0d4:	34a6983a 	sll	r19,r6,r18
  80c0d8:	84a8983a 	sll	r20,r16,r18
  80c0dc:	2478b03a 	or	fp,r4,r17
  80c0e0:	982ed43a 	srli	r23,r19,16
  80c0e4:	e009883a 	mov	r4,fp
  80c0e8:	9dbfffcc 	andi	r22,r19,65535
  80c0ec:	b80b883a 	mov	r5,r23
  80c0f0:	08015340 	call	801534 <__umodsi3>
  80c0f4:	e009883a 	mov	r4,fp
  80c0f8:	b80b883a 	mov	r5,r23
  80c0fc:	102b883a 	mov	r21,r2
  80c100:	08014d00 	call	8014d0 <__udivsi3>
  80c104:	a806943a 	slli	r3,r21,16
  80c108:	a008d43a 	srli	r4,r20,16
  80c10c:	b085383a 	mul	r2,r22,r2
  80c110:	20c8b03a 	or	r4,r4,r3
  80c114:	2080032e 	bgeu	r4,r2,80c124 <__umoddi3+0xd8>
  80c118:	24c9883a 	add	r4,r4,r19
  80c11c:	24c00136 	bltu	r4,r19,80c124 <__umoddi3+0xd8>
  80c120:	20811036 	bltu	r4,r2,80c564 <__umoddi3+0x518>
  80c124:	20abc83a 	sub	r21,r4,r2
  80c128:	b80b883a 	mov	r5,r23
  80c12c:	a809883a 	mov	r4,r21
  80c130:	08015340 	call	801534 <__umodsi3>
  80c134:	1023883a 	mov	r17,r2
  80c138:	b80b883a 	mov	r5,r23
  80c13c:	a809883a 	mov	r4,r21
  80c140:	08014d00 	call	8014d0 <__udivsi3>
  80c144:	8822943a 	slli	r17,r17,16
  80c148:	b085383a 	mul	r2,r22,r2
  80c14c:	a0ffffcc 	andi	r3,r20,65535
  80c150:	1c46b03a 	or	r3,r3,r17
  80c154:	1880042e 	bgeu	r3,r2,80c168 <__umoddi3+0x11c>
  80c158:	1cc7883a 	add	r3,r3,r19
  80c15c:	1cc00236 	bltu	r3,r19,80c168 <__umoddi3+0x11c>
  80c160:	1880012e 	bgeu	r3,r2,80c168 <__umoddi3+0x11c>
  80c164:	1cc7883a 	add	r3,r3,r19
  80c168:	1885c83a 	sub	r2,r3,r2
  80c16c:	1484d83a 	srl	r2,r2,r18
  80c170:	0007883a 	mov	r3,zero
  80c174:	00004f06 	br	80c2b4 <__umoddi3+0x268>
  80c178:	29c04c36 	bltu	r5,r7,80c2ac <__umoddi3+0x260>
  80c17c:	00bfffd4 	movui	r2,65535
  80c180:	11c0582e 	bgeu	r2,r7,80c2e4 <__umoddi3+0x298>
  80c184:	00804034 	movhi	r2,256
  80c188:	10bfffc4 	addi	r2,r2,-1
  80c18c:	11c0e736 	bltu	r2,r7,80c52c <__umoddi3+0x4e0>
  80c190:	01000404 	movi	r4,16
  80c194:	3904d83a 	srl	r2,r7,r4
  80c198:	00c02074 	movhi	r3,129
  80c19c:	18cd0504 	addi	r3,r3,13332
  80c1a0:	1885883a 	add	r2,r3,r2
  80c1a4:	14c00003 	ldbu	r19,0(r2)
  80c1a8:	00c00804 	movi	r3,32
  80c1ac:	9927883a 	add	r19,r19,r4
  80c1b0:	1ce9c83a 	sub	r20,r3,r19
  80c1b4:	a000581e 	bne	r20,zero,80c318 <__umoddi3+0x2cc>
  80c1b8:	3c400136 	bltu	r7,r17,80c1c0 <__umoddi3+0x174>
  80c1bc:	8180eb36 	bltu	r16,r6,80c56c <__umoddi3+0x520>
  80c1c0:	8185c83a 	sub	r2,r16,r6
  80c1c4:	89e3c83a 	sub	r17,r17,r7
  80c1c8:	8089803a 	cmpltu	r4,r16,r2
  80c1cc:	8939c83a 	sub	fp,r17,r4
  80c1d0:	e007883a 	mov	r3,fp
  80c1d4:	00003706 	br	80c2b4 <__umoddi3+0x268>
  80c1d8:	3000041e 	bne	r6,zero,80c1ec <__umoddi3+0x1a0>
  80c1dc:	000b883a 	mov	r5,zero
  80c1e0:	01000044 	movi	r4,1
  80c1e4:	08014d00 	call	8014d0 <__udivsi3>
  80c1e8:	1027883a 	mov	r19,r2
  80c1ec:	00bfffd4 	movui	r2,65535
  80c1f0:	14c0402e 	bgeu	r2,r19,80c2f4 <__umoddi3+0x2a8>
  80c1f4:	00804034 	movhi	r2,256
  80c1f8:	10bfffc4 	addi	r2,r2,-1
  80c1fc:	14c0cd36 	bltu	r2,r19,80c534 <__umoddi3+0x4e8>
  80c200:	00800404 	movi	r2,16
  80c204:	9886d83a 	srl	r3,r19,r2
  80c208:	01002074 	movhi	r4,129
  80c20c:	210d0504 	addi	r4,r4,13332
  80c210:	20c7883a 	add	r3,r4,r3
  80c214:	18c00003 	ldbu	r3,0(r3)
  80c218:	1887883a 	add	r3,r3,r2
  80c21c:	00800804 	movi	r2,32
  80c220:	10e5c83a 	sub	r18,r2,r3
  80c224:	9000901e 	bne	r18,zero,80c468 <__umoddi3+0x41c>
  80c228:	982cd43a 	srli	r22,r19,16
  80c22c:	8ce3c83a 	sub	r17,r17,r19
  80c230:	9d7fffcc 	andi	r21,r19,65535
  80c234:	b00b883a 	mov	r5,r22
  80c238:	8809883a 	mov	r4,r17
  80c23c:	08015340 	call	801534 <__umodsi3>
  80c240:	8809883a 	mov	r4,r17
  80c244:	b00b883a 	mov	r5,r22
  80c248:	1021883a 	mov	r16,r2
  80c24c:	08014d00 	call	8014d0 <__udivsi3>
  80c250:	8006943a 	slli	r3,r16,16
  80c254:	a008d43a 	srli	r4,r20,16
  80c258:	1545383a 	mul	r2,r2,r21
  80c25c:	20c8b03a 	or	r4,r4,r3
  80c260:	2080042e 	bgeu	r4,r2,80c274 <__umoddi3+0x228>
  80c264:	24c9883a 	add	r4,r4,r19
  80c268:	24c00236 	bltu	r4,r19,80c274 <__umoddi3+0x228>
  80c26c:	2080012e 	bgeu	r4,r2,80c274 <__umoddi3+0x228>
  80c270:	24c9883a 	add	r4,r4,r19
  80c274:	20a1c83a 	sub	r16,r4,r2
  80c278:	b00b883a 	mov	r5,r22
  80c27c:	8009883a 	mov	r4,r16
  80c280:	08015340 	call	801534 <__umodsi3>
  80c284:	1023883a 	mov	r17,r2
  80c288:	b00b883a 	mov	r5,r22
  80c28c:	8009883a 	mov	r4,r16
  80c290:	08014d00 	call	8014d0 <__udivsi3>
  80c294:	8822943a 	slli	r17,r17,16
  80c298:	1545383a 	mul	r2,r2,r21
  80c29c:	a53fffcc 	andi	r20,r20,65535
  80c2a0:	a446b03a 	or	r3,r20,r17
  80c2a4:	18bfb02e 	bgeu	r3,r2,80c168 <__alt_mem_onchip_mem+0xff804168>
  80c2a8:	003fab06 	br	80c158 <__alt_mem_onchip_mem+0xff804158>
  80c2ac:	2005883a 	mov	r2,r4
  80c2b0:	2807883a 	mov	r3,r5
  80c2b4:	dfc00b17 	ldw	ra,44(sp)
  80c2b8:	df000a17 	ldw	fp,40(sp)
  80c2bc:	ddc00917 	ldw	r23,36(sp)
  80c2c0:	dd800817 	ldw	r22,32(sp)
  80c2c4:	dd400717 	ldw	r21,28(sp)
  80c2c8:	dd000617 	ldw	r20,24(sp)
  80c2cc:	dcc00517 	ldw	r19,20(sp)
  80c2d0:	dc800417 	ldw	r18,16(sp)
  80c2d4:	dc400317 	ldw	r17,12(sp)
  80c2d8:	dc000217 	ldw	r16,8(sp)
  80c2dc:	dec00c04 	addi	sp,sp,48
  80c2e0:	f800283a 	ret
  80c2e4:	04c03fc4 	movi	r19,255
  80c2e8:	99c9803a 	cmpltu	r4,r19,r7
  80c2ec:	200890fa 	slli	r4,r4,3
  80c2f0:	003fa806 	br	80c194 <__alt_mem_onchip_mem+0xff804194>
  80c2f4:	00803fc4 	movi	r2,255
  80c2f8:	14c5803a 	cmpltu	r2,r2,r19
  80c2fc:	100490fa 	slli	r2,r2,3
  80c300:	003fc006 	br	80c204 <__alt_mem_onchip_mem+0xff804204>
  80c304:	00804034 	movhi	r2,256
  80c308:	10bfffc4 	addi	r2,r2,-1
  80c30c:	11808b36 	bltu	r2,r6,80c53c <__umoddi3+0x4f0>
  80c310:	01000404 	movi	r4,16
  80c314:	003f6406 	br	80c0a8 <__alt_mem_onchip_mem+0xff8040a8>
  80c318:	34c4d83a 	srl	r2,r6,r19
  80c31c:	3d0e983a 	sll	r7,r7,r20
  80c320:	8cf8d83a 	srl	fp,r17,r19
  80c324:	8d10983a 	sll	r8,r17,r20
  80c328:	38aab03a 	or	r21,r7,r2
  80c32c:	a82cd43a 	srli	r22,r21,16
  80c330:	84e2d83a 	srl	r17,r16,r19
  80c334:	e009883a 	mov	r4,fp
  80c338:	b00b883a 	mov	r5,r22
  80c33c:	8a22b03a 	or	r17,r17,r8
  80c340:	3524983a 	sll	r18,r6,r20
  80c344:	08015340 	call	801534 <__umodsi3>
  80c348:	e009883a 	mov	r4,fp
  80c34c:	b00b883a 	mov	r5,r22
  80c350:	102f883a 	mov	r23,r2
  80c354:	08014d00 	call	8014d0 <__udivsi3>
  80c358:	100d883a 	mov	r6,r2
  80c35c:	b808943a 	slli	r4,r23,16
  80c360:	aa3fffcc 	andi	r8,r21,65535
  80c364:	8804d43a 	srli	r2,r17,16
  80c368:	41af383a 	mul	r23,r8,r6
  80c36c:	8520983a 	sll	r16,r16,r20
  80c370:	1104b03a 	or	r2,r2,r4
  80c374:	15c0042e 	bgeu	r2,r23,80c388 <__umoddi3+0x33c>
  80c378:	1545883a 	add	r2,r2,r21
  80c37c:	30ffffc4 	addi	r3,r6,-1
  80c380:	1540742e 	bgeu	r2,r21,80c554 <__umoddi3+0x508>
  80c384:	180d883a 	mov	r6,r3
  80c388:	15efc83a 	sub	r23,r2,r23
  80c38c:	b00b883a 	mov	r5,r22
  80c390:	b809883a 	mov	r4,r23
  80c394:	d9800115 	stw	r6,4(sp)
  80c398:	da000015 	stw	r8,0(sp)
  80c39c:	08015340 	call	801534 <__umodsi3>
  80c3a0:	b00b883a 	mov	r5,r22
  80c3a4:	b809883a 	mov	r4,r23
  80c3a8:	1039883a 	mov	fp,r2
  80c3ac:	08014d00 	call	8014d0 <__udivsi3>
  80c3b0:	da000017 	ldw	r8,0(sp)
  80c3b4:	e038943a 	slli	fp,fp,16
  80c3b8:	100b883a 	mov	r5,r2
  80c3bc:	4089383a 	mul	r4,r8,r2
  80c3c0:	8a3fffcc 	andi	r8,r17,65535
  80c3c4:	4710b03a 	or	r8,r8,fp
  80c3c8:	d9800117 	ldw	r6,4(sp)
  80c3cc:	4100042e 	bgeu	r8,r4,80c3e0 <__umoddi3+0x394>
  80c3d0:	4551883a 	add	r8,r8,r21
  80c3d4:	10bfffc4 	addi	r2,r2,-1
  80c3d8:	45405a2e 	bgeu	r8,r21,80c544 <__umoddi3+0x4f8>
  80c3dc:	100b883a 	mov	r5,r2
  80c3e0:	300c943a 	slli	r6,r6,16
  80c3e4:	91ffffcc 	andi	r7,r18,65535
  80c3e8:	9004d43a 	srli	r2,r18,16
  80c3ec:	314cb03a 	or	r6,r6,r5
  80c3f0:	317fffcc 	andi	r5,r6,65535
  80c3f4:	300cd43a 	srli	r6,r6,16
  80c3f8:	29d3383a 	mul	r9,r5,r7
  80c3fc:	288b383a 	mul	r5,r5,r2
  80c400:	31cf383a 	mul	r7,r6,r7
  80c404:	4806d43a 	srli	r3,r9,16
  80c408:	4111c83a 	sub	r8,r8,r4
  80c40c:	29cb883a 	add	r5,r5,r7
  80c410:	194b883a 	add	r5,r3,r5
  80c414:	3085383a 	mul	r2,r6,r2
  80c418:	29c0022e 	bgeu	r5,r7,80c424 <__umoddi3+0x3d8>
  80c41c:	00c00074 	movhi	r3,1
  80c420:	10c5883a 	add	r2,r2,r3
  80c424:	2808d43a 	srli	r4,r5,16
  80c428:	280a943a 	slli	r5,r5,16
  80c42c:	4a7fffcc 	andi	r9,r9,65535
  80c430:	2085883a 	add	r2,r4,r2
  80c434:	2a4b883a 	add	r5,r5,r9
  80c438:	40803636 	bltu	r8,r2,80c514 <__umoddi3+0x4c8>
  80c43c:	40804d26 	beq	r8,r2,80c574 <__umoddi3+0x528>
  80c440:	4089c83a 	sub	r4,r8,r2
  80c444:	280f883a 	mov	r7,r5
  80c448:	81cfc83a 	sub	r7,r16,r7
  80c44c:	81c7803a 	cmpltu	r3,r16,r7
  80c450:	20c7c83a 	sub	r3,r4,r3
  80c454:	1cc4983a 	sll	r2,r3,r19
  80c458:	3d0ed83a 	srl	r7,r7,r20
  80c45c:	1d06d83a 	srl	r3,r3,r20
  80c460:	11c4b03a 	or	r2,r2,r7
  80c464:	003f9306 	br	80c2b4 <__alt_mem_onchip_mem+0xff8042b4>
  80c468:	9ca6983a 	sll	r19,r19,r18
  80c46c:	88e8d83a 	srl	r20,r17,r3
  80c470:	80c4d83a 	srl	r2,r16,r3
  80c474:	982cd43a 	srli	r22,r19,16
  80c478:	8ca2983a 	sll	r17,r17,r18
  80c47c:	a009883a 	mov	r4,r20
  80c480:	b00b883a 	mov	r5,r22
  80c484:	1478b03a 	or	fp,r2,r17
  80c488:	08015340 	call	801534 <__umodsi3>
  80c48c:	a009883a 	mov	r4,r20
  80c490:	b00b883a 	mov	r5,r22
  80c494:	1023883a 	mov	r17,r2
  80c498:	08014d00 	call	8014d0 <__udivsi3>
  80c49c:	9d7fffcc 	andi	r21,r19,65535
  80c4a0:	880a943a 	slli	r5,r17,16
  80c4a4:	e008d43a 	srli	r4,fp,16
  80c4a8:	a885383a 	mul	r2,r21,r2
  80c4ac:	84a8983a 	sll	r20,r16,r18
  80c4b0:	2148b03a 	or	r4,r4,r5
  80c4b4:	2080042e 	bgeu	r4,r2,80c4c8 <__umoddi3+0x47c>
  80c4b8:	24c9883a 	add	r4,r4,r19
  80c4bc:	24c00236 	bltu	r4,r19,80c4c8 <__umoddi3+0x47c>
  80c4c0:	2080012e 	bgeu	r4,r2,80c4c8 <__umoddi3+0x47c>
  80c4c4:	24c9883a 	add	r4,r4,r19
  80c4c8:	20a3c83a 	sub	r17,r4,r2
  80c4cc:	b00b883a 	mov	r5,r22
  80c4d0:	8809883a 	mov	r4,r17
  80c4d4:	08015340 	call	801534 <__umodsi3>
  80c4d8:	102f883a 	mov	r23,r2
  80c4dc:	8809883a 	mov	r4,r17
  80c4e0:	b00b883a 	mov	r5,r22
  80c4e4:	08014d00 	call	8014d0 <__udivsi3>
  80c4e8:	b82e943a 	slli	r23,r23,16
  80c4ec:	a885383a 	mul	r2,r21,r2
  80c4f0:	e13fffcc 	andi	r4,fp,65535
  80c4f4:	25c8b03a 	or	r4,r4,r23
  80c4f8:	2080042e 	bgeu	r4,r2,80c50c <__umoddi3+0x4c0>
  80c4fc:	24c9883a 	add	r4,r4,r19
  80c500:	24c00236 	bltu	r4,r19,80c50c <__umoddi3+0x4c0>
  80c504:	2080012e 	bgeu	r4,r2,80c50c <__umoddi3+0x4c0>
  80c508:	24c9883a 	add	r4,r4,r19
  80c50c:	20a3c83a 	sub	r17,r4,r2
  80c510:	003f4806 	br	80c234 <__alt_mem_onchip_mem+0xff804234>
  80c514:	2c8fc83a 	sub	r7,r5,r18
  80c518:	1545c83a 	sub	r2,r2,r21
  80c51c:	29cb803a 	cmpltu	r5,r5,r7
  80c520:	1145c83a 	sub	r2,r2,r5
  80c524:	4089c83a 	sub	r4,r8,r2
  80c528:	003fc706 	br	80c448 <__alt_mem_onchip_mem+0xff804448>
  80c52c:	01000604 	movi	r4,24
  80c530:	003f1806 	br	80c194 <__alt_mem_onchip_mem+0xff804194>
  80c534:	00800604 	movi	r2,24
  80c538:	003f3206 	br	80c204 <__alt_mem_onchip_mem+0xff804204>
  80c53c:	01000604 	movi	r4,24
  80c540:	003ed906 	br	80c0a8 <__alt_mem_onchip_mem+0xff8040a8>
  80c544:	413fa52e 	bgeu	r8,r4,80c3dc <__alt_mem_onchip_mem+0xff8043dc>
  80c548:	297fff84 	addi	r5,r5,-2
  80c54c:	4551883a 	add	r8,r8,r21
  80c550:	003fa306 	br	80c3e0 <__alt_mem_onchip_mem+0xff8043e0>
  80c554:	15ff8b2e 	bgeu	r2,r23,80c384 <__alt_mem_onchip_mem+0xff804384>
  80c558:	31bfff84 	addi	r6,r6,-2
  80c55c:	1545883a 	add	r2,r2,r21
  80c560:	003f8906 	br	80c388 <__alt_mem_onchip_mem+0xff804388>
  80c564:	24c9883a 	add	r4,r4,r19
  80c568:	003eee06 	br	80c124 <__alt_mem_onchip_mem+0xff804124>
  80c56c:	8005883a 	mov	r2,r16
  80c570:	003f1706 	br	80c1d0 <__alt_mem_onchip_mem+0xff8041d0>
  80c574:	817fe736 	bltu	r16,r5,80c514 <__alt_mem_onchip_mem+0xff804514>
  80c578:	280f883a 	mov	r7,r5
  80c57c:	0009883a 	mov	r4,zero
  80c580:	003fb106 	br	80c448 <__alt_mem_onchip_mem+0xff804448>

0080c584 <__adddf3>:
  80c584:	02c00434 	movhi	r11,16
  80c588:	5affffc4 	addi	r11,r11,-1
  80c58c:	2806d7fa 	srli	r3,r5,31
  80c590:	2ad4703a 	and	r10,r5,r11
  80c594:	3ad2703a 	and	r9,r7,r11
  80c598:	3804d53a 	srli	r2,r7,20
  80c59c:	3018d77a 	srli	r12,r6,29
  80c5a0:	280ad53a 	srli	r5,r5,20
  80c5a4:	501490fa 	slli	r10,r10,3
  80c5a8:	2010d77a 	srli	r8,r4,29
  80c5ac:	481290fa 	slli	r9,r9,3
  80c5b0:	380ed7fa 	srli	r7,r7,31
  80c5b4:	defffb04 	addi	sp,sp,-20
  80c5b8:	dc800215 	stw	r18,8(sp)
  80c5bc:	dc400115 	stw	r17,4(sp)
  80c5c0:	dc000015 	stw	r16,0(sp)
  80c5c4:	dfc00415 	stw	ra,16(sp)
  80c5c8:	dcc00315 	stw	r19,12(sp)
  80c5cc:	1c803fcc 	andi	r18,r3,255
  80c5d0:	2c01ffcc 	andi	r16,r5,2047
  80c5d4:	5210b03a 	or	r8,r10,r8
  80c5d8:	202290fa 	slli	r17,r4,3
  80c5dc:	1081ffcc 	andi	r2,r2,2047
  80c5e0:	4b12b03a 	or	r9,r9,r12
  80c5e4:	300c90fa 	slli	r6,r6,3
  80c5e8:	91c07526 	beq	r18,r7,80c7c0 <__adddf3+0x23c>
  80c5ec:	8087c83a 	sub	r3,r16,r2
  80c5f0:	00c0ab0e 	bge	zero,r3,80c8a0 <__adddf3+0x31c>
  80c5f4:	10002a1e 	bne	r2,zero,80c6a0 <__adddf3+0x11c>
  80c5f8:	4984b03a 	or	r2,r9,r6
  80c5fc:	1000961e 	bne	r2,zero,80c858 <__adddf3+0x2d4>
  80c600:	888001cc 	andi	r2,r17,7
  80c604:	10000726 	beq	r2,zero,80c624 <__adddf3+0xa0>
  80c608:	888003cc 	andi	r2,r17,15
  80c60c:	00c00104 	movi	r3,4
  80c610:	10c00426 	beq	r2,r3,80c624 <__adddf3+0xa0>
  80c614:	88c7883a 	add	r3,r17,r3
  80c618:	1c63803a 	cmpltu	r17,r3,r17
  80c61c:	4451883a 	add	r8,r8,r17
  80c620:	1823883a 	mov	r17,r3
  80c624:	4080202c 	andhi	r2,r8,128
  80c628:	10005926 	beq	r2,zero,80c790 <__adddf3+0x20c>
  80c62c:	84000044 	addi	r16,r16,1
  80c630:	0081ffc4 	movi	r2,2047
  80c634:	8080ba26 	beq	r16,r2,80c920 <__adddf3+0x39c>
  80c638:	00bfe034 	movhi	r2,65408
  80c63c:	10bfffc4 	addi	r2,r2,-1
  80c640:	4090703a 	and	r8,r8,r2
  80c644:	4004977a 	slli	r2,r8,29
  80c648:	4010927a 	slli	r8,r8,9
  80c64c:	8822d0fa 	srli	r17,r17,3
  80c650:	8401ffcc 	andi	r16,r16,2047
  80c654:	4010d33a 	srli	r8,r8,12
  80c658:	9007883a 	mov	r3,r18
  80c65c:	1444b03a 	or	r2,r2,r17
  80c660:	8401ffcc 	andi	r16,r16,2047
  80c664:	8020953a 	slli	r16,r16,20
  80c668:	18c03fcc 	andi	r3,r3,255
  80c66c:	01000434 	movhi	r4,16
  80c670:	213fffc4 	addi	r4,r4,-1
  80c674:	180697fa 	slli	r3,r3,31
  80c678:	4110703a 	and	r8,r8,r4
  80c67c:	4410b03a 	or	r8,r8,r16
  80c680:	40c6b03a 	or	r3,r8,r3
  80c684:	dfc00417 	ldw	ra,16(sp)
  80c688:	dcc00317 	ldw	r19,12(sp)
  80c68c:	dc800217 	ldw	r18,8(sp)
  80c690:	dc400117 	ldw	r17,4(sp)
  80c694:	dc000017 	ldw	r16,0(sp)
  80c698:	dec00504 	addi	sp,sp,20
  80c69c:	f800283a 	ret
  80c6a0:	0081ffc4 	movi	r2,2047
  80c6a4:	80bfd626 	beq	r16,r2,80c600 <__alt_mem_onchip_mem+0xff804600>
  80c6a8:	4a402034 	orhi	r9,r9,128
  80c6ac:	00800e04 	movi	r2,56
  80c6b0:	10c09f16 	blt	r2,r3,80c930 <__adddf3+0x3ac>
  80c6b4:	008007c4 	movi	r2,31
  80c6b8:	10c0c216 	blt	r2,r3,80c9c4 <__adddf3+0x440>
  80c6bc:	00800804 	movi	r2,32
  80c6c0:	10c5c83a 	sub	r2,r2,r3
  80c6c4:	488a983a 	sll	r5,r9,r2
  80c6c8:	30c8d83a 	srl	r4,r6,r3
  80c6cc:	3084983a 	sll	r2,r6,r2
  80c6d0:	48c6d83a 	srl	r3,r9,r3
  80c6d4:	290cb03a 	or	r6,r5,r4
  80c6d8:	1004c03a 	cmpne	r2,r2,zero
  80c6dc:	308cb03a 	or	r6,r6,r2
  80c6e0:	898dc83a 	sub	r6,r17,r6
  80c6e4:	89a3803a 	cmpltu	r17,r17,r6
  80c6e8:	40d1c83a 	sub	r8,r8,r3
  80c6ec:	4451c83a 	sub	r8,r8,r17
  80c6f0:	3023883a 	mov	r17,r6
  80c6f4:	4080202c 	andhi	r2,r8,128
  80c6f8:	10002326 	beq	r2,zero,80c788 <__adddf3+0x204>
  80c6fc:	04c02034 	movhi	r19,128
  80c700:	9cffffc4 	addi	r19,r19,-1
  80c704:	44e6703a 	and	r19,r8,r19
  80c708:	98007626 	beq	r19,zero,80c8e4 <__adddf3+0x360>
  80c70c:	9809883a 	mov	r4,r19
  80c710:	080eb880 	call	80eb88 <__clzsi2>
  80c714:	10fffe04 	addi	r3,r2,-8
  80c718:	010007c4 	movi	r4,31
  80c71c:	20c07716 	blt	r4,r3,80c8fc <__adddf3+0x378>
  80c720:	00800804 	movi	r2,32
  80c724:	10c5c83a 	sub	r2,r2,r3
  80c728:	8884d83a 	srl	r2,r17,r2
  80c72c:	98d0983a 	sll	r8,r19,r3
  80c730:	88e2983a 	sll	r17,r17,r3
  80c734:	1204b03a 	or	r2,r2,r8
  80c738:	1c007416 	blt	r3,r16,80c90c <__adddf3+0x388>
  80c73c:	1c21c83a 	sub	r16,r3,r16
  80c740:	82000044 	addi	r8,r16,1
  80c744:	00c007c4 	movi	r3,31
  80c748:	1a009116 	blt	r3,r8,80c990 <__adddf3+0x40c>
  80c74c:	00c00804 	movi	r3,32
  80c750:	1a07c83a 	sub	r3,r3,r8
  80c754:	8a08d83a 	srl	r4,r17,r8
  80c758:	88e2983a 	sll	r17,r17,r3
  80c75c:	10c6983a 	sll	r3,r2,r3
  80c760:	1210d83a 	srl	r8,r2,r8
  80c764:	8804c03a 	cmpne	r2,r17,zero
  80c768:	1906b03a 	or	r3,r3,r4
  80c76c:	18a2b03a 	or	r17,r3,r2
  80c770:	0021883a 	mov	r16,zero
  80c774:	003fa206 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80c778:	1890b03a 	or	r8,r3,r2
  80c77c:	40017d26 	beq	r8,zero,80cd74 <__adddf3+0x7f0>
  80c780:	1011883a 	mov	r8,r2
  80c784:	1823883a 	mov	r17,r3
  80c788:	888001cc 	andi	r2,r17,7
  80c78c:	103f9e1e 	bne	r2,zero,80c608 <__alt_mem_onchip_mem+0xff804608>
  80c790:	4004977a 	slli	r2,r8,29
  80c794:	8822d0fa 	srli	r17,r17,3
  80c798:	4010d0fa 	srli	r8,r8,3
  80c79c:	9007883a 	mov	r3,r18
  80c7a0:	1444b03a 	or	r2,r2,r17
  80c7a4:	0101ffc4 	movi	r4,2047
  80c7a8:	81002426 	beq	r16,r4,80c83c <__adddf3+0x2b8>
  80c7ac:	8120703a 	and	r16,r16,r4
  80c7b0:	01000434 	movhi	r4,16
  80c7b4:	213fffc4 	addi	r4,r4,-1
  80c7b8:	4110703a 	and	r8,r8,r4
  80c7bc:	003fa806 	br	80c660 <__alt_mem_onchip_mem+0xff804660>
  80c7c0:	8089c83a 	sub	r4,r16,r2
  80c7c4:	01005e0e 	bge	zero,r4,80c940 <__adddf3+0x3bc>
  80c7c8:	10002b26 	beq	r2,zero,80c878 <__adddf3+0x2f4>
  80c7cc:	0081ffc4 	movi	r2,2047
  80c7d0:	80bf8b26 	beq	r16,r2,80c600 <__alt_mem_onchip_mem+0xff804600>
  80c7d4:	4a402034 	orhi	r9,r9,128
  80c7d8:	00800e04 	movi	r2,56
  80c7dc:	1100a40e 	bge	r2,r4,80ca70 <__adddf3+0x4ec>
  80c7e0:	498cb03a 	or	r6,r9,r6
  80c7e4:	300ac03a 	cmpne	r5,r6,zero
  80c7e8:	0013883a 	mov	r9,zero
  80c7ec:	2c4b883a 	add	r5,r5,r17
  80c7f0:	2c63803a 	cmpltu	r17,r5,r17
  80c7f4:	4a11883a 	add	r8,r9,r8
  80c7f8:	8a11883a 	add	r8,r17,r8
  80c7fc:	2823883a 	mov	r17,r5
  80c800:	4080202c 	andhi	r2,r8,128
  80c804:	103fe026 	beq	r2,zero,80c788 <__alt_mem_onchip_mem+0xff804788>
  80c808:	84000044 	addi	r16,r16,1
  80c80c:	0081ffc4 	movi	r2,2047
  80c810:	8080d226 	beq	r16,r2,80cb5c <__adddf3+0x5d8>
  80c814:	00bfe034 	movhi	r2,65408
  80c818:	10bfffc4 	addi	r2,r2,-1
  80c81c:	4090703a 	and	r8,r8,r2
  80c820:	880ad07a 	srli	r5,r17,1
  80c824:	400897fa 	slli	r4,r8,31
  80c828:	88c0004c 	andi	r3,r17,1
  80c82c:	28e2b03a 	or	r17,r5,r3
  80c830:	4010d07a 	srli	r8,r8,1
  80c834:	2462b03a 	or	r17,r4,r17
  80c838:	003f7106 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80c83c:	4088b03a 	or	r4,r8,r2
  80c840:	20014526 	beq	r4,zero,80cd58 <__adddf3+0x7d4>
  80c844:	01000434 	movhi	r4,16
  80c848:	42000234 	orhi	r8,r8,8
  80c84c:	213fffc4 	addi	r4,r4,-1
  80c850:	4110703a 	and	r8,r8,r4
  80c854:	003f8206 	br	80c660 <__alt_mem_onchip_mem+0xff804660>
  80c858:	18ffffc4 	addi	r3,r3,-1
  80c85c:	1800491e 	bne	r3,zero,80c984 <__adddf3+0x400>
  80c860:	898bc83a 	sub	r5,r17,r6
  80c864:	8963803a 	cmpltu	r17,r17,r5
  80c868:	4251c83a 	sub	r8,r8,r9
  80c86c:	4451c83a 	sub	r8,r8,r17
  80c870:	2823883a 	mov	r17,r5
  80c874:	003f9f06 	br	80c6f4 <__alt_mem_onchip_mem+0xff8046f4>
  80c878:	4984b03a 	or	r2,r9,r6
  80c87c:	103f6026 	beq	r2,zero,80c600 <__alt_mem_onchip_mem+0xff804600>
  80c880:	213fffc4 	addi	r4,r4,-1
  80c884:	2000931e 	bne	r4,zero,80cad4 <__adddf3+0x550>
  80c888:	898d883a 	add	r6,r17,r6
  80c88c:	3463803a 	cmpltu	r17,r6,r17
  80c890:	4251883a 	add	r8,r8,r9
  80c894:	8a11883a 	add	r8,r17,r8
  80c898:	3023883a 	mov	r17,r6
  80c89c:	003fd806 	br	80c800 <__alt_mem_onchip_mem+0xff804800>
  80c8a0:	1800541e 	bne	r3,zero,80c9f4 <__adddf3+0x470>
  80c8a4:	80800044 	addi	r2,r16,1
  80c8a8:	1081ffcc 	andi	r2,r2,2047
  80c8ac:	00c00044 	movi	r3,1
  80c8b0:	1880a00e 	bge	r3,r2,80cb34 <__adddf3+0x5b0>
  80c8b4:	8989c83a 	sub	r4,r17,r6
  80c8b8:	8905803a 	cmpltu	r2,r17,r4
  80c8bc:	4267c83a 	sub	r19,r8,r9
  80c8c0:	98a7c83a 	sub	r19,r19,r2
  80c8c4:	9880202c 	andhi	r2,r19,128
  80c8c8:	10006326 	beq	r2,zero,80ca58 <__adddf3+0x4d4>
  80c8cc:	3463c83a 	sub	r17,r6,r17
  80c8d0:	4a07c83a 	sub	r3,r9,r8
  80c8d4:	344d803a 	cmpltu	r6,r6,r17
  80c8d8:	19a7c83a 	sub	r19,r3,r6
  80c8dc:	3825883a 	mov	r18,r7
  80c8e0:	983f8a1e 	bne	r19,zero,80c70c <__alt_mem_onchip_mem+0xff80470c>
  80c8e4:	8809883a 	mov	r4,r17
  80c8e8:	080eb880 	call	80eb88 <__clzsi2>
  80c8ec:	10800804 	addi	r2,r2,32
  80c8f0:	10fffe04 	addi	r3,r2,-8
  80c8f4:	010007c4 	movi	r4,31
  80c8f8:	20ff890e 	bge	r4,r3,80c720 <__alt_mem_onchip_mem+0xff804720>
  80c8fc:	10bff604 	addi	r2,r2,-40
  80c900:	8884983a 	sll	r2,r17,r2
  80c904:	0023883a 	mov	r17,zero
  80c908:	1c3f8c0e 	bge	r3,r16,80c73c <__alt_mem_onchip_mem+0xff80473c>
  80c90c:	023fe034 	movhi	r8,65408
  80c910:	423fffc4 	addi	r8,r8,-1
  80c914:	80e1c83a 	sub	r16,r16,r3
  80c918:	1210703a 	and	r8,r2,r8
  80c91c:	003f3806 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80c920:	9007883a 	mov	r3,r18
  80c924:	0011883a 	mov	r8,zero
  80c928:	0005883a 	mov	r2,zero
  80c92c:	003f4c06 	br	80c660 <__alt_mem_onchip_mem+0xff804660>
  80c930:	498cb03a 	or	r6,r9,r6
  80c934:	300cc03a 	cmpne	r6,r6,zero
  80c938:	0007883a 	mov	r3,zero
  80c93c:	003f6806 	br	80c6e0 <__alt_mem_onchip_mem+0xff8046e0>
  80c940:	20009c1e 	bne	r4,zero,80cbb4 <__adddf3+0x630>
  80c944:	80800044 	addi	r2,r16,1
  80c948:	1141ffcc 	andi	r5,r2,2047
  80c94c:	01000044 	movi	r4,1
  80c950:	2140670e 	bge	r4,r5,80caf0 <__adddf3+0x56c>
  80c954:	0101ffc4 	movi	r4,2047
  80c958:	11007f26 	beq	r2,r4,80cb58 <__adddf3+0x5d4>
  80c95c:	898d883a 	add	r6,r17,r6
  80c960:	4247883a 	add	r3,r8,r9
  80c964:	3451803a 	cmpltu	r8,r6,r17
  80c968:	40d1883a 	add	r8,r8,r3
  80c96c:	402297fa 	slli	r17,r8,31
  80c970:	300cd07a 	srli	r6,r6,1
  80c974:	4010d07a 	srli	r8,r8,1
  80c978:	1021883a 	mov	r16,r2
  80c97c:	89a2b03a 	or	r17,r17,r6
  80c980:	003f1f06 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80c984:	0081ffc4 	movi	r2,2047
  80c988:	80bf481e 	bne	r16,r2,80c6ac <__alt_mem_onchip_mem+0xff8046ac>
  80c98c:	003f1c06 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80c990:	843ff844 	addi	r16,r16,-31
  80c994:	01000804 	movi	r4,32
  80c998:	1406d83a 	srl	r3,r2,r16
  80c99c:	41005026 	beq	r8,r4,80cae0 <__adddf3+0x55c>
  80c9a0:	01001004 	movi	r4,64
  80c9a4:	2211c83a 	sub	r8,r4,r8
  80c9a8:	1204983a 	sll	r2,r2,r8
  80c9ac:	88a2b03a 	or	r17,r17,r2
  80c9b0:	8822c03a 	cmpne	r17,r17,zero
  80c9b4:	1c62b03a 	or	r17,r3,r17
  80c9b8:	0011883a 	mov	r8,zero
  80c9bc:	0021883a 	mov	r16,zero
  80c9c0:	003f7106 	br	80c788 <__alt_mem_onchip_mem+0xff804788>
  80c9c4:	193ff804 	addi	r4,r3,-32
  80c9c8:	00800804 	movi	r2,32
  80c9cc:	4908d83a 	srl	r4,r9,r4
  80c9d0:	18804526 	beq	r3,r2,80cae8 <__adddf3+0x564>
  80c9d4:	00801004 	movi	r2,64
  80c9d8:	10c5c83a 	sub	r2,r2,r3
  80c9dc:	4886983a 	sll	r3,r9,r2
  80c9e0:	198cb03a 	or	r6,r3,r6
  80c9e4:	300cc03a 	cmpne	r6,r6,zero
  80c9e8:	218cb03a 	or	r6,r4,r6
  80c9ec:	0007883a 	mov	r3,zero
  80c9f0:	003f3b06 	br	80c6e0 <__alt_mem_onchip_mem+0xff8046e0>
  80c9f4:	80002a26 	beq	r16,zero,80caa0 <__adddf3+0x51c>
  80c9f8:	0101ffc4 	movi	r4,2047
  80c9fc:	11006826 	beq	r2,r4,80cba0 <__adddf3+0x61c>
  80ca00:	00c7c83a 	sub	r3,zero,r3
  80ca04:	42002034 	orhi	r8,r8,128
  80ca08:	01000e04 	movi	r4,56
  80ca0c:	20c07c16 	blt	r4,r3,80cc00 <__adddf3+0x67c>
  80ca10:	010007c4 	movi	r4,31
  80ca14:	20c0da16 	blt	r4,r3,80cd80 <__adddf3+0x7fc>
  80ca18:	01000804 	movi	r4,32
  80ca1c:	20c9c83a 	sub	r4,r4,r3
  80ca20:	4114983a 	sll	r10,r8,r4
  80ca24:	88cad83a 	srl	r5,r17,r3
  80ca28:	8908983a 	sll	r4,r17,r4
  80ca2c:	40c6d83a 	srl	r3,r8,r3
  80ca30:	5162b03a 	or	r17,r10,r5
  80ca34:	2008c03a 	cmpne	r4,r4,zero
  80ca38:	8922b03a 	or	r17,r17,r4
  80ca3c:	3463c83a 	sub	r17,r6,r17
  80ca40:	48c7c83a 	sub	r3,r9,r3
  80ca44:	344d803a 	cmpltu	r6,r6,r17
  80ca48:	1991c83a 	sub	r8,r3,r6
  80ca4c:	1021883a 	mov	r16,r2
  80ca50:	3825883a 	mov	r18,r7
  80ca54:	003f2706 	br	80c6f4 <__alt_mem_onchip_mem+0xff8046f4>
  80ca58:	24d0b03a 	or	r8,r4,r19
  80ca5c:	40001b1e 	bne	r8,zero,80cacc <__adddf3+0x548>
  80ca60:	0005883a 	mov	r2,zero
  80ca64:	0007883a 	mov	r3,zero
  80ca68:	0021883a 	mov	r16,zero
  80ca6c:	003f4d06 	br	80c7a4 <__alt_mem_onchip_mem+0xff8047a4>
  80ca70:	008007c4 	movi	r2,31
  80ca74:	11003c16 	blt	r2,r4,80cb68 <__adddf3+0x5e4>
  80ca78:	00800804 	movi	r2,32
  80ca7c:	1105c83a 	sub	r2,r2,r4
  80ca80:	488e983a 	sll	r7,r9,r2
  80ca84:	310ad83a 	srl	r5,r6,r4
  80ca88:	3084983a 	sll	r2,r6,r2
  80ca8c:	4912d83a 	srl	r9,r9,r4
  80ca90:	394ab03a 	or	r5,r7,r5
  80ca94:	1004c03a 	cmpne	r2,r2,zero
  80ca98:	288ab03a 	or	r5,r5,r2
  80ca9c:	003f5306 	br	80c7ec <__alt_mem_onchip_mem+0xff8047ec>
  80caa0:	4448b03a 	or	r4,r8,r17
  80caa4:	20003e26 	beq	r4,zero,80cba0 <__adddf3+0x61c>
  80caa8:	00c6303a 	nor	r3,zero,r3
  80caac:	18003a1e 	bne	r3,zero,80cb98 <__adddf3+0x614>
  80cab0:	3463c83a 	sub	r17,r6,r17
  80cab4:	4a07c83a 	sub	r3,r9,r8
  80cab8:	344d803a 	cmpltu	r6,r6,r17
  80cabc:	1991c83a 	sub	r8,r3,r6
  80cac0:	1021883a 	mov	r16,r2
  80cac4:	3825883a 	mov	r18,r7
  80cac8:	003f0a06 	br	80c6f4 <__alt_mem_onchip_mem+0xff8046f4>
  80cacc:	2023883a 	mov	r17,r4
  80cad0:	003f0d06 	br	80c708 <__alt_mem_onchip_mem+0xff804708>
  80cad4:	0081ffc4 	movi	r2,2047
  80cad8:	80bf3f1e 	bne	r16,r2,80c7d8 <__alt_mem_onchip_mem+0xff8047d8>
  80cadc:	003ec806 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80cae0:	0005883a 	mov	r2,zero
  80cae4:	003fb106 	br	80c9ac <__alt_mem_onchip_mem+0xff8049ac>
  80cae8:	0007883a 	mov	r3,zero
  80caec:	003fbc06 	br	80c9e0 <__alt_mem_onchip_mem+0xff8049e0>
  80caf0:	4444b03a 	or	r2,r8,r17
  80caf4:	8000871e 	bne	r16,zero,80cd14 <__adddf3+0x790>
  80caf8:	1000ba26 	beq	r2,zero,80cde4 <__adddf3+0x860>
  80cafc:	4984b03a 	or	r2,r9,r6
  80cb00:	103ebf26 	beq	r2,zero,80c600 <__alt_mem_onchip_mem+0xff804600>
  80cb04:	8985883a 	add	r2,r17,r6
  80cb08:	4247883a 	add	r3,r8,r9
  80cb0c:	1451803a 	cmpltu	r8,r2,r17
  80cb10:	40d1883a 	add	r8,r8,r3
  80cb14:	40c0202c 	andhi	r3,r8,128
  80cb18:	1023883a 	mov	r17,r2
  80cb1c:	183f1a26 	beq	r3,zero,80c788 <__alt_mem_onchip_mem+0xff804788>
  80cb20:	00bfe034 	movhi	r2,65408
  80cb24:	10bfffc4 	addi	r2,r2,-1
  80cb28:	2021883a 	mov	r16,r4
  80cb2c:	4090703a 	and	r8,r8,r2
  80cb30:	003eb306 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80cb34:	4444b03a 	or	r2,r8,r17
  80cb38:	8000291e 	bne	r16,zero,80cbe0 <__adddf3+0x65c>
  80cb3c:	10004b1e 	bne	r2,zero,80cc6c <__adddf3+0x6e8>
  80cb40:	4990b03a 	or	r8,r9,r6
  80cb44:	40008b26 	beq	r8,zero,80cd74 <__adddf3+0x7f0>
  80cb48:	4811883a 	mov	r8,r9
  80cb4c:	3023883a 	mov	r17,r6
  80cb50:	3825883a 	mov	r18,r7
  80cb54:	003eaa06 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80cb58:	1021883a 	mov	r16,r2
  80cb5c:	0011883a 	mov	r8,zero
  80cb60:	0005883a 	mov	r2,zero
  80cb64:	003f0f06 	br	80c7a4 <__alt_mem_onchip_mem+0xff8047a4>
  80cb68:	217ff804 	addi	r5,r4,-32
  80cb6c:	00800804 	movi	r2,32
  80cb70:	494ad83a 	srl	r5,r9,r5
  80cb74:	20807d26 	beq	r4,r2,80cd6c <__adddf3+0x7e8>
  80cb78:	00801004 	movi	r2,64
  80cb7c:	1109c83a 	sub	r4,r2,r4
  80cb80:	4912983a 	sll	r9,r9,r4
  80cb84:	498cb03a 	or	r6,r9,r6
  80cb88:	300cc03a 	cmpne	r6,r6,zero
  80cb8c:	298ab03a 	or	r5,r5,r6
  80cb90:	0013883a 	mov	r9,zero
  80cb94:	003f1506 	br	80c7ec <__alt_mem_onchip_mem+0xff8047ec>
  80cb98:	0101ffc4 	movi	r4,2047
  80cb9c:	113f9a1e 	bne	r2,r4,80ca08 <__alt_mem_onchip_mem+0xff804a08>
  80cba0:	4811883a 	mov	r8,r9
  80cba4:	3023883a 	mov	r17,r6
  80cba8:	1021883a 	mov	r16,r2
  80cbac:	3825883a 	mov	r18,r7
  80cbb0:	003e9306 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80cbb4:	8000161e 	bne	r16,zero,80cc10 <__adddf3+0x68c>
  80cbb8:	444ab03a 	or	r5,r8,r17
  80cbbc:	28005126 	beq	r5,zero,80cd04 <__adddf3+0x780>
  80cbc0:	0108303a 	nor	r4,zero,r4
  80cbc4:	20004d1e 	bne	r4,zero,80ccfc <__adddf3+0x778>
  80cbc8:	89a3883a 	add	r17,r17,r6
  80cbcc:	4253883a 	add	r9,r8,r9
  80cbd0:	898d803a 	cmpltu	r6,r17,r6
  80cbd4:	3251883a 	add	r8,r6,r9
  80cbd8:	1021883a 	mov	r16,r2
  80cbdc:	003f0806 	br	80c800 <__alt_mem_onchip_mem+0xff804800>
  80cbe0:	1000301e 	bne	r2,zero,80cca4 <__adddf3+0x720>
  80cbe4:	4984b03a 	or	r2,r9,r6
  80cbe8:	10007126 	beq	r2,zero,80cdb0 <__adddf3+0x82c>
  80cbec:	4811883a 	mov	r8,r9
  80cbf0:	3023883a 	mov	r17,r6
  80cbf4:	3825883a 	mov	r18,r7
  80cbf8:	0401ffc4 	movi	r16,2047
  80cbfc:	003e8006 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80cc00:	4462b03a 	or	r17,r8,r17
  80cc04:	8822c03a 	cmpne	r17,r17,zero
  80cc08:	0007883a 	mov	r3,zero
  80cc0c:	003f8b06 	br	80ca3c <__alt_mem_onchip_mem+0xff804a3c>
  80cc10:	0141ffc4 	movi	r5,2047
  80cc14:	11403b26 	beq	r2,r5,80cd04 <__adddf3+0x780>
  80cc18:	0109c83a 	sub	r4,zero,r4
  80cc1c:	42002034 	orhi	r8,r8,128
  80cc20:	01400e04 	movi	r5,56
  80cc24:	29006716 	blt	r5,r4,80cdc4 <__adddf3+0x840>
  80cc28:	014007c4 	movi	r5,31
  80cc2c:	29007016 	blt	r5,r4,80cdf0 <__adddf3+0x86c>
  80cc30:	01400804 	movi	r5,32
  80cc34:	290bc83a 	sub	r5,r5,r4
  80cc38:	4154983a 	sll	r10,r8,r5
  80cc3c:	890ed83a 	srl	r7,r17,r4
  80cc40:	894a983a 	sll	r5,r17,r5
  80cc44:	4108d83a 	srl	r4,r8,r4
  80cc48:	51e2b03a 	or	r17,r10,r7
  80cc4c:	280ac03a 	cmpne	r5,r5,zero
  80cc50:	8962b03a 	or	r17,r17,r5
  80cc54:	89a3883a 	add	r17,r17,r6
  80cc58:	2253883a 	add	r9,r4,r9
  80cc5c:	898d803a 	cmpltu	r6,r17,r6
  80cc60:	3251883a 	add	r8,r6,r9
  80cc64:	1021883a 	mov	r16,r2
  80cc68:	003ee506 	br	80c800 <__alt_mem_onchip_mem+0xff804800>
  80cc6c:	4984b03a 	or	r2,r9,r6
  80cc70:	103e6326 	beq	r2,zero,80c600 <__alt_mem_onchip_mem+0xff804600>
  80cc74:	8987c83a 	sub	r3,r17,r6
  80cc78:	88c9803a 	cmpltu	r4,r17,r3
  80cc7c:	4245c83a 	sub	r2,r8,r9
  80cc80:	1105c83a 	sub	r2,r2,r4
  80cc84:	1100202c 	andhi	r4,r2,128
  80cc88:	203ebb26 	beq	r4,zero,80c778 <__alt_mem_onchip_mem+0xff804778>
  80cc8c:	3463c83a 	sub	r17,r6,r17
  80cc90:	4a07c83a 	sub	r3,r9,r8
  80cc94:	344d803a 	cmpltu	r6,r6,r17
  80cc98:	1991c83a 	sub	r8,r3,r6
  80cc9c:	3825883a 	mov	r18,r7
  80cca0:	003e5706 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80cca4:	4984b03a 	or	r2,r9,r6
  80cca8:	10002e26 	beq	r2,zero,80cd64 <__adddf3+0x7e0>
  80ccac:	4004d0fa 	srli	r2,r8,3
  80ccb0:	8822d0fa 	srli	r17,r17,3
  80ccb4:	4010977a 	slli	r8,r8,29
  80ccb8:	10c0022c 	andhi	r3,r2,8
  80ccbc:	4462b03a 	or	r17,r8,r17
  80ccc0:	18000826 	beq	r3,zero,80cce4 <__adddf3+0x760>
  80ccc4:	4808d0fa 	srli	r4,r9,3
  80ccc8:	20c0022c 	andhi	r3,r4,8
  80cccc:	1800051e 	bne	r3,zero,80cce4 <__adddf3+0x760>
  80ccd0:	300cd0fa 	srli	r6,r6,3
  80ccd4:	4806977a 	slli	r3,r9,29
  80ccd8:	2005883a 	mov	r2,r4
  80ccdc:	3825883a 	mov	r18,r7
  80cce0:	19a2b03a 	or	r17,r3,r6
  80cce4:	8810d77a 	srli	r8,r17,29
  80cce8:	100490fa 	slli	r2,r2,3
  80ccec:	882290fa 	slli	r17,r17,3
  80ccf0:	0401ffc4 	movi	r16,2047
  80ccf4:	4090b03a 	or	r8,r8,r2
  80ccf8:	003e4106 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80ccfc:	0141ffc4 	movi	r5,2047
  80cd00:	117fc71e 	bne	r2,r5,80cc20 <__alt_mem_onchip_mem+0xff804c20>
  80cd04:	4811883a 	mov	r8,r9
  80cd08:	3023883a 	mov	r17,r6
  80cd0c:	1021883a 	mov	r16,r2
  80cd10:	003e3b06 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80cd14:	10002f26 	beq	r2,zero,80cdd4 <__adddf3+0x850>
  80cd18:	4984b03a 	or	r2,r9,r6
  80cd1c:	10001126 	beq	r2,zero,80cd64 <__adddf3+0x7e0>
  80cd20:	4004d0fa 	srli	r2,r8,3
  80cd24:	8822d0fa 	srli	r17,r17,3
  80cd28:	4010977a 	slli	r8,r8,29
  80cd2c:	10c0022c 	andhi	r3,r2,8
  80cd30:	4462b03a 	or	r17,r8,r17
  80cd34:	183feb26 	beq	r3,zero,80cce4 <__alt_mem_onchip_mem+0xff804ce4>
  80cd38:	4808d0fa 	srli	r4,r9,3
  80cd3c:	20c0022c 	andhi	r3,r4,8
  80cd40:	183fe81e 	bne	r3,zero,80cce4 <__alt_mem_onchip_mem+0xff804ce4>
  80cd44:	300cd0fa 	srli	r6,r6,3
  80cd48:	4806977a 	slli	r3,r9,29
  80cd4c:	2005883a 	mov	r2,r4
  80cd50:	19a2b03a 	or	r17,r3,r6
  80cd54:	003fe306 	br	80cce4 <__alt_mem_onchip_mem+0xff804ce4>
  80cd58:	0011883a 	mov	r8,zero
  80cd5c:	0005883a 	mov	r2,zero
  80cd60:	003e3f06 	br	80c660 <__alt_mem_onchip_mem+0xff804660>
  80cd64:	0401ffc4 	movi	r16,2047
  80cd68:	003e2506 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80cd6c:	0013883a 	mov	r9,zero
  80cd70:	003f8406 	br	80cb84 <__alt_mem_onchip_mem+0xff804b84>
  80cd74:	0005883a 	mov	r2,zero
  80cd78:	0007883a 	mov	r3,zero
  80cd7c:	003e8906 	br	80c7a4 <__alt_mem_onchip_mem+0xff8047a4>
  80cd80:	197ff804 	addi	r5,r3,-32
  80cd84:	01000804 	movi	r4,32
  80cd88:	414ad83a 	srl	r5,r8,r5
  80cd8c:	19002426 	beq	r3,r4,80ce20 <__adddf3+0x89c>
  80cd90:	01001004 	movi	r4,64
  80cd94:	20c7c83a 	sub	r3,r4,r3
  80cd98:	40c6983a 	sll	r3,r8,r3
  80cd9c:	1c46b03a 	or	r3,r3,r17
  80cda0:	1806c03a 	cmpne	r3,r3,zero
  80cda4:	28e2b03a 	or	r17,r5,r3
  80cda8:	0007883a 	mov	r3,zero
  80cdac:	003f2306 	br	80ca3c <__alt_mem_onchip_mem+0xff804a3c>
  80cdb0:	0007883a 	mov	r3,zero
  80cdb4:	5811883a 	mov	r8,r11
  80cdb8:	00bfffc4 	movi	r2,-1
  80cdbc:	0401ffc4 	movi	r16,2047
  80cdc0:	003e7806 	br	80c7a4 <__alt_mem_onchip_mem+0xff8047a4>
  80cdc4:	4462b03a 	or	r17,r8,r17
  80cdc8:	8822c03a 	cmpne	r17,r17,zero
  80cdcc:	0009883a 	mov	r4,zero
  80cdd0:	003fa006 	br	80cc54 <__alt_mem_onchip_mem+0xff804c54>
  80cdd4:	4811883a 	mov	r8,r9
  80cdd8:	3023883a 	mov	r17,r6
  80cddc:	0401ffc4 	movi	r16,2047
  80cde0:	003e0706 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80cde4:	4811883a 	mov	r8,r9
  80cde8:	3023883a 	mov	r17,r6
  80cdec:	003e0406 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80cdf0:	21fff804 	addi	r7,r4,-32
  80cdf4:	01400804 	movi	r5,32
  80cdf8:	41ced83a 	srl	r7,r8,r7
  80cdfc:	21400a26 	beq	r4,r5,80ce28 <__adddf3+0x8a4>
  80ce00:	01401004 	movi	r5,64
  80ce04:	2909c83a 	sub	r4,r5,r4
  80ce08:	4108983a 	sll	r4,r8,r4
  80ce0c:	2448b03a 	or	r4,r4,r17
  80ce10:	2008c03a 	cmpne	r4,r4,zero
  80ce14:	3922b03a 	or	r17,r7,r4
  80ce18:	0009883a 	mov	r4,zero
  80ce1c:	003f8d06 	br	80cc54 <__alt_mem_onchip_mem+0xff804c54>
  80ce20:	0007883a 	mov	r3,zero
  80ce24:	003fdd06 	br	80cd9c <__alt_mem_onchip_mem+0xff804d9c>
  80ce28:	0009883a 	mov	r4,zero
  80ce2c:	003ff706 	br	80ce0c <__alt_mem_onchip_mem+0xff804e0c>

0080ce30 <__divdf3>:
  80ce30:	defff204 	addi	sp,sp,-56
  80ce34:	dd400915 	stw	r21,36(sp)
  80ce38:	282ad53a 	srli	r21,r5,20
  80ce3c:	dd000815 	stw	r20,32(sp)
  80ce40:	2828d7fa 	srli	r20,r5,31
  80ce44:	dc000415 	stw	r16,16(sp)
  80ce48:	04000434 	movhi	r16,16
  80ce4c:	df000c15 	stw	fp,48(sp)
  80ce50:	843fffc4 	addi	r16,r16,-1
  80ce54:	dfc00d15 	stw	ra,52(sp)
  80ce58:	ddc00b15 	stw	r23,44(sp)
  80ce5c:	dd800a15 	stw	r22,40(sp)
  80ce60:	dcc00715 	stw	r19,28(sp)
  80ce64:	dc800615 	stw	r18,24(sp)
  80ce68:	dc400515 	stw	r17,20(sp)
  80ce6c:	ad41ffcc 	andi	r21,r21,2047
  80ce70:	2c20703a 	and	r16,r5,r16
  80ce74:	a7003fcc 	andi	fp,r20,255
  80ce78:	a8006126 	beq	r21,zero,80d000 <__divdf3+0x1d0>
  80ce7c:	0081ffc4 	movi	r2,2047
  80ce80:	2025883a 	mov	r18,r4
  80ce84:	a8803726 	beq	r21,r2,80cf64 <__divdf3+0x134>
  80ce88:	80800434 	orhi	r2,r16,16
  80ce8c:	100490fa 	slli	r2,r2,3
  80ce90:	2020d77a 	srli	r16,r4,29
  80ce94:	202490fa 	slli	r18,r4,3
  80ce98:	ad7f0044 	addi	r21,r21,-1023
  80ce9c:	80a0b03a 	or	r16,r16,r2
  80cea0:	0027883a 	mov	r19,zero
  80cea4:	0013883a 	mov	r9,zero
  80cea8:	3804d53a 	srli	r2,r7,20
  80ceac:	382cd7fa 	srli	r22,r7,31
  80ceb0:	04400434 	movhi	r17,16
  80ceb4:	8c7fffc4 	addi	r17,r17,-1
  80ceb8:	1081ffcc 	andi	r2,r2,2047
  80cebc:	3011883a 	mov	r8,r6
  80cec0:	3c62703a 	and	r17,r7,r17
  80cec4:	b5c03fcc 	andi	r23,r22,255
  80cec8:	10006c26 	beq	r2,zero,80d07c <__divdf3+0x24c>
  80cecc:	00c1ffc4 	movi	r3,2047
  80ced0:	10c06426 	beq	r2,r3,80d064 <__divdf3+0x234>
  80ced4:	88c00434 	orhi	r3,r17,16
  80ced8:	180690fa 	slli	r3,r3,3
  80cedc:	3022d77a 	srli	r17,r6,29
  80cee0:	301090fa 	slli	r8,r6,3
  80cee4:	10bf0044 	addi	r2,r2,-1023
  80cee8:	88e2b03a 	or	r17,r17,r3
  80ceec:	000f883a 	mov	r7,zero
  80cef0:	a58cf03a 	xor	r6,r20,r22
  80cef4:	3cc8b03a 	or	r4,r7,r19
  80cef8:	a8abc83a 	sub	r21,r21,r2
  80cefc:	008003c4 	movi	r2,15
  80cf00:	3007883a 	mov	r3,r6
  80cf04:	34c03fcc 	andi	r19,r6,255
  80cf08:	11009036 	bltu	r2,r4,80d14c <__divdf3+0x31c>
  80cf0c:	200890ba 	slli	r4,r4,2
  80cf10:	00802074 	movhi	r2,129
  80cf14:	10b3c904 	addi	r2,r2,-12508
  80cf18:	2089883a 	add	r4,r4,r2
  80cf1c:	20800017 	ldw	r2,0(r4)
  80cf20:	1000683a 	jmp	r2
  80cf24:	0080d14c 	andi	r2,zero,837
  80cf28:	0080cf9c 	xori	r2,zero,830
  80cf2c:	0080d13c 	xorhi	r2,zero,836
  80cf30:	0080cf90 	cmplti	r2,zero,830
  80cf34:	0080d13c 	xorhi	r2,zero,836
  80cf38:	0080d110 	cmplti	r2,zero,836
  80cf3c:	0080d13c 	xorhi	r2,zero,836
  80cf40:	0080cf90 	cmplti	r2,zero,830
  80cf44:	0080cf9c 	xori	r2,zero,830
  80cf48:	0080cf9c 	xori	r2,zero,830
  80cf4c:	0080d110 	cmplti	r2,zero,836
  80cf50:	0080cf90 	cmplti	r2,zero,830
  80cf54:	0080cf80 	call	80cf8 <__reset-0x77f308>
  80cf58:	0080cf80 	call	80cf8 <__reset-0x77f308>
  80cf5c:	0080cf80 	call	80cf8 <__reset-0x77f308>
  80cf60:	0080d430 	cmpltui	r2,zero,848
  80cf64:	2404b03a 	or	r2,r4,r16
  80cf68:	1000661e 	bne	r2,zero,80d104 <__divdf3+0x2d4>
  80cf6c:	04c00204 	movi	r19,8
  80cf70:	0021883a 	mov	r16,zero
  80cf74:	0025883a 	mov	r18,zero
  80cf78:	02400084 	movi	r9,2
  80cf7c:	003fca06 	br	80cea8 <__alt_mem_onchip_mem+0xff804ea8>
  80cf80:	8023883a 	mov	r17,r16
  80cf84:	9011883a 	mov	r8,r18
  80cf88:	e02f883a 	mov	r23,fp
  80cf8c:	480f883a 	mov	r7,r9
  80cf90:	00800084 	movi	r2,2
  80cf94:	3881311e 	bne	r7,r2,80d45c <__divdf3+0x62c>
  80cf98:	b827883a 	mov	r19,r23
  80cf9c:	98c0004c 	andi	r3,r19,1
  80cfa0:	0081ffc4 	movi	r2,2047
  80cfa4:	000b883a 	mov	r5,zero
  80cfa8:	0025883a 	mov	r18,zero
  80cfac:	1004953a 	slli	r2,r2,20
  80cfb0:	18c03fcc 	andi	r3,r3,255
  80cfb4:	04400434 	movhi	r17,16
  80cfb8:	8c7fffc4 	addi	r17,r17,-1
  80cfbc:	180697fa 	slli	r3,r3,31
  80cfc0:	2c4a703a 	and	r5,r5,r17
  80cfc4:	288ab03a 	or	r5,r5,r2
  80cfc8:	28c6b03a 	or	r3,r5,r3
  80cfcc:	9005883a 	mov	r2,r18
  80cfd0:	dfc00d17 	ldw	ra,52(sp)
  80cfd4:	df000c17 	ldw	fp,48(sp)
  80cfd8:	ddc00b17 	ldw	r23,44(sp)
  80cfdc:	dd800a17 	ldw	r22,40(sp)
  80cfe0:	dd400917 	ldw	r21,36(sp)
  80cfe4:	dd000817 	ldw	r20,32(sp)
  80cfe8:	dcc00717 	ldw	r19,28(sp)
  80cfec:	dc800617 	ldw	r18,24(sp)
  80cff0:	dc400517 	ldw	r17,20(sp)
  80cff4:	dc000417 	ldw	r16,16(sp)
  80cff8:	dec00e04 	addi	sp,sp,56
  80cffc:	f800283a 	ret
  80d000:	2404b03a 	or	r2,r4,r16
  80d004:	2027883a 	mov	r19,r4
  80d008:	10003926 	beq	r2,zero,80d0f0 <__divdf3+0x2c0>
  80d00c:	80012e26 	beq	r16,zero,80d4c8 <__divdf3+0x698>
  80d010:	8009883a 	mov	r4,r16
  80d014:	d9800315 	stw	r6,12(sp)
  80d018:	d9c00215 	stw	r7,8(sp)
  80d01c:	080eb880 	call	80eb88 <__clzsi2>
  80d020:	d9800317 	ldw	r6,12(sp)
  80d024:	d9c00217 	ldw	r7,8(sp)
  80d028:	113ffd44 	addi	r4,r2,-11
  80d02c:	00c00704 	movi	r3,28
  80d030:	19012116 	blt	r3,r4,80d4b8 <__divdf3+0x688>
  80d034:	00c00744 	movi	r3,29
  80d038:	147ffe04 	addi	r17,r2,-8
  80d03c:	1907c83a 	sub	r3,r3,r4
  80d040:	8460983a 	sll	r16,r16,r17
  80d044:	98c6d83a 	srl	r3,r19,r3
  80d048:	9c64983a 	sll	r18,r19,r17
  80d04c:	1c20b03a 	or	r16,r3,r16
  80d050:	1080fcc4 	addi	r2,r2,1011
  80d054:	00abc83a 	sub	r21,zero,r2
  80d058:	0027883a 	mov	r19,zero
  80d05c:	0013883a 	mov	r9,zero
  80d060:	003f9106 	br	80cea8 <__alt_mem_onchip_mem+0xff804ea8>
  80d064:	3446b03a 	or	r3,r6,r17
  80d068:	18001f1e 	bne	r3,zero,80d0e8 <__divdf3+0x2b8>
  80d06c:	0023883a 	mov	r17,zero
  80d070:	0011883a 	mov	r8,zero
  80d074:	01c00084 	movi	r7,2
  80d078:	003f9d06 	br	80cef0 <__alt_mem_onchip_mem+0xff804ef0>
  80d07c:	3446b03a 	or	r3,r6,r17
  80d080:	18001526 	beq	r3,zero,80d0d8 <__divdf3+0x2a8>
  80d084:	88011b26 	beq	r17,zero,80d4f4 <__divdf3+0x6c4>
  80d088:	8809883a 	mov	r4,r17
  80d08c:	d9800315 	stw	r6,12(sp)
  80d090:	da400115 	stw	r9,4(sp)
  80d094:	080eb880 	call	80eb88 <__clzsi2>
  80d098:	d9800317 	ldw	r6,12(sp)
  80d09c:	da400117 	ldw	r9,4(sp)
  80d0a0:	113ffd44 	addi	r4,r2,-11
  80d0a4:	00c00704 	movi	r3,28
  80d0a8:	19010e16 	blt	r3,r4,80d4e4 <__divdf3+0x6b4>
  80d0ac:	00c00744 	movi	r3,29
  80d0b0:	123ffe04 	addi	r8,r2,-8
  80d0b4:	1907c83a 	sub	r3,r3,r4
  80d0b8:	8a22983a 	sll	r17,r17,r8
  80d0bc:	30c6d83a 	srl	r3,r6,r3
  80d0c0:	3210983a 	sll	r8,r6,r8
  80d0c4:	1c62b03a 	or	r17,r3,r17
  80d0c8:	1080fcc4 	addi	r2,r2,1011
  80d0cc:	0085c83a 	sub	r2,zero,r2
  80d0d0:	000f883a 	mov	r7,zero
  80d0d4:	003f8606 	br	80cef0 <__alt_mem_onchip_mem+0xff804ef0>
  80d0d8:	0023883a 	mov	r17,zero
  80d0dc:	0011883a 	mov	r8,zero
  80d0e0:	01c00044 	movi	r7,1
  80d0e4:	003f8206 	br	80cef0 <__alt_mem_onchip_mem+0xff804ef0>
  80d0e8:	01c000c4 	movi	r7,3
  80d0ec:	003f8006 	br	80cef0 <__alt_mem_onchip_mem+0xff804ef0>
  80d0f0:	04c00104 	movi	r19,4
  80d0f4:	0021883a 	mov	r16,zero
  80d0f8:	0025883a 	mov	r18,zero
  80d0fc:	02400044 	movi	r9,1
  80d100:	003f6906 	br	80cea8 <__alt_mem_onchip_mem+0xff804ea8>
  80d104:	04c00304 	movi	r19,12
  80d108:	024000c4 	movi	r9,3
  80d10c:	003f6606 	br	80cea8 <__alt_mem_onchip_mem+0xff804ea8>
  80d110:	01400434 	movhi	r5,16
  80d114:	0007883a 	mov	r3,zero
  80d118:	297fffc4 	addi	r5,r5,-1
  80d11c:	04bfffc4 	movi	r18,-1
  80d120:	0081ffc4 	movi	r2,2047
  80d124:	003fa106 	br	80cfac <__alt_mem_onchip_mem+0xff804fac>
  80d128:	00c00044 	movi	r3,1
  80d12c:	1887c83a 	sub	r3,r3,r2
  80d130:	01000e04 	movi	r4,56
  80d134:	20c1210e 	bge	r4,r3,80d5bc <__divdf3+0x78c>
  80d138:	98c0004c 	andi	r3,r19,1
  80d13c:	0005883a 	mov	r2,zero
  80d140:	000b883a 	mov	r5,zero
  80d144:	0025883a 	mov	r18,zero
  80d148:	003f9806 	br	80cfac <__alt_mem_onchip_mem+0xff804fac>
  80d14c:	8c00fd36 	bltu	r17,r16,80d544 <__divdf3+0x714>
  80d150:	8440fb26 	beq	r16,r17,80d540 <__divdf3+0x710>
  80d154:	8007883a 	mov	r3,r16
  80d158:	ad7fffc4 	addi	r21,r21,-1
  80d15c:	0021883a 	mov	r16,zero
  80d160:	4004d63a 	srli	r2,r8,24
  80d164:	8822923a 	slli	r17,r17,8
  80d168:	1809883a 	mov	r4,r3
  80d16c:	402c923a 	slli	r22,r8,8
  80d170:	88b8b03a 	or	fp,r17,r2
  80d174:	e028d43a 	srli	r20,fp,16
  80d178:	d8c00015 	stw	r3,0(sp)
  80d17c:	e5ffffcc 	andi	r23,fp,65535
  80d180:	a00b883a 	mov	r5,r20
  80d184:	08014d00 	call	8014d0 <__udivsi3>
  80d188:	d8c00017 	ldw	r3,0(sp)
  80d18c:	a00b883a 	mov	r5,r20
  80d190:	d8800315 	stw	r2,12(sp)
  80d194:	1809883a 	mov	r4,r3
  80d198:	08015340 	call	801534 <__umodsi3>
  80d19c:	d9800317 	ldw	r6,12(sp)
  80d1a0:	1006943a 	slli	r3,r2,16
  80d1a4:	9004d43a 	srli	r2,r18,16
  80d1a8:	b9a3383a 	mul	r17,r23,r6
  80d1ac:	10c4b03a 	or	r2,r2,r3
  80d1b0:	1440062e 	bgeu	r2,r17,80d1cc <__divdf3+0x39c>
  80d1b4:	1705883a 	add	r2,r2,fp
  80d1b8:	30ffffc4 	addi	r3,r6,-1
  80d1bc:	1700ee36 	bltu	r2,fp,80d578 <__divdf3+0x748>
  80d1c0:	1440ed2e 	bgeu	r2,r17,80d578 <__divdf3+0x748>
  80d1c4:	31bfff84 	addi	r6,r6,-2
  80d1c8:	1705883a 	add	r2,r2,fp
  80d1cc:	1463c83a 	sub	r17,r2,r17
  80d1d0:	a00b883a 	mov	r5,r20
  80d1d4:	8809883a 	mov	r4,r17
  80d1d8:	d9800315 	stw	r6,12(sp)
  80d1dc:	08014d00 	call	8014d0 <__udivsi3>
  80d1e0:	a00b883a 	mov	r5,r20
  80d1e4:	8809883a 	mov	r4,r17
  80d1e8:	d8800215 	stw	r2,8(sp)
  80d1ec:	08015340 	call	801534 <__umodsi3>
  80d1f0:	d9c00217 	ldw	r7,8(sp)
  80d1f4:	1004943a 	slli	r2,r2,16
  80d1f8:	94bfffcc 	andi	r18,r18,65535
  80d1fc:	b9d1383a 	mul	r8,r23,r7
  80d200:	90a4b03a 	or	r18,r18,r2
  80d204:	d9800317 	ldw	r6,12(sp)
  80d208:	9200062e 	bgeu	r18,r8,80d224 <__divdf3+0x3f4>
  80d20c:	9725883a 	add	r18,r18,fp
  80d210:	38bfffc4 	addi	r2,r7,-1
  80d214:	9700d636 	bltu	r18,fp,80d570 <__divdf3+0x740>
  80d218:	9200d52e 	bgeu	r18,r8,80d570 <__divdf3+0x740>
  80d21c:	39ffff84 	addi	r7,r7,-2
  80d220:	9725883a 	add	r18,r18,fp
  80d224:	3004943a 	slli	r2,r6,16
  80d228:	b012d43a 	srli	r9,r22,16
  80d22c:	b1bfffcc 	andi	r6,r22,65535
  80d230:	11e2b03a 	or	r17,r2,r7
  80d234:	8806d43a 	srli	r3,r17,16
  80d238:	893fffcc 	andi	r4,r17,65535
  80d23c:	218b383a 	mul	r5,r4,r6
  80d240:	30c5383a 	mul	r2,r6,r3
  80d244:	2249383a 	mul	r4,r4,r9
  80d248:	280ed43a 	srli	r7,r5,16
  80d24c:	9225c83a 	sub	r18,r18,r8
  80d250:	2089883a 	add	r4,r4,r2
  80d254:	3909883a 	add	r4,r7,r4
  80d258:	1a47383a 	mul	r3,r3,r9
  80d25c:	2080022e 	bgeu	r4,r2,80d268 <__divdf3+0x438>
  80d260:	00800074 	movhi	r2,1
  80d264:	1887883a 	add	r3,r3,r2
  80d268:	2004d43a 	srli	r2,r4,16
  80d26c:	2008943a 	slli	r4,r4,16
  80d270:	297fffcc 	andi	r5,r5,65535
  80d274:	10c7883a 	add	r3,r2,r3
  80d278:	2149883a 	add	r4,r4,r5
  80d27c:	90c0a536 	bltu	r18,r3,80d514 <__divdf3+0x6e4>
  80d280:	90c0bf26 	beq	r18,r3,80d580 <__divdf3+0x750>
  80d284:	90c7c83a 	sub	r3,r18,r3
  80d288:	810fc83a 	sub	r7,r16,r4
  80d28c:	81e5803a 	cmpltu	r18,r16,r7
  80d290:	1ca5c83a 	sub	r18,r3,r18
  80d294:	e480c126 	beq	fp,r18,80d59c <__divdf3+0x76c>
  80d298:	a00b883a 	mov	r5,r20
  80d29c:	9009883a 	mov	r4,r18
  80d2a0:	d9800315 	stw	r6,12(sp)
  80d2a4:	d9c00215 	stw	r7,8(sp)
  80d2a8:	da400115 	stw	r9,4(sp)
  80d2ac:	08014d00 	call	8014d0 <__udivsi3>
  80d2b0:	a00b883a 	mov	r5,r20
  80d2b4:	9009883a 	mov	r4,r18
  80d2b8:	d8800015 	stw	r2,0(sp)
  80d2bc:	08015340 	call	801534 <__umodsi3>
  80d2c0:	d9c00217 	ldw	r7,8(sp)
  80d2c4:	da000017 	ldw	r8,0(sp)
  80d2c8:	1006943a 	slli	r3,r2,16
  80d2cc:	3804d43a 	srli	r2,r7,16
  80d2d0:	ba21383a 	mul	r16,r23,r8
  80d2d4:	d9800317 	ldw	r6,12(sp)
  80d2d8:	10c4b03a 	or	r2,r2,r3
  80d2dc:	da400117 	ldw	r9,4(sp)
  80d2e0:	1400062e 	bgeu	r2,r16,80d2fc <__divdf3+0x4cc>
  80d2e4:	1705883a 	add	r2,r2,fp
  80d2e8:	40ffffc4 	addi	r3,r8,-1
  80d2ec:	1700ad36 	bltu	r2,fp,80d5a4 <__divdf3+0x774>
  80d2f0:	1400ac2e 	bgeu	r2,r16,80d5a4 <__divdf3+0x774>
  80d2f4:	423fff84 	addi	r8,r8,-2
  80d2f8:	1705883a 	add	r2,r2,fp
  80d2fc:	1421c83a 	sub	r16,r2,r16
  80d300:	a00b883a 	mov	r5,r20
  80d304:	8009883a 	mov	r4,r16
  80d308:	d9800315 	stw	r6,12(sp)
  80d30c:	d9c00215 	stw	r7,8(sp)
  80d310:	da000015 	stw	r8,0(sp)
  80d314:	da400115 	stw	r9,4(sp)
  80d318:	08014d00 	call	8014d0 <__udivsi3>
  80d31c:	8009883a 	mov	r4,r16
  80d320:	a00b883a 	mov	r5,r20
  80d324:	1025883a 	mov	r18,r2
  80d328:	08015340 	call	801534 <__umodsi3>
  80d32c:	d9c00217 	ldw	r7,8(sp)
  80d330:	1004943a 	slli	r2,r2,16
  80d334:	bcaf383a 	mul	r23,r23,r18
  80d338:	393fffcc 	andi	r4,r7,65535
  80d33c:	2088b03a 	or	r4,r4,r2
  80d340:	d9800317 	ldw	r6,12(sp)
  80d344:	da000017 	ldw	r8,0(sp)
  80d348:	da400117 	ldw	r9,4(sp)
  80d34c:	25c0062e 	bgeu	r4,r23,80d368 <__divdf3+0x538>
  80d350:	2709883a 	add	r4,r4,fp
  80d354:	90bfffc4 	addi	r2,r18,-1
  80d358:	27009436 	bltu	r4,fp,80d5ac <__divdf3+0x77c>
  80d35c:	25c0932e 	bgeu	r4,r23,80d5ac <__divdf3+0x77c>
  80d360:	94bfff84 	addi	r18,r18,-2
  80d364:	2709883a 	add	r4,r4,fp
  80d368:	4004943a 	slli	r2,r8,16
  80d36c:	25efc83a 	sub	r23,r4,r23
  80d370:	1490b03a 	or	r8,r2,r18
  80d374:	4008d43a 	srli	r4,r8,16
  80d378:	40ffffcc 	andi	r3,r8,65535
  80d37c:	30c5383a 	mul	r2,r6,r3
  80d380:	1a47383a 	mul	r3,r3,r9
  80d384:	310d383a 	mul	r6,r6,r4
  80d388:	100ad43a 	srli	r5,r2,16
  80d38c:	4913383a 	mul	r9,r9,r4
  80d390:	1987883a 	add	r3,r3,r6
  80d394:	28c7883a 	add	r3,r5,r3
  80d398:	1980022e 	bgeu	r3,r6,80d3a4 <__divdf3+0x574>
  80d39c:	01000074 	movhi	r4,1
  80d3a0:	4913883a 	add	r9,r9,r4
  80d3a4:	1808d43a 	srli	r4,r3,16
  80d3a8:	1806943a 	slli	r3,r3,16
  80d3ac:	10bfffcc 	andi	r2,r2,65535
  80d3b0:	2253883a 	add	r9,r4,r9
  80d3b4:	1887883a 	add	r3,r3,r2
  80d3b8:	ba403836 	bltu	r23,r9,80d49c <__divdf3+0x66c>
  80d3bc:	ba403626 	beq	r23,r9,80d498 <__divdf3+0x668>
  80d3c0:	42000054 	ori	r8,r8,1
  80d3c4:	a880ffc4 	addi	r2,r21,1023
  80d3c8:	00bf570e 	bge	zero,r2,80d128 <__alt_mem_onchip_mem+0xff805128>
  80d3cc:	40c001cc 	andi	r3,r8,7
  80d3d0:	18000726 	beq	r3,zero,80d3f0 <__divdf3+0x5c0>
  80d3d4:	40c003cc 	andi	r3,r8,15
  80d3d8:	01000104 	movi	r4,4
  80d3dc:	19000426 	beq	r3,r4,80d3f0 <__divdf3+0x5c0>
  80d3e0:	4107883a 	add	r3,r8,r4
  80d3e4:	1a11803a 	cmpltu	r8,r3,r8
  80d3e8:	8a23883a 	add	r17,r17,r8
  80d3ec:	1811883a 	mov	r8,r3
  80d3f0:	88c0402c 	andhi	r3,r17,256
  80d3f4:	18000426 	beq	r3,zero,80d408 <__divdf3+0x5d8>
  80d3f8:	00ffc034 	movhi	r3,65280
  80d3fc:	18ffffc4 	addi	r3,r3,-1
  80d400:	a8810004 	addi	r2,r21,1024
  80d404:	88e2703a 	and	r17,r17,r3
  80d408:	00c1ff84 	movi	r3,2046
  80d40c:	18bee316 	blt	r3,r2,80cf9c <__alt_mem_onchip_mem+0xff804f9c>
  80d410:	8824977a 	slli	r18,r17,29
  80d414:	4010d0fa 	srli	r8,r8,3
  80d418:	8822927a 	slli	r17,r17,9
  80d41c:	1081ffcc 	andi	r2,r2,2047
  80d420:	9224b03a 	or	r18,r18,r8
  80d424:	880ad33a 	srli	r5,r17,12
  80d428:	98c0004c 	andi	r3,r19,1
  80d42c:	003edf06 	br	80cfac <__alt_mem_onchip_mem+0xff804fac>
  80d430:	8080022c 	andhi	r2,r16,8
  80d434:	10001226 	beq	r2,zero,80d480 <__divdf3+0x650>
  80d438:	8880022c 	andhi	r2,r17,8
  80d43c:	1000101e 	bne	r2,zero,80d480 <__divdf3+0x650>
  80d440:	00800434 	movhi	r2,16
  80d444:	89400234 	orhi	r5,r17,8
  80d448:	10bfffc4 	addi	r2,r2,-1
  80d44c:	b007883a 	mov	r3,r22
  80d450:	288a703a 	and	r5,r5,r2
  80d454:	4025883a 	mov	r18,r8
  80d458:	003f3106 	br	80d120 <__alt_mem_onchip_mem+0xff805120>
  80d45c:	008000c4 	movi	r2,3
  80d460:	3880a626 	beq	r7,r2,80d6fc <__divdf3+0x8cc>
  80d464:	00800044 	movi	r2,1
  80d468:	3880521e 	bne	r7,r2,80d5b4 <__divdf3+0x784>
  80d46c:	b807883a 	mov	r3,r23
  80d470:	0005883a 	mov	r2,zero
  80d474:	000b883a 	mov	r5,zero
  80d478:	0025883a 	mov	r18,zero
  80d47c:	003ecb06 	br	80cfac <__alt_mem_onchip_mem+0xff804fac>
  80d480:	00800434 	movhi	r2,16
  80d484:	81400234 	orhi	r5,r16,8
  80d488:	10bfffc4 	addi	r2,r2,-1
  80d48c:	a007883a 	mov	r3,r20
  80d490:	288a703a 	and	r5,r5,r2
  80d494:	003f2206 	br	80d120 <__alt_mem_onchip_mem+0xff805120>
  80d498:	183fca26 	beq	r3,zero,80d3c4 <__alt_mem_onchip_mem+0xff8053c4>
  80d49c:	e5ef883a 	add	r23,fp,r23
  80d4a0:	40bfffc4 	addi	r2,r8,-1
  80d4a4:	bf00392e 	bgeu	r23,fp,80d58c <__divdf3+0x75c>
  80d4a8:	1011883a 	mov	r8,r2
  80d4ac:	ba7fc41e 	bne	r23,r9,80d3c0 <__alt_mem_onchip_mem+0xff8053c0>
  80d4b0:	b0ffc31e 	bne	r22,r3,80d3c0 <__alt_mem_onchip_mem+0xff8053c0>
  80d4b4:	003fc306 	br	80d3c4 <__alt_mem_onchip_mem+0xff8053c4>
  80d4b8:	143ff604 	addi	r16,r2,-40
  80d4bc:	9c20983a 	sll	r16,r19,r16
  80d4c0:	0025883a 	mov	r18,zero
  80d4c4:	003ee206 	br	80d050 <__alt_mem_onchip_mem+0xff805050>
  80d4c8:	d9800315 	stw	r6,12(sp)
  80d4cc:	d9c00215 	stw	r7,8(sp)
  80d4d0:	080eb880 	call	80eb88 <__clzsi2>
  80d4d4:	10800804 	addi	r2,r2,32
  80d4d8:	d9c00217 	ldw	r7,8(sp)
  80d4dc:	d9800317 	ldw	r6,12(sp)
  80d4e0:	003ed106 	br	80d028 <__alt_mem_onchip_mem+0xff805028>
  80d4e4:	147ff604 	addi	r17,r2,-40
  80d4e8:	3462983a 	sll	r17,r6,r17
  80d4ec:	0011883a 	mov	r8,zero
  80d4f0:	003ef506 	br	80d0c8 <__alt_mem_onchip_mem+0xff8050c8>
  80d4f4:	3009883a 	mov	r4,r6
  80d4f8:	d9800315 	stw	r6,12(sp)
  80d4fc:	da400115 	stw	r9,4(sp)
  80d500:	080eb880 	call	80eb88 <__clzsi2>
  80d504:	10800804 	addi	r2,r2,32
  80d508:	da400117 	ldw	r9,4(sp)
  80d50c:	d9800317 	ldw	r6,12(sp)
  80d510:	003ee306 	br	80d0a0 <__alt_mem_onchip_mem+0xff8050a0>
  80d514:	85a1883a 	add	r16,r16,r22
  80d518:	8585803a 	cmpltu	r2,r16,r22
  80d51c:	1705883a 	add	r2,r2,fp
  80d520:	14a5883a 	add	r18,r2,r18
  80d524:	88bfffc4 	addi	r2,r17,-1
  80d528:	e4800c2e 	bgeu	fp,r18,80d55c <__divdf3+0x72c>
  80d52c:	90c03e36 	bltu	r18,r3,80d628 <__divdf3+0x7f8>
  80d530:	1c806926 	beq	r3,r18,80d6d8 <__divdf3+0x8a8>
  80d534:	90c7c83a 	sub	r3,r18,r3
  80d538:	1023883a 	mov	r17,r2
  80d53c:	003f5206 	br	80d288 <__alt_mem_onchip_mem+0xff805288>
  80d540:	923f0436 	bltu	r18,r8,80d154 <__alt_mem_onchip_mem+0xff805154>
  80d544:	800897fa 	slli	r4,r16,31
  80d548:	9004d07a 	srli	r2,r18,1
  80d54c:	8006d07a 	srli	r3,r16,1
  80d550:	902097fa 	slli	r16,r18,31
  80d554:	20a4b03a 	or	r18,r4,r2
  80d558:	003f0106 	br	80d160 <__alt_mem_onchip_mem+0xff805160>
  80d55c:	e4bff51e 	bne	fp,r18,80d534 <__alt_mem_onchip_mem+0xff805534>
  80d560:	85bff22e 	bgeu	r16,r22,80d52c <__alt_mem_onchip_mem+0xff80552c>
  80d564:	e0c7c83a 	sub	r3,fp,r3
  80d568:	1023883a 	mov	r17,r2
  80d56c:	003f4606 	br	80d288 <__alt_mem_onchip_mem+0xff805288>
  80d570:	100f883a 	mov	r7,r2
  80d574:	003f2b06 	br	80d224 <__alt_mem_onchip_mem+0xff805224>
  80d578:	180d883a 	mov	r6,r3
  80d57c:	003f1306 	br	80d1cc <__alt_mem_onchip_mem+0xff8051cc>
  80d580:	813fe436 	bltu	r16,r4,80d514 <__alt_mem_onchip_mem+0xff805514>
  80d584:	0007883a 	mov	r3,zero
  80d588:	003f3f06 	br	80d288 <__alt_mem_onchip_mem+0xff805288>
  80d58c:	ba402c36 	bltu	r23,r9,80d640 <__divdf3+0x810>
  80d590:	4dc05426 	beq	r9,r23,80d6e4 <__divdf3+0x8b4>
  80d594:	1011883a 	mov	r8,r2
  80d598:	003f8906 	br	80d3c0 <__alt_mem_onchip_mem+0xff8053c0>
  80d59c:	023fffc4 	movi	r8,-1
  80d5a0:	003f8806 	br	80d3c4 <__alt_mem_onchip_mem+0xff8053c4>
  80d5a4:	1811883a 	mov	r8,r3
  80d5a8:	003f5406 	br	80d2fc <__alt_mem_onchip_mem+0xff8052fc>
  80d5ac:	1025883a 	mov	r18,r2
  80d5b0:	003f6d06 	br	80d368 <__alt_mem_onchip_mem+0xff805368>
  80d5b4:	b827883a 	mov	r19,r23
  80d5b8:	003f8206 	br	80d3c4 <__alt_mem_onchip_mem+0xff8053c4>
  80d5bc:	010007c4 	movi	r4,31
  80d5c0:	20c02616 	blt	r4,r3,80d65c <__divdf3+0x82c>
  80d5c4:	00800804 	movi	r2,32
  80d5c8:	10c5c83a 	sub	r2,r2,r3
  80d5cc:	888a983a 	sll	r5,r17,r2
  80d5d0:	40c8d83a 	srl	r4,r8,r3
  80d5d4:	4084983a 	sll	r2,r8,r2
  80d5d8:	88e2d83a 	srl	r17,r17,r3
  80d5dc:	2906b03a 	or	r3,r5,r4
  80d5e0:	1004c03a 	cmpne	r2,r2,zero
  80d5e4:	1886b03a 	or	r3,r3,r2
  80d5e8:	188001cc 	andi	r2,r3,7
  80d5ec:	10000726 	beq	r2,zero,80d60c <__divdf3+0x7dc>
  80d5f0:	188003cc 	andi	r2,r3,15
  80d5f4:	01000104 	movi	r4,4
  80d5f8:	11000426 	beq	r2,r4,80d60c <__divdf3+0x7dc>
  80d5fc:	1805883a 	mov	r2,r3
  80d600:	10c00104 	addi	r3,r2,4
  80d604:	1885803a 	cmpltu	r2,r3,r2
  80d608:	88a3883a 	add	r17,r17,r2
  80d60c:	8880202c 	andhi	r2,r17,128
  80d610:	10002726 	beq	r2,zero,80d6b0 <__divdf3+0x880>
  80d614:	98c0004c 	andi	r3,r19,1
  80d618:	00800044 	movi	r2,1
  80d61c:	000b883a 	mov	r5,zero
  80d620:	0025883a 	mov	r18,zero
  80d624:	003e6106 	br	80cfac <__alt_mem_onchip_mem+0xff804fac>
  80d628:	85a1883a 	add	r16,r16,r22
  80d62c:	8585803a 	cmpltu	r2,r16,r22
  80d630:	1705883a 	add	r2,r2,fp
  80d634:	14a5883a 	add	r18,r2,r18
  80d638:	8c7fff84 	addi	r17,r17,-2
  80d63c:	003f1106 	br	80d284 <__alt_mem_onchip_mem+0xff805284>
  80d640:	b589883a 	add	r4,r22,r22
  80d644:	25ad803a 	cmpltu	r22,r4,r22
  80d648:	b739883a 	add	fp,r22,fp
  80d64c:	40bfff84 	addi	r2,r8,-2
  80d650:	bf2f883a 	add	r23,r23,fp
  80d654:	202d883a 	mov	r22,r4
  80d658:	003f9306 	br	80d4a8 <__alt_mem_onchip_mem+0xff8054a8>
  80d65c:	013ff844 	movi	r4,-31
  80d660:	2085c83a 	sub	r2,r4,r2
  80d664:	8888d83a 	srl	r4,r17,r2
  80d668:	00800804 	movi	r2,32
  80d66c:	18802126 	beq	r3,r2,80d6f4 <__divdf3+0x8c4>
  80d670:	00801004 	movi	r2,64
  80d674:	10c5c83a 	sub	r2,r2,r3
  80d678:	8884983a 	sll	r2,r17,r2
  80d67c:	1204b03a 	or	r2,r2,r8
  80d680:	1004c03a 	cmpne	r2,r2,zero
  80d684:	2084b03a 	or	r2,r4,r2
  80d688:	144001cc 	andi	r17,r2,7
  80d68c:	88000d1e 	bne	r17,zero,80d6c4 <__divdf3+0x894>
  80d690:	000b883a 	mov	r5,zero
  80d694:	1024d0fa 	srli	r18,r2,3
  80d698:	98c0004c 	andi	r3,r19,1
  80d69c:	0005883a 	mov	r2,zero
  80d6a0:	9464b03a 	or	r18,r18,r17
  80d6a4:	003e4106 	br	80cfac <__alt_mem_onchip_mem+0xff804fac>
  80d6a8:	1007883a 	mov	r3,r2
  80d6ac:	0023883a 	mov	r17,zero
  80d6b0:	880a927a 	slli	r5,r17,9
  80d6b4:	1805883a 	mov	r2,r3
  80d6b8:	8822977a 	slli	r17,r17,29
  80d6bc:	280ad33a 	srli	r5,r5,12
  80d6c0:	003ff406 	br	80d694 <__alt_mem_onchip_mem+0xff805694>
  80d6c4:	10c003cc 	andi	r3,r2,15
  80d6c8:	01000104 	movi	r4,4
  80d6cc:	193ff626 	beq	r3,r4,80d6a8 <__alt_mem_onchip_mem+0xff8056a8>
  80d6d0:	0023883a 	mov	r17,zero
  80d6d4:	003fca06 	br	80d600 <__alt_mem_onchip_mem+0xff805600>
  80d6d8:	813fd336 	bltu	r16,r4,80d628 <__alt_mem_onchip_mem+0xff805628>
  80d6dc:	1023883a 	mov	r17,r2
  80d6e0:	003fa806 	br	80d584 <__alt_mem_onchip_mem+0xff805584>
  80d6e4:	b0ffd636 	bltu	r22,r3,80d640 <__alt_mem_onchip_mem+0xff805640>
  80d6e8:	1011883a 	mov	r8,r2
  80d6ec:	b0ff341e 	bne	r22,r3,80d3c0 <__alt_mem_onchip_mem+0xff8053c0>
  80d6f0:	003f3406 	br	80d3c4 <__alt_mem_onchip_mem+0xff8053c4>
  80d6f4:	0005883a 	mov	r2,zero
  80d6f8:	003fe006 	br	80d67c <__alt_mem_onchip_mem+0xff80567c>
  80d6fc:	00800434 	movhi	r2,16
  80d700:	89400234 	orhi	r5,r17,8
  80d704:	10bfffc4 	addi	r2,r2,-1
  80d708:	b807883a 	mov	r3,r23
  80d70c:	288a703a 	and	r5,r5,r2
  80d710:	4025883a 	mov	r18,r8
  80d714:	003e8206 	br	80d120 <__alt_mem_onchip_mem+0xff805120>

0080d718 <__eqdf2>:
  80d718:	2804d53a 	srli	r2,r5,20
  80d71c:	3806d53a 	srli	r3,r7,20
  80d720:	02000434 	movhi	r8,16
  80d724:	423fffc4 	addi	r8,r8,-1
  80d728:	1081ffcc 	andi	r2,r2,2047
  80d72c:	0281ffc4 	movi	r10,2047
  80d730:	2a12703a 	and	r9,r5,r8
  80d734:	18c1ffcc 	andi	r3,r3,2047
  80d738:	3a10703a 	and	r8,r7,r8
  80d73c:	280ad7fa 	srli	r5,r5,31
  80d740:	380ed7fa 	srli	r7,r7,31
  80d744:	12801026 	beq	r2,r10,80d788 <__eqdf2+0x70>
  80d748:	0281ffc4 	movi	r10,2047
  80d74c:	1a800a26 	beq	r3,r10,80d778 <__eqdf2+0x60>
  80d750:	10c00226 	beq	r2,r3,80d75c <__eqdf2+0x44>
  80d754:	00800044 	movi	r2,1
  80d758:	f800283a 	ret
  80d75c:	4a3ffd1e 	bne	r9,r8,80d754 <__alt_mem_onchip_mem+0xff805754>
  80d760:	21bffc1e 	bne	r4,r6,80d754 <__alt_mem_onchip_mem+0xff805754>
  80d764:	29c00c26 	beq	r5,r7,80d798 <__eqdf2+0x80>
  80d768:	103ffa1e 	bne	r2,zero,80d754 <__alt_mem_onchip_mem+0xff805754>
  80d76c:	2244b03a 	or	r2,r4,r9
  80d770:	1004c03a 	cmpne	r2,r2,zero
  80d774:	f800283a 	ret
  80d778:	3214b03a 	or	r10,r6,r8
  80d77c:	503ff426 	beq	r10,zero,80d750 <__alt_mem_onchip_mem+0xff805750>
  80d780:	00800044 	movi	r2,1
  80d784:	f800283a 	ret
  80d788:	2254b03a 	or	r10,r4,r9
  80d78c:	503fee26 	beq	r10,zero,80d748 <__alt_mem_onchip_mem+0xff805748>
  80d790:	00800044 	movi	r2,1
  80d794:	f800283a 	ret
  80d798:	0005883a 	mov	r2,zero
  80d79c:	f800283a 	ret

0080d7a0 <__gedf2>:
  80d7a0:	2804d53a 	srli	r2,r5,20
  80d7a4:	3806d53a 	srli	r3,r7,20
  80d7a8:	02000434 	movhi	r8,16
  80d7ac:	423fffc4 	addi	r8,r8,-1
  80d7b0:	1081ffcc 	andi	r2,r2,2047
  80d7b4:	0241ffc4 	movi	r9,2047
  80d7b8:	2a14703a 	and	r10,r5,r8
  80d7bc:	18c1ffcc 	andi	r3,r3,2047
  80d7c0:	3a10703a 	and	r8,r7,r8
  80d7c4:	280ad7fa 	srli	r5,r5,31
  80d7c8:	380ed7fa 	srli	r7,r7,31
  80d7cc:	12401d26 	beq	r2,r9,80d844 <__gedf2+0xa4>
  80d7d0:	0241ffc4 	movi	r9,2047
  80d7d4:	1a401226 	beq	r3,r9,80d820 <__gedf2+0x80>
  80d7d8:	1000081e 	bne	r2,zero,80d7fc <__gedf2+0x5c>
  80d7dc:	2296b03a 	or	r11,r4,r10
  80d7e0:	5813003a 	cmpeq	r9,r11,zero
  80d7e4:	1800091e 	bne	r3,zero,80d80c <__gedf2+0x6c>
  80d7e8:	3218b03a 	or	r12,r6,r8
  80d7ec:	6000071e 	bne	r12,zero,80d80c <__gedf2+0x6c>
  80d7f0:	0005883a 	mov	r2,zero
  80d7f4:	5800101e 	bne	r11,zero,80d838 <__gedf2+0x98>
  80d7f8:	f800283a 	ret
  80d7fc:	18000c1e 	bne	r3,zero,80d830 <__gedf2+0x90>
  80d800:	3212b03a 	or	r9,r6,r8
  80d804:	48000c26 	beq	r9,zero,80d838 <__gedf2+0x98>
  80d808:	0013883a 	mov	r9,zero
  80d80c:	39c03fcc 	andi	r7,r7,255
  80d810:	48000826 	beq	r9,zero,80d834 <__gedf2+0x94>
  80d814:	38000926 	beq	r7,zero,80d83c <__gedf2+0x9c>
  80d818:	00800044 	movi	r2,1
  80d81c:	f800283a 	ret
  80d820:	3212b03a 	or	r9,r6,r8
  80d824:	483fec26 	beq	r9,zero,80d7d8 <__alt_mem_onchip_mem+0xff8057d8>
  80d828:	00bfff84 	movi	r2,-2
  80d82c:	f800283a 	ret
  80d830:	39c03fcc 	andi	r7,r7,255
  80d834:	29c00626 	beq	r5,r7,80d850 <__gedf2+0xb0>
  80d838:	283ff726 	beq	r5,zero,80d818 <__alt_mem_onchip_mem+0xff805818>
  80d83c:	00bfffc4 	movi	r2,-1
  80d840:	f800283a 	ret
  80d844:	2292b03a 	or	r9,r4,r10
  80d848:	483fe126 	beq	r9,zero,80d7d0 <__alt_mem_onchip_mem+0xff8057d0>
  80d84c:	003ff606 	br	80d828 <__alt_mem_onchip_mem+0xff805828>
  80d850:	18bff916 	blt	r3,r2,80d838 <__alt_mem_onchip_mem+0xff805838>
  80d854:	10c00316 	blt	r2,r3,80d864 <__gedf2+0xc4>
  80d858:	42bff736 	bltu	r8,r10,80d838 <__alt_mem_onchip_mem+0xff805838>
  80d85c:	52000326 	beq	r10,r8,80d86c <__gedf2+0xcc>
  80d860:	5200042e 	bgeu	r10,r8,80d874 <__gedf2+0xd4>
  80d864:	283fec1e 	bne	r5,zero,80d818 <__alt_mem_onchip_mem+0xff805818>
  80d868:	003ff406 	br	80d83c <__alt_mem_onchip_mem+0xff80583c>
  80d86c:	313ff236 	bltu	r6,r4,80d838 <__alt_mem_onchip_mem+0xff805838>
  80d870:	21bffc36 	bltu	r4,r6,80d864 <__alt_mem_onchip_mem+0xff805864>
  80d874:	0005883a 	mov	r2,zero
  80d878:	f800283a 	ret

0080d87c <__ledf2>:
  80d87c:	2804d53a 	srli	r2,r5,20
  80d880:	3810d53a 	srli	r8,r7,20
  80d884:	00c00434 	movhi	r3,16
  80d888:	18ffffc4 	addi	r3,r3,-1
  80d88c:	1081ffcc 	andi	r2,r2,2047
  80d890:	0241ffc4 	movi	r9,2047
  80d894:	28d4703a 	and	r10,r5,r3
  80d898:	4201ffcc 	andi	r8,r8,2047
  80d89c:	38c6703a 	and	r3,r7,r3
  80d8a0:	280ad7fa 	srli	r5,r5,31
  80d8a4:	380ed7fa 	srli	r7,r7,31
  80d8a8:	12401f26 	beq	r2,r9,80d928 <__ledf2+0xac>
  80d8ac:	0241ffc4 	movi	r9,2047
  80d8b0:	42401426 	beq	r8,r9,80d904 <__ledf2+0x88>
  80d8b4:	1000091e 	bne	r2,zero,80d8dc <__ledf2+0x60>
  80d8b8:	2296b03a 	or	r11,r4,r10
  80d8bc:	5813003a 	cmpeq	r9,r11,zero
  80d8c0:	29403fcc 	andi	r5,r5,255
  80d8c4:	40000a1e 	bne	r8,zero,80d8f0 <__ledf2+0x74>
  80d8c8:	30d8b03a 	or	r12,r6,r3
  80d8cc:	6000081e 	bne	r12,zero,80d8f0 <__ledf2+0x74>
  80d8d0:	0005883a 	mov	r2,zero
  80d8d4:	5800111e 	bne	r11,zero,80d91c <__ledf2+0xa0>
  80d8d8:	f800283a 	ret
  80d8dc:	29403fcc 	andi	r5,r5,255
  80d8e0:	40000c1e 	bne	r8,zero,80d914 <__ledf2+0x98>
  80d8e4:	30d2b03a 	or	r9,r6,r3
  80d8e8:	48000c26 	beq	r9,zero,80d91c <__ledf2+0xa0>
  80d8ec:	0013883a 	mov	r9,zero
  80d8f0:	39c03fcc 	andi	r7,r7,255
  80d8f4:	48000826 	beq	r9,zero,80d918 <__ledf2+0x9c>
  80d8f8:	38001126 	beq	r7,zero,80d940 <__ledf2+0xc4>
  80d8fc:	00800044 	movi	r2,1
  80d900:	f800283a 	ret
  80d904:	30d2b03a 	or	r9,r6,r3
  80d908:	483fea26 	beq	r9,zero,80d8b4 <__alt_mem_onchip_mem+0xff8058b4>
  80d90c:	00800084 	movi	r2,2
  80d910:	f800283a 	ret
  80d914:	39c03fcc 	andi	r7,r7,255
  80d918:	39400726 	beq	r7,r5,80d938 <__ledf2+0xbc>
  80d91c:	2800081e 	bne	r5,zero,80d940 <__ledf2+0xc4>
  80d920:	00800044 	movi	r2,1
  80d924:	f800283a 	ret
  80d928:	2292b03a 	or	r9,r4,r10
  80d92c:	483fdf26 	beq	r9,zero,80d8ac <__alt_mem_onchip_mem+0xff8058ac>
  80d930:	00800084 	movi	r2,2
  80d934:	f800283a 	ret
  80d938:	4080030e 	bge	r8,r2,80d948 <__ledf2+0xcc>
  80d93c:	383fef26 	beq	r7,zero,80d8fc <__alt_mem_onchip_mem+0xff8058fc>
  80d940:	00bfffc4 	movi	r2,-1
  80d944:	f800283a 	ret
  80d948:	123feb16 	blt	r2,r8,80d8f8 <__alt_mem_onchip_mem+0xff8058f8>
  80d94c:	1abff336 	bltu	r3,r10,80d91c <__alt_mem_onchip_mem+0xff80591c>
  80d950:	50c00326 	beq	r10,r3,80d960 <__ledf2+0xe4>
  80d954:	50c0042e 	bgeu	r10,r3,80d968 <__ledf2+0xec>
  80d958:	283fe81e 	bne	r5,zero,80d8fc <__alt_mem_onchip_mem+0xff8058fc>
  80d95c:	003ff806 	br	80d940 <__alt_mem_onchip_mem+0xff805940>
  80d960:	313fee36 	bltu	r6,r4,80d91c <__alt_mem_onchip_mem+0xff80591c>
  80d964:	21bffc36 	bltu	r4,r6,80d958 <__alt_mem_onchip_mem+0xff805958>
  80d968:	0005883a 	mov	r2,zero
  80d96c:	f800283a 	ret

0080d970 <__muldf3>:
  80d970:	defff304 	addi	sp,sp,-52
  80d974:	2804d53a 	srli	r2,r5,20
  80d978:	dd800915 	stw	r22,36(sp)
  80d97c:	282cd7fa 	srli	r22,r5,31
  80d980:	dc000315 	stw	r16,12(sp)
  80d984:	04000434 	movhi	r16,16
  80d988:	dd400815 	stw	r21,32(sp)
  80d98c:	dc800515 	stw	r18,20(sp)
  80d990:	843fffc4 	addi	r16,r16,-1
  80d994:	dfc00c15 	stw	ra,48(sp)
  80d998:	df000b15 	stw	fp,44(sp)
  80d99c:	ddc00a15 	stw	r23,40(sp)
  80d9a0:	dd000715 	stw	r20,28(sp)
  80d9a4:	dcc00615 	stw	r19,24(sp)
  80d9a8:	dc400415 	stw	r17,16(sp)
  80d9ac:	1481ffcc 	andi	r18,r2,2047
  80d9b0:	2c20703a 	and	r16,r5,r16
  80d9b4:	b02b883a 	mov	r21,r22
  80d9b8:	b2403fcc 	andi	r9,r22,255
  80d9bc:	90006026 	beq	r18,zero,80db40 <__muldf3+0x1d0>
  80d9c0:	0081ffc4 	movi	r2,2047
  80d9c4:	2029883a 	mov	r20,r4
  80d9c8:	90803626 	beq	r18,r2,80daa4 <__muldf3+0x134>
  80d9cc:	80800434 	orhi	r2,r16,16
  80d9d0:	100490fa 	slli	r2,r2,3
  80d9d4:	2020d77a 	srli	r16,r4,29
  80d9d8:	202890fa 	slli	r20,r4,3
  80d9dc:	94bf0044 	addi	r18,r18,-1023
  80d9e0:	80a0b03a 	or	r16,r16,r2
  80d9e4:	0027883a 	mov	r19,zero
  80d9e8:	0039883a 	mov	fp,zero
  80d9ec:	3804d53a 	srli	r2,r7,20
  80d9f0:	382ed7fa 	srli	r23,r7,31
  80d9f4:	04400434 	movhi	r17,16
  80d9f8:	8c7fffc4 	addi	r17,r17,-1
  80d9fc:	1081ffcc 	andi	r2,r2,2047
  80da00:	3011883a 	mov	r8,r6
  80da04:	3c62703a 	and	r17,r7,r17
  80da08:	ba803fcc 	andi	r10,r23,255
  80da0c:	10006d26 	beq	r2,zero,80dbc4 <__muldf3+0x254>
  80da10:	00c1ffc4 	movi	r3,2047
  80da14:	10c06526 	beq	r2,r3,80dbac <__muldf3+0x23c>
  80da18:	88c00434 	orhi	r3,r17,16
  80da1c:	180690fa 	slli	r3,r3,3
  80da20:	3022d77a 	srli	r17,r6,29
  80da24:	301090fa 	slli	r8,r6,3
  80da28:	10bf0044 	addi	r2,r2,-1023
  80da2c:	88e2b03a 	or	r17,r17,r3
  80da30:	000b883a 	mov	r5,zero
  80da34:	9085883a 	add	r2,r18,r2
  80da38:	2cc8b03a 	or	r4,r5,r19
  80da3c:	00c003c4 	movi	r3,15
  80da40:	bdacf03a 	xor	r22,r23,r22
  80da44:	12c00044 	addi	r11,r2,1
  80da48:	19009936 	bltu	r3,r4,80dcb0 <__muldf3+0x340>
  80da4c:	200890ba 	slli	r4,r4,2
  80da50:	00c02074 	movhi	r3,129
  80da54:	18f69904 	addi	r3,r3,-9628
  80da58:	20c9883a 	add	r4,r4,r3
  80da5c:	20c00017 	ldw	r3,0(r4)
  80da60:	1800683a 	jmp	r3
  80da64:	0080dcb0 	cmpltui	r2,zero,882
  80da68:	0080dac4 	movi	r2,875
  80da6c:	0080dac4 	movi	r2,875
  80da70:	0080dac0 	call	80dac <__reset-0x77f254>
  80da74:	0080dc8c 	andi	r2,zero,882
  80da78:	0080dc8c 	andi	r2,zero,882
  80da7c:	0080dc74 	movhi	r2,881
  80da80:	0080dac0 	call	80dac <__reset-0x77f254>
  80da84:	0080dc8c 	andi	r2,zero,882
  80da88:	0080dc74 	movhi	r2,881
  80da8c:	0080dc8c 	andi	r2,zero,882
  80da90:	0080dac0 	call	80dac <__reset-0x77f254>
  80da94:	0080dc9c 	xori	r2,zero,882
  80da98:	0080dc9c 	xori	r2,zero,882
  80da9c:	0080dc9c 	xori	r2,zero,882
  80daa0:	0080deb8 	rdprs	r2,zero,890
  80daa4:	2404b03a 	or	r2,r4,r16
  80daa8:	10006f1e 	bne	r2,zero,80dc68 <__muldf3+0x2f8>
  80daac:	04c00204 	movi	r19,8
  80dab0:	0021883a 	mov	r16,zero
  80dab4:	0029883a 	mov	r20,zero
  80dab8:	07000084 	movi	fp,2
  80dabc:	003fcb06 	br	80d9ec <__alt_mem_onchip_mem+0xff8059ec>
  80dac0:	502d883a 	mov	r22,r10
  80dac4:	00800084 	movi	r2,2
  80dac8:	28805726 	beq	r5,r2,80dc28 <__muldf3+0x2b8>
  80dacc:	008000c4 	movi	r2,3
  80dad0:	28816626 	beq	r5,r2,80e06c <__muldf3+0x6fc>
  80dad4:	00800044 	movi	r2,1
  80dad8:	2881411e 	bne	r5,r2,80dfe0 <__muldf3+0x670>
  80dadc:	b02b883a 	mov	r21,r22
  80dae0:	0005883a 	mov	r2,zero
  80dae4:	000b883a 	mov	r5,zero
  80dae8:	0029883a 	mov	r20,zero
  80daec:	1004953a 	slli	r2,r2,20
  80daf0:	a8c03fcc 	andi	r3,r21,255
  80daf4:	04400434 	movhi	r17,16
  80daf8:	8c7fffc4 	addi	r17,r17,-1
  80dafc:	180697fa 	slli	r3,r3,31
  80db00:	2c4a703a 	and	r5,r5,r17
  80db04:	288ab03a 	or	r5,r5,r2
  80db08:	28c6b03a 	or	r3,r5,r3
  80db0c:	a005883a 	mov	r2,r20
  80db10:	dfc00c17 	ldw	ra,48(sp)
  80db14:	df000b17 	ldw	fp,44(sp)
  80db18:	ddc00a17 	ldw	r23,40(sp)
  80db1c:	dd800917 	ldw	r22,36(sp)
  80db20:	dd400817 	ldw	r21,32(sp)
  80db24:	dd000717 	ldw	r20,28(sp)
  80db28:	dcc00617 	ldw	r19,24(sp)
  80db2c:	dc800517 	ldw	r18,20(sp)
  80db30:	dc400417 	ldw	r17,16(sp)
  80db34:	dc000317 	ldw	r16,12(sp)
  80db38:	dec00d04 	addi	sp,sp,52
  80db3c:	f800283a 	ret
  80db40:	2404b03a 	or	r2,r4,r16
  80db44:	2027883a 	mov	r19,r4
  80db48:	10004226 	beq	r2,zero,80dc54 <__muldf3+0x2e4>
  80db4c:	8000fc26 	beq	r16,zero,80df40 <__muldf3+0x5d0>
  80db50:	8009883a 	mov	r4,r16
  80db54:	d9800215 	stw	r6,8(sp)
  80db58:	d9c00015 	stw	r7,0(sp)
  80db5c:	da400115 	stw	r9,4(sp)
  80db60:	080eb880 	call	80eb88 <__clzsi2>
  80db64:	d9800217 	ldw	r6,8(sp)
  80db68:	d9c00017 	ldw	r7,0(sp)
  80db6c:	da400117 	ldw	r9,4(sp)
  80db70:	113ffd44 	addi	r4,r2,-11
  80db74:	00c00704 	movi	r3,28
  80db78:	1900ed16 	blt	r3,r4,80df30 <__muldf3+0x5c0>
  80db7c:	00c00744 	movi	r3,29
  80db80:	147ffe04 	addi	r17,r2,-8
  80db84:	1907c83a 	sub	r3,r3,r4
  80db88:	8460983a 	sll	r16,r16,r17
  80db8c:	98c6d83a 	srl	r3,r19,r3
  80db90:	9c68983a 	sll	r20,r19,r17
  80db94:	1c20b03a 	or	r16,r3,r16
  80db98:	1080fcc4 	addi	r2,r2,1011
  80db9c:	00a5c83a 	sub	r18,zero,r2
  80dba0:	0027883a 	mov	r19,zero
  80dba4:	0039883a 	mov	fp,zero
  80dba8:	003f9006 	br	80d9ec <__alt_mem_onchip_mem+0xff8059ec>
  80dbac:	3446b03a 	or	r3,r6,r17
  80dbb0:	1800261e 	bne	r3,zero,80dc4c <__muldf3+0x2dc>
  80dbb4:	0023883a 	mov	r17,zero
  80dbb8:	0011883a 	mov	r8,zero
  80dbbc:	01400084 	movi	r5,2
  80dbc0:	003f9c06 	br	80da34 <__alt_mem_onchip_mem+0xff805a34>
  80dbc4:	3446b03a 	or	r3,r6,r17
  80dbc8:	18001c26 	beq	r3,zero,80dc3c <__muldf3+0x2cc>
  80dbcc:	8800ce26 	beq	r17,zero,80df08 <__muldf3+0x598>
  80dbd0:	8809883a 	mov	r4,r17
  80dbd4:	d9800215 	stw	r6,8(sp)
  80dbd8:	da400115 	stw	r9,4(sp)
  80dbdc:	da800015 	stw	r10,0(sp)
  80dbe0:	080eb880 	call	80eb88 <__clzsi2>
  80dbe4:	d9800217 	ldw	r6,8(sp)
  80dbe8:	da400117 	ldw	r9,4(sp)
  80dbec:	da800017 	ldw	r10,0(sp)
  80dbf0:	113ffd44 	addi	r4,r2,-11
  80dbf4:	00c00704 	movi	r3,28
  80dbf8:	1900bf16 	blt	r3,r4,80def8 <__muldf3+0x588>
  80dbfc:	00c00744 	movi	r3,29
  80dc00:	123ffe04 	addi	r8,r2,-8
  80dc04:	1907c83a 	sub	r3,r3,r4
  80dc08:	8a22983a 	sll	r17,r17,r8
  80dc0c:	30c6d83a 	srl	r3,r6,r3
  80dc10:	3210983a 	sll	r8,r6,r8
  80dc14:	1c62b03a 	or	r17,r3,r17
  80dc18:	1080fcc4 	addi	r2,r2,1011
  80dc1c:	0085c83a 	sub	r2,zero,r2
  80dc20:	000b883a 	mov	r5,zero
  80dc24:	003f8306 	br	80da34 <__alt_mem_onchip_mem+0xff805a34>
  80dc28:	b02b883a 	mov	r21,r22
  80dc2c:	0081ffc4 	movi	r2,2047
  80dc30:	000b883a 	mov	r5,zero
  80dc34:	0029883a 	mov	r20,zero
  80dc38:	003fac06 	br	80daec <__alt_mem_onchip_mem+0xff805aec>
  80dc3c:	0023883a 	mov	r17,zero
  80dc40:	0011883a 	mov	r8,zero
  80dc44:	01400044 	movi	r5,1
  80dc48:	003f7a06 	br	80da34 <__alt_mem_onchip_mem+0xff805a34>
  80dc4c:	014000c4 	movi	r5,3
  80dc50:	003f7806 	br	80da34 <__alt_mem_onchip_mem+0xff805a34>
  80dc54:	04c00104 	movi	r19,4
  80dc58:	0021883a 	mov	r16,zero
  80dc5c:	0029883a 	mov	r20,zero
  80dc60:	07000044 	movi	fp,1
  80dc64:	003f6106 	br	80d9ec <__alt_mem_onchip_mem+0xff8059ec>
  80dc68:	04c00304 	movi	r19,12
  80dc6c:	070000c4 	movi	fp,3
  80dc70:	003f5e06 	br	80d9ec <__alt_mem_onchip_mem+0xff8059ec>
  80dc74:	01400434 	movhi	r5,16
  80dc78:	002b883a 	mov	r21,zero
  80dc7c:	297fffc4 	addi	r5,r5,-1
  80dc80:	053fffc4 	movi	r20,-1
  80dc84:	0081ffc4 	movi	r2,2047
  80dc88:	003f9806 	br	80daec <__alt_mem_onchip_mem+0xff805aec>
  80dc8c:	8023883a 	mov	r17,r16
  80dc90:	a011883a 	mov	r8,r20
  80dc94:	e00b883a 	mov	r5,fp
  80dc98:	003f8a06 	br	80dac4 <__alt_mem_onchip_mem+0xff805ac4>
  80dc9c:	8023883a 	mov	r17,r16
  80dca0:	a011883a 	mov	r8,r20
  80dca4:	482d883a 	mov	r22,r9
  80dca8:	e00b883a 	mov	r5,fp
  80dcac:	003f8506 	br	80dac4 <__alt_mem_onchip_mem+0xff805ac4>
  80dcb0:	a00ad43a 	srli	r5,r20,16
  80dcb4:	401ad43a 	srli	r13,r8,16
  80dcb8:	a53fffcc 	andi	r20,r20,65535
  80dcbc:	423fffcc 	andi	r8,r8,65535
  80dcc0:	4519383a 	mul	r12,r8,r20
  80dcc4:	4147383a 	mul	r3,r8,r5
  80dcc8:	6d09383a 	mul	r4,r13,r20
  80dccc:	600cd43a 	srli	r6,r12,16
  80dcd0:	2b5d383a 	mul	r14,r5,r13
  80dcd4:	20c9883a 	add	r4,r4,r3
  80dcd8:	310d883a 	add	r6,r6,r4
  80dcdc:	30c0022e 	bgeu	r6,r3,80dce8 <__muldf3+0x378>
  80dce0:	00c00074 	movhi	r3,1
  80dce4:	70dd883a 	add	r14,r14,r3
  80dce8:	8826d43a 	srli	r19,r17,16
  80dcec:	8bffffcc 	andi	r15,r17,65535
  80dcf0:	7d23383a 	mul	r17,r15,r20
  80dcf4:	7949383a 	mul	r4,r15,r5
  80dcf8:	9d29383a 	mul	r20,r19,r20
  80dcfc:	8814d43a 	srli	r10,r17,16
  80dd00:	3012943a 	slli	r9,r6,16
  80dd04:	a129883a 	add	r20,r20,r4
  80dd08:	633fffcc 	andi	r12,r12,65535
  80dd0c:	5515883a 	add	r10,r10,r20
  80dd10:	3006d43a 	srli	r3,r6,16
  80dd14:	4b13883a 	add	r9,r9,r12
  80dd18:	2ccb383a 	mul	r5,r5,r19
  80dd1c:	5100022e 	bgeu	r10,r4,80dd28 <__muldf3+0x3b8>
  80dd20:	01000074 	movhi	r4,1
  80dd24:	290b883a 	add	r5,r5,r4
  80dd28:	802ad43a 	srli	r21,r16,16
  80dd2c:	843fffcc 	andi	r16,r16,65535
  80dd30:	440d383a 	mul	r6,r8,r16
  80dd34:	4565383a 	mul	r18,r8,r21
  80dd38:	8349383a 	mul	r4,r16,r13
  80dd3c:	500e943a 	slli	r7,r10,16
  80dd40:	3010d43a 	srli	r8,r6,16
  80dd44:	5028d43a 	srli	r20,r10,16
  80dd48:	2489883a 	add	r4,r4,r18
  80dd4c:	8abfffcc 	andi	r10,r17,65535
  80dd50:	3a95883a 	add	r10,r7,r10
  80dd54:	4119883a 	add	r12,r8,r4
  80dd58:	a169883a 	add	r20,r20,r5
  80dd5c:	1a87883a 	add	r3,r3,r10
  80dd60:	6d5b383a 	mul	r13,r13,r21
  80dd64:	6480022e 	bgeu	r12,r18,80dd70 <__muldf3+0x400>
  80dd68:	01000074 	movhi	r4,1
  80dd6c:	691b883a 	add	r13,r13,r4
  80dd70:	7c25383a 	mul	r18,r15,r16
  80dd74:	7d4b383a 	mul	r5,r15,r21
  80dd78:	84cf383a 	mul	r7,r16,r19
  80dd7c:	901ed43a 	srli	r15,r18,16
  80dd80:	6008d43a 	srli	r4,r12,16
  80dd84:	6010943a 	slli	r8,r12,16
  80dd88:	394f883a 	add	r7,r7,r5
  80dd8c:	333fffcc 	andi	r12,r6,65535
  80dd90:	79df883a 	add	r15,r15,r7
  80dd94:	235b883a 	add	r13,r4,r13
  80dd98:	9d63383a 	mul	r17,r19,r21
  80dd9c:	4309883a 	add	r4,r8,r12
  80dda0:	7940022e 	bgeu	r15,r5,80ddac <__muldf3+0x43c>
  80dda4:	01400074 	movhi	r5,1
  80dda8:	8963883a 	add	r17,r17,r5
  80ddac:	780a943a 	slli	r5,r15,16
  80ddb0:	91bfffcc 	andi	r6,r18,65535
  80ddb4:	70c7883a 	add	r3,r14,r3
  80ddb8:	298d883a 	add	r6,r5,r6
  80ddbc:	1a8f803a 	cmpltu	r7,r3,r10
  80ddc0:	350b883a 	add	r5,r6,r20
  80ddc4:	20c7883a 	add	r3,r4,r3
  80ddc8:	3955883a 	add	r10,r7,r5
  80ddcc:	1909803a 	cmpltu	r4,r3,r4
  80ddd0:	6a91883a 	add	r8,r13,r10
  80ddd4:	780cd43a 	srli	r6,r15,16
  80ddd8:	2219883a 	add	r12,r4,r8
  80dddc:	2d0b803a 	cmpltu	r5,r5,r20
  80dde0:	51cf803a 	cmpltu	r7,r10,r7
  80dde4:	29ceb03a 	or	r7,r5,r7
  80dde8:	4351803a 	cmpltu	r8,r8,r13
  80ddec:	610b803a 	cmpltu	r5,r12,r4
  80ddf0:	4148b03a 	or	r4,r8,r5
  80ddf4:	398f883a 	add	r7,r7,r6
  80ddf8:	3909883a 	add	r4,r7,r4
  80ddfc:	1810927a 	slli	r8,r3,9
  80de00:	2449883a 	add	r4,r4,r17
  80de04:	2008927a 	slli	r4,r4,9
  80de08:	6022d5fa 	srli	r17,r12,23
  80de0c:	1806d5fa 	srli	r3,r3,23
  80de10:	4252b03a 	or	r9,r8,r9
  80de14:	600a927a 	slli	r5,r12,9
  80de18:	4810c03a 	cmpne	r8,r9,zero
  80de1c:	2462b03a 	or	r17,r4,r17
  80de20:	40c6b03a 	or	r3,r8,r3
  80de24:	8900402c 	andhi	r4,r17,256
  80de28:	1950b03a 	or	r8,r3,r5
  80de2c:	20000726 	beq	r4,zero,80de4c <__muldf3+0x4dc>
  80de30:	4006d07a 	srli	r3,r8,1
  80de34:	880497fa 	slli	r2,r17,31
  80de38:	4200004c 	andi	r8,r8,1
  80de3c:	8822d07a 	srli	r17,r17,1
  80de40:	1a10b03a 	or	r8,r3,r8
  80de44:	1210b03a 	or	r8,r2,r8
  80de48:	5805883a 	mov	r2,r11
  80de4c:	1140ffc4 	addi	r5,r2,1023
  80de50:	0140440e 	bge	zero,r5,80df64 <__muldf3+0x5f4>
  80de54:	40c001cc 	andi	r3,r8,7
  80de58:	18000726 	beq	r3,zero,80de78 <__muldf3+0x508>
  80de5c:	40c003cc 	andi	r3,r8,15
  80de60:	01000104 	movi	r4,4
  80de64:	19000426 	beq	r3,r4,80de78 <__muldf3+0x508>
  80de68:	4107883a 	add	r3,r8,r4
  80de6c:	1a11803a 	cmpltu	r8,r3,r8
  80de70:	8a23883a 	add	r17,r17,r8
  80de74:	1811883a 	mov	r8,r3
  80de78:	88c0402c 	andhi	r3,r17,256
  80de7c:	18000426 	beq	r3,zero,80de90 <__muldf3+0x520>
  80de80:	11410004 	addi	r5,r2,1024
  80de84:	00bfc034 	movhi	r2,65280
  80de88:	10bfffc4 	addi	r2,r2,-1
  80de8c:	88a2703a 	and	r17,r17,r2
  80de90:	0081ff84 	movi	r2,2046
  80de94:	117f6416 	blt	r2,r5,80dc28 <__alt_mem_onchip_mem+0xff805c28>
  80de98:	8828977a 	slli	r20,r17,29
  80de9c:	4010d0fa 	srli	r8,r8,3
  80dea0:	8822927a 	slli	r17,r17,9
  80dea4:	2881ffcc 	andi	r2,r5,2047
  80dea8:	a228b03a 	or	r20,r20,r8
  80deac:	880ad33a 	srli	r5,r17,12
  80deb0:	b02b883a 	mov	r21,r22
  80deb4:	003f0d06 	br	80daec <__alt_mem_onchip_mem+0xff805aec>
  80deb8:	8080022c 	andhi	r2,r16,8
  80debc:	10000926 	beq	r2,zero,80dee4 <__muldf3+0x574>
  80dec0:	8880022c 	andhi	r2,r17,8
  80dec4:	1000071e 	bne	r2,zero,80dee4 <__muldf3+0x574>
  80dec8:	00800434 	movhi	r2,16
  80decc:	89400234 	orhi	r5,r17,8
  80ded0:	10bfffc4 	addi	r2,r2,-1
  80ded4:	b82b883a 	mov	r21,r23
  80ded8:	288a703a 	and	r5,r5,r2
  80dedc:	4029883a 	mov	r20,r8
  80dee0:	003f6806 	br	80dc84 <__alt_mem_onchip_mem+0xff805c84>
  80dee4:	00800434 	movhi	r2,16
  80dee8:	81400234 	orhi	r5,r16,8
  80deec:	10bfffc4 	addi	r2,r2,-1
  80def0:	288a703a 	and	r5,r5,r2
  80def4:	003f6306 	br	80dc84 <__alt_mem_onchip_mem+0xff805c84>
  80def8:	147ff604 	addi	r17,r2,-40
  80defc:	3462983a 	sll	r17,r6,r17
  80df00:	0011883a 	mov	r8,zero
  80df04:	003f4406 	br	80dc18 <__alt_mem_onchip_mem+0xff805c18>
  80df08:	3009883a 	mov	r4,r6
  80df0c:	d9800215 	stw	r6,8(sp)
  80df10:	da400115 	stw	r9,4(sp)
  80df14:	da800015 	stw	r10,0(sp)
  80df18:	080eb880 	call	80eb88 <__clzsi2>
  80df1c:	10800804 	addi	r2,r2,32
  80df20:	da800017 	ldw	r10,0(sp)
  80df24:	da400117 	ldw	r9,4(sp)
  80df28:	d9800217 	ldw	r6,8(sp)
  80df2c:	003f3006 	br	80dbf0 <__alt_mem_onchip_mem+0xff805bf0>
  80df30:	143ff604 	addi	r16,r2,-40
  80df34:	9c20983a 	sll	r16,r19,r16
  80df38:	0029883a 	mov	r20,zero
  80df3c:	003f1606 	br	80db98 <__alt_mem_onchip_mem+0xff805b98>
  80df40:	d9800215 	stw	r6,8(sp)
  80df44:	d9c00015 	stw	r7,0(sp)
  80df48:	da400115 	stw	r9,4(sp)
  80df4c:	080eb880 	call	80eb88 <__clzsi2>
  80df50:	10800804 	addi	r2,r2,32
  80df54:	da400117 	ldw	r9,4(sp)
  80df58:	d9c00017 	ldw	r7,0(sp)
  80df5c:	d9800217 	ldw	r6,8(sp)
  80df60:	003f0306 	br	80db70 <__alt_mem_onchip_mem+0xff805b70>
  80df64:	00c00044 	movi	r3,1
  80df68:	1947c83a 	sub	r3,r3,r5
  80df6c:	00800e04 	movi	r2,56
  80df70:	10feda16 	blt	r2,r3,80dadc <__alt_mem_onchip_mem+0xff805adc>
  80df74:	008007c4 	movi	r2,31
  80df78:	10c01b16 	blt	r2,r3,80dfe8 <__muldf3+0x678>
  80df7c:	00800804 	movi	r2,32
  80df80:	10c5c83a 	sub	r2,r2,r3
  80df84:	888a983a 	sll	r5,r17,r2
  80df88:	40c8d83a 	srl	r4,r8,r3
  80df8c:	4084983a 	sll	r2,r8,r2
  80df90:	88e2d83a 	srl	r17,r17,r3
  80df94:	2906b03a 	or	r3,r5,r4
  80df98:	1004c03a 	cmpne	r2,r2,zero
  80df9c:	1886b03a 	or	r3,r3,r2
  80dfa0:	188001cc 	andi	r2,r3,7
  80dfa4:	10000726 	beq	r2,zero,80dfc4 <__muldf3+0x654>
  80dfa8:	188003cc 	andi	r2,r3,15
  80dfac:	01000104 	movi	r4,4
  80dfb0:	11000426 	beq	r2,r4,80dfc4 <__muldf3+0x654>
  80dfb4:	1805883a 	mov	r2,r3
  80dfb8:	10c00104 	addi	r3,r2,4
  80dfbc:	1885803a 	cmpltu	r2,r3,r2
  80dfc0:	88a3883a 	add	r17,r17,r2
  80dfc4:	8880202c 	andhi	r2,r17,128
  80dfc8:	10001c26 	beq	r2,zero,80e03c <__muldf3+0x6cc>
  80dfcc:	b02b883a 	mov	r21,r22
  80dfd0:	00800044 	movi	r2,1
  80dfd4:	000b883a 	mov	r5,zero
  80dfd8:	0029883a 	mov	r20,zero
  80dfdc:	003ec306 	br	80daec <__alt_mem_onchip_mem+0xff805aec>
  80dfe0:	5805883a 	mov	r2,r11
  80dfe4:	003f9906 	br	80de4c <__alt_mem_onchip_mem+0xff805e4c>
  80dfe8:	00bff844 	movi	r2,-31
  80dfec:	1145c83a 	sub	r2,r2,r5
  80dff0:	8888d83a 	srl	r4,r17,r2
  80dff4:	00800804 	movi	r2,32
  80dff8:	18801a26 	beq	r3,r2,80e064 <__muldf3+0x6f4>
  80dffc:	00801004 	movi	r2,64
  80e000:	10c5c83a 	sub	r2,r2,r3
  80e004:	8884983a 	sll	r2,r17,r2
  80e008:	1204b03a 	or	r2,r2,r8
  80e00c:	1004c03a 	cmpne	r2,r2,zero
  80e010:	2084b03a 	or	r2,r4,r2
  80e014:	144001cc 	andi	r17,r2,7
  80e018:	88000d1e 	bne	r17,zero,80e050 <__muldf3+0x6e0>
  80e01c:	000b883a 	mov	r5,zero
  80e020:	1028d0fa 	srli	r20,r2,3
  80e024:	b02b883a 	mov	r21,r22
  80e028:	0005883a 	mov	r2,zero
  80e02c:	a468b03a 	or	r20,r20,r17
  80e030:	003eae06 	br	80daec <__alt_mem_onchip_mem+0xff805aec>
  80e034:	1007883a 	mov	r3,r2
  80e038:	0023883a 	mov	r17,zero
  80e03c:	880a927a 	slli	r5,r17,9
  80e040:	1805883a 	mov	r2,r3
  80e044:	8822977a 	slli	r17,r17,29
  80e048:	280ad33a 	srli	r5,r5,12
  80e04c:	003ff406 	br	80e020 <__alt_mem_onchip_mem+0xff806020>
  80e050:	10c003cc 	andi	r3,r2,15
  80e054:	01000104 	movi	r4,4
  80e058:	193ff626 	beq	r3,r4,80e034 <__alt_mem_onchip_mem+0xff806034>
  80e05c:	0023883a 	mov	r17,zero
  80e060:	003fd506 	br	80dfb8 <__alt_mem_onchip_mem+0xff805fb8>
  80e064:	0005883a 	mov	r2,zero
  80e068:	003fe706 	br	80e008 <__alt_mem_onchip_mem+0xff806008>
  80e06c:	00800434 	movhi	r2,16
  80e070:	89400234 	orhi	r5,r17,8
  80e074:	10bfffc4 	addi	r2,r2,-1
  80e078:	b02b883a 	mov	r21,r22
  80e07c:	288a703a 	and	r5,r5,r2
  80e080:	4029883a 	mov	r20,r8
  80e084:	003eff06 	br	80dc84 <__alt_mem_onchip_mem+0xff805c84>

0080e088 <__subdf3>:
  80e088:	02000434 	movhi	r8,16
  80e08c:	423fffc4 	addi	r8,r8,-1
  80e090:	defffb04 	addi	sp,sp,-20
  80e094:	2a14703a 	and	r10,r5,r8
  80e098:	3812d53a 	srli	r9,r7,20
  80e09c:	3a10703a 	and	r8,r7,r8
  80e0a0:	2006d77a 	srli	r3,r4,29
  80e0a4:	3004d77a 	srli	r2,r6,29
  80e0a8:	dc000015 	stw	r16,0(sp)
  80e0ac:	501490fa 	slli	r10,r10,3
  80e0b0:	2820d53a 	srli	r16,r5,20
  80e0b4:	401090fa 	slli	r8,r8,3
  80e0b8:	dc800215 	stw	r18,8(sp)
  80e0bc:	dc400115 	stw	r17,4(sp)
  80e0c0:	dfc00415 	stw	ra,16(sp)
  80e0c4:	202290fa 	slli	r17,r4,3
  80e0c8:	dcc00315 	stw	r19,12(sp)
  80e0cc:	4a41ffcc 	andi	r9,r9,2047
  80e0d0:	0101ffc4 	movi	r4,2047
  80e0d4:	2824d7fa 	srli	r18,r5,31
  80e0d8:	8401ffcc 	andi	r16,r16,2047
  80e0dc:	50c6b03a 	or	r3,r10,r3
  80e0e0:	380ed7fa 	srli	r7,r7,31
  80e0e4:	408ab03a 	or	r5,r8,r2
  80e0e8:	300c90fa 	slli	r6,r6,3
  80e0ec:	49009626 	beq	r9,r4,80e348 <__subdf3+0x2c0>
  80e0f0:	39c0005c 	xori	r7,r7,1
  80e0f4:	8245c83a 	sub	r2,r16,r9
  80e0f8:	3c807426 	beq	r7,r18,80e2cc <__subdf3+0x244>
  80e0fc:	0080af0e 	bge	zero,r2,80e3bc <__subdf3+0x334>
  80e100:	48002a1e 	bne	r9,zero,80e1ac <__subdf3+0x124>
  80e104:	2988b03a 	or	r4,r5,r6
  80e108:	20009a1e 	bne	r4,zero,80e374 <__subdf3+0x2ec>
  80e10c:	888001cc 	andi	r2,r17,7
  80e110:	10000726 	beq	r2,zero,80e130 <__subdf3+0xa8>
  80e114:	888003cc 	andi	r2,r17,15
  80e118:	01000104 	movi	r4,4
  80e11c:	11000426 	beq	r2,r4,80e130 <__subdf3+0xa8>
  80e120:	890b883a 	add	r5,r17,r4
  80e124:	2c63803a 	cmpltu	r17,r5,r17
  80e128:	1c47883a 	add	r3,r3,r17
  80e12c:	2823883a 	mov	r17,r5
  80e130:	1880202c 	andhi	r2,r3,128
  80e134:	10005926 	beq	r2,zero,80e29c <__subdf3+0x214>
  80e138:	84000044 	addi	r16,r16,1
  80e13c:	0081ffc4 	movi	r2,2047
  80e140:	8080be26 	beq	r16,r2,80e43c <__subdf3+0x3b4>
  80e144:	017fe034 	movhi	r5,65408
  80e148:	297fffc4 	addi	r5,r5,-1
  80e14c:	1946703a 	and	r3,r3,r5
  80e150:	1804977a 	slli	r2,r3,29
  80e154:	1806927a 	slli	r3,r3,9
  80e158:	8822d0fa 	srli	r17,r17,3
  80e15c:	8401ffcc 	andi	r16,r16,2047
  80e160:	180ad33a 	srli	r5,r3,12
  80e164:	9100004c 	andi	r4,r18,1
  80e168:	1444b03a 	or	r2,r2,r17
  80e16c:	80c1ffcc 	andi	r3,r16,2047
  80e170:	1820953a 	slli	r16,r3,20
  80e174:	20c03fcc 	andi	r3,r4,255
  80e178:	180897fa 	slli	r4,r3,31
  80e17c:	00c00434 	movhi	r3,16
  80e180:	18ffffc4 	addi	r3,r3,-1
  80e184:	28c6703a 	and	r3,r5,r3
  80e188:	1c06b03a 	or	r3,r3,r16
  80e18c:	1906b03a 	or	r3,r3,r4
  80e190:	dfc00417 	ldw	ra,16(sp)
  80e194:	dcc00317 	ldw	r19,12(sp)
  80e198:	dc800217 	ldw	r18,8(sp)
  80e19c:	dc400117 	ldw	r17,4(sp)
  80e1a0:	dc000017 	ldw	r16,0(sp)
  80e1a4:	dec00504 	addi	sp,sp,20
  80e1a8:	f800283a 	ret
  80e1ac:	0101ffc4 	movi	r4,2047
  80e1b0:	813fd626 	beq	r16,r4,80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e1b4:	29402034 	orhi	r5,r5,128
  80e1b8:	01000e04 	movi	r4,56
  80e1bc:	2080a316 	blt	r4,r2,80e44c <__subdf3+0x3c4>
  80e1c0:	010007c4 	movi	r4,31
  80e1c4:	2080c616 	blt	r4,r2,80e4e0 <__subdf3+0x458>
  80e1c8:	01000804 	movi	r4,32
  80e1cc:	2089c83a 	sub	r4,r4,r2
  80e1d0:	2910983a 	sll	r8,r5,r4
  80e1d4:	308ed83a 	srl	r7,r6,r2
  80e1d8:	3108983a 	sll	r4,r6,r4
  80e1dc:	2884d83a 	srl	r2,r5,r2
  80e1e0:	41ccb03a 	or	r6,r8,r7
  80e1e4:	2008c03a 	cmpne	r4,r4,zero
  80e1e8:	310cb03a 	or	r6,r6,r4
  80e1ec:	898dc83a 	sub	r6,r17,r6
  80e1f0:	89a3803a 	cmpltu	r17,r17,r6
  80e1f4:	1887c83a 	sub	r3,r3,r2
  80e1f8:	1c47c83a 	sub	r3,r3,r17
  80e1fc:	3023883a 	mov	r17,r6
  80e200:	1880202c 	andhi	r2,r3,128
  80e204:	10002326 	beq	r2,zero,80e294 <__subdf3+0x20c>
  80e208:	04c02034 	movhi	r19,128
  80e20c:	9cffffc4 	addi	r19,r19,-1
  80e210:	1ce6703a 	and	r19,r3,r19
  80e214:	98007a26 	beq	r19,zero,80e400 <__subdf3+0x378>
  80e218:	9809883a 	mov	r4,r19
  80e21c:	080eb880 	call	80eb88 <__clzsi2>
  80e220:	113ffe04 	addi	r4,r2,-8
  80e224:	00c007c4 	movi	r3,31
  80e228:	19007b16 	blt	r3,r4,80e418 <__subdf3+0x390>
  80e22c:	00800804 	movi	r2,32
  80e230:	1105c83a 	sub	r2,r2,r4
  80e234:	8884d83a 	srl	r2,r17,r2
  80e238:	9906983a 	sll	r3,r19,r4
  80e23c:	8922983a 	sll	r17,r17,r4
  80e240:	10c4b03a 	or	r2,r2,r3
  80e244:	24007816 	blt	r4,r16,80e428 <__subdf3+0x3a0>
  80e248:	2421c83a 	sub	r16,r4,r16
  80e24c:	80c00044 	addi	r3,r16,1
  80e250:	010007c4 	movi	r4,31
  80e254:	20c09516 	blt	r4,r3,80e4ac <__subdf3+0x424>
  80e258:	01400804 	movi	r5,32
  80e25c:	28cbc83a 	sub	r5,r5,r3
  80e260:	88c8d83a 	srl	r4,r17,r3
  80e264:	8962983a 	sll	r17,r17,r5
  80e268:	114a983a 	sll	r5,r2,r5
  80e26c:	10c6d83a 	srl	r3,r2,r3
  80e270:	8804c03a 	cmpne	r2,r17,zero
  80e274:	290ab03a 	or	r5,r5,r4
  80e278:	28a2b03a 	or	r17,r5,r2
  80e27c:	0021883a 	mov	r16,zero
  80e280:	003fa206 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e284:	2090b03a 	or	r8,r4,r2
  80e288:	40018e26 	beq	r8,zero,80e8c4 <__subdf3+0x83c>
  80e28c:	1007883a 	mov	r3,r2
  80e290:	2023883a 	mov	r17,r4
  80e294:	888001cc 	andi	r2,r17,7
  80e298:	103f9e1e 	bne	r2,zero,80e114 <__alt_mem_onchip_mem+0xff806114>
  80e29c:	1804977a 	slli	r2,r3,29
  80e2a0:	8822d0fa 	srli	r17,r17,3
  80e2a4:	1810d0fa 	srli	r8,r3,3
  80e2a8:	9100004c 	andi	r4,r18,1
  80e2ac:	1444b03a 	or	r2,r2,r17
  80e2b0:	00c1ffc4 	movi	r3,2047
  80e2b4:	80c02826 	beq	r16,r3,80e358 <__subdf3+0x2d0>
  80e2b8:	01400434 	movhi	r5,16
  80e2bc:	297fffc4 	addi	r5,r5,-1
  80e2c0:	80e0703a 	and	r16,r16,r3
  80e2c4:	414a703a 	and	r5,r8,r5
  80e2c8:	003fa806 	br	80e16c <__alt_mem_onchip_mem+0xff80616c>
  80e2cc:	0080630e 	bge	zero,r2,80e45c <__subdf3+0x3d4>
  80e2d0:	48003026 	beq	r9,zero,80e394 <__subdf3+0x30c>
  80e2d4:	0101ffc4 	movi	r4,2047
  80e2d8:	813f8c26 	beq	r16,r4,80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e2dc:	29402034 	orhi	r5,r5,128
  80e2e0:	01000e04 	movi	r4,56
  80e2e4:	2080a90e 	bge	r4,r2,80e58c <__subdf3+0x504>
  80e2e8:	298cb03a 	or	r6,r5,r6
  80e2ec:	3012c03a 	cmpne	r9,r6,zero
  80e2f0:	0005883a 	mov	r2,zero
  80e2f4:	4c53883a 	add	r9,r9,r17
  80e2f8:	4c63803a 	cmpltu	r17,r9,r17
  80e2fc:	10c7883a 	add	r3,r2,r3
  80e300:	88c7883a 	add	r3,r17,r3
  80e304:	4823883a 	mov	r17,r9
  80e308:	1880202c 	andhi	r2,r3,128
  80e30c:	1000d026 	beq	r2,zero,80e650 <__subdf3+0x5c8>
  80e310:	84000044 	addi	r16,r16,1
  80e314:	0081ffc4 	movi	r2,2047
  80e318:	8080fe26 	beq	r16,r2,80e714 <__subdf3+0x68c>
  80e31c:	00bfe034 	movhi	r2,65408
  80e320:	10bfffc4 	addi	r2,r2,-1
  80e324:	1886703a 	and	r3,r3,r2
  80e328:	880ad07a 	srli	r5,r17,1
  80e32c:	180497fa 	slli	r2,r3,31
  80e330:	8900004c 	andi	r4,r17,1
  80e334:	2922b03a 	or	r17,r5,r4
  80e338:	1806d07a 	srli	r3,r3,1
  80e33c:	1462b03a 	or	r17,r2,r17
  80e340:	3825883a 	mov	r18,r7
  80e344:	003f7106 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e348:	2984b03a 	or	r2,r5,r6
  80e34c:	103f6826 	beq	r2,zero,80e0f0 <__alt_mem_onchip_mem+0xff8060f0>
  80e350:	39c03fcc 	andi	r7,r7,255
  80e354:	003f6706 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e358:	4086b03a 	or	r3,r8,r2
  80e35c:	18015226 	beq	r3,zero,80e8a8 <__subdf3+0x820>
  80e360:	00c00434 	movhi	r3,16
  80e364:	41400234 	orhi	r5,r8,8
  80e368:	18ffffc4 	addi	r3,r3,-1
  80e36c:	28ca703a 	and	r5,r5,r3
  80e370:	003f7e06 	br	80e16c <__alt_mem_onchip_mem+0xff80616c>
  80e374:	10bfffc4 	addi	r2,r2,-1
  80e378:	1000491e 	bne	r2,zero,80e4a0 <__subdf3+0x418>
  80e37c:	898fc83a 	sub	r7,r17,r6
  80e380:	89e3803a 	cmpltu	r17,r17,r7
  80e384:	1947c83a 	sub	r3,r3,r5
  80e388:	1c47c83a 	sub	r3,r3,r17
  80e38c:	3823883a 	mov	r17,r7
  80e390:	003f9b06 	br	80e200 <__alt_mem_onchip_mem+0xff806200>
  80e394:	2988b03a 	or	r4,r5,r6
  80e398:	203f5c26 	beq	r4,zero,80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e39c:	10bfffc4 	addi	r2,r2,-1
  80e3a0:	1000931e 	bne	r2,zero,80e5f0 <__subdf3+0x568>
  80e3a4:	898d883a 	add	r6,r17,r6
  80e3a8:	3463803a 	cmpltu	r17,r6,r17
  80e3ac:	1947883a 	add	r3,r3,r5
  80e3b0:	88c7883a 	add	r3,r17,r3
  80e3b4:	3023883a 	mov	r17,r6
  80e3b8:	003fd306 	br	80e308 <__alt_mem_onchip_mem+0xff806308>
  80e3bc:	1000541e 	bne	r2,zero,80e510 <__subdf3+0x488>
  80e3c0:	80800044 	addi	r2,r16,1
  80e3c4:	1081ffcc 	andi	r2,r2,2047
  80e3c8:	01000044 	movi	r4,1
  80e3cc:	2080a20e 	bge	r4,r2,80e658 <__subdf3+0x5d0>
  80e3d0:	8989c83a 	sub	r4,r17,r6
  80e3d4:	8905803a 	cmpltu	r2,r17,r4
  80e3d8:	1967c83a 	sub	r19,r3,r5
  80e3dc:	98a7c83a 	sub	r19,r19,r2
  80e3e0:	9880202c 	andhi	r2,r19,128
  80e3e4:	10006326 	beq	r2,zero,80e574 <__subdf3+0x4ec>
  80e3e8:	3463c83a 	sub	r17,r6,r17
  80e3ec:	28c7c83a 	sub	r3,r5,r3
  80e3f0:	344d803a 	cmpltu	r6,r6,r17
  80e3f4:	19a7c83a 	sub	r19,r3,r6
  80e3f8:	3825883a 	mov	r18,r7
  80e3fc:	983f861e 	bne	r19,zero,80e218 <__alt_mem_onchip_mem+0xff806218>
  80e400:	8809883a 	mov	r4,r17
  80e404:	080eb880 	call	80eb88 <__clzsi2>
  80e408:	10800804 	addi	r2,r2,32
  80e40c:	113ffe04 	addi	r4,r2,-8
  80e410:	00c007c4 	movi	r3,31
  80e414:	193f850e 	bge	r3,r4,80e22c <__alt_mem_onchip_mem+0xff80622c>
  80e418:	10bff604 	addi	r2,r2,-40
  80e41c:	8884983a 	sll	r2,r17,r2
  80e420:	0023883a 	mov	r17,zero
  80e424:	243f880e 	bge	r4,r16,80e248 <__alt_mem_onchip_mem+0xff806248>
  80e428:	00ffe034 	movhi	r3,65408
  80e42c:	18ffffc4 	addi	r3,r3,-1
  80e430:	8121c83a 	sub	r16,r16,r4
  80e434:	10c6703a 	and	r3,r2,r3
  80e438:	003f3406 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e43c:	9100004c 	andi	r4,r18,1
  80e440:	000b883a 	mov	r5,zero
  80e444:	0005883a 	mov	r2,zero
  80e448:	003f4806 	br	80e16c <__alt_mem_onchip_mem+0xff80616c>
  80e44c:	298cb03a 	or	r6,r5,r6
  80e450:	300cc03a 	cmpne	r6,r6,zero
  80e454:	0005883a 	mov	r2,zero
  80e458:	003f6406 	br	80e1ec <__alt_mem_onchip_mem+0xff8061ec>
  80e45c:	10009a1e 	bne	r2,zero,80e6c8 <__subdf3+0x640>
  80e460:	82400044 	addi	r9,r16,1
  80e464:	4881ffcc 	andi	r2,r9,2047
  80e468:	02800044 	movi	r10,1
  80e46c:	5080670e 	bge	r10,r2,80e60c <__subdf3+0x584>
  80e470:	0081ffc4 	movi	r2,2047
  80e474:	4880af26 	beq	r9,r2,80e734 <__subdf3+0x6ac>
  80e478:	898d883a 	add	r6,r17,r6
  80e47c:	1945883a 	add	r2,r3,r5
  80e480:	3447803a 	cmpltu	r3,r6,r17
  80e484:	1887883a 	add	r3,r3,r2
  80e488:	182297fa 	slli	r17,r3,31
  80e48c:	300cd07a 	srli	r6,r6,1
  80e490:	1806d07a 	srli	r3,r3,1
  80e494:	4821883a 	mov	r16,r9
  80e498:	89a2b03a 	or	r17,r17,r6
  80e49c:	003f1b06 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e4a0:	0101ffc4 	movi	r4,2047
  80e4a4:	813f441e 	bne	r16,r4,80e1b8 <__alt_mem_onchip_mem+0xff8061b8>
  80e4a8:	003f1806 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e4ac:	843ff844 	addi	r16,r16,-31
  80e4b0:	01400804 	movi	r5,32
  80e4b4:	1408d83a 	srl	r4,r2,r16
  80e4b8:	19405026 	beq	r3,r5,80e5fc <__subdf3+0x574>
  80e4bc:	01401004 	movi	r5,64
  80e4c0:	28c7c83a 	sub	r3,r5,r3
  80e4c4:	10c4983a 	sll	r2,r2,r3
  80e4c8:	88a2b03a 	or	r17,r17,r2
  80e4cc:	8822c03a 	cmpne	r17,r17,zero
  80e4d0:	2462b03a 	or	r17,r4,r17
  80e4d4:	0007883a 	mov	r3,zero
  80e4d8:	0021883a 	mov	r16,zero
  80e4dc:	003f6d06 	br	80e294 <__alt_mem_onchip_mem+0xff806294>
  80e4e0:	11fff804 	addi	r7,r2,-32
  80e4e4:	01000804 	movi	r4,32
  80e4e8:	29ced83a 	srl	r7,r5,r7
  80e4ec:	11004526 	beq	r2,r4,80e604 <__subdf3+0x57c>
  80e4f0:	01001004 	movi	r4,64
  80e4f4:	2089c83a 	sub	r4,r4,r2
  80e4f8:	2904983a 	sll	r2,r5,r4
  80e4fc:	118cb03a 	or	r6,r2,r6
  80e500:	300cc03a 	cmpne	r6,r6,zero
  80e504:	398cb03a 	or	r6,r7,r6
  80e508:	0005883a 	mov	r2,zero
  80e50c:	003f3706 	br	80e1ec <__alt_mem_onchip_mem+0xff8061ec>
  80e510:	80002a26 	beq	r16,zero,80e5bc <__subdf3+0x534>
  80e514:	0101ffc4 	movi	r4,2047
  80e518:	49006626 	beq	r9,r4,80e6b4 <__subdf3+0x62c>
  80e51c:	0085c83a 	sub	r2,zero,r2
  80e520:	18c02034 	orhi	r3,r3,128
  80e524:	01000e04 	movi	r4,56
  80e528:	20807e16 	blt	r4,r2,80e724 <__subdf3+0x69c>
  80e52c:	010007c4 	movi	r4,31
  80e530:	2080e716 	blt	r4,r2,80e8d0 <__subdf3+0x848>
  80e534:	01000804 	movi	r4,32
  80e538:	2089c83a 	sub	r4,r4,r2
  80e53c:	1914983a 	sll	r10,r3,r4
  80e540:	8890d83a 	srl	r8,r17,r2
  80e544:	8908983a 	sll	r4,r17,r4
  80e548:	1884d83a 	srl	r2,r3,r2
  80e54c:	5222b03a 	or	r17,r10,r8
  80e550:	2006c03a 	cmpne	r3,r4,zero
  80e554:	88e2b03a 	or	r17,r17,r3
  80e558:	3463c83a 	sub	r17,r6,r17
  80e55c:	2885c83a 	sub	r2,r5,r2
  80e560:	344d803a 	cmpltu	r6,r6,r17
  80e564:	1187c83a 	sub	r3,r2,r6
  80e568:	4821883a 	mov	r16,r9
  80e56c:	3825883a 	mov	r18,r7
  80e570:	003f2306 	br	80e200 <__alt_mem_onchip_mem+0xff806200>
  80e574:	24d0b03a 	or	r8,r4,r19
  80e578:	40001b1e 	bne	r8,zero,80e5e8 <__subdf3+0x560>
  80e57c:	0005883a 	mov	r2,zero
  80e580:	0009883a 	mov	r4,zero
  80e584:	0021883a 	mov	r16,zero
  80e588:	003f4906 	br	80e2b0 <__alt_mem_onchip_mem+0xff8062b0>
  80e58c:	010007c4 	movi	r4,31
  80e590:	20803a16 	blt	r4,r2,80e67c <__subdf3+0x5f4>
  80e594:	01000804 	movi	r4,32
  80e598:	2089c83a 	sub	r4,r4,r2
  80e59c:	2912983a 	sll	r9,r5,r4
  80e5a0:	3090d83a 	srl	r8,r6,r2
  80e5a4:	3108983a 	sll	r4,r6,r4
  80e5a8:	2884d83a 	srl	r2,r5,r2
  80e5ac:	4a12b03a 	or	r9,r9,r8
  80e5b0:	2008c03a 	cmpne	r4,r4,zero
  80e5b4:	4912b03a 	or	r9,r9,r4
  80e5b8:	003f4e06 	br	80e2f4 <__alt_mem_onchip_mem+0xff8062f4>
  80e5bc:	1c48b03a 	or	r4,r3,r17
  80e5c0:	20003c26 	beq	r4,zero,80e6b4 <__subdf3+0x62c>
  80e5c4:	0084303a 	nor	r2,zero,r2
  80e5c8:	1000381e 	bne	r2,zero,80e6ac <__subdf3+0x624>
  80e5cc:	3463c83a 	sub	r17,r6,r17
  80e5d0:	28c5c83a 	sub	r2,r5,r3
  80e5d4:	344d803a 	cmpltu	r6,r6,r17
  80e5d8:	1187c83a 	sub	r3,r2,r6
  80e5dc:	4821883a 	mov	r16,r9
  80e5e0:	3825883a 	mov	r18,r7
  80e5e4:	003f0606 	br	80e200 <__alt_mem_onchip_mem+0xff806200>
  80e5e8:	2023883a 	mov	r17,r4
  80e5ec:	003f0906 	br	80e214 <__alt_mem_onchip_mem+0xff806214>
  80e5f0:	0101ffc4 	movi	r4,2047
  80e5f4:	813f3a1e 	bne	r16,r4,80e2e0 <__alt_mem_onchip_mem+0xff8062e0>
  80e5f8:	003ec406 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e5fc:	0005883a 	mov	r2,zero
  80e600:	003fb106 	br	80e4c8 <__alt_mem_onchip_mem+0xff8064c8>
  80e604:	0005883a 	mov	r2,zero
  80e608:	003fbc06 	br	80e4fc <__alt_mem_onchip_mem+0xff8064fc>
  80e60c:	1c44b03a 	or	r2,r3,r17
  80e610:	80008e1e 	bne	r16,zero,80e84c <__subdf3+0x7c4>
  80e614:	1000c826 	beq	r2,zero,80e938 <__subdf3+0x8b0>
  80e618:	2984b03a 	or	r2,r5,r6
  80e61c:	103ebb26 	beq	r2,zero,80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e620:	8989883a 	add	r4,r17,r6
  80e624:	1945883a 	add	r2,r3,r5
  80e628:	2447803a 	cmpltu	r3,r4,r17
  80e62c:	1887883a 	add	r3,r3,r2
  80e630:	1880202c 	andhi	r2,r3,128
  80e634:	2023883a 	mov	r17,r4
  80e638:	103f1626 	beq	r2,zero,80e294 <__alt_mem_onchip_mem+0xff806294>
  80e63c:	00bfe034 	movhi	r2,65408
  80e640:	10bfffc4 	addi	r2,r2,-1
  80e644:	5021883a 	mov	r16,r10
  80e648:	1886703a 	and	r3,r3,r2
  80e64c:	003eaf06 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e650:	3825883a 	mov	r18,r7
  80e654:	003f0f06 	br	80e294 <__alt_mem_onchip_mem+0xff806294>
  80e658:	1c44b03a 	or	r2,r3,r17
  80e65c:	8000251e 	bne	r16,zero,80e6f4 <__subdf3+0x66c>
  80e660:	1000661e 	bne	r2,zero,80e7fc <__subdf3+0x774>
  80e664:	2990b03a 	or	r8,r5,r6
  80e668:	40009626 	beq	r8,zero,80e8c4 <__subdf3+0x83c>
  80e66c:	2807883a 	mov	r3,r5
  80e670:	3023883a 	mov	r17,r6
  80e674:	3825883a 	mov	r18,r7
  80e678:	003ea406 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e67c:	127ff804 	addi	r9,r2,-32
  80e680:	01000804 	movi	r4,32
  80e684:	2a52d83a 	srl	r9,r5,r9
  80e688:	11008c26 	beq	r2,r4,80e8bc <__subdf3+0x834>
  80e68c:	01001004 	movi	r4,64
  80e690:	2085c83a 	sub	r2,r4,r2
  80e694:	2884983a 	sll	r2,r5,r2
  80e698:	118cb03a 	or	r6,r2,r6
  80e69c:	300cc03a 	cmpne	r6,r6,zero
  80e6a0:	4992b03a 	or	r9,r9,r6
  80e6a4:	0005883a 	mov	r2,zero
  80e6a8:	003f1206 	br	80e2f4 <__alt_mem_onchip_mem+0xff8062f4>
  80e6ac:	0101ffc4 	movi	r4,2047
  80e6b0:	493f9c1e 	bne	r9,r4,80e524 <__alt_mem_onchip_mem+0xff806524>
  80e6b4:	2807883a 	mov	r3,r5
  80e6b8:	3023883a 	mov	r17,r6
  80e6bc:	4821883a 	mov	r16,r9
  80e6c0:	3825883a 	mov	r18,r7
  80e6c4:	003e9106 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e6c8:	80001f1e 	bne	r16,zero,80e748 <__subdf3+0x6c0>
  80e6cc:	1c48b03a 	or	r4,r3,r17
  80e6d0:	20005a26 	beq	r4,zero,80e83c <__subdf3+0x7b4>
  80e6d4:	0084303a 	nor	r2,zero,r2
  80e6d8:	1000561e 	bne	r2,zero,80e834 <__subdf3+0x7ac>
  80e6dc:	89a3883a 	add	r17,r17,r6
  80e6e0:	1945883a 	add	r2,r3,r5
  80e6e4:	898d803a 	cmpltu	r6,r17,r6
  80e6e8:	3087883a 	add	r3,r6,r2
  80e6ec:	4821883a 	mov	r16,r9
  80e6f0:	003f0506 	br	80e308 <__alt_mem_onchip_mem+0xff806308>
  80e6f4:	10002b1e 	bne	r2,zero,80e7a4 <__subdf3+0x71c>
  80e6f8:	2984b03a 	or	r2,r5,r6
  80e6fc:	10008026 	beq	r2,zero,80e900 <__subdf3+0x878>
  80e700:	2807883a 	mov	r3,r5
  80e704:	3023883a 	mov	r17,r6
  80e708:	3825883a 	mov	r18,r7
  80e70c:	0401ffc4 	movi	r16,2047
  80e710:	003e7e06 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e714:	3809883a 	mov	r4,r7
  80e718:	0011883a 	mov	r8,zero
  80e71c:	0005883a 	mov	r2,zero
  80e720:	003ee306 	br	80e2b0 <__alt_mem_onchip_mem+0xff8062b0>
  80e724:	1c62b03a 	or	r17,r3,r17
  80e728:	8822c03a 	cmpne	r17,r17,zero
  80e72c:	0005883a 	mov	r2,zero
  80e730:	003f8906 	br	80e558 <__alt_mem_onchip_mem+0xff806558>
  80e734:	3809883a 	mov	r4,r7
  80e738:	4821883a 	mov	r16,r9
  80e73c:	0011883a 	mov	r8,zero
  80e740:	0005883a 	mov	r2,zero
  80e744:	003eda06 	br	80e2b0 <__alt_mem_onchip_mem+0xff8062b0>
  80e748:	0101ffc4 	movi	r4,2047
  80e74c:	49003b26 	beq	r9,r4,80e83c <__subdf3+0x7b4>
  80e750:	0085c83a 	sub	r2,zero,r2
  80e754:	18c02034 	orhi	r3,r3,128
  80e758:	01000e04 	movi	r4,56
  80e75c:	20806e16 	blt	r4,r2,80e918 <__subdf3+0x890>
  80e760:	010007c4 	movi	r4,31
  80e764:	20807716 	blt	r4,r2,80e944 <__subdf3+0x8bc>
  80e768:	01000804 	movi	r4,32
  80e76c:	2089c83a 	sub	r4,r4,r2
  80e770:	1914983a 	sll	r10,r3,r4
  80e774:	8890d83a 	srl	r8,r17,r2
  80e778:	8908983a 	sll	r4,r17,r4
  80e77c:	1884d83a 	srl	r2,r3,r2
  80e780:	5222b03a 	or	r17,r10,r8
  80e784:	2006c03a 	cmpne	r3,r4,zero
  80e788:	88e2b03a 	or	r17,r17,r3
  80e78c:	89a3883a 	add	r17,r17,r6
  80e790:	1145883a 	add	r2,r2,r5
  80e794:	898d803a 	cmpltu	r6,r17,r6
  80e798:	3087883a 	add	r3,r6,r2
  80e79c:	4821883a 	mov	r16,r9
  80e7a0:	003ed906 	br	80e308 <__alt_mem_onchip_mem+0xff806308>
  80e7a4:	2984b03a 	or	r2,r5,r6
  80e7a8:	10004226 	beq	r2,zero,80e8b4 <__subdf3+0x82c>
  80e7ac:	1808d0fa 	srli	r4,r3,3
  80e7b0:	8822d0fa 	srli	r17,r17,3
  80e7b4:	1806977a 	slli	r3,r3,29
  80e7b8:	2080022c 	andhi	r2,r4,8
  80e7bc:	1c62b03a 	or	r17,r3,r17
  80e7c0:	10000826 	beq	r2,zero,80e7e4 <__subdf3+0x75c>
  80e7c4:	2812d0fa 	srli	r9,r5,3
  80e7c8:	4880022c 	andhi	r2,r9,8
  80e7cc:	1000051e 	bne	r2,zero,80e7e4 <__subdf3+0x75c>
  80e7d0:	300cd0fa 	srli	r6,r6,3
  80e7d4:	2804977a 	slli	r2,r5,29
  80e7d8:	4809883a 	mov	r4,r9
  80e7dc:	3825883a 	mov	r18,r7
  80e7e0:	11a2b03a 	or	r17,r2,r6
  80e7e4:	8806d77a 	srli	r3,r17,29
  80e7e8:	200890fa 	slli	r4,r4,3
  80e7ec:	882290fa 	slli	r17,r17,3
  80e7f0:	0401ffc4 	movi	r16,2047
  80e7f4:	1906b03a 	or	r3,r3,r4
  80e7f8:	003e4406 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e7fc:	2984b03a 	or	r2,r5,r6
  80e800:	103e4226 	beq	r2,zero,80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e804:	8989c83a 	sub	r4,r17,r6
  80e808:	8911803a 	cmpltu	r8,r17,r4
  80e80c:	1945c83a 	sub	r2,r3,r5
  80e810:	1205c83a 	sub	r2,r2,r8
  80e814:	1200202c 	andhi	r8,r2,128
  80e818:	403e9a26 	beq	r8,zero,80e284 <__alt_mem_onchip_mem+0xff806284>
  80e81c:	3463c83a 	sub	r17,r6,r17
  80e820:	28c5c83a 	sub	r2,r5,r3
  80e824:	344d803a 	cmpltu	r6,r6,r17
  80e828:	1187c83a 	sub	r3,r2,r6
  80e82c:	3825883a 	mov	r18,r7
  80e830:	003e3606 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e834:	0101ffc4 	movi	r4,2047
  80e838:	493fc71e 	bne	r9,r4,80e758 <__alt_mem_onchip_mem+0xff806758>
  80e83c:	2807883a 	mov	r3,r5
  80e840:	3023883a 	mov	r17,r6
  80e844:	4821883a 	mov	r16,r9
  80e848:	003e3006 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e84c:	10003626 	beq	r2,zero,80e928 <__subdf3+0x8a0>
  80e850:	2984b03a 	or	r2,r5,r6
  80e854:	10001726 	beq	r2,zero,80e8b4 <__subdf3+0x82c>
  80e858:	1808d0fa 	srli	r4,r3,3
  80e85c:	8822d0fa 	srli	r17,r17,3
  80e860:	1806977a 	slli	r3,r3,29
  80e864:	2080022c 	andhi	r2,r4,8
  80e868:	1c62b03a 	or	r17,r3,r17
  80e86c:	10000726 	beq	r2,zero,80e88c <__subdf3+0x804>
  80e870:	2812d0fa 	srli	r9,r5,3
  80e874:	4880022c 	andhi	r2,r9,8
  80e878:	1000041e 	bne	r2,zero,80e88c <__subdf3+0x804>
  80e87c:	300cd0fa 	srli	r6,r6,3
  80e880:	2804977a 	slli	r2,r5,29
  80e884:	4809883a 	mov	r4,r9
  80e888:	11a2b03a 	or	r17,r2,r6
  80e88c:	8806d77a 	srli	r3,r17,29
  80e890:	200890fa 	slli	r4,r4,3
  80e894:	882290fa 	slli	r17,r17,3
  80e898:	3825883a 	mov	r18,r7
  80e89c:	1906b03a 	or	r3,r3,r4
  80e8a0:	0401ffc4 	movi	r16,2047
  80e8a4:	003e1906 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e8a8:	000b883a 	mov	r5,zero
  80e8ac:	0005883a 	mov	r2,zero
  80e8b0:	003e2e06 	br	80e16c <__alt_mem_onchip_mem+0xff80616c>
  80e8b4:	0401ffc4 	movi	r16,2047
  80e8b8:	003e1406 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e8bc:	0005883a 	mov	r2,zero
  80e8c0:	003f7506 	br	80e698 <__alt_mem_onchip_mem+0xff806698>
  80e8c4:	0005883a 	mov	r2,zero
  80e8c8:	0009883a 	mov	r4,zero
  80e8cc:	003e7806 	br	80e2b0 <__alt_mem_onchip_mem+0xff8062b0>
  80e8d0:	123ff804 	addi	r8,r2,-32
  80e8d4:	01000804 	movi	r4,32
  80e8d8:	1a10d83a 	srl	r8,r3,r8
  80e8dc:	11002526 	beq	r2,r4,80e974 <__subdf3+0x8ec>
  80e8e0:	01001004 	movi	r4,64
  80e8e4:	2085c83a 	sub	r2,r4,r2
  80e8e8:	1884983a 	sll	r2,r3,r2
  80e8ec:	1444b03a 	or	r2,r2,r17
  80e8f0:	1004c03a 	cmpne	r2,r2,zero
  80e8f4:	40a2b03a 	or	r17,r8,r2
  80e8f8:	0005883a 	mov	r2,zero
  80e8fc:	003f1606 	br	80e558 <__alt_mem_onchip_mem+0xff806558>
  80e900:	02000434 	movhi	r8,16
  80e904:	0009883a 	mov	r4,zero
  80e908:	423fffc4 	addi	r8,r8,-1
  80e90c:	00bfffc4 	movi	r2,-1
  80e910:	0401ffc4 	movi	r16,2047
  80e914:	003e6606 	br	80e2b0 <__alt_mem_onchip_mem+0xff8062b0>
  80e918:	1c62b03a 	or	r17,r3,r17
  80e91c:	8822c03a 	cmpne	r17,r17,zero
  80e920:	0005883a 	mov	r2,zero
  80e924:	003f9906 	br	80e78c <__alt_mem_onchip_mem+0xff80678c>
  80e928:	2807883a 	mov	r3,r5
  80e92c:	3023883a 	mov	r17,r6
  80e930:	0401ffc4 	movi	r16,2047
  80e934:	003df506 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e938:	2807883a 	mov	r3,r5
  80e93c:	3023883a 	mov	r17,r6
  80e940:	003df206 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e944:	123ff804 	addi	r8,r2,-32
  80e948:	01000804 	movi	r4,32
  80e94c:	1a10d83a 	srl	r8,r3,r8
  80e950:	11000a26 	beq	r2,r4,80e97c <__subdf3+0x8f4>
  80e954:	01001004 	movi	r4,64
  80e958:	2085c83a 	sub	r2,r4,r2
  80e95c:	1884983a 	sll	r2,r3,r2
  80e960:	1444b03a 	or	r2,r2,r17
  80e964:	1004c03a 	cmpne	r2,r2,zero
  80e968:	40a2b03a 	or	r17,r8,r2
  80e96c:	0005883a 	mov	r2,zero
  80e970:	003f8606 	br	80e78c <__alt_mem_onchip_mem+0xff80678c>
  80e974:	0005883a 	mov	r2,zero
  80e978:	003fdc06 	br	80e8ec <__alt_mem_onchip_mem+0xff8068ec>
  80e97c:	0005883a 	mov	r2,zero
  80e980:	003ff706 	br	80e960 <__alt_mem_onchip_mem+0xff806960>

0080e984 <__fixdfsi>:
  80e984:	280cd53a 	srli	r6,r5,20
  80e988:	00c00434 	movhi	r3,16
  80e98c:	18ffffc4 	addi	r3,r3,-1
  80e990:	3181ffcc 	andi	r6,r6,2047
  80e994:	01c0ff84 	movi	r7,1022
  80e998:	28c6703a 	and	r3,r5,r3
  80e99c:	280ad7fa 	srli	r5,r5,31
  80e9a0:	3980120e 	bge	r7,r6,80e9ec <__fixdfsi+0x68>
  80e9a4:	00810744 	movi	r2,1053
  80e9a8:	11800c16 	blt	r2,r6,80e9dc <__fixdfsi+0x58>
  80e9ac:	00810cc4 	movi	r2,1075
  80e9b0:	1185c83a 	sub	r2,r2,r6
  80e9b4:	01c007c4 	movi	r7,31
  80e9b8:	18c00434 	orhi	r3,r3,16
  80e9bc:	38800d16 	blt	r7,r2,80e9f4 <__fixdfsi+0x70>
  80e9c0:	31befb44 	addi	r6,r6,-1043
  80e9c4:	2084d83a 	srl	r2,r4,r2
  80e9c8:	1986983a 	sll	r3,r3,r6
  80e9cc:	1884b03a 	or	r2,r3,r2
  80e9d0:	28000726 	beq	r5,zero,80e9f0 <__fixdfsi+0x6c>
  80e9d4:	0085c83a 	sub	r2,zero,r2
  80e9d8:	f800283a 	ret
  80e9dc:	00a00034 	movhi	r2,32768
  80e9e0:	10bfffc4 	addi	r2,r2,-1
  80e9e4:	2885883a 	add	r2,r5,r2
  80e9e8:	f800283a 	ret
  80e9ec:	0005883a 	mov	r2,zero
  80e9f0:	f800283a 	ret
  80e9f4:	008104c4 	movi	r2,1043
  80e9f8:	1185c83a 	sub	r2,r2,r6
  80e9fc:	1884d83a 	srl	r2,r3,r2
  80ea00:	003ff306 	br	80e9d0 <__alt_mem_onchip_mem+0xff8069d0>

0080ea04 <__floatsidf>:
  80ea04:	defffd04 	addi	sp,sp,-12
  80ea08:	dfc00215 	stw	ra,8(sp)
  80ea0c:	dc400115 	stw	r17,4(sp)
  80ea10:	dc000015 	stw	r16,0(sp)
  80ea14:	20002b26 	beq	r4,zero,80eac4 <__floatsidf+0xc0>
  80ea18:	2023883a 	mov	r17,r4
  80ea1c:	2020d7fa 	srli	r16,r4,31
  80ea20:	20002d16 	blt	r4,zero,80ead8 <__floatsidf+0xd4>
  80ea24:	8809883a 	mov	r4,r17
  80ea28:	080eb880 	call	80eb88 <__clzsi2>
  80ea2c:	01410784 	movi	r5,1054
  80ea30:	288bc83a 	sub	r5,r5,r2
  80ea34:	01010cc4 	movi	r4,1075
  80ea38:	2149c83a 	sub	r4,r4,r5
  80ea3c:	00c007c4 	movi	r3,31
  80ea40:	1900160e 	bge	r3,r4,80ea9c <__floatsidf+0x98>
  80ea44:	00c104c4 	movi	r3,1043
  80ea48:	1947c83a 	sub	r3,r3,r5
  80ea4c:	88c6983a 	sll	r3,r17,r3
  80ea50:	00800434 	movhi	r2,16
  80ea54:	10bfffc4 	addi	r2,r2,-1
  80ea58:	1886703a 	and	r3,r3,r2
  80ea5c:	2941ffcc 	andi	r5,r5,2047
  80ea60:	800d883a 	mov	r6,r16
  80ea64:	0005883a 	mov	r2,zero
  80ea68:	280a953a 	slli	r5,r5,20
  80ea6c:	31803fcc 	andi	r6,r6,255
  80ea70:	01000434 	movhi	r4,16
  80ea74:	300c97fa 	slli	r6,r6,31
  80ea78:	213fffc4 	addi	r4,r4,-1
  80ea7c:	1906703a 	and	r3,r3,r4
  80ea80:	1946b03a 	or	r3,r3,r5
  80ea84:	1986b03a 	or	r3,r3,r6
  80ea88:	dfc00217 	ldw	ra,8(sp)
  80ea8c:	dc400117 	ldw	r17,4(sp)
  80ea90:	dc000017 	ldw	r16,0(sp)
  80ea94:	dec00304 	addi	sp,sp,12
  80ea98:	f800283a 	ret
  80ea9c:	00c002c4 	movi	r3,11
  80eaa0:	1887c83a 	sub	r3,r3,r2
  80eaa4:	88c6d83a 	srl	r3,r17,r3
  80eaa8:	8904983a 	sll	r2,r17,r4
  80eaac:	01000434 	movhi	r4,16
  80eab0:	213fffc4 	addi	r4,r4,-1
  80eab4:	2941ffcc 	andi	r5,r5,2047
  80eab8:	1906703a 	and	r3,r3,r4
  80eabc:	800d883a 	mov	r6,r16
  80eac0:	003fe906 	br	80ea68 <__alt_mem_onchip_mem+0xff806a68>
  80eac4:	000d883a 	mov	r6,zero
  80eac8:	000b883a 	mov	r5,zero
  80eacc:	0007883a 	mov	r3,zero
  80ead0:	0005883a 	mov	r2,zero
  80ead4:	003fe406 	br	80ea68 <__alt_mem_onchip_mem+0xff806a68>
  80ead8:	0123c83a 	sub	r17,zero,r4
  80eadc:	003fd106 	br	80ea24 <__alt_mem_onchip_mem+0xff806a24>

0080eae0 <__floatunsidf>:
  80eae0:	defffe04 	addi	sp,sp,-8
  80eae4:	dc000015 	stw	r16,0(sp)
  80eae8:	dfc00115 	stw	ra,4(sp)
  80eaec:	2021883a 	mov	r16,r4
  80eaf0:	20002226 	beq	r4,zero,80eb7c <__floatunsidf+0x9c>
  80eaf4:	080eb880 	call	80eb88 <__clzsi2>
  80eaf8:	01010784 	movi	r4,1054
  80eafc:	2089c83a 	sub	r4,r4,r2
  80eb00:	01810cc4 	movi	r6,1075
  80eb04:	310dc83a 	sub	r6,r6,r4
  80eb08:	00c007c4 	movi	r3,31
  80eb0c:	1980120e 	bge	r3,r6,80eb58 <__floatunsidf+0x78>
  80eb10:	00c104c4 	movi	r3,1043
  80eb14:	1907c83a 	sub	r3,r3,r4
  80eb18:	80ca983a 	sll	r5,r16,r3
  80eb1c:	00800434 	movhi	r2,16
  80eb20:	10bfffc4 	addi	r2,r2,-1
  80eb24:	2101ffcc 	andi	r4,r4,2047
  80eb28:	0021883a 	mov	r16,zero
  80eb2c:	288a703a 	and	r5,r5,r2
  80eb30:	2008953a 	slli	r4,r4,20
  80eb34:	00c00434 	movhi	r3,16
  80eb38:	18ffffc4 	addi	r3,r3,-1
  80eb3c:	28c6703a 	and	r3,r5,r3
  80eb40:	8005883a 	mov	r2,r16
  80eb44:	1906b03a 	or	r3,r3,r4
  80eb48:	dfc00117 	ldw	ra,4(sp)
  80eb4c:	dc000017 	ldw	r16,0(sp)
  80eb50:	dec00204 	addi	sp,sp,8
  80eb54:	f800283a 	ret
  80eb58:	00c002c4 	movi	r3,11
  80eb5c:	188bc83a 	sub	r5,r3,r2
  80eb60:	814ad83a 	srl	r5,r16,r5
  80eb64:	00c00434 	movhi	r3,16
  80eb68:	18ffffc4 	addi	r3,r3,-1
  80eb6c:	81a0983a 	sll	r16,r16,r6
  80eb70:	2101ffcc 	andi	r4,r4,2047
  80eb74:	28ca703a 	and	r5,r5,r3
  80eb78:	003fed06 	br	80eb30 <__alt_mem_onchip_mem+0xff806b30>
  80eb7c:	0009883a 	mov	r4,zero
  80eb80:	000b883a 	mov	r5,zero
  80eb84:	003fea06 	br	80eb30 <__alt_mem_onchip_mem+0xff806b30>

0080eb88 <__clzsi2>:
  80eb88:	00bfffd4 	movui	r2,65535
  80eb8c:	11000536 	bltu	r2,r4,80eba4 <__clzsi2+0x1c>
  80eb90:	00803fc4 	movi	r2,255
  80eb94:	11000f36 	bltu	r2,r4,80ebd4 <__clzsi2+0x4c>
  80eb98:	00800804 	movi	r2,32
  80eb9c:	0007883a 	mov	r3,zero
  80eba0:	00000506 	br	80ebb8 <__clzsi2+0x30>
  80eba4:	00804034 	movhi	r2,256
  80eba8:	10bfffc4 	addi	r2,r2,-1
  80ebac:	11000c2e 	bgeu	r2,r4,80ebe0 <__clzsi2+0x58>
  80ebb0:	00800204 	movi	r2,8
  80ebb4:	00c00604 	movi	r3,24
  80ebb8:	20c8d83a 	srl	r4,r4,r3
  80ebbc:	00c02074 	movhi	r3,129
  80ebc0:	18cd0504 	addi	r3,r3,13332
  80ebc4:	1909883a 	add	r4,r3,r4
  80ebc8:	20c00003 	ldbu	r3,0(r4)
  80ebcc:	10c5c83a 	sub	r2,r2,r3
  80ebd0:	f800283a 	ret
  80ebd4:	00800604 	movi	r2,24
  80ebd8:	00c00204 	movi	r3,8
  80ebdc:	003ff606 	br	80ebb8 <__alt_mem_onchip_mem+0xff806bb8>
  80ebe0:	00800404 	movi	r2,16
  80ebe4:	1007883a 	mov	r3,r2
  80ebe8:	003ff306 	br	80ebb8 <__alt_mem_onchip_mem+0xff806bb8>

0080ebec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80ebec:	defff504 	addi	sp,sp,-44
  80ebf0:	df000a15 	stw	fp,40(sp)
  80ebf4:	df000a04 	addi	fp,sp,40
  80ebf8:	e13ffc15 	stw	r4,-16(fp)
  80ebfc:	e17ffd15 	stw	r5,-12(fp)
  80ec00:	e1bffe15 	stw	r6,-8(fp)
  80ec04:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80ec08:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80ec0c:	d0a76c17 	ldw	r2,-25168(gp)
  
  if (alt_ticks_per_second ())
  80ec10:	10003c26 	beq	r2,zero,80ed04 <alt_alarm_start+0x118>
  {
    if (alarm)
  80ec14:	e0bffc17 	ldw	r2,-16(fp)
  80ec18:	10003826 	beq	r2,zero,80ecfc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80ec1c:	e0bffc17 	ldw	r2,-16(fp)
  80ec20:	e0fffe17 	ldw	r3,-8(fp)
  80ec24:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80ec28:	e0bffc17 	ldw	r2,-16(fp)
  80ec2c:	e0ffff17 	ldw	r3,-4(fp)
  80ec30:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ec34:	0005303a 	rdctl	r2,status
  80ec38:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ec3c:	e0fff917 	ldw	r3,-28(fp)
  80ec40:	00bfff84 	movi	r2,-2
  80ec44:	1884703a 	and	r2,r3,r2
  80ec48:	1001703a 	wrctl	status,r2
  
  return context;
  80ec4c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80ec50:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80ec54:	d0a76d17 	ldw	r2,-25164(gp)
      
      current_nticks = alt_nticks();
  80ec58:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80ec5c:	e0fffd17 	ldw	r3,-12(fp)
  80ec60:	e0bff617 	ldw	r2,-40(fp)
  80ec64:	1885883a 	add	r2,r3,r2
  80ec68:	10c00044 	addi	r3,r2,1
  80ec6c:	e0bffc17 	ldw	r2,-16(fp)
  80ec70:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80ec74:	e0bffc17 	ldw	r2,-16(fp)
  80ec78:	10c00217 	ldw	r3,8(r2)
  80ec7c:	e0bff617 	ldw	r2,-40(fp)
  80ec80:	1880042e 	bgeu	r3,r2,80ec94 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80ec84:	e0bffc17 	ldw	r2,-16(fp)
  80ec88:	00c00044 	movi	r3,1
  80ec8c:	10c00405 	stb	r3,16(r2)
  80ec90:	00000206 	br	80ec9c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80ec94:	e0bffc17 	ldw	r2,-16(fp)
  80ec98:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80ec9c:	e0bffc17 	ldw	r2,-16(fp)
  80eca0:	d0e00f04 	addi	r3,gp,-32708
  80eca4:	e0fffa15 	stw	r3,-24(fp)
  80eca8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80ecac:	e0bffb17 	ldw	r2,-20(fp)
  80ecb0:	e0fffa17 	ldw	r3,-24(fp)
  80ecb4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80ecb8:	e0bffa17 	ldw	r2,-24(fp)
  80ecbc:	10c00017 	ldw	r3,0(r2)
  80ecc0:	e0bffb17 	ldw	r2,-20(fp)
  80ecc4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80ecc8:	e0bffa17 	ldw	r2,-24(fp)
  80eccc:	10800017 	ldw	r2,0(r2)
  80ecd0:	e0fffb17 	ldw	r3,-20(fp)
  80ecd4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80ecd8:	e0bffa17 	ldw	r2,-24(fp)
  80ecdc:	e0fffb17 	ldw	r3,-20(fp)
  80ece0:	10c00015 	stw	r3,0(r2)
  80ece4:	e0bff817 	ldw	r2,-32(fp)
  80ece8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ecec:	e0bff717 	ldw	r2,-36(fp)
  80ecf0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80ecf4:	0005883a 	mov	r2,zero
  80ecf8:	00000306 	br	80ed08 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80ecfc:	00bffa84 	movi	r2,-22
  80ed00:	00000106 	br	80ed08 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80ed04:	00bfde84 	movi	r2,-134
  }
}
  80ed08:	e037883a 	mov	sp,fp
  80ed0c:	df000017 	ldw	fp,0(sp)
  80ed10:	dec00104 	addi	sp,sp,4
  80ed14:	f800283a 	ret

0080ed18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ed18:	defffe04 	addi	sp,sp,-8
  80ed1c:	dfc00115 	stw	ra,4(sp)
  80ed20:	df000015 	stw	fp,0(sp)
  80ed24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ed28:	d0a00c17 	ldw	r2,-32720(gp)
  80ed2c:	10000326 	beq	r2,zero,80ed3c <alt_get_errno+0x24>
  80ed30:	d0a00c17 	ldw	r2,-32720(gp)
  80ed34:	103ee83a 	callr	r2
  80ed38:	00000106 	br	80ed40 <alt_get_errno+0x28>
  80ed3c:	d0a76104 	addi	r2,gp,-25212
}
  80ed40:	e037883a 	mov	sp,fp
  80ed44:	dfc00117 	ldw	ra,4(sp)
  80ed48:	df000017 	ldw	fp,0(sp)
  80ed4c:	dec00204 	addi	sp,sp,8
  80ed50:	f800283a 	ret

0080ed54 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80ed54:	defffb04 	addi	sp,sp,-20
  80ed58:	dfc00415 	stw	ra,16(sp)
  80ed5c:	df000315 	stw	fp,12(sp)
  80ed60:	df000304 	addi	fp,sp,12
  80ed64:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80ed68:	e0bfff17 	ldw	r2,-4(fp)
  80ed6c:	10000616 	blt	r2,zero,80ed88 <close+0x34>
  80ed70:	e0bfff17 	ldw	r2,-4(fp)
  80ed74:	10c00324 	muli	r3,r2,12
  80ed78:	00802074 	movhi	r2,129
  80ed7c:	108f8f04 	addi	r2,r2,15932
  80ed80:	1885883a 	add	r2,r3,r2
  80ed84:	00000106 	br	80ed8c <close+0x38>
  80ed88:	0005883a 	mov	r2,zero
  80ed8c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80ed90:	e0bffd17 	ldw	r2,-12(fp)
  80ed94:	10001926 	beq	r2,zero,80edfc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80ed98:	e0bffd17 	ldw	r2,-12(fp)
  80ed9c:	10800017 	ldw	r2,0(r2)
  80eda0:	10800417 	ldw	r2,16(r2)
  80eda4:	10000626 	beq	r2,zero,80edc0 <close+0x6c>
  80eda8:	e0bffd17 	ldw	r2,-12(fp)
  80edac:	10800017 	ldw	r2,0(r2)
  80edb0:	10800417 	ldw	r2,16(r2)
  80edb4:	e13ffd17 	ldw	r4,-12(fp)
  80edb8:	103ee83a 	callr	r2
  80edbc:	00000106 	br	80edc4 <close+0x70>
  80edc0:	0005883a 	mov	r2,zero
  80edc4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80edc8:	e13fff17 	ldw	r4,-4(fp)
  80edcc:	080f7e80 	call	80f7e8 <alt_release_fd>
    if (rval < 0)
  80edd0:	e0bffe17 	ldw	r2,-8(fp)
  80edd4:	1000070e 	bge	r2,zero,80edf4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80edd8:	080ed180 	call	80ed18 <alt_get_errno>
  80eddc:	1007883a 	mov	r3,r2
  80ede0:	e0bffe17 	ldw	r2,-8(fp)
  80ede4:	0085c83a 	sub	r2,zero,r2
  80ede8:	18800015 	stw	r2,0(r3)
      return -1;
  80edec:	00bfffc4 	movi	r2,-1
  80edf0:	00000706 	br	80ee10 <close+0xbc>
    }
    return 0;
  80edf4:	0005883a 	mov	r2,zero
  80edf8:	00000506 	br	80ee10 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80edfc:	080ed180 	call	80ed18 <alt_get_errno>
  80ee00:	1007883a 	mov	r3,r2
  80ee04:	00801444 	movi	r2,81
  80ee08:	18800015 	stw	r2,0(r3)
    return -1;
  80ee0c:	00bfffc4 	movi	r2,-1
  }
}
  80ee10:	e037883a 	mov	sp,fp
  80ee14:	dfc00117 	ldw	ra,4(sp)
  80ee18:	df000017 	ldw	fp,0(sp)
  80ee1c:	dec00204 	addi	sp,sp,8
  80ee20:	f800283a 	ret

0080ee24 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80ee24:	defffc04 	addi	sp,sp,-16
  80ee28:	df000315 	stw	fp,12(sp)
  80ee2c:	df000304 	addi	fp,sp,12
  80ee30:	e13ffd15 	stw	r4,-12(fp)
  80ee34:	e17ffe15 	stw	r5,-8(fp)
  80ee38:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80ee3c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ee40:	e037883a 	mov	sp,fp
  80ee44:	df000017 	ldw	fp,0(sp)
  80ee48:	dec00104 	addi	sp,sp,4
  80ee4c:	f800283a 	ret

0080ee50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ee50:	defffe04 	addi	sp,sp,-8
  80ee54:	dfc00115 	stw	ra,4(sp)
  80ee58:	df000015 	stw	fp,0(sp)
  80ee5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ee60:	d0a00c17 	ldw	r2,-32720(gp)
  80ee64:	10000326 	beq	r2,zero,80ee74 <alt_get_errno+0x24>
  80ee68:	d0a00c17 	ldw	r2,-32720(gp)
  80ee6c:	103ee83a 	callr	r2
  80ee70:	00000106 	br	80ee78 <alt_get_errno+0x28>
  80ee74:	d0a76104 	addi	r2,gp,-25212
}
  80ee78:	e037883a 	mov	sp,fp
  80ee7c:	dfc00117 	ldw	ra,4(sp)
  80ee80:	df000017 	ldw	fp,0(sp)
  80ee84:	dec00204 	addi	sp,sp,8
  80ee88:	f800283a 	ret

0080ee8c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80ee8c:	defffb04 	addi	sp,sp,-20
  80ee90:	dfc00415 	stw	ra,16(sp)
  80ee94:	df000315 	stw	fp,12(sp)
  80ee98:	df000304 	addi	fp,sp,12
  80ee9c:	e13ffe15 	stw	r4,-8(fp)
  80eea0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80eea4:	e0bffe17 	ldw	r2,-8(fp)
  80eea8:	10000616 	blt	r2,zero,80eec4 <fstat+0x38>
  80eeac:	e0bffe17 	ldw	r2,-8(fp)
  80eeb0:	10c00324 	muli	r3,r2,12
  80eeb4:	00802074 	movhi	r2,129
  80eeb8:	108f8f04 	addi	r2,r2,15932
  80eebc:	1885883a 	add	r2,r3,r2
  80eec0:	00000106 	br	80eec8 <fstat+0x3c>
  80eec4:	0005883a 	mov	r2,zero
  80eec8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80eecc:	e0bffd17 	ldw	r2,-12(fp)
  80eed0:	10001026 	beq	r2,zero,80ef14 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80eed4:	e0bffd17 	ldw	r2,-12(fp)
  80eed8:	10800017 	ldw	r2,0(r2)
  80eedc:	10800817 	ldw	r2,32(r2)
  80eee0:	10000726 	beq	r2,zero,80ef00 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80eee4:	e0bffd17 	ldw	r2,-12(fp)
  80eee8:	10800017 	ldw	r2,0(r2)
  80eeec:	10800817 	ldw	r2,32(r2)
  80eef0:	e17fff17 	ldw	r5,-4(fp)
  80eef4:	e13ffd17 	ldw	r4,-12(fp)
  80eef8:	103ee83a 	callr	r2
  80eefc:	00000a06 	br	80ef28 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80ef00:	e0bfff17 	ldw	r2,-4(fp)
  80ef04:	00c80004 	movi	r3,8192
  80ef08:	10c00115 	stw	r3,4(r2)
      return 0;
  80ef0c:	0005883a 	mov	r2,zero
  80ef10:	00000506 	br	80ef28 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ef14:	080ee500 	call	80ee50 <alt_get_errno>
  80ef18:	1007883a 	mov	r3,r2
  80ef1c:	00801444 	movi	r2,81
  80ef20:	18800015 	stw	r2,0(r3)
    return -1;
  80ef24:	00bfffc4 	movi	r2,-1
  }
}
  80ef28:	e037883a 	mov	sp,fp
  80ef2c:	dfc00117 	ldw	ra,4(sp)
  80ef30:	df000017 	ldw	fp,0(sp)
  80ef34:	dec00204 	addi	sp,sp,8
  80ef38:	f800283a 	ret

0080ef3c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80ef3c:	defff004 	addi	sp,sp,-64
  80ef40:	df000f15 	stw	fp,60(sp)
  80ef44:	df000f04 	addi	fp,sp,60
  80ef48:	e13ffd15 	stw	r4,-12(fp)
  80ef4c:	e17ffe15 	stw	r5,-8(fp)
  80ef50:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80ef54:	00bffa84 	movi	r2,-22
  80ef58:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80ef5c:	e0bffd17 	ldw	r2,-12(fp)
  80ef60:	10800828 	cmpgeui	r2,r2,32
  80ef64:	1000501e 	bne	r2,zero,80f0a8 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ef68:	0005303a 	rdctl	r2,status
  80ef6c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ef70:	e0fff617 	ldw	r3,-40(fp)
  80ef74:	00bfff84 	movi	r2,-2
  80ef78:	1884703a 	and	r2,r3,r2
  80ef7c:	1001703a 	wrctl	status,r2
  
  return context;
  80ef80:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80ef84:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  80ef88:	00802074 	movhi	r2,129
  80ef8c:	109c0504 	addi	r2,r2,28692
  80ef90:	e0fffd17 	ldw	r3,-12(fp)
  80ef94:	180690fa 	slli	r3,r3,3
  80ef98:	10c5883a 	add	r2,r2,r3
  80ef9c:	e0ffff17 	ldw	r3,-4(fp)
  80efa0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80efa4:	00802074 	movhi	r2,129
  80efa8:	109c0504 	addi	r2,r2,28692
  80efac:	e0fffd17 	ldw	r3,-12(fp)
  80efb0:	180690fa 	slli	r3,r3,3
  80efb4:	10c5883a 	add	r2,r2,r3
  80efb8:	10800104 	addi	r2,r2,4
  80efbc:	e0fffe17 	ldw	r3,-8(fp)
  80efc0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80efc4:	e0bfff17 	ldw	r2,-4(fp)
  80efc8:	10001926 	beq	r2,zero,80f030 <alt_irq_register+0xf4>
  80efcc:	e0bffd17 	ldw	r2,-12(fp)
  80efd0:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80efd4:	0005303a 	rdctl	r2,status
  80efd8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80efdc:	e0fff717 	ldw	r3,-36(fp)
  80efe0:	00bfff84 	movi	r2,-2
  80efe4:	1884703a 	and	r2,r3,r2
  80efe8:	1001703a 	wrctl	status,r2
  
  return context;
  80efec:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80eff0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80eff4:	00c00044 	movi	r3,1
  80eff8:	e0bff217 	ldw	r2,-56(fp)
  80effc:	1884983a 	sll	r2,r3,r2
  80f000:	1007883a 	mov	r3,r2
  80f004:	d0a76817 	ldw	r2,-25184(gp)
  80f008:	1884b03a 	or	r2,r3,r2
  80f00c:	d0a76815 	stw	r2,-25184(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80f010:	d0a76817 	ldw	r2,-25184(gp)
  80f014:	100170fa 	wrctl	ienable,r2
  80f018:	e0bff817 	ldw	r2,-32(fp)
  80f01c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f020:	e0bff917 	ldw	r2,-28(fp)
  80f024:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80f028:	0005883a 	mov	r2,zero
  80f02c:	00001906 	br	80f094 <alt_irq_register+0x158>
  80f030:	e0bffd17 	ldw	r2,-12(fp)
  80f034:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f038:	0005303a 	rdctl	r2,status
  80f03c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f040:	e0fffa17 	ldw	r3,-24(fp)
  80f044:	00bfff84 	movi	r2,-2
  80f048:	1884703a 	and	r2,r3,r2
  80f04c:	1001703a 	wrctl	status,r2
  
  return context;
  80f050:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80f054:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  80f058:	00c00044 	movi	r3,1
  80f05c:	e0bff417 	ldw	r2,-48(fp)
  80f060:	1884983a 	sll	r2,r3,r2
  80f064:	0084303a 	nor	r2,zero,r2
  80f068:	1007883a 	mov	r3,r2
  80f06c:	d0a76817 	ldw	r2,-25184(gp)
  80f070:	1884703a 	and	r2,r3,r2
  80f074:	d0a76815 	stw	r2,-25184(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80f078:	d0a76817 	ldw	r2,-25184(gp)
  80f07c:	100170fa 	wrctl	ienable,r2
  80f080:	e0bffb17 	ldw	r2,-20(fp)
  80f084:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f088:	e0bffc17 	ldw	r2,-16(fp)
  80f08c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80f090:	0005883a 	mov	r2,zero
  80f094:	e0bff115 	stw	r2,-60(fp)
  80f098:	e0bff317 	ldw	r2,-52(fp)
  80f09c:	e0bff515 	stw	r2,-44(fp)
  80f0a0:	e0bff517 	ldw	r2,-44(fp)
  80f0a4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80f0a8:	e0bff117 	ldw	r2,-60(fp)
}
  80f0ac:	e037883a 	mov	sp,fp
  80f0b0:	df000017 	ldw	fp,0(sp)
  80f0b4:	dec00104 	addi	sp,sp,4
  80f0b8:	f800283a 	ret

0080f0bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f0bc:	defffe04 	addi	sp,sp,-8
  80f0c0:	dfc00115 	stw	ra,4(sp)
  80f0c4:	df000015 	stw	fp,0(sp)
  80f0c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f0cc:	d0a00c17 	ldw	r2,-32720(gp)
  80f0d0:	10000326 	beq	r2,zero,80f0e0 <alt_get_errno+0x24>
  80f0d4:	d0a00c17 	ldw	r2,-32720(gp)
  80f0d8:	103ee83a 	callr	r2
  80f0dc:	00000106 	br	80f0e4 <alt_get_errno+0x28>
  80f0e0:	d0a76104 	addi	r2,gp,-25212
}
  80f0e4:	e037883a 	mov	sp,fp
  80f0e8:	dfc00117 	ldw	ra,4(sp)
  80f0ec:	df000017 	ldw	fp,0(sp)
  80f0f0:	dec00204 	addi	sp,sp,8
  80f0f4:	f800283a 	ret

0080f0f8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80f0f8:	deffed04 	addi	sp,sp,-76
  80f0fc:	dfc01215 	stw	ra,72(sp)
  80f100:	df001115 	stw	fp,68(sp)
  80f104:	df001104 	addi	fp,sp,68
  80f108:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f10c:	e0bfff17 	ldw	r2,-4(fp)
  80f110:	10000616 	blt	r2,zero,80f12c <isatty+0x34>
  80f114:	e0bfff17 	ldw	r2,-4(fp)
  80f118:	10c00324 	muli	r3,r2,12
  80f11c:	00802074 	movhi	r2,129
  80f120:	108f8f04 	addi	r2,r2,15932
  80f124:	1885883a 	add	r2,r3,r2
  80f128:	00000106 	br	80f130 <isatty+0x38>
  80f12c:	0005883a 	mov	r2,zero
  80f130:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80f134:	e0bfef17 	ldw	r2,-68(fp)
  80f138:	10000e26 	beq	r2,zero,80f174 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80f13c:	e0bfef17 	ldw	r2,-68(fp)
  80f140:	10800017 	ldw	r2,0(r2)
  80f144:	10800817 	ldw	r2,32(r2)
  80f148:	1000021e 	bne	r2,zero,80f154 <isatty+0x5c>
    {
      return 1;
  80f14c:	00800044 	movi	r2,1
  80f150:	00000d06 	br	80f188 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80f154:	e0bff004 	addi	r2,fp,-64
  80f158:	100b883a 	mov	r5,r2
  80f15c:	e13fff17 	ldw	r4,-4(fp)
  80f160:	080ee8c0 	call	80ee8c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80f164:	e0bff117 	ldw	r2,-60(fp)
  80f168:	10880020 	cmpeqi	r2,r2,8192
  80f16c:	10803fcc 	andi	r2,r2,255
  80f170:	00000506 	br	80f188 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f174:	080f0bc0 	call	80f0bc <alt_get_errno>
  80f178:	1007883a 	mov	r3,r2
  80f17c:	00801444 	movi	r2,81
  80f180:	18800015 	stw	r2,0(r3)
    return 0;
  80f184:	0005883a 	mov	r2,zero
  }
}
  80f188:	e037883a 	mov	sp,fp
  80f18c:	dfc00117 	ldw	ra,4(sp)
  80f190:	df000017 	ldw	fp,0(sp)
  80f194:	dec00204 	addi	sp,sp,8
  80f198:	f800283a 	ret

0080f19c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80f19c:	defffc04 	addi	sp,sp,-16
  80f1a0:	df000315 	stw	fp,12(sp)
  80f1a4:	df000304 	addi	fp,sp,12
  80f1a8:	e13ffd15 	stw	r4,-12(fp)
  80f1ac:	e17ffe15 	stw	r5,-8(fp)
  80f1b0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80f1b4:	e0fffe17 	ldw	r3,-8(fp)
  80f1b8:	e0bffd17 	ldw	r2,-12(fp)
  80f1bc:	18800c26 	beq	r3,r2,80f1f0 <alt_load_section+0x54>
  {
    while( to != end )
  80f1c0:	00000806 	br	80f1e4 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80f1c4:	e0bffe17 	ldw	r2,-8(fp)
  80f1c8:	10c00104 	addi	r3,r2,4
  80f1cc:	e0fffe15 	stw	r3,-8(fp)
  80f1d0:	e0fffd17 	ldw	r3,-12(fp)
  80f1d4:	19000104 	addi	r4,r3,4
  80f1d8:	e13ffd15 	stw	r4,-12(fp)
  80f1dc:	18c00017 	ldw	r3,0(r3)
  80f1e0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80f1e4:	e0fffe17 	ldw	r3,-8(fp)
  80f1e8:	e0bfff17 	ldw	r2,-4(fp)
  80f1ec:	18bff51e 	bne	r3,r2,80f1c4 <__alt_mem_onchip_mem+0xff8071c4>
    {
      *to++ = *from++;
    }
  }
}
  80f1f0:	0001883a 	nop
  80f1f4:	e037883a 	mov	sp,fp
  80f1f8:	df000017 	ldw	fp,0(sp)
  80f1fc:	dec00104 	addi	sp,sp,4
  80f200:	f800283a 	ret

0080f204 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80f204:	defffe04 	addi	sp,sp,-8
  80f208:	dfc00115 	stw	ra,4(sp)
  80f20c:	df000015 	stw	fp,0(sp)
  80f210:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80f214:	01802074 	movhi	r6,129
  80f218:	31949204 	addi	r6,r6,21064
  80f21c:	01402074 	movhi	r5,129
  80f220:	294d5604 	addi	r5,r5,13656
  80f224:	01002074 	movhi	r4,129
  80f228:	21149204 	addi	r4,r4,21064
  80f22c:	080f19c0 	call	80f19c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80f230:	01802034 	movhi	r6,128
  80f234:	31809104 	addi	r6,r6,580
  80f238:	01402034 	movhi	r5,128
  80f23c:	29400804 	addi	r5,r5,32
  80f240:	01002034 	movhi	r4,128
  80f244:	21000804 	addi	r4,r4,32
  80f248:	080f19c0 	call	80f19c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80f24c:	01802074 	movhi	r6,129
  80f250:	318d5604 	addi	r6,r6,13656
  80f254:	01402074 	movhi	r5,129
  80f258:	294ba304 	addi	r5,r5,11916
  80f25c:	01002074 	movhi	r4,129
  80f260:	210ba304 	addi	r4,r4,11916
  80f264:	080f19c0 	call	80f19c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80f268:	0811fe80 	call	811fe8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80f26c:	081240c0 	call	81240c <alt_icache_flush_all>
}
  80f270:	0001883a 	nop
  80f274:	e037883a 	mov	sp,fp
  80f278:	dfc00117 	ldw	ra,4(sp)
  80f27c:	df000017 	ldw	fp,0(sp)
  80f280:	dec00204 	addi	sp,sp,8
  80f284:	f800283a 	ret

0080f288 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f288:	defffe04 	addi	sp,sp,-8
  80f28c:	dfc00115 	stw	ra,4(sp)
  80f290:	df000015 	stw	fp,0(sp)
  80f294:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f298:	d0a00c17 	ldw	r2,-32720(gp)
  80f29c:	10000326 	beq	r2,zero,80f2ac <alt_get_errno+0x24>
  80f2a0:	d0a00c17 	ldw	r2,-32720(gp)
  80f2a4:	103ee83a 	callr	r2
  80f2a8:	00000106 	br	80f2b0 <alt_get_errno+0x28>
  80f2ac:	d0a76104 	addi	r2,gp,-25212
}
  80f2b0:	e037883a 	mov	sp,fp
  80f2b4:	dfc00117 	ldw	ra,4(sp)
  80f2b8:	df000017 	ldw	fp,0(sp)
  80f2bc:	dec00204 	addi	sp,sp,8
  80f2c0:	f800283a 	ret

0080f2c4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80f2c4:	defff904 	addi	sp,sp,-28
  80f2c8:	dfc00615 	stw	ra,24(sp)
  80f2cc:	df000515 	stw	fp,20(sp)
  80f2d0:	df000504 	addi	fp,sp,20
  80f2d4:	e13ffd15 	stw	r4,-12(fp)
  80f2d8:	e17ffe15 	stw	r5,-8(fp)
  80f2dc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80f2e0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f2e4:	e0bffd17 	ldw	r2,-12(fp)
  80f2e8:	10000616 	blt	r2,zero,80f304 <lseek+0x40>
  80f2ec:	e0bffd17 	ldw	r2,-12(fp)
  80f2f0:	10c00324 	muli	r3,r2,12
  80f2f4:	00802074 	movhi	r2,129
  80f2f8:	108f8f04 	addi	r2,r2,15932
  80f2fc:	1885883a 	add	r2,r3,r2
  80f300:	00000106 	br	80f308 <lseek+0x44>
  80f304:	0005883a 	mov	r2,zero
  80f308:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80f30c:	e0bffc17 	ldw	r2,-16(fp)
  80f310:	10001026 	beq	r2,zero,80f354 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80f314:	e0bffc17 	ldw	r2,-16(fp)
  80f318:	10800017 	ldw	r2,0(r2)
  80f31c:	10800717 	ldw	r2,28(r2)
  80f320:	10000926 	beq	r2,zero,80f348 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80f324:	e0bffc17 	ldw	r2,-16(fp)
  80f328:	10800017 	ldw	r2,0(r2)
  80f32c:	10800717 	ldw	r2,28(r2)
  80f330:	e1bfff17 	ldw	r6,-4(fp)
  80f334:	e17ffe17 	ldw	r5,-8(fp)
  80f338:	e13ffc17 	ldw	r4,-16(fp)
  80f33c:	103ee83a 	callr	r2
  80f340:	e0bffb15 	stw	r2,-20(fp)
  80f344:	00000506 	br	80f35c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80f348:	00bfde84 	movi	r2,-134
  80f34c:	e0bffb15 	stw	r2,-20(fp)
  80f350:	00000206 	br	80f35c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80f354:	00bfebc4 	movi	r2,-81
  80f358:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80f35c:	e0bffb17 	ldw	r2,-20(fp)
  80f360:	1000070e 	bge	r2,zero,80f380 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80f364:	080f2880 	call	80f288 <alt_get_errno>
  80f368:	1007883a 	mov	r3,r2
  80f36c:	e0bffb17 	ldw	r2,-20(fp)
  80f370:	0085c83a 	sub	r2,zero,r2
  80f374:	18800015 	stw	r2,0(r3)
    rc = -1;
  80f378:	00bfffc4 	movi	r2,-1
  80f37c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80f380:	e0bffb17 	ldw	r2,-20(fp)
}
  80f384:	e037883a 	mov	sp,fp
  80f388:	dfc00117 	ldw	ra,4(sp)
  80f38c:	df000017 	ldw	fp,0(sp)
  80f390:	dec00204 	addi	sp,sp,8
  80f394:	f800283a 	ret

0080f398 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80f398:	defffd04 	addi	sp,sp,-12
  80f39c:	dfc00215 	stw	ra,8(sp)
  80f3a0:	df000115 	stw	fp,4(sp)
  80f3a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80f3a8:	0009883a 	mov	r4,zero
  80f3ac:	080fc080 	call	80fc08 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80f3b0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80f3b4:	080fc400 	call	80fc40 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80f3b8:	01802074 	movhi	r6,129
  80f3bc:	318d4804 	addi	r6,r6,13600
  80f3c0:	01402074 	movhi	r5,129
  80f3c4:	294d4804 	addi	r5,r5,13600
  80f3c8:	01002074 	movhi	r4,129
  80f3cc:	210d4804 	addi	r4,r4,13600
  80f3d0:	08127a40 	call	8127a4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80f3d4:	08121100 	call	812110 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80f3d8:	01002074 	movhi	r4,129
  80f3dc:	21085c04 	addi	r4,r4,8560
  80f3e0:	0812af80 	call	812af8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80f3e4:	d0a76917 	ldw	r2,-25180(gp)
  80f3e8:	d0e76a17 	ldw	r3,-25176(gp)
  80f3ec:	d1276b17 	ldw	r4,-25172(gp)
  80f3f0:	200d883a 	mov	r6,r4
  80f3f4:	180b883a 	mov	r5,r3
  80f3f8:	1009883a 	mov	r4,r2
  80f3fc:	08011f40 	call	8011f4 <main>
  80f400:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80f404:	01000044 	movi	r4,1
  80f408:	080ed540 	call	80ed54 <close>
  exit (result);
  80f40c:	e13fff17 	ldw	r4,-4(fp)
  80f410:	0812b0c0 	call	812b0c <exit>

0080f414 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80f414:	defffe04 	addi	sp,sp,-8
  80f418:	df000115 	stw	fp,4(sp)
  80f41c:	df000104 	addi	fp,sp,4
  80f420:	e13fff15 	stw	r4,-4(fp)
}
  80f424:	0001883a 	nop
  80f428:	e037883a 	mov	sp,fp
  80f42c:	df000017 	ldw	fp,0(sp)
  80f430:	dec00104 	addi	sp,sp,4
  80f434:	f800283a 	ret

0080f438 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80f438:	defffe04 	addi	sp,sp,-8
  80f43c:	df000115 	stw	fp,4(sp)
  80f440:	df000104 	addi	fp,sp,4
  80f444:	e13fff15 	stw	r4,-4(fp)
}
  80f448:	0001883a 	nop
  80f44c:	e037883a 	mov	sp,fp
  80f450:	df000017 	ldw	fp,0(sp)
  80f454:	dec00104 	addi	sp,sp,4
  80f458:	f800283a 	ret

0080f45c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f45c:	defffe04 	addi	sp,sp,-8
  80f460:	dfc00115 	stw	ra,4(sp)
  80f464:	df000015 	stw	fp,0(sp)
  80f468:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f46c:	d0a00c17 	ldw	r2,-32720(gp)
  80f470:	10000326 	beq	r2,zero,80f480 <alt_get_errno+0x24>
  80f474:	d0a00c17 	ldw	r2,-32720(gp)
  80f478:	103ee83a 	callr	r2
  80f47c:	00000106 	br	80f484 <alt_get_errno+0x28>
  80f480:	d0a76104 	addi	r2,gp,-25212
}
  80f484:	e037883a 	mov	sp,fp
  80f488:	dfc00117 	ldw	ra,4(sp)
  80f48c:	df000017 	ldw	fp,0(sp)
  80f490:	dec00204 	addi	sp,sp,8
  80f494:	f800283a 	ret

0080f498 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80f498:	defffd04 	addi	sp,sp,-12
  80f49c:	df000215 	stw	fp,8(sp)
  80f4a0:	df000204 	addi	fp,sp,8
  80f4a4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80f4a8:	e0bfff17 	ldw	r2,-4(fp)
  80f4ac:	10800217 	ldw	r2,8(r2)
  80f4b0:	10d00034 	orhi	r3,r2,16384
  80f4b4:	e0bfff17 	ldw	r2,-4(fp)
  80f4b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f4bc:	e03ffe15 	stw	zero,-8(fp)
  80f4c0:	00001d06 	br	80f538 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f4c4:	00802074 	movhi	r2,129
  80f4c8:	108f8f04 	addi	r2,r2,15932
  80f4cc:	e0fffe17 	ldw	r3,-8(fp)
  80f4d0:	18c00324 	muli	r3,r3,12
  80f4d4:	10c5883a 	add	r2,r2,r3
  80f4d8:	10c00017 	ldw	r3,0(r2)
  80f4dc:	e0bfff17 	ldw	r2,-4(fp)
  80f4e0:	10800017 	ldw	r2,0(r2)
  80f4e4:	1880111e 	bne	r3,r2,80f52c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80f4e8:	00802074 	movhi	r2,129
  80f4ec:	108f8f04 	addi	r2,r2,15932
  80f4f0:	e0fffe17 	ldw	r3,-8(fp)
  80f4f4:	18c00324 	muli	r3,r3,12
  80f4f8:	10c5883a 	add	r2,r2,r3
  80f4fc:	10800204 	addi	r2,r2,8
  80f500:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f504:	1000090e 	bge	r2,zero,80f52c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80f508:	e0bffe17 	ldw	r2,-8(fp)
  80f50c:	10c00324 	muli	r3,r2,12
  80f510:	00802074 	movhi	r2,129
  80f514:	108f8f04 	addi	r2,r2,15932
  80f518:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80f51c:	e0bfff17 	ldw	r2,-4(fp)
  80f520:	18800226 	beq	r3,r2,80f52c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80f524:	00bffcc4 	movi	r2,-13
  80f528:	00000806 	br	80f54c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f52c:	e0bffe17 	ldw	r2,-8(fp)
  80f530:	10800044 	addi	r2,r2,1
  80f534:	e0bffe15 	stw	r2,-8(fp)
  80f538:	d0a00b17 	ldw	r2,-32724(gp)
  80f53c:	1007883a 	mov	r3,r2
  80f540:	e0bffe17 	ldw	r2,-8(fp)
  80f544:	18bfdf2e 	bgeu	r3,r2,80f4c4 <__alt_mem_onchip_mem+0xff8074c4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80f548:	0005883a 	mov	r2,zero
}
  80f54c:	e037883a 	mov	sp,fp
  80f550:	df000017 	ldw	fp,0(sp)
  80f554:	dec00104 	addi	sp,sp,4
  80f558:	f800283a 	ret

0080f55c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80f55c:	defff604 	addi	sp,sp,-40
  80f560:	dfc00915 	stw	ra,36(sp)
  80f564:	df000815 	stw	fp,32(sp)
  80f568:	df000804 	addi	fp,sp,32
  80f56c:	e13ffd15 	stw	r4,-12(fp)
  80f570:	e17ffe15 	stw	r5,-8(fp)
  80f574:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80f578:	00bfffc4 	movi	r2,-1
  80f57c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80f580:	00bffb44 	movi	r2,-19
  80f584:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80f588:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80f58c:	d1600904 	addi	r5,gp,-32732
  80f590:	e13ffd17 	ldw	r4,-12(fp)
  80f594:	08121d00 	call	8121d0 <alt_find_dev>
  80f598:	e0bff815 	stw	r2,-32(fp)
  80f59c:	e0bff817 	ldw	r2,-32(fp)
  80f5a0:	1000051e 	bne	r2,zero,80f5b8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80f5a4:	e13ffd17 	ldw	r4,-12(fp)
  80f5a8:	08122600 	call	812260 <alt_find_file>
  80f5ac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80f5b0:	00800044 	movi	r2,1
  80f5b4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80f5b8:	e0bff817 	ldw	r2,-32(fp)
  80f5bc:	10002926 	beq	r2,zero,80f664 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80f5c0:	e13ff817 	ldw	r4,-32(fp)
  80f5c4:	08123680 	call	812368 <alt_get_fd>
  80f5c8:	e0bff915 	stw	r2,-28(fp)
  80f5cc:	e0bff917 	ldw	r2,-28(fp)
  80f5d0:	1000030e 	bge	r2,zero,80f5e0 <open+0x84>
    {
      status = index;
  80f5d4:	e0bff917 	ldw	r2,-28(fp)
  80f5d8:	e0bffa15 	stw	r2,-24(fp)
  80f5dc:	00002306 	br	80f66c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80f5e0:	e0bff917 	ldw	r2,-28(fp)
  80f5e4:	10c00324 	muli	r3,r2,12
  80f5e8:	00802074 	movhi	r2,129
  80f5ec:	108f8f04 	addi	r2,r2,15932
  80f5f0:	1885883a 	add	r2,r3,r2
  80f5f4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80f5f8:	e0fffe17 	ldw	r3,-8(fp)
  80f5fc:	00900034 	movhi	r2,16384
  80f600:	10bfffc4 	addi	r2,r2,-1
  80f604:	1886703a 	and	r3,r3,r2
  80f608:	e0bffc17 	ldw	r2,-16(fp)
  80f60c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80f610:	e0bffb17 	ldw	r2,-20(fp)
  80f614:	1000051e 	bne	r2,zero,80f62c <open+0xd0>
  80f618:	e13ffc17 	ldw	r4,-16(fp)
  80f61c:	080f4980 	call	80f498 <alt_file_locked>
  80f620:	e0bffa15 	stw	r2,-24(fp)
  80f624:	e0bffa17 	ldw	r2,-24(fp)
  80f628:	10001016 	blt	r2,zero,80f66c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80f62c:	e0bff817 	ldw	r2,-32(fp)
  80f630:	10800317 	ldw	r2,12(r2)
  80f634:	10000826 	beq	r2,zero,80f658 <open+0xfc>
  80f638:	e0bff817 	ldw	r2,-32(fp)
  80f63c:	10800317 	ldw	r2,12(r2)
  80f640:	e1ffff17 	ldw	r7,-4(fp)
  80f644:	e1bffe17 	ldw	r6,-8(fp)
  80f648:	e17ffd17 	ldw	r5,-12(fp)
  80f64c:	e13ffc17 	ldw	r4,-16(fp)
  80f650:	103ee83a 	callr	r2
  80f654:	00000106 	br	80f65c <open+0x100>
  80f658:	0005883a 	mov	r2,zero
  80f65c:	e0bffa15 	stw	r2,-24(fp)
  80f660:	00000206 	br	80f66c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80f664:	00bffb44 	movi	r2,-19
  80f668:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80f66c:	e0bffa17 	ldw	r2,-24(fp)
  80f670:	1000090e 	bge	r2,zero,80f698 <open+0x13c>
  {
    alt_release_fd (index);  
  80f674:	e13ff917 	ldw	r4,-28(fp)
  80f678:	080f7e80 	call	80f7e8 <alt_release_fd>
    ALT_ERRNO = -status;
  80f67c:	080f45c0 	call	80f45c <alt_get_errno>
  80f680:	1007883a 	mov	r3,r2
  80f684:	e0bffa17 	ldw	r2,-24(fp)
  80f688:	0085c83a 	sub	r2,zero,r2
  80f68c:	18800015 	stw	r2,0(r3)
    return -1;
  80f690:	00bfffc4 	movi	r2,-1
  80f694:	00000106 	br	80f69c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80f698:	e0bff917 	ldw	r2,-28(fp)
}
  80f69c:	e037883a 	mov	sp,fp
  80f6a0:	dfc00117 	ldw	ra,4(sp)
  80f6a4:	df000017 	ldw	fp,0(sp)
  80f6a8:	dec00204 	addi	sp,sp,8
  80f6ac:	f800283a 	ret

0080f6b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f6b0:	defffe04 	addi	sp,sp,-8
  80f6b4:	dfc00115 	stw	ra,4(sp)
  80f6b8:	df000015 	stw	fp,0(sp)
  80f6bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f6c0:	d0a00c17 	ldw	r2,-32720(gp)
  80f6c4:	10000326 	beq	r2,zero,80f6d4 <alt_get_errno+0x24>
  80f6c8:	d0a00c17 	ldw	r2,-32720(gp)
  80f6cc:	103ee83a 	callr	r2
  80f6d0:	00000106 	br	80f6d8 <alt_get_errno+0x28>
  80f6d4:	d0a76104 	addi	r2,gp,-25212
}
  80f6d8:	e037883a 	mov	sp,fp
  80f6dc:	dfc00117 	ldw	ra,4(sp)
  80f6e0:	df000017 	ldw	fp,0(sp)
  80f6e4:	dec00204 	addi	sp,sp,8
  80f6e8:	f800283a 	ret

0080f6ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80f6ec:	defff904 	addi	sp,sp,-28
  80f6f0:	dfc00615 	stw	ra,24(sp)
  80f6f4:	df000515 	stw	fp,20(sp)
  80f6f8:	df000504 	addi	fp,sp,20
  80f6fc:	e13ffd15 	stw	r4,-12(fp)
  80f700:	e17ffe15 	stw	r5,-8(fp)
  80f704:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f708:	e0bffd17 	ldw	r2,-12(fp)
  80f70c:	10000616 	blt	r2,zero,80f728 <read+0x3c>
  80f710:	e0bffd17 	ldw	r2,-12(fp)
  80f714:	10c00324 	muli	r3,r2,12
  80f718:	00802074 	movhi	r2,129
  80f71c:	108f8f04 	addi	r2,r2,15932
  80f720:	1885883a 	add	r2,r3,r2
  80f724:	00000106 	br	80f72c <read+0x40>
  80f728:	0005883a 	mov	r2,zero
  80f72c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80f730:	e0bffb17 	ldw	r2,-20(fp)
  80f734:	10002226 	beq	r2,zero,80f7c0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f738:	e0bffb17 	ldw	r2,-20(fp)
  80f73c:	10800217 	ldw	r2,8(r2)
  80f740:	108000cc 	andi	r2,r2,3
  80f744:	10800060 	cmpeqi	r2,r2,1
  80f748:	1000181e 	bne	r2,zero,80f7ac <read+0xc0>
        (fd->dev->read))
  80f74c:	e0bffb17 	ldw	r2,-20(fp)
  80f750:	10800017 	ldw	r2,0(r2)
  80f754:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f758:	10001426 	beq	r2,zero,80f7ac <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80f75c:	e0bffb17 	ldw	r2,-20(fp)
  80f760:	10800017 	ldw	r2,0(r2)
  80f764:	10800517 	ldw	r2,20(r2)
  80f768:	e0ffff17 	ldw	r3,-4(fp)
  80f76c:	180d883a 	mov	r6,r3
  80f770:	e17ffe17 	ldw	r5,-8(fp)
  80f774:	e13ffb17 	ldw	r4,-20(fp)
  80f778:	103ee83a 	callr	r2
  80f77c:	e0bffc15 	stw	r2,-16(fp)
  80f780:	e0bffc17 	ldw	r2,-16(fp)
  80f784:	1000070e 	bge	r2,zero,80f7a4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80f788:	080f6b00 	call	80f6b0 <alt_get_errno>
  80f78c:	1007883a 	mov	r3,r2
  80f790:	e0bffc17 	ldw	r2,-16(fp)
  80f794:	0085c83a 	sub	r2,zero,r2
  80f798:	18800015 	stw	r2,0(r3)
          return -1;
  80f79c:	00bfffc4 	movi	r2,-1
  80f7a0:	00000c06 	br	80f7d4 <read+0xe8>
        }
        return rval;
  80f7a4:	e0bffc17 	ldw	r2,-16(fp)
  80f7a8:	00000a06 	br	80f7d4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80f7ac:	080f6b00 	call	80f6b0 <alt_get_errno>
  80f7b0:	1007883a 	mov	r3,r2
  80f7b4:	00800344 	movi	r2,13
  80f7b8:	18800015 	stw	r2,0(r3)
  80f7bc:	00000406 	br	80f7d0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80f7c0:	080f6b00 	call	80f6b0 <alt_get_errno>
  80f7c4:	1007883a 	mov	r3,r2
  80f7c8:	00801444 	movi	r2,81
  80f7cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f7d0:	00bfffc4 	movi	r2,-1
}
  80f7d4:	e037883a 	mov	sp,fp
  80f7d8:	dfc00117 	ldw	ra,4(sp)
  80f7dc:	df000017 	ldw	fp,0(sp)
  80f7e0:	dec00204 	addi	sp,sp,8
  80f7e4:	f800283a 	ret

0080f7e8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80f7e8:	defffe04 	addi	sp,sp,-8
  80f7ec:	df000115 	stw	fp,4(sp)
  80f7f0:	df000104 	addi	fp,sp,4
  80f7f4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80f7f8:	e0bfff17 	ldw	r2,-4(fp)
  80f7fc:	108000d0 	cmplti	r2,r2,3
  80f800:	10000d1e 	bne	r2,zero,80f838 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80f804:	00802074 	movhi	r2,129
  80f808:	108f8f04 	addi	r2,r2,15932
  80f80c:	e0ffff17 	ldw	r3,-4(fp)
  80f810:	18c00324 	muli	r3,r3,12
  80f814:	10c5883a 	add	r2,r2,r3
  80f818:	10800204 	addi	r2,r2,8
  80f81c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80f820:	00802074 	movhi	r2,129
  80f824:	108f8f04 	addi	r2,r2,15932
  80f828:	e0ffff17 	ldw	r3,-4(fp)
  80f82c:	18c00324 	muli	r3,r3,12
  80f830:	10c5883a 	add	r2,r2,r3
  80f834:	10000015 	stw	zero,0(r2)
  }
}
  80f838:	0001883a 	nop
  80f83c:	e037883a 	mov	sp,fp
  80f840:	df000017 	ldw	fp,0(sp)
  80f844:	dec00104 	addi	sp,sp,4
  80f848:	f800283a 	ret

0080f84c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80f84c:	defff904 	addi	sp,sp,-28
  80f850:	df000615 	stw	fp,24(sp)
  80f854:	df000604 	addi	fp,sp,24
  80f858:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f85c:	0005303a 	rdctl	r2,status
  80f860:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f864:	e0fffe17 	ldw	r3,-8(fp)
  80f868:	00bfff84 	movi	r2,-2
  80f86c:	1884703a 	and	r2,r3,r2
  80f870:	1001703a 	wrctl	status,r2
  
  return context;
  80f874:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80f878:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80f87c:	d0a00e17 	ldw	r2,-32712(gp)
  80f880:	10c000c4 	addi	r3,r2,3
  80f884:	00bfff04 	movi	r2,-4
  80f888:	1884703a 	and	r2,r3,r2
  80f88c:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80f890:	d0e00e17 	ldw	r3,-32712(gp)
  80f894:	e0bfff17 	ldw	r2,-4(fp)
  80f898:	1887883a 	add	r3,r3,r2
  80f89c:	00804034 	movhi	r2,256
  80f8a0:	10800004 	addi	r2,r2,0
  80f8a4:	10c0062e 	bgeu	r2,r3,80f8c0 <sbrk+0x74>
  80f8a8:	e0bffb17 	ldw	r2,-20(fp)
  80f8ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f8b0:	e0bffa17 	ldw	r2,-24(fp)
  80f8b4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80f8b8:	00bfffc4 	movi	r2,-1
  80f8bc:	00000b06 	br	80f8ec <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80f8c0:	d0a00e17 	ldw	r2,-32712(gp)
  80f8c4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80f8c8:	d0e00e17 	ldw	r3,-32712(gp)
  80f8cc:	e0bfff17 	ldw	r2,-4(fp)
  80f8d0:	1885883a 	add	r2,r3,r2
  80f8d4:	d0a00e15 	stw	r2,-32712(gp)
  80f8d8:	e0bffb17 	ldw	r2,-20(fp)
  80f8dc:	e0bffc15 	stw	r2,-16(fp)
  80f8e0:	e0bffc17 	ldw	r2,-16(fp)
  80f8e4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80f8e8:	e0bffd17 	ldw	r2,-12(fp)
} 
  80f8ec:	e037883a 	mov	sp,fp
  80f8f0:	df000017 	ldw	fp,0(sp)
  80f8f4:	dec00104 	addi	sp,sp,4
  80f8f8:	f800283a 	ret

0080f8fc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80f8fc:	defffa04 	addi	sp,sp,-24
  80f900:	df000515 	stw	fp,20(sp)
  80f904:	df000504 	addi	fp,sp,20
  80f908:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f90c:	0005303a 	rdctl	r2,status
  80f910:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f914:	e0fffc17 	ldw	r3,-16(fp)
  80f918:	00bfff84 	movi	r2,-2
  80f91c:	1884703a 	and	r2,r3,r2
  80f920:	1001703a 	wrctl	status,r2
  
  return context;
  80f924:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80f928:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80f92c:	e0bfff17 	ldw	r2,-4(fp)
  80f930:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80f934:	e0bffd17 	ldw	r2,-12(fp)
  80f938:	10800017 	ldw	r2,0(r2)
  80f93c:	e0fffd17 	ldw	r3,-12(fp)
  80f940:	18c00117 	ldw	r3,4(r3)
  80f944:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80f948:	e0bffd17 	ldw	r2,-12(fp)
  80f94c:	10800117 	ldw	r2,4(r2)
  80f950:	e0fffd17 	ldw	r3,-12(fp)
  80f954:	18c00017 	ldw	r3,0(r3)
  80f958:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80f95c:	e0bffd17 	ldw	r2,-12(fp)
  80f960:	e0fffd17 	ldw	r3,-12(fp)
  80f964:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80f968:	e0bffd17 	ldw	r2,-12(fp)
  80f96c:	e0fffd17 	ldw	r3,-12(fp)
  80f970:	10c00015 	stw	r3,0(r2)
  80f974:	e0bffb17 	ldw	r2,-20(fp)
  80f978:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f97c:	e0bffe17 	ldw	r2,-8(fp)
  80f980:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80f984:	0001883a 	nop
  80f988:	e037883a 	mov	sp,fp
  80f98c:	df000017 	ldw	fp,0(sp)
  80f990:	dec00104 	addi	sp,sp,4
  80f994:	f800283a 	ret

0080f998 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80f998:	defffb04 	addi	sp,sp,-20
  80f99c:	dfc00415 	stw	ra,16(sp)
  80f9a0:	df000315 	stw	fp,12(sp)
  80f9a4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80f9a8:	d0a00f17 	ldw	r2,-32708(gp)
  80f9ac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80f9b0:	d0a76d17 	ldw	r2,-25164(gp)
  80f9b4:	10800044 	addi	r2,r2,1
  80f9b8:	d0a76d15 	stw	r2,-25164(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80f9bc:	00002e06 	br	80fa78 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80f9c0:	e0bffd17 	ldw	r2,-12(fp)
  80f9c4:	10800017 	ldw	r2,0(r2)
  80f9c8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80f9cc:	e0bffd17 	ldw	r2,-12(fp)
  80f9d0:	10800403 	ldbu	r2,16(r2)
  80f9d4:	10803fcc 	andi	r2,r2,255
  80f9d8:	10000426 	beq	r2,zero,80f9ec <alt_tick+0x54>
  80f9dc:	d0a76d17 	ldw	r2,-25164(gp)
  80f9e0:	1000021e 	bne	r2,zero,80f9ec <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80f9e4:	e0bffd17 	ldw	r2,-12(fp)
  80f9e8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80f9ec:	e0bffd17 	ldw	r2,-12(fp)
  80f9f0:	10800217 	ldw	r2,8(r2)
  80f9f4:	d0e76d17 	ldw	r3,-25164(gp)
  80f9f8:	18801d36 	bltu	r3,r2,80fa70 <alt_tick+0xd8>
  80f9fc:	e0bffd17 	ldw	r2,-12(fp)
  80fa00:	10800403 	ldbu	r2,16(r2)
  80fa04:	10803fcc 	andi	r2,r2,255
  80fa08:	1000191e 	bne	r2,zero,80fa70 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80fa0c:	e0bffd17 	ldw	r2,-12(fp)
  80fa10:	10800317 	ldw	r2,12(r2)
  80fa14:	e0fffd17 	ldw	r3,-12(fp)
  80fa18:	18c00517 	ldw	r3,20(r3)
  80fa1c:	1809883a 	mov	r4,r3
  80fa20:	103ee83a 	callr	r2
  80fa24:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80fa28:	e0bfff17 	ldw	r2,-4(fp)
  80fa2c:	1000031e 	bne	r2,zero,80fa3c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80fa30:	e13ffd17 	ldw	r4,-12(fp)
  80fa34:	080f8fc0 	call	80f8fc <alt_alarm_stop>
  80fa38:	00000d06 	br	80fa70 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80fa3c:	e0bffd17 	ldw	r2,-12(fp)
  80fa40:	10c00217 	ldw	r3,8(r2)
  80fa44:	e0bfff17 	ldw	r2,-4(fp)
  80fa48:	1887883a 	add	r3,r3,r2
  80fa4c:	e0bffd17 	ldw	r2,-12(fp)
  80fa50:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80fa54:	e0bffd17 	ldw	r2,-12(fp)
  80fa58:	10c00217 	ldw	r3,8(r2)
  80fa5c:	d0a76d17 	ldw	r2,-25164(gp)
  80fa60:	1880032e 	bgeu	r3,r2,80fa70 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80fa64:	e0bffd17 	ldw	r2,-12(fp)
  80fa68:	00c00044 	movi	r3,1
  80fa6c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80fa70:	e0bffe17 	ldw	r2,-8(fp)
  80fa74:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80fa78:	e0fffd17 	ldw	r3,-12(fp)
  80fa7c:	d0a00f04 	addi	r2,gp,-32708
  80fa80:	18bfcf1e 	bne	r3,r2,80f9c0 <__alt_mem_onchip_mem+0xff8079c0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80fa84:	0001883a 	nop
}
  80fa88:	0001883a 	nop
  80fa8c:	e037883a 	mov	sp,fp
  80fa90:	dfc00117 	ldw	ra,4(sp)
  80fa94:	df000017 	ldw	fp,0(sp)
  80fa98:	dec00204 	addi	sp,sp,8
  80fa9c:	f800283a 	ret

0080faa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80faa0:	defffe04 	addi	sp,sp,-8
  80faa4:	dfc00115 	stw	ra,4(sp)
  80faa8:	df000015 	stw	fp,0(sp)
  80faac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fab0:	d0a00c17 	ldw	r2,-32720(gp)
  80fab4:	10000326 	beq	r2,zero,80fac4 <alt_get_errno+0x24>
  80fab8:	d0a00c17 	ldw	r2,-32720(gp)
  80fabc:	103ee83a 	callr	r2
  80fac0:	00000106 	br	80fac8 <alt_get_errno+0x28>
  80fac4:	d0a76104 	addi	r2,gp,-25212
}
  80fac8:	e037883a 	mov	sp,fp
  80facc:	dfc00117 	ldw	ra,4(sp)
  80fad0:	df000017 	ldw	fp,0(sp)
  80fad4:	dec00204 	addi	sp,sp,8
  80fad8:	f800283a 	ret

0080fadc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80fadc:	defff904 	addi	sp,sp,-28
  80fae0:	dfc00615 	stw	ra,24(sp)
  80fae4:	df000515 	stw	fp,20(sp)
  80fae8:	df000504 	addi	fp,sp,20
  80faec:	e13ffd15 	stw	r4,-12(fp)
  80faf0:	e17ffe15 	stw	r5,-8(fp)
  80faf4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80faf8:	e0bffd17 	ldw	r2,-12(fp)
  80fafc:	10000616 	blt	r2,zero,80fb18 <write+0x3c>
  80fb00:	e0bffd17 	ldw	r2,-12(fp)
  80fb04:	10c00324 	muli	r3,r2,12
  80fb08:	00802074 	movhi	r2,129
  80fb0c:	108f8f04 	addi	r2,r2,15932
  80fb10:	1885883a 	add	r2,r3,r2
  80fb14:	00000106 	br	80fb1c <write+0x40>
  80fb18:	0005883a 	mov	r2,zero
  80fb1c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80fb20:	e0bffb17 	ldw	r2,-20(fp)
  80fb24:	10002126 	beq	r2,zero,80fbac <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80fb28:	e0bffb17 	ldw	r2,-20(fp)
  80fb2c:	10800217 	ldw	r2,8(r2)
  80fb30:	108000cc 	andi	r2,r2,3
  80fb34:	10001826 	beq	r2,zero,80fb98 <write+0xbc>
  80fb38:	e0bffb17 	ldw	r2,-20(fp)
  80fb3c:	10800017 	ldw	r2,0(r2)
  80fb40:	10800617 	ldw	r2,24(r2)
  80fb44:	10001426 	beq	r2,zero,80fb98 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80fb48:	e0bffb17 	ldw	r2,-20(fp)
  80fb4c:	10800017 	ldw	r2,0(r2)
  80fb50:	10800617 	ldw	r2,24(r2)
  80fb54:	e0ffff17 	ldw	r3,-4(fp)
  80fb58:	180d883a 	mov	r6,r3
  80fb5c:	e17ffe17 	ldw	r5,-8(fp)
  80fb60:	e13ffb17 	ldw	r4,-20(fp)
  80fb64:	103ee83a 	callr	r2
  80fb68:	e0bffc15 	stw	r2,-16(fp)
  80fb6c:	e0bffc17 	ldw	r2,-16(fp)
  80fb70:	1000070e 	bge	r2,zero,80fb90 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80fb74:	080faa00 	call	80faa0 <alt_get_errno>
  80fb78:	1007883a 	mov	r3,r2
  80fb7c:	e0bffc17 	ldw	r2,-16(fp)
  80fb80:	0085c83a 	sub	r2,zero,r2
  80fb84:	18800015 	stw	r2,0(r3)
        return -1;
  80fb88:	00bfffc4 	movi	r2,-1
  80fb8c:	00000c06 	br	80fbc0 <write+0xe4>
      }
      return rval;
  80fb90:	e0bffc17 	ldw	r2,-16(fp)
  80fb94:	00000a06 	br	80fbc0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80fb98:	080faa00 	call	80faa0 <alt_get_errno>
  80fb9c:	1007883a 	mov	r3,r2
  80fba0:	00800344 	movi	r2,13
  80fba4:	18800015 	stw	r2,0(r3)
  80fba8:	00000406 	br	80fbbc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80fbac:	080faa00 	call	80faa0 <alt_get_errno>
  80fbb0:	1007883a 	mov	r3,r2
  80fbb4:	00801444 	movi	r2,81
  80fbb8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80fbbc:	00bfffc4 	movi	r2,-1
}
  80fbc0:	e037883a 	mov	sp,fp
  80fbc4:	dfc00117 	ldw	ra,4(sp)
  80fbc8:	df000017 	ldw	fp,0(sp)
  80fbcc:	dec00204 	addi	sp,sp,8
  80fbd0:	f800283a 	ret

0080fbd4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80fbd4:	defffd04 	addi	sp,sp,-12
  80fbd8:	dfc00215 	stw	ra,8(sp)
  80fbdc:	df000115 	stw	fp,4(sp)
  80fbe0:	df000104 	addi	fp,sp,4
  80fbe4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80fbe8:	d1600904 	addi	r5,gp,-32732
  80fbec:	e13fff17 	ldw	r4,-4(fp)
  80fbf0:	081206c0 	call	81206c <alt_dev_llist_insert>
}
  80fbf4:	e037883a 	mov	sp,fp
  80fbf8:	dfc00117 	ldw	ra,4(sp)
  80fbfc:	df000017 	ldw	fp,0(sp)
  80fc00:	dec00204 	addi	sp,sp,8
  80fc04:	f800283a 	ret

0080fc08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80fc08:	defffd04 	addi	sp,sp,-12
  80fc0c:	dfc00215 	stw	ra,8(sp)
  80fc10:	df000115 	stw	fp,4(sp)
  80fc14:	df000104 	addi	fp,sp,4
  80fc18:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80fc1c:	08128500 	call	812850 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80fc20:	00800044 	movi	r2,1
  80fc24:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80fc28:	0001883a 	nop
  80fc2c:	e037883a 	mov	sp,fp
  80fc30:	dfc00117 	ldw	ra,4(sp)
  80fc34:	df000017 	ldw	fp,0(sp)
  80fc38:	dec00204 	addi	sp,sp,8
  80fc3c:	f800283a 	ret

0080fc40 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80fc40:	defffe04 	addi	sp,sp,-8
  80fc44:	dfc00115 	stw	ra,4(sp)
  80fc48:	df000015 	stw	fp,0(sp)
  80fc4c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80fc50:	01c0fa04 	movi	r7,1000
  80fc54:	01800084 	movi	r6,2
  80fc58:	000b883a 	mov	r5,zero
  80fc5c:	01004074 	movhi	r4,257
  80fc60:	21040004 	addi	r4,r4,4096
  80fc64:	08116940 	call	811694 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80fc68:	018000c4 	movi	r6,3
  80fc6c:	000b883a 	mov	r5,zero
  80fc70:	01002074 	movhi	r4,129
  80fc74:	210ff904 	addi	r4,r4,16356
  80fc78:	080fe3c0 	call	80fe3c <altera_avalon_jtag_uart_init>
  80fc7c:	01002074 	movhi	r4,129
  80fc80:	210fef04 	addi	r4,r4,16316
  80fc84:	080fbd40 	call	80fbd4 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80fc88:	01002074 	movhi	r4,129
  80fc8c:	21141104 	addi	r4,r4,20548
  80fc90:	08114880 	call	811488 <altera_avalon_lcd_16207_init>
  80fc94:	01002074 	movhi	r4,129
  80fc98:	21140704 	addi	r4,r4,20508
  80fc9c:	080fbd40 	call	80fbd4 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80fca0:	01800104 	movi	r6,4
  80fca4:	000b883a 	mov	r5,zero
  80fca8:	01002074 	movhi	r4,129
  80fcac:	21145904 	addi	r4,r4,20836
  80fcb0:	08118200 	call	811820 <altera_avalon_uart_init>
  80fcb4:	01002074 	movhi	r4,129
  80fcb8:	21144f04 	addi	r4,r4,20796
  80fcbc:	080fbd40 	call	80fbd4 <alt_dev_reg>
}
  80fcc0:	0001883a 	nop
  80fcc4:	e037883a 	mov	sp,fp
  80fcc8:	dfc00117 	ldw	ra,4(sp)
  80fccc:	df000017 	ldw	fp,0(sp)
  80fcd0:	dec00204 	addi	sp,sp,8
  80fcd4:	f800283a 	ret

0080fcd8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80fcd8:	defffa04 	addi	sp,sp,-24
  80fcdc:	dfc00515 	stw	ra,20(sp)
  80fce0:	df000415 	stw	fp,16(sp)
  80fce4:	df000404 	addi	fp,sp,16
  80fce8:	e13ffd15 	stw	r4,-12(fp)
  80fcec:	e17ffe15 	stw	r5,-8(fp)
  80fcf0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80fcf4:	e0bffd17 	ldw	r2,-12(fp)
  80fcf8:	10800017 	ldw	r2,0(r2)
  80fcfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80fd00:	e0bffc17 	ldw	r2,-16(fp)
  80fd04:	10c00a04 	addi	r3,r2,40
  80fd08:	e0bffd17 	ldw	r2,-12(fp)
  80fd0c:	10800217 	ldw	r2,8(r2)
  80fd10:	100f883a 	mov	r7,r2
  80fd14:	e1bfff17 	ldw	r6,-4(fp)
  80fd18:	e17ffe17 	ldw	r5,-8(fp)
  80fd1c:	1809883a 	mov	r4,r3
  80fd20:	08103000 	call	810300 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80fd24:	e037883a 	mov	sp,fp
  80fd28:	dfc00117 	ldw	ra,4(sp)
  80fd2c:	df000017 	ldw	fp,0(sp)
  80fd30:	dec00204 	addi	sp,sp,8
  80fd34:	f800283a 	ret

0080fd38 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80fd38:	defffa04 	addi	sp,sp,-24
  80fd3c:	dfc00515 	stw	ra,20(sp)
  80fd40:	df000415 	stw	fp,16(sp)
  80fd44:	df000404 	addi	fp,sp,16
  80fd48:	e13ffd15 	stw	r4,-12(fp)
  80fd4c:	e17ffe15 	stw	r5,-8(fp)
  80fd50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80fd54:	e0bffd17 	ldw	r2,-12(fp)
  80fd58:	10800017 	ldw	r2,0(r2)
  80fd5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80fd60:	e0bffc17 	ldw	r2,-16(fp)
  80fd64:	10c00a04 	addi	r3,r2,40
  80fd68:	e0bffd17 	ldw	r2,-12(fp)
  80fd6c:	10800217 	ldw	r2,8(r2)
  80fd70:	100f883a 	mov	r7,r2
  80fd74:	e1bfff17 	ldw	r6,-4(fp)
  80fd78:	e17ffe17 	ldw	r5,-8(fp)
  80fd7c:	1809883a 	mov	r4,r3
  80fd80:	081051c0 	call	81051c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80fd84:	e037883a 	mov	sp,fp
  80fd88:	dfc00117 	ldw	ra,4(sp)
  80fd8c:	df000017 	ldw	fp,0(sp)
  80fd90:	dec00204 	addi	sp,sp,8
  80fd94:	f800283a 	ret

0080fd98 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80fd98:	defffc04 	addi	sp,sp,-16
  80fd9c:	dfc00315 	stw	ra,12(sp)
  80fda0:	df000215 	stw	fp,8(sp)
  80fda4:	df000204 	addi	fp,sp,8
  80fda8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80fdac:	e0bfff17 	ldw	r2,-4(fp)
  80fdb0:	10800017 	ldw	r2,0(r2)
  80fdb4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80fdb8:	e0bffe17 	ldw	r2,-8(fp)
  80fdbc:	10c00a04 	addi	r3,r2,40
  80fdc0:	e0bfff17 	ldw	r2,-4(fp)
  80fdc4:	10800217 	ldw	r2,8(r2)
  80fdc8:	100b883a 	mov	r5,r2
  80fdcc:	1809883a 	mov	r4,r3
  80fdd0:	08101a80 	call	8101a8 <altera_avalon_jtag_uart_close>
}
  80fdd4:	e037883a 	mov	sp,fp
  80fdd8:	dfc00117 	ldw	ra,4(sp)
  80fddc:	df000017 	ldw	fp,0(sp)
  80fde0:	dec00204 	addi	sp,sp,8
  80fde4:	f800283a 	ret

0080fde8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80fde8:	defffa04 	addi	sp,sp,-24
  80fdec:	dfc00515 	stw	ra,20(sp)
  80fdf0:	df000415 	stw	fp,16(sp)
  80fdf4:	df000404 	addi	fp,sp,16
  80fdf8:	e13ffd15 	stw	r4,-12(fp)
  80fdfc:	e17ffe15 	stw	r5,-8(fp)
  80fe00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80fe04:	e0bffd17 	ldw	r2,-12(fp)
  80fe08:	10800017 	ldw	r2,0(r2)
  80fe0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80fe10:	e0bffc17 	ldw	r2,-16(fp)
  80fe14:	10800a04 	addi	r2,r2,40
  80fe18:	e1bfff17 	ldw	r6,-4(fp)
  80fe1c:	e17ffe17 	ldw	r5,-8(fp)
  80fe20:	1009883a 	mov	r4,r2
  80fe24:	08102100 	call	810210 <altera_avalon_jtag_uart_ioctl>
}
  80fe28:	e037883a 	mov	sp,fp
  80fe2c:	dfc00117 	ldw	ra,4(sp)
  80fe30:	df000017 	ldw	fp,0(sp)
  80fe34:	dec00204 	addi	sp,sp,8
  80fe38:	f800283a 	ret

0080fe3c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80fe3c:	defffa04 	addi	sp,sp,-24
  80fe40:	dfc00515 	stw	ra,20(sp)
  80fe44:	df000415 	stw	fp,16(sp)
  80fe48:	df000404 	addi	fp,sp,16
  80fe4c:	e13ffd15 	stw	r4,-12(fp)
  80fe50:	e17ffe15 	stw	r5,-8(fp)
  80fe54:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80fe58:	e0bffd17 	ldw	r2,-12(fp)
  80fe5c:	00c00044 	movi	r3,1
  80fe60:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80fe64:	e0bffd17 	ldw	r2,-12(fp)
  80fe68:	10800017 	ldw	r2,0(r2)
  80fe6c:	10800104 	addi	r2,r2,4
  80fe70:	1007883a 	mov	r3,r2
  80fe74:	e0bffd17 	ldw	r2,-12(fp)
  80fe78:	10800817 	ldw	r2,32(r2)
  80fe7c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80fe80:	e0bffe17 	ldw	r2,-8(fp)
  80fe84:	e0ffff17 	ldw	r3,-4(fp)
  80fe88:	d8000015 	stw	zero,0(sp)
  80fe8c:	e1fffd17 	ldw	r7,-12(fp)
  80fe90:	01802074 	movhi	r6,129
  80fe94:	31bfbf04 	addi	r6,r6,-260
  80fe98:	180b883a 	mov	r5,r3
  80fe9c:	1009883a 	mov	r4,r2
  80fea0:	08124400 	call	812440 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80fea4:	e0bffd17 	ldw	r2,-12(fp)
  80fea8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80feac:	e0bffd17 	ldw	r2,-12(fp)
  80feb0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80feb4:	d0e76c17 	ldw	r3,-25168(gp)
  80feb8:	e1fffd17 	ldw	r7,-12(fp)
  80febc:	01802074 	movhi	r6,129
  80fec0:	31804204 	addi	r6,r6,264
  80fec4:	180b883a 	mov	r5,r3
  80fec8:	1009883a 	mov	r4,r2
  80fecc:	080ebec0 	call	80ebec <alt_alarm_start>
  80fed0:	1000040e 	bge	r2,zero,80fee4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80fed4:	e0fffd17 	ldw	r3,-12(fp)
  80fed8:	00a00034 	movhi	r2,32768
  80fedc:	10bfffc4 	addi	r2,r2,-1
  80fee0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80fee4:	0001883a 	nop
  80fee8:	e037883a 	mov	sp,fp
  80feec:	dfc00117 	ldw	ra,4(sp)
  80fef0:	df000017 	ldw	fp,0(sp)
  80fef4:	dec00204 	addi	sp,sp,8
  80fef8:	f800283a 	ret

0080fefc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80fefc:	defff804 	addi	sp,sp,-32
  80ff00:	df000715 	stw	fp,28(sp)
  80ff04:	df000704 	addi	fp,sp,28
  80ff08:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80ff0c:	e0bfff17 	ldw	r2,-4(fp)
  80ff10:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80ff14:	e0bffb17 	ldw	r2,-20(fp)
  80ff18:	10800017 	ldw	r2,0(r2)
  80ff1c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ff20:	e0bffc17 	ldw	r2,-16(fp)
  80ff24:	10800104 	addi	r2,r2,4
  80ff28:	10800037 	ldwio	r2,0(r2)
  80ff2c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80ff30:	e0bffd17 	ldw	r2,-12(fp)
  80ff34:	1080c00c 	andi	r2,r2,768
  80ff38:	10006d26 	beq	r2,zero,8100f0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80ff3c:	e0bffd17 	ldw	r2,-12(fp)
  80ff40:	1080400c 	andi	r2,r2,256
  80ff44:	10003526 	beq	r2,zero,81001c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80ff48:	00800074 	movhi	r2,1
  80ff4c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ff50:	e0bffb17 	ldw	r2,-20(fp)
  80ff54:	10800a17 	ldw	r2,40(r2)
  80ff58:	10800044 	addi	r2,r2,1
  80ff5c:	1081ffcc 	andi	r2,r2,2047
  80ff60:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80ff64:	e0bffb17 	ldw	r2,-20(fp)
  80ff68:	10c00b17 	ldw	r3,44(r2)
  80ff6c:	e0bffe17 	ldw	r2,-8(fp)
  80ff70:	18801526 	beq	r3,r2,80ffc8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80ff74:	e0bffc17 	ldw	r2,-16(fp)
  80ff78:	10800037 	ldwio	r2,0(r2)
  80ff7c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80ff80:	e0bff917 	ldw	r2,-28(fp)
  80ff84:	10a0000c 	andi	r2,r2,32768
  80ff88:	10001126 	beq	r2,zero,80ffd0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80ff8c:	e0bffb17 	ldw	r2,-20(fp)
  80ff90:	10800a17 	ldw	r2,40(r2)
  80ff94:	e0fff917 	ldw	r3,-28(fp)
  80ff98:	1809883a 	mov	r4,r3
  80ff9c:	e0fffb17 	ldw	r3,-20(fp)
  80ffa0:	1885883a 	add	r2,r3,r2
  80ffa4:	10800e04 	addi	r2,r2,56
  80ffa8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ffac:	e0bffb17 	ldw	r2,-20(fp)
  80ffb0:	10800a17 	ldw	r2,40(r2)
  80ffb4:	10800044 	addi	r2,r2,1
  80ffb8:	10c1ffcc 	andi	r3,r2,2047
  80ffbc:	e0bffb17 	ldw	r2,-20(fp)
  80ffc0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80ffc4:	003fe206 	br	80ff50 <__alt_mem_onchip_mem+0xff807f50>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80ffc8:	0001883a 	nop
  80ffcc:	00000106 	br	80ffd4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80ffd0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80ffd4:	e0bff917 	ldw	r2,-28(fp)
  80ffd8:	10bfffec 	andhi	r2,r2,65535
  80ffdc:	10000f26 	beq	r2,zero,81001c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ffe0:	e0bffb17 	ldw	r2,-20(fp)
  80ffe4:	10c00817 	ldw	r3,32(r2)
  80ffe8:	00bfff84 	movi	r2,-2
  80ffec:	1886703a 	and	r3,r3,r2
  80fff0:	e0bffb17 	ldw	r2,-20(fp)
  80fff4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80fff8:	e0bffc17 	ldw	r2,-16(fp)
  80fffc:	10800104 	addi	r2,r2,4
  810000:	1007883a 	mov	r3,r2
  810004:	e0bffb17 	ldw	r2,-20(fp)
  810008:	10800817 	ldw	r2,32(r2)
  81000c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810010:	e0bffc17 	ldw	r2,-16(fp)
  810014:	10800104 	addi	r2,r2,4
  810018:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  81001c:	e0bffd17 	ldw	r2,-12(fp)
  810020:	1080800c 	andi	r2,r2,512
  810024:	103fbe26 	beq	r2,zero,80ff20 <__alt_mem_onchip_mem+0xff807f20>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  810028:	e0bffd17 	ldw	r2,-12(fp)
  81002c:	1004d43a 	srli	r2,r2,16
  810030:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  810034:	00001406 	br	810088 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  810038:	e0bffc17 	ldw	r2,-16(fp)
  81003c:	e0fffb17 	ldw	r3,-20(fp)
  810040:	18c00d17 	ldw	r3,52(r3)
  810044:	e13ffb17 	ldw	r4,-20(fp)
  810048:	20c7883a 	add	r3,r4,r3
  81004c:	18c20e04 	addi	r3,r3,2104
  810050:	18c00003 	ldbu	r3,0(r3)
  810054:	18c03fcc 	andi	r3,r3,255
  810058:	18c0201c 	xori	r3,r3,128
  81005c:	18ffe004 	addi	r3,r3,-128
  810060:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810064:	e0bffb17 	ldw	r2,-20(fp)
  810068:	10800d17 	ldw	r2,52(r2)
  81006c:	10800044 	addi	r2,r2,1
  810070:	10c1ffcc 	andi	r3,r2,2047
  810074:	e0bffb17 	ldw	r2,-20(fp)
  810078:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  81007c:	e0bffa17 	ldw	r2,-24(fp)
  810080:	10bfffc4 	addi	r2,r2,-1
  810084:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  810088:	e0bffa17 	ldw	r2,-24(fp)
  81008c:	10000526 	beq	r2,zero,8100a4 <altera_avalon_jtag_uart_irq+0x1a8>
  810090:	e0bffb17 	ldw	r2,-20(fp)
  810094:	10c00d17 	ldw	r3,52(r2)
  810098:	e0bffb17 	ldw	r2,-20(fp)
  81009c:	10800c17 	ldw	r2,48(r2)
  8100a0:	18bfe51e 	bne	r3,r2,810038 <__alt_mem_onchip_mem+0xff808038>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8100a4:	e0bffa17 	ldw	r2,-24(fp)
  8100a8:	103f9d26 	beq	r2,zero,80ff20 <__alt_mem_onchip_mem+0xff807f20>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8100ac:	e0bffb17 	ldw	r2,-20(fp)
  8100b0:	10c00817 	ldw	r3,32(r2)
  8100b4:	00bfff44 	movi	r2,-3
  8100b8:	1886703a 	and	r3,r3,r2
  8100bc:	e0bffb17 	ldw	r2,-20(fp)
  8100c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8100c4:	e0bffb17 	ldw	r2,-20(fp)
  8100c8:	10800017 	ldw	r2,0(r2)
  8100cc:	10800104 	addi	r2,r2,4
  8100d0:	1007883a 	mov	r3,r2
  8100d4:	e0bffb17 	ldw	r2,-20(fp)
  8100d8:	10800817 	ldw	r2,32(r2)
  8100dc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8100e0:	e0bffc17 	ldw	r2,-16(fp)
  8100e4:	10800104 	addi	r2,r2,4
  8100e8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  8100ec:	003f8c06 	br	80ff20 <__alt_mem_onchip_mem+0xff807f20>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  8100f0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  8100f4:	0001883a 	nop
  8100f8:	e037883a 	mov	sp,fp
  8100fc:	df000017 	ldw	fp,0(sp)
  810100:	dec00104 	addi	sp,sp,4
  810104:	f800283a 	ret

00810108 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  810108:	defff804 	addi	sp,sp,-32
  81010c:	df000715 	stw	fp,28(sp)
  810110:	df000704 	addi	fp,sp,28
  810114:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  810118:	e0bffb17 	ldw	r2,-20(fp)
  81011c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  810120:	e0bff917 	ldw	r2,-28(fp)
  810124:	10800017 	ldw	r2,0(r2)
  810128:	10800104 	addi	r2,r2,4
  81012c:	10800037 	ldwio	r2,0(r2)
  810130:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  810134:	e0bffa17 	ldw	r2,-24(fp)
  810138:	1081000c 	andi	r2,r2,1024
  81013c:	10000b26 	beq	r2,zero,81016c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  810140:	e0bff917 	ldw	r2,-28(fp)
  810144:	10800017 	ldw	r2,0(r2)
  810148:	10800104 	addi	r2,r2,4
  81014c:	1007883a 	mov	r3,r2
  810150:	e0bff917 	ldw	r2,-28(fp)
  810154:	10800817 	ldw	r2,32(r2)
  810158:	10810014 	ori	r2,r2,1024
  81015c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  810160:	e0bff917 	ldw	r2,-28(fp)
  810164:	10000915 	stw	zero,36(r2)
  810168:	00000a06 	br	810194 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  81016c:	e0bff917 	ldw	r2,-28(fp)
  810170:	10c00917 	ldw	r3,36(r2)
  810174:	00a00034 	movhi	r2,32768
  810178:	10bfff04 	addi	r2,r2,-4
  81017c:	10c00536 	bltu	r2,r3,810194 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  810180:	e0bff917 	ldw	r2,-28(fp)
  810184:	10800917 	ldw	r2,36(r2)
  810188:	10c00044 	addi	r3,r2,1
  81018c:	e0bff917 	ldw	r2,-28(fp)
  810190:	10c00915 	stw	r3,36(r2)
  810194:	d0a76c17 	ldw	r2,-25168(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  810198:	e037883a 	mov	sp,fp
  81019c:	df000017 	ldw	fp,0(sp)
  8101a0:	dec00104 	addi	sp,sp,4
  8101a4:	f800283a 	ret

008101a8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  8101a8:	defffd04 	addi	sp,sp,-12
  8101ac:	df000215 	stw	fp,8(sp)
  8101b0:	df000204 	addi	fp,sp,8
  8101b4:	e13ffe15 	stw	r4,-8(fp)
  8101b8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8101bc:	00000506 	br	8101d4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8101c0:	e0bfff17 	ldw	r2,-4(fp)
  8101c4:	1090000c 	andi	r2,r2,16384
  8101c8:	10000226 	beq	r2,zero,8101d4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8101cc:	00bffd44 	movi	r2,-11
  8101d0:	00000b06 	br	810200 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8101d4:	e0bffe17 	ldw	r2,-8(fp)
  8101d8:	10c00d17 	ldw	r3,52(r2)
  8101dc:	e0bffe17 	ldw	r2,-8(fp)
  8101e0:	10800c17 	ldw	r2,48(r2)
  8101e4:	18800526 	beq	r3,r2,8101fc <altera_avalon_jtag_uart_close+0x54>
  8101e8:	e0bffe17 	ldw	r2,-8(fp)
  8101ec:	10c00917 	ldw	r3,36(r2)
  8101f0:	e0bffe17 	ldw	r2,-8(fp)
  8101f4:	10800117 	ldw	r2,4(r2)
  8101f8:	18bff136 	bltu	r3,r2,8101c0 <__alt_mem_onchip_mem+0xff8081c0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8101fc:	0005883a 	mov	r2,zero
}
  810200:	e037883a 	mov	sp,fp
  810204:	df000017 	ldw	fp,0(sp)
  810208:	dec00104 	addi	sp,sp,4
  81020c:	f800283a 	ret

00810210 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  810210:	defffa04 	addi	sp,sp,-24
  810214:	df000515 	stw	fp,20(sp)
  810218:	df000504 	addi	fp,sp,20
  81021c:	e13ffd15 	stw	r4,-12(fp)
  810220:	e17ffe15 	stw	r5,-8(fp)
  810224:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  810228:	00bff9c4 	movi	r2,-25
  81022c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  810230:	e0bffe17 	ldw	r2,-8(fp)
  810234:	10da8060 	cmpeqi	r3,r2,27137
  810238:	1800031e 	bne	r3,zero,810248 <altera_avalon_jtag_uart_ioctl+0x38>
  81023c:	109a80a0 	cmpeqi	r2,r2,27138
  810240:	1000181e 	bne	r2,zero,8102a4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  810244:	00002906 	br	8102ec <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  810248:	e0bffd17 	ldw	r2,-12(fp)
  81024c:	10c00117 	ldw	r3,4(r2)
  810250:	00a00034 	movhi	r2,32768
  810254:	10bfffc4 	addi	r2,r2,-1
  810258:	18802126 	beq	r3,r2,8102e0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  81025c:	e0bfff17 	ldw	r2,-4(fp)
  810260:	10800017 	ldw	r2,0(r2)
  810264:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  810268:	e0bffc17 	ldw	r2,-16(fp)
  81026c:	10800090 	cmplti	r2,r2,2
  810270:	1000061e 	bne	r2,zero,81028c <altera_avalon_jtag_uart_ioctl+0x7c>
  810274:	e0fffc17 	ldw	r3,-16(fp)
  810278:	00a00034 	movhi	r2,32768
  81027c:	10bfffc4 	addi	r2,r2,-1
  810280:	18800226 	beq	r3,r2,81028c <altera_avalon_jtag_uart_ioctl+0x7c>
  810284:	e0bffc17 	ldw	r2,-16(fp)
  810288:	00000206 	br	810294 <altera_avalon_jtag_uart_ioctl+0x84>
  81028c:	00a00034 	movhi	r2,32768
  810290:	10bfff84 	addi	r2,r2,-2
  810294:	e0fffd17 	ldw	r3,-12(fp)
  810298:	18800115 	stw	r2,4(r3)
      rc = 0;
  81029c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8102a0:	00000f06 	br	8102e0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8102a4:	e0bffd17 	ldw	r2,-12(fp)
  8102a8:	10c00117 	ldw	r3,4(r2)
  8102ac:	00a00034 	movhi	r2,32768
  8102b0:	10bfffc4 	addi	r2,r2,-1
  8102b4:	18800c26 	beq	r3,r2,8102e8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8102b8:	e0bffd17 	ldw	r2,-12(fp)
  8102bc:	10c00917 	ldw	r3,36(r2)
  8102c0:	e0bffd17 	ldw	r2,-12(fp)
  8102c4:	10800117 	ldw	r2,4(r2)
  8102c8:	1885803a 	cmpltu	r2,r3,r2
  8102cc:	10c03fcc 	andi	r3,r2,255
  8102d0:	e0bfff17 	ldw	r2,-4(fp)
  8102d4:	10c00015 	stw	r3,0(r2)
      rc = 0;
  8102d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8102dc:	00000206 	br	8102e8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  8102e0:	0001883a 	nop
  8102e4:	00000106 	br	8102ec <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  8102e8:	0001883a 	nop

  default:
    break;
  }

  return rc;
  8102ec:	e0bffb17 	ldw	r2,-20(fp)
}
  8102f0:	e037883a 	mov	sp,fp
  8102f4:	df000017 	ldw	fp,0(sp)
  8102f8:	dec00104 	addi	sp,sp,4
  8102fc:	f800283a 	ret

00810300 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  810300:	defff304 	addi	sp,sp,-52
  810304:	dfc00c15 	stw	ra,48(sp)
  810308:	df000b15 	stw	fp,44(sp)
  81030c:	df000b04 	addi	fp,sp,44
  810310:	e13ffc15 	stw	r4,-16(fp)
  810314:	e17ffd15 	stw	r5,-12(fp)
  810318:	e1bffe15 	stw	r6,-8(fp)
  81031c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  810320:	e0bffd17 	ldw	r2,-12(fp)
  810324:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  810328:	00004706 	br	810448 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  81032c:	e0bffc17 	ldw	r2,-16(fp)
  810330:	10800a17 	ldw	r2,40(r2)
  810334:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  810338:	e0bffc17 	ldw	r2,-16(fp)
  81033c:	10800b17 	ldw	r2,44(r2)
  810340:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  810344:	e0fff717 	ldw	r3,-36(fp)
  810348:	e0bff817 	ldw	r2,-32(fp)
  81034c:	18800536 	bltu	r3,r2,810364 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  810350:	e0fff717 	ldw	r3,-36(fp)
  810354:	e0bff817 	ldw	r2,-32(fp)
  810358:	1885c83a 	sub	r2,r3,r2
  81035c:	e0bff615 	stw	r2,-40(fp)
  810360:	00000406 	br	810374 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  810364:	00c20004 	movi	r3,2048
  810368:	e0bff817 	ldw	r2,-32(fp)
  81036c:	1885c83a 	sub	r2,r3,r2
  810370:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  810374:	e0bff617 	ldw	r2,-40(fp)
  810378:	10001e26 	beq	r2,zero,8103f4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  81037c:	e0fffe17 	ldw	r3,-8(fp)
  810380:	e0bff617 	ldw	r2,-40(fp)
  810384:	1880022e 	bgeu	r3,r2,810390 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  810388:	e0bffe17 	ldw	r2,-8(fp)
  81038c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  810390:	e0bffc17 	ldw	r2,-16(fp)
  810394:	10c00e04 	addi	r3,r2,56
  810398:	e0bff817 	ldw	r2,-32(fp)
  81039c:	1885883a 	add	r2,r3,r2
  8103a0:	e1bff617 	ldw	r6,-40(fp)
  8103a4:	100b883a 	mov	r5,r2
  8103a8:	e13ff517 	ldw	r4,-44(fp)
  8103ac:	080858c0 	call	80858c <memcpy>
      ptr   += n;
  8103b0:	e0fff517 	ldw	r3,-44(fp)
  8103b4:	e0bff617 	ldw	r2,-40(fp)
  8103b8:	1885883a 	add	r2,r3,r2
  8103bc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  8103c0:	e0fffe17 	ldw	r3,-8(fp)
  8103c4:	e0bff617 	ldw	r2,-40(fp)
  8103c8:	1885c83a 	sub	r2,r3,r2
  8103cc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8103d0:	e0fff817 	ldw	r3,-32(fp)
  8103d4:	e0bff617 	ldw	r2,-40(fp)
  8103d8:	1885883a 	add	r2,r3,r2
  8103dc:	10c1ffcc 	andi	r3,r2,2047
  8103e0:	e0bffc17 	ldw	r2,-16(fp)
  8103e4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8103e8:	e0bffe17 	ldw	r2,-8(fp)
  8103ec:	00bfcf16 	blt	zero,r2,81032c <__alt_mem_onchip_mem+0xff80832c>
  8103f0:	00000106 	br	8103f8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  8103f4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  8103f8:	e0fff517 	ldw	r3,-44(fp)
  8103fc:	e0bffd17 	ldw	r2,-12(fp)
  810400:	1880141e 	bne	r3,r2,810454 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  810404:	e0bfff17 	ldw	r2,-4(fp)
  810408:	1090000c 	andi	r2,r2,16384
  81040c:	1000131e 	bne	r2,zero,81045c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  810410:	0001883a 	nop
  810414:	e0bffc17 	ldw	r2,-16(fp)
  810418:	10c00a17 	ldw	r3,40(r2)
  81041c:	e0bff717 	ldw	r2,-36(fp)
  810420:	1880051e 	bne	r3,r2,810438 <altera_avalon_jtag_uart_read+0x138>
  810424:	e0bffc17 	ldw	r2,-16(fp)
  810428:	10c00917 	ldw	r3,36(r2)
  81042c:	e0bffc17 	ldw	r2,-16(fp)
  810430:	10800117 	ldw	r2,4(r2)
  810434:	18bff736 	bltu	r3,r2,810414 <__alt_mem_onchip_mem+0xff808414>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  810438:	e0bffc17 	ldw	r2,-16(fp)
  81043c:	10c00a17 	ldw	r3,40(r2)
  810440:	e0bff717 	ldw	r2,-36(fp)
  810444:	18800726 	beq	r3,r2,810464 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  810448:	e0bffe17 	ldw	r2,-8(fp)
  81044c:	00bfb716 	blt	zero,r2,81032c <__alt_mem_onchip_mem+0xff80832c>
  810450:	00000506 	br	810468 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  810454:	0001883a 	nop
  810458:	00000306 	br	810468 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  81045c:	0001883a 	nop
  810460:	00000106 	br	810468 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  810464:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  810468:	e0fff517 	ldw	r3,-44(fp)
  81046c:	e0bffd17 	ldw	r2,-12(fp)
  810470:	18801826 	beq	r3,r2,8104d4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810474:	0005303a 	rdctl	r2,status
  810478:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81047c:	e0fffb17 	ldw	r3,-20(fp)
  810480:	00bfff84 	movi	r2,-2
  810484:	1884703a 	and	r2,r3,r2
  810488:	1001703a 	wrctl	status,r2
  
  return context;
  81048c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  810490:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810494:	e0bffc17 	ldw	r2,-16(fp)
  810498:	10800817 	ldw	r2,32(r2)
  81049c:	10c00054 	ori	r3,r2,1
  8104a0:	e0bffc17 	ldw	r2,-16(fp)
  8104a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8104a8:	e0bffc17 	ldw	r2,-16(fp)
  8104ac:	10800017 	ldw	r2,0(r2)
  8104b0:	10800104 	addi	r2,r2,4
  8104b4:	1007883a 	mov	r3,r2
  8104b8:	e0bffc17 	ldw	r2,-16(fp)
  8104bc:	10800817 	ldw	r2,32(r2)
  8104c0:	18800035 	stwio	r2,0(r3)
  8104c4:	e0bffa17 	ldw	r2,-24(fp)
  8104c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8104cc:	e0bff917 	ldw	r2,-28(fp)
  8104d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8104d4:	e0fff517 	ldw	r3,-44(fp)
  8104d8:	e0bffd17 	ldw	r2,-12(fp)
  8104dc:	18800426 	beq	r3,r2,8104f0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  8104e0:	e0fff517 	ldw	r3,-44(fp)
  8104e4:	e0bffd17 	ldw	r2,-12(fp)
  8104e8:	1885c83a 	sub	r2,r3,r2
  8104ec:	00000606 	br	810508 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  8104f0:	e0bfff17 	ldw	r2,-4(fp)
  8104f4:	1090000c 	andi	r2,r2,16384
  8104f8:	10000226 	beq	r2,zero,810504 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8104fc:	00bffd44 	movi	r2,-11
  810500:	00000106 	br	810508 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  810504:	00bffec4 	movi	r2,-5
}
  810508:	e037883a 	mov	sp,fp
  81050c:	dfc00117 	ldw	ra,4(sp)
  810510:	df000017 	ldw	fp,0(sp)
  810514:	dec00204 	addi	sp,sp,8
  810518:	f800283a 	ret

0081051c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  81051c:	defff304 	addi	sp,sp,-52
  810520:	dfc00c15 	stw	ra,48(sp)
  810524:	df000b15 	stw	fp,44(sp)
  810528:	df000b04 	addi	fp,sp,44
  81052c:	e13ffc15 	stw	r4,-16(fp)
  810530:	e17ffd15 	stw	r5,-12(fp)
  810534:	e1bffe15 	stw	r6,-8(fp)
  810538:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  81053c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  810540:	e0bffd17 	ldw	r2,-12(fp)
  810544:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  810548:	00003706 	br	810628 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  81054c:	e0bffc17 	ldw	r2,-16(fp)
  810550:	10800c17 	ldw	r2,48(r2)
  810554:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  810558:	e0bffc17 	ldw	r2,-16(fp)
  81055c:	10800d17 	ldw	r2,52(r2)
  810560:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  810564:	e0fff917 	ldw	r3,-28(fp)
  810568:	e0bff517 	ldw	r2,-44(fp)
  81056c:	1880062e 	bgeu	r3,r2,810588 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  810570:	e0fff517 	ldw	r3,-44(fp)
  810574:	e0bff917 	ldw	r2,-28(fp)
  810578:	1885c83a 	sub	r2,r3,r2
  81057c:	10bfffc4 	addi	r2,r2,-1
  810580:	e0bff615 	stw	r2,-40(fp)
  810584:	00000b06 	br	8105b4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  810588:	e0bff517 	ldw	r2,-44(fp)
  81058c:	10000526 	beq	r2,zero,8105a4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  810590:	00c20004 	movi	r3,2048
  810594:	e0bff917 	ldw	r2,-28(fp)
  810598:	1885c83a 	sub	r2,r3,r2
  81059c:	e0bff615 	stw	r2,-40(fp)
  8105a0:	00000406 	br	8105b4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8105a4:	00c1ffc4 	movi	r3,2047
  8105a8:	e0bff917 	ldw	r2,-28(fp)
  8105ac:	1885c83a 	sub	r2,r3,r2
  8105b0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8105b4:	e0bff617 	ldw	r2,-40(fp)
  8105b8:	10001e26 	beq	r2,zero,810634 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  8105bc:	e0fffe17 	ldw	r3,-8(fp)
  8105c0:	e0bff617 	ldw	r2,-40(fp)
  8105c4:	1880022e 	bgeu	r3,r2,8105d0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  8105c8:	e0bffe17 	ldw	r2,-8(fp)
  8105cc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8105d0:	e0bffc17 	ldw	r2,-16(fp)
  8105d4:	10c20e04 	addi	r3,r2,2104
  8105d8:	e0bff917 	ldw	r2,-28(fp)
  8105dc:	1885883a 	add	r2,r3,r2
  8105e0:	e1bff617 	ldw	r6,-40(fp)
  8105e4:	e17ffd17 	ldw	r5,-12(fp)
  8105e8:	1009883a 	mov	r4,r2
  8105ec:	080858c0 	call	80858c <memcpy>
      ptr   += n;
  8105f0:	e0fffd17 	ldw	r3,-12(fp)
  8105f4:	e0bff617 	ldw	r2,-40(fp)
  8105f8:	1885883a 	add	r2,r3,r2
  8105fc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  810600:	e0fffe17 	ldw	r3,-8(fp)
  810604:	e0bff617 	ldw	r2,-40(fp)
  810608:	1885c83a 	sub	r2,r3,r2
  81060c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810610:	e0fff917 	ldw	r3,-28(fp)
  810614:	e0bff617 	ldw	r2,-40(fp)
  810618:	1885883a 	add	r2,r3,r2
  81061c:	10c1ffcc 	andi	r3,r2,2047
  810620:	e0bffc17 	ldw	r2,-16(fp)
  810624:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  810628:	e0bffe17 	ldw	r2,-8(fp)
  81062c:	00bfc716 	blt	zero,r2,81054c <__alt_mem_onchip_mem+0xff80854c>
  810630:	00000106 	br	810638 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  810634:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810638:	0005303a 	rdctl	r2,status
  81063c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810640:	e0fffb17 	ldw	r3,-20(fp)
  810644:	00bfff84 	movi	r2,-2
  810648:	1884703a 	and	r2,r3,r2
  81064c:	1001703a 	wrctl	status,r2
  
  return context;
  810650:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  810654:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810658:	e0bffc17 	ldw	r2,-16(fp)
  81065c:	10800817 	ldw	r2,32(r2)
  810660:	10c00094 	ori	r3,r2,2
  810664:	e0bffc17 	ldw	r2,-16(fp)
  810668:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81066c:	e0bffc17 	ldw	r2,-16(fp)
  810670:	10800017 	ldw	r2,0(r2)
  810674:	10800104 	addi	r2,r2,4
  810678:	1007883a 	mov	r3,r2
  81067c:	e0bffc17 	ldw	r2,-16(fp)
  810680:	10800817 	ldw	r2,32(r2)
  810684:	18800035 	stwio	r2,0(r3)
  810688:	e0bffa17 	ldw	r2,-24(fp)
  81068c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810690:	e0bff817 	ldw	r2,-32(fp)
  810694:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  810698:	e0bffe17 	ldw	r2,-8(fp)
  81069c:	0080100e 	bge	zero,r2,8106e0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  8106a0:	e0bfff17 	ldw	r2,-4(fp)
  8106a4:	1090000c 	andi	r2,r2,16384
  8106a8:	1000101e 	bne	r2,zero,8106ec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8106ac:	0001883a 	nop
  8106b0:	e0bffc17 	ldw	r2,-16(fp)
  8106b4:	10c00d17 	ldw	r3,52(r2)
  8106b8:	e0bff517 	ldw	r2,-44(fp)
  8106bc:	1880051e 	bne	r3,r2,8106d4 <altera_avalon_jtag_uart_write+0x1b8>
  8106c0:	e0bffc17 	ldw	r2,-16(fp)
  8106c4:	10c00917 	ldw	r3,36(r2)
  8106c8:	e0bffc17 	ldw	r2,-16(fp)
  8106cc:	10800117 	ldw	r2,4(r2)
  8106d0:	18bff736 	bltu	r3,r2,8106b0 <__alt_mem_onchip_mem+0xff8086b0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  8106d4:	e0bffc17 	ldw	r2,-16(fp)
  8106d8:	10800917 	ldw	r2,36(r2)
  8106dc:	1000051e 	bne	r2,zero,8106f4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  8106e0:	e0bffe17 	ldw	r2,-8(fp)
  8106e4:	00bfd016 	blt	zero,r2,810628 <__alt_mem_onchip_mem+0xff808628>
  8106e8:	00000306 	br	8106f8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  8106ec:	0001883a 	nop
  8106f0:	00000106 	br	8106f8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  8106f4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8106f8:	e0fffd17 	ldw	r3,-12(fp)
  8106fc:	e0bff717 	ldw	r2,-36(fp)
  810700:	18800426 	beq	r3,r2,810714 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  810704:	e0fffd17 	ldw	r3,-12(fp)
  810708:	e0bff717 	ldw	r2,-36(fp)
  81070c:	1885c83a 	sub	r2,r3,r2
  810710:	00000606 	br	81072c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  810714:	e0bfff17 	ldw	r2,-4(fp)
  810718:	1090000c 	andi	r2,r2,16384
  81071c:	10000226 	beq	r2,zero,810728 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  810720:	00bffd44 	movi	r2,-11
  810724:	00000106 	br	81072c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  810728:	00bffec4 	movi	r2,-5
}
  81072c:	e037883a 	mov	sp,fp
  810730:	dfc00117 	ldw	ra,4(sp)
  810734:	df000017 	ldw	fp,0(sp)
  810738:	dec00204 	addi	sp,sp,8
  81073c:	f800283a 	ret

00810740 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  810740:	defffa04 	addi	sp,sp,-24
  810744:	dfc00515 	stw	ra,20(sp)
  810748:	df000415 	stw	fp,16(sp)
  81074c:	df000404 	addi	fp,sp,16
  810750:	e13ffe15 	stw	r4,-8(fp)
  810754:	2805883a 	mov	r2,r5
  810758:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  81075c:	e0bffe17 	ldw	r2,-8(fp)
  810760:	10800017 	ldw	r2,0(r2)
  810764:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  810768:	008003f4 	movhi	r2,15
  81076c:	10909004 	addi	r2,r2,16960
  810770:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  810774:	e0bffe17 	ldw	r2,-8(fp)
  810778:	10800803 	ldbu	r2,32(r2)
  81077c:	10803fcc 	andi	r2,r2,255
  810780:	1080201c 	xori	r2,r2,128
  810784:	10bfe004 	addi	r2,r2,-128
  810788:	1000151e 	bne	r2,zero,8107e0 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81078c:	00000906 	br	8107b4 <lcd_write_command+0x74>
    if (--i == 0)
  810790:	e0bffc17 	ldw	r2,-16(fp)
  810794:	10bfffc4 	addi	r2,r2,-1
  810798:	e0bffc15 	stw	r2,-16(fp)
  81079c:	e0bffc17 	ldw	r2,-16(fp)
  8107a0:	1000041e 	bne	r2,zero,8107b4 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  8107a4:	e0bffe17 	ldw	r2,-8(fp)
  8107a8:	00c00044 	movi	r3,1
  8107ac:	10c00805 	stb	r3,32(r2)
      return;
  8107b0:	00000c06 	br	8107e4 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8107b4:	e0bffd17 	ldw	r2,-12(fp)
  8107b8:	10800104 	addi	r2,r2,4
  8107bc:	10800037 	ldwio	r2,0(r2)
  8107c0:	1080200c 	andi	r2,r2,128
  8107c4:	103ff21e 	bne	r2,zero,810790 <__alt_mem_onchip_mem+0xff808790>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8107c8:	01001904 	movi	r4,100
  8107cc:	08128200 	call	812820 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  8107d0:	e0bffd17 	ldw	r2,-12(fp)
  8107d4:	e0ffff03 	ldbu	r3,-4(fp)
  8107d8:	10c00035 	stwio	r3,0(r2)
  8107dc:	00000106 	br	8107e4 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8107e0:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  8107e4:	e037883a 	mov	sp,fp
  8107e8:	dfc00117 	ldw	ra,4(sp)
  8107ec:	df000017 	ldw	fp,0(sp)
  8107f0:	dec00204 	addi	sp,sp,8
  8107f4:	f800283a 	ret

008107f8 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8107f8:	defffa04 	addi	sp,sp,-24
  8107fc:	dfc00515 	stw	ra,20(sp)
  810800:	df000415 	stw	fp,16(sp)
  810804:	df000404 	addi	fp,sp,16
  810808:	e13ffe15 	stw	r4,-8(fp)
  81080c:	2805883a 	mov	r2,r5
  810810:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  810814:	e0bffe17 	ldw	r2,-8(fp)
  810818:	10800017 	ldw	r2,0(r2)
  81081c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  810820:	008003f4 	movhi	r2,15
  810824:	10909004 	addi	r2,r2,16960
  810828:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  81082c:	e0bffe17 	ldw	r2,-8(fp)
  810830:	10800803 	ldbu	r2,32(r2)
  810834:	10803fcc 	andi	r2,r2,255
  810838:	1080201c 	xori	r2,r2,128
  81083c:	10bfe004 	addi	r2,r2,-128
  810840:	10001d1e 	bne	r2,zero,8108b8 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810844:	00000906 	br	81086c <lcd_write_data+0x74>
    if (--i == 0)
  810848:	e0bffc17 	ldw	r2,-16(fp)
  81084c:	10bfffc4 	addi	r2,r2,-1
  810850:	e0bffc15 	stw	r2,-16(fp)
  810854:	e0bffc17 	ldw	r2,-16(fp)
  810858:	1000041e 	bne	r2,zero,81086c <lcd_write_data+0x74>
    {
      sp->broken = 1;
  81085c:	e0bffe17 	ldw	r2,-8(fp)
  810860:	00c00044 	movi	r3,1
  810864:	10c00805 	stb	r3,32(r2)
      return;
  810868:	00001406 	br	8108bc <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81086c:	e0bffd17 	ldw	r2,-12(fp)
  810870:	10800104 	addi	r2,r2,4
  810874:	10800037 	ldwio	r2,0(r2)
  810878:	1080200c 	andi	r2,r2,128
  81087c:	103ff21e 	bne	r2,zero,810848 <__alt_mem_onchip_mem+0xff808848>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  810880:	01001904 	movi	r4,100
  810884:	08128200 	call	812820 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  810888:	e0bffd17 	ldw	r2,-12(fp)
  81088c:	10800204 	addi	r2,r2,8
  810890:	1007883a 	mov	r3,r2
  810894:	e0bfff03 	ldbu	r2,-4(fp)
  810898:	18800035 	stwio	r2,0(r3)

  sp->address++;
  81089c:	e0bffe17 	ldw	r2,-8(fp)
  8108a0:	108008c3 	ldbu	r2,35(r2)
  8108a4:	10800044 	addi	r2,r2,1
  8108a8:	1007883a 	mov	r3,r2
  8108ac:	e0bffe17 	ldw	r2,-8(fp)
  8108b0:	10c008c5 	stb	r3,35(r2)
  8108b4:	00000106 	br	8108bc <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8108b8:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  8108bc:	e037883a 	mov	sp,fp
  8108c0:	dfc00117 	ldw	ra,4(sp)
  8108c4:	df000017 	ldw	fp,0(sp)
  8108c8:	dec00204 	addi	sp,sp,8
  8108cc:	f800283a 	ret

008108d0 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  8108d0:	defffc04 	addi	sp,sp,-16
  8108d4:	dfc00315 	stw	ra,12(sp)
  8108d8:	df000215 	stw	fp,8(sp)
  8108dc:	df000204 	addi	fp,sp,8
  8108e0:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  8108e4:	01400044 	movi	r5,1
  8108e8:	e13fff17 	ldw	r4,-4(fp)
  8108ec:	08107400 	call	810740 <lcd_write_command>

  sp->x = 0;
  8108f0:	e0bfff17 	ldw	r2,-4(fp)
  8108f4:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8108f8:	e0bfff17 	ldw	r2,-4(fp)
  8108fc:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  810900:	e0bfff17 	ldw	r2,-4(fp)
  810904:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810908:	e03ffe15 	stw	zero,-8(fp)
  81090c:	00001b06 	br	81097c <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  810910:	e0bffe17 	ldw	r2,-8(fp)
  810914:	108018e4 	muli	r2,r2,99
  810918:	10801004 	addi	r2,r2,64
  81091c:	e0ffff17 	ldw	r3,-4(fp)
  810920:	1885883a 	add	r2,r3,r2
  810924:	01801444 	movi	r6,81
  810928:	01400804 	movi	r5,32
  81092c:	1009883a 	mov	r4,r2
  810930:	0802d600 	call	802d60 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  810934:	e0bffe17 	ldw	r2,-8(fp)
  810938:	108018e4 	muli	r2,r2,99
  81093c:	10800c04 	addi	r2,r2,48
  810940:	e0ffff17 	ldw	r3,-4(fp)
  810944:	1885883a 	add	r2,r3,r2
  810948:	01800404 	movi	r6,16
  81094c:	01400804 	movi	r5,32
  810950:	1009883a 	mov	r4,r2
  810954:	0802d600 	call	802d60 <memset>
    sp->line[y].width = 0;
  810958:	e0ffff17 	ldw	r3,-4(fp)
  81095c:	e0bffe17 	ldw	r2,-8(fp)
  810960:	108018e4 	muli	r2,r2,99
  810964:	1885883a 	add	r2,r3,r2
  810968:	10802444 	addi	r2,r2,145
  81096c:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810970:	e0bffe17 	ldw	r2,-8(fp)
  810974:	10800044 	addi	r2,r2,1
  810978:	e0bffe15 	stw	r2,-8(fp)
  81097c:	e0bffe17 	ldw	r2,-8(fp)
  810980:	10800090 	cmplti	r2,r2,2
  810984:	103fe21e 	bne	r2,zero,810910 <__alt_mem_onchip_mem+0xff808910>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  810988:	0001883a 	nop
  81098c:	e037883a 	mov	sp,fp
  810990:	dfc00117 	ldw	ra,4(sp)
  810994:	df000017 	ldw	fp,0(sp)
  810998:	dec00204 	addi	sp,sp,8
  81099c:	f800283a 	ret

008109a0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  8109a0:	defff704 	addi	sp,sp,-36
  8109a4:	dfc00815 	stw	ra,32(sp)
  8109a8:	df000715 	stw	fp,28(sp)
  8109ac:	df000704 	addi	fp,sp,28
  8109b0:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  8109b4:	e0bfff17 	ldw	r2,-4(fp)
  8109b8:	10800943 	ldbu	r2,37(r2)
  8109bc:	10803fcc 	andi	r2,r2,255
  8109c0:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8109c4:	e03ff915 	stw	zero,-28(fp)
  8109c8:	00006706 	br	810b68 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  8109cc:	e0ffff17 	ldw	r3,-4(fp)
  8109d0:	e0bff917 	ldw	r2,-28(fp)
  8109d4:	108018e4 	muli	r2,r2,99
  8109d8:	1885883a 	add	r2,r3,r2
  8109dc:	10802444 	addi	r2,r2,145
  8109e0:	10800003 	ldbu	r2,0(r2)
  8109e4:	10803fcc 	andi	r2,r2,255
  8109e8:	1080201c 	xori	r2,r2,128
  8109ec:	10bfe004 	addi	r2,r2,-128
  8109f0:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8109f4:	e0ffff17 	ldw	r3,-4(fp)
  8109f8:	e0bff917 	ldw	r2,-28(fp)
  8109fc:	108018e4 	muli	r2,r2,99
  810a00:	1885883a 	add	r2,r3,r2
  810a04:	10802484 	addi	r2,r2,146
  810a08:	10800003 	ldbu	r2,0(r2)
  810a0c:	10c03fcc 	andi	r3,r2,255
  810a10:	e0bffc17 	ldw	r2,-16(fp)
  810a14:	1885383a 	mul	r2,r3,r2
  810a18:	1005d23a 	srai	r2,r2,8
  810a1c:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  810a20:	e0fffb17 	ldw	r3,-20(fp)
  810a24:	e0bffd17 	ldw	r2,-12(fp)
  810a28:	18800116 	blt	r3,r2,810a30 <lcd_repaint_screen+0x90>
      offset = 0;
  810a2c:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810a30:	e03ffa15 	stw	zero,-24(fp)
  810a34:	00004606 	br	810b50 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  810a38:	e0fffa17 	ldw	r3,-24(fp)
  810a3c:	e0bffb17 	ldw	r2,-20(fp)
  810a40:	1885883a 	add	r2,r3,r2
  810a44:	e17ffd17 	ldw	r5,-12(fp)
  810a48:	1009883a 	mov	r4,r2
  810a4c:	080145c0 	call	80145c <__modsi3>
  810a50:	1009883a 	mov	r4,r2
  810a54:	e0ffff17 	ldw	r3,-4(fp)
  810a58:	e0bff917 	ldw	r2,-28(fp)
  810a5c:	108018e4 	muli	r2,r2,99
  810a60:	1885883a 	add	r2,r3,r2
  810a64:	1105883a 	add	r2,r2,r4
  810a68:	10801004 	addi	r2,r2,64
  810a6c:	10800003 	ldbu	r2,0(r2)
  810a70:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  810a74:	e0ffff17 	ldw	r3,-4(fp)
  810a78:	e0bff917 	ldw	r2,-28(fp)
  810a7c:	108018e4 	muli	r2,r2,99
  810a80:	1887883a 	add	r3,r3,r2
  810a84:	e0bffa17 	ldw	r2,-24(fp)
  810a88:	1885883a 	add	r2,r3,r2
  810a8c:	10800c04 	addi	r2,r2,48
  810a90:	10800003 	ldbu	r2,0(r2)
  810a94:	10c03fcc 	andi	r3,r2,255
  810a98:	18c0201c 	xori	r3,r3,128
  810a9c:	18ffe004 	addi	r3,r3,-128
  810aa0:	e0bffe07 	ldb	r2,-8(fp)
  810aa4:	18802726 	beq	r3,r2,810b44 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  810aa8:	e0fff917 	ldw	r3,-28(fp)
  810aac:	d0a01104 	addi	r2,gp,-32700
  810ab0:	1885883a 	add	r2,r3,r2
  810ab4:	10800003 	ldbu	r2,0(r2)
  810ab8:	1007883a 	mov	r3,r2
  810abc:	e0bffa17 	ldw	r2,-24(fp)
  810ac0:	1885883a 	add	r2,r3,r2
  810ac4:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  810ac8:	e0fffe43 	ldbu	r3,-7(fp)
  810acc:	e0bfff17 	ldw	r2,-4(fp)
  810ad0:	108008c3 	ldbu	r2,35(r2)
  810ad4:	10803fcc 	andi	r2,r2,255
  810ad8:	1080201c 	xori	r2,r2,128
  810adc:	10bfe004 	addi	r2,r2,-128
  810ae0:	18800a26 	beq	r3,r2,810b0c <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  810ae4:	e0fffe43 	ldbu	r3,-7(fp)
  810ae8:	00bfe004 	movi	r2,-128
  810aec:	1884b03a 	or	r2,r3,r2
  810af0:	10803fcc 	andi	r2,r2,255
  810af4:	100b883a 	mov	r5,r2
  810af8:	e13fff17 	ldw	r4,-4(fp)
  810afc:	08107400 	call	810740 <lcd_write_command>
          sp->address = address;
  810b00:	e0fffe43 	ldbu	r3,-7(fp)
  810b04:	e0bfff17 	ldw	r2,-4(fp)
  810b08:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  810b0c:	e0bffe03 	ldbu	r2,-8(fp)
  810b10:	10803fcc 	andi	r2,r2,255
  810b14:	100b883a 	mov	r5,r2
  810b18:	e13fff17 	ldw	r4,-4(fp)
  810b1c:	08107f80 	call	8107f8 <lcd_write_data>
        sp->line[y].visible[x] = c;
  810b20:	e0ffff17 	ldw	r3,-4(fp)
  810b24:	e0bff917 	ldw	r2,-28(fp)
  810b28:	108018e4 	muli	r2,r2,99
  810b2c:	1887883a 	add	r3,r3,r2
  810b30:	e0bffa17 	ldw	r2,-24(fp)
  810b34:	1885883a 	add	r2,r3,r2
  810b38:	10800c04 	addi	r2,r2,48
  810b3c:	e0fffe03 	ldbu	r3,-8(fp)
  810b40:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810b44:	e0bffa17 	ldw	r2,-24(fp)
  810b48:	10800044 	addi	r2,r2,1
  810b4c:	e0bffa15 	stw	r2,-24(fp)
  810b50:	e0bffa17 	ldw	r2,-24(fp)
  810b54:	10800410 	cmplti	r2,r2,16
  810b58:	103fb71e 	bne	r2,zero,810a38 <__alt_mem_onchip_mem+0xff808a38>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810b5c:	e0bff917 	ldw	r2,-28(fp)
  810b60:	10800044 	addi	r2,r2,1
  810b64:	e0bff915 	stw	r2,-28(fp)
  810b68:	e0bff917 	ldw	r2,-28(fp)
  810b6c:	10800090 	cmplti	r2,r2,2
  810b70:	103f961e 	bne	r2,zero,8109cc <__alt_mem_onchip_mem+0xff8089cc>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  810b74:	0001883a 	nop
  810b78:	e037883a 	mov	sp,fp
  810b7c:	dfc00117 	ldw	ra,4(sp)
  810b80:	df000017 	ldw	fp,0(sp)
  810b84:	dec00204 	addi	sp,sp,8
  810b88:	f800283a 	ret

00810b8c <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  810b8c:	defffc04 	addi	sp,sp,-16
  810b90:	dfc00315 	stw	ra,12(sp)
  810b94:	df000215 	stw	fp,8(sp)
  810b98:	df000204 	addi	fp,sp,8
  810b9c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810ba0:	e03ffe15 	stw	zero,-8(fp)
  810ba4:	00001d06 	br	810c1c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  810ba8:	e0bffe17 	ldw	r2,-8(fp)
  810bac:	00800f16 	blt	zero,r2,810bec <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  810bb0:	e0bffe17 	ldw	r2,-8(fp)
  810bb4:	108018e4 	muli	r2,r2,99
  810bb8:	10801004 	addi	r2,r2,64
  810bbc:	e0ffff17 	ldw	r3,-4(fp)
  810bc0:	1889883a 	add	r4,r3,r2
  810bc4:	e0bffe17 	ldw	r2,-8(fp)
  810bc8:	10800044 	addi	r2,r2,1
  810bcc:	108018e4 	muli	r2,r2,99
  810bd0:	10801004 	addi	r2,r2,64
  810bd4:	e0ffff17 	ldw	r3,-4(fp)
  810bd8:	1885883a 	add	r2,r3,r2
  810bdc:	01801404 	movi	r6,80
  810be0:	100b883a 	mov	r5,r2
  810be4:	080858c0 	call	80858c <memcpy>
  810be8:	00000906 	br	810c10 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  810bec:	e0bffe17 	ldw	r2,-8(fp)
  810bf0:	108018e4 	muli	r2,r2,99
  810bf4:	10801004 	addi	r2,r2,64
  810bf8:	e0ffff17 	ldw	r3,-4(fp)
  810bfc:	1885883a 	add	r2,r3,r2
  810c00:	01801404 	movi	r6,80
  810c04:	01400804 	movi	r5,32
  810c08:	1009883a 	mov	r4,r2
  810c0c:	0802d600 	call	802d60 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810c10:	e0bffe17 	ldw	r2,-8(fp)
  810c14:	10800044 	addi	r2,r2,1
  810c18:	e0bffe15 	stw	r2,-8(fp)
  810c1c:	e0bffe17 	ldw	r2,-8(fp)
  810c20:	10800090 	cmplti	r2,r2,2
  810c24:	103fe01e 	bne	r2,zero,810ba8 <__alt_mem_onchip_mem+0xff808ba8>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  810c28:	e0bfff17 	ldw	r2,-4(fp)
  810c2c:	10800883 	ldbu	r2,34(r2)
  810c30:	10bfffc4 	addi	r2,r2,-1
  810c34:	1007883a 	mov	r3,r2
  810c38:	e0bfff17 	ldw	r2,-4(fp)
  810c3c:	10c00885 	stb	r3,34(r2)
}
  810c40:	0001883a 	nop
  810c44:	e037883a 	mov	sp,fp
  810c48:	dfc00117 	ldw	ra,4(sp)
  810c4c:	df000017 	ldw	fp,0(sp)
  810c50:	dec00204 	addi	sp,sp,8
  810c54:	f800283a 	ret

00810c58 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  810c58:	defff904 	addi	sp,sp,-28
  810c5c:	dfc00615 	stw	ra,24(sp)
  810c60:	df000515 	stw	fp,20(sp)
  810c64:	df000504 	addi	fp,sp,20
  810c68:	e13ffe15 	stw	r4,-8(fp)
  810c6c:	2805883a 	mov	r2,r5
  810c70:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  810c74:	e03ffb15 	stw	zero,-20(fp)
  810c78:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  810c7c:	e0bffe17 	ldw	r2,-8(fp)
  810c80:	10800a03 	ldbu	r2,40(r2)
  810c84:	10803fcc 	andi	r2,r2,255
  810c88:	1080201c 	xori	r2,r2,128
  810c8c:	10bfe004 	addi	r2,r2,-128
  810c90:	108016d8 	cmpnei	r2,r2,91
  810c94:	1000411e 	bne	r2,zero,810d9c <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  810c98:	e0bffe17 	ldw	r2,-8(fp)
  810c9c:	10800a04 	addi	r2,r2,40
  810ca0:	10800044 	addi	r2,r2,1
  810ca4:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  810ca8:	00000c06 	br	810cdc <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  810cac:	e0bffb17 	ldw	r2,-20(fp)
  810cb0:	10c002a4 	muli	r3,r2,10
  810cb4:	e0bffd17 	ldw	r2,-12(fp)
  810cb8:	11000044 	addi	r4,r2,1
  810cbc:	e13ffd15 	stw	r4,-12(fp)
  810cc0:	10800003 	ldbu	r2,0(r2)
  810cc4:	10803fcc 	andi	r2,r2,255
  810cc8:	1080201c 	xori	r2,r2,128
  810ccc:	10bfe004 	addi	r2,r2,-128
  810cd0:	10bff404 	addi	r2,r2,-48
  810cd4:	1885883a 	add	r2,r3,r2
  810cd8:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  810cdc:	d0e00417 	ldw	r3,-32752(gp)
  810ce0:	e0bffd17 	ldw	r2,-12(fp)
  810ce4:	10800003 	ldbu	r2,0(r2)
  810ce8:	10803fcc 	andi	r2,r2,255
  810cec:	1080201c 	xori	r2,r2,128
  810cf0:	10bfe004 	addi	r2,r2,-128
  810cf4:	10800044 	addi	r2,r2,1
  810cf8:	1885883a 	add	r2,r3,r2
  810cfc:	10800003 	ldbu	r2,0(r2)
  810d00:	10803fcc 	andi	r2,r2,255
  810d04:	1080010c 	andi	r2,r2,4
  810d08:	103fe81e 	bne	r2,zero,810cac <__alt_mem_onchip_mem+0xff808cac>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  810d0c:	e0bffd17 	ldw	r2,-12(fp)
  810d10:	10800003 	ldbu	r2,0(r2)
  810d14:	10803fcc 	andi	r2,r2,255
  810d18:	1080201c 	xori	r2,r2,128
  810d1c:	10bfe004 	addi	r2,r2,-128
  810d20:	10800ed8 	cmpnei	r2,r2,59
  810d24:	10001f1e 	bne	r2,zero,810da4 <lcd_handle_escape+0x14c>
    {
      ptr++;
  810d28:	e0bffd17 	ldw	r2,-12(fp)
  810d2c:	10800044 	addi	r2,r2,1
  810d30:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  810d34:	00000c06 	br	810d68 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  810d38:	e0bffc17 	ldw	r2,-16(fp)
  810d3c:	10c002a4 	muli	r3,r2,10
  810d40:	e0bffd17 	ldw	r2,-12(fp)
  810d44:	11000044 	addi	r4,r2,1
  810d48:	e13ffd15 	stw	r4,-12(fp)
  810d4c:	10800003 	ldbu	r2,0(r2)
  810d50:	10803fcc 	andi	r2,r2,255
  810d54:	1080201c 	xori	r2,r2,128
  810d58:	10bfe004 	addi	r2,r2,-128
  810d5c:	10bff404 	addi	r2,r2,-48
  810d60:	1885883a 	add	r2,r3,r2
  810d64:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  810d68:	d0e00417 	ldw	r3,-32752(gp)
  810d6c:	e0bffd17 	ldw	r2,-12(fp)
  810d70:	10800003 	ldbu	r2,0(r2)
  810d74:	10803fcc 	andi	r2,r2,255
  810d78:	1080201c 	xori	r2,r2,128
  810d7c:	10bfe004 	addi	r2,r2,-128
  810d80:	10800044 	addi	r2,r2,1
  810d84:	1885883a 	add	r2,r3,r2
  810d88:	10800003 	ldbu	r2,0(r2)
  810d8c:	10803fcc 	andi	r2,r2,255
  810d90:	1080010c 	andi	r2,r2,4
  810d94:	103fe81e 	bne	r2,zero,810d38 <__alt_mem_onchip_mem+0xff808d38>
  810d98:	00000206 	br	810da4 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  810d9c:	00bfffc4 	movi	r2,-1
  810da0:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  810da4:	e0bfff07 	ldb	r2,-4(fp)
  810da8:	10c012a0 	cmpeqi	r3,r2,74
  810dac:	1800291e 	bne	r3,zero,810e54 <lcd_handle_escape+0x1fc>
  810db0:	10c012c8 	cmpgei	r3,r2,75
  810db4:	1800031e 	bne	r3,zero,810dc4 <lcd_handle_escape+0x16c>
  810db8:	10801220 	cmpeqi	r2,r2,72
  810dbc:	1000061e 	bne	r2,zero,810dd8 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  810dc0:	00004a06 	br	810eec <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  810dc4:	10c012e0 	cmpeqi	r3,r2,75
  810dc8:	1800281e 	bne	r3,zero,810e6c <lcd_handle_escape+0x214>
  810dcc:	108019a0 	cmpeqi	r2,r2,102
  810dd0:	1000011e 	bne	r2,zero,810dd8 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  810dd4:	00004506 	br	810eec <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  810dd8:	e0bffc17 	ldw	r2,-16(fp)
  810ddc:	0080050e 	bge	zero,r2,810df4 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  810de0:	e0bffc17 	ldw	r2,-16(fp)
  810de4:	10bfffc4 	addi	r2,r2,-1
  810de8:	1007883a 	mov	r3,r2
  810dec:	e0bffe17 	ldw	r2,-8(fp)
  810df0:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  810df4:	e0bffb17 	ldw	r2,-20(fp)
  810df8:	0080370e 	bge	zero,r2,810ed8 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  810dfc:	e0bffb17 	ldw	r2,-20(fp)
  810e00:	10bfffc4 	addi	r2,r2,-1
  810e04:	1007883a 	mov	r3,r2
  810e08:	e0bffe17 	ldw	r2,-8(fp)
  810e0c:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  810e10:	e0bffe17 	ldw	r2,-8(fp)
  810e14:	10800883 	ldbu	r2,34(r2)
  810e18:	10803fcc 	andi	r2,r2,255
  810e1c:	10800170 	cmpltui	r2,r2,5
  810e20:	1000061e 	bne	r2,zero,810e3c <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  810e24:	e0bffe17 	ldw	r2,-8(fp)
  810e28:	00c00104 	movi	r3,4
  810e2c:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  810e30:	00000206 	br	810e3c <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  810e34:	e13ffe17 	ldw	r4,-8(fp)
  810e38:	0810b8c0 	call	810b8c <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  810e3c:	e0bffe17 	ldw	r2,-8(fp)
  810e40:	10800883 	ldbu	r2,34(r2)
  810e44:	10803fcc 	andi	r2,r2,255
  810e48:	108000e8 	cmpgeui	r2,r2,3
  810e4c:	103ff91e 	bne	r2,zero,810e34 <__alt_mem_onchip_mem+0xff808e34>
        lcd_scroll_up(sp);
    }
    break;
  810e50:	00002106 	br	810ed8 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  810e54:	e0bffb17 	ldw	r2,-20(fp)
  810e58:	10800098 	cmpnei	r2,r2,2
  810e5c:	1000201e 	bne	r2,zero,810ee0 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  810e60:	e13ffe17 	ldw	r4,-8(fp)
  810e64:	08108d00 	call	8108d0 <lcd_clear_screen>
    break;
  810e68:	00001d06 	br	810ee0 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  810e6c:	e0bffb17 	ldw	r2,-20(fp)
  810e70:	00801d16 	blt	zero,r2,810ee8 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  810e74:	e0bffe17 	ldw	r2,-8(fp)
  810e78:	10800843 	ldbu	r2,33(r2)
  810e7c:	10803fcc 	andi	r2,r2,255
  810e80:	10801428 	cmpgeui	r2,r2,80
  810e84:	1000181e 	bne	r2,zero,810ee8 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  810e88:	e0bffe17 	ldw	r2,-8(fp)
  810e8c:	10800883 	ldbu	r2,34(r2)
  810e90:	10803fcc 	andi	r2,r2,255
  810e94:	108018e4 	muli	r2,r2,99
  810e98:	10801004 	addi	r2,r2,64
  810e9c:	e0fffe17 	ldw	r3,-8(fp)
  810ea0:	1887883a 	add	r3,r3,r2
  810ea4:	e0bffe17 	ldw	r2,-8(fp)
  810ea8:	10800843 	ldbu	r2,33(r2)
  810eac:	10803fcc 	andi	r2,r2,255
  810eb0:	1889883a 	add	r4,r3,r2
  810eb4:	e0bffe17 	ldw	r2,-8(fp)
  810eb8:	10800843 	ldbu	r2,33(r2)
  810ebc:	10803fcc 	andi	r2,r2,255
  810ec0:	00c01404 	movi	r3,80
  810ec4:	1885c83a 	sub	r2,r3,r2
  810ec8:	100d883a 	mov	r6,r2
  810ecc:	01400804 	movi	r5,32
  810ed0:	0802d600 	call	802d60 <memset>
    }
    break;
  810ed4:	00000406 	br	810ee8 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  810ed8:	0001883a 	nop
  810edc:	00000306 	br	810eec <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  810ee0:	0001883a 	nop
  810ee4:	00000106 	br	810eec <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  810ee8:	0001883a 	nop
  }
}
  810eec:	0001883a 	nop
  810ef0:	e037883a 	mov	sp,fp
  810ef4:	dfc00117 	ldw	ra,4(sp)
  810ef8:	df000017 	ldw	fp,0(sp)
  810efc:	dec00204 	addi	sp,sp,8
  810f00:	f800283a 	ret

00810f04 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  810f04:	defff304 	addi	sp,sp,-52
  810f08:	dfc00c15 	stw	ra,48(sp)
  810f0c:	df000b15 	stw	fp,44(sp)
  810f10:	df000b04 	addi	fp,sp,44
  810f14:	e13ffc15 	stw	r4,-16(fp)
  810f18:	e17ffd15 	stw	r5,-12(fp)
  810f1c:	e1bffe15 	stw	r6,-8(fp)
  810f20:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  810f24:	e0bffe17 	ldw	r2,-8(fp)
  810f28:	e0fffd17 	ldw	r3,-12(fp)
  810f2c:	1885883a 	add	r2,r3,r2
  810f30:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  810f34:	e0bffc17 	ldw	r2,-16(fp)
  810f38:	00c00044 	movi	r3,1
  810f3c:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  810f40:	00009906 	br	8111a8 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  810f44:	e0bffd17 	ldw	r2,-12(fp)
  810f48:	10800003 	ldbu	r2,0(r2)
  810f4c:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  810f50:	e0bffc17 	ldw	r2,-16(fp)
  810f54:	10800903 	ldbu	r2,36(r2)
  810f58:	10803fcc 	andi	r2,r2,255
  810f5c:	1080201c 	xori	r2,r2,128
  810f60:	10bfe004 	addi	r2,r2,-128
  810f64:	10003716 	blt	r2,zero,811044 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  810f68:	e0bffc17 	ldw	r2,-16(fp)
  810f6c:	10800903 	ldbu	r2,36(r2)
  810f70:	10803fcc 	andi	r2,r2,255
  810f74:	1080201c 	xori	r2,r2,128
  810f78:	10bfe004 	addi	r2,r2,-128
  810f7c:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  810f80:	e0bffa17 	ldw	r2,-24(fp)
  810f84:	1000031e 	bne	r2,zero,810f94 <altera_avalon_lcd_16207_write+0x90>
  810f88:	e0bff907 	ldb	r2,-28(fp)
  810f8c:	108016d8 	cmpnei	r2,r2,91
  810f90:	10000d1e 	bne	r2,zero,810fc8 <altera_avalon_lcd_16207_write+0xc4>
  810f94:	e0bffa17 	ldw	r2,-24(fp)
  810f98:	10001826 	beq	r2,zero,810ffc <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  810f9c:	d0e00417 	ldw	r3,-32752(gp)
  810fa0:	e0bff907 	ldb	r2,-28(fp)
  810fa4:	10800044 	addi	r2,r2,1
  810fa8:	1885883a 	add	r2,r3,r2
  810fac:	10800003 	ldbu	r2,0(r2)
  810fb0:	10803fcc 	andi	r2,r2,255
  810fb4:	1080010c 	andi	r2,r2,4
  810fb8:	1000101e 	bne	r2,zero,810ffc <altera_avalon_lcd_16207_write+0xf8>
  810fbc:	e0bff907 	ldb	r2,-28(fp)
  810fc0:	10800ee0 	cmpeqi	r2,r2,59
  810fc4:	10000d1e 	bne	r2,zero,810ffc <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  810fc8:	e0fffc17 	ldw	r3,-16(fp)
  810fcc:	e0bffa17 	ldw	r2,-24(fp)
  810fd0:	1885883a 	add	r2,r3,r2
  810fd4:	10800a04 	addi	r2,r2,40
  810fd8:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  810fdc:	e0bff907 	ldb	r2,-28(fp)
  810fe0:	100b883a 	mov	r5,r2
  810fe4:	e13ffc17 	ldw	r4,-16(fp)
  810fe8:	0810c580 	call	810c58 <lcd_handle_escape>

        sp->esccount = -1;
  810fec:	e0bffc17 	ldw	r2,-16(fp)
  810ff0:	00ffffc4 	movi	r3,-1
  810ff4:	10c00905 	stb	r3,36(r2)
  810ff8:	00006806 	br	81119c <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  810ffc:	e0bffc17 	ldw	r2,-16(fp)
  811000:	10800903 	ldbu	r2,36(r2)
  811004:	10803fcc 	andi	r2,r2,255
  811008:	108001e8 	cmpgeui	r2,r2,7
  81100c:	1000631e 	bne	r2,zero,81119c <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  811010:	e0fffc17 	ldw	r3,-16(fp)
  811014:	e0bffa17 	ldw	r2,-24(fp)
  811018:	1885883a 	add	r2,r3,r2
  81101c:	10800a04 	addi	r2,r2,40
  811020:	e0fff903 	ldbu	r3,-28(fp)
  811024:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  811028:	e0bffc17 	ldw	r2,-16(fp)
  81102c:	10800903 	ldbu	r2,36(r2)
  811030:	10800044 	addi	r2,r2,1
  811034:	1007883a 	mov	r3,r2
  811038:	e0bffc17 	ldw	r2,-16(fp)
  81103c:	10c00905 	stb	r3,36(r2)
  811040:	00005606 	br	81119c <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  811044:	e0bff907 	ldb	r2,-28(fp)
  811048:	108006d8 	cmpnei	r2,r2,27
  81104c:	1000031e 	bne	r2,zero,81105c <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  811050:	e0bffc17 	ldw	r2,-16(fp)
  811054:	10000905 	stb	zero,36(r2)
  811058:	00005006 	br	81119c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  81105c:	e0bff907 	ldb	r2,-28(fp)
  811060:	10800358 	cmpnei	r2,r2,13
  811064:	1000031e 	bne	r2,zero,811074 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  811068:	e0bffc17 	ldw	r2,-16(fp)
  81106c:	10000845 	stb	zero,33(r2)
  811070:	00004a06 	br	81119c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  811074:	e0bff907 	ldb	r2,-28(fp)
  811078:	10800298 	cmpnei	r2,r2,10
  81107c:	1000101e 	bne	r2,zero,8110c0 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  811080:	e0bffc17 	ldw	r2,-16(fp)
  811084:	10000845 	stb	zero,33(r2)
      sp->y++;
  811088:	e0bffc17 	ldw	r2,-16(fp)
  81108c:	10800883 	ldbu	r2,34(r2)
  811090:	10800044 	addi	r2,r2,1
  811094:	1007883a 	mov	r3,r2
  811098:	e0bffc17 	ldw	r2,-16(fp)
  81109c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  8110a0:	e0bffc17 	ldw	r2,-16(fp)
  8110a4:	10800883 	ldbu	r2,34(r2)
  8110a8:	10803fcc 	andi	r2,r2,255
  8110ac:	108000f0 	cmpltui	r2,r2,3
  8110b0:	10003a1e 	bne	r2,zero,81119c <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  8110b4:	e13ffc17 	ldw	r4,-16(fp)
  8110b8:	0810b8c0 	call	810b8c <lcd_scroll_up>
  8110bc:	00003706 	br	81119c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  8110c0:	e0bff907 	ldb	r2,-28(fp)
  8110c4:	10800218 	cmpnei	r2,r2,8
  8110c8:	10000b1e 	bne	r2,zero,8110f8 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  8110cc:	e0bffc17 	ldw	r2,-16(fp)
  8110d0:	10800843 	ldbu	r2,33(r2)
  8110d4:	10803fcc 	andi	r2,r2,255
  8110d8:	10003026 	beq	r2,zero,81119c <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  8110dc:	e0bffc17 	ldw	r2,-16(fp)
  8110e0:	10800843 	ldbu	r2,33(r2)
  8110e4:	10bfffc4 	addi	r2,r2,-1
  8110e8:	1007883a 	mov	r3,r2
  8110ec:	e0bffc17 	ldw	r2,-16(fp)
  8110f0:	10c00845 	stb	r3,33(r2)
  8110f4:	00002906 	br	81119c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  8110f8:	d0e00417 	ldw	r3,-32752(gp)
  8110fc:	e0bff907 	ldb	r2,-28(fp)
  811100:	10800044 	addi	r2,r2,1
  811104:	1885883a 	add	r2,r3,r2
  811108:	10800003 	ldbu	r2,0(r2)
  81110c:	10803fcc 	andi	r2,r2,255
  811110:	1080201c 	xori	r2,r2,128
  811114:	10bfe004 	addi	r2,r2,-128
  811118:	108025cc 	andi	r2,r2,151
  81111c:	10001f26 	beq	r2,zero,81119c <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  811120:	e0bffc17 	ldw	r2,-16(fp)
  811124:	10800883 	ldbu	r2,34(r2)
  811128:	10803fcc 	andi	r2,r2,255
  81112c:	108000b0 	cmpltui	r2,r2,2
  811130:	1000021e 	bne	r2,zero,81113c <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  811134:	e13ffc17 	ldw	r4,-16(fp)
  811138:	0810b8c0 	call	810b8c <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  81113c:	e0bffc17 	ldw	r2,-16(fp)
  811140:	10800843 	ldbu	r2,33(r2)
  811144:	10803fcc 	andi	r2,r2,255
  811148:	10801428 	cmpgeui	r2,r2,80
  81114c:	10000d1e 	bne	r2,zero,811184 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  811150:	e0bffc17 	ldw	r2,-16(fp)
  811154:	10800883 	ldbu	r2,34(r2)
  811158:	10c03fcc 	andi	r3,r2,255
  81115c:	e0bffc17 	ldw	r2,-16(fp)
  811160:	10800843 	ldbu	r2,33(r2)
  811164:	10803fcc 	andi	r2,r2,255
  811168:	e13ffc17 	ldw	r4,-16(fp)
  81116c:	18c018e4 	muli	r3,r3,99
  811170:	20c7883a 	add	r3,r4,r3
  811174:	1885883a 	add	r2,r3,r2
  811178:	10801004 	addi	r2,r2,64
  81117c:	e0fff903 	ldbu	r3,-28(fp)
  811180:	10c00005 	stb	r3,0(r2)

      sp->x++;
  811184:	e0bffc17 	ldw	r2,-16(fp)
  811188:	10800843 	ldbu	r2,33(r2)
  81118c:	10800044 	addi	r2,r2,1
  811190:	1007883a 	mov	r3,r2
  811194:	e0bffc17 	ldw	r2,-16(fp)
  811198:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  81119c:	e0bffd17 	ldw	r2,-12(fp)
  8111a0:	10800044 	addi	r2,r2,1
  8111a4:	e0bffd15 	stw	r2,-12(fp)
  8111a8:	e0fffd17 	ldw	r3,-12(fp)
  8111ac:	e0bff817 	ldw	r2,-32(fp)
  8111b0:	18bf6436 	bltu	r3,r2,810f44 <__alt_mem_onchip_mem+0xff808f44>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  8111b4:	00800404 	movi	r2,16
  8111b8:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8111bc:	e03ff515 	stw	zero,-44(fp)
  8111c0:	00003706 	br	8112a0 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8111c4:	00801404 	movi	r2,80
  8111c8:	e0bff715 	stw	r2,-36(fp)
  8111cc:	00001106 	br	811214 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  8111d0:	e0bff717 	ldw	r2,-36(fp)
  8111d4:	10bfffc4 	addi	r2,r2,-1
  8111d8:	e13ffc17 	ldw	r4,-16(fp)
  8111dc:	e0fff517 	ldw	r3,-44(fp)
  8111e0:	18c018e4 	muli	r3,r3,99
  8111e4:	20c7883a 	add	r3,r4,r3
  8111e8:	1885883a 	add	r2,r3,r2
  8111ec:	10801004 	addi	r2,r2,64
  8111f0:	10800003 	ldbu	r2,0(r2)
  8111f4:	10803fcc 	andi	r2,r2,255
  8111f8:	1080201c 	xori	r2,r2,128
  8111fc:	10bfe004 	addi	r2,r2,-128
  811200:	10800820 	cmpeqi	r2,r2,32
  811204:	10000626 	beq	r2,zero,811220 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  811208:	e0bff717 	ldw	r2,-36(fp)
  81120c:	10bfffc4 	addi	r2,r2,-1
  811210:	e0bff715 	stw	r2,-36(fp)
  811214:	e0bff717 	ldw	r2,-36(fp)
  811218:	00bfed16 	blt	zero,r2,8111d0 <__alt_mem_onchip_mem+0xff8091d0>
  81121c:	00000106 	br	811224 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  811220:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  811224:	e0bff717 	ldw	r2,-36(fp)
  811228:	10800448 	cmpgei	r2,r2,17
  81122c:	1000031e 	bne	r2,zero,81123c <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  811230:	00800404 	movi	r2,16
  811234:	e0bff715 	stw	r2,-36(fp)
  811238:	00000306 	br	811248 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  81123c:	e0bff717 	ldw	r2,-36(fp)
  811240:	10800044 	addi	r2,r2,1
  811244:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  811248:	e0bff717 	ldw	r2,-36(fp)
  81124c:	1009883a 	mov	r4,r2
  811250:	e0fffc17 	ldw	r3,-16(fp)
  811254:	e0bff517 	ldw	r2,-44(fp)
  811258:	108018e4 	muli	r2,r2,99
  81125c:	1885883a 	add	r2,r3,r2
  811260:	10802444 	addi	r2,r2,145
  811264:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  811268:	e0fff617 	ldw	r3,-40(fp)
  81126c:	e0bff717 	ldw	r2,-36(fp)
  811270:	1880020e 	bge	r3,r2,81127c <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  811274:	e0bff717 	ldw	r2,-36(fp)
  811278:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  81127c:	e0fffc17 	ldw	r3,-16(fp)
  811280:	e0bff517 	ldw	r2,-44(fp)
  811284:	108018e4 	muli	r2,r2,99
  811288:	1885883a 	add	r2,r3,r2
  81128c:	10802484 	addi	r2,r2,146
  811290:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811294:	e0bff517 	ldw	r2,-44(fp)
  811298:	10800044 	addi	r2,r2,1
  81129c:	e0bff515 	stw	r2,-44(fp)
  8112a0:	e0bff517 	ldw	r2,-44(fp)
  8112a4:	10800090 	cmplti	r2,r2,2
  8112a8:	103fc61e 	bne	r2,zero,8111c4 <__alt_mem_onchip_mem+0xff8091c4>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  8112ac:	e0bff617 	ldw	r2,-40(fp)
  8112b0:	10800448 	cmpgei	r2,r2,17
  8112b4:	1000031e 	bne	r2,zero,8112c4 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  8112b8:	e0bffc17 	ldw	r2,-16(fp)
  8112bc:	10000985 	stb	zero,38(r2)
  8112c0:	00002e06 	br	81137c <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  8112c4:	e0bff617 	ldw	r2,-40(fp)
  8112c8:	1085883a 	add	r2,r2,r2
  8112cc:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  8112d0:	e0bff617 	ldw	r2,-40(fp)
  8112d4:	1007883a 	mov	r3,r2
  8112d8:	e0bffc17 	ldw	r2,-16(fp)
  8112dc:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8112e0:	e03ff515 	stw	zero,-44(fp)
  8112e4:	00002206 	br	811370 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  8112e8:	e0fffc17 	ldw	r3,-16(fp)
  8112ec:	e0bff517 	ldw	r2,-44(fp)
  8112f0:	108018e4 	muli	r2,r2,99
  8112f4:	1885883a 	add	r2,r3,r2
  8112f8:	10802444 	addi	r2,r2,145
  8112fc:	10800003 	ldbu	r2,0(r2)
  811300:	10803fcc 	andi	r2,r2,255
  811304:	1080201c 	xori	r2,r2,128
  811308:	10bfe004 	addi	r2,r2,-128
  81130c:	10800450 	cmplti	r2,r2,17
  811310:	1000141e 	bne	r2,zero,811364 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  811314:	e0fffc17 	ldw	r3,-16(fp)
  811318:	e0bff517 	ldw	r2,-44(fp)
  81131c:	108018e4 	muli	r2,r2,99
  811320:	1885883a 	add	r2,r3,r2
  811324:	10802444 	addi	r2,r2,145
  811328:	10800003 	ldbu	r2,0(r2)
  81132c:	10803fcc 	andi	r2,r2,255
  811330:	1080201c 	xori	r2,r2,128
  811334:	10bfe004 	addi	r2,r2,-128
  811338:	1004923a 	slli	r2,r2,8
  81133c:	e17ff617 	ldw	r5,-40(fp)
  811340:	1009883a 	mov	r4,r2
  811344:	08013d80 	call	8013d8 <__divsi3>
  811348:	1009883a 	mov	r4,r2
  81134c:	e0fffc17 	ldw	r3,-16(fp)
  811350:	e0bff517 	ldw	r2,-44(fp)
  811354:	108018e4 	muli	r2,r2,99
  811358:	1885883a 	add	r2,r3,r2
  81135c:	10802484 	addi	r2,r2,146
  811360:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811364:	e0bff517 	ldw	r2,-44(fp)
  811368:	10800044 	addi	r2,r2,1
  81136c:	e0bff515 	stw	r2,-44(fp)
  811370:	e0bff517 	ldw	r2,-44(fp)
  811374:	10800090 	cmplti	r2,r2,2
  811378:	103fdb1e 	bne	r2,zero,8112e8 <__alt_mem_onchip_mem+0xff8092e8>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  81137c:	e0bffc17 	ldw	r2,-16(fp)
  811380:	10800943 	ldbu	r2,37(r2)
  811384:	10803fcc 	andi	r2,r2,255
  811388:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  81138c:	e13ffc17 	ldw	r4,-16(fp)
  811390:	08109a00 	call	8109a0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  811394:	e0bffc17 	ldw	r2,-16(fp)
  811398:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  81139c:	e0bffc17 	ldw	r2,-16(fp)
  8113a0:	10800943 	ldbu	r2,37(r2)
  8113a4:	10c03fcc 	andi	r3,r2,255
  8113a8:	e0bffb17 	ldw	r2,-20(fp)
  8113ac:	18800426 	beq	r3,r2,8113c0 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  8113b0:	e0bffc17 	ldw	r2,-16(fp)
  8113b4:	00c00044 	movi	r3,1
  8113b8:	10c009c5 	stb	r3,39(r2)
  }
  8113bc:	003fef06 	br	81137c <__alt_mem_onchip_mem+0xff80937c>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  8113c0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  8113c4:	e0bffe17 	ldw	r2,-8(fp)
}
  8113c8:	e037883a 	mov	sp,fp
  8113cc:	dfc00117 	ldw	ra,4(sp)
  8113d0:	df000017 	ldw	fp,0(sp)
  8113d4:	dec00204 	addi	sp,sp,8
  8113d8:	f800283a 	ret

008113dc <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  8113dc:	defffc04 	addi	sp,sp,-16
  8113e0:	dfc00315 	stw	ra,12(sp)
  8113e4:	df000215 	stw	fp,8(sp)
  8113e8:	df000204 	addi	fp,sp,8
  8113ec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  8113f0:	e0bfff17 	ldw	r2,-4(fp)
  8113f4:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  8113f8:	e0bffe17 	ldw	r2,-8(fp)
  8113fc:	10800943 	ldbu	r2,37(r2)
  811400:	10803fcc 	andi	r2,r2,255
  811404:	10c00044 	addi	r3,r2,1
  811408:	e0bffe17 	ldw	r2,-8(fp)
  81140c:	10800983 	ldbu	r2,38(r2)
  811410:	10803fcc 	andi	r2,r2,255
  811414:	18800316 	blt	r3,r2,811424 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  811418:	e0bffe17 	ldw	r2,-8(fp)
  81141c:	10000945 	stb	zero,37(r2)
  811420:	00000606 	br	81143c <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  811424:	e0bffe17 	ldw	r2,-8(fp)
  811428:	10800943 	ldbu	r2,37(r2)
  81142c:	10800044 	addi	r2,r2,1
  811430:	1007883a 	mov	r3,r2
  811434:	e0bffe17 	ldw	r2,-8(fp)
  811438:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  81143c:	e0bffe17 	ldw	r2,-8(fp)
  811440:	10800983 	ldbu	r2,38(r2)
  811444:	10803fcc 	andi	r2,r2,255
  811448:	10000826 	beq	r2,zero,81146c <alt_lcd_16207_timeout+0x90>
  81144c:	e0bffe17 	ldw	r2,-8(fp)
  811450:	108009c3 	ldbu	r2,39(r2)
  811454:	10803fcc 	andi	r2,r2,255
  811458:	1080201c 	xori	r2,r2,128
  81145c:	10bfe004 	addi	r2,r2,-128
  811460:	1000021e 	bne	r2,zero,81146c <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  811464:	e13ffe17 	ldw	r4,-8(fp)
  811468:	08109a00 	call	8109a0 <lcd_repaint_screen>

  return sp->period;
  81146c:	e0bffe17 	ldw	r2,-8(fp)
  811470:	10800717 	ldw	r2,28(r2)
}
  811474:	e037883a 	mov	sp,fp
  811478:	dfc00117 	ldw	ra,4(sp)
  81147c:	df000017 	ldw	fp,0(sp)
  811480:	dec00204 	addi	sp,sp,8
  811484:	f800283a 	ret

00811488 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  811488:	defffc04 	addi	sp,sp,-16
  81148c:	dfc00315 	stw	ra,12(sp)
  811490:	df000215 	stw	fp,8(sp)
  811494:	df000204 	addi	fp,sp,8
  811498:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  81149c:	e0bfff17 	ldw	r2,-4(fp)
  8114a0:	10800017 	ldw	r2,0(r2)
  8114a4:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  8114a8:	e0bfff17 	ldw	r2,-4(fp)
  8114ac:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  8114b0:	010ea604 	movi	r4,15000
  8114b4:	08128200 	call	812820 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8114b8:	e0bffe17 	ldw	r2,-8(fp)
  8114bc:	00c00c04 	movi	r3,48
  8114c0:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  8114c4:	01040104 	movi	r4,4100
  8114c8:	08128200 	call	812820 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8114cc:	e0bffe17 	ldw	r2,-8(fp)
  8114d0:	00c00c04 	movi	r3,48
  8114d4:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  8114d8:	0100fa04 	movi	r4,1000
  8114dc:	08128200 	call	812820 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8114e0:	e0bffe17 	ldw	r2,-8(fp)
  8114e4:	00c00c04 	movi	r3,48
  8114e8:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  8114ec:	01400e04 	movi	r5,56
  8114f0:	e13fff17 	ldw	r4,-4(fp)
  8114f4:	08107400 	call	810740 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  8114f8:	01400204 	movi	r5,8
  8114fc:	e13fff17 	ldw	r4,-4(fp)
  811500:	08107400 	call	810740 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  811504:	e13fff17 	ldw	r4,-4(fp)
  811508:	08108d00 	call	8108d0 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  81150c:	01400184 	movi	r5,6
  811510:	e13fff17 	ldw	r4,-4(fp)
  811514:	08107400 	call	810740 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  811518:	01400304 	movi	r5,12
  81151c:	e13fff17 	ldw	r4,-4(fp)
  811520:	08107400 	call	810740 <lcd_write_command>

  sp->esccount = -1;
  811524:	e0bfff17 	ldw	r2,-4(fp)
  811528:	00ffffc4 	movi	r3,-1
  81152c:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  811530:	e0bfff17 	ldw	r2,-4(fp)
  811534:	10800a04 	addi	r2,r2,40
  811538:	01800204 	movi	r6,8
  81153c:	000b883a 	mov	r5,zero
  811540:	1009883a 	mov	r4,r2
  811544:	0802d600 	call	802d60 <memset>

  sp->scrollpos = 0;
  811548:	e0bfff17 	ldw	r2,-4(fp)
  81154c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  811550:	e0bfff17 	ldw	r2,-4(fp)
  811554:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  811558:	e0bfff17 	ldw	r2,-4(fp)
  81155c:	100009c5 	stb	zero,39(r2)
  811560:	d0a76c17 	ldw	r2,-25168(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  811564:	01400284 	movi	r5,10
  811568:	1009883a 	mov	r4,r2
  81156c:	08014d00 	call	8014d0 <__udivsi3>
  811570:	1007883a 	mov	r3,r2
  811574:	e0bfff17 	ldw	r2,-4(fp)
  811578:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  81157c:	e0bfff17 	ldw	r2,-4(fp)
  811580:	10c00104 	addi	r3,r2,4
  811584:	e0bfff17 	ldw	r2,-4(fp)
  811588:	10800717 	ldw	r2,28(r2)
  81158c:	e1ffff17 	ldw	r7,-4(fp)
  811590:	01802074 	movhi	r6,129
  811594:	3184f704 	addi	r6,r6,5084
  811598:	100b883a 	mov	r5,r2
  81159c:	1809883a 	mov	r4,r3
  8115a0:	080ebec0 	call	80ebec <alt_alarm_start>
}
  8115a4:	0001883a 	nop
  8115a8:	e037883a 	mov	sp,fp
  8115ac:	dfc00117 	ldw	ra,4(sp)
  8115b0:	df000017 	ldw	fp,0(sp)
  8115b4:	dec00204 	addi	sp,sp,8
  8115b8:	f800283a 	ret

008115bc <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8115bc:	defffa04 	addi	sp,sp,-24
  8115c0:	dfc00515 	stw	ra,20(sp)
  8115c4:	df000415 	stw	fp,16(sp)
  8115c8:	df000404 	addi	fp,sp,16
  8115cc:	e13ffd15 	stw	r4,-12(fp)
  8115d0:	e17ffe15 	stw	r5,-8(fp)
  8115d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  8115d8:	e0bffd17 	ldw	r2,-12(fp)
  8115dc:	10800017 	ldw	r2,0(r2)
  8115e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8115e4:	e0bffc17 	ldw	r2,-16(fp)
  8115e8:	10c00a04 	addi	r3,r2,40
  8115ec:	e0bffd17 	ldw	r2,-12(fp)
  8115f0:	10800217 	ldw	r2,8(r2)
  8115f4:	100f883a 	mov	r7,r2
  8115f8:	e1bfff17 	ldw	r6,-4(fp)
  8115fc:	e17ffe17 	ldw	r5,-8(fp)
  811600:	1809883a 	mov	r4,r3
  811604:	0810f040 	call	810f04 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  811608:	e037883a 	mov	sp,fp
  81160c:	dfc00117 	ldw	ra,4(sp)
  811610:	df000017 	ldw	fp,0(sp)
  811614:	dec00204 	addi	sp,sp,8
  811618:	f800283a 	ret

0081161c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  81161c:	defffa04 	addi	sp,sp,-24
  811620:	dfc00515 	stw	ra,20(sp)
  811624:	df000415 	stw	fp,16(sp)
  811628:	df000404 	addi	fp,sp,16
  81162c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  811630:	0007883a 	mov	r3,zero
  811634:	e0bfff17 	ldw	r2,-4(fp)
  811638:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  81163c:	e0bfff17 	ldw	r2,-4(fp)
  811640:	10800104 	addi	r2,r2,4
  811644:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811648:	0005303a 	rdctl	r2,status
  81164c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811650:	e0fffd17 	ldw	r3,-12(fp)
  811654:	00bfff84 	movi	r2,-2
  811658:	1884703a 	and	r2,r3,r2
  81165c:	1001703a 	wrctl	status,r2
  
  return context;
  811660:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  811664:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  811668:	080f9980 	call	80f998 <alt_tick>
  81166c:	e0bffc17 	ldw	r2,-16(fp)
  811670:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811674:	e0bffe17 	ldw	r2,-8(fp)
  811678:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  81167c:	0001883a 	nop
  811680:	e037883a 	mov	sp,fp
  811684:	dfc00117 	ldw	ra,4(sp)
  811688:	df000017 	ldw	fp,0(sp)
  81168c:	dec00204 	addi	sp,sp,8
  811690:	f800283a 	ret

00811694 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  811694:	defff804 	addi	sp,sp,-32
  811698:	dfc00715 	stw	ra,28(sp)
  81169c:	df000615 	stw	fp,24(sp)
  8116a0:	df000604 	addi	fp,sp,24
  8116a4:	e13ffc15 	stw	r4,-16(fp)
  8116a8:	e17ffd15 	stw	r5,-12(fp)
  8116ac:	e1bffe15 	stw	r6,-8(fp)
  8116b0:	e1ffff15 	stw	r7,-4(fp)
  8116b4:	e0bfff17 	ldw	r2,-4(fp)
  8116b8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8116bc:	d0a76c17 	ldw	r2,-25168(gp)
  8116c0:	1000021e 	bne	r2,zero,8116cc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  8116c4:	e0bffb17 	ldw	r2,-20(fp)
  8116c8:	d0a76c15 	stw	r2,-25168(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8116cc:	e0bffc17 	ldw	r2,-16(fp)
  8116d0:	10800104 	addi	r2,r2,4
  8116d4:	00c001c4 	movi	r3,7
  8116d8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8116dc:	d8000015 	stw	zero,0(sp)
  8116e0:	e1fffc17 	ldw	r7,-16(fp)
  8116e4:	01802074 	movhi	r6,129
  8116e8:	31858704 	addi	r6,r6,5660
  8116ec:	e17ffe17 	ldw	r5,-8(fp)
  8116f0:	e13ffd17 	ldw	r4,-12(fp)
  8116f4:	08124400 	call	812440 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8116f8:	0001883a 	nop
  8116fc:	e037883a 	mov	sp,fp
  811700:	dfc00117 	ldw	ra,4(sp)
  811704:	df000017 	ldw	fp,0(sp)
  811708:	dec00204 	addi	sp,sp,8
  81170c:	f800283a 	ret

00811710 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  811710:	defffa04 	addi	sp,sp,-24
  811714:	dfc00515 	stw	ra,20(sp)
  811718:	df000415 	stw	fp,16(sp)
  81171c:	df000404 	addi	fp,sp,16
  811720:	e13ffd15 	stw	r4,-12(fp)
  811724:	e17ffe15 	stw	r5,-8(fp)
  811728:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81172c:	e0bffd17 	ldw	r2,-12(fp)
  811730:	10800017 	ldw	r2,0(r2)
  811734:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  811738:	e0bffc17 	ldw	r2,-16(fp)
  81173c:	10c00a04 	addi	r3,r2,40
  811740:	e0bffd17 	ldw	r2,-12(fp)
  811744:	10800217 	ldw	r2,8(r2)
  811748:	100f883a 	mov	r7,r2
  81174c:	e1bfff17 	ldw	r6,-4(fp)
  811750:	e17ffe17 	ldw	r5,-8(fp)
  811754:	1809883a 	mov	r4,r3
  811758:	0811c240 	call	811c24 <altera_avalon_uart_read>
      fd->fd_flags);
}
  81175c:	e037883a 	mov	sp,fp
  811760:	dfc00117 	ldw	ra,4(sp)
  811764:	df000017 	ldw	fp,0(sp)
  811768:	dec00204 	addi	sp,sp,8
  81176c:	f800283a 	ret

00811770 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811770:	defffa04 	addi	sp,sp,-24
  811774:	dfc00515 	stw	ra,20(sp)
  811778:	df000415 	stw	fp,16(sp)
  81177c:	df000404 	addi	fp,sp,16
  811780:	e13ffd15 	stw	r4,-12(fp)
  811784:	e17ffe15 	stw	r5,-8(fp)
  811788:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81178c:	e0bffd17 	ldw	r2,-12(fp)
  811790:	10800017 	ldw	r2,0(r2)
  811794:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  811798:	e0bffc17 	ldw	r2,-16(fp)
  81179c:	10c00a04 	addi	r3,r2,40
  8117a0:	e0bffd17 	ldw	r2,-12(fp)
  8117a4:	10800217 	ldw	r2,8(r2)
  8117a8:	100f883a 	mov	r7,r2
  8117ac:	e1bfff17 	ldw	r6,-4(fp)
  8117b0:	e17ffe17 	ldw	r5,-8(fp)
  8117b4:	1809883a 	mov	r4,r3
  8117b8:	0811e3c0 	call	811e3c <altera_avalon_uart_write>
      fd->fd_flags);
}
  8117bc:	e037883a 	mov	sp,fp
  8117c0:	dfc00117 	ldw	ra,4(sp)
  8117c4:	df000017 	ldw	fp,0(sp)
  8117c8:	dec00204 	addi	sp,sp,8
  8117cc:	f800283a 	ret

008117d0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8117d0:	defffc04 	addi	sp,sp,-16
  8117d4:	dfc00315 	stw	ra,12(sp)
  8117d8:	df000215 	stw	fp,8(sp)
  8117dc:	df000204 	addi	fp,sp,8
  8117e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8117e4:	e0bfff17 	ldw	r2,-4(fp)
  8117e8:	10800017 	ldw	r2,0(r2)
  8117ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8117f0:	e0bffe17 	ldw	r2,-8(fp)
  8117f4:	10c00a04 	addi	r3,r2,40
  8117f8:	e0bfff17 	ldw	r2,-4(fp)
  8117fc:	10800217 	ldw	r2,8(r2)
  811800:	100b883a 	mov	r5,r2
  811804:	1809883a 	mov	r4,r3
  811808:	0811b940 	call	811b94 <altera_avalon_uart_close>
}
  81180c:	e037883a 	mov	sp,fp
  811810:	dfc00117 	ldw	ra,4(sp)
  811814:	df000017 	ldw	fp,0(sp)
  811818:	dec00204 	addi	sp,sp,8
  81181c:	f800283a 	ret

00811820 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  811820:	defff804 	addi	sp,sp,-32
  811824:	dfc00715 	stw	ra,28(sp)
  811828:	df000615 	stw	fp,24(sp)
  81182c:	df000604 	addi	fp,sp,24
  811830:	e13ffd15 	stw	r4,-12(fp)
  811834:	e17ffe15 	stw	r5,-8(fp)
  811838:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  81183c:	e0bffd17 	ldw	r2,-12(fp)
  811840:	10800017 	ldw	r2,0(r2)
  811844:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  811848:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  81184c:	1000041e 	bne	r2,zero,811860 <altera_avalon_uart_init+0x40>
  811850:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  811854:	1000021e 	bne	r2,zero,811860 <altera_avalon_uart_init+0x40>
  811858:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  81185c:	10000226 	beq	r2,zero,811868 <altera_avalon_uart_init+0x48>
  811860:	00800044 	movi	r2,1
  811864:	00000106 	br	81186c <altera_avalon_uart_init+0x4c>
  811868:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  81186c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  811870:	e0bffc17 	ldw	r2,-16(fp)
  811874:	10000f1e 	bne	r2,zero,8118b4 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  811878:	e0bffd17 	ldw	r2,-12(fp)
  81187c:	00c32004 	movi	r3,3200
  811880:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  811884:	e0bffb17 	ldw	r2,-20(fp)
  811888:	10800304 	addi	r2,r2,12
  81188c:	e0fffd17 	ldw	r3,-12(fp)
  811890:	18c00117 	ldw	r3,4(r3)
  811894:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  811898:	d8000015 	stw	zero,0(sp)
  81189c:	e1fffd17 	ldw	r7,-12(fp)
  8118a0:	01802074 	movhi	r6,129
  8118a4:	31863304 	addi	r6,r6,6348
  8118a8:	e17fff17 	ldw	r5,-4(fp)
  8118ac:	e13ffe17 	ldw	r4,-8(fp)
  8118b0:	08124400 	call	812440 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  8118b4:	0001883a 	nop
  8118b8:	e037883a 	mov	sp,fp
  8118bc:	dfc00117 	ldw	ra,4(sp)
  8118c0:	df000017 	ldw	fp,0(sp)
  8118c4:	dec00204 	addi	sp,sp,8
  8118c8:	f800283a 	ret

008118cc <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8118cc:	defffa04 	addi	sp,sp,-24
  8118d0:	dfc00515 	stw	ra,20(sp)
  8118d4:	df000415 	stw	fp,16(sp)
  8118d8:	df000404 	addi	fp,sp,16
  8118dc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8118e0:	e0bfff17 	ldw	r2,-4(fp)
  8118e4:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  8118e8:	e0bffc17 	ldw	r2,-16(fp)
  8118ec:	10800017 	ldw	r2,0(r2)
  8118f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8118f4:	e0bffd17 	ldw	r2,-12(fp)
  8118f8:	10800204 	addi	r2,r2,8
  8118fc:	10800037 	ldwio	r2,0(r2)
  811900:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  811904:	e0bffd17 	ldw	r2,-12(fp)
  811908:	10800204 	addi	r2,r2,8
  81190c:	0007883a 	mov	r3,zero
  811910:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  811914:	e0bffd17 	ldw	r2,-12(fp)
  811918:	10800204 	addi	r2,r2,8
  81191c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  811920:	e0bffe17 	ldw	r2,-8(fp)
  811924:	1080200c 	andi	r2,r2,128
  811928:	10000326 	beq	r2,zero,811938 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  81192c:	e17ffe17 	ldw	r5,-8(fp)
  811930:	e13ffc17 	ldw	r4,-16(fp)
  811934:	08119680 	call	811968 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  811938:	e0bffe17 	ldw	r2,-8(fp)
  81193c:	1081100c 	andi	r2,r2,1088
  811940:	10000326 	beq	r2,zero,811950 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  811944:	e17ffe17 	ldw	r5,-8(fp)
  811948:	e13ffc17 	ldw	r4,-16(fp)
  81194c:	0811a4c0 	call	811a4c <altera_avalon_uart_txirq>
  }
  

}
  811950:	0001883a 	nop
  811954:	e037883a 	mov	sp,fp
  811958:	dfc00117 	ldw	ra,4(sp)
  81195c:	df000017 	ldw	fp,0(sp)
  811960:	dec00204 	addi	sp,sp,8
  811964:	f800283a 	ret

00811968 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  811968:	defffc04 	addi	sp,sp,-16
  81196c:	df000315 	stw	fp,12(sp)
  811970:	df000304 	addi	fp,sp,12
  811974:	e13ffe15 	stw	r4,-8(fp)
  811978:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  81197c:	e0bfff17 	ldw	r2,-4(fp)
  811980:	108000cc 	andi	r2,r2,3
  811984:	10002c1e 	bne	r2,zero,811a38 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  811988:	e0bffe17 	ldw	r2,-8(fp)
  81198c:	10800317 	ldw	r2,12(r2)
  811990:	e0bffe17 	ldw	r2,-8(fp)
  811994:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  811998:	e0bffe17 	ldw	r2,-8(fp)
  81199c:	10800317 	ldw	r2,12(r2)
  8119a0:	10800044 	addi	r2,r2,1
  8119a4:	10800fcc 	andi	r2,r2,63
  8119a8:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8119ac:	e0bffe17 	ldw	r2,-8(fp)
  8119b0:	10800317 	ldw	r2,12(r2)
  8119b4:	e0fffe17 	ldw	r3,-8(fp)
  8119b8:	18c00017 	ldw	r3,0(r3)
  8119bc:	18c00037 	ldwio	r3,0(r3)
  8119c0:	1809883a 	mov	r4,r3
  8119c4:	e0fffe17 	ldw	r3,-8(fp)
  8119c8:	1885883a 	add	r2,r3,r2
  8119cc:	10800704 	addi	r2,r2,28
  8119d0:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  8119d4:	e0bffe17 	ldw	r2,-8(fp)
  8119d8:	e0fffd17 	ldw	r3,-12(fp)
  8119dc:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8119e0:	e0bffe17 	ldw	r2,-8(fp)
  8119e4:	10800317 	ldw	r2,12(r2)
  8119e8:	10800044 	addi	r2,r2,1
  8119ec:	10800fcc 	andi	r2,r2,63
  8119f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8119f4:	e0bffe17 	ldw	r2,-8(fp)
  8119f8:	10c00217 	ldw	r3,8(r2)
  8119fc:	e0bffd17 	ldw	r2,-12(fp)
  811a00:	18800e1e 	bne	r3,r2,811a3c <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811a04:	e0bffe17 	ldw	r2,-8(fp)
  811a08:	10c00117 	ldw	r3,4(r2)
  811a0c:	00bfdfc4 	movi	r2,-129
  811a10:	1886703a 	and	r3,r3,r2
  811a14:	e0bffe17 	ldw	r2,-8(fp)
  811a18:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  811a1c:	e0bffe17 	ldw	r2,-8(fp)
  811a20:	10800017 	ldw	r2,0(r2)
  811a24:	10800304 	addi	r2,r2,12
  811a28:	e0fffe17 	ldw	r3,-8(fp)
  811a2c:	18c00117 	ldw	r3,4(r3)
  811a30:	10c00035 	stwio	r3,0(r2)
  811a34:	00000106 	br	811a3c <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  811a38:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  811a3c:	e037883a 	mov	sp,fp
  811a40:	df000017 	ldw	fp,0(sp)
  811a44:	dec00104 	addi	sp,sp,4
  811a48:	f800283a 	ret

00811a4c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  811a4c:	defffb04 	addi	sp,sp,-20
  811a50:	df000415 	stw	fp,16(sp)
  811a54:	df000404 	addi	fp,sp,16
  811a58:	e13ffc15 	stw	r4,-16(fp)
  811a5c:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  811a60:	e0bffc17 	ldw	r2,-16(fp)
  811a64:	10c00417 	ldw	r3,16(r2)
  811a68:	e0bffc17 	ldw	r2,-16(fp)
  811a6c:	10800517 	ldw	r2,20(r2)
  811a70:	18803226 	beq	r3,r2,811b3c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  811a74:	e0bffc17 	ldw	r2,-16(fp)
  811a78:	10800617 	ldw	r2,24(r2)
  811a7c:	1080008c 	andi	r2,r2,2
  811a80:	10000326 	beq	r2,zero,811a90 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  811a84:	e0bffd17 	ldw	r2,-12(fp)
  811a88:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  811a8c:	10001d26 	beq	r2,zero,811b04 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  811a90:	e0bffc17 	ldw	r2,-16(fp)
  811a94:	10800417 	ldw	r2,16(r2)
  811a98:	e0bffc17 	ldw	r2,-16(fp)
  811a9c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  811aa0:	e0bffc17 	ldw	r2,-16(fp)
  811aa4:	10800017 	ldw	r2,0(r2)
  811aa8:	10800104 	addi	r2,r2,4
  811aac:	e0fffc17 	ldw	r3,-16(fp)
  811ab0:	18c00417 	ldw	r3,16(r3)
  811ab4:	e13ffc17 	ldw	r4,-16(fp)
  811ab8:	20c7883a 	add	r3,r4,r3
  811abc:	18c01704 	addi	r3,r3,92
  811ac0:	18c00003 	ldbu	r3,0(r3)
  811ac4:	18c03fcc 	andi	r3,r3,255
  811ac8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  811acc:	e0bffc17 	ldw	r2,-16(fp)
  811ad0:	10800417 	ldw	r2,16(r2)
  811ad4:	10800044 	addi	r2,r2,1
  811ad8:	e0fffc17 	ldw	r3,-16(fp)
  811adc:	18800415 	stw	r2,16(r3)
  811ae0:	10c00fcc 	andi	r3,r2,63
  811ae4:	e0bffc17 	ldw	r2,-16(fp)
  811ae8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  811aec:	e0bffc17 	ldw	r2,-16(fp)
  811af0:	10800117 	ldw	r2,4(r2)
  811af4:	10c01014 	ori	r3,r2,64
  811af8:	e0bffc17 	ldw	r2,-16(fp)
  811afc:	10c00115 	stw	r3,4(r2)
  811b00:	00000e06 	br	811b3c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  811b04:	e0bffc17 	ldw	r2,-16(fp)
  811b08:	10800017 	ldw	r2,0(r2)
  811b0c:	10800204 	addi	r2,r2,8
  811b10:	10800037 	ldwio	r2,0(r2)
  811b14:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  811b18:	e0bffd17 	ldw	r2,-12(fp)
  811b1c:	1082000c 	andi	r2,r2,2048
  811b20:	1000061e 	bne	r2,zero,811b3c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  811b24:	e0bffc17 	ldw	r2,-16(fp)
  811b28:	10c00117 	ldw	r3,4(r2)
  811b2c:	00bfefc4 	movi	r2,-65
  811b30:	1886703a 	and	r3,r3,r2
  811b34:	e0bffc17 	ldw	r2,-16(fp)
  811b38:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  811b3c:	e0bffc17 	ldw	r2,-16(fp)
  811b40:	10c00417 	ldw	r3,16(r2)
  811b44:	e0bffc17 	ldw	r2,-16(fp)
  811b48:	10800517 	ldw	r2,20(r2)
  811b4c:	1880061e 	bne	r3,r2,811b68 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  811b50:	e0bffc17 	ldw	r2,-16(fp)
  811b54:	10c00117 	ldw	r3,4(r2)
  811b58:	00beefc4 	movi	r2,-1089
  811b5c:	1886703a 	and	r3,r3,r2
  811b60:	e0bffc17 	ldw	r2,-16(fp)
  811b64:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811b68:	e0bffc17 	ldw	r2,-16(fp)
  811b6c:	10800017 	ldw	r2,0(r2)
  811b70:	10800304 	addi	r2,r2,12
  811b74:	e0fffc17 	ldw	r3,-16(fp)
  811b78:	18c00117 	ldw	r3,4(r3)
  811b7c:	10c00035 	stwio	r3,0(r2)
}
  811b80:	0001883a 	nop
  811b84:	e037883a 	mov	sp,fp
  811b88:	df000017 	ldw	fp,0(sp)
  811b8c:	dec00104 	addi	sp,sp,4
  811b90:	f800283a 	ret

00811b94 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  811b94:	defffd04 	addi	sp,sp,-12
  811b98:	df000215 	stw	fp,8(sp)
  811b9c:	df000204 	addi	fp,sp,8
  811ba0:	e13ffe15 	stw	r4,-8(fp)
  811ba4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  811ba8:	00000506 	br	811bc0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  811bac:	e0bfff17 	ldw	r2,-4(fp)
  811bb0:	1090000c 	andi	r2,r2,16384
  811bb4:	10000226 	beq	r2,zero,811bc0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  811bb8:	00bffd44 	movi	r2,-11
  811bbc:	00000606 	br	811bd8 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  811bc0:	e0bffe17 	ldw	r2,-8(fp)
  811bc4:	10c00417 	ldw	r3,16(r2)
  811bc8:	e0bffe17 	ldw	r2,-8(fp)
  811bcc:	10800517 	ldw	r2,20(r2)
  811bd0:	18bff61e 	bne	r3,r2,811bac <__alt_mem_onchip_mem+0xff809bac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811bd4:	0005883a 	mov	r2,zero
}
  811bd8:	e037883a 	mov	sp,fp
  811bdc:	df000017 	ldw	fp,0(sp)
  811be0:	dec00104 	addi	sp,sp,4
  811be4:	f800283a 	ret

00811be8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811be8:	defffe04 	addi	sp,sp,-8
  811bec:	dfc00115 	stw	ra,4(sp)
  811bf0:	df000015 	stw	fp,0(sp)
  811bf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811bf8:	d0a00c17 	ldw	r2,-32720(gp)
  811bfc:	10000326 	beq	r2,zero,811c0c <alt_get_errno+0x24>
  811c00:	d0a00c17 	ldw	r2,-32720(gp)
  811c04:	103ee83a 	callr	r2
  811c08:	00000106 	br	811c10 <alt_get_errno+0x28>
  811c0c:	d0a76104 	addi	r2,gp,-25212
}
  811c10:	e037883a 	mov	sp,fp
  811c14:	dfc00117 	ldw	ra,4(sp)
  811c18:	df000017 	ldw	fp,0(sp)
  811c1c:	dec00204 	addi	sp,sp,8
  811c20:	f800283a 	ret

00811c24 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  811c24:	defff204 	addi	sp,sp,-56
  811c28:	dfc00d15 	stw	ra,52(sp)
  811c2c:	df000c15 	stw	fp,48(sp)
  811c30:	df000c04 	addi	fp,sp,48
  811c34:	e13ffc15 	stw	r4,-16(fp)
  811c38:	e17ffd15 	stw	r5,-12(fp)
  811c3c:	e1bffe15 	stw	r6,-8(fp)
  811c40:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  811c44:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  811c48:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  811c4c:	e0bfff17 	ldw	r2,-4(fp)
  811c50:	1090000c 	andi	r2,r2,16384
  811c54:	1005003a 	cmpeq	r2,r2,zero
  811c58:	10803fcc 	andi	r2,r2,255
  811c5c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  811c60:	00001306 	br	811cb0 <altera_avalon_uart_read+0x8c>
    {
      count++;
  811c64:	e0bff517 	ldw	r2,-44(fp)
  811c68:	10800044 	addi	r2,r2,1
  811c6c:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  811c70:	e0bffd17 	ldw	r2,-12(fp)
  811c74:	10c00044 	addi	r3,r2,1
  811c78:	e0fffd15 	stw	r3,-12(fp)
  811c7c:	e0fffc17 	ldw	r3,-16(fp)
  811c80:	18c00217 	ldw	r3,8(r3)
  811c84:	e13ffc17 	ldw	r4,-16(fp)
  811c88:	20c7883a 	add	r3,r4,r3
  811c8c:	18c00704 	addi	r3,r3,28
  811c90:	18c00003 	ldbu	r3,0(r3)
  811c94:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  811c98:	e0bffc17 	ldw	r2,-16(fp)
  811c9c:	10800217 	ldw	r2,8(r2)
  811ca0:	10800044 	addi	r2,r2,1
  811ca4:	10c00fcc 	andi	r3,r2,63
  811ca8:	e0bffc17 	ldw	r2,-16(fp)
  811cac:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  811cb0:	e0fff517 	ldw	r3,-44(fp)
  811cb4:	e0bffe17 	ldw	r2,-8(fp)
  811cb8:	1880050e 	bge	r3,r2,811cd0 <altera_avalon_uart_read+0xac>
  811cbc:	e0bffc17 	ldw	r2,-16(fp)
  811cc0:	10c00217 	ldw	r3,8(r2)
  811cc4:	e0bffc17 	ldw	r2,-16(fp)
  811cc8:	10800317 	ldw	r2,12(r2)
  811ccc:	18bfe51e 	bne	r3,r2,811c64 <__alt_mem_onchip_mem+0xff809c64>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  811cd0:	e0bff517 	ldw	r2,-44(fp)
  811cd4:	1000251e 	bne	r2,zero,811d6c <altera_avalon_uart_read+0x148>
  811cd8:	e0bffc17 	ldw	r2,-16(fp)
  811cdc:	10c00217 	ldw	r3,8(r2)
  811ce0:	e0bffc17 	ldw	r2,-16(fp)
  811ce4:	10800317 	ldw	r2,12(r2)
  811ce8:	1880201e 	bne	r3,r2,811d6c <altera_avalon_uart_read+0x148>
    {
      if (!block)
  811cec:	e0bff617 	ldw	r2,-40(fp)
  811cf0:	1000071e 	bne	r2,zero,811d10 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  811cf4:	0811be80 	call	811be8 <alt_get_errno>
  811cf8:	1007883a 	mov	r3,r2
  811cfc:	008002c4 	movi	r2,11
  811d00:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  811d04:	00800044 	movi	r2,1
  811d08:	e0bff405 	stb	r2,-48(fp)
        break;
  811d0c:	00001b06 	br	811d7c <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811d10:	0005303a 	rdctl	r2,status
  811d14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811d18:	e0fff917 	ldw	r3,-28(fp)
  811d1c:	00bfff84 	movi	r2,-2
  811d20:	1884703a 	and	r2,r3,r2
  811d24:	1001703a 	wrctl	status,r2
  
  return context;
  811d28:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  811d2c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811d30:	e0bffc17 	ldw	r2,-16(fp)
  811d34:	10800117 	ldw	r2,4(r2)
  811d38:	10c02014 	ori	r3,r2,128
  811d3c:	e0bffc17 	ldw	r2,-16(fp)
  811d40:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811d44:	e0bffc17 	ldw	r2,-16(fp)
  811d48:	10800017 	ldw	r2,0(r2)
  811d4c:	10800304 	addi	r2,r2,12
  811d50:	e0fffc17 	ldw	r3,-16(fp)
  811d54:	18c00117 	ldw	r3,4(r3)
  811d58:	10c00035 	stwio	r3,0(r2)
  811d5c:	e0bff817 	ldw	r2,-32(fp)
  811d60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811d64:	e0bffa17 	ldw	r2,-24(fp)
  811d68:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  811d6c:	e0bff517 	ldw	r2,-44(fp)
  811d70:	1000021e 	bne	r2,zero,811d7c <altera_avalon_uart_read+0x158>
  811d74:	e0bffe17 	ldw	r2,-8(fp)
  811d78:	103fcd1e 	bne	r2,zero,811cb0 <__alt_mem_onchip_mem+0xff809cb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811d7c:	0005303a 	rdctl	r2,status
  811d80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811d84:	e0fffb17 	ldw	r3,-20(fp)
  811d88:	00bfff84 	movi	r2,-2
  811d8c:	1884703a 	and	r2,r3,r2
  811d90:	1001703a 	wrctl	status,r2
  
  return context;
  811d94:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  811d98:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811d9c:	e0bffc17 	ldw	r2,-16(fp)
  811da0:	10800117 	ldw	r2,4(r2)
  811da4:	10c02014 	ori	r3,r2,128
  811da8:	e0bffc17 	ldw	r2,-16(fp)
  811dac:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811db0:	e0bffc17 	ldw	r2,-16(fp)
  811db4:	10800017 	ldw	r2,0(r2)
  811db8:	10800304 	addi	r2,r2,12
  811dbc:	e0fffc17 	ldw	r3,-16(fp)
  811dc0:	18c00117 	ldw	r3,4(r3)
  811dc4:	10c00035 	stwio	r3,0(r2)
  811dc8:	e0bff817 	ldw	r2,-32(fp)
  811dcc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811dd0:	e0bff717 	ldw	r2,-36(fp)
  811dd4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  811dd8:	e0bff403 	ldbu	r2,-48(fp)
  811ddc:	10000226 	beq	r2,zero,811de8 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  811de0:	00bffd44 	movi	r2,-11
  811de4:	00000106 	br	811dec <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  811de8:	e0bff517 	ldw	r2,-44(fp)
  }
}
  811dec:	e037883a 	mov	sp,fp
  811df0:	dfc00117 	ldw	ra,4(sp)
  811df4:	df000017 	ldw	fp,0(sp)
  811df8:	dec00204 	addi	sp,sp,8
  811dfc:	f800283a 	ret

00811e00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811e00:	defffe04 	addi	sp,sp,-8
  811e04:	dfc00115 	stw	ra,4(sp)
  811e08:	df000015 	stw	fp,0(sp)
  811e0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811e10:	d0a00c17 	ldw	r2,-32720(gp)
  811e14:	10000326 	beq	r2,zero,811e24 <alt_get_errno+0x24>
  811e18:	d0a00c17 	ldw	r2,-32720(gp)
  811e1c:	103ee83a 	callr	r2
  811e20:	00000106 	br	811e28 <alt_get_errno+0x28>
  811e24:	d0a76104 	addi	r2,gp,-25212
}
  811e28:	e037883a 	mov	sp,fp
  811e2c:	dfc00117 	ldw	ra,4(sp)
  811e30:	df000017 	ldw	fp,0(sp)
  811e34:	dec00204 	addi	sp,sp,8
  811e38:	f800283a 	ret

00811e3c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  811e3c:	defff204 	addi	sp,sp,-56
  811e40:	dfc00d15 	stw	ra,52(sp)
  811e44:	df000c15 	stw	fp,48(sp)
  811e48:	df000c04 	addi	fp,sp,48
  811e4c:	e13ffc15 	stw	r4,-16(fp)
  811e50:	e17ffd15 	stw	r5,-12(fp)
  811e54:	e1bffe15 	stw	r6,-8(fp)
  811e58:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  811e5c:	e0bffe17 	ldw	r2,-8(fp)
  811e60:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  811e64:	e0bfff17 	ldw	r2,-4(fp)
  811e68:	1090000c 	andi	r2,r2,16384
  811e6c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  811e70:	00003c06 	br	811f64 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  811e74:	e0bffc17 	ldw	r2,-16(fp)
  811e78:	10800517 	ldw	r2,20(r2)
  811e7c:	10800044 	addi	r2,r2,1
  811e80:	10800fcc 	andi	r2,r2,63
  811e84:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  811e88:	e0bffc17 	ldw	r2,-16(fp)
  811e8c:	10c00417 	ldw	r3,16(r2)
  811e90:	e0bff717 	ldw	r2,-36(fp)
  811e94:	1880221e 	bne	r3,r2,811f20 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  811e98:	e0bff517 	ldw	r2,-44(fp)
  811e9c:	10000526 	beq	r2,zero,811eb4 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  811ea0:	0811e000 	call	811e00 <alt_get_errno>
  811ea4:	1007883a 	mov	r3,r2
  811ea8:	008002c4 	movi	r2,11
  811eac:	18800015 	stw	r2,0(r3)
        break;
  811eb0:	00002e06 	br	811f6c <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811eb4:	0005303a 	rdctl	r2,status
  811eb8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811ebc:	e0fff917 	ldw	r3,-28(fp)
  811ec0:	00bfff84 	movi	r2,-2
  811ec4:	1884703a 	and	r2,r3,r2
  811ec8:	1001703a 	wrctl	status,r2
  
  return context;
  811ecc:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  811ed0:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  811ed4:	e0bffc17 	ldw	r2,-16(fp)
  811ed8:	10800117 	ldw	r2,4(r2)
  811edc:	10c11014 	ori	r3,r2,1088
  811ee0:	e0bffc17 	ldw	r2,-16(fp)
  811ee4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811ee8:	e0bffc17 	ldw	r2,-16(fp)
  811eec:	10800017 	ldw	r2,0(r2)
  811ef0:	10800304 	addi	r2,r2,12
  811ef4:	e0fffc17 	ldw	r3,-16(fp)
  811ef8:	18c00117 	ldw	r3,4(r3)
  811efc:	10c00035 	stwio	r3,0(r2)
  811f00:	e0bff817 	ldw	r2,-32(fp)
  811f04:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811f08:	e0bff617 	ldw	r2,-40(fp)
  811f0c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  811f10:	e0bffc17 	ldw	r2,-16(fp)
  811f14:	10c00417 	ldw	r3,16(r2)
  811f18:	e0bff717 	ldw	r2,-36(fp)
  811f1c:	18bffc26 	beq	r3,r2,811f10 <__alt_mem_onchip_mem+0xff809f10>
      }
    }

    count--;
  811f20:	e0bff417 	ldw	r2,-48(fp)
  811f24:	10bfffc4 	addi	r2,r2,-1
  811f28:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  811f2c:	e0bffc17 	ldw	r2,-16(fp)
  811f30:	10c00517 	ldw	r3,20(r2)
  811f34:	e0bffd17 	ldw	r2,-12(fp)
  811f38:	11000044 	addi	r4,r2,1
  811f3c:	e13ffd15 	stw	r4,-12(fp)
  811f40:	10800003 	ldbu	r2,0(r2)
  811f44:	1009883a 	mov	r4,r2
  811f48:	e0bffc17 	ldw	r2,-16(fp)
  811f4c:	10c5883a 	add	r2,r2,r3
  811f50:	10801704 	addi	r2,r2,92
  811f54:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  811f58:	e0bffc17 	ldw	r2,-16(fp)
  811f5c:	e0fff717 	ldw	r3,-36(fp)
  811f60:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  811f64:	e0bff417 	ldw	r2,-48(fp)
  811f68:	103fc21e 	bne	r2,zero,811e74 <__alt_mem_onchip_mem+0xff809e74>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811f6c:	0005303a 	rdctl	r2,status
  811f70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811f74:	e0fffb17 	ldw	r3,-20(fp)
  811f78:	00bfff84 	movi	r2,-2
  811f7c:	1884703a 	and	r2,r3,r2
  811f80:	1001703a 	wrctl	status,r2
  
  return context;
  811f84:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  811f88:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  811f8c:	e0bffc17 	ldw	r2,-16(fp)
  811f90:	10800117 	ldw	r2,4(r2)
  811f94:	10c11014 	ori	r3,r2,1088
  811f98:	e0bffc17 	ldw	r2,-16(fp)
  811f9c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811fa0:	e0bffc17 	ldw	r2,-16(fp)
  811fa4:	10800017 	ldw	r2,0(r2)
  811fa8:	10800304 	addi	r2,r2,12
  811fac:	e0fffc17 	ldw	r3,-16(fp)
  811fb0:	18c00117 	ldw	r3,4(r3)
  811fb4:	10c00035 	stwio	r3,0(r2)
  811fb8:	e0bff817 	ldw	r2,-32(fp)
  811fbc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811fc0:	e0bffa17 	ldw	r2,-24(fp)
  811fc4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  811fc8:	e0fffe17 	ldw	r3,-8(fp)
  811fcc:	e0bff417 	ldw	r2,-48(fp)
  811fd0:	1885c83a 	sub	r2,r3,r2
}
  811fd4:	e037883a 	mov	sp,fp
  811fd8:	dfc00117 	ldw	ra,4(sp)
  811fdc:	df000017 	ldw	fp,0(sp)
  811fe0:	dec00204 	addi	sp,sp,8
  811fe4:	f800283a 	ret

00811fe8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  811fe8:	defffe04 	addi	sp,sp,-8
  811fec:	df000115 	stw	fp,4(sp)
  811ff0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  811ff4:	e03fff15 	stw	zero,-4(fp)
  811ff8:	00000506 	br	812010 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  811ffc:	e0bfff17 	ldw	r2,-4(fp)
  812000:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  812004:	e0bfff17 	ldw	r2,-4(fp)
  812008:	10800804 	addi	r2,r2,32
  81200c:	e0bfff15 	stw	r2,-4(fp)
  812010:	e0bfff17 	ldw	r2,-4(fp)
  812014:	10820030 	cmpltui	r2,r2,2048
  812018:	103ff81e 	bne	r2,zero,811ffc <__alt_mem_onchip_mem+0xff809ffc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81201c:	0001883a 	nop
  812020:	e037883a 	mov	sp,fp
  812024:	df000017 	ldw	fp,0(sp)
  812028:	dec00104 	addi	sp,sp,4
  81202c:	f800283a 	ret

00812030 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812030:	defffe04 	addi	sp,sp,-8
  812034:	dfc00115 	stw	ra,4(sp)
  812038:	df000015 	stw	fp,0(sp)
  81203c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812040:	d0a00c17 	ldw	r2,-32720(gp)
  812044:	10000326 	beq	r2,zero,812054 <alt_get_errno+0x24>
  812048:	d0a00c17 	ldw	r2,-32720(gp)
  81204c:	103ee83a 	callr	r2
  812050:	00000106 	br	812058 <alt_get_errno+0x28>
  812054:	d0a76104 	addi	r2,gp,-25212
}
  812058:	e037883a 	mov	sp,fp
  81205c:	dfc00117 	ldw	ra,4(sp)
  812060:	df000017 	ldw	fp,0(sp)
  812064:	dec00204 	addi	sp,sp,8
  812068:	f800283a 	ret

0081206c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81206c:	defffa04 	addi	sp,sp,-24
  812070:	dfc00515 	stw	ra,20(sp)
  812074:	df000415 	stw	fp,16(sp)
  812078:	df000404 	addi	fp,sp,16
  81207c:	e13ffe15 	stw	r4,-8(fp)
  812080:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  812084:	e0bffe17 	ldw	r2,-8(fp)
  812088:	10000326 	beq	r2,zero,812098 <alt_dev_llist_insert+0x2c>
  81208c:	e0bffe17 	ldw	r2,-8(fp)
  812090:	10800217 	ldw	r2,8(r2)
  812094:	1000061e 	bne	r2,zero,8120b0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  812098:	08120300 	call	812030 <alt_get_errno>
  81209c:	1007883a 	mov	r3,r2
  8120a0:	00800584 	movi	r2,22
  8120a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8120a8:	00bffa84 	movi	r2,-22
  8120ac:	00001306 	br	8120fc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8120b0:	e0bffe17 	ldw	r2,-8(fp)
  8120b4:	e0ffff17 	ldw	r3,-4(fp)
  8120b8:	e0fffc15 	stw	r3,-16(fp)
  8120bc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8120c0:	e0bffd17 	ldw	r2,-12(fp)
  8120c4:	e0fffc17 	ldw	r3,-16(fp)
  8120c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8120cc:	e0bffc17 	ldw	r2,-16(fp)
  8120d0:	10c00017 	ldw	r3,0(r2)
  8120d4:	e0bffd17 	ldw	r2,-12(fp)
  8120d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8120dc:	e0bffc17 	ldw	r2,-16(fp)
  8120e0:	10800017 	ldw	r2,0(r2)
  8120e4:	e0fffd17 	ldw	r3,-12(fp)
  8120e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8120ec:	e0bffc17 	ldw	r2,-16(fp)
  8120f0:	e0fffd17 	ldw	r3,-12(fp)
  8120f4:	10c00015 	stw	r3,0(r2)

  return 0;  
  8120f8:	0005883a 	mov	r2,zero
}
  8120fc:	e037883a 	mov	sp,fp
  812100:	dfc00117 	ldw	ra,4(sp)
  812104:	df000017 	ldw	fp,0(sp)
  812108:	dec00204 	addi	sp,sp,8
  81210c:	f800283a 	ret

00812110 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  812110:	defffd04 	addi	sp,sp,-12
  812114:	dfc00215 	stw	ra,8(sp)
  812118:	df000115 	stw	fp,4(sp)
  81211c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812120:	00802074 	movhi	r2,129
  812124:	108ba204 	addi	r2,r2,11912
  812128:	e0bfff15 	stw	r2,-4(fp)
  81212c:	00000606 	br	812148 <_do_ctors+0x38>
        (*ctor) (); 
  812130:	e0bfff17 	ldw	r2,-4(fp)
  812134:	10800017 	ldw	r2,0(r2)
  812138:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81213c:	e0bfff17 	ldw	r2,-4(fp)
  812140:	10bfff04 	addi	r2,r2,-4
  812144:	e0bfff15 	stw	r2,-4(fp)
  812148:	e0ffff17 	ldw	r3,-4(fp)
  81214c:	00802074 	movhi	r2,129
  812150:	108ba304 	addi	r2,r2,11916
  812154:	18bff62e 	bgeu	r3,r2,812130 <__alt_mem_onchip_mem+0xff80a130>
        (*ctor) (); 
}
  812158:	0001883a 	nop
  81215c:	e037883a 	mov	sp,fp
  812160:	dfc00117 	ldw	ra,4(sp)
  812164:	df000017 	ldw	fp,0(sp)
  812168:	dec00204 	addi	sp,sp,8
  81216c:	f800283a 	ret

00812170 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  812170:	defffd04 	addi	sp,sp,-12
  812174:	dfc00215 	stw	ra,8(sp)
  812178:	df000115 	stw	fp,4(sp)
  81217c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812180:	00802074 	movhi	r2,129
  812184:	108ba204 	addi	r2,r2,11912
  812188:	e0bfff15 	stw	r2,-4(fp)
  81218c:	00000606 	br	8121a8 <_do_dtors+0x38>
        (*dtor) (); 
  812190:	e0bfff17 	ldw	r2,-4(fp)
  812194:	10800017 	ldw	r2,0(r2)
  812198:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81219c:	e0bfff17 	ldw	r2,-4(fp)
  8121a0:	10bfff04 	addi	r2,r2,-4
  8121a4:	e0bfff15 	stw	r2,-4(fp)
  8121a8:	e0ffff17 	ldw	r3,-4(fp)
  8121ac:	00802074 	movhi	r2,129
  8121b0:	108ba304 	addi	r2,r2,11916
  8121b4:	18bff62e 	bgeu	r3,r2,812190 <__alt_mem_onchip_mem+0xff80a190>
        (*dtor) (); 
}
  8121b8:	0001883a 	nop
  8121bc:	e037883a 	mov	sp,fp
  8121c0:	dfc00117 	ldw	ra,4(sp)
  8121c4:	df000017 	ldw	fp,0(sp)
  8121c8:	dec00204 	addi	sp,sp,8
  8121cc:	f800283a 	ret

008121d0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8121d0:	defffa04 	addi	sp,sp,-24
  8121d4:	dfc00515 	stw	ra,20(sp)
  8121d8:	df000415 	stw	fp,16(sp)
  8121dc:	df000404 	addi	fp,sp,16
  8121e0:	e13ffe15 	stw	r4,-8(fp)
  8121e4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8121e8:	e0bfff17 	ldw	r2,-4(fp)
  8121ec:	10800017 	ldw	r2,0(r2)
  8121f0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8121f4:	e13ffe17 	ldw	r4,-8(fp)
  8121f8:	0809f400 	call	809f40 <strlen>
  8121fc:	10800044 	addi	r2,r2,1
  812200:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812204:	00000d06 	br	81223c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  812208:	e0bffc17 	ldw	r2,-16(fp)
  81220c:	10800217 	ldw	r2,8(r2)
  812210:	e0fffd17 	ldw	r3,-12(fp)
  812214:	180d883a 	mov	r6,r3
  812218:	e17ffe17 	ldw	r5,-8(fp)
  81221c:	1009883a 	mov	r4,r2
  812220:	0812b440 	call	812b44 <memcmp>
  812224:	1000021e 	bne	r2,zero,812230 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  812228:	e0bffc17 	ldw	r2,-16(fp)
  81222c:	00000706 	br	81224c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  812230:	e0bffc17 	ldw	r2,-16(fp)
  812234:	10800017 	ldw	r2,0(r2)
  812238:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81223c:	e0fffc17 	ldw	r3,-16(fp)
  812240:	e0bfff17 	ldw	r2,-4(fp)
  812244:	18bff01e 	bne	r3,r2,812208 <__alt_mem_onchip_mem+0xff80a208>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  812248:	0005883a 	mov	r2,zero
}
  81224c:	e037883a 	mov	sp,fp
  812250:	dfc00117 	ldw	ra,4(sp)
  812254:	df000017 	ldw	fp,0(sp)
  812258:	dec00204 	addi	sp,sp,8
  81225c:	f800283a 	ret

00812260 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  812260:	defffb04 	addi	sp,sp,-20
  812264:	dfc00415 	stw	ra,16(sp)
  812268:	df000315 	stw	fp,12(sp)
  81226c:	df000304 	addi	fp,sp,12
  812270:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  812274:	d0a00717 	ldw	r2,-32740(gp)
  812278:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81227c:	00003106 	br	812344 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  812280:	e0bffd17 	ldw	r2,-12(fp)
  812284:	10800217 	ldw	r2,8(r2)
  812288:	1009883a 	mov	r4,r2
  81228c:	0809f400 	call	809f40 <strlen>
  812290:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  812294:	e0bffd17 	ldw	r2,-12(fp)
  812298:	10c00217 	ldw	r3,8(r2)
  81229c:	e0bffe17 	ldw	r2,-8(fp)
  8122a0:	10bfffc4 	addi	r2,r2,-1
  8122a4:	1885883a 	add	r2,r3,r2
  8122a8:	10800003 	ldbu	r2,0(r2)
  8122ac:	10803fcc 	andi	r2,r2,255
  8122b0:	1080201c 	xori	r2,r2,128
  8122b4:	10bfe004 	addi	r2,r2,-128
  8122b8:	10800bd8 	cmpnei	r2,r2,47
  8122bc:	1000031e 	bne	r2,zero,8122cc <alt_find_file+0x6c>
    {
      len -= 1;
  8122c0:	e0bffe17 	ldw	r2,-8(fp)
  8122c4:	10bfffc4 	addi	r2,r2,-1
  8122c8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8122cc:	e0bffe17 	ldw	r2,-8(fp)
  8122d0:	e0ffff17 	ldw	r3,-4(fp)
  8122d4:	1885883a 	add	r2,r3,r2
  8122d8:	10800003 	ldbu	r2,0(r2)
  8122dc:	10803fcc 	andi	r2,r2,255
  8122e0:	1080201c 	xori	r2,r2,128
  8122e4:	10bfe004 	addi	r2,r2,-128
  8122e8:	10800be0 	cmpeqi	r2,r2,47
  8122ec:	1000081e 	bne	r2,zero,812310 <alt_find_file+0xb0>
  8122f0:	e0bffe17 	ldw	r2,-8(fp)
  8122f4:	e0ffff17 	ldw	r3,-4(fp)
  8122f8:	1885883a 	add	r2,r3,r2
  8122fc:	10800003 	ldbu	r2,0(r2)
  812300:	10803fcc 	andi	r2,r2,255
  812304:	1080201c 	xori	r2,r2,128
  812308:	10bfe004 	addi	r2,r2,-128
  81230c:	10000a1e 	bne	r2,zero,812338 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  812310:	e0bffd17 	ldw	r2,-12(fp)
  812314:	10800217 	ldw	r2,8(r2)
  812318:	e0fffe17 	ldw	r3,-8(fp)
  81231c:	180d883a 	mov	r6,r3
  812320:	e17fff17 	ldw	r5,-4(fp)
  812324:	1009883a 	mov	r4,r2
  812328:	0812b440 	call	812b44 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81232c:	1000021e 	bne	r2,zero,812338 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  812330:	e0bffd17 	ldw	r2,-12(fp)
  812334:	00000706 	br	812354 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  812338:	e0bffd17 	ldw	r2,-12(fp)
  81233c:	10800017 	ldw	r2,0(r2)
  812340:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  812344:	e0fffd17 	ldw	r3,-12(fp)
  812348:	d0a00704 	addi	r2,gp,-32740
  81234c:	18bfcc1e 	bne	r3,r2,812280 <__alt_mem_onchip_mem+0xff80a280>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  812350:	0005883a 	mov	r2,zero
}
  812354:	e037883a 	mov	sp,fp
  812358:	dfc00117 	ldw	ra,4(sp)
  81235c:	df000017 	ldw	fp,0(sp)
  812360:	dec00204 	addi	sp,sp,8
  812364:	f800283a 	ret

00812368 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  812368:	defffc04 	addi	sp,sp,-16
  81236c:	df000315 	stw	fp,12(sp)
  812370:	df000304 	addi	fp,sp,12
  812374:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  812378:	00bffa04 	movi	r2,-24
  81237c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  812380:	e03ffd15 	stw	zero,-12(fp)
  812384:	00001906 	br	8123ec <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  812388:	00802074 	movhi	r2,129
  81238c:	108f8f04 	addi	r2,r2,15932
  812390:	e0fffd17 	ldw	r3,-12(fp)
  812394:	18c00324 	muli	r3,r3,12
  812398:	10c5883a 	add	r2,r2,r3
  81239c:	10800017 	ldw	r2,0(r2)
  8123a0:	10000f1e 	bne	r2,zero,8123e0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  8123a4:	00802074 	movhi	r2,129
  8123a8:	108f8f04 	addi	r2,r2,15932
  8123ac:	e0fffd17 	ldw	r3,-12(fp)
  8123b0:	18c00324 	muli	r3,r3,12
  8123b4:	10c5883a 	add	r2,r2,r3
  8123b8:	e0ffff17 	ldw	r3,-4(fp)
  8123bc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8123c0:	d0e00b17 	ldw	r3,-32724(gp)
  8123c4:	e0bffd17 	ldw	r2,-12(fp)
  8123c8:	1880020e 	bge	r3,r2,8123d4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  8123cc:	e0bffd17 	ldw	r2,-12(fp)
  8123d0:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
  8123d4:	e0bffd17 	ldw	r2,-12(fp)
  8123d8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  8123dc:	00000606 	br	8123f8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8123e0:	e0bffd17 	ldw	r2,-12(fp)
  8123e4:	10800044 	addi	r2,r2,1
  8123e8:	e0bffd15 	stw	r2,-12(fp)
  8123ec:	e0bffd17 	ldw	r2,-12(fp)
  8123f0:	10800810 	cmplti	r2,r2,32
  8123f4:	103fe41e 	bne	r2,zero,812388 <__alt_mem_onchip_mem+0xff80a388>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8123f8:	e0bffe17 	ldw	r2,-8(fp)
}
  8123fc:	e037883a 	mov	sp,fp
  812400:	df000017 	ldw	fp,0(sp)
  812404:	dec00104 	addi	sp,sp,4
  812408:	f800283a 	ret

0081240c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81240c:	defffe04 	addi	sp,sp,-8
  812410:	dfc00115 	stw	ra,4(sp)
  812414:	df000015 	stw	fp,0(sp)
  812418:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81241c:	01440004 	movi	r5,4096
  812420:	0009883a 	mov	r4,zero
  812424:	08129cc0 	call	8129cc <alt_icache_flush>
#endif
}
  812428:	0001883a 	nop
  81242c:	e037883a 	mov	sp,fp
  812430:	dfc00117 	ldw	ra,4(sp)
  812434:	df000017 	ldw	fp,0(sp)
  812438:	dec00204 	addi	sp,sp,8
  81243c:	f800283a 	ret

00812440 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  812440:	defff904 	addi	sp,sp,-28
  812444:	dfc00615 	stw	ra,24(sp)
  812448:	df000515 	stw	fp,20(sp)
  81244c:	df000504 	addi	fp,sp,20
  812450:	e13ffc15 	stw	r4,-16(fp)
  812454:	e17ffd15 	stw	r5,-12(fp)
  812458:	e1bffe15 	stw	r6,-8(fp)
  81245c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  812460:	e0800217 	ldw	r2,8(fp)
  812464:	d8800015 	stw	r2,0(sp)
  812468:	e1ffff17 	ldw	r7,-4(fp)
  81246c:	e1bffe17 	ldw	r6,-8(fp)
  812470:	e17ffd17 	ldw	r5,-12(fp)
  812474:	e13ffc17 	ldw	r4,-16(fp)
  812478:	08125f00 	call	8125f0 <alt_iic_isr_register>
}  
  81247c:	e037883a 	mov	sp,fp
  812480:	dfc00117 	ldw	ra,4(sp)
  812484:	df000017 	ldw	fp,0(sp)
  812488:	dec00204 	addi	sp,sp,8
  81248c:	f800283a 	ret

00812490 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  812490:	defff904 	addi	sp,sp,-28
  812494:	df000615 	stw	fp,24(sp)
  812498:	df000604 	addi	fp,sp,24
  81249c:	e13ffe15 	stw	r4,-8(fp)
  8124a0:	e17fff15 	stw	r5,-4(fp)
  8124a4:	e0bfff17 	ldw	r2,-4(fp)
  8124a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8124ac:	0005303a 	rdctl	r2,status
  8124b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8124b4:	e0fffb17 	ldw	r3,-20(fp)
  8124b8:	00bfff84 	movi	r2,-2
  8124bc:	1884703a 	and	r2,r3,r2
  8124c0:	1001703a 	wrctl	status,r2
  
  return context;
  8124c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8124c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  8124cc:	00c00044 	movi	r3,1
  8124d0:	e0bffa17 	ldw	r2,-24(fp)
  8124d4:	1884983a 	sll	r2,r3,r2
  8124d8:	1007883a 	mov	r3,r2
  8124dc:	d0a76817 	ldw	r2,-25184(gp)
  8124e0:	1884b03a 	or	r2,r3,r2
  8124e4:	d0a76815 	stw	r2,-25184(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8124e8:	d0a76817 	ldw	r2,-25184(gp)
  8124ec:	100170fa 	wrctl	ienable,r2
  8124f0:	e0bffc17 	ldw	r2,-16(fp)
  8124f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8124f8:	e0bffd17 	ldw	r2,-12(fp)
  8124fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  812500:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  812504:	0001883a 	nop
}
  812508:	e037883a 	mov	sp,fp
  81250c:	df000017 	ldw	fp,0(sp)
  812510:	dec00104 	addi	sp,sp,4
  812514:	f800283a 	ret

00812518 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  812518:	defff904 	addi	sp,sp,-28
  81251c:	df000615 	stw	fp,24(sp)
  812520:	df000604 	addi	fp,sp,24
  812524:	e13ffe15 	stw	r4,-8(fp)
  812528:	e17fff15 	stw	r5,-4(fp)
  81252c:	e0bfff17 	ldw	r2,-4(fp)
  812530:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812534:	0005303a 	rdctl	r2,status
  812538:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81253c:	e0fffb17 	ldw	r3,-20(fp)
  812540:	00bfff84 	movi	r2,-2
  812544:	1884703a 	and	r2,r3,r2
  812548:	1001703a 	wrctl	status,r2
  
  return context;
  81254c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  812550:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  812554:	00c00044 	movi	r3,1
  812558:	e0bffa17 	ldw	r2,-24(fp)
  81255c:	1884983a 	sll	r2,r3,r2
  812560:	0084303a 	nor	r2,zero,r2
  812564:	1007883a 	mov	r3,r2
  812568:	d0a76817 	ldw	r2,-25184(gp)
  81256c:	1884703a 	and	r2,r3,r2
  812570:	d0a76815 	stw	r2,-25184(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812574:	d0a76817 	ldw	r2,-25184(gp)
  812578:	100170fa 	wrctl	ienable,r2
  81257c:	e0bffc17 	ldw	r2,-16(fp)
  812580:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812584:	e0bffd17 	ldw	r2,-12(fp)
  812588:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81258c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  812590:	0001883a 	nop
}
  812594:	e037883a 	mov	sp,fp
  812598:	df000017 	ldw	fp,0(sp)
  81259c:	dec00104 	addi	sp,sp,4
  8125a0:	f800283a 	ret

008125a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8125a4:	defffc04 	addi	sp,sp,-16
  8125a8:	df000315 	stw	fp,12(sp)
  8125ac:	df000304 	addi	fp,sp,12
  8125b0:	e13ffe15 	stw	r4,-8(fp)
  8125b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8125b8:	000530fa 	rdctl	r2,ienable
  8125bc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8125c0:	00c00044 	movi	r3,1
  8125c4:	e0bfff17 	ldw	r2,-4(fp)
  8125c8:	1884983a 	sll	r2,r3,r2
  8125cc:	1007883a 	mov	r3,r2
  8125d0:	e0bffd17 	ldw	r2,-12(fp)
  8125d4:	1884703a 	and	r2,r3,r2
  8125d8:	1004c03a 	cmpne	r2,r2,zero
  8125dc:	10803fcc 	andi	r2,r2,255
}
  8125e0:	e037883a 	mov	sp,fp
  8125e4:	df000017 	ldw	fp,0(sp)
  8125e8:	dec00104 	addi	sp,sp,4
  8125ec:	f800283a 	ret

008125f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8125f0:	defff504 	addi	sp,sp,-44
  8125f4:	dfc00a15 	stw	ra,40(sp)
  8125f8:	df000915 	stw	fp,36(sp)
  8125fc:	df000904 	addi	fp,sp,36
  812600:	e13ffc15 	stw	r4,-16(fp)
  812604:	e17ffd15 	stw	r5,-12(fp)
  812608:	e1bffe15 	stw	r6,-8(fp)
  81260c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  812610:	00bffa84 	movi	r2,-22
  812614:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  812618:	e0bffd17 	ldw	r2,-12(fp)
  81261c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  812620:	e0bff817 	ldw	r2,-32(fp)
  812624:	10800808 	cmpgei	r2,r2,32
  812628:	1000271e 	bne	r2,zero,8126c8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81262c:	0005303a 	rdctl	r2,status
  812630:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812634:	e0fffb17 	ldw	r3,-20(fp)
  812638:	00bfff84 	movi	r2,-2
  81263c:	1884703a 	and	r2,r3,r2
  812640:	1001703a 	wrctl	status,r2
  
  return context;
  812644:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  812648:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  81264c:	00802074 	movhi	r2,129
  812650:	109c0504 	addi	r2,r2,28692
  812654:	e0fff817 	ldw	r3,-32(fp)
  812658:	180690fa 	slli	r3,r3,3
  81265c:	10c5883a 	add	r2,r2,r3
  812660:	e0fffe17 	ldw	r3,-8(fp)
  812664:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  812668:	00802074 	movhi	r2,129
  81266c:	109c0504 	addi	r2,r2,28692
  812670:	e0fff817 	ldw	r3,-32(fp)
  812674:	180690fa 	slli	r3,r3,3
  812678:	10c5883a 	add	r2,r2,r3
  81267c:	10800104 	addi	r2,r2,4
  812680:	e0ffff17 	ldw	r3,-4(fp)
  812684:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  812688:	e0bffe17 	ldw	r2,-8(fp)
  81268c:	10000526 	beq	r2,zero,8126a4 <alt_iic_isr_register+0xb4>
  812690:	e0bff817 	ldw	r2,-32(fp)
  812694:	100b883a 	mov	r5,r2
  812698:	e13ffc17 	ldw	r4,-16(fp)
  81269c:	08124900 	call	812490 <alt_ic_irq_enable>
  8126a0:	00000406 	br	8126b4 <alt_iic_isr_register+0xc4>
  8126a4:	e0bff817 	ldw	r2,-32(fp)
  8126a8:	100b883a 	mov	r5,r2
  8126ac:	e13ffc17 	ldw	r4,-16(fp)
  8126b0:	08125180 	call	812518 <alt_ic_irq_disable>
  8126b4:	e0bff715 	stw	r2,-36(fp)
  8126b8:	e0bffa17 	ldw	r2,-24(fp)
  8126bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8126c0:	e0bff917 	ldw	r2,-28(fp)
  8126c4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8126c8:	e0bff717 	ldw	r2,-36(fp)
}
  8126cc:	e037883a 	mov	sp,fp
  8126d0:	dfc00117 	ldw	ra,4(sp)
  8126d4:	df000017 	ldw	fp,0(sp)
  8126d8:	dec00204 	addi	sp,sp,8
  8126dc:	f800283a 	ret

008126e0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8126e0:	defff904 	addi	sp,sp,-28
  8126e4:	dfc00615 	stw	ra,24(sp)
  8126e8:	df000515 	stw	fp,20(sp)
  8126ec:	df000504 	addi	fp,sp,20
  8126f0:	e13ffc15 	stw	r4,-16(fp)
  8126f4:	e17ffd15 	stw	r5,-12(fp)
  8126f8:	e1bffe15 	stw	r6,-8(fp)
  8126fc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  812700:	e1bfff17 	ldw	r6,-4(fp)
  812704:	e17ffe17 	ldw	r5,-8(fp)
  812708:	e13ffd17 	ldw	r4,-12(fp)
  81270c:	080f55c0 	call	80f55c <open>
  812710:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  812714:	e0bffb17 	ldw	r2,-20(fp)
  812718:	10001c16 	blt	r2,zero,81278c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  81271c:	00802074 	movhi	r2,129
  812720:	108f8f04 	addi	r2,r2,15932
  812724:	e0fffb17 	ldw	r3,-20(fp)
  812728:	18c00324 	muli	r3,r3,12
  81272c:	10c5883a 	add	r2,r2,r3
  812730:	10c00017 	ldw	r3,0(r2)
  812734:	e0bffc17 	ldw	r2,-16(fp)
  812738:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81273c:	00802074 	movhi	r2,129
  812740:	108f8f04 	addi	r2,r2,15932
  812744:	e0fffb17 	ldw	r3,-20(fp)
  812748:	18c00324 	muli	r3,r3,12
  81274c:	10c5883a 	add	r2,r2,r3
  812750:	10800104 	addi	r2,r2,4
  812754:	10c00017 	ldw	r3,0(r2)
  812758:	e0bffc17 	ldw	r2,-16(fp)
  81275c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  812760:	00802074 	movhi	r2,129
  812764:	108f8f04 	addi	r2,r2,15932
  812768:	e0fffb17 	ldw	r3,-20(fp)
  81276c:	18c00324 	muli	r3,r3,12
  812770:	10c5883a 	add	r2,r2,r3
  812774:	10800204 	addi	r2,r2,8
  812778:	10c00017 	ldw	r3,0(r2)
  81277c:	e0bffc17 	ldw	r2,-16(fp)
  812780:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  812784:	e13ffb17 	ldw	r4,-20(fp)
  812788:	080f7e80 	call	80f7e8 <alt_release_fd>
  }
} 
  81278c:	0001883a 	nop
  812790:	e037883a 	mov	sp,fp
  812794:	dfc00117 	ldw	ra,4(sp)
  812798:	df000017 	ldw	fp,0(sp)
  81279c:	dec00204 	addi	sp,sp,8
  8127a0:	f800283a 	ret

008127a4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8127a4:	defffb04 	addi	sp,sp,-20
  8127a8:	dfc00415 	stw	ra,16(sp)
  8127ac:	df000315 	stw	fp,12(sp)
  8127b0:	df000304 	addi	fp,sp,12
  8127b4:	e13ffd15 	stw	r4,-12(fp)
  8127b8:	e17ffe15 	stw	r5,-8(fp)
  8127bc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8127c0:	01c07fc4 	movi	r7,511
  8127c4:	01800044 	movi	r6,1
  8127c8:	e17ffd17 	ldw	r5,-12(fp)
  8127cc:	01002074 	movhi	r4,129
  8127d0:	210f9204 	addi	r4,r4,15944
  8127d4:	08126e00 	call	8126e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8127d8:	01c07fc4 	movi	r7,511
  8127dc:	000d883a 	mov	r6,zero
  8127e0:	e17ffe17 	ldw	r5,-8(fp)
  8127e4:	01002074 	movhi	r4,129
  8127e8:	210f8f04 	addi	r4,r4,15932
  8127ec:	08126e00 	call	8126e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8127f0:	01c07fc4 	movi	r7,511
  8127f4:	01800044 	movi	r6,1
  8127f8:	e17fff17 	ldw	r5,-4(fp)
  8127fc:	01002074 	movhi	r4,129
  812800:	210f9504 	addi	r4,r4,15956
  812804:	08126e00 	call	8126e0 <alt_open_fd>
}  
  812808:	0001883a 	nop
  81280c:	e037883a 	mov	sp,fp
  812810:	dfc00117 	ldw	ra,4(sp)
  812814:	df000017 	ldw	fp,0(sp)
  812818:	dec00204 	addi	sp,sp,8
  81281c:	f800283a 	ret

00812820 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  812820:	defffd04 	addi	sp,sp,-12
  812824:	dfc00215 	stw	ra,8(sp)
  812828:	df000115 	stw	fp,4(sp)
  81282c:	df000104 	addi	fp,sp,4
  812830:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  812834:	e13fff17 	ldw	r4,-4(fp)
  812838:	08128740 	call	812874 <alt_busy_sleep>
}
  81283c:	e037883a 	mov	sp,fp
  812840:	dfc00117 	ldw	ra,4(sp)
  812844:	df000017 	ldw	fp,0(sp)
  812848:	dec00204 	addi	sp,sp,8
  81284c:	f800283a 	ret

00812850 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  812850:	deffff04 	addi	sp,sp,-4
  812854:	df000015 	stw	fp,0(sp)
  812858:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81285c:	000170fa 	wrctl	ienable,zero
}
  812860:	0001883a 	nop
  812864:	e037883a 	mov	sp,fp
  812868:	df000017 	ldw	fp,0(sp)
  81286c:	dec00104 	addi	sp,sp,4
  812870:	f800283a 	ret

00812874 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  812874:	defffa04 	addi	sp,sp,-24
  812878:	dfc00515 	stw	ra,20(sp)
  81287c:	df000415 	stw	fp,16(sp)
  812880:	df000404 	addi	fp,sp,16
  812884:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  812888:	008000c4 	movi	r2,3
  81288c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  812890:	e0fffd17 	ldw	r3,-12(fp)
  812894:	008003f4 	movhi	r2,15
  812898:	10909004 	addi	r2,r2,16960
  81289c:	1885383a 	mul	r2,r3,r2
  8128a0:	100b883a 	mov	r5,r2
  8128a4:	0100bef4 	movhi	r4,763
  8128a8:	213c2004 	addi	r4,r4,-3968
  8128ac:	08014d00 	call	8014d0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  8128b0:	100b883a 	mov	r5,r2
  8128b4:	01200034 	movhi	r4,32768
  8128b8:	213fffc4 	addi	r4,r4,-1
  8128bc:	08014d00 	call	8014d0 <__udivsi3>
  8128c0:	100b883a 	mov	r5,r2
  8128c4:	e13fff17 	ldw	r4,-4(fp)
  8128c8:	08014d00 	call	8014d0 <__udivsi3>
  8128cc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8128d0:	e0bffe17 	ldw	r2,-8(fp)
  8128d4:	10002a26 	beq	r2,zero,812980 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  8128d8:	e03ffc15 	stw	zero,-16(fp)
  8128dc:	00001706 	br	81293c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8128e0:	00a00034 	movhi	r2,32768
  8128e4:	10bfffc4 	addi	r2,r2,-1
  8128e8:	10bfffc4 	addi	r2,r2,-1
  8128ec:	103ffe1e 	bne	r2,zero,8128e8 <__alt_mem_onchip_mem+0xff80a8e8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  8128f0:	e0fffd17 	ldw	r3,-12(fp)
  8128f4:	008003f4 	movhi	r2,15
  8128f8:	10909004 	addi	r2,r2,16960
  8128fc:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  812900:	100b883a 	mov	r5,r2
  812904:	0100bef4 	movhi	r4,763
  812908:	213c2004 	addi	r4,r4,-3968
  81290c:	08014d00 	call	8014d0 <__udivsi3>
  812910:	100b883a 	mov	r5,r2
  812914:	01200034 	movhi	r4,32768
  812918:	213fffc4 	addi	r4,r4,-1
  81291c:	08014d00 	call	8014d0 <__udivsi3>
  812920:	1007883a 	mov	r3,r2
  812924:	e0bfff17 	ldw	r2,-4(fp)
  812928:	10c5c83a 	sub	r2,r2,r3
  81292c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  812930:	e0bffc17 	ldw	r2,-16(fp)
  812934:	10800044 	addi	r2,r2,1
  812938:	e0bffc15 	stw	r2,-16(fp)
  81293c:	e0fffc17 	ldw	r3,-16(fp)
  812940:	e0bffe17 	ldw	r2,-8(fp)
  812944:	18bfe616 	blt	r3,r2,8128e0 <__alt_mem_onchip_mem+0xff80a8e0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  812948:	e0fffd17 	ldw	r3,-12(fp)
  81294c:	008003f4 	movhi	r2,15
  812950:	10909004 	addi	r2,r2,16960
  812954:	1885383a 	mul	r2,r3,r2
  812958:	100b883a 	mov	r5,r2
  81295c:	0100bef4 	movhi	r4,763
  812960:	213c2004 	addi	r4,r4,-3968
  812964:	08014d00 	call	8014d0 <__udivsi3>
  812968:	1007883a 	mov	r3,r2
  81296c:	e0bfff17 	ldw	r2,-4(fp)
  812970:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  812974:	10bfffc4 	addi	r2,r2,-1
  812978:	103ffe1e 	bne	r2,zero,812974 <__alt_mem_onchip_mem+0xff80a974>
  81297c:	00000d06 	br	8129b4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  812980:	e0fffd17 	ldw	r3,-12(fp)
  812984:	008003f4 	movhi	r2,15
  812988:	10909004 	addi	r2,r2,16960
  81298c:	1885383a 	mul	r2,r3,r2
  812990:	100b883a 	mov	r5,r2
  812994:	0100bef4 	movhi	r4,763
  812998:	213c2004 	addi	r4,r4,-3968
  81299c:	08014d00 	call	8014d0 <__udivsi3>
  8129a0:	1007883a 	mov	r3,r2
  8129a4:	e0bfff17 	ldw	r2,-4(fp)
  8129a8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8129ac:	10bfffc4 	addi	r2,r2,-1
  8129b0:	00bffe16 	blt	zero,r2,8129ac <__alt_mem_onchip_mem+0xff80a9ac>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8129b4:	0005883a 	mov	r2,zero
}
  8129b8:	e037883a 	mov	sp,fp
  8129bc:	dfc00117 	ldw	ra,4(sp)
  8129c0:	df000017 	ldw	fp,0(sp)
  8129c4:	dec00204 	addi	sp,sp,8
  8129c8:	f800283a 	ret

008129cc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8129cc:	defffb04 	addi	sp,sp,-20
  8129d0:	df000415 	stw	fp,16(sp)
  8129d4:	df000404 	addi	fp,sp,16
  8129d8:	e13ffe15 	stw	r4,-8(fp)
  8129dc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8129e0:	e0bfff17 	ldw	r2,-4(fp)
  8129e4:	10840070 	cmpltui	r2,r2,4097
  8129e8:	1000021e 	bne	r2,zero,8129f4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8129ec:	00840004 	movi	r2,4096
  8129f0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8129f4:	e0fffe17 	ldw	r3,-8(fp)
  8129f8:	e0bfff17 	ldw	r2,-4(fp)
  8129fc:	1885883a 	add	r2,r3,r2
  812a00:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  812a04:	e0bffe17 	ldw	r2,-8(fp)
  812a08:	e0bffc15 	stw	r2,-16(fp)
  812a0c:	00000506 	br	812a24 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  812a10:	e0bffc17 	ldw	r2,-16(fp)
  812a14:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  812a18:	e0bffc17 	ldw	r2,-16(fp)
  812a1c:	10800804 	addi	r2,r2,32
  812a20:	e0bffc15 	stw	r2,-16(fp)
  812a24:	e0fffc17 	ldw	r3,-16(fp)
  812a28:	e0bffd17 	ldw	r2,-12(fp)
  812a2c:	18bff836 	bltu	r3,r2,812a10 <__alt_mem_onchip_mem+0xff80aa10>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  812a30:	e0bffe17 	ldw	r2,-8(fp)
  812a34:	108007cc 	andi	r2,r2,31
  812a38:	10000226 	beq	r2,zero,812a44 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  812a3c:	e0bffc17 	ldw	r2,-16(fp)
  812a40:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  812a44:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  812a48:	0001883a 	nop
  812a4c:	e037883a 	mov	sp,fp
  812a50:	df000017 	ldw	fp,0(sp)
  812a54:	dec00104 	addi	sp,sp,4
  812a58:	f800283a 	ret

00812a5c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  812a5c:	defffe04 	addi	sp,sp,-8
  812a60:	df000115 	stw	fp,4(sp)
  812a64:	df000104 	addi	fp,sp,4
  812a68:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  812a6c:	e0bfff17 	ldw	r2,-4(fp)
  812a70:	10bffe84 	addi	r2,r2,-6
  812a74:	10c00428 	cmpgeui	r3,r2,16
  812a78:	18001a1e 	bne	r3,zero,812ae4 <alt_exception_cause_generated_bad_addr+0x88>
  812a7c:	100690ba 	slli	r3,r2,2
  812a80:	00802074 	movhi	r2,129
  812a84:	108aa504 	addi	r2,r2,10900
  812a88:	1885883a 	add	r2,r3,r2
  812a8c:	10800017 	ldw	r2,0(r2)
  812a90:	1000683a 	jmp	r2
  812a94:	00812ad4 	movui	r2,1195
  812a98:	00812ad4 	movui	r2,1195
  812a9c:	00812ae4 	muli	r2,zero,1195
  812aa0:	00812ae4 	muli	r2,zero,1195
  812aa4:	00812ae4 	muli	r2,zero,1195
  812aa8:	00812ad4 	movui	r2,1195
  812aac:	00812adc 	xori	r2,zero,1195
  812ab0:	00812ae4 	muli	r2,zero,1195
  812ab4:	00812ad4 	movui	r2,1195
  812ab8:	00812ad4 	movui	r2,1195
  812abc:	00812ae4 	muli	r2,zero,1195
  812ac0:	00812ad4 	movui	r2,1195
  812ac4:	00812adc 	xori	r2,zero,1195
  812ac8:	00812ae4 	muli	r2,zero,1195
  812acc:	00812ae4 	muli	r2,zero,1195
  812ad0:	00812ad4 	movui	r2,1195
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  812ad4:	00800044 	movi	r2,1
  812ad8:	00000306 	br	812ae8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  812adc:	0005883a 	mov	r2,zero
  812ae0:	00000106 	br	812ae8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  812ae4:	0005883a 	mov	r2,zero
  }
}
  812ae8:	e037883a 	mov	sp,fp
  812aec:	df000017 	ldw	fp,0(sp)
  812af0:	dec00104 	addi	sp,sp,4
  812af4:	f800283a 	ret

00812af8 <atexit>:
  812af8:	200b883a 	mov	r5,r4
  812afc:	000f883a 	mov	r7,zero
  812b00:	000d883a 	mov	r6,zero
  812b04:	0009883a 	mov	r4,zero
  812b08:	0812bc01 	jmpi	812bc0 <__register_exitproc>

00812b0c <exit>:
  812b0c:	defffe04 	addi	sp,sp,-8
  812b10:	000b883a 	mov	r5,zero
  812b14:	dc000015 	stw	r16,0(sp)
  812b18:	dfc00115 	stw	ra,4(sp)
  812b1c:	2021883a 	mov	r16,r4
  812b20:	0812cd80 	call	812cd8 <__call_exitprocs>
  812b24:	00802074 	movhi	r2,129
  812b28:	10948004 	addi	r2,r2,20992
  812b2c:	11000017 	ldw	r4,0(r2)
  812b30:	20800f17 	ldw	r2,60(r4)
  812b34:	10000126 	beq	r2,zero,812b3c <exit+0x30>
  812b38:	103ee83a 	callr	r2
  812b3c:	8009883a 	mov	r4,r16
  812b40:	0812e580 	call	812e58 <_exit>

00812b44 <memcmp>:
  812b44:	01c000c4 	movi	r7,3
  812b48:	3980192e 	bgeu	r7,r6,812bb0 <memcmp+0x6c>
  812b4c:	2144b03a 	or	r2,r4,r5
  812b50:	11c4703a 	and	r2,r2,r7
  812b54:	10000f26 	beq	r2,zero,812b94 <memcmp+0x50>
  812b58:	20800003 	ldbu	r2,0(r4)
  812b5c:	28c00003 	ldbu	r3,0(r5)
  812b60:	10c0151e 	bne	r2,r3,812bb8 <memcmp+0x74>
  812b64:	31bfff84 	addi	r6,r6,-2
  812b68:	01ffffc4 	movi	r7,-1
  812b6c:	00000406 	br	812b80 <memcmp+0x3c>
  812b70:	20800003 	ldbu	r2,0(r4)
  812b74:	28c00003 	ldbu	r3,0(r5)
  812b78:	31bfffc4 	addi	r6,r6,-1
  812b7c:	10c00e1e 	bne	r2,r3,812bb8 <memcmp+0x74>
  812b80:	21000044 	addi	r4,r4,1
  812b84:	29400044 	addi	r5,r5,1
  812b88:	31fff91e 	bne	r6,r7,812b70 <__alt_mem_onchip_mem+0xff80ab70>
  812b8c:	0005883a 	mov	r2,zero
  812b90:	f800283a 	ret
  812b94:	20c00017 	ldw	r3,0(r4)
  812b98:	28800017 	ldw	r2,0(r5)
  812b9c:	18bfee1e 	bne	r3,r2,812b58 <__alt_mem_onchip_mem+0xff80ab58>
  812ba0:	31bfff04 	addi	r6,r6,-4
  812ba4:	21000104 	addi	r4,r4,4
  812ba8:	29400104 	addi	r5,r5,4
  812bac:	39bff936 	bltu	r7,r6,812b94 <__alt_mem_onchip_mem+0xff80ab94>
  812bb0:	303fe91e 	bne	r6,zero,812b58 <__alt_mem_onchip_mem+0xff80ab58>
  812bb4:	003ff506 	br	812b8c <__alt_mem_onchip_mem+0xff80ab8c>
  812bb8:	10c5c83a 	sub	r2,r2,r3
  812bbc:	f800283a 	ret

00812bc0 <__register_exitproc>:
  812bc0:	defffa04 	addi	sp,sp,-24
  812bc4:	dc000315 	stw	r16,12(sp)
  812bc8:	04002074 	movhi	r16,129
  812bcc:	84148004 	addi	r16,r16,20992
  812bd0:	80c00017 	ldw	r3,0(r16)
  812bd4:	dc400415 	stw	r17,16(sp)
  812bd8:	dfc00515 	stw	ra,20(sp)
  812bdc:	18805217 	ldw	r2,328(r3)
  812be0:	2023883a 	mov	r17,r4
  812be4:	10003726 	beq	r2,zero,812cc4 <__register_exitproc+0x104>
  812be8:	10c00117 	ldw	r3,4(r2)
  812bec:	010007c4 	movi	r4,31
  812bf0:	20c00e16 	blt	r4,r3,812c2c <__register_exitproc+0x6c>
  812bf4:	1a000044 	addi	r8,r3,1
  812bf8:	8800221e 	bne	r17,zero,812c84 <__register_exitproc+0xc4>
  812bfc:	18c00084 	addi	r3,r3,2
  812c00:	18c7883a 	add	r3,r3,r3
  812c04:	18c7883a 	add	r3,r3,r3
  812c08:	12000115 	stw	r8,4(r2)
  812c0c:	10c7883a 	add	r3,r2,r3
  812c10:	19400015 	stw	r5,0(r3)
  812c14:	0005883a 	mov	r2,zero
  812c18:	dfc00517 	ldw	ra,20(sp)
  812c1c:	dc400417 	ldw	r17,16(sp)
  812c20:	dc000317 	ldw	r16,12(sp)
  812c24:	dec00604 	addi	sp,sp,24
  812c28:	f800283a 	ret
  812c2c:	00800034 	movhi	r2,0
  812c30:	10800004 	addi	r2,r2,0
  812c34:	10002626 	beq	r2,zero,812cd0 <__register_exitproc+0x110>
  812c38:	01006404 	movi	r4,400
  812c3c:	d9400015 	stw	r5,0(sp)
  812c40:	d9800115 	stw	r6,4(sp)
  812c44:	d9c00215 	stw	r7,8(sp)
  812c48:	00000000 	call	0 <__reset-0x800000>
  812c4c:	d9400017 	ldw	r5,0(sp)
  812c50:	d9800117 	ldw	r6,4(sp)
  812c54:	d9c00217 	ldw	r7,8(sp)
  812c58:	10001d26 	beq	r2,zero,812cd0 <__register_exitproc+0x110>
  812c5c:	81000017 	ldw	r4,0(r16)
  812c60:	10000115 	stw	zero,4(r2)
  812c64:	02000044 	movi	r8,1
  812c68:	22405217 	ldw	r9,328(r4)
  812c6c:	0007883a 	mov	r3,zero
  812c70:	12400015 	stw	r9,0(r2)
  812c74:	20805215 	stw	r2,328(r4)
  812c78:	10006215 	stw	zero,392(r2)
  812c7c:	10006315 	stw	zero,396(r2)
  812c80:	883fde26 	beq	r17,zero,812bfc <__alt_mem_onchip_mem+0xff80abfc>
  812c84:	18c9883a 	add	r4,r3,r3
  812c88:	2109883a 	add	r4,r4,r4
  812c8c:	1109883a 	add	r4,r2,r4
  812c90:	21802215 	stw	r6,136(r4)
  812c94:	01800044 	movi	r6,1
  812c98:	12406217 	ldw	r9,392(r2)
  812c9c:	30cc983a 	sll	r6,r6,r3
  812ca0:	4992b03a 	or	r9,r9,r6
  812ca4:	12406215 	stw	r9,392(r2)
  812ca8:	21c04215 	stw	r7,264(r4)
  812cac:	01000084 	movi	r4,2
  812cb0:	893fd21e 	bne	r17,r4,812bfc <__alt_mem_onchip_mem+0xff80abfc>
  812cb4:	11006317 	ldw	r4,396(r2)
  812cb8:	218cb03a 	or	r6,r4,r6
  812cbc:	11806315 	stw	r6,396(r2)
  812cc0:	003fce06 	br	812bfc <__alt_mem_onchip_mem+0xff80abfc>
  812cc4:	18805304 	addi	r2,r3,332
  812cc8:	18805215 	stw	r2,328(r3)
  812ccc:	003fc606 	br	812be8 <__alt_mem_onchip_mem+0xff80abe8>
  812cd0:	00bfffc4 	movi	r2,-1
  812cd4:	003fd006 	br	812c18 <__alt_mem_onchip_mem+0xff80ac18>

00812cd8 <__call_exitprocs>:
  812cd8:	defff504 	addi	sp,sp,-44
  812cdc:	df000915 	stw	fp,36(sp)
  812ce0:	dd400615 	stw	r21,24(sp)
  812ce4:	dc800315 	stw	r18,12(sp)
  812ce8:	dfc00a15 	stw	ra,40(sp)
  812cec:	ddc00815 	stw	r23,32(sp)
  812cf0:	dd800715 	stw	r22,28(sp)
  812cf4:	dd000515 	stw	r20,20(sp)
  812cf8:	dcc00415 	stw	r19,16(sp)
  812cfc:	dc400215 	stw	r17,8(sp)
  812d00:	dc000115 	stw	r16,4(sp)
  812d04:	d9000015 	stw	r4,0(sp)
  812d08:	2839883a 	mov	fp,r5
  812d0c:	04800044 	movi	r18,1
  812d10:	057fffc4 	movi	r21,-1
  812d14:	00802074 	movhi	r2,129
  812d18:	10948004 	addi	r2,r2,20992
  812d1c:	12000017 	ldw	r8,0(r2)
  812d20:	45005217 	ldw	r20,328(r8)
  812d24:	44c05204 	addi	r19,r8,328
  812d28:	a0001c26 	beq	r20,zero,812d9c <__call_exitprocs+0xc4>
  812d2c:	a0800117 	ldw	r2,4(r20)
  812d30:	15ffffc4 	addi	r23,r2,-1
  812d34:	b8000d16 	blt	r23,zero,812d6c <__call_exitprocs+0x94>
  812d38:	14000044 	addi	r16,r2,1
  812d3c:	8421883a 	add	r16,r16,r16
  812d40:	8421883a 	add	r16,r16,r16
  812d44:	84402004 	addi	r17,r16,128
  812d48:	a463883a 	add	r17,r20,r17
  812d4c:	a421883a 	add	r16,r20,r16
  812d50:	e0001e26 	beq	fp,zero,812dcc <__call_exitprocs+0xf4>
  812d54:	80804017 	ldw	r2,256(r16)
  812d58:	e0801c26 	beq	fp,r2,812dcc <__call_exitprocs+0xf4>
  812d5c:	bdffffc4 	addi	r23,r23,-1
  812d60:	843fff04 	addi	r16,r16,-4
  812d64:	8c7fff04 	addi	r17,r17,-4
  812d68:	bd7ff91e 	bne	r23,r21,812d50 <__alt_mem_onchip_mem+0xff80ad50>
  812d6c:	00800034 	movhi	r2,0
  812d70:	10800004 	addi	r2,r2,0
  812d74:	10000926 	beq	r2,zero,812d9c <__call_exitprocs+0xc4>
  812d78:	a0800117 	ldw	r2,4(r20)
  812d7c:	1000301e 	bne	r2,zero,812e40 <__call_exitprocs+0x168>
  812d80:	a0800017 	ldw	r2,0(r20)
  812d84:	10003226 	beq	r2,zero,812e50 <__call_exitprocs+0x178>
  812d88:	a009883a 	mov	r4,r20
  812d8c:	98800015 	stw	r2,0(r19)
  812d90:	00000000 	call	0 <__reset-0x800000>
  812d94:	9d000017 	ldw	r20,0(r19)
  812d98:	a03fe41e 	bne	r20,zero,812d2c <__alt_mem_onchip_mem+0xff80ad2c>
  812d9c:	dfc00a17 	ldw	ra,40(sp)
  812da0:	df000917 	ldw	fp,36(sp)
  812da4:	ddc00817 	ldw	r23,32(sp)
  812da8:	dd800717 	ldw	r22,28(sp)
  812dac:	dd400617 	ldw	r21,24(sp)
  812db0:	dd000517 	ldw	r20,20(sp)
  812db4:	dcc00417 	ldw	r19,16(sp)
  812db8:	dc800317 	ldw	r18,12(sp)
  812dbc:	dc400217 	ldw	r17,8(sp)
  812dc0:	dc000117 	ldw	r16,4(sp)
  812dc4:	dec00b04 	addi	sp,sp,44
  812dc8:	f800283a 	ret
  812dcc:	a0800117 	ldw	r2,4(r20)
  812dd0:	80c00017 	ldw	r3,0(r16)
  812dd4:	10bfffc4 	addi	r2,r2,-1
  812dd8:	15c01426 	beq	r2,r23,812e2c <__call_exitprocs+0x154>
  812ddc:	80000015 	stw	zero,0(r16)
  812de0:	183fde26 	beq	r3,zero,812d5c <__alt_mem_onchip_mem+0xff80ad5c>
  812de4:	95c8983a 	sll	r4,r18,r23
  812de8:	a0806217 	ldw	r2,392(r20)
  812dec:	a5800117 	ldw	r22,4(r20)
  812df0:	2084703a 	and	r2,r4,r2
  812df4:	10000b26 	beq	r2,zero,812e24 <__call_exitprocs+0x14c>
  812df8:	a0806317 	ldw	r2,396(r20)
  812dfc:	2088703a 	and	r4,r4,r2
  812e00:	20000c1e 	bne	r4,zero,812e34 <__call_exitprocs+0x15c>
  812e04:	89400017 	ldw	r5,0(r17)
  812e08:	d9000017 	ldw	r4,0(sp)
  812e0c:	183ee83a 	callr	r3
  812e10:	a0800117 	ldw	r2,4(r20)
  812e14:	15bfbf1e 	bne	r2,r22,812d14 <__alt_mem_onchip_mem+0xff80ad14>
  812e18:	98800017 	ldw	r2,0(r19)
  812e1c:	153fcf26 	beq	r2,r20,812d5c <__alt_mem_onchip_mem+0xff80ad5c>
  812e20:	003fbc06 	br	812d14 <__alt_mem_onchip_mem+0xff80ad14>
  812e24:	183ee83a 	callr	r3
  812e28:	003ff906 	br	812e10 <__alt_mem_onchip_mem+0xff80ae10>
  812e2c:	a5c00115 	stw	r23,4(r20)
  812e30:	003feb06 	br	812de0 <__alt_mem_onchip_mem+0xff80ade0>
  812e34:	89000017 	ldw	r4,0(r17)
  812e38:	183ee83a 	callr	r3
  812e3c:	003ff406 	br	812e10 <__alt_mem_onchip_mem+0xff80ae10>
  812e40:	a0800017 	ldw	r2,0(r20)
  812e44:	a027883a 	mov	r19,r20
  812e48:	1029883a 	mov	r20,r2
  812e4c:	003fb606 	br	812d28 <__alt_mem_onchip_mem+0xff80ad28>
  812e50:	0005883a 	mov	r2,zero
  812e54:	003ffb06 	br	812e44 <__alt_mem_onchip_mem+0xff80ae44>

00812e58 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  812e58:	defffd04 	addi	sp,sp,-12
  812e5c:	df000215 	stw	fp,8(sp)
  812e60:	df000204 	addi	fp,sp,8
  812e64:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  812e68:	0001883a 	nop
  812e6c:	e0bfff17 	ldw	r2,-4(fp)
  812e70:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  812e74:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  812e78:	10000226 	beq	r2,zero,812e84 <_exit+0x2c>
    ALT_SIM_FAIL();
  812e7c:	002af070 	cmpltui	zero,zero,43969
  812e80:	00000106 	br	812e88 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  812e84:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  812e88:	003fff06 	br	812e88 <__alt_mem_onchip_mem+0xff80ae88>
