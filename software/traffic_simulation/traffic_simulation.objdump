
traffic_simulation.elf:     file format elf32-littlenios2
traffic_simulation.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00013520 memsz 0x00013520 flags r-x
    LOAD off    0x00014540 vaddr 0x00813540 paddr 0x00815230 align 2**12
         filesz 0x00001cf0 memsz 0x00001cf0 flags rw-
    LOAD off    0x00016f20 vaddr 0x00816f20 paddr 0x00816f20 align 2**12
         filesz 0x00000000 memsz 0x000001dc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012c30  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006cc  00812e74  00812e74  00013e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cf0  00813540  00815230  00014540  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001dc  00816f20  00816f20  00016f20  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  008170fc  008170fc  00016230  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  00016230  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00016230  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011e8  00000000  00000000  00016258  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002e2a1  00000000  00000000  00017440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ba16  00000000  00000000  000456e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e1a5  00000000  00000000  000510f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002a24  00000000  00000000  0005f29c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004426  00000000  00000000  00061cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018ebc  00000000  00000000  000660e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0007efa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ac0  00000000  00000000  0007f008  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008478e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00084791  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00084794  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00084795  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00084796  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0008479f  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  000847a8  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000004  00000000  00000000  000847b1  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000050  00000000  00000000  000847b5  2**0
                  CONTENTS, READONLY
 27 .jdi          00003538  00000000  00000000  00084805  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000675c3  00000000  00000000  00087d3d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00812e74 l    d  .rodata	00000000 .rodata
00813540 l    d  .rwdata	00000000 .rwdata
00816f20 l    d  .bss	00000000 .bss
008170fc l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../traffic_simulation_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
00801684 l     F .text	00000008 __fp_unlock
00801698 l     F .text	0000019c __sinit.part.1
00801834 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
00813558 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 refill.c
008030a4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00812ffa l     O .rodata	00000010 zeroes.4404
00805914 l     F .text	000000bc __sbprintf
0081300a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
0081311b l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00805d30 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00813da4 l     O .rwdata	00000020 lc_ctype_charset
00813d84 l     O .rwdata	00000020 lc_message_charset
00813dc4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
008132b8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00809fc0 l     F .text	000000fc __sprint_r.part.0
008133ec l     O .rodata	00000010 blanks.4348
008133dc l     O .rodata	00000010 zeroes.4349
0080b54c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080ed00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080ee0c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080ee38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080f0a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080f184 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080f270 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080f444 l     F .text	0000003c alt_get_errno
0080f480 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0080f698 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00815220 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080fa88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080fbbc l     F .text	00000034 alt_dev_reg
00813fa4 l     O .rwdata	00001060 jtag_uart
00815004 l     O .rwdata	00000120 lcd
00815124 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080fee4 l     F .text	0000020c altera_avalon_jtag_uart_irq
008100f0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0081522c l     O .rwdata	00000004 colstart
00810728 l     F .text	000000b8 lcd_write_command
008107e0 l     F .text	000000d8 lcd_write_data
008108b8 l     F .text	000000d0 lcd_clear_screen
00810988 l     F .text	000001ec lcd_repaint_screen
00810b74 l     F .text	000000cc lcd_scroll_up
00810c40 l     F .text	000002ac lcd_handle_escape
008113c4 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00811604 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008118b4 l     F .text	0000009c altera_avalon_uart_irq
00811950 l     F .text	000000e4 altera_avalon_uart_rxirq
00811a34 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00811bd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00811de8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00812018 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008126c8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00816fa0 g     O .bss	00000004 alt_instruction_exception_handler
0080969c g     F .text	00000074 _mprec_log10
00800404 g     F .text	0000006c lcd_set_mode
00809788 g     F .text	0000008c __any_on
00808300 g     F .text	00000054 _isatty_r
008132c4 g     O .rodata	00000028 __mprec_tinytens
0080f380 g     F .text	0000007c alt_main
00813540 g     O .rwdata	00000018 t
00816ffc g     O .bss	00000100 alt_irq
00808430 g     F .text	00000060 _lseek_r
00815230 g       *ABS*	00000000 __flash_rwdata_start
00807964 g     F .text	000000ac __sflags
0080d700 g     F .text	00000088 .hidden __eqdf2
008170fc g       *ABS*	00000000 __alt_heap_start
00802f00 g     F .text	0000003c printf
0080b8d4 g     F .text	0000009c _wcrtomb_r
00816f2c g     O .bss	00000004 cam_0
00803448 g     F .text	0000005c __sseek
008019d4 g     F .text	00000010 __sinit
008059d0 g     F .text	00000140 __swbuf_r
00816f30 g     O .bss	00000004 lcd
00808354 g     F .text	0000007c _setlocale_r
0080183c g     F .text	00000068 __sfmoreglue
0080f420 g     F .text	00000024 __malloc_unlock
008086bc g     F .text	0000015c memmove
008019bc g     F .text	00000018 _cleanup
00808818 g     F .text	000000a8 _Balloc
00816fcc g     O .bss	00000018 timer
0080d788 g     F .text	000000dc .hidden __gtdf2
00812838 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00816f24 g     O .bss	00000004 buttonValue
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080209c g     F .text	0000005c _fstat_r
00816f6c g     O .bss	00000004 errno
00803308 g     F .text	00000014 __srget
008033c4 g     F .text	00000008 __seofread
00816f90 g     O .bss	00000004 alt_argv
0081d1e8 g       *ABS*	00000000 _gp
00812808 g     F .text	00000030 usleep
00800384 g     F .text	00000040 tlc_timer_isr
00813e24 g     O .rwdata	00000180 alt_fd_list
008121b8 g     F .text	00000090 alt_find_dev
00808574 g     F .text	00000148 memcpy
008003c4 g     F .text	00000040 camera_timer_isr
0080168c g     F .text	0000000c _cleanup_r
0080e9ec g     F .text	000000dc .hidden __floatsidf
0081278c g     F .text	0000007c alt_io_redirect
0080d864 g     F .text	000000f4 .hidden __ltdf2
00816f34 g     O .bss	00000004 pedNS
00812e74 g       *ABS*	00000000 __DTOR_END__
00812a44 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00809dd8 g     F .text	00000074 __fpclassifyd
008095f8 g     F .text	000000a4 __ratio
0080b530 g     F .text	0000001c __vfiprintf_internal
00800a94 g     F .text	000000f8 pedestrian_tlc
008102e8 g     F .text	0000021c altera_avalon_jtag_uart_read
00802ed0 g     F .text	00000030 _printf_r
008014b8 g     F .text	00000064 .hidden __udivsi3
0080f0e0 g     F .text	000000a4 isatty
00813314 g     O .rodata	000000c8 __mprec_tens
008083d0 g     F .text	0000000c __locale_charset
008129b4 g     F .text	00000090 alt_icache_flush
00816f78 g     O .bss	00000004 __malloc_top_pad
008151fc g     O .rwdata	00000004 __mb_cur_max
00808400 g     F .text	0000000c _localeconv_r
00808c24 g     F .text	0000003c __i2b
00807e44 g     F .text	000004bc __sfvwrite_r
0080331c g     F .text	00000054 _sbrk_r
00800b8c g     F .text	000002ac configurable_tlc
00809814 g     F .text	00000060 _read_r
00815214 g     O .rwdata	00000004 alt_max_fd
008075b8 g     F .text	000000f0 _fclose_r
00807934 g     F .text	00000030 fflush
00816f74 g     O .bss	00000004 __malloc_max_sbrked_mem
0080ef24 g     F .text	00000180 alt_irq_register
0080158c g     F .text	00000070 _fgetc_r
0080c56c g     F .text	000008ac .hidden __adddf3
008093a0 g     F .text	0000010c __b2d
0080c034 g     F .text	00000538 .hidden __umoddi3
0080f2ac g     F .text	000000d4 lseek
00816f38 g     O .bss	00000004 timeCountCamera
008151e8 g     O .rwdata	00000004 _global_impure_ptr
00809874 g     F .text	00000564 _realloc_r
008170fc g       *ABS*	00000000 __bss_end
008125d8 g     F .text	000000f0 alt_iic_isr_register
0080f980 g     F .text	00000108 alt_tick
00816f28 g     O .bss	00000004 settings_made
0080babc g     F .text	00000578 .hidden __udivdi3
0080b830 g     F .text	00000024 _fputwc_r
008132ec g     O .rodata	00000028 __mprec_bigtens
00808a08 g     F .text	00000104 __s2b
0080eac8 g     F .text	000000a8 .hidden __floatunsidf
008090e0 g     F .text	00000060 __mcmp
00811808 g     F .text	000000ac altera_avalon_uart_init
008019f4 g     F .text	00000018 __fp_lock_all
0081258c g     F .text	0000004c alt_ic_irq_enabled
00816f3c g     O .bss	00000004 timerCameraContext
0080f8e4 g     F .text	0000009c alt_alarm_stop
00800e38 g     F .text	000003a4 camera_tlc
008036e4 g     F .text	0000001c strtol
00816f88 g     O .bss	00000004 alt_irq_active
00801c3c g     F .text	00000444 _fseeko_r
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00813dfc g     O .rwdata	00000028 alt_dev_null
00811fd0 g     F .text	00000048 alt_dcache_flush_all
00808b0c g     F .text	00000068 __hi0bits
0080e96c g     F .text	00000080 .hidden __fixdfsi
00815230 g       *ABS*	00000000 __ram_rwdata_end
0081520c g     O .rwdata	00000008 alt_dev_list
00801b7c g     F .text	00000044 _fputc_r
0080fac4 g     F .text	000000f8 write
00802f3c g     F .text	000000a0 _putc_r
00813540 g       *ABS*	00000000 __ram_rodata_end
0080ee74 g     F .text	000000b0 fstat
00801b58 g     F .text	00000024 fprintf
0080d864 g     F .text	000000f4 .hidden __ledf2
00816f20 g     O .bss	00000004 LEDs
00808e58 g     F .text	00000140 __pow5mult
0080a0d4 g     F .text	0000145c ___vfiprintf_internal_r
00816f84 g     O .bss	00000004 __nlocale_changed
0080151c g     F .text	00000058 .hidden __umodsi3
008170fc g       *ABS*	00000000 end
00810eec g     F .text	000004d8 altera_avalon_lcd_16207_write
00802080 g     F .text	0000001c fseeko
00816f40 g     O .bss	00000004 mode
00801580 g     F .text	0000000c _atoi_r
00811e24 g     F .text	000001ac altera_avalon_uart_write
00801c20 g     F .text	0000001c fseek
0080fe24 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00812e74 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081167c g     F .text	0000007c alt_avalon_timer_sc_init
00811758 g     F .text	00000060 altera_avalon_uart_write_fd
0080eb70 g     F .text	00000064 .hidden __clzsi2
008117b8 g     F .text	00000050 altera_avalon_uart_close_fd
00810504 g     F .text	00000224 altera_avalon_jtag_uart_write
008019e4 g     F .text	00000004 __sfp_lock_acquire
00808490 g     F .text	000000e4 memchr
00803700 g     F .text	000021f8 ___vfprintf_internal_r
00807b34 g     F .text	00000310 _free_r
008083dc g     F .text	00000010 __locale_mb_cur_max
00812cc0 g     F .text	00000180 __call_exitprocs
00803294 g     F .text	00000074 __srget_r
00816f80 g     O .bss	00000004 __mlocale_changed
008151f0 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00816f98 g     O .bss	00000004 _alt_tick_rate
00808f98 g     F .text	00000148 __lshift
00816f44 g     O .bss	00000004 next_traffic
00816f9c g     O .bss	00000004 _alt_nticks
0080f6d4 g     F .text	000000fc read
0080fc28 g     F .text	00000098 alt_sys_init
00816f48 g     O .bss	00000004 traffic
00802e70 g     F .text	00000060 _open_r
00812ba8 g     F .text	00000118 __register_exitproc
00808c60 g     F .text	000001f8 __multiply
00810190 g     F .text	00000068 altera_avalon_jtag_uart_close
00813540 g       *ABS*	00000000 __ram_rwdata_start
00812e74 g       *ABS*	00000000 __ram_rodata_start
00816fa4 g     O .bss	00000028 __malloc_current_mallinfo
008094ac g     F .text	0000014c __d2b
0080fcc0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00812350 g     F .text	000000a4 alt_get_fd
0081285c g     F .text	00000158 alt_busy_sleep
00805cdc g     F .text	00000054 _close_r
00812b2c g     F .text	0000007c memcmp
0080fd80 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
008170fc g       *ABS*	00000000 __alt_stack_base
0080fdd0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00802280 g     F .text	000000cc _fwrite_r
00805b88 g     F .text	00000154 __swsetup_r
0080ce18 g     F .text	000008e8 .hidden __divdf3
008018a4 g     F .text	00000118 __sfp
00809710 g     F .text	00000078 __copybits
0081397c g     O .rwdata	00000408 __malloc_av_
008019f0 g     F .text	00000004 __sinit_lock_release
0080d958 g     F .text	00000718 .hidden __muldf3
00803370 g     F .text	00000054 __sread
00812248 g     F .text	00000108 alt_find_file
00812054 g     F .text	000000a4 alt_dev_llist_insert
0080f3fc g     F .text	00000024 __malloc_lock
00801b30 g     F .text	00000028 _fprintf_r
0080f834 g     F .text	000000b0 sbrk
008078d8 g     F .text	0000005c _fflush_r
0080b608 g     F .text	000000c4 _calloc_r
00801b18 g     F .text	00000018 fopen
00816f20 g       *ABS*	00000000 __bss_start
00802d48 g     F .text	00000128 memset
008011dc g     F .text	000001e4 main
00816f94 g     O .bss	00000004 alt_envp
00816f70 g     O .bss	00000004 __malloc_max_total_mem
0080fd20 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00805b10 g     F .text	00000018 __swbuf
00811470 g     F .text	00000134 altera_avalon_lcd_16207_init
008034a4 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008076a8 g     F .text	00000014 fclose
008034ac g     F .text	00000238 _strtol_r
00805f30 g     F .text	00001688 _dtoa_r
0080253c g     F .text	0000080c _malloc_r
0080ba30 g     F .text	00000030 __ascii_wctomb
00815218 g     O .rwdata	00000004 alt_errno
008020f8 g     F .text	000000c4 _fwalk
00802fdc g     F .text	000000c8 putc
008013c0 g     F .text	00000084 .hidden __divsi3
00807a10 g     F .text	00000124 _malloc_trim_r
00812e74 g       *ABS*	00000000 __CTOR_END__
00809e4c g     F .text	000000dc strcmp
00812e74 g       *ABS*	00000000 __flash_rodata_start
00812e74 g       *ABS*	00000000 __DTOR_LIST__
0080d700 g     F .text	00000088 .hidden __nedf2
0080fbf0 g     F .text	00000038 alt_irq_init
0080f7d0 g     F .text	00000064 alt_release_fd
008015fc g     F .text	00000088 fgetc
008133fc g     O .rodata	00000100 .hidden __clz_tab
00816f7c g     O .bss	00000004 _PathLocale
00812ae0 g     F .text	00000014 atexit
00805b28 g     F .text	00000060 _write_r
0080840c g     F .text	00000018 setlocale
00816f4c g     O .bss	00000004 timeCountMain
008151ec g     O .rwdata	00000004 _impure_ptr
00816f8c g     O .bss	00000004 alt_argc
008076bc g     F .text	0000021c __sflush_r
00812158 g     F .text	00000060 _do_dtors
008083f8 g     F .text	00000008 __locale_cjk_lang
00801c1c g     F .text	00000004 _fseek_r
00800470 g     F .text	000003e4 timeout_data_handler
008030c0 g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
0080933c g     F .text	00000064 __ulp
00801a0c g     F .text	00000018 __fp_unlock_all
008115a4 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00801bc0 g     F .text	0000005c fputc
00815204 g     O .rwdata	00000008 alt_fs_list
00816fe4 g     O .bss	00000018 timer1
00800020 g       *ABS*	00000000 __ram_exceptions_start
00808424 g     F .text	0000000c localeconv
00812428 g     F .text	00000050 alt_ic_isr_register
0080234c g     F .text	00000034 fwrite
00815230 g       *ABS*	00000000 _edata
00816f50 g     O .bss	00000004 previousMode
008116f8 g     F .text	00000060 altera_avalon_uart_read_fd
008170fc g       *ABS*	00000000 _end
0080b6cc g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
008101f8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00812500 g     F .text	0000008c alt_ic_irq_disable
008033cc g     F .text	0000007c __swrite
008151f4 g     O .rwdata	00000004 __malloc_trim_threshold
008083ec g     F .text	0000000c __locale_msgcharset
00812af4 g     F .text	00000038 exit
008021bc g     F .text	000000c4 _fwalk_reent
00809140 g     F .text	000001fc __mdiff
00800854 g     F .text	00000240 simple_tlc
00801444 g     F .text	00000074 .hidden __modsi3
008151f8 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00816f54 g     O .bss	00000004 uart
008019e8 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00801574 g     F .text	0000000c atoi
0081301a g     O .rodata	00000101 _ctype_
00811b7c g     F .text	00000054 altera_avalon_uart_close
00801a24 g     F .text	000000f4 _fopen_r
00812e40 g     F .text	00000034 _exit
0080ebd4 g     F .text	0000012c alt_alarm_start
00802380 g     F .text	000001bc __smakebuf_r
00816f58 g     O .bss	00000004 pedWE
00809f28 g     F .text	00000098 strlen
0080f544 g     F .text	00000154 open
0080d788 g     F .text	000000dc .hidden __gedf2
00815200 g     O .rwdata	00000004 __wctomb
0080a0bc g     F .text	00000018 __sprint_r
008123f4 g     F .text	00000034 alt_icache_flush_all
0081521c g     O .rwdata	00000004 alt_priority_mask
00816f5c g     O .bss	00000004 car_action
00816f60 g     O .bss	00000004 timerContext
00812478 g     F .text	00000088 alt_ic_irq_enable
008058f8 g     F .text	0000001c __vfprintf_internal
00811c0c g     F .text	000001dc altera_avalon_uart_read
0080ba60 g     F .text	0000005c _wctomb_r
0080e070 g     F .text	000008fc .hidden __subdf3
00816f64 g     O .bss	00000004 previous_car_action
00808b74 g     F .text	000000b0 __lo0bits
00815224 g     O .rwdata	00000008 alt_alarm_list
008120f8 g     F .text	00000060 _do_ctors
00816f68 g     O .bss	00000004 context_going_to_be_passed
0080b970 g     F .text	000000c0 wcrtomb
0080ed3c g     F .text	000000d0 close
00800290 g     F .text	000000f4 init_buttons_pio
0080f1ec g     F .text	00000084 alt_load
0080b854 g     F .text	00000080 fputwc
008019ec g     F .text	00000004 __sinit_lock_acquire
008088e8 g     F .text	00000120 __multadd
008088c0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	109bff04 	addi	r2,r2,28668
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	109bff04 	addi	r2,r2,28668
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a76e17 	ldw	r2,-25160(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a76e17 	ldw	r2,-25160(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6b47a14 	ori	gp,gp,53736
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	109bc814 	ori	r2,r2,28448

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18dc3f14 	ori	r3,r3,28924

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080f1ec0 	call	80f1ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080f3800 	call	80f380 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <init_buttons_pio>:
/*
 * Initialisers
 */
//Initializes the interrupts for the NS, EW pedestrian and car drive through buttons

void init_buttons_pio(void* context, alt_u32 id){
  800290:	defffc04 	addi	sp,sp,-16
  800294:	df000315 	stw	fp,12(sp)
  800298:	df000304 	addi	fp,sp,12
  80029c:	e13ffe15 	stw	r4,-8(fp)
  8002a0:	e17fff15 	stw	r5,-4(fp)
	int* temp = (int*) context; // need to cast the context first before using it
  8002a4:	e0bffe17 	ldw	r2,-8(fp)
  8002a8:	e0bffd15 	stw	r2,-12(fp)
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  8002ac:	00804074 	movhi	r2,257
  8002b0:	10842704 	addi	r2,r2,4252
  8002b4:	10c00037 	ldwio	r3,0(r2)
  8002b8:	e0bffd17 	ldw	r2,-12(fp)
  8002bc:	10c00015 	stw	r3,0(r2)

	// Clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  8002c0:	0007883a 	mov	r3,zero
  8002c4:	00804074 	movhi	r2,257
  8002c8:	10842704 	addi	r2,r2,4252
  8002cc:	10c00035 	stwio	r3,0(r2)

	if ((*temp) == 1 && traffic != RG){
  8002d0:	e0bffd17 	ldw	r2,-12(fp)
  8002d4:	10800017 	ldw	r2,0(r2)
  8002d8:	10800058 	cmpnei	r2,r2,1
  8002dc:	1000051e 	bne	r2,zero,8002f4 <init_buttons_pio+0x64>
  8002e0:	d0a75817 	ldw	r2,-25248(gp)
  8002e4:	10800060 	cmpeqi	r2,r2,1
  8002e8:	1000021e 	bne	r2,zero,8002f4 <init_buttons_pio+0x64>
		pedNS = pressed;
  8002ec:	00800044 	movi	r2,1
  8002f0:	d0a75315 	stw	r2,-25268(gp)
	}
	if ((*temp) == 2 && traffic != GR){
  8002f4:	e0bffd17 	ldw	r2,-12(fp)
  8002f8:	10800017 	ldw	r2,0(r2)
  8002fc:	10800098 	cmpnei	r2,r2,2
  800300:	1000051e 	bne	r2,zero,800318 <init_buttons_pio+0x88>
  800304:	d0a75817 	ldw	r2,-25248(gp)
  800308:	108000e0 	cmpeqi	r2,r2,3
  80030c:	1000021e 	bne	r2,zero,800318 <init_buttons_pio+0x88>
		pedWE = pressed;
  800310:	00800044 	movi	r2,1
  800314:	d0a75c15 	stw	r2,-25232(gp)
	}
	if ((*temp) == 4 && mode == 4){
  800318:	e0bffd17 	ldw	r2,-12(fp)
  80031c:	10800017 	ldw	r2,0(r2)
  800320:	10800118 	cmpnei	r2,r2,4
  800324:	1000101e 	bne	r2,zero,800368 <init_buttons_pio+0xd8>
  800328:	d0a75617 	ldw	r2,-25256(gp)
  80032c:	10800118 	cmpnei	r2,r2,4
  800330:	10000d1e 	bne	r2,zero,800368 <init_buttons_pio+0xd8>
		if(car_action == exited && (traffic != RG && traffic != GR)){
  800334:	d0a75d17 	ldw	r2,-25228(gp)
  800338:	10800058 	cmpnei	r2,r2,1
  80033c:	1000081e 	bne	r2,zero,800360 <init_buttons_pio+0xd0>
  800340:	d0a75817 	ldw	r2,-25248(gp)
  800344:	10800060 	cmpeqi	r2,r2,1
  800348:	1000051e 	bne	r2,zero,800360 <init_buttons_pio+0xd0>
  80034c:	d0a75817 	ldw	r2,-25248(gp)
  800350:	108000e0 	cmpeqi	r2,r2,3
  800354:	1000021e 	bne	r2,zero,800360 <init_buttons_pio+0xd0>
			car_action = entered;
  800358:	d0275d15 	stw	zero,-25228(gp)
  80035c:	00000206 	br	800368 <init_buttons_pio+0xd8>
		}else{
			car_action = exited;
  800360:	00800044 	movi	r2,1
  800364:	d0a75d15 	stw	r2,-25228(gp)
		}
	}

	(*temp) = 0;
  800368:	e0bffd17 	ldw	r2,-12(fp)
  80036c:	10000015 	stw	zero,0(r2)
}
  800370:	0001883a 	nop
  800374:	e037883a 	mov	sp,fp
  800378:	df000017 	ldw	fp,0(sp)
  80037c:	dec00104 	addi	sp,sp,4
  800380:	f800283a 	ret

00800384 <tlc_timer_isr>:

/*
 * Interrupts
 */
//handler for the traffic light timer interrupt
alt_u32 tlc_timer_isr(void* context){
  800384:	defffd04 	addi	sp,sp,-12
  800388:	df000215 	stw	fp,8(sp)
  80038c:	df000204 	addi	fp,sp,8
  800390:	e13fff15 	stw	r4,-4(fp)
	int *timeCount = (int*) context;
  800394:	e0bfff17 	ldw	r2,-4(fp)
  800398:	e0bffe15 	stw	r2,-8(fp)
	(*timeCount)++;
  80039c:	e0bffe17 	ldw	r2,-8(fp)
  8003a0:	10800017 	ldw	r2,0(r2)
  8003a4:	10c00044 	addi	r3,r2,1
  8003a8:	e0bffe17 	ldw	r2,-8(fp)
  8003ac:	10c00015 	stw	r3,0(r2)
	return 100;
  8003b0:	00801904 	movi	r2,100
}
  8003b4:	e037883a 	mov	sp,fp
  8003b8:	df000017 	ldw	fp,0(sp)
  8003bc:	dec00104 	addi	sp,sp,4
  8003c0:	f800283a 	ret

008003c4 <camera_timer_isr>:

//handler for the red light camera timer interrupt
alt_u32 camera_timer_isr(void* context){
  8003c4:	defffd04 	addi	sp,sp,-12
  8003c8:	df000215 	stw	fp,8(sp)
  8003cc:	df000204 	addi	fp,sp,8
  8003d0:	e13fff15 	stw	r4,-4(fp)
	int *timeCountCamera = (int*) context;
  8003d4:	e0bfff17 	ldw	r2,-4(fp)
  8003d8:	e0bffe15 	stw	r2,-8(fp)
	(*timeCountCamera)++;
  8003dc:	e0bffe17 	ldw	r2,-8(fp)
  8003e0:	10800017 	ldw	r2,0(r2)
  8003e4:	10c00044 	addi	r3,r2,1
  8003e8:	e0bffe17 	ldw	r2,-8(fp)
  8003ec:	10c00015 	stw	r3,0(r2)
	return 100;
  8003f0:	00801904 	movi	r2,100
}
  8003f4:	e037883a 	mov	sp,fp
  8003f8:	df000017 	ldw	fp,0(sp)
  8003fc:	dec00104 	addi	sp,sp,4
  800400:	f800283a 	ret

00800404 <lcd_set_mode>:

/*
 * Setters
 */
//write the current mode to the LCD
void lcd_set_mode(){
  800404:	defffe04 	addi	sp,sp,-8
  800408:	dfc00115 	stw	ra,4(sp)
  80040c:	df000015 	stw	fp,0(sp)
  800410:	d839883a 	mov	fp,sp
	if(lcd != NULL){
  800414:	d0a75217 	ldw	r2,-25272(gp)
  800418:	10000f26 	beq	r2,zero,800458 <lcd_set_mode+0x54>
		fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  80041c:	d0a75217 	ldw	r2,-25272(gp)
  800420:	01c02074 	movhi	r7,129
  800424:	39cb9d04 	addi	r7,r7,11892
  800428:	018006c4 	movi	r6,27
  80042c:	01402074 	movhi	r5,129
  800430:	294b9e04 	addi	r5,r5,11896
  800434:	1009883a 	mov	r4,r2
  800438:	0801b580 	call	801b58 <fprintf>
		fprintf(lcd, "MODE: %d\n", mode);
  80043c:	d0a75217 	ldw	r2,-25272(gp)
  800440:	d0e75617 	ldw	r3,-25256(gp)
  800444:	180d883a 	mov	r6,r3
  800448:	01402074 	movhi	r5,129
  80044c:	294ba004 	addi	r5,r5,11904
  800450:	1009883a 	mov	r4,r2
  800454:	0801b580 	call	801b58 <fprintf>
	}
}
  800458:	0001883a 	nop
  80045c:	e037883a 	mov	sp,fp
  800460:	dfc00117 	ldw	ra,4(sp)
  800464:	df000017 	ldw	fp,0(sp)
  800468:	dec00204 	addi	sp,sp,8
  80046c:	f800283a 	ret

00800470 <timeout_data_handler>:

//parses the configuration string and updates the timeouts
void timeout_data_handler(){
  800470:	deffee04 	addi	sp,sp,-72
  800474:	dfc01115 	stw	ra,68(sp)
  800478:	df001015 	stw	fp,64(sp)
  80047c:	df001004 	addi	fp,sp,64
	if(uart != NULL && settings_made == 0){
  800480:	d0a75b17 	ldw	r2,-25236(gp)
  800484:	10000926 	beq	r2,zero,8004ac <timeout_data_handler+0x3c>
  800488:	d0a75017 	ldw	r2,-25280(gp)
  80048c:	1000071e 	bne	r2,zero,8004ac <timeout_data_handler+0x3c>
		fprintf(uart, "Insert t values in format t1,t2,t3,t4,t5,t6[\\r]\\n: (Press Z to enter)\r\n");
  800490:	d0a75b17 	ldw	r2,-25236(gp)
  800494:	100f883a 	mov	r7,r2
  800498:	018011c4 	movi	r6,71
  80049c:	01400044 	movi	r5,1
  8004a0:	01002074 	movhi	r4,129
  8004a4:	210ba304 	addi	r4,r4,11916
  8004a8:	080234c0 	call	80234c <fwrite>
	}

	//Iterator for data position
	char data;
	char num_digits[31];
	int num_numbers = 0, num_commas = 0, increment = 0;
  8004ac:	e03ff015 	stw	zero,-64(fp)
  8004b0:	e03ff115 	stw	zero,-60(fp)
  8004b4:	e03ff215 	stw	zero,-56(fp)

	//Check that the string format is correct and enter is pressed.
	while(IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 6 && settings_made == 0){
  8004b8:	0000d906 	br	800820 <timeout_data_handler+0x3b0>
		data = fgetc(uart);
  8004bc:	d0a75b17 	ldw	r2,-25236(gp)
  8004c0:	1009883a 	mov	r4,r2
  8004c4:	08015fc0 	call	8015fc <fgetc>
  8004c8:	e0bff605 	stb	r2,-40(fp)

		//Check that the data input consists only commas
		if((data >= '0' && data <= '9') || data == ',' || data == 'z'){
  8004cc:	e0bff607 	ldb	r2,-40(fp)
  8004d0:	10800c10 	cmplti	r2,r2,48
  8004d4:	1000031e 	bne	r2,zero,8004e4 <timeout_data_handler+0x74>
  8004d8:	e0bff607 	ldb	r2,-40(fp)
  8004dc:	10800e90 	cmplti	r2,r2,58
  8004e0:	1000061e 	bne	r2,zero,8004fc <timeout_data_handler+0x8c>
  8004e4:	e0bff607 	ldb	r2,-40(fp)
  8004e8:	10800b20 	cmpeqi	r2,r2,44
  8004ec:	1000031e 	bne	r2,zero,8004fc <timeout_data_handler+0x8c>
  8004f0:	e0bff607 	ldb	r2,-40(fp)
  8004f4:	10801e98 	cmpnei	r2,r2,122
  8004f8:	1000c91e 	bne	r2,zero,800820 <timeout_data_handler+0x3b0>

			// Check that the player is entering digit number.
			if(num_numbers < 4 && (data >= '0' && data <= '9')){
  8004fc:	e0bff017 	ldw	r2,-64(fp)
  800500:	10800108 	cmpgei	r2,r2,4
  800504:	1000171e 	bne	r2,zero,800564 <timeout_data_handler+0xf4>
  800508:	e0bff607 	ldb	r2,-40(fp)
  80050c:	10800c10 	cmplti	r2,r2,48
  800510:	1000141e 	bne	r2,zero,800564 <timeout_data_handler+0xf4>
  800514:	e0bff607 	ldb	r2,-40(fp)
  800518:	10800e88 	cmpgei	r2,r2,58
  80051c:	1000111e 	bne	r2,zero,800564 <timeout_data_handler+0xf4>
				num_digits[increment] = data;
  800520:	e0fff644 	addi	r3,fp,-39
  800524:	e0bff217 	ldw	r2,-56(fp)
  800528:	1885883a 	add	r2,r3,r2
  80052c:	e0fff603 	ldbu	r3,-40(fp)
  800530:	10c00005 	stb	r3,0(r2)
				num_numbers++;
  800534:	e0bff017 	ldw	r2,-64(fp)
  800538:	10800044 	addi	r2,r2,1
  80053c:	e0bff015 	stw	r2,-64(fp)
				increment++;
  800540:	e0bff217 	ldw	r2,-56(fp)
  800544:	10800044 	addi	r2,r2,1
  800548:	e0bff215 	stw	r2,-56(fp)
				fprintf(uart, "%c", data);
  80054c:	d0e75b17 	ldw	r3,-25236(gp)
  800550:	e0bff607 	ldb	r2,-40(fp)
  800554:	180b883a 	mov	r5,r3
  800558:	1009883a 	mov	r4,r2
  80055c:	0801bc00 	call	801bc0 <fputc>
  800560:	0000af06 	br	800820 <timeout_data_handler+0x3b0>

			// Check that the player confirms the five t numbers using comma
			}else if(num_numbers > 0 && data == ',' && num_commas < 5){
  800564:	e0bff017 	ldw	r2,-64(fp)
  800568:	0080180e 	bge	zero,r2,8005cc <timeout_data_handler+0x15c>
  80056c:	e0bff607 	ldb	r2,-40(fp)
  800570:	10800b18 	cmpnei	r2,r2,44
  800574:	1000151e 	bne	r2,zero,8005cc <timeout_data_handler+0x15c>
  800578:	e0bff117 	ldw	r2,-60(fp)
  80057c:	10800148 	cmpgei	r2,r2,5
  800580:	1000121e 	bne	r2,zero,8005cc <timeout_data_handler+0x15c>
				num_numbers = 0;
  800584:	e03ff015 	stw	zero,-64(fp)
				num_digits[increment] = data;
  800588:	e0fff644 	addi	r3,fp,-39
  80058c:	e0bff217 	ldw	r2,-56(fp)
  800590:	1885883a 	add	r2,r3,r2
  800594:	e0fff603 	ldbu	r3,-40(fp)
  800598:	10c00005 	stb	r3,0(r2)
				increment++;
  80059c:	e0bff217 	ldw	r2,-56(fp)
  8005a0:	10800044 	addi	r2,r2,1
  8005a4:	e0bff215 	stw	r2,-56(fp)
				num_commas++;
  8005a8:	e0bff117 	ldw	r2,-60(fp)
  8005ac:	10800044 	addi	r2,r2,1
  8005b0:	e0bff115 	stw	r2,-60(fp)

				// Clear data
				fprintf(uart, "%c", data);
  8005b4:	d0e75b17 	ldw	r3,-25236(gp)
  8005b8:	e0bff607 	ldb	r2,-40(fp)
  8005bc:	180b883a 	mov	r5,r3
  8005c0:	1009883a 	mov	r4,r2
  8005c4:	0801bc00 	call	801bc0 <fputc>
  8005c8:	00009506 	br	800820 <timeout_data_handler+0x3b0>

			// Finally escape this loop.
			}else if(num_commas > 4 && data == 'z'){
  8005cc:	e0bff117 	ldw	r2,-60(fp)
  8005d0:	10800150 	cmplti	r2,r2,5
  8005d4:	1000921e 	bne	r2,zero,800820 <timeout_data_handler+0x3b0>
  8005d8:	e0bff607 	ldb	r2,-40(fp)
  8005dc:	10801e98 	cmpnei	r2,r2,122
  8005e0:	10008f1e 	bne	r2,zero,800820 <timeout_data_handler+0x3b0>
				num_digits[increment] = '\0';
  8005e4:	e0fff644 	addi	r3,fp,-39
  8005e8:	e0bff217 	ldw	r2,-56(fp)
  8005ec:	1885883a 	add	r2,r3,r2
  8005f0:	10000005 	stb	zero,0(r2)
				settings_made = 1;
  8005f4:	00800044 	movi	r2,1
  8005f8:	d0a75015 	stw	r2,-25280(gp)
				fprintf(uart, "\r\n%s\r\n", num_digits);
  8005fc:	d0a75b17 	ldw	r2,-25236(gp)
  800600:	e0fff644 	addi	r3,fp,-39
  800604:	180d883a 	mov	r6,r3
  800608:	01402074 	movhi	r5,129
  80060c:	294bb504 	addi	r5,r5,11988
  800610:	1009883a 	mov	r4,r2
  800614:	0801b580 	call	801b58 <fprintf>
				//Iterates through num_digits
				char temp[5];
				int PosT = 0;
  800618:	e03ff315 	stw	zero,-52(fp)
				int TempIterator = 0;
  80061c:	e03ff415 	stw	zero,-48(fp)
				for (int i=0; i<sizeof(num_digits); i++) {
  800620:	e03ff515 	stw	zero,-44(fp)
  800624:	00007b06 	br	800814 <timeout_data_handler+0x3a4>
					if (num_digits[i] >= '0' && num_digits[i] <= '9') {
  800628:	e0fff644 	addi	r3,fp,-39
  80062c:	e0bff517 	ldw	r2,-44(fp)
  800630:	1885883a 	add	r2,r3,r2
  800634:	10800003 	ldbu	r2,0(r2)
  800638:	10803fcc 	andi	r2,r2,255
  80063c:	1080201c 	xori	r2,r2,128
  800640:	10bfe004 	addi	r2,r2,-128
  800644:	10800c10 	cmplti	r2,r2,48
  800648:	1000151e 	bne	r2,zero,8006a0 <timeout_data_handler+0x230>
  80064c:	e0fff644 	addi	r3,fp,-39
  800650:	e0bff517 	ldw	r2,-44(fp)
  800654:	1885883a 	add	r2,r3,r2
  800658:	10800003 	ldbu	r2,0(r2)
  80065c:	10803fcc 	andi	r2,r2,255
  800660:	1080201c 	xori	r2,r2,128
  800664:	10bfe004 	addi	r2,r2,-128
  800668:	10800e88 	cmpgei	r2,r2,58
  80066c:	10000c1e 	bne	r2,zero,8006a0 <timeout_data_handler+0x230>
						temp[TempIterator] = num_digits[i];
  800670:	e0fff644 	addi	r3,fp,-39
  800674:	e0bff517 	ldw	r2,-44(fp)
  800678:	1885883a 	add	r2,r3,r2
  80067c:	10c00003 	ldbu	r3,0(r2)
  800680:	e13ffe04 	addi	r4,fp,-8
  800684:	e0bff417 	ldw	r2,-48(fp)
  800688:	2085883a 	add	r2,r4,r2
  80068c:	10c00005 	stb	r3,0(r2)
						TempIterator++;
  800690:	e0bff417 	ldw	r2,-48(fp)
  800694:	10800044 	addi	r2,r2,1
  800698:	e0bff415 	stw	r2,-48(fp)
  80069c:	00005a06 	br	800808 <timeout_data_handler+0x398>
					}
					else if (num_digits[i] == ',') {
  8006a0:	e0fff644 	addi	r3,fp,-39
  8006a4:	e0bff517 	ldw	r2,-44(fp)
  8006a8:	1885883a 	add	r2,r3,r2
  8006ac:	10800003 	ldbu	r2,0(r2)
  8006b0:	10803fcc 	andi	r2,r2,255
  8006b4:	1080201c 	xori	r2,r2,128
  8006b8:	10bfe004 	addi	r2,r2,-128
  8006bc:	10800b18 	cmpnei	r2,r2,44
  8006c0:	1000111e 	bne	r2,zero,800708 <timeout_data_handler+0x298>
						t[PosT] = atoi(temp);
  8006c4:	e0bffe04 	addi	r2,fp,-8
  8006c8:	1009883a 	mov	r4,r2
  8006cc:	08015740 	call	801574 <atoi>
  8006d0:	1009883a 	mov	r4,r2
  8006d4:	00802074 	movhi	r2,129
  8006d8:	108d5004 	addi	r2,r2,13632
  8006dc:	e0fff317 	ldw	r3,-52(fp)
  8006e0:	18c7883a 	add	r3,r3,r3
  8006e4:	18c7883a 	add	r3,r3,r3
  8006e8:	10c5883a 	add	r2,r2,r3
  8006ec:	11000015 	stw	r4,0(r2)
						temp[0] = '\0';
  8006f0:	e03ffe05 	stb	zero,-8(fp)
						TempIterator = 0;
  8006f4:	e03ff415 	stw	zero,-48(fp)
						PosT++;
  8006f8:	e0bff317 	ldw	r2,-52(fp)
  8006fc:	10800044 	addi	r2,r2,1
  800700:	e0bff315 	stw	r2,-52(fp)
  800704:	00004006 	br	800808 <timeout_data_handler+0x398>
					}
					else if (num_digits[i] == '\0') {
  800708:	e0fff644 	addi	r3,fp,-39
  80070c:	e0bff517 	ldw	r2,-44(fp)
  800710:	1885883a 	add	r2,r3,r2
  800714:	10800003 	ldbu	r2,0(r2)
  800718:	10803fcc 	andi	r2,r2,255
  80071c:	1080201c 	xori	r2,r2,128
  800720:	10bfe004 	addi	r2,r2,-128
  800724:	1000381e 	bne	r2,zero,800808 <timeout_data_handler+0x398>
						t[PosT] = atoi(temp);
  800728:	e0bffe04 	addi	r2,fp,-8
  80072c:	1009883a 	mov	r4,r2
  800730:	08015740 	call	801574 <atoi>
  800734:	1009883a 	mov	r4,r2
  800738:	00802074 	movhi	r2,129
  80073c:	108d5004 	addi	r2,r2,13632
  800740:	e0fff317 	ldw	r3,-52(fp)
  800744:	18c7883a 	add	r3,r3,r3
  800748:	18c7883a 	add	r3,r3,r3
  80074c:	10c5883a 	add	r2,r2,r3
  800750:	11000015 	stw	r4,0(r2)
						temp[0] = '\0';
  800754:	e03ffe05 	stb	zero,-8(fp)
						PosT = 0;
  800758:	e03ff315 	stw	zero,-52(fp)

						printf("t[0]: %d, ", t[0]);
  80075c:	00802074 	movhi	r2,129
  800760:	108d5004 	addi	r2,r2,13632
  800764:	10800017 	ldw	r2,0(r2)
  800768:	100b883a 	mov	r5,r2
  80076c:	01002074 	movhi	r4,129
  800770:	210bb704 	addi	r4,r4,11996
  800774:	0802f000 	call	802f00 <printf>
						printf("t[1]: %d, ", t[1]);
  800778:	00802074 	movhi	r2,129
  80077c:	108d5004 	addi	r2,r2,13632
  800780:	10800117 	ldw	r2,4(r2)
  800784:	100b883a 	mov	r5,r2
  800788:	01002074 	movhi	r4,129
  80078c:	210bba04 	addi	r4,r4,12008
  800790:	0802f000 	call	802f00 <printf>
						printf("t[2]: %d, ", t[2]);
  800794:	00802074 	movhi	r2,129
  800798:	108d5004 	addi	r2,r2,13632
  80079c:	10800217 	ldw	r2,8(r2)
  8007a0:	100b883a 	mov	r5,r2
  8007a4:	01002074 	movhi	r4,129
  8007a8:	210bbd04 	addi	r4,r4,12020
  8007ac:	0802f000 	call	802f00 <printf>
						printf("t[3]: %d, ", t[3]);
  8007b0:	00802074 	movhi	r2,129
  8007b4:	108d5004 	addi	r2,r2,13632
  8007b8:	10800317 	ldw	r2,12(r2)
  8007bc:	100b883a 	mov	r5,r2
  8007c0:	01002074 	movhi	r4,129
  8007c4:	210bc004 	addi	r4,r4,12032
  8007c8:	0802f000 	call	802f00 <printf>
						printf("t[4]: %d, ", t[4]);
  8007cc:	00802074 	movhi	r2,129
  8007d0:	108d5004 	addi	r2,r2,13632
  8007d4:	10800417 	ldw	r2,16(r2)
  8007d8:	100b883a 	mov	r5,r2
  8007dc:	01002074 	movhi	r4,129
  8007e0:	210bc304 	addi	r4,r4,12044
  8007e4:	0802f000 	call	802f00 <printf>
						printf("t[5]: %d\n", t[5]);
  8007e8:	00802074 	movhi	r2,129
  8007ec:	108d5004 	addi	r2,r2,13632
  8007f0:	10800517 	ldw	r2,20(r2)
  8007f4:	100b883a 	mov	r5,r2
  8007f8:	01002074 	movhi	r4,129
  8007fc:	210bc604 	addi	r4,r4,12056
  800800:	0802f000 	call	802f00 <printf>

						break;
  800804:	00000606 	br	800820 <timeout_data_handler+0x3b0>
				fprintf(uart, "\r\n%s\r\n", num_digits);
				//Iterates through num_digits
				char temp[5];
				int PosT = 0;
				int TempIterator = 0;
				for (int i=0; i<sizeof(num_digits); i++) {
  800808:	e0bff517 	ldw	r2,-44(fp)
  80080c:	10800044 	addi	r2,r2,1
  800810:	e0bff515 	stw	r2,-44(fp)
  800814:	e0bff517 	ldw	r2,-44(fp)
  800818:	108007f0 	cmpltui	r2,r2,31
  80081c:	103f821e 	bne	r2,zero,800628 <__alt_mem_onchip_mem+0xff7f8628>
	char data;
	char num_digits[31];
	int num_numbers = 0, num_commas = 0, increment = 0;

	//Check that the string format is correct and enter is pressed.
	while(IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 6 && settings_made == 0){
  800820:	00804074 	movhi	r2,257
  800824:	10842804 	addi	r2,r2,4256
  800828:	10800037 	ldwio	r2,0(r2)
  80082c:	10800198 	cmpnei	r2,r2,6
  800830:	1000021e 	bne	r2,zero,80083c <timeout_data_handler+0x3cc>
  800834:	d0a75017 	ldw	r2,-25280(gp)
  800838:	103f2026 	beq	r2,zero,8004bc <__alt_mem_onchip_mem+0xff7f84bc>

		}
	}


}
  80083c:	0001883a 	nop
  800840:	e037883a 	mov	sp,fp
  800844:	dfc00117 	ldw	ra,4(sp)
  800848:	df000017 	ldw	fp,0(sp)
  80084c:	dec00204 	addi	sp,sp,8
  800850:	f800283a 	ret

00800854 <simple_tlc>:

/*
 * Implementers
 */
//implements the simple traffic light controller
void simple_tlc(){
  800854:	defffe04 	addi	sp,sp,-8
  800858:	dfc00115 	stw	ra,4(sp)
  80085c:	df000015 	stw	fp,0(sp)
  800860:	d839883a 	mov	fp,sp
	switch(traffic){
  800864:	d0a75817 	ldw	r2,-25248(gp)
  800868:	10c00168 	cmpgeui	r3,r2,5
  80086c:	1800831e 	bne	r3,zero,800a7c <simple_tlc+0x228>
  800870:	100690ba 	slli	r3,r2,2
  800874:	00802034 	movhi	r2,128
  800878:	10822204 	addi	r2,r2,2184
  80087c:	1885883a 	add	r2,r3,r2
  800880:	10800017 	ldw	r2,0(r2)
  800884:	1000683a 	jmp	r2
  800888:	0080089c 	xori	r2,zero,34
  80088c:	00800900 	call	80090 <__reset-0x77ff70>
  800890:	00800960 	cmpeqi	r2,zero,37
  800894:	008009ac 	andhi	r2,zero,38
  800898:	00800a0c 	andi	r2,zero,40
		case RR:
			// Set green leds
			LEDs = TWE_R + TNS_R;
  80089c:	00800904 	movi	r2,36
  8008a0:	d0a74e15 	stw	r2,-25288(gp)

			if(timeCountMain >= 5){
  8008a4:	d0a75917 	ldw	r2,-25244(gp)
  8008a8:	10800150 	cmplti	r2,r2,5
  8008ac:	10006a1e 	bne	r2,zero,800a58 <simple_tlc+0x204>
				// next traffic decides whether to go RG or GR
				if(next_traffic == NS){
  8008b0:	d0a75717 	ldw	r2,-25252(gp)
  8008b4:	1000031e 	bne	r2,zero,8008c4 <simple_tlc+0x70>
					traffic = RG;
  8008b8:	00800044 	movi	r2,1
  8008bc:	d0a75815 	stw	r2,-25248(gp)
  8008c0:	00000206 	br	8008cc <simple_tlc+0x78>
				}else{
					traffic = GR;
  8008c4:	008000c4 	movi	r2,3
  8008c8:	d0a75815 	stw	r2,-25248(gp)
				}
				alt_alarm_stop(&timer);
  8008cc:	01002074 	movhi	r4,129
  8008d0:	211bf304 	addi	r4,r4,28620
  8008d4:	080f8e40 	call	80f8e4 <alt_alarm_stop>
				timeCountMain = 0;
  8008d8:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout of 0.5 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  8008dc:	d0a75e17 	ldw	r2,-25224(gp)
  8008e0:	100f883a 	mov	r7,r2
  8008e4:	01802034 	movhi	r6,128
  8008e8:	3180e104 	addi	r6,r6,900
  8008ec:	01401904 	movi	r5,100
  8008f0:	01002074 	movhi	r4,129
  8008f4:	211bf304 	addi	r4,r4,28620
  8008f8:	080ebd40 	call	80ebd4 <alt_alarm_start>
			}

			break;
  8008fc:	00005606 	br	800a58 <simple_tlc+0x204>

		case RG:
			// Set green leds
			LEDs = TWE_R + TNS_G;
  800900:	00800844 	movi	r2,33
  800904:	d0a74e15 	stw	r2,-25288(gp)

			// Set next traffic not to re-do RG
			if(next_traffic == NS){
  800908:	d0a75717 	ldw	r2,-25252(gp)
  80090c:	1000021e 	bne	r2,zero,800918 <simple_tlc+0xc4>
				next_traffic = WE;
  800910:	00800044 	movi	r2,1
  800914:	d0a75715 	stw	r2,-25252(gp)
			}

			if(timeCountMain >= 60){
  800918:	d0a75917 	ldw	r2,-25244(gp)
  80091c:	10800f10 	cmplti	r2,r2,60
  800920:	10004f1e 	bne	r2,zero,800a60 <simple_tlc+0x20c>
				traffic = RY;
  800924:	00800084 	movi	r2,2
  800928:	d0a75815 	stw	r2,-25248(gp)

				alt_alarm_stop(&timer);
  80092c:	01002074 	movhi	r4,129
  800930:	211bf304 	addi	r4,r4,28620
  800934:	080f8e40 	call	80f8e4 <alt_alarm_stop>
				timeCountMain = 0;
  800938:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  80093c:	d0a75e17 	ldw	r2,-25224(gp)
  800940:	100f883a 	mov	r7,r2
  800944:	01802034 	movhi	r6,128
  800948:	3180e104 	addi	r6,r6,900
  80094c:	01401904 	movi	r5,100
  800950:	01002074 	movhi	r4,129
  800954:	211bf304 	addi	r4,r4,28620
  800958:	080ebd40 	call	80ebd4 <alt_alarm_start>
			}
			break;
  80095c:	00004006 	br	800a60 <simple_tlc+0x20c>
		case RY:
			// Set green leds
			LEDs = TWE_R + TNS_Y;
  800960:	00800884 	movi	r2,34
  800964:	d0a74e15 	stw	r2,-25288(gp)

			if(timeCountMain >= 20){
  800968:	d0a75917 	ldw	r2,-25244(gp)
  80096c:	10800510 	cmplti	r2,r2,20
  800970:	10003d1e 	bne	r2,zero,800a68 <simple_tlc+0x214>
				traffic = RR;
  800974:	d0275815 	stw	zero,-25248(gp)

				alt_alarm_stop(&timer);
  800978:	01002074 	movhi	r4,129
  80097c:	211bf304 	addi	r4,r4,28620
  800980:	080f8e40 	call	80f8e4 <alt_alarm_stop>
				timeCountMain = 0;
  800984:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800988:	d0a75e17 	ldw	r2,-25224(gp)
  80098c:	100f883a 	mov	r7,r2
  800990:	01802034 	movhi	r6,128
  800994:	3180e104 	addi	r6,r6,900
  800998:	01401904 	movi	r5,100
  80099c:	01002074 	movhi	r4,129
  8009a0:	211bf304 	addi	r4,r4,28620
  8009a4:	080ebd40 	call	80ebd4 <alt_alarm_start>
			}
			break;
  8009a8:	00002f06 	br	800a68 <simple_tlc+0x214>
		case GR:
			// Set green leds
			LEDs = TWE_G + TNS_R;
  8009ac:	00800304 	movi	r2,12
  8009b0:	d0a74e15 	stw	r2,-25288(gp)

			// Set next traffic not to re-do GR
			if(next_traffic == WE){
  8009b4:	d0a75717 	ldw	r2,-25252(gp)
  8009b8:	10800058 	cmpnei	r2,r2,1
  8009bc:	1000011e 	bne	r2,zero,8009c4 <simple_tlc+0x170>
				next_traffic = NS;
  8009c0:	d0275715 	stw	zero,-25252(gp)
			}
			if(timeCountMain >= 60){
  8009c4:	d0a75917 	ldw	r2,-25244(gp)
  8009c8:	10800f10 	cmplti	r2,r2,60
  8009cc:	1000281e 	bne	r2,zero,800a70 <simple_tlc+0x21c>
				traffic = YR;
  8009d0:	00800104 	movi	r2,4
  8009d4:	d0a75815 	stw	r2,-25248(gp)

				alt_alarm_stop(&timer);
  8009d8:	01002074 	movhi	r4,129
  8009dc:	211bf304 	addi	r4,r4,28620
  8009e0:	080f8e40 	call	80f8e4 <alt_alarm_stop>
				timeCountMain = 0;
  8009e4:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  8009e8:	d0a75e17 	ldw	r2,-25224(gp)
  8009ec:	100f883a 	mov	r7,r2
  8009f0:	01802034 	movhi	r6,128
  8009f4:	3180e104 	addi	r6,r6,900
  8009f8:	01401904 	movi	r5,100
  8009fc:	01002074 	movhi	r4,129
  800a00:	211bf304 	addi	r4,r4,28620
  800a04:	080ebd40 	call	80ebd4 <alt_alarm_start>
			}
			break;
  800a08:	00001906 	br	800a70 <simple_tlc+0x21c>
		case YR:
			// Set green leds
			LEDs = TWE_Y + TNS_R;
  800a0c:	00800504 	movi	r2,20
  800a10:	d0a74e15 	stw	r2,-25288(gp)

			if(timeCountMain >= 20){
  800a14:	d0a75917 	ldw	r2,-25244(gp)
  800a18:	10800510 	cmplti	r2,r2,20
  800a1c:	1000161e 	bne	r2,zero,800a78 <simple_tlc+0x224>
				traffic = RR;
  800a20:	d0275815 	stw	zero,-25248(gp)

				alt_alarm_stop(&timer);
  800a24:	01002074 	movhi	r4,129
  800a28:	211bf304 	addi	r4,r4,28620
  800a2c:	080f8e40 	call	80f8e4 <alt_alarm_stop>
				timeCountMain = 0;
  800a30:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800a34:	d0a75e17 	ldw	r2,-25224(gp)
  800a38:	100f883a 	mov	r7,r2
  800a3c:	01802034 	movhi	r6,128
  800a40:	3180e104 	addi	r6,r6,900
  800a44:	01401904 	movi	r5,100
  800a48:	01002074 	movhi	r4,129
  800a4c:	211bf304 	addi	r4,r4,28620
  800a50:	080ebd40 	call	80ebd4 <alt_alarm_start>
			}
			break;
  800a54:	00000806 	br	800a78 <simple_tlc+0x224>
				timeCountMain = 0;
				// start the timer, with timeout of 0.5 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}

			break;
  800a58:	0001883a 	nop
  800a5c:	00000706 	br	800a7c <simple_tlc+0x228>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800a60:	0001883a 	nop
  800a64:	00000506 	br	800a7c <simple_tlc+0x228>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800a68:	0001883a 	nop
  800a6c:	00000306 	br	800a7c <simple_tlc+0x228>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800a70:	0001883a 	nop
  800a74:	00000106 	br	800a7c <simple_tlc+0x228>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800a78:	0001883a 	nop
	}
}
  800a7c:	0001883a 	nop
  800a80:	e037883a 	mov	sp,fp
  800a84:	dfc00117 	ldw	ra,4(sp)
  800a88:	df000017 	ldw	fp,0(sp)
  800a8c:	dec00204 	addi	sp,sp,8
  800a90:	f800283a 	ret

00800a94 <pedestrian_tlc>:

//implements the pedestrian traffic light controller
void pedestrian_tlc(){
  800a94:	deffff04 	addi	sp,sp,-4
  800a98:	df000015 	stw	fp,0(sp)
  800a9c:	d839883a 	mov	fp,sp
	 // Any state (pedNS and/or pedWE) that is in pressed state.
	 // Set respective running pedestrian signal back to idle on yellow light.
	switch(traffic){
  800aa0:	d0a75817 	ldw	r2,-25248(gp)
  800aa4:	10c000a0 	cmpeqi	r3,r2,2
  800aa8:	1800161e 	bne	r3,zero,800b04 <pedestrian_tlc+0x70>
  800aac:	10c000e8 	cmpgeui	r3,r2,3
  800ab0:	1800031e 	bne	r3,zero,800ac0 <pedestrian_tlc+0x2c>
  800ab4:	10800060 	cmpeqi	r2,r2,1
  800ab8:	1000061e 	bne	r2,zero,800ad4 <pedestrian_tlc+0x40>
			if(pedWE == running){
				pedWE = idle;
			}
			break;
		default:
			break;
  800abc:	00002e06 	br	800b78 <pedestrian_tlc+0xe4>

//implements the pedestrian traffic light controller
void pedestrian_tlc(){
	 // Any state (pedNS and/or pedWE) that is in pressed state.
	 // Set respective running pedestrian signal back to idle on yellow light.
	switch(traffic){
  800ac0:	10c000e0 	cmpeqi	r3,r2,3
  800ac4:	1800141e 	bne	r3,zero,800b18 <pedestrian_tlc+0x84>
  800ac8:	10800120 	cmpeqi	r2,r2,4
  800acc:	10001e1e 	bne	r2,zero,800b48 <pedestrian_tlc+0xb4>
			if(pedWE == running){
				pedWE = idle;
			}
			break;
		default:
			break;
  800ad0:	00002906 	br	800b78 <pedestrian_tlc+0xe4>
void pedestrian_tlc(){
	 // Any state (pedNS and/or pedWE) that is in pressed state.
	 // Set respective running pedestrian signal back to idle on yellow light.
	switch(traffic){
		case RG:
			if(pedNS == pressed){
  800ad4:	d0a75317 	ldw	r2,-25268(gp)
  800ad8:	10800058 	cmpnei	r2,r2,1
  800adc:	1000021e 	bne	r2,zero,800ae8 <pedestrian_tlc+0x54>
				pedNS = running;
  800ae0:	00800084 	movi	r2,2
  800ae4:	d0a75315 	stw	r2,-25268(gp)
			}
			if(pedNS == running){
  800ae8:	d0a75317 	ldw	r2,-25268(gp)
  800aec:	10800098 	cmpnei	r2,r2,2
  800af0:	10001a1e 	bne	r2,zero,800b5c <pedestrian_tlc+0xc8>
				LEDs = LEDs + PNS_G;
  800af4:	d0a74e17 	ldw	r2,-25288(gp)
  800af8:	10801004 	addi	r2,r2,64
  800afc:	d0a74e15 	stw	r2,-25288(gp)
			}
			break;
  800b00:	00001606 	br	800b5c <pedestrian_tlc+0xc8>
		case RY:
			if(pedNS == running){
  800b04:	d0a75317 	ldw	r2,-25268(gp)
  800b08:	10800098 	cmpnei	r2,r2,2
  800b0c:	1000151e 	bne	r2,zero,800b64 <pedestrian_tlc+0xd0>
				pedNS = idle;
  800b10:	d0275315 	stw	zero,-25268(gp)
			}
			break;
  800b14:	00001306 	br	800b64 <pedestrian_tlc+0xd0>
		case GR:
			if(pedWE == pressed){
  800b18:	d0a75c17 	ldw	r2,-25232(gp)
  800b1c:	10800058 	cmpnei	r2,r2,1
  800b20:	1000021e 	bne	r2,zero,800b2c <pedestrian_tlc+0x98>
				pedWE = running;
  800b24:	00800084 	movi	r2,2
  800b28:	d0a75c15 	stw	r2,-25232(gp)
			}
			if(pedWE == running){
  800b2c:	d0a75c17 	ldw	r2,-25232(gp)
  800b30:	10800098 	cmpnei	r2,r2,2
  800b34:	10000d1e 	bne	r2,zero,800b6c <pedestrian_tlc+0xd8>
				LEDs = LEDs + PWE_G;
  800b38:	d0a74e17 	ldw	r2,-25288(gp)
  800b3c:	10802004 	addi	r2,r2,128
  800b40:	d0a74e15 	stw	r2,-25288(gp)
			}
			break;
  800b44:	00000906 	br	800b6c <pedestrian_tlc+0xd8>
		case YR:
			if(pedWE == running){
  800b48:	d0a75c17 	ldw	r2,-25232(gp)
  800b4c:	10800098 	cmpnei	r2,r2,2
  800b50:	1000081e 	bne	r2,zero,800b74 <pedestrian_tlc+0xe0>
				pedWE = idle;
  800b54:	d0275c15 	stw	zero,-25232(gp)
			}
			break;
  800b58:	00000606 	br	800b74 <pedestrian_tlc+0xe0>
				pedNS = running;
			}
			if(pedNS == running){
				LEDs = LEDs + PNS_G;
			}
			break;
  800b5c:	0001883a 	nop
  800b60:	00000506 	br	800b78 <pedestrian_tlc+0xe4>
		case RY:
			if(pedNS == running){
				pedNS = idle;
			}
			break;
  800b64:	0001883a 	nop
  800b68:	00000306 	br	800b78 <pedestrian_tlc+0xe4>
				pedWE = running;
			}
			if(pedWE == running){
				LEDs = LEDs + PWE_G;
			}
			break;
  800b6c:	0001883a 	nop
  800b70:	00000106 	br	800b78 <pedestrian_tlc+0xe4>
		case YR:
			if(pedWE == running){
				pedWE = idle;
			}
			break;
  800b74:	0001883a 	nop
		default:
			break;
	}
}
  800b78:	0001883a 	nop
  800b7c:	e037883a 	mov	sp,fp
  800b80:	df000017 	ldw	fp,0(sp)
  800b84:	dec00104 	addi	sp,sp,4
  800b88:	f800283a 	ret

00800b8c <configurable_tlc>:

//implements the configurable traffic light controller
void configurable_tlc(){
  800b8c:	defffe04 	addi	sp,sp,-8
  800b90:	dfc00115 	stw	ra,4(sp)
  800b94:	df000015 	stw	fp,0(sp)
  800b98:	d839883a 	mov	fp,sp
	switch(traffic){
  800b9c:	d0a75817 	ldw	r2,-25248(gp)
  800ba0:	10c00168 	cmpgeui	r3,r2,5
  800ba4:	18009e1e 	bne	r3,zero,800e20 <configurable_tlc+0x294>
  800ba8:	100690ba 	slli	r3,r2,2
  800bac:	00802034 	movhi	r2,128
  800bb0:	1082f004 	addi	r2,r2,3008
  800bb4:	1885883a 	add	r2,r3,r2
  800bb8:	10800017 	ldw	r2,0(r2)
  800bbc:	1000683a 	jmp	r2
  800bc0:	00800bd4 	movui	r2,47
  800bc4:	00800c84 	movi	r2,50
  800bc8:	00800cec 	andhi	r2,zero,51
  800bcc:	00800d40 	call	800d4 <__reset-0x77ff2c>
  800bd0:	00800da8 	cmpgeui	r2,zero,54
		case RR:
			// Set green leds
			LEDs = TWE_R + TNS_R;
  800bd4:	00800904 	movi	r2,36
  800bd8:	d0a74e15 	stw	r2,-25288(gp)

			// next traffic decides whether to go RG or GR
			if(next_traffic == NS && timeCountMain >= t[0]){
  800bdc:	d0a75717 	ldw	r2,-25252(gp)
  800be0:	1000141e 	bne	r2,zero,800c34 <configurable_tlc+0xa8>
  800be4:	00802074 	movhi	r2,129
  800be8:	108d5004 	addi	r2,r2,13632
  800bec:	10800017 	ldw	r2,0(r2)
  800bf0:	d0e75917 	ldw	r3,-25244(gp)
  800bf4:	18800f16 	blt	r3,r2,800c34 <configurable_tlc+0xa8>
				traffic = RG;
  800bf8:	00800044 	movi	r2,1
  800bfc:	d0a75815 	stw	r2,-25248(gp)
				alt_alarm_stop(&timer);
  800c00:	01002074 	movhi	r4,129
  800c04:	211bf304 	addi	r4,r4,28620
  800c08:	080f8e40 	call	80f8e4 <alt_alarm_stop>
				timeCountMain = 0;
  800c0c:	d0275915 	stw	zero,-25244(gp)

				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800c10:	d0a75e17 	ldw	r2,-25224(gp)
  800c14:	100f883a 	mov	r7,r2
  800c18:	01802034 	movhi	r6,128
  800c1c:	3180e104 	addi	r6,r6,900
  800c20:	01401904 	movi	r5,100
  800c24:	01002074 	movhi	r4,129
  800c28:	211bf304 	addi	r4,r4,28620
  800c2c:	080ebd40 	call	80ebd4 <alt_alarm_start>
				timeCountMain = 0;

				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800c30:	00007206 	br	800dfc <configurable_tlc+0x270>
				alt_alarm_stop(&timer);
				timeCountMain = 0;

				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}else if(timeCountMain >= t[3]){
  800c34:	00802074 	movhi	r2,129
  800c38:	108d5004 	addi	r2,r2,13632
  800c3c:	10800317 	ldw	r2,12(r2)
  800c40:	d0e75917 	ldw	r3,-25244(gp)
  800c44:	18806d16 	blt	r3,r2,800dfc <configurable_tlc+0x270>
				traffic = GR;
  800c48:	008000c4 	movi	r2,3
  800c4c:	d0a75815 	stw	r2,-25248(gp)
				alt_alarm_stop(&timer);
  800c50:	01002074 	movhi	r4,129
  800c54:	211bf304 	addi	r4,r4,28620
  800c58:	080f8e40 	call	80f8e4 <alt_alarm_stop>
				timeCountMain = 0;
  800c5c:	d0275915 	stw	zero,-25244(gp)

				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800c60:	d0a75e17 	ldw	r2,-25224(gp)
  800c64:	100f883a 	mov	r7,r2
  800c68:	01802034 	movhi	r6,128
  800c6c:	3180e104 	addi	r6,r6,900
  800c70:	01401904 	movi	r5,100
  800c74:	01002074 	movhi	r4,129
  800c78:	211bf304 	addi	r4,r4,28620
  800c7c:	080ebd40 	call	80ebd4 <alt_alarm_start>
			}
			break;
  800c80:	00005e06 	br	800dfc <configurable_tlc+0x270>

		case RG:
			// Set green leds
			LEDs = TWE_R + TNS_G;
  800c84:	00800844 	movi	r2,33
  800c88:	d0a74e15 	stw	r2,-25288(gp)

			// Set next traffic not to re-do RG
			if(next_traffic == NS){
  800c8c:	d0a75717 	ldw	r2,-25252(gp)
  800c90:	1000021e 	bne	r2,zero,800c9c <configurable_tlc+0x110>
				next_traffic = WE;
  800c94:	00800044 	movi	r2,1
  800c98:	d0a75715 	stw	r2,-25252(gp)
			}

			if(timeCountMain >= t[1]){
  800c9c:	00802074 	movhi	r2,129
  800ca0:	108d5004 	addi	r2,r2,13632
  800ca4:	10800117 	ldw	r2,4(r2)
  800ca8:	d0e75917 	ldw	r3,-25244(gp)
  800cac:	18805516 	blt	r3,r2,800e04 <configurable_tlc+0x278>
				traffic = RY;
  800cb0:	00800084 	movi	r2,2
  800cb4:	d0a75815 	stw	r2,-25248(gp)

				alt_alarm_stop(&timer);
  800cb8:	01002074 	movhi	r4,129
  800cbc:	211bf304 	addi	r4,r4,28620
  800cc0:	080f8e40 	call	80f8e4 <alt_alarm_stop>
				timeCountMain = 0;
  800cc4:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800cc8:	d0a75e17 	ldw	r2,-25224(gp)
  800ccc:	100f883a 	mov	r7,r2
  800cd0:	01802034 	movhi	r6,128
  800cd4:	3180e104 	addi	r6,r6,900
  800cd8:	01401904 	movi	r5,100
  800cdc:	01002074 	movhi	r4,129
  800ce0:	211bf304 	addi	r4,r4,28620
  800ce4:	080ebd40 	call	80ebd4 <alt_alarm_start>
			}
			break;
  800ce8:	00004606 	br	800e04 <configurable_tlc+0x278>
		case RY:
			// Set green leds
			LEDs = TWE_R + TNS_Y;
  800cec:	00800884 	movi	r2,34
  800cf0:	d0a74e15 	stw	r2,-25288(gp)

			if(timeCountMain >= t[2]){
  800cf4:	00802074 	movhi	r2,129
  800cf8:	108d5004 	addi	r2,r2,13632
  800cfc:	10800217 	ldw	r2,8(r2)
  800d00:	d0e75917 	ldw	r3,-25244(gp)
  800d04:	18804116 	blt	r3,r2,800e0c <configurable_tlc+0x280>
				traffic = RR;
  800d08:	d0275815 	stw	zero,-25248(gp)

				alt_alarm_stop(&timer);
  800d0c:	01002074 	movhi	r4,129
  800d10:	211bf304 	addi	r4,r4,28620
  800d14:	080f8e40 	call	80f8e4 <alt_alarm_stop>
				timeCountMain = 0;
  800d18:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800d1c:	d0a75e17 	ldw	r2,-25224(gp)
  800d20:	100f883a 	mov	r7,r2
  800d24:	01802034 	movhi	r6,128
  800d28:	3180e104 	addi	r6,r6,900
  800d2c:	01401904 	movi	r5,100
  800d30:	01002074 	movhi	r4,129
  800d34:	211bf304 	addi	r4,r4,28620
  800d38:	080ebd40 	call	80ebd4 <alt_alarm_start>
			}
			break;
  800d3c:	00003306 	br	800e0c <configurable_tlc+0x280>
		case GR:
			// Set green leds
			LEDs = TWE_G + TNS_R;
  800d40:	00800304 	movi	r2,12
  800d44:	d0a74e15 	stw	r2,-25288(gp)

			// Set next traffic not to re-do GR
			if(next_traffic == WE){
  800d48:	d0a75717 	ldw	r2,-25252(gp)
  800d4c:	10800058 	cmpnei	r2,r2,1
  800d50:	1000011e 	bne	r2,zero,800d58 <configurable_tlc+0x1cc>
				next_traffic = NS;
  800d54:	d0275715 	stw	zero,-25252(gp)
			}
			if(timeCountMain >= t[4]){
  800d58:	00802074 	movhi	r2,129
  800d5c:	108d5004 	addi	r2,r2,13632
  800d60:	10800417 	ldw	r2,16(r2)
  800d64:	d0e75917 	ldw	r3,-25244(gp)
  800d68:	18802a16 	blt	r3,r2,800e14 <configurable_tlc+0x288>
				traffic = YR;
  800d6c:	00800104 	movi	r2,4
  800d70:	d0a75815 	stw	r2,-25248(gp)

				alt_alarm_stop(&timer);
  800d74:	01002074 	movhi	r4,129
  800d78:	211bf304 	addi	r4,r4,28620
  800d7c:	080f8e40 	call	80f8e4 <alt_alarm_stop>
				timeCountMain = 0;
  800d80:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800d84:	d0a75e17 	ldw	r2,-25224(gp)
  800d88:	100f883a 	mov	r7,r2
  800d8c:	01802034 	movhi	r6,128
  800d90:	3180e104 	addi	r6,r6,900
  800d94:	01401904 	movi	r5,100
  800d98:	01002074 	movhi	r4,129
  800d9c:	211bf304 	addi	r4,r4,28620
  800da0:	080ebd40 	call	80ebd4 <alt_alarm_start>
			}
			break;
  800da4:	00001b06 	br	800e14 <configurable_tlc+0x288>
		case YR:
			// Set green leds
			LEDs = TWE_Y + TNS_R;
  800da8:	00800504 	movi	r2,20
  800dac:	d0a74e15 	stw	r2,-25288(gp)

			if(timeCountMain >= t[5]){
  800db0:	00802074 	movhi	r2,129
  800db4:	108d5004 	addi	r2,r2,13632
  800db8:	10800517 	ldw	r2,20(r2)
  800dbc:	d0e75917 	ldw	r3,-25244(gp)
  800dc0:	18801616 	blt	r3,r2,800e1c <configurable_tlc+0x290>
				traffic = RR;
  800dc4:	d0275815 	stw	zero,-25248(gp)

				alt_alarm_stop(&timer);
  800dc8:	01002074 	movhi	r4,129
  800dcc:	211bf304 	addi	r4,r4,28620
  800dd0:	080f8e40 	call	80f8e4 <alt_alarm_stop>
				timeCountMain = 0;
  800dd4:	d0275915 	stw	zero,-25244(gp)
				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800dd8:	d0a75e17 	ldw	r2,-25224(gp)
  800ddc:	100f883a 	mov	r7,r2
  800de0:	01802034 	movhi	r6,128
  800de4:	3180e104 	addi	r6,r6,900
  800de8:	01401904 	movi	r5,100
  800dec:	01002074 	movhi	r4,129
  800df0:	211bf304 	addi	r4,r4,28620
  800df4:	080ebd40 	call	80ebd4 <alt_alarm_start>
			}
			break;
  800df8:	00000806 	br	800e1c <configurable_tlc+0x290>
				timeCountMain = 0;

				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800dfc:	0001883a 	nop
  800e00:	00000706 	br	800e20 <configurable_tlc+0x294>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800e04:	0001883a 	nop
  800e08:	00000506 	br	800e20 <configurable_tlc+0x294>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800e0c:	0001883a 	nop
  800e10:	00000306 	br	800e20 <configurable_tlc+0x294>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800e14:	0001883a 	nop
  800e18:	00000106 	br	800e20 <configurable_tlc+0x294>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800e1c:	0001883a 	nop
	}
}
  800e20:	0001883a 	nop
  800e24:	e037883a 	mov	sp,fp
  800e28:	dfc00117 	ldw	ra,4(sp)
  800e2c:	df000017 	ldw	fp,0(sp)
  800e30:	dec00204 	addi	sp,sp,8
  800e34:	f800283a 	ret

00800e38 <camera_tlc>:

//implements the traffic light controller with integrated camera
void camera_tlc(){
  800e38:	defffc04 	addi	sp,sp,-16
  800e3c:	dfc00315 	stw	ra,12(sp)
  800e40:	df000215 	stw	fp,8(sp)
  800e44:	dc400115 	stw	r17,4(sp)
  800e48:	dc000015 	stw	r16,0(sp)
  800e4c:	df000204 	addi	fp,sp,8
	if(timeCountCamera >= 20 && cam_0 == monitoring){
  800e50:	d0a75417 	ldw	r2,-25264(gp)
  800e54:	10800510 	cmplti	r2,r2,20
  800e58:	10000e1e 	bne	r2,zero,800e94 <camera_tlc+0x5c>
  800e5c:	d0a75117 	ldw	r2,-25276(gp)
  800e60:	10800058 	cmpnei	r2,r2,1
  800e64:	10000b1e 	bne	r2,zero,800e94 <camera_tlc+0x5c>
		if(uart != NULL){
  800e68:	d0a75b17 	ldw	r2,-25236(gp)
  800e6c:	10000726 	beq	r2,zero,800e8c <camera_tlc+0x54>
			fprintf(uart, "Snapshot Taken!\r\n");
  800e70:	d0a75b17 	ldw	r2,-25236(gp)
  800e74:	100f883a 	mov	r7,r2
  800e78:	01800444 	movi	r6,17
  800e7c:	01400044 	movi	r5,1
  800e80:	01002074 	movhi	r4,129
  800e84:	210bc904 	addi	r4,r4,12068
  800e88:	080234c0 	call	80234c <fwrite>
		}
		cam_0 = taken;
  800e8c:	00800084 	movi	r2,2
  800e90:	d0a75115 	stw	r2,-25276(gp)
	}
	switch(traffic){
  800e94:	d0a75817 	ldw	r2,-25248(gp)
  800e98:	10c000a0 	cmpeqi	r3,r2,2
  800e9c:	18003f1e 	bne	r3,zero,800f9c <camera_tlc+0x164>
  800ea0:	10800120 	cmpeqi	r2,r2,4
  800ea4:	10007a26 	beq	r2,zero,801090 <camera_tlc+0x258>
		case YR:

			// Check that car has entered/exited

			//First if statement checks for recent change in car action.
			if(car_action == entered && previous_car_action != car_action){
  800ea8:	d0a75d17 	ldw	r2,-25228(gp)
  800eac:	1000171e 	bne	r2,zero,800f0c <camera_tlc+0xd4>
  800eb0:	d0e75f17 	ldw	r3,-25220(gp)
  800eb4:	d0a75d17 	ldw	r2,-25228(gp)
  800eb8:	18801426 	beq	r3,r2,800f0c <camera_tlc+0xd4>
				if(uart != NULL){
  800ebc:	d0a75b17 	ldw	r2,-25236(gp)
  800ec0:	10000726 	beq	r2,zero,800ee0 <camera_tlc+0xa8>
					fprintf(uart, "Camera activated\r\n");
  800ec4:	d0a75b17 	ldw	r2,-25236(gp)
  800ec8:	100f883a 	mov	r7,r2
  800ecc:	01800484 	movi	r6,18
  800ed0:	01400044 	movi	r5,1
  800ed4:	01002074 	movhi	r4,129
  800ed8:	210bce04 	addi	r4,r4,12088
  800edc:	080234c0 	call	80234c <fwrite>
				}
				alt_alarm_start(&timer1, 100, camera_timer_isr, timerCameraContext);
  800ee0:	d0a75517 	ldw	r2,-25260(gp)
  800ee4:	100f883a 	mov	r7,r2
  800ee8:	01802034 	movhi	r6,128
  800eec:	3180f104 	addi	r6,r6,964
  800ef0:	01401904 	movi	r5,100
  800ef4:	01002074 	movhi	r4,129
  800ef8:	211bf904 	addi	r4,r4,28644
  800efc:	080ebd40 	call	80ebd4 <alt_alarm_start>
				cam_0 = monitoring;
  800f00:	00800044 	movi	r2,1
  800f04:	d0a75115 	stw	r2,-25276(gp)

				alt_alarm_stop(&timer1);
				timeCountCamera = 0;
				cam_0 = standby;
			}
			break;
  800f08:	0000a506 	br	8011a0 <camera_tlc+0x368>
				}
				alt_alarm_start(&timer1, 100, camera_timer_isr, timerCameraContext);
				cam_0 = monitoring;

			//Check that the car has exited. Report time taken
			}else if(cam_0 != standby && car_action == exited){
  800f0c:	d0a75117 	ldw	r2,-25276(gp)
  800f10:	1000a326 	beq	r2,zero,8011a0 <camera_tlc+0x368>
  800f14:	d0a75d17 	ldw	r2,-25228(gp)
  800f18:	10800058 	cmpnei	r2,r2,1
  800f1c:	1000a01e 	bne	r2,zero,8011a0 <camera_tlc+0x368>
				if(uart != NULL){
  800f20:	d0a75b17 	ldw	r2,-25236(gp)
  800f24:	10001726 	beq	r2,zero,800f84 <camera_tlc+0x14c>
					fprintf(uart, "Vehicle left\r\n");
  800f28:	d0a75b17 	ldw	r2,-25236(gp)
  800f2c:	100f883a 	mov	r7,r2
  800f30:	01800384 	movi	r6,14
  800f34:	01400044 	movi	r5,1
  800f38:	01002074 	movhi	r4,129
  800f3c:	210bd304 	addi	r4,r4,12108
  800f40:	080234c0 	call	80234c <fwrite>
					fprintf(uart, "Vehicle time in intersection taken: %d.%d seconds\r\n\n",
  800f44:	d4275b17 	ldw	r16,-25236(gp)
  800f48:	d0a75417 	ldw	r2,-25264(gp)
  800f4c:	01400284 	movi	r5,10
  800f50:	1009883a 	mov	r4,r2
  800f54:	08013c00 	call	8013c0 <__divsi3>
  800f58:	1023883a 	mov	r17,r2
  800f5c:	d0a75417 	ldw	r2,-25264(gp)
  800f60:	01400284 	movi	r5,10
  800f64:	1009883a 	mov	r4,r2
  800f68:	08014440 	call	801444 <__modsi3>
  800f6c:	100f883a 	mov	r7,r2
  800f70:	880d883a 	mov	r6,r17
  800f74:	01402074 	movhi	r5,129
  800f78:	294bd704 	addi	r5,r5,12124
  800f7c:	8009883a 	mov	r4,r16
  800f80:	0801b580 	call	801b58 <fprintf>
											timeCountCamera / 10, timeCountCamera % 10);
				}

				alt_alarm_stop(&timer1);
  800f84:	01002074 	movhi	r4,129
  800f88:	211bf904 	addi	r4,r4,28644
  800f8c:	080f8e40 	call	80f8e4 <alt_alarm_stop>
				timeCountCamera = 0;
  800f90:	d0275415 	stw	zero,-25264(gp)
				cam_0 = standby;
  800f94:	d0275115 	stw	zero,-25276(gp)
			}
			break;
  800f98:	00008106 	br	8011a0 <camera_tlc+0x368>

		case RY:
			// Check that car has entered/exited

			//First if statement checks for recent change in car action.
			if(car_action == entered && previous_car_action != car_action){
  800f9c:	d0a75d17 	ldw	r2,-25228(gp)
  800fa0:	1000171e 	bne	r2,zero,801000 <camera_tlc+0x1c8>
  800fa4:	d0e75f17 	ldw	r3,-25220(gp)
  800fa8:	d0a75d17 	ldw	r2,-25228(gp)
  800fac:	18801426 	beq	r3,r2,801000 <camera_tlc+0x1c8>
				if(uart != NULL){
  800fb0:	d0a75b17 	ldw	r2,-25236(gp)
  800fb4:	10000726 	beq	r2,zero,800fd4 <camera_tlc+0x19c>
					fprintf(uart, "Camera activated\r\n");
  800fb8:	d0a75b17 	ldw	r2,-25236(gp)
  800fbc:	100f883a 	mov	r7,r2
  800fc0:	01800484 	movi	r6,18
  800fc4:	01400044 	movi	r5,1
  800fc8:	01002074 	movhi	r4,129
  800fcc:	210bce04 	addi	r4,r4,12088
  800fd0:	080234c0 	call	80234c <fwrite>
				}
				alt_alarm_start(&timer1, 100, camera_timer_isr, timerCameraContext);
  800fd4:	d0a75517 	ldw	r2,-25260(gp)
  800fd8:	100f883a 	mov	r7,r2
  800fdc:	01802034 	movhi	r6,128
  800fe0:	3180f104 	addi	r6,r6,964
  800fe4:	01401904 	movi	r5,100
  800fe8:	01002074 	movhi	r4,129
  800fec:	211bf904 	addi	r4,r4,28644
  800ff0:	080ebd40 	call	80ebd4 <alt_alarm_start>
				cam_0 = monitoring;
  800ff4:	00800044 	movi	r2,1
  800ff8:	d0a75115 	stw	r2,-25276(gp)
				}
				alt_alarm_stop(&timer1);
				timeCountCamera = 0;
				cam_0 = standby;
			}
			break;
  800ffc:	00006a06 	br	8011a8 <camera_tlc+0x370>
				}
				alt_alarm_start(&timer1, 100, camera_timer_isr, timerCameraContext);
				cam_0 = monitoring;

			//Check that the car has exited. Report time taken
			}else if(cam_0 != standby && car_action == exited){
  801000:	d0a75117 	ldw	r2,-25276(gp)
  801004:	10006826 	beq	r2,zero,8011a8 <camera_tlc+0x370>
  801008:	d0a75d17 	ldw	r2,-25228(gp)
  80100c:	10800058 	cmpnei	r2,r2,1
  801010:	1000651e 	bne	r2,zero,8011a8 <camera_tlc+0x370>
				if(uart != NULL){
  801014:	d0a75b17 	ldw	r2,-25236(gp)
  801018:	10001726 	beq	r2,zero,801078 <camera_tlc+0x240>
					fprintf(uart, "Vehicle left\r\n");
  80101c:	d0a75b17 	ldw	r2,-25236(gp)
  801020:	100f883a 	mov	r7,r2
  801024:	01800384 	movi	r6,14
  801028:	01400044 	movi	r5,1
  80102c:	01002074 	movhi	r4,129
  801030:	210bd304 	addi	r4,r4,12108
  801034:	080234c0 	call	80234c <fwrite>
					fprintf(uart, "Vehicle time in intersection taken: %d.%d seconds\r\n\n",
  801038:	d4275b17 	ldw	r16,-25236(gp)
  80103c:	d0a75417 	ldw	r2,-25264(gp)
  801040:	01400284 	movi	r5,10
  801044:	1009883a 	mov	r4,r2
  801048:	08013c00 	call	8013c0 <__divsi3>
  80104c:	1023883a 	mov	r17,r2
  801050:	d0a75417 	ldw	r2,-25264(gp)
  801054:	01400284 	movi	r5,10
  801058:	1009883a 	mov	r4,r2
  80105c:	08014440 	call	801444 <__modsi3>
  801060:	100f883a 	mov	r7,r2
  801064:	880d883a 	mov	r6,r17
  801068:	01402074 	movhi	r5,129
  80106c:	294bd704 	addi	r5,r5,12124
  801070:	8009883a 	mov	r4,r16
  801074:	0801b580 	call	801b58 <fprintf>
											timeCountCamera / 10, timeCountCamera % 10);
				}
				alt_alarm_stop(&timer1);
  801078:	01002074 	movhi	r4,129
  80107c:	211bf904 	addi	r4,r4,28644
  801080:	080f8e40 	call	80f8e4 <alt_alarm_stop>
				timeCountCamera = 0;
  801084:	d0275415 	stw	zero,-25264(gp)
				cam_0 = standby;
  801088:	d0275115 	stw	zero,-25276(gp)
			}
			break;
  80108c:	00004606 	br	8011a8 <camera_tlc+0x370>
			 * Other states such as RG, GR and RR.
			 * Take picture immediately when car passes on button click.
			 */

			// Check for change in car action.
			if(previous_car_action != car_action){
  801090:	d0e75f17 	ldw	r3,-25220(gp)
  801094:	d0a75d17 	ldw	r2,-25228(gp)
  801098:	18804526 	beq	r3,r2,8011b0 <camera_tlc+0x378>

				//Check that the snapshot is not taken and changed to entered state.
				if(car_action == entered && cam_0 == standby){
  80109c:	d0a75d17 	ldw	r2,-25228(gp)
  8010a0:	10001d1e 	bne	r2,zero,801118 <camera_tlc+0x2e0>
  8010a4:	d0a75117 	ldw	r2,-25276(gp)
  8010a8:	10001b1e 	bne	r2,zero,801118 <camera_tlc+0x2e0>
					alt_alarm_start(&timer1, 100, camera_timer_isr, timerCameraContext);
  8010ac:	d0a75517 	ldw	r2,-25260(gp)
  8010b0:	100f883a 	mov	r7,r2
  8010b4:	01802034 	movhi	r6,128
  8010b8:	3180f104 	addi	r6,r6,964
  8010bc:	01401904 	movi	r5,100
  8010c0:	01002074 	movhi	r4,129
  8010c4:	211bf904 	addi	r4,r4,28644
  8010c8:	080ebd40 	call	80ebd4 <alt_alarm_start>
					if(uart != NULL){
  8010cc:	d0a75b17 	ldw	r2,-25236(gp)
  8010d0:	10000e26 	beq	r2,zero,80110c <camera_tlc+0x2d4>
						fprintf(uart, "Camera activated\r\n");
  8010d4:	d0a75b17 	ldw	r2,-25236(gp)
  8010d8:	100f883a 	mov	r7,r2
  8010dc:	01800484 	movi	r6,18
  8010e0:	01400044 	movi	r5,1
  8010e4:	01002074 	movhi	r4,129
  8010e8:	210bce04 	addi	r4,r4,12088
  8010ec:	080234c0 	call	80234c <fwrite>
						fprintf(uart, "Snapshot Taken!\r\n");
  8010f0:	d0a75b17 	ldw	r2,-25236(gp)
  8010f4:	100f883a 	mov	r7,r2
  8010f8:	01800444 	movi	r6,17
  8010fc:	01400044 	movi	r5,1
  801100:	01002074 	movhi	r4,129
  801104:	210bc904 	addi	r4,r4,12068
  801108:	080234c0 	call	80234c <fwrite>
					}
					cam_0 = taken;
  80110c:	00800084 	movi	r2,2
  801110:	d0a75115 	stw	r2,-25276(gp)
					timeCountCamera = 0;
					cam_0 = standby;
				}
			}

			break;
  801114:	00002606 	br	8011b0 <camera_tlc+0x378>
						fprintf(uart, "Snapshot Taken!\r\n");
					}
					cam_0 = taken;

				//Anytime the vehicle exits
				}else if(car_action == exited){
  801118:	d0a75d17 	ldw	r2,-25228(gp)
  80111c:	10800058 	cmpnei	r2,r2,1
  801120:	1000231e 	bne	r2,zero,8011b0 <camera_tlc+0x378>
					if(uart != NULL){
  801124:	d0a75b17 	ldw	r2,-25236(gp)
  801128:	10001726 	beq	r2,zero,801188 <camera_tlc+0x350>
						fprintf(uart, "Vehicle left\r\n");
  80112c:	d0a75b17 	ldw	r2,-25236(gp)
  801130:	100f883a 	mov	r7,r2
  801134:	01800384 	movi	r6,14
  801138:	01400044 	movi	r5,1
  80113c:	01002074 	movhi	r4,129
  801140:	210bd304 	addi	r4,r4,12108
  801144:	080234c0 	call	80234c <fwrite>
						fprintf(uart, "Vehicle time in intersection taken: %d.%d seconds\r\n\n",
  801148:	d4275b17 	ldw	r16,-25236(gp)
  80114c:	d0a75417 	ldw	r2,-25264(gp)
  801150:	01400284 	movi	r5,10
  801154:	1009883a 	mov	r4,r2
  801158:	08013c00 	call	8013c0 <__divsi3>
  80115c:	1023883a 	mov	r17,r2
  801160:	d0a75417 	ldw	r2,-25264(gp)
  801164:	01400284 	movi	r5,10
  801168:	1009883a 	mov	r4,r2
  80116c:	08014440 	call	801444 <__modsi3>
  801170:	100f883a 	mov	r7,r2
  801174:	880d883a 	mov	r6,r17
  801178:	01402074 	movhi	r5,129
  80117c:	294bd704 	addi	r5,r5,12124
  801180:	8009883a 	mov	r4,r16
  801184:	0801b580 	call	801b58 <fprintf>
												timeCountCamera / 10, timeCountCamera % 10);
					}
					alt_alarm_stop(&timer1);
  801188:	01002074 	movhi	r4,129
  80118c:	211bf904 	addi	r4,r4,28644
  801190:	080f8e40 	call	80f8e4 <alt_alarm_stop>
					timeCountCamera = 0;
  801194:	d0275415 	stw	zero,-25264(gp)
					cam_0 = standby;
  801198:	d0275115 	stw	zero,-25276(gp)
				}
			}

			break;
  80119c:	00000406 	br	8011b0 <camera_tlc+0x378>

				alt_alarm_stop(&timer1);
				timeCountCamera = 0;
				cam_0 = standby;
			}
			break;
  8011a0:	0001883a 	nop
  8011a4:	00000306 	br	8011b4 <camera_tlc+0x37c>
				}
				alt_alarm_stop(&timer1);
				timeCountCamera = 0;
				cam_0 = standby;
			}
			break;
  8011a8:	0001883a 	nop
  8011ac:	00000106 	br	8011b4 <camera_tlc+0x37c>
					timeCountCamera = 0;
					cam_0 = standby;
				}
			}

			break;
  8011b0:	0001883a 	nop
	}
	previous_car_action = car_action;
  8011b4:	d0a75d17 	ldw	r2,-25228(gp)
  8011b8:	d0a75f15 	stw	r2,-25220(gp)
}
  8011bc:	0001883a 	nop
  8011c0:	e6fffe04 	addi	sp,fp,-8
  8011c4:	dfc00317 	ldw	ra,12(sp)
  8011c8:	df000217 	ldw	fp,8(sp)
  8011cc:	dc400117 	ldw	r17,4(sp)
  8011d0:	dc000017 	ldw	r16,0(sp)
  8011d4:	dec00404 	addi	sp,sp,16
  8011d8:	f800283a 	ret

008011dc <main>:




int main() {
  8011dc:	defffe04 	addi	sp,sp,-8
  8011e0:	dfc00115 	stw	ra,4(sp)
  8011e4:	df000015 	stw	fp,0(sp)
  8011e8:	d839883a 	mov	fp,sp
	// Initialise
	car_action = exited;
  8011ec:	00800044 	movi	r2,1
  8011f0:	d0a75d15 	stw	r2,-25228(gp)
	previous_car_action = exited;
  8011f4:	00800044 	movi	r2,1
  8011f8:	d0a75f15 	stw	r2,-25220(gp)
	pedNS = idle;
  8011fc:	d0275315 	stw	zero,-25268(gp)
	pedWE = idle;
  801200:	d0275c15 	stw	zero,-25232(gp)
	traffic = RR;
  801204:	d0275815 	stw	zero,-25248(gp)
	next_traffic = NS;
  801208:	d0275715 	stw	zero,-25252(gp)
	cam_0 = standby;
  80120c:	d0275115 	stw	zero,-25276(gp)

	/*
	 * Make sure only the 2 switches on the right will change the mode of the simulation.
	 * +1 will make sure mode is {1,2,3,4}.
	 */
	mode = (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) % 4) + 1;
  801210:	00804074 	movhi	r2,257
  801214:	10842804 	addi	r2,r2,4256
  801218:	10c00037 	ldwio	r3,0(r2)
  80121c:	00a00034 	movhi	r2,32768
  801220:	108000c4 	addi	r2,r2,3
  801224:	1884703a 	and	r2,r3,r2
  801228:	1000040e 	bge	r2,zero,80123c <main+0x60>
  80122c:	10bfffc4 	addi	r2,r2,-1
  801230:	00ffff04 	movi	r3,-4
  801234:	10c4b03a 	or	r2,r2,r3
  801238:	10800044 	addi	r2,r2,1
  80123c:	10800044 	addi	r2,r2,1
  801240:	d0a75615 	stw	r2,-25256(gp)

	lcd = fopen(LCD_NAME, "w");
  801244:	01402074 	movhi	r5,129
  801248:	294be504 	addi	r5,r5,12180
  80124c:	01002074 	movhi	r4,129
  801250:	210be604 	addi	r4,r4,12184
  801254:	0801b180 	call	801b18 <fopen>
  801258:	d0a75215 	stw	r2,-25272(gp)
	uart = fopen(UART_NAME, "r+");
  80125c:	01402074 	movhi	r5,129
  801260:	294be904 	addi	r5,r5,12196
  801264:	01002074 	movhi	r4,129
  801268:	210bea04 	addi	r4,r4,12200
  80126c:	0801b180 	call	801b18 <fopen>
  801270:	d0a75b15 	stw	r2,-25236(gp)

	/*
	 * Buttons Interrupt Setup
	 */
	context_going_to_be_passed = (void*) &buttonValue;
  801274:	d0a74f04 	addi	r2,gp,-25284
  801278:	d0a76015 	stw	r2,-25216(gp)
	// clears the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  80127c:	0007883a 	mov	r3,zero
  801280:	00804074 	movhi	r2,257
  801284:	10842704 	addi	r2,r2,4252
  801288:	10c00035 	stwio	r3,0(r2)
	// enable interrupts for all buttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);
  80128c:	00c001c4 	movi	r3,7
  801290:	00804074 	movhi	r2,257
  801294:	10842604 	addi	r2,r2,4248
  801298:	10c00035 	stwio	r3,0(r2)
	// register the ISR
	alt_irq_register(KEYS_IRQ,context_going_to_be_passed,init_buttons_pio);
  80129c:	d0a76017 	ldw	r2,-25216(gp)
  8012a0:	01802034 	movhi	r6,128
  8012a4:	3180a404 	addi	r6,r6,656
  8012a8:	100b883a 	mov	r5,r2
  8012ac:	0009883a 	mov	r4,zero
  8012b0:	080ef240 	call	80ef24 <alt_irq_register>

	/*
	 * Timer interrupt Setup
	 */
	// start the tlc timer, with timeout of 100 milli-seconds
	timeCountMain = 0;
  8012b4:	d0275915 	stw	zero,-25244(gp)
	timerContext = (void*) &timeCountMain;
  8012b8:	d0a75904 	addi	r2,gp,-25244
  8012bc:	d0a75e15 	stw	r2,-25224(gp)
	alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  8012c0:	d0a75e17 	ldw	r2,-25224(gp)
  8012c4:	100f883a 	mov	r7,r2
  8012c8:	01802034 	movhi	r6,128
  8012cc:	3180e104 	addi	r6,r6,900
  8012d0:	01401904 	movi	r5,100
  8012d4:	01002074 	movhi	r4,129
  8012d8:	211bf304 	addi	r4,r4,28620
  8012dc:	080ebd40 	call	80ebd4 <alt_alarm_start>

	timeCountCamera = 0;
  8012e0:	d0275415 	stw	zero,-25264(gp)
	timerCameraContext = (void*) &timeCountCamera;
  8012e4:	d0a75404 	addi	r2,gp,-25264
  8012e8:	d0a75515 	stw	r2,-25260(gp)
		 * This function gets the switches setup and prints the value of mode on LCD.
		 * LCD re-print only happens when the mode has changed.
		 * The mode can only change in the condition that traffic state is on RR.
		 * Reset some settings to initial when switches changed.
		 */
		if(traffic == RR){
  8012ec:	d0a75817 	ldw	r2,-25248(gp)
  8012f0:	1000181e 	bne	r2,zero,801354 <main+0x178>
			mode = (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) % 4) + 1;
  8012f4:	00804074 	movhi	r2,257
  8012f8:	10842804 	addi	r2,r2,4256
  8012fc:	10c00037 	ldwio	r3,0(r2)
  801300:	00a00034 	movhi	r2,32768
  801304:	108000c4 	addi	r2,r2,3
  801308:	1884703a 	and	r2,r3,r2
  80130c:	1000040e 	bge	r2,zero,801320 <main+0x144>
  801310:	10bfffc4 	addi	r2,r2,-1
  801314:	00ffff04 	movi	r3,-4
  801318:	10c4b03a 	or	r2,r2,r3
  80131c:	10800044 	addi	r2,r2,1
  801320:	10800044 	addi	r2,r2,1
  801324:	d0a75615 	stw	r2,-25256(gp)
			if(mode != previousMode){
  801328:	d0e75617 	ldw	r3,-25256(gp)
  80132c:	d0a75a17 	ldw	r2,-25240(gp)
  801330:	18800626 	beq	r3,r2,80134c <main+0x170>
				lcd_set_mode(mode);
  801334:	d0a75617 	ldw	r2,-25256(gp)
  801338:	1009883a 	mov	r4,r2
  80133c:	08004040 	call	800404 <lcd_set_mode>
				car_action = exited;
  801340:	00800044 	movi	r2,1
  801344:	d0a75d15 	stw	r2,-25228(gp)
				settings_made = 0;
  801348:	d0275015 	stw	zero,-25280(gp)
			}
			previousMode = mode;
  80134c:	d0a75617 	ldw	r2,-25256(gp)
  801350:	d0a75a15 	stw	r2,-25240(gp)

		/*
		 * Different modes
		 */
		// If mode is not 3 because modes 1, 2 and 4 uses simple_tlc
		if(mode != 3){
  801354:	d0a75617 	ldw	r2,-25256(gp)
  801358:	108000e0 	cmpeqi	r2,r2,3
  80135c:	10000a1e 	bne	r2,zero,801388 <main+0x1ac>
			simple_tlc();
  801360:	08008540 	call	800854 <simple_tlc>

			//Only mode one does not utilise pedestrian crossing
			if(mode == 2){
  801364:	d0a75617 	ldw	r2,-25256(gp)
  801368:	10800098 	cmpnei	r2,r2,2
  80136c:	1000011e 	bne	r2,zero,801374 <main+0x198>
				pedestrian_tlc();
  801370:	0800a940 	call	800a94 <pedestrian_tlc>
			}
			if(mode == 4){
  801374:	d0a75617 	ldw	r2,-25256(gp)
  801378:	10800118 	cmpnei	r2,r2,4
  80137c:	10000b1e 	bne	r2,zero,8013ac <main+0x1d0>
				camera_tlc();
  801380:	0800e380 	call	800e38 <camera_tlc>
  801384:	00000906 	br	8013ac <main+0x1d0>
			}
		}else{
			if(traffic == RR && IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 6 ){
  801388:	d0a75817 	ldw	r2,-25248(gp)
  80138c:	1000061e 	bne	r2,zero,8013a8 <main+0x1cc>
  801390:	00804074 	movhi	r2,257
  801394:	10842804 	addi	r2,r2,4256
  801398:	10800037 	ldwio	r2,0(r2)
  80139c:	10800198 	cmpnei	r2,r2,6
  8013a0:	1000011e 	bne	r2,zero,8013a8 <main+0x1cc>
				timeout_data_handler();
  8013a4:	08004700 	call	800470 <timeout_data_handler>
			}
			configurable_tlc();
  8013a8:	0800b8c0 	call	800b8c <configurable_tlc>

		}


		//Turns on LEDs based on TLC
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, LEDs);
  8013ac:	d0e74e17 	ldw	r3,-25288(gp)
  8013b0:	00804074 	movhi	r2,257
  8013b4:	10842004 	addi	r2,r2,4224
  8013b8:	10c00035 	stwio	r3,0(r2)

	}
  8013bc:	003fcb06 	br	8012ec <__alt_mem_onchip_mem+0xff7f92ec>

008013c0 <__divsi3>:
  8013c0:	20001b16 	blt	r4,zero,801430 <__divsi3+0x70>
  8013c4:	000f883a 	mov	r7,zero
  8013c8:	28001616 	blt	r5,zero,801424 <__divsi3+0x64>
  8013cc:	200d883a 	mov	r6,r4
  8013d0:	29001a2e 	bgeu	r5,r4,80143c <__divsi3+0x7c>
  8013d4:	00800804 	movi	r2,32
  8013d8:	00c00044 	movi	r3,1
  8013dc:	00000106 	br	8013e4 <__divsi3+0x24>
  8013e0:	10000d26 	beq	r2,zero,801418 <__divsi3+0x58>
  8013e4:	294b883a 	add	r5,r5,r5
  8013e8:	10bfffc4 	addi	r2,r2,-1
  8013ec:	18c7883a 	add	r3,r3,r3
  8013f0:	293ffb36 	bltu	r5,r4,8013e0 <__alt_mem_onchip_mem+0xff7f93e0>
  8013f4:	0005883a 	mov	r2,zero
  8013f8:	18000726 	beq	r3,zero,801418 <__divsi3+0x58>
  8013fc:	0005883a 	mov	r2,zero
  801400:	31400236 	bltu	r6,r5,80140c <__divsi3+0x4c>
  801404:	314dc83a 	sub	r6,r6,r5
  801408:	10c4b03a 	or	r2,r2,r3
  80140c:	1806d07a 	srli	r3,r3,1
  801410:	280ad07a 	srli	r5,r5,1
  801414:	183ffa1e 	bne	r3,zero,801400 <__alt_mem_onchip_mem+0xff7f9400>
  801418:	38000126 	beq	r7,zero,801420 <__divsi3+0x60>
  80141c:	0085c83a 	sub	r2,zero,r2
  801420:	f800283a 	ret
  801424:	014bc83a 	sub	r5,zero,r5
  801428:	39c0005c 	xori	r7,r7,1
  80142c:	003fe706 	br	8013cc <__alt_mem_onchip_mem+0xff7f93cc>
  801430:	0109c83a 	sub	r4,zero,r4
  801434:	01c00044 	movi	r7,1
  801438:	003fe306 	br	8013c8 <__alt_mem_onchip_mem+0xff7f93c8>
  80143c:	00c00044 	movi	r3,1
  801440:	003fee06 	br	8013fc <__alt_mem_onchip_mem+0xff7f93fc>

00801444 <__modsi3>:
  801444:	20001716 	blt	r4,zero,8014a4 <__modsi3+0x60>
  801448:	000f883a 	mov	r7,zero
  80144c:	2005883a 	mov	r2,r4
  801450:	28001216 	blt	r5,zero,80149c <__modsi3+0x58>
  801454:	2900162e 	bgeu	r5,r4,8014b0 <__modsi3+0x6c>
  801458:	01800804 	movi	r6,32
  80145c:	00c00044 	movi	r3,1
  801460:	00000106 	br	801468 <__modsi3+0x24>
  801464:	30000a26 	beq	r6,zero,801490 <__modsi3+0x4c>
  801468:	294b883a 	add	r5,r5,r5
  80146c:	31bfffc4 	addi	r6,r6,-1
  801470:	18c7883a 	add	r3,r3,r3
  801474:	293ffb36 	bltu	r5,r4,801464 <__alt_mem_onchip_mem+0xff7f9464>
  801478:	18000526 	beq	r3,zero,801490 <__modsi3+0x4c>
  80147c:	1806d07a 	srli	r3,r3,1
  801480:	11400136 	bltu	r2,r5,801488 <__modsi3+0x44>
  801484:	1145c83a 	sub	r2,r2,r5
  801488:	280ad07a 	srli	r5,r5,1
  80148c:	183ffb1e 	bne	r3,zero,80147c <__alt_mem_onchip_mem+0xff7f947c>
  801490:	38000126 	beq	r7,zero,801498 <__modsi3+0x54>
  801494:	0085c83a 	sub	r2,zero,r2
  801498:	f800283a 	ret
  80149c:	014bc83a 	sub	r5,zero,r5
  8014a0:	003fec06 	br	801454 <__alt_mem_onchip_mem+0xff7f9454>
  8014a4:	0109c83a 	sub	r4,zero,r4
  8014a8:	01c00044 	movi	r7,1
  8014ac:	003fe706 	br	80144c <__alt_mem_onchip_mem+0xff7f944c>
  8014b0:	00c00044 	movi	r3,1
  8014b4:	003ff106 	br	80147c <__alt_mem_onchip_mem+0xff7f947c>

008014b8 <__udivsi3>:
  8014b8:	200d883a 	mov	r6,r4
  8014bc:	2900152e 	bgeu	r5,r4,801514 <__udivsi3+0x5c>
  8014c0:	28001416 	blt	r5,zero,801514 <__udivsi3+0x5c>
  8014c4:	00800804 	movi	r2,32
  8014c8:	00c00044 	movi	r3,1
  8014cc:	00000206 	br	8014d8 <__udivsi3+0x20>
  8014d0:	10000e26 	beq	r2,zero,80150c <__udivsi3+0x54>
  8014d4:	28000516 	blt	r5,zero,8014ec <__udivsi3+0x34>
  8014d8:	294b883a 	add	r5,r5,r5
  8014dc:	10bfffc4 	addi	r2,r2,-1
  8014e0:	18c7883a 	add	r3,r3,r3
  8014e4:	293ffa36 	bltu	r5,r4,8014d0 <__alt_mem_onchip_mem+0xff7f94d0>
  8014e8:	18000826 	beq	r3,zero,80150c <__udivsi3+0x54>
  8014ec:	0005883a 	mov	r2,zero
  8014f0:	31400236 	bltu	r6,r5,8014fc <__udivsi3+0x44>
  8014f4:	314dc83a 	sub	r6,r6,r5
  8014f8:	10c4b03a 	or	r2,r2,r3
  8014fc:	1806d07a 	srli	r3,r3,1
  801500:	280ad07a 	srli	r5,r5,1
  801504:	183ffa1e 	bne	r3,zero,8014f0 <__alt_mem_onchip_mem+0xff7f94f0>
  801508:	f800283a 	ret
  80150c:	0005883a 	mov	r2,zero
  801510:	f800283a 	ret
  801514:	00c00044 	movi	r3,1
  801518:	003ff406 	br	8014ec <__alt_mem_onchip_mem+0xff7f94ec>

0080151c <__umodsi3>:
  80151c:	2005883a 	mov	r2,r4
  801520:	2900122e 	bgeu	r5,r4,80156c <__umodsi3+0x50>
  801524:	28001116 	blt	r5,zero,80156c <__umodsi3+0x50>
  801528:	01800804 	movi	r6,32
  80152c:	00c00044 	movi	r3,1
  801530:	00000206 	br	80153c <__umodsi3+0x20>
  801534:	30000c26 	beq	r6,zero,801568 <__umodsi3+0x4c>
  801538:	28000516 	blt	r5,zero,801550 <__umodsi3+0x34>
  80153c:	294b883a 	add	r5,r5,r5
  801540:	31bfffc4 	addi	r6,r6,-1
  801544:	18c7883a 	add	r3,r3,r3
  801548:	293ffa36 	bltu	r5,r4,801534 <__alt_mem_onchip_mem+0xff7f9534>
  80154c:	18000626 	beq	r3,zero,801568 <__umodsi3+0x4c>
  801550:	1806d07a 	srli	r3,r3,1
  801554:	11400136 	bltu	r2,r5,80155c <__umodsi3+0x40>
  801558:	1145c83a 	sub	r2,r2,r5
  80155c:	280ad07a 	srli	r5,r5,1
  801560:	183ffb1e 	bne	r3,zero,801550 <__alt_mem_onchip_mem+0xff7f9550>
  801564:	f800283a 	ret
  801568:	f800283a 	ret
  80156c:	00c00044 	movi	r3,1
  801570:	003ff706 	br	801550 <__alt_mem_onchip_mem+0xff7f9550>

00801574 <atoi>:
  801574:	01800284 	movi	r6,10
  801578:	000b883a 	mov	r5,zero
  80157c:	08036e41 	jmpi	8036e4 <strtol>

00801580 <_atoi_r>:
  801580:	01c00284 	movi	r7,10
  801584:	000d883a 	mov	r6,zero
  801588:	08034ac1 	jmpi	8034ac <_strtol_r>

0080158c <_fgetc_r>:
  80158c:	defffd04 	addi	sp,sp,-12
  801590:	dc000115 	stw	r16,4(sp)
  801594:	dfc00215 	stw	ra,8(sp)
  801598:	2021883a 	mov	r16,r4
  80159c:	20000226 	beq	r4,zero,8015a8 <_fgetc_r+0x1c>
  8015a0:	20800e17 	ldw	r2,56(r4)
  8015a4:	10000c26 	beq	r2,zero,8015d8 <_fgetc_r+0x4c>
  8015a8:	28800117 	ldw	r2,4(r5)
  8015ac:	10bfffc4 	addi	r2,r2,-1
  8015b0:	28800115 	stw	r2,4(r5)
  8015b4:	10000c16 	blt	r2,zero,8015e8 <_fgetc_r+0x5c>
  8015b8:	28800017 	ldw	r2,0(r5)
  8015bc:	10c00044 	addi	r3,r2,1
  8015c0:	28c00015 	stw	r3,0(r5)
  8015c4:	10800003 	ldbu	r2,0(r2)
  8015c8:	dfc00217 	ldw	ra,8(sp)
  8015cc:	dc000117 	ldw	r16,4(sp)
  8015d0:	dec00304 	addi	sp,sp,12
  8015d4:	f800283a 	ret
  8015d8:	d9400015 	stw	r5,0(sp)
  8015dc:	08019d40 	call	8019d4 <__sinit>
  8015e0:	d9400017 	ldw	r5,0(sp)
  8015e4:	003ff006 	br	8015a8 <__alt_mem_onchip_mem+0xff7f95a8>
  8015e8:	8009883a 	mov	r4,r16
  8015ec:	dfc00217 	ldw	ra,8(sp)
  8015f0:	dc000117 	ldw	r16,4(sp)
  8015f4:	dec00304 	addi	sp,sp,12
  8015f8:	08032941 	jmpi	803294 <__srget_r>

008015fc <fgetc>:
  8015fc:	00802074 	movhi	r2,129
  801600:	defffd04 	addi	sp,sp,-12
  801604:	10947b04 	addi	r2,r2,20972
  801608:	dc400115 	stw	r17,4(sp)
  80160c:	14400017 	ldw	r17,0(r2)
  801610:	dc000015 	stw	r16,0(sp)
  801614:	dfc00215 	stw	ra,8(sp)
  801618:	2021883a 	mov	r16,r4
  80161c:	88000226 	beq	r17,zero,801628 <fgetc+0x2c>
  801620:	88800e17 	ldw	r2,56(r17)
  801624:	10000d26 	beq	r2,zero,80165c <fgetc+0x60>
  801628:	80800117 	ldw	r2,4(r16)
  80162c:	10bfffc4 	addi	r2,r2,-1
  801630:	80800115 	stw	r2,4(r16)
  801634:	10000c16 	blt	r2,zero,801668 <fgetc+0x6c>
  801638:	80800017 	ldw	r2,0(r16)
  80163c:	10c00044 	addi	r3,r2,1
  801640:	80c00015 	stw	r3,0(r16)
  801644:	10800003 	ldbu	r2,0(r2)
  801648:	dfc00217 	ldw	ra,8(sp)
  80164c:	dc400117 	ldw	r17,4(sp)
  801650:	dc000017 	ldw	r16,0(sp)
  801654:	dec00304 	addi	sp,sp,12
  801658:	f800283a 	ret
  80165c:	8809883a 	mov	r4,r17
  801660:	08019d40 	call	8019d4 <__sinit>
  801664:	003ff006 	br	801628 <__alt_mem_onchip_mem+0xff7f9628>
  801668:	800b883a 	mov	r5,r16
  80166c:	8809883a 	mov	r4,r17
  801670:	dfc00217 	ldw	ra,8(sp)
  801674:	dc400117 	ldw	r17,4(sp)
  801678:	dc000017 	ldw	r16,0(sp)
  80167c:	dec00304 	addi	sp,sp,12
  801680:	08032941 	jmpi	803294 <__srget_r>

00801684 <__fp_unlock>:
  801684:	0005883a 	mov	r2,zero
  801688:	f800283a 	ret

0080168c <_cleanup_r>:
  80168c:	01402034 	movhi	r5,128
  801690:	295d6e04 	addi	r5,r5,30136
  801694:	08021bc1 	jmpi	8021bc <_fwalk_reent>

00801698 <__sinit.part.1>:
  801698:	defff704 	addi	sp,sp,-36
  80169c:	00c02034 	movhi	r3,128
  8016a0:	dfc00815 	stw	ra,32(sp)
  8016a4:	ddc00715 	stw	r23,28(sp)
  8016a8:	dd800615 	stw	r22,24(sp)
  8016ac:	dd400515 	stw	r21,20(sp)
  8016b0:	dd000415 	stw	r20,16(sp)
  8016b4:	dcc00315 	stw	r19,12(sp)
  8016b8:	dc800215 	stw	r18,8(sp)
  8016bc:	dc400115 	stw	r17,4(sp)
  8016c0:	dc000015 	stw	r16,0(sp)
  8016c4:	18c5a304 	addi	r3,r3,5772
  8016c8:	24000117 	ldw	r16,4(r4)
  8016cc:	20c00f15 	stw	r3,60(r4)
  8016d0:	2080bb04 	addi	r2,r4,748
  8016d4:	00c000c4 	movi	r3,3
  8016d8:	20c0b915 	stw	r3,740(r4)
  8016dc:	2080ba15 	stw	r2,744(r4)
  8016e0:	2000b815 	stw	zero,736(r4)
  8016e4:	05c00204 	movi	r23,8
  8016e8:	00800104 	movi	r2,4
  8016ec:	2025883a 	mov	r18,r4
  8016f0:	b80d883a 	mov	r6,r23
  8016f4:	81001704 	addi	r4,r16,92
  8016f8:	000b883a 	mov	r5,zero
  8016fc:	80000015 	stw	zero,0(r16)
  801700:	80000115 	stw	zero,4(r16)
  801704:	80000215 	stw	zero,8(r16)
  801708:	8080030d 	sth	r2,12(r16)
  80170c:	80001915 	stw	zero,100(r16)
  801710:	8000038d 	sth	zero,14(r16)
  801714:	80000415 	stw	zero,16(r16)
  801718:	80000515 	stw	zero,20(r16)
  80171c:	80000615 	stw	zero,24(r16)
  801720:	0802d480 	call	802d48 <memset>
  801724:	05802034 	movhi	r22,128
  801728:	94400217 	ldw	r17,8(r18)
  80172c:	05402034 	movhi	r21,128
  801730:	05002034 	movhi	r20,128
  801734:	04c02034 	movhi	r19,128
  801738:	b58cdc04 	addi	r22,r22,13168
  80173c:	ad4cf304 	addi	r21,r21,13260
  801740:	a50d1204 	addi	r20,r20,13384
  801744:	9ccd2904 	addi	r19,r19,13476
  801748:	85800815 	stw	r22,32(r16)
  80174c:	85400915 	stw	r21,36(r16)
  801750:	85000a15 	stw	r20,40(r16)
  801754:	84c00b15 	stw	r19,44(r16)
  801758:	84000715 	stw	r16,28(r16)
  80175c:	00800284 	movi	r2,10
  801760:	8880030d 	sth	r2,12(r17)
  801764:	00800044 	movi	r2,1
  801768:	b80d883a 	mov	r6,r23
  80176c:	89001704 	addi	r4,r17,92
  801770:	000b883a 	mov	r5,zero
  801774:	88000015 	stw	zero,0(r17)
  801778:	88000115 	stw	zero,4(r17)
  80177c:	88000215 	stw	zero,8(r17)
  801780:	88001915 	stw	zero,100(r17)
  801784:	8880038d 	sth	r2,14(r17)
  801788:	88000415 	stw	zero,16(r17)
  80178c:	88000515 	stw	zero,20(r17)
  801790:	88000615 	stw	zero,24(r17)
  801794:	0802d480 	call	802d48 <memset>
  801798:	94000317 	ldw	r16,12(r18)
  80179c:	00800484 	movi	r2,18
  8017a0:	8c400715 	stw	r17,28(r17)
  8017a4:	8d800815 	stw	r22,32(r17)
  8017a8:	8d400915 	stw	r21,36(r17)
  8017ac:	8d000a15 	stw	r20,40(r17)
  8017b0:	8cc00b15 	stw	r19,44(r17)
  8017b4:	8080030d 	sth	r2,12(r16)
  8017b8:	00800084 	movi	r2,2
  8017bc:	80000015 	stw	zero,0(r16)
  8017c0:	80000115 	stw	zero,4(r16)
  8017c4:	80000215 	stw	zero,8(r16)
  8017c8:	80001915 	stw	zero,100(r16)
  8017cc:	8080038d 	sth	r2,14(r16)
  8017d0:	80000415 	stw	zero,16(r16)
  8017d4:	80000515 	stw	zero,20(r16)
  8017d8:	80000615 	stw	zero,24(r16)
  8017dc:	b80d883a 	mov	r6,r23
  8017e0:	000b883a 	mov	r5,zero
  8017e4:	81001704 	addi	r4,r16,92
  8017e8:	0802d480 	call	802d48 <memset>
  8017ec:	00800044 	movi	r2,1
  8017f0:	84000715 	stw	r16,28(r16)
  8017f4:	85800815 	stw	r22,32(r16)
  8017f8:	85400915 	stw	r21,36(r16)
  8017fc:	85000a15 	stw	r20,40(r16)
  801800:	84c00b15 	stw	r19,44(r16)
  801804:	90800e15 	stw	r2,56(r18)
  801808:	dfc00817 	ldw	ra,32(sp)
  80180c:	ddc00717 	ldw	r23,28(sp)
  801810:	dd800617 	ldw	r22,24(sp)
  801814:	dd400517 	ldw	r21,20(sp)
  801818:	dd000417 	ldw	r20,16(sp)
  80181c:	dcc00317 	ldw	r19,12(sp)
  801820:	dc800217 	ldw	r18,8(sp)
  801824:	dc400117 	ldw	r17,4(sp)
  801828:	dc000017 	ldw	r16,0(sp)
  80182c:	dec00904 	addi	sp,sp,36
  801830:	f800283a 	ret

00801834 <__fp_lock>:
  801834:	0005883a 	mov	r2,zero
  801838:	f800283a 	ret

0080183c <__sfmoreglue>:
  80183c:	defffc04 	addi	sp,sp,-16
  801840:	dc400115 	stw	r17,4(sp)
  801844:	2c7fffc4 	addi	r17,r5,-1
  801848:	8c401a24 	muli	r17,r17,104
  80184c:	dc800215 	stw	r18,8(sp)
  801850:	2825883a 	mov	r18,r5
  801854:	89401d04 	addi	r5,r17,116
  801858:	dc000015 	stw	r16,0(sp)
  80185c:	dfc00315 	stw	ra,12(sp)
  801860:	080253c0 	call	80253c <_malloc_r>
  801864:	1021883a 	mov	r16,r2
  801868:	10000726 	beq	r2,zero,801888 <__sfmoreglue+0x4c>
  80186c:	11000304 	addi	r4,r2,12
  801870:	10000015 	stw	zero,0(r2)
  801874:	14800115 	stw	r18,4(r2)
  801878:	11000215 	stw	r4,8(r2)
  80187c:	89801a04 	addi	r6,r17,104
  801880:	000b883a 	mov	r5,zero
  801884:	0802d480 	call	802d48 <memset>
  801888:	8005883a 	mov	r2,r16
  80188c:	dfc00317 	ldw	ra,12(sp)
  801890:	dc800217 	ldw	r18,8(sp)
  801894:	dc400117 	ldw	r17,4(sp)
  801898:	dc000017 	ldw	r16,0(sp)
  80189c:	dec00404 	addi	sp,sp,16
  8018a0:	f800283a 	ret

008018a4 <__sfp>:
  8018a4:	defffb04 	addi	sp,sp,-20
  8018a8:	dc000015 	stw	r16,0(sp)
  8018ac:	04002074 	movhi	r16,129
  8018b0:	84147a04 	addi	r16,r16,20968
  8018b4:	dcc00315 	stw	r19,12(sp)
  8018b8:	2027883a 	mov	r19,r4
  8018bc:	81000017 	ldw	r4,0(r16)
  8018c0:	dfc00415 	stw	ra,16(sp)
  8018c4:	dc800215 	stw	r18,8(sp)
  8018c8:	20800e17 	ldw	r2,56(r4)
  8018cc:	dc400115 	stw	r17,4(sp)
  8018d0:	1000021e 	bne	r2,zero,8018dc <__sfp+0x38>
  8018d4:	08016980 	call	801698 <__sinit.part.1>
  8018d8:	81000017 	ldw	r4,0(r16)
  8018dc:	2480b804 	addi	r18,r4,736
  8018e0:	047fffc4 	movi	r17,-1
  8018e4:	91000117 	ldw	r4,4(r18)
  8018e8:	94000217 	ldw	r16,8(r18)
  8018ec:	213fffc4 	addi	r4,r4,-1
  8018f0:	20000a16 	blt	r4,zero,80191c <__sfp+0x78>
  8018f4:	8080030f 	ldh	r2,12(r16)
  8018f8:	10000c26 	beq	r2,zero,80192c <__sfp+0x88>
  8018fc:	80c01d04 	addi	r3,r16,116
  801900:	00000206 	br	80190c <__sfp+0x68>
  801904:	18bfe60f 	ldh	r2,-104(r3)
  801908:	10000826 	beq	r2,zero,80192c <__sfp+0x88>
  80190c:	213fffc4 	addi	r4,r4,-1
  801910:	1c3ffd04 	addi	r16,r3,-12
  801914:	18c01a04 	addi	r3,r3,104
  801918:	247ffa1e 	bne	r4,r17,801904 <__alt_mem_onchip_mem+0xff7f9904>
  80191c:	90800017 	ldw	r2,0(r18)
  801920:	10001d26 	beq	r2,zero,801998 <__sfp+0xf4>
  801924:	1025883a 	mov	r18,r2
  801928:	003fee06 	br	8018e4 <__alt_mem_onchip_mem+0xff7f98e4>
  80192c:	00bfffc4 	movi	r2,-1
  801930:	8080038d 	sth	r2,14(r16)
  801934:	00800044 	movi	r2,1
  801938:	8080030d 	sth	r2,12(r16)
  80193c:	80001915 	stw	zero,100(r16)
  801940:	80000015 	stw	zero,0(r16)
  801944:	80000215 	stw	zero,8(r16)
  801948:	80000115 	stw	zero,4(r16)
  80194c:	80000415 	stw	zero,16(r16)
  801950:	80000515 	stw	zero,20(r16)
  801954:	80000615 	stw	zero,24(r16)
  801958:	01800204 	movi	r6,8
  80195c:	000b883a 	mov	r5,zero
  801960:	81001704 	addi	r4,r16,92
  801964:	0802d480 	call	802d48 <memset>
  801968:	8005883a 	mov	r2,r16
  80196c:	80000c15 	stw	zero,48(r16)
  801970:	80000d15 	stw	zero,52(r16)
  801974:	80001115 	stw	zero,68(r16)
  801978:	80001215 	stw	zero,72(r16)
  80197c:	dfc00417 	ldw	ra,16(sp)
  801980:	dcc00317 	ldw	r19,12(sp)
  801984:	dc800217 	ldw	r18,8(sp)
  801988:	dc400117 	ldw	r17,4(sp)
  80198c:	dc000017 	ldw	r16,0(sp)
  801990:	dec00504 	addi	sp,sp,20
  801994:	f800283a 	ret
  801998:	01400104 	movi	r5,4
  80199c:	9809883a 	mov	r4,r19
  8019a0:	080183c0 	call	80183c <__sfmoreglue>
  8019a4:	90800015 	stw	r2,0(r18)
  8019a8:	103fde1e 	bne	r2,zero,801924 <__alt_mem_onchip_mem+0xff7f9924>
  8019ac:	00800304 	movi	r2,12
  8019b0:	98800015 	stw	r2,0(r19)
  8019b4:	0005883a 	mov	r2,zero
  8019b8:	003ff006 	br	80197c <__alt_mem_onchip_mem+0xff7f997c>

008019bc <_cleanup>:
  8019bc:	00802074 	movhi	r2,129
  8019c0:	10947a04 	addi	r2,r2,20968
  8019c4:	11000017 	ldw	r4,0(r2)
  8019c8:	01402034 	movhi	r5,128
  8019cc:	295d6e04 	addi	r5,r5,30136
  8019d0:	08021bc1 	jmpi	8021bc <_fwalk_reent>

008019d4 <__sinit>:
  8019d4:	20800e17 	ldw	r2,56(r4)
  8019d8:	10000126 	beq	r2,zero,8019e0 <__sinit+0xc>
  8019dc:	f800283a 	ret
  8019e0:	08016981 	jmpi	801698 <__sinit.part.1>

008019e4 <__sfp_lock_acquire>:
  8019e4:	f800283a 	ret

008019e8 <__sfp_lock_release>:
  8019e8:	f800283a 	ret

008019ec <__sinit_lock_acquire>:
  8019ec:	f800283a 	ret

008019f0 <__sinit_lock_release>:
  8019f0:	f800283a 	ret

008019f4 <__fp_lock_all>:
  8019f4:	00802074 	movhi	r2,129
  8019f8:	10947b04 	addi	r2,r2,20972
  8019fc:	11000017 	ldw	r4,0(r2)
  801a00:	01402034 	movhi	r5,128
  801a04:	29460d04 	addi	r5,r5,6196
  801a08:	08020f81 	jmpi	8020f8 <_fwalk>

00801a0c <__fp_unlock_all>:
  801a0c:	00802074 	movhi	r2,129
  801a10:	10947b04 	addi	r2,r2,20972
  801a14:	11000017 	ldw	r4,0(r2)
  801a18:	01402034 	movhi	r5,128
  801a1c:	2945a104 	addi	r5,r5,5764
  801a20:	08020f81 	jmpi	8020f8 <_fwalk>

00801a24 <_fopen_r>:
  801a24:	defffa04 	addi	sp,sp,-24
  801a28:	3005883a 	mov	r2,r6
  801a2c:	dcc00415 	stw	r19,16(sp)
  801a30:	d80d883a 	mov	r6,sp
  801a34:	2827883a 	mov	r19,r5
  801a38:	100b883a 	mov	r5,r2
  801a3c:	dc800315 	stw	r18,12(sp)
  801a40:	dfc00515 	stw	ra,20(sp)
  801a44:	dc400215 	stw	r17,8(sp)
  801a48:	dc000115 	stw	r16,4(sp)
  801a4c:	2025883a 	mov	r18,r4
  801a50:	08079640 	call	807964 <__sflags>
  801a54:	10002726 	beq	r2,zero,801af4 <_fopen_r+0xd0>
  801a58:	9009883a 	mov	r4,r18
  801a5c:	1023883a 	mov	r17,r2
  801a60:	08018a40 	call	8018a4 <__sfp>
  801a64:	1021883a 	mov	r16,r2
  801a68:	10002226 	beq	r2,zero,801af4 <_fopen_r+0xd0>
  801a6c:	d9800017 	ldw	r6,0(sp)
  801a70:	01c06d84 	movi	r7,438
  801a74:	980b883a 	mov	r5,r19
  801a78:	9009883a 	mov	r4,r18
  801a7c:	0802e700 	call	802e70 <_open_r>
  801a80:	10001916 	blt	r2,zero,801ae8 <_fopen_r+0xc4>
  801a84:	8080038d 	sth	r2,14(r16)
  801a88:	00802034 	movhi	r2,128
  801a8c:	108cdc04 	addi	r2,r2,13168
  801a90:	80800815 	stw	r2,32(r16)
  801a94:	00802034 	movhi	r2,128
  801a98:	108cf304 	addi	r2,r2,13260
  801a9c:	80800915 	stw	r2,36(r16)
  801aa0:	00802034 	movhi	r2,128
  801aa4:	108d1204 	addi	r2,r2,13384
  801aa8:	80800a15 	stw	r2,40(r16)
  801aac:	00802034 	movhi	r2,128
  801ab0:	108d2904 	addi	r2,r2,13476
  801ab4:	8440030d 	sth	r17,12(r16)
  801ab8:	84000715 	stw	r16,28(r16)
  801abc:	80800b15 	stw	r2,44(r16)
  801ac0:	8c40400c 	andi	r17,r17,256
  801ac4:	88000d1e 	bne	r17,zero,801afc <_fopen_r+0xd8>
  801ac8:	8005883a 	mov	r2,r16
  801acc:	dfc00517 	ldw	ra,20(sp)
  801ad0:	dcc00417 	ldw	r19,16(sp)
  801ad4:	dc800317 	ldw	r18,12(sp)
  801ad8:	dc400217 	ldw	r17,8(sp)
  801adc:	dc000117 	ldw	r16,4(sp)
  801ae0:	dec00604 	addi	sp,sp,24
  801ae4:	f800283a 	ret
  801ae8:	08019e40 	call	8019e4 <__sfp_lock_acquire>
  801aec:	8000030d 	sth	zero,12(r16)
  801af0:	08019e80 	call	8019e8 <__sfp_lock_release>
  801af4:	0005883a 	mov	r2,zero
  801af8:	003ff406 	br	801acc <__alt_mem_onchip_mem+0xff7f9acc>
  801afc:	01c00084 	movi	r7,2
  801b00:	000d883a 	mov	r6,zero
  801b04:	800b883a 	mov	r5,r16
  801b08:	9009883a 	mov	r4,r18
  801b0c:	0801c1c0 	call	801c1c <_fseek_r>
  801b10:	8005883a 	mov	r2,r16
  801b14:	003fed06 	br	801acc <__alt_mem_onchip_mem+0xff7f9acc>

00801b18 <fopen>:
  801b18:	00802074 	movhi	r2,129
  801b1c:	10947b04 	addi	r2,r2,20972
  801b20:	280d883a 	mov	r6,r5
  801b24:	200b883a 	mov	r5,r4
  801b28:	11000017 	ldw	r4,0(r2)
  801b2c:	0801a241 	jmpi	801a24 <_fopen_r>

00801b30 <_fprintf_r>:
  801b30:	defffe04 	addi	sp,sp,-8
  801b34:	2809883a 	mov	r4,r5
  801b38:	300b883a 	mov	r5,r6
  801b3c:	dfc00015 	stw	ra,0(sp)
  801b40:	d9c00115 	stw	r7,4(sp)
  801b44:	d9800104 	addi	r6,sp,4
  801b48:	08058f80 	call	8058f8 <__vfprintf_internal>
  801b4c:	dfc00017 	ldw	ra,0(sp)
  801b50:	dec00204 	addi	sp,sp,8
  801b54:	f800283a 	ret

00801b58 <fprintf>:
  801b58:	defffd04 	addi	sp,sp,-12
  801b5c:	dfc00015 	stw	ra,0(sp)
  801b60:	d9800115 	stw	r6,4(sp)
  801b64:	d9c00215 	stw	r7,8(sp)
  801b68:	d9800104 	addi	r6,sp,4
  801b6c:	08058f80 	call	8058f8 <__vfprintf_internal>
  801b70:	dfc00017 	ldw	ra,0(sp)
  801b74:	dec00304 	addi	sp,sp,12
  801b78:	f800283a 	ret

00801b7c <_fputc_r>:
  801b7c:	defffc04 	addi	sp,sp,-16
  801b80:	dc000215 	stw	r16,8(sp)
  801b84:	dfc00315 	stw	ra,12(sp)
  801b88:	2021883a 	mov	r16,r4
  801b8c:	20000726 	beq	r4,zero,801bac <_fputc_r+0x30>
  801b90:	20800e17 	ldw	r2,56(r4)
  801b94:	1000051e 	bne	r2,zero,801bac <_fputc_r+0x30>
  801b98:	d9400015 	stw	r5,0(sp)
  801b9c:	d9800115 	stw	r6,4(sp)
  801ba0:	08019d40 	call	8019d4 <__sinit>
  801ba4:	d9800117 	ldw	r6,4(sp)
  801ba8:	d9400017 	ldw	r5,0(sp)
  801bac:	8009883a 	mov	r4,r16
  801bb0:	dfc00317 	ldw	ra,12(sp)
  801bb4:	dc000217 	ldw	r16,8(sp)
  801bb8:	dec00404 	addi	sp,sp,16
  801bbc:	0802f3c1 	jmpi	802f3c <_putc_r>

00801bc0 <fputc>:
  801bc0:	00802074 	movhi	r2,129
  801bc4:	defffc04 	addi	sp,sp,-16
  801bc8:	10947b04 	addi	r2,r2,20972
  801bcc:	dc000115 	stw	r16,4(sp)
  801bd0:	14000017 	ldw	r16,0(r2)
  801bd4:	dc400215 	stw	r17,8(sp)
  801bd8:	dfc00315 	stw	ra,12(sp)
  801bdc:	2023883a 	mov	r17,r4
  801be0:	80000626 	beq	r16,zero,801bfc <fputc+0x3c>
  801be4:	80800e17 	ldw	r2,56(r16)
  801be8:	1000041e 	bne	r2,zero,801bfc <fputc+0x3c>
  801bec:	8009883a 	mov	r4,r16
  801bf0:	d9400015 	stw	r5,0(sp)
  801bf4:	08019d40 	call	8019d4 <__sinit>
  801bf8:	d9400017 	ldw	r5,0(sp)
  801bfc:	280d883a 	mov	r6,r5
  801c00:	8009883a 	mov	r4,r16
  801c04:	880b883a 	mov	r5,r17
  801c08:	dfc00317 	ldw	ra,12(sp)
  801c0c:	dc400217 	ldw	r17,8(sp)
  801c10:	dc000117 	ldw	r16,4(sp)
  801c14:	dec00404 	addi	sp,sp,16
  801c18:	0802f3c1 	jmpi	802f3c <_putc_r>

00801c1c <_fseek_r>:
  801c1c:	0801c3c1 	jmpi	801c3c <_fseeko_r>

00801c20 <fseek>:
  801c20:	00802074 	movhi	r2,129
  801c24:	10947b04 	addi	r2,r2,20972
  801c28:	300f883a 	mov	r7,r6
  801c2c:	280d883a 	mov	r6,r5
  801c30:	200b883a 	mov	r5,r4
  801c34:	11000017 	ldw	r4,0(r2)
  801c38:	0801c3c1 	jmpi	801c3c <_fseeko_r>

00801c3c <_fseeko_r>:
  801c3c:	deffe804 	addi	sp,sp,-96
  801c40:	dd401415 	stw	r21,80(sp)
  801c44:	dc801115 	stw	r18,68(sp)
  801c48:	dc401015 	stw	r17,64(sp)
  801c4c:	dc000f15 	stw	r16,60(sp)
  801c50:	dfc01715 	stw	ra,92(sp)
  801c54:	ddc01615 	stw	r23,88(sp)
  801c58:	dd801515 	stw	r22,84(sp)
  801c5c:	dd001315 	stw	r20,76(sp)
  801c60:	dcc01215 	stw	r19,72(sp)
  801c64:	2023883a 	mov	r17,r4
  801c68:	2821883a 	mov	r16,r5
  801c6c:	302b883a 	mov	r21,r6
  801c70:	3825883a 	mov	r18,r7
  801c74:	20000226 	beq	r4,zero,801c80 <_fseeko_r+0x44>
  801c78:	20800e17 	ldw	r2,56(r4)
  801c7c:	10005a26 	beq	r2,zero,801de8 <_fseeko_r+0x1ac>
  801c80:	8080030b 	ldhu	r2,12(r16)
  801c84:	00c04204 	movi	r3,264
  801c88:	1080420c 	andi	r2,r2,264
  801c8c:	10c05b26 	beq	r2,r3,801dfc <_fseeko_r+0x1c0>
  801c90:	85000a17 	ldw	r20,40(r16)
  801c94:	a000f626 	beq	r20,zero,802070 <_fseeko_r+0x434>
  801c98:	00800044 	movi	r2,1
  801c9c:	90803e26 	beq	r18,r2,801d98 <_fseeko_r+0x15c>
  801ca0:	00800084 	movi	r2,2
  801ca4:	90801026 	beq	r18,r2,801ce8 <_fseeko_r+0xac>
  801ca8:	90000f26 	beq	r18,zero,801ce8 <_fseeko_r+0xac>
  801cac:	00800584 	movi	r2,22
  801cb0:	88800015 	stw	r2,0(r17)
  801cb4:	04ffffc4 	movi	r19,-1
  801cb8:	9805883a 	mov	r2,r19
  801cbc:	dfc01717 	ldw	ra,92(sp)
  801cc0:	ddc01617 	ldw	r23,88(sp)
  801cc4:	dd801517 	ldw	r22,84(sp)
  801cc8:	dd401417 	ldw	r21,80(sp)
  801ccc:	dd001317 	ldw	r20,76(sp)
  801cd0:	dcc01217 	ldw	r19,72(sp)
  801cd4:	dc801117 	ldw	r18,68(sp)
  801cd8:	dc401017 	ldw	r17,64(sp)
  801cdc:	dc000f17 	ldw	r16,60(sp)
  801ce0:	dec01804 	addi	sp,sp,96
  801ce4:	f800283a 	ret
  801ce8:	80800417 	ldw	r2,16(r16)
  801cec:	002f883a 	mov	r23,zero
  801cf0:	0027883a 	mov	r19,zero
  801cf4:	1000cb26 	beq	r2,zero,802024 <_fseeko_r+0x3e8>
  801cf8:	8080030b 	ldhu	r2,12(r16)
  801cfc:	10c2068c 	andi	r3,r2,2074
  801d00:	1800071e 	bne	r3,zero,801d20 <_fseeko_r+0xe4>
  801d04:	10c1000c 	andi	r3,r2,1024
  801d08:	1800451e 	bne	r3,zero,801e20 <_fseeko_r+0x1e4>
  801d0c:	00c02034 	movhi	r3,128
  801d10:	18cd1204 	addi	r3,r3,13384
  801d14:	a0c0b726 	beq	r20,r3,801ff4 <_fseeko_r+0x3b8>
  801d18:	10820014 	ori	r2,r2,2048
  801d1c:	8080030d 	sth	r2,12(r16)
  801d20:	800b883a 	mov	r5,r16
  801d24:	8809883a 	mov	r4,r17
  801d28:	08078d80 	call	8078d8 <_fflush_r>
  801d2c:	1027883a 	mov	r19,r2
  801d30:	103fe01e 	bne	r2,zero,801cb4 <__alt_mem_onchip_mem+0xff7f9cb4>
  801d34:	81400717 	ldw	r5,28(r16)
  801d38:	900f883a 	mov	r7,r18
  801d3c:	a80d883a 	mov	r6,r21
  801d40:	8809883a 	mov	r4,r17
  801d44:	a03ee83a 	callr	r20
  801d48:	00ffffc4 	movi	r3,-1
  801d4c:	10ffd926 	beq	r2,r3,801cb4 <__alt_mem_onchip_mem+0xff7f9cb4>
  801d50:	81400c17 	ldw	r5,48(r16)
  801d54:	28000526 	beq	r5,zero,801d6c <_fseeko_r+0x130>
  801d58:	80801004 	addi	r2,r16,64
  801d5c:	28800226 	beq	r5,r2,801d68 <_fseeko_r+0x12c>
  801d60:	8809883a 	mov	r4,r17
  801d64:	0807b340 	call	807b34 <_free_r>
  801d68:	80000c15 	stw	zero,48(r16)
  801d6c:	8080030b 	ldhu	r2,12(r16)
  801d70:	80c00417 	ldw	r3,16(r16)
  801d74:	80000115 	stw	zero,4(r16)
  801d78:	10bdf7cc 	andi	r2,r2,63455
  801d7c:	80c00015 	stw	r3,0(r16)
  801d80:	8080030d 	sth	r2,12(r16)
  801d84:	01800204 	movi	r6,8
  801d88:	000b883a 	mov	r5,zero
  801d8c:	81001704 	addi	r4,r16,92
  801d90:	0802d480 	call	802d48 <memset>
  801d94:	003fc806 	br	801cb8 <__alt_mem_onchip_mem+0xff7f9cb8>
  801d98:	800b883a 	mov	r5,r16
  801d9c:	8809883a 	mov	r4,r17
  801da0:	08078d80 	call	8078d8 <_fflush_r>
  801da4:	8080030b 	ldhu	r2,12(r16)
  801da8:	10c4000c 	andi	r3,r2,4096
  801dac:	18008726 	beq	r3,zero,801fcc <_fseeko_r+0x390>
  801db0:	84c01417 	ldw	r19,80(r16)
  801db4:	10c0010c 	andi	r3,r2,4
  801db8:	1800431e 	bne	r3,zero,801ec8 <_fseeko_r+0x28c>
  801dbc:	1080020c 	andi	r2,r2,8
  801dc0:	10008026 	beq	r2,zero,801fc4 <_fseeko_r+0x388>
  801dc4:	80c00017 	ldw	r3,0(r16)
  801dc8:	80800417 	ldw	r2,16(r16)
  801dcc:	18000226 	beq	r3,zero,801dd8 <_fseeko_r+0x19c>
  801dd0:	1887c83a 	sub	r3,r3,r2
  801dd4:	98e7883a 	add	r19,r19,r3
  801dd8:	aceb883a 	add	r21,r21,r19
  801ddc:	05c00044 	movi	r23,1
  801de0:	0025883a 	mov	r18,zero
  801de4:	003fc306 	br	801cf4 <__alt_mem_onchip_mem+0xff7f9cf4>
  801de8:	08019d40 	call	8019d4 <__sinit>
  801dec:	8080030b 	ldhu	r2,12(r16)
  801df0:	00c04204 	movi	r3,264
  801df4:	1080420c 	andi	r2,r2,264
  801df8:	10ffa51e 	bne	r2,r3,801c90 <__alt_mem_onchip_mem+0xff7f9c90>
  801dfc:	800b883a 	mov	r5,r16
  801e00:	8809883a 	mov	r4,r17
  801e04:	08078d80 	call	8078d8 <_fflush_r>
  801e08:	003fa106 	br	801c90 <__alt_mem_onchip_mem+0xff7f9c90>
  801e0c:	8080030b 	ldhu	r2,12(r16)
  801e10:	00c10004 	movi	r3,1024
  801e14:	80c01315 	stw	r3,76(r16)
  801e18:	10c4b03a 	or	r2,r2,r3
  801e1c:	8080030d 	sth	r2,12(r16)
  801e20:	9000311e 	bne	r18,zero,801ee8 <_fseeko_r+0x2ac>
  801e24:	a82d883a 	mov	r22,r21
  801e28:	b800371e 	bne	r23,zero,801f08 <_fseeko_r+0x2cc>
  801e2c:	8080030b 	ldhu	r2,12(r16)
  801e30:	1084000c 	andi	r2,r2,4096
  801e34:	10007f26 	beq	r2,zero,802034 <_fseeko_r+0x3f8>
  801e38:	80801417 	ldw	r2,80(r16)
  801e3c:	81800117 	ldw	r6,4(r16)
  801e40:	81400c17 	ldw	r5,48(r16)
  801e44:	11a7c83a 	sub	r19,r2,r6
  801e48:	28008226 	beq	r5,zero,802054 <_fseeko_r+0x418>
  801e4c:	81c00f17 	ldw	r7,60(r16)
  801e50:	99e7c83a 	sub	r19,r19,r7
  801e54:	81000e17 	ldw	r4,56(r16)
  801e58:	80800417 	ldw	r2,16(r16)
  801e5c:	99a7883a 	add	r19,r19,r6
  801e60:	2087c83a 	sub	r3,r4,r2
  801e64:	98e7c83a 	sub	r19,r19,r3
  801e68:	38c7883a 	add	r3,r7,r3
  801e6c:	b4c02b16 	blt	r22,r19,801f1c <_fseeko_r+0x2e0>
  801e70:	98c9883a 	add	r4,r19,r3
  801e74:	b100292e 	bgeu	r22,r4,801f1c <_fseeko_r+0x2e0>
  801e78:	b4e7c83a 	sub	r19,r22,r19
  801e7c:	14c5883a 	add	r2,r2,r19
  801e80:	1ce7c83a 	sub	r19,r3,r19
  801e84:	80800015 	stw	r2,0(r16)
  801e88:	84c00115 	stw	r19,4(r16)
  801e8c:	28000526 	beq	r5,zero,801ea4 <_fseeko_r+0x268>
  801e90:	80801004 	addi	r2,r16,64
  801e94:	28800226 	beq	r5,r2,801ea0 <_fseeko_r+0x264>
  801e98:	8809883a 	mov	r4,r17
  801e9c:	0807b340 	call	807b34 <_free_r>
  801ea0:	80000c15 	stw	zero,48(r16)
  801ea4:	8080030b 	ldhu	r2,12(r16)
  801ea8:	01800204 	movi	r6,8
  801eac:	000b883a 	mov	r5,zero
  801eb0:	10bff7cc 	andi	r2,r2,65503
  801eb4:	8080030d 	sth	r2,12(r16)
  801eb8:	81001704 	addi	r4,r16,92
  801ebc:	0802d480 	call	802d48 <memset>
  801ec0:	0027883a 	mov	r19,zero
  801ec4:	003f7c06 	br	801cb8 <__alt_mem_onchip_mem+0xff7f9cb8>
  801ec8:	80c00117 	ldw	r3,4(r16)
  801ecc:	80800c17 	ldw	r2,48(r16)
  801ed0:	98e7c83a 	sub	r19,r19,r3
  801ed4:	10003b26 	beq	r2,zero,801fc4 <_fseeko_r+0x388>
  801ed8:	80c00f17 	ldw	r3,60(r16)
  801edc:	80800417 	ldw	r2,16(r16)
  801ee0:	98e7c83a 	sub	r19,r19,r3
  801ee4:	003fbc06 	br	801dd8 <__alt_mem_onchip_mem+0xff7f9dd8>
  801ee8:	8140038f 	ldh	r5,14(r16)
  801eec:	d80d883a 	mov	r6,sp
  801ef0:	8809883a 	mov	r4,r17
  801ef4:	080209c0 	call	80209c <_fstat_r>
  801ef8:	103f891e 	bne	r2,zero,801d20 <__alt_mem_onchip_mem+0xff7f9d20>
  801efc:	dd800417 	ldw	r22,16(sp)
  801f00:	adad883a 	add	r22,r21,r22
  801f04:	b83fc926 	beq	r23,zero,801e2c <__alt_mem_onchip_mem+0xff7f9e2c>
  801f08:	81400c17 	ldw	r5,48(r16)
  801f0c:	81800117 	ldw	r6,4(r16)
  801f10:	28005026 	beq	r5,zero,802054 <_fseeko_r+0x418>
  801f14:	81c00f17 	ldw	r7,60(r16)
  801f18:	003fce06 	br	801e54 <__alt_mem_onchip_mem+0xff7f9e54>
  801f1c:	84c01317 	ldw	r19,76(r16)
  801f20:	81400717 	ldw	r5,28(r16)
  801f24:	000f883a 	mov	r7,zero
  801f28:	04e7c83a 	sub	r19,zero,r19
  801f2c:	9da6703a 	and	r19,r19,r22
  801f30:	980d883a 	mov	r6,r19
  801f34:	8809883a 	mov	r4,r17
  801f38:	a03ee83a 	callr	r20
  801f3c:	00ffffc4 	movi	r3,-1
  801f40:	10ff7726 	beq	r2,r3,801d20 <__alt_mem_onchip_mem+0xff7f9d20>
  801f44:	80800417 	ldw	r2,16(r16)
  801f48:	81400c17 	ldw	r5,48(r16)
  801f4c:	80000115 	stw	zero,4(r16)
  801f50:	80800015 	stw	r2,0(r16)
  801f54:	28000526 	beq	r5,zero,801f6c <_fseeko_r+0x330>
  801f58:	80801004 	addi	r2,r16,64
  801f5c:	28800226 	beq	r5,r2,801f68 <_fseeko_r+0x32c>
  801f60:	8809883a 	mov	r4,r17
  801f64:	0807b340 	call	807b34 <_free_r>
  801f68:	80000c15 	stw	zero,48(r16)
  801f6c:	8080030b 	ldhu	r2,12(r16)
  801f70:	b4e7c83a 	sub	r19,r22,r19
  801f74:	10bff7cc 	andi	r2,r2,65503
  801f78:	8080030d 	sth	r2,12(r16)
  801f7c:	98000b26 	beq	r19,zero,801fac <_fseeko_r+0x370>
  801f80:	800b883a 	mov	r5,r16
  801f84:	8809883a 	mov	r4,r17
  801f88:	08030c00 	call	8030c0 <__srefill_r>
  801f8c:	103f641e 	bne	r2,zero,801d20 <__alt_mem_onchip_mem+0xff7f9d20>
  801f90:	80800117 	ldw	r2,4(r16)
  801f94:	14ff6236 	bltu	r2,r19,801d20 <__alt_mem_onchip_mem+0xff7f9d20>
  801f98:	80c00017 	ldw	r3,0(r16)
  801f9c:	14c5c83a 	sub	r2,r2,r19
  801fa0:	80800115 	stw	r2,4(r16)
  801fa4:	1ce7883a 	add	r19,r3,r19
  801fa8:	84c00015 	stw	r19,0(r16)
  801fac:	01800204 	movi	r6,8
  801fb0:	000b883a 	mov	r5,zero
  801fb4:	81001704 	addi	r4,r16,92
  801fb8:	0802d480 	call	802d48 <memset>
  801fbc:	0027883a 	mov	r19,zero
  801fc0:	003f3d06 	br	801cb8 <__alt_mem_onchip_mem+0xff7f9cb8>
  801fc4:	80800417 	ldw	r2,16(r16)
  801fc8:	003f8306 	br	801dd8 <__alt_mem_onchip_mem+0xff7f9dd8>
  801fcc:	81400717 	ldw	r5,28(r16)
  801fd0:	900f883a 	mov	r7,r18
  801fd4:	000d883a 	mov	r6,zero
  801fd8:	8809883a 	mov	r4,r17
  801fdc:	a03ee83a 	callr	r20
  801fe0:	1027883a 	mov	r19,r2
  801fe4:	00bfffc4 	movi	r2,-1
  801fe8:	98bf3226 	beq	r19,r2,801cb4 <__alt_mem_onchip_mem+0xff7f9cb4>
  801fec:	8080030b 	ldhu	r2,12(r16)
  801ff0:	003f7006 	br	801db4 <__alt_mem_onchip_mem+0xff7f9db4>
  801ff4:	8140038f 	ldh	r5,14(r16)
  801ff8:	283f4716 	blt	r5,zero,801d18 <__alt_mem_onchip_mem+0xff7f9d18>
  801ffc:	d80d883a 	mov	r6,sp
  802000:	8809883a 	mov	r4,r17
  802004:	080209c0 	call	80209c <_fstat_r>
  802008:	1000041e 	bne	r2,zero,80201c <_fseeko_r+0x3e0>
  80200c:	d8800117 	ldw	r2,4(sp)
  802010:	00e00014 	movui	r3,32768
  802014:	10bc000c 	andi	r2,r2,61440
  802018:	10ff7c26 	beq	r2,r3,801e0c <__alt_mem_onchip_mem+0xff7f9e0c>
  80201c:	8080030b 	ldhu	r2,12(r16)
  802020:	003f3d06 	br	801d18 <__alt_mem_onchip_mem+0xff7f9d18>
  802024:	800b883a 	mov	r5,r16
  802028:	8809883a 	mov	r4,r17
  80202c:	08023800 	call	802380 <__smakebuf_r>
  802030:	003f3106 	br	801cf8 <__alt_mem_onchip_mem+0xff7f9cf8>
  802034:	81400717 	ldw	r5,28(r16)
  802038:	01c00044 	movi	r7,1
  80203c:	000d883a 	mov	r6,zero
  802040:	8809883a 	mov	r4,r17
  802044:	a03ee83a 	callr	r20
  802048:	00ffffc4 	movi	r3,-1
  80204c:	10ff7b1e 	bne	r2,r3,801e3c <__alt_mem_onchip_mem+0xff7f9e3c>
  802050:	003f3306 	br	801d20 <__alt_mem_onchip_mem+0xff7f9d20>
  802054:	80c00017 	ldw	r3,0(r16)
  802058:	80800417 	ldw	r2,16(r16)
  80205c:	000b883a 	mov	r5,zero
  802060:	1887c83a 	sub	r3,r3,r2
  802064:	98e7c83a 	sub	r19,r19,r3
  802068:	30c7883a 	add	r3,r6,r3
  80206c:	003f7f06 	br	801e6c <__alt_mem_onchip_mem+0xff7f9e6c>
  802070:	00800744 	movi	r2,29
  802074:	88800015 	stw	r2,0(r17)
  802078:	04ffffc4 	movi	r19,-1
  80207c:	003f0e06 	br	801cb8 <__alt_mem_onchip_mem+0xff7f9cb8>

00802080 <fseeko>:
  802080:	00802074 	movhi	r2,129
  802084:	10947b04 	addi	r2,r2,20972
  802088:	300f883a 	mov	r7,r6
  80208c:	280d883a 	mov	r6,r5
  802090:	200b883a 	mov	r5,r4
  802094:	11000017 	ldw	r4,0(r2)
  802098:	0801c3c1 	jmpi	801c3c <_fseeko_r>

0080209c <_fstat_r>:
  80209c:	defffd04 	addi	sp,sp,-12
  8020a0:	2805883a 	mov	r2,r5
  8020a4:	dc000015 	stw	r16,0(sp)
  8020a8:	04002074 	movhi	r16,129
  8020ac:	dc400115 	stw	r17,4(sp)
  8020b0:	841bdb04 	addi	r16,r16,28524
  8020b4:	2023883a 	mov	r17,r4
  8020b8:	300b883a 	mov	r5,r6
  8020bc:	1009883a 	mov	r4,r2
  8020c0:	dfc00215 	stw	ra,8(sp)
  8020c4:	80000015 	stw	zero,0(r16)
  8020c8:	080ee740 	call	80ee74 <fstat>
  8020cc:	00ffffc4 	movi	r3,-1
  8020d0:	10c00526 	beq	r2,r3,8020e8 <_fstat_r+0x4c>
  8020d4:	dfc00217 	ldw	ra,8(sp)
  8020d8:	dc400117 	ldw	r17,4(sp)
  8020dc:	dc000017 	ldw	r16,0(sp)
  8020e0:	dec00304 	addi	sp,sp,12
  8020e4:	f800283a 	ret
  8020e8:	80c00017 	ldw	r3,0(r16)
  8020ec:	183ff926 	beq	r3,zero,8020d4 <__alt_mem_onchip_mem+0xff7fa0d4>
  8020f0:	88c00015 	stw	r3,0(r17)
  8020f4:	003ff706 	br	8020d4 <__alt_mem_onchip_mem+0xff7fa0d4>

008020f8 <_fwalk>:
  8020f8:	defff704 	addi	sp,sp,-36
  8020fc:	dd000415 	stw	r20,16(sp)
  802100:	dfc00815 	stw	ra,32(sp)
  802104:	ddc00715 	stw	r23,28(sp)
  802108:	dd800615 	stw	r22,24(sp)
  80210c:	dd400515 	stw	r21,20(sp)
  802110:	dcc00315 	stw	r19,12(sp)
  802114:	dc800215 	stw	r18,8(sp)
  802118:	dc400115 	stw	r17,4(sp)
  80211c:	dc000015 	stw	r16,0(sp)
  802120:	2500b804 	addi	r20,r4,736
  802124:	a0002326 	beq	r20,zero,8021b4 <_fwalk+0xbc>
  802128:	282b883a 	mov	r21,r5
  80212c:	002f883a 	mov	r23,zero
  802130:	05800044 	movi	r22,1
  802134:	04ffffc4 	movi	r19,-1
  802138:	a4400117 	ldw	r17,4(r20)
  80213c:	a4800217 	ldw	r18,8(r20)
  802140:	8c7fffc4 	addi	r17,r17,-1
  802144:	88000d16 	blt	r17,zero,80217c <_fwalk+0x84>
  802148:	94000304 	addi	r16,r18,12
  80214c:	94800384 	addi	r18,r18,14
  802150:	8080000b 	ldhu	r2,0(r16)
  802154:	8c7fffc4 	addi	r17,r17,-1
  802158:	813ffd04 	addi	r4,r16,-12
  80215c:	b080042e 	bgeu	r22,r2,802170 <_fwalk+0x78>
  802160:	9080000f 	ldh	r2,0(r18)
  802164:	14c00226 	beq	r2,r19,802170 <_fwalk+0x78>
  802168:	a83ee83a 	callr	r21
  80216c:	b8aeb03a 	or	r23,r23,r2
  802170:	84001a04 	addi	r16,r16,104
  802174:	94801a04 	addi	r18,r18,104
  802178:	8cfff51e 	bne	r17,r19,802150 <__alt_mem_onchip_mem+0xff7fa150>
  80217c:	a5000017 	ldw	r20,0(r20)
  802180:	a03fed1e 	bne	r20,zero,802138 <__alt_mem_onchip_mem+0xff7fa138>
  802184:	b805883a 	mov	r2,r23
  802188:	dfc00817 	ldw	ra,32(sp)
  80218c:	ddc00717 	ldw	r23,28(sp)
  802190:	dd800617 	ldw	r22,24(sp)
  802194:	dd400517 	ldw	r21,20(sp)
  802198:	dd000417 	ldw	r20,16(sp)
  80219c:	dcc00317 	ldw	r19,12(sp)
  8021a0:	dc800217 	ldw	r18,8(sp)
  8021a4:	dc400117 	ldw	r17,4(sp)
  8021a8:	dc000017 	ldw	r16,0(sp)
  8021ac:	dec00904 	addi	sp,sp,36
  8021b0:	f800283a 	ret
  8021b4:	002f883a 	mov	r23,zero
  8021b8:	003ff206 	br	802184 <__alt_mem_onchip_mem+0xff7fa184>

008021bc <_fwalk_reent>:
  8021bc:	defff704 	addi	sp,sp,-36
  8021c0:	dd000415 	stw	r20,16(sp)
  8021c4:	dfc00815 	stw	ra,32(sp)
  8021c8:	ddc00715 	stw	r23,28(sp)
  8021cc:	dd800615 	stw	r22,24(sp)
  8021d0:	dd400515 	stw	r21,20(sp)
  8021d4:	dcc00315 	stw	r19,12(sp)
  8021d8:	dc800215 	stw	r18,8(sp)
  8021dc:	dc400115 	stw	r17,4(sp)
  8021e0:	dc000015 	stw	r16,0(sp)
  8021e4:	2500b804 	addi	r20,r4,736
  8021e8:	a0002326 	beq	r20,zero,802278 <_fwalk_reent+0xbc>
  8021ec:	282b883a 	mov	r21,r5
  8021f0:	2027883a 	mov	r19,r4
  8021f4:	002f883a 	mov	r23,zero
  8021f8:	05800044 	movi	r22,1
  8021fc:	04bfffc4 	movi	r18,-1
  802200:	a4400117 	ldw	r17,4(r20)
  802204:	a4000217 	ldw	r16,8(r20)
  802208:	8c7fffc4 	addi	r17,r17,-1
  80220c:	88000c16 	blt	r17,zero,802240 <_fwalk_reent+0x84>
  802210:	84000304 	addi	r16,r16,12
  802214:	8080000b 	ldhu	r2,0(r16)
  802218:	8c7fffc4 	addi	r17,r17,-1
  80221c:	817ffd04 	addi	r5,r16,-12
  802220:	b080052e 	bgeu	r22,r2,802238 <_fwalk_reent+0x7c>
  802224:	8080008f 	ldh	r2,2(r16)
  802228:	9809883a 	mov	r4,r19
  80222c:	14800226 	beq	r2,r18,802238 <_fwalk_reent+0x7c>
  802230:	a83ee83a 	callr	r21
  802234:	b8aeb03a 	or	r23,r23,r2
  802238:	84001a04 	addi	r16,r16,104
  80223c:	8cbff51e 	bne	r17,r18,802214 <__alt_mem_onchip_mem+0xff7fa214>
  802240:	a5000017 	ldw	r20,0(r20)
  802244:	a03fee1e 	bne	r20,zero,802200 <__alt_mem_onchip_mem+0xff7fa200>
  802248:	b805883a 	mov	r2,r23
  80224c:	dfc00817 	ldw	ra,32(sp)
  802250:	ddc00717 	ldw	r23,28(sp)
  802254:	dd800617 	ldw	r22,24(sp)
  802258:	dd400517 	ldw	r21,20(sp)
  80225c:	dd000417 	ldw	r20,16(sp)
  802260:	dcc00317 	ldw	r19,12(sp)
  802264:	dc800217 	ldw	r18,8(sp)
  802268:	dc400117 	ldw	r17,4(sp)
  80226c:	dc000017 	ldw	r16,0(sp)
  802270:	dec00904 	addi	sp,sp,36
  802274:	f800283a 	ret
  802278:	002f883a 	mov	r23,zero
  80227c:	003ff206 	br	802248 <__alt_mem_onchip_mem+0xff7fa248>

00802280 <_fwrite_r>:
  802280:	defff504 	addi	sp,sp,-44
  802284:	dc800815 	stw	r18,32(sp)
  802288:	39a5383a 	mul	r18,r7,r6
  80228c:	d8800304 	addi	r2,sp,12
  802290:	d8800015 	stw	r2,0(sp)
  802294:	00800044 	movi	r2,1
  802298:	dcc00915 	stw	r19,36(sp)
  80229c:	dc400715 	stw	r17,28(sp)
  8022a0:	dc000615 	stw	r16,24(sp)
  8022a4:	d9400315 	stw	r5,12(sp)
  8022a8:	dfc00a15 	stw	ra,40(sp)
  8022ac:	dc800415 	stw	r18,16(sp)
  8022b0:	dc800215 	stw	r18,8(sp)
  8022b4:	d8800115 	stw	r2,4(sp)
  8022b8:	3027883a 	mov	r19,r6
  8022bc:	3821883a 	mov	r16,r7
  8022c0:	2023883a 	mov	r17,r4
  8022c4:	d9400b17 	ldw	r5,44(sp)
  8022c8:	20000226 	beq	r4,zero,8022d4 <_fwrite_r+0x54>
  8022cc:	20800e17 	ldw	r2,56(r4)
  8022d0:	10001a26 	beq	r2,zero,80233c <_fwrite_r+0xbc>
  8022d4:	2880030b 	ldhu	r2,12(r5)
  8022d8:	10c8000c 	andi	r3,r2,8192
  8022dc:	1800061e 	bne	r3,zero,8022f8 <_fwrite_r+0x78>
  8022e0:	29001917 	ldw	r4,100(r5)
  8022e4:	00f7ffc4 	movi	r3,-8193
  8022e8:	10880014 	ori	r2,r2,8192
  8022ec:	20c6703a 	and	r3,r4,r3
  8022f0:	2880030d 	sth	r2,12(r5)
  8022f4:	28c01915 	stw	r3,100(r5)
  8022f8:	d80d883a 	mov	r6,sp
  8022fc:	8809883a 	mov	r4,r17
  802300:	0807e440 	call	807e44 <__sfvwrite_r>
  802304:	10000b26 	beq	r2,zero,802334 <_fwrite_r+0xb4>
  802308:	d9000217 	ldw	r4,8(sp)
  80230c:	980b883a 	mov	r5,r19
  802310:	9109c83a 	sub	r4,r18,r4
  802314:	08014b80 	call	8014b8 <__udivsi3>
  802318:	dfc00a17 	ldw	ra,40(sp)
  80231c:	dcc00917 	ldw	r19,36(sp)
  802320:	dc800817 	ldw	r18,32(sp)
  802324:	dc400717 	ldw	r17,28(sp)
  802328:	dc000617 	ldw	r16,24(sp)
  80232c:	dec00b04 	addi	sp,sp,44
  802330:	f800283a 	ret
  802334:	8005883a 	mov	r2,r16
  802338:	003ff706 	br	802318 <__alt_mem_onchip_mem+0xff7fa318>
  80233c:	d9400515 	stw	r5,20(sp)
  802340:	08019d40 	call	8019d4 <__sinit>
  802344:	d9400517 	ldw	r5,20(sp)
  802348:	003fe206 	br	8022d4 <__alt_mem_onchip_mem+0xff7fa2d4>

0080234c <fwrite>:
  80234c:	defffe04 	addi	sp,sp,-8
  802350:	00802074 	movhi	r2,129
  802354:	d9c00015 	stw	r7,0(sp)
  802358:	10947b04 	addi	r2,r2,20972
  80235c:	300f883a 	mov	r7,r6
  802360:	280d883a 	mov	r6,r5
  802364:	200b883a 	mov	r5,r4
  802368:	11000017 	ldw	r4,0(r2)
  80236c:	dfc00115 	stw	ra,4(sp)
  802370:	08022800 	call	802280 <_fwrite_r>
  802374:	dfc00117 	ldw	ra,4(sp)
  802378:	dec00204 	addi	sp,sp,8
  80237c:	f800283a 	ret

00802380 <__smakebuf_r>:
  802380:	2880030b 	ldhu	r2,12(r5)
  802384:	10c0008c 	andi	r3,r2,2
  802388:	1800411e 	bne	r3,zero,802490 <__smakebuf_r+0x110>
  80238c:	deffec04 	addi	sp,sp,-80
  802390:	dc000f15 	stw	r16,60(sp)
  802394:	2821883a 	mov	r16,r5
  802398:	2940038f 	ldh	r5,14(r5)
  80239c:	dc401015 	stw	r17,64(sp)
  8023a0:	dfc01315 	stw	ra,76(sp)
  8023a4:	dcc01215 	stw	r19,72(sp)
  8023a8:	dc801115 	stw	r18,68(sp)
  8023ac:	2023883a 	mov	r17,r4
  8023b0:	28001c16 	blt	r5,zero,802424 <__smakebuf_r+0xa4>
  8023b4:	d80d883a 	mov	r6,sp
  8023b8:	080209c0 	call	80209c <_fstat_r>
  8023bc:	10001816 	blt	r2,zero,802420 <__smakebuf_r+0xa0>
  8023c0:	d8800117 	ldw	r2,4(sp)
  8023c4:	00e00014 	movui	r3,32768
  8023c8:	10bc000c 	andi	r2,r2,61440
  8023cc:	14c80020 	cmpeqi	r19,r2,8192
  8023d0:	10c03726 	beq	r2,r3,8024b0 <__smakebuf_r+0x130>
  8023d4:	80c0030b 	ldhu	r3,12(r16)
  8023d8:	18c20014 	ori	r3,r3,2048
  8023dc:	80c0030d 	sth	r3,12(r16)
  8023e0:	00c80004 	movi	r3,8192
  8023e4:	10c0521e 	bne	r2,r3,802530 <__smakebuf_r+0x1b0>
  8023e8:	8140038f 	ldh	r5,14(r16)
  8023ec:	8809883a 	mov	r4,r17
  8023f0:	08083000 	call	808300 <_isatty_r>
  8023f4:	10004c26 	beq	r2,zero,802528 <__smakebuf_r+0x1a8>
  8023f8:	8080030b 	ldhu	r2,12(r16)
  8023fc:	80c010c4 	addi	r3,r16,67
  802400:	80c00015 	stw	r3,0(r16)
  802404:	10800054 	ori	r2,r2,1
  802408:	8080030d 	sth	r2,12(r16)
  80240c:	00800044 	movi	r2,1
  802410:	80c00415 	stw	r3,16(r16)
  802414:	80800515 	stw	r2,20(r16)
  802418:	04810004 	movi	r18,1024
  80241c:	00000706 	br	80243c <__smakebuf_r+0xbc>
  802420:	8080030b 	ldhu	r2,12(r16)
  802424:	10c0200c 	andi	r3,r2,128
  802428:	18001f1e 	bne	r3,zero,8024a8 <__smakebuf_r+0x128>
  80242c:	04810004 	movi	r18,1024
  802430:	10820014 	ori	r2,r2,2048
  802434:	8080030d 	sth	r2,12(r16)
  802438:	0027883a 	mov	r19,zero
  80243c:	900b883a 	mov	r5,r18
  802440:	8809883a 	mov	r4,r17
  802444:	080253c0 	call	80253c <_malloc_r>
  802448:	10002c26 	beq	r2,zero,8024fc <__smakebuf_r+0x17c>
  80244c:	80c0030b 	ldhu	r3,12(r16)
  802450:	01002034 	movhi	r4,128
  802454:	2105a304 	addi	r4,r4,5772
  802458:	89000f15 	stw	r4,60(r17)
  80245c:	18c02014 	ori	r3,r3,128
  802460:	80c0030d 	sth	r3,12(r16)
  802464:	80800015 	stw	r2,0(r16)
  802468:	80800415 	stw	r2,16(r16)
  80246c:	84800515 	stw	r18,20(r16)
  802470:	98001a1e 	bne	r19,zero,8024dc <__smakebuf_r+0x15c>
  802474:	dfc01317 	ldw	ra,76(sp)
  802478:	dcc01217 	ldw	r19,72(sp)
  80247c:	dc801117 	ldw	r18,68(sp)
  802480:	dc401017 	ldw	r17,64(sp)
  802484:	dc000f17 	ldw	r16,60(sp)
  802488:	dec01404 	addi	sp,sp,80
  80248c:	f800283a 	ret
  802490:	288010c4 	addi	r2,r5,67
  802494:	28800015 	stw	r2,0(r5)
  802498:	28800415 	stw	r2,16(r5)
  80249c:	00800044 	movi	r2,1
  8024a0:	28800515 	stw	r2,20(r5)
  8024a4:	f800283a 	ret
  8024a8:	04801004 	movi	r18,64
  8024ac:	003fe006 	br	802430 <__alt_mem_onchip_mem+0xff7fa430>
  8024b0:	81000a17 	ldw	r4,40(r16)
  8024b4:	00c02034 	movhi	r3,128
  8024b8:	18cd1204 	addi	r3,r3,13384
  8024bc:	20ffc51e 	bne	r4,r3,8023d4 <__alt_mem_onchip_mem+0xff7fa3d4>
  8024c0:	8080030b 	ldhu	r2,12(r16)
  8024c4:	04810004 	movi	r18,1024
  8024c8:	84801315 	stw	r18,76(r16)
  8024cc:	1484b03a 	or	r2,r2,r18
  8024d0:	8080030d 	sth	r2,12(r16)
  8024d4:	0027883a 	mov	r19,zero
  8024d8:	003fd806 	br	80243c <__alt_mem_onchip_mem+0xff7fa43c>
  8024dc:	8140038f 	ldh	r5,14(r16)
  8024e0:	8809883a 	mov	r4,r17
  8024e4:	08083000 	call	808300 <_isatty_r>
  8024e8:	103fe226 	beq	r2,zero,802474 <__alt_mem_onchip_mem+0xff7fa474>
  8024ec:	8080030b 	ldhu	r2,12(r16)
  8024f0:	10800054 	ori	r2,r2,1
  8024f4:	8080030d 	sth	r2,12(r16)
  8024f8:	003fde06 	br	802474 <__alt_mem_onchip_mem+0xff7fa474>
  8024fc:	8080030b 	ldhu	r2,12(r16)
  802500:	10c0800c 	andi	r3,r2,512
  802504:	183fdb1e 	bne	r3,zero,802474 <__alt_mem_onchip_mem+0xff7fa474>
  802508:	10800094 	ori	r2,r2,2
  80250c:	80c010c4 	addi	r3,r16,67
  802510:	8080030d 	sth	r2,12(r16)
  802514:	00800044 	movi	r2,1
  802518:	80c00015 	stw	r3,0(r16)
  80251c:	80c00415 	stw	r3,16(r16)
  802520:	80800515 	stw	r2,20(r16)
  802524:	003fd306 	br	802474 <__alt_mem_onchip_mem+0xff7fa474>
  802528:	04810004 	movi	r18,1024
  80252c:	003fc306 	br	80243c <__alt_mem_onchip_mem+0xff7fa43c>
  802530:	0027883a 	mov	r19,zero
  802534:	04810004 	movi	r18,1024
  802538:	003fc006 	br	80243c <__alt_mem_onchip_mem+0xff7fa43c>

0080253c <_malloc_r>:
  80253c:	defff504 	addi	sp,sp,-44
  802540:	dc800315 	stw	r18,12(sp)
  802544:	dfc00a15 	stw	ra,40(sp)
  802548:	df000915 	stw	fp,36(sp)
  80254c:	ddc00815 	stw	r23,32(sp)
  802550:	dd800715 	stw	r22,28(sp)
  802554:	dd400615 	stw	r21,24(sp)
  802558:	dd000515 	stw	r20,20(sp)
  80255c:	dcc00415 	stw	r19,16(sp)
  802560:	dc400215 	stw	r17,8(sp)
  802564:	dc000115 	stw	r16,4(sp)
  802568:	288002c4 	addi	r2,r5,11
  80256c:	00c00584 	movi	r3,22
  802570:	2025883a 	mov	r18,r4
  802574:	18807f2e 	bgeu	r3,r2,802774 <_malloc_r+0x238>
  802578:	047ffe04 	movi	r17,-8
  80257c:	1462703a 	and	r17,r2,r17
  802580:	8800a316 	blt	r17,zero,802810 <_malloc_r+0x2d4>
  802584:	8940a236 	bltu	r17,r5,802810 <_malloc_r+0x2d4>
  802588:	080f3fc0 	call	80f3fc <__malloc_lock>
  80258c:	00807dc4 	movi	r2,503
  802590:	1441e92e 	bgeu	r2,r17,802d38 <_malloc_r+0x7fc>
  802594:	8804d27a 	srli	r2,r17,9
  802598:	1000a126 	beq	r2,zero,802820 <_malloc_r+0x2e4>
  80259c:	00c00104 	movi	r3,4
  8025a0:	18811e36 	bltu	r3,r2,802a1c <_malloc_r+0x4e0>
  8025a4:	8804d1ba 	srli	r2,r17,6
  8025a8:	12000e44 	addi	r8,r2,57
  8025ac:	11c00e04 	addi	r7,r2,56
  8025b0:	4209883a 	add	r4,r8,r8
  8025b4:	04c02074 	movhi	r19,129
  8025b8:	2109883a 	add	r4,r4,r4
  8025bc:	9cce5f04 	addi	r19,r19,14716
  8025c0:	2109883a 	add	r4,r4,r4
  8025c4:	9909883a 	add	r4,r19,r4
  8025c8:	24000117 	ldw	r16,4(r4)
  8025cc:	213ffe04 	addi	r4,r4,-8
  8025d0:	24009726 	beq	r4,r16,802830 <_malloc_r+0x2f4>
  8025d4:	80800117 	ldw	r2,4(r16)
  8025d8:	01bfff04 	movi	r6,-4
  8025dc:	014003c4 	movi	r5,15
  8025e0:	1184703a 	and	r2,r2,r6
  8025e4:	1447c83a 	sub	r3,r2,r17
  8025e8:	28c00716 	blt	r5,r3,802608 <_malloc_r+0xcc>
  8025ec:	1800920e 	bge	r3,zero,802838 <_malloc_r+0x2fc>
  8025f0:	84000317 	ldw	r16,12(r16)
  8025f4:	24008e26 	beq	r4,r16,802830 <_malloc_r+0x2f4>
  8025f8:	80800117 	ldw	r2,4(r16)
  8025fc:	1184703a 	and	r2,r2,r6
  802600:	1447c83a 	sub	r3,r2,r17
  802604:	28fff90e 	bge	r5,r3,8025ec <__alt_mem_onchip_mem+0xff7fa5ec>
  802608:	3809883a 	mov	r4,r7
  80260c:	01802074 	movhi	r6,129
  802610:	9c000417 	ldw	r16,16(r19)
  802614:	318e5f04 	addi	r6,r6,14716
  802618:	32000204 	addi	r8,r6,8
  80261c:	82013426 	beq	r16,r8,802af0 <_malloc_r+0x5b4>
  802620:	80c00117 	ldw	r3,4(r16)
  802624:	00bfff04 	movi	r2,-4
  802628:	188e703a 	and	r7,r3,r2
  80262c:	3c45c83a 	sub	r2,r7,r17
  802630:	00c003c4 	movi	r3,15
  802634:	18811f16 	blt	r3,r2,802ab4 <_malloc_r+0x578>
  802638:	32000515 	stw	r8,20(r6)
  80263c:	32000415 	stw	r8,16(r6)
  802640:	10007f0e 	bge	r2,zero,802840 <_malloc_r+0x304>
  802644:	00807fc4 	movi	r2,511
  802648:	11c0fd36 	bltu	r2,r7,802a40 <_malloc_r+0x504>
  80264c:	3806d0fa 	srli	r3,r7,3
  802650:	01c00044 	movi	r7,1
  802654:	30800117 	ldw	r2,4(r6)
  802658:	19400044 	addi	r5,r3,1
  80265c:	294b883a 	add	r5,r5,r5
  802660:	1807d0ba 	srai	r3,r3,2
  802664:	294b883a 	add	r5,r5,r5
  802668:	294b883a 	add	r5,r5,r5
  80266c:	298b883a 	add	r5,r5,r6
  802670:	38c6983a 	sll	r3,r7,r3
  802674:	29c00017 	ldw	r7,0(r5)
  802678:	2a7ffe04 	addi	r9,r5,-8
  80267c:	1886b03a 	or	r3,r3,r2
  802680:	82400315 	stw	r9,12(r16)
  802684:	81c00215 	stw	r7,8(r16)
  802688:	30c00115 	stw	r3,4(r6)
  80268c:	2c000015 	stw	r16,0(r5)
  802690:	3c000315 	stw	r16,12(r7)
  802694:	2005d0ba 	srai	r2,r4,2
  802698:	01400044 	movi	r5,1
  80269c:	288a983a 	sll	r5,r5,r2
  8026a0:	19406f36 	bltu	r3,r5,802860 <_malloc_r+0x324>
  8026a4:	28c4703a 	and	r2,r5,r3
  8026a8:	10000a1e 	bne	r2,zero,8026d4 <_malloc_r+0x198>
  8026ac:	00bfff04 	movi	r2,-4
  8026b0:	294b883a 	add	r5,r5,r5
  8026b4:	2088703a 	and	r4,r4,r2
  8026b8:	28c4703a 	and	r2,r5,r3
  8026bc:	21000104 	addi	r4,r4,4
  8026c0:	1000041e 	bne	r2,zero,8026d4 <_malloc_r+0x198>
  8026c4:	294b883a 	add	r5,r5,r5
  8026c8:	28c4703a 	and	r2,r5,r3
  8026cc:	21000104 	addi	r4,r4,4
  8026d0:	103ffc26 	beq	r2,zero,8026c4 <__alt_mem_onchip_mem+0xff7fa6c4>
  8026d4:	02bfff04 	movi	r10,-4
  8026d8:	024003c4 	movi	r9,15
  8026dc:	21800044 	addi	r6,r4,1
  8026e0:	318d883a 	add	r6,r6,r6
  8026e4:	318d883a 	add	r6,r6,r6
  8026e8:	318d883a 	add	r6,r6,r6
  8026ec:	998d883a 	add	r6,r19,r6
  8026f0:	333ffe04 	addi	r12,r6,-8
  8026f4:	2017883a 	mov	r11,r4
  8026f8:	31800104 	addi	r6,r6,4
  8026fc:	34000017 	ldw	r16,0(r6)
  802700:	31fffd04 	addi	r7,r6,-12
  802704:	81c0041e 	bne	r16,r7,802718 <_malloc_r+0x1dc>
  802708:	0000fb06 	br	802af8 <_malloc_r+0x5bc>
  80270c:	1801030e 	bge	r3,zero,802b1c <_malloc_r+0x5e0>
  802710:	84000317 	ldw	r16,12(r16)
  802714:	81c0f826 	beq	r16,r7,802af8 <_malloc_r+0x5bc>
  802718:	80800117 	ldw	r2,4(r16)
  80271c:	1284703a 	and	r2,r2,r10
  802720:	1447c83a 	sub	r3,r2,r17
  802724:	48fff90e 	bge	r9,r3,80270c <__alt_mem_onchip_mem+0xff7fa70c>
  802728:	80800317 	ldw	r2,12(r16)
  80272c:	81000217 	ldw	r4,8(r16)
  802730:	89400054 	ori	r5,r17,1
  802734:	81400115 	stw	r5,4(r16)
  802738:	20800315 	stw	r2,12(r4)
  80273c:	11000215 	stw	r4,8(r2)
  802740:	8463883a 	add	r17,r16,r17
  802744:	9c400515 	stw	r17,20(r19)
  802748:	9c400415 	stw	r17,16(r19)
  80274c:	18800054 	ori	r2,r3,1
  802750:	88800115 	stw	r2,4(r17)
  802754:	8a000315 	stw	r8,12(r17)
  802758:	8a000215 	stw	r8,8(r17)
  80275c:	88e3883a 	add	r17,r17,r3
  802760:	88c00015 	stw	r3,0(r17)
  802764:	9009883a 	mov	r4,r18
  802768:	080f4200 	call	80f420 <__malloc_unlock>
  80276c:	80800204 	addi	r2,r16,8
  802770:	00001b06 	br	8027e0 <_malloc_r+0x2a4>
  802774:	04400404 	movi	r17,16
  802778:	89402536 	bltu	r17,r5,802810 <_malloc_r+0x2d4>
  80277c:	080f3fc0 	call	80f3fc <__malloc_lock>
  802780:	00800184 	movi	r2,6
  802784:	01000084 	movi	r4,2
  802788:	04c02074 	movhi	r19,129
  80278c:	1085883a 	add	r2,r2,r2
  802790:	9cce5f04 	addi	r19,r19,14716
  802794:	1085883a 	add	r2,r2,r2
  802798:	9885883a 	add	r2,r19,r2
  80279c:	14000117 	ldw	r16,4(r2)
  8027a0:	10fffe04 	addi	r3,r2,-8
  8027a4:	80c0d926 	beq	r16,r3,802b0c <_malloc_r+0x5d0>
  8027a8:	80c00117 	ldw	r3,4(r16)
  8027ac:	81000317 	ldw	r4,12(r16)
  8027b0:	00bfff04 	movi	r2,-4
  8027b4:	1884703a 	and	r2,r3,r2
  8027b8:	81400217 	ldw	r5,8(r16)
  8027bc:	8085883a 	add	r2,r16,r2
  8027c0:	10c00117 	ldw	r3,4(r2)
  8027c4:	29000315 	stw	r4,12(r5)
  8027c8:	21400215 	stw	r5,8(r4)
  8027cc:	18c00054 	ori	r3,r3,1
  8027d0:	10c00115 	stw	r3,4(r2)
  8027d4:	9009883a 	mov	r4,r18
  8027d8:	080f4200 	call	80f420 <__malloc_unlock>
  8027dc:	80800204 	addi	r2,r16,8
  8027e0:	dfc00a17 	ldw	ra,40(sp)
  8027e4:	df000917 	ldw	fp,36(sp)
  8027e8:	ddc00817 	ldw	r23,32(sp)
  8027ec:	dd800717 	ldw	r22,28(sp)
  8027f0:	dd400617 	ldw	r21,24(sp)
  8027f4:	dd000517 	ldw	r20,20(sp)
  8027f8:	dcc00417 	ldw	r19,16(sp)
  8027fc:	dc800317 	ldw	r18,12(sp)
  802800:	dc400217 	ldw	r17,8(sp)
  802804:	dc000117 	ldw	r16,4(sp)
  802808:	dec00b04 	addi	sp,sp,44
  80280c:	f800283a 	ret
  802810:	00800304 	movi	r2,12
  802814:	90800015 	stw	r2,0(r18)
  802818:	0005883a 	mov	r2,zero
  80281c:	003ff006 	br	8027e0 <__alt_mem_onchip_mem+0xff7fa7e0>
  802820:	01002004 	movi	r4,128
  802824:	02001004 	movi	r8,64
  802828:	01c00fc4 	movi	r7,63
  80282c:	003f6106 	br	8025b4 <__alt_mem_onchip_mem+0xff7fa5b4>
  802830:	4009883a 	mov	r4,r8
  802834:	003f7506 	br	80260c <__alt_mem_onchip_mem+0xff7fa60c>
  802838:	81000317 	ldw	r4,12(r16)
  80283c:	003fde06 	br	8027b8 <__alt_mem_onchip_mem+0xff7fa7b8>
  802840:	81c5883a 	add	r2,r16,r7
  802844:	11400117 	ldw	r5,4(r2)
  802848:	9009883a 	mov	r4,r18
  80284c:	29400054 	ori	r5,r5,1
  802850:	11400115 	stw	r5,4(r2)
  802854:	080f4200 	call	80f420 <__malloc_unlock>
  802858:	80800204 	addi	r2,r16,8
  80285c:	003fe006 	br	8027e0 <__alt_mem_onchip_mem+0xff7fa7e0>
  802860:	9c000217 	ldw	r16,8(r19)
  802864:	00bfff04 	movi	r2,-4
  802868:	85800117 	ldw	r22,4(r16)
  80286c:	b0ac703a 	and	r22,r22,r2
  802870:	b4400336 	bltu	r22,r17,802880 <_malloc_r+0x344>
  802874:	b445c83a 	sub	r2,r22,r17
  802878:	00c003c4 	movi	r3,15
  80287c:	18805d16 	blt	r3,r2,8029f4 <_malloc_r+0x4b8>
  802880:	05c02074 	movhi	r23,129
  802884:	00802074 	movhi	r2,129
  802888:	109bde04 	addi	r2,r2,28536
  80288c:	bdd47c04 	addi	r23,r23,20976
  802890:	15400017 	ldw	r21,0(r2)
  802894:	b8c00017 	ldw	r3,0(r23)
  802898:	00bfffc4 	movi	r2,-1
  80289c:	858d883a 	add	r6,r16,r22
  8028a0:	8d6b883a 	add	r21,r17,r21
  8028a4:	1880ea26 	beq	r3,r2,802c50 <_malloc_r+0x714>
  8028a8:	ad4403c4 	addi	r21,r21,4111
  8028ac:	00bc0004 	movi	r2,-4096
  8028b0:	a8aa703a 	and	r21,r21,r2
  8028b4:	a80b883a 	mov	r5,r21
  8028b8:	9009883a 	mov	r4,r18
  8028bc:	d9800015 	stw	r6,0(sp)
  8028c0:	080331c0 	call	80331c <_sbrk_r>
  8028c4:	1029883a 	mov	r20,r2
  8028c8:	00bfffc4 	movi	r2,-1
  8028cc:	d9800017 	ldw	r6,0(sp)
  8028d0:	a080e826 	beq	r20,r2,802c74 <_malloc_r+0x738>
  8028d4:	a180a636 	bltu	r20,r6,802b70 <_malloc_r+0x634>
  8028d8:	07002074 	movhi	fp,129
  8028dc:	e71be904 	addi	fp,fp,28580
  8028e0:	e0800017 	ldw	r2,0(fp)
  8028e4:	a887883a 	add	r3,r21,r2
  8028e8:	e0c00015 	stw	r3,0(fp)
  8028ec:	3500e626 	beq	r6,r20,802c88 <_malloc_r+0x74c>
  8028f0:	b9000017 	ldw	r4,0(r23)
  8028f4:	00bfffc4 	movi	r2,-1
  8028f8:	2080ee26 	beq	r4,r2,802cb4 <_malloc_r+0x778>
  8028fc:	a185c83a 	sub	r2,r20,r6
  802900:	10c5883a 	add	r2,r2,r3
  802904:	e0800015 	stw	r2,0(fp)
  802908:	a0c001cc 	andi	r3,r20,7
  80290c:	1800bc26 	beq	r3,zero,802c00 <_malloc_r+0x6c4>
  802910:	a0e9c83a 	sub	r20,r20,r3
  802914:	00840204 	movi	r2,4104
  802918:	a5000204 	addi	r20,r20,8
  80291c:	10c7c83a 	sub	r3,r2,r3
  802920:	a545883a 	add	r2,r20,r21
  802924:	1083ffcc 	andi	r2,r2,4095
  802928:	18abc83a 	sub	r21,r3,r2
  80292c:	a80b883a 	mov	r5,r21
  802930:	9009883a 	mov	r4,r18
  802934:	080331c0 	call	80331c <_sbrk_r>
  802938:	00ffffc4 	movi	r3,-1
  80293c:	10c0e126 	beq	r2,r3,802cc4 <_malloc_r+0x788>
  802940:	1505c83a 	sub	r2,r2,r20
  802944:	1545883a 	add	r2,r2,r21
  802948:	10800054 	ori	r2,r2,1
  80294c:	e0c00017 	ldw	r3,0(fp)
  802950:	9d000215 	stw	r20,8(r19)
  802954:	a0800115 	stw	r2,4(r20)
  802958:	a8c7883a 	add	r3,r21,r3
  80295c:	e0c00015 	stw	r3,0(fp)
  802960:	84c00e26 	beq	r16,r19,80299c <_malloc_r+0x460>
  802964:	018003c4 	movi	r6,15
  802968:	3580a72e 	bgeu	r6,r22,802c08 <_malloc_r+0x6cc>
  80296c:	81400117 	ldw	r5,4(r16)
  802970:	013ffe04 	movi	r4,-8
  802974:	b0bffd04 	addi	r2,r22,-12
  802978:	1104703a 	and	r2,r2,r4
  80297c:	2900004c 	andi	r4,r5,1
  802980:	2088b03a 	or	r4,r4,r2
  802984:	81000115 	stw	r4,4(r16)
  802988:	01400144 	movi	r5,5
  80298c:	8089883a 	add	r4,r16,r2
  802990:	21400115 	stw	r5,4(r4)
  802994:	21400215 	stw	r5,8(r4)
  802998:	3080cd36 	bltu	r6,r2,802cd0 <_malloc_r+0x794>
  80299c:	00802074 	movhi	r2,129
  8029a0:	109bdd04 	addi	r2,r2,28532
  8029a4:	11000017 	ldw	r4,0(r2)
  8029a8:	20c0012e 	bgeu	r4,r3,8029b0 <_malloc_r+0x474>
  8029ac:	10c00015 	stw	r3,0(r2)
  8029b0:	00802074 	movhi	r2,129
  8029b4:	109bdc04 	addi	r2,r2,28528
  8029b8:	11000017 	ldw	r4,0(r2)
  8029bc:	9c000217 	ldw	r16,8(r19)
  8029c0:	20c0012e 	bgeu	r4,r3,8029c8 <_malloc_r+0x48c>
  8029c4:	10c00015 	stw	r3,0(r2)
  8029c8:	80c00117 	ldw	r3,4(r16)
  8029cc:	00bfff04 	movi	r2,-4
  8029d0:	1886703a 	and	r3,r3,r2
  8029d4:	1c45c83a 	sub	r2,r3,r17
  8029d8:	1c400236 	bltu	r3,r17,8029e4 <_malloc_r+0x4a8>
  8029dc:	00c003c4 	movi	r3,15
  8029e0:	18800416 	blt	r3,r2,8029f4 <_malloc_r+0x4b8>
  8029e4:	9009883a 	mov	r4,r18
  8029e8:	080f4200 	call	80f420 <__malloc_unlock>
  8029ec:	0005883a 	mov	r2,zero
  8029f0:	003f7b06 	br	8027e0 <__alt_mem_onchip_mem+0xff7fa7e0>
  8029f4:	88c00054 	ori	r3,r17,1
  8029f8:	80c00115 	stw	r3,4(r16)
  8029fc:	8463883a 	add	r17,r16,r17
  802a00:	10800054 	ori	r2,r2,1
  802a04:	9c400215 	stw	r17,8(r19)
  802a08:	88800115 	stw	r2,4(r17)
  802a0c:	9009883a 	mov	r4,r18
  802a10:	080f4200 	call	80f420 <__malloc_unlock>
  802a14:	80800204 	addi	r2,r16,8
  802a18:	003f7106 	br	8027e0 <__alt_mem_onchip_mem+0xff7fa7e0>
  802a1c:	00c00504 	movi	r3,20
  802a20:	18804a2e 	bgeu	r3,r2,802b4c <_malloc_r+0x610>
  802a24:	00c01504 	movi	r3,84
  802a28:	18806e36 	bltu	r3,r2,802be4 <_malloc_r+0x6a8>
  802a2c:	8804d33a 	srli	r2,r17,12
  802a30:	12001bc4 	addi	r8,r2,111
  802a34:	11c01b84 	addi	r7,r2,110
  802a38:	4209883a 	add	r4,r8,r8
  802a3c:	003edd06 	br	8025b4 <__alt_mem_onchip_mem+0xff7fa5b4>
  802a40:	3804d27a 	srli	r2,r7,9
  802a44:	00c00104 	movi	r3,4
  802a48:	1880442e 	bgeu	r3,r2,802b5c <_malloc_r+0x620>
  802a4c:	00c00504 	movi	r3,20
  802a50:	18808136 	bltu	r3,r2,802c58 <_malloc_r+0x71c>
  802a54:	11401704 	addi	r5,r2,92
  802a58:	10c016c4 	addi	r3,r2,91
  802a5c:	294b883a 	add	r5,r5,r5
  802a60:	294b883a 	add	r5,r5,r5
  802a64:	294b883a 	add	r5,r5,r5
  802a68:	994b883a 	add	r5,r19,r5
  802a6c:	28800017 	ldw	r2,0(r5)
  802a70:	01802074 	movhi	r6,129
  802a74:	297ffe04 	addi	r5,r5,-8
  802a78:	318e5f04 	addi	r6,r6,14716
  802a7c:	28806526 	beq	r5,r2,802c14 <_malloc_r+0x6d8>
  802a80:	01bfff04 	movi	r6,-4
  802a84:	10c00117 	ldw	r3,4(r2)
  802a88:	1986703a 	and	r3,r3,r6
  802a8c:	38c0022e 	bgeu	r7,r3,802a98 <_malloc_r+0x55c>
  802a90:	10800217 	ldw	r2,8(r2)
  802a94:	28bffb1e 	bne	r5,r2,802a84 <__alt_mem_onchip_mem+0xff7faa84>
  802a98:	11400317 	ldw	r5,12(r2)
  802a9c:	98c00117 	ldw	r3,4(r19)
  802aa0:	81400315 	stw	r5,12(r16)
  802aa4:	80800215 	stw	r2,8(r16)
  802aa8:	2c000215 	stw	r16,8(r5)
  802aac:	14000315 	stw	r16,12(r2)
  802ab0:	003ef806 	br	802694 <__alt_mem_onchip_mem+0xff7fa694>
  802ab4:	88c00054 	ori	r3,r17,1
  802ab8:	80c00115 	stw	r3,4(r16)
  802abc:	8463883a 	add	r17,r16,r17
  802ac0:	34400515 	stw	r17,20(r6)
  802ac4:	34400415 	stw	r17,16(r6)
  802ac8:	10c00054 	ori	r3,r2,1
  802acc:	8a000315 	stw	r8,12(r17)
  802ad0:	8a000215 	stw	r8,8(r17)
  802ad4:	88c00115 	stw	r3,4(r17)
  802ad8:	88a3883a 	add	r17,r17,r2
  802adc:	88800015 	stw	r2,0(r17)
  802ae0:	9009883a 	mov	r4,r18
  802ae4:	080f4200 	call	80f420 <__malloc_unlock>
  802ae8:	80800204 	addi	r2,r16,8
  802aec:	003f3c06 	br	8027e0 <__alt_mem_onchip_mem+0xff7fa7e0>
  802af0:	30c00117 	ldw	r3,4(r6)
  802af4:	003ee706 	br	802694 <__alt_mem_onchip_mem+0xff7fa694>
  802af8:	5ac00044 	addi	r11,r11,1
  802afc:	588000cc 	andi	r2,r11,3
  802b00:	31800204 	addi	r6,r6,8
  802b04:	103efd1e 	bne	r2,zero,8026fc <__alt_mem_onchip_mem+0xff7fa6fc>
  802b08:	00002406 	br	802b9c <_malloc_r+0x660>
  802b0c:	14000317 	ldw	r16,12(r2)
  802b10:	143f251e 	bne	r2,r16,8027a8 <__alt_mem_onchip_mem+0xff7fa7a8>
  802b14:	21000084 	addi	r4,r4,2
  802b18:	003ebc06 	br	80260c <__alt_mem_onchip_mem+0xff7fa60c>
  802b1c:	8085883a 	add	r2,r16,r2
  802b20:	10c00117 	ldw	r3,4(r2)
  802b24:	81000317 	ldw	r4,12(r16)
  802b28:	81400217 	ldw	r5,8(r16)
  802b2c:	18c00054 	ori	r3,r3,1
  802b30:	10c00115 	stw	r3,4(r2)
  802b34:	29000315 	stw	r4,12(r5)
  802b38:	21400215 	stw	r5,8(r4)
  802b3c:	9009883a 	mov	r4,r18
  802b40:	080f4200 	call	80f420 <__malloc_unlock>
  802b44:	80800204 	addi	r2,r16,8
  802b48:	003f2506 	br	8027e0 <__alt_mem_onchip_mem+0xff7fa7e0>
  802b4c:	12001704 	addi	r8,r2,92
  802b50:	11c016c4 	addi	r7,r2,91
  802b54:	4209883a 	add	r4,r8,r8
  802b58:	003e9606 	br	8025b4 <__alt_mem_onchip_mem+0xff7fa5b4>
  802b5c:	3804d1ba 	srli	r2,r7,6
  802b60:	11400e44 	addi	r5,r2,57
  802b64:	10c00e04 	addi	r3,r2,56
  802b68:	294b883a 	add	r5,r5,r5
  802b6c:	003fbc06 	br	802a60 <__alt_mem_onchip_mem+0xff7faa60>
  802b70:	84ff5926 	beq	r16,r19,8028d8 <__alt_mem_onchip_mem+0xff7fa8d8>
  802b74:	00802074 	movhi	r2,129
  802b78:	108e5f04 	addi	r2,r2,14716
  802b7c:	14000217 	ldw	r16,8(r2)
  802b80:	00bfff04 	movi	r2,-4
  802b84:	80c00117 	ldw	r3,4(r16)
  802b88:	1886703a 	and	r3,r3,r2
  802b8c:	003f9106 	br	8029d4 <__alt_mem_onchip_mem+0xff7fa9d4>
  802b90:	60800217 	ldw	r2,8(r12)
  802b94:	213fffc4 	addi	r4,r4,-1
  802b98:	1300651e 	bne	r2,r12,802d30 <_malloc_r+0x7f4>
  802b9c:	208000cc 	andi	r2,r4,3
  802ba0:	633ffe04 	addi	r12,r12,-8
  802ba4:	103ffa1e 	bne	r2,zero,802b90 <__alt_mem_onchip_mem+0xff7fab90>
  802ba8:	98800117 	ldw	r2,4(r19)
  802bac:	0146303a 	nor	r3,zero,r5
  802bb0:	1884703a 	and	r2,r3,r2
  802bb4:	98800115 	stw	r2,4(r19)
  802bb8:	294b883a 	add	r5,r5,r5
  802bbc:	117f2836 	bltu	r2,r5,802860 <__alt_mem_onchip_mem+0xff7fa860>
  802bc0:	283f2726 	beq	r5,zero,802860 <__alt_mem_onchip_mem+0xff7fa860>
  802bc4:	2886703a 	and	r3,r5,r2
  802bc8:	5809883a 	mov	r4,r11
  802bcc:	183ec31e 	bne	r3,zero,8026dc <__alt_mem_onchip_mem+0xff7fa6dc>
  802bd0:	294b883a 	add	r5,r5,r5
  802bd4:	2886703a 	and	r3,r5,r2
  802bd8:	21000104 	addi	r4,r4,4
  802bdc:	183ffc26 	beq	r3,zero,802bd0 <__alt_mem_onchip_mem+0xff7fabd0>
  802be0:	003ebe06 	br	8026dc <__alt_mem_onchip_mem+0xff7fa6dc>
  802be4:	00c05504 	movi	r3,340
  802be8:	18801236 	bltu	r3,r2,802c34 <_malloc_r+0x6f8>
  802bec:	8804d3fa 	srli	r2,r17,15
  802bf0:	12001e04 	addi	r8,r2,120
  802bf4:	11c01dc4 	addi	r7,r2,119
  802bf8:	4209883a 	add	r4,r8,r8
  802bfc:	003e6d06 	br	8025b4 <__alt_mem_onchip_mem+0xff7fa5b4>
  802c00:	00c40004 	movi	r3,4096
  802c04:	003f4606 	br	802920 <__alt_mem_onchip_mem+0xff7fa920>
  802c08:	00800044 	movi	r2,1
  802c0c:	a0800115 	stw	r2,4(r20)
  802c10:	003f7406 	br	8029e4 <__alt_mem_onchip_mem+0xff7fa9e4>
  802c14:	1805d0ba 	srai	r2,r3,2
  802c18:	01c00044 	movi	r7,1
  802c1c:	30c00117 	ldw	r3,4(r6)
  802c20:	388e983a 	sll	r7,r7,r2
  802c24:	2805883a 	mov	r2,r5
  802c28:	38c6b03a 	or	r3,r7,r3
  802c2c:	30c00115 	stw	r3,4(r6)
  802c30:	003f9b06 	br	802aa0 <__alt_mem_onchip_mem+0xff7faaa0>
  802c34:	00c15504 	movi	r3,1364
  802c38:	18801a36 	bltu	r3,r2,802ca4 <_malloc_r+0x768>
  802c3c:	8804d4ba 	srli	r2,r17,18
  802c40:	12001f44 	addi	r8,r2,125
  802c44:	11c01f04 	addi	r7,r2,124
  802c48:	4209883a 	add	r4,r8,r8
  802c4c:	003e5906 	br	8025b4 <__alt_mem_onchip_mem+0xff7fa5b4>
  802c50:	ad400404 	addi	r21,r21,16
  802c54:	003f1706 	br	8028b4 <__alt_mem_onchip_mem+0xff7fa8b4>
  802c58:	00c01504 	movi	r3,84
  802c5c:	18802336 	bltu	r3,r2,802cec <_malloc_r+0x7b0>
  802c60:	3804d33a 	srli	r2,r7,12
  802c64:	11401bc4 	addi	r5,r2,111
  802c68:	10c01b84 	addi	r3,r2,110
  802c6c:	294b883a 	add	r5,r5,r5
  802c70:	003f7b06 	br	802a60 <__alt_mem_onchip_mem+0xff7faa60>
  802c74:	9c000217 	ldw	r16,8(r19)
  802c78:	00bfff04 	movi	r2,-4
  802c7c:	80c00117 	ldw	r3,4(r16)
  802c80:	1886703a 	and	r3,r3,r2
  802c84:	003f5306 	br	8029d4 <__alt_mem_onchip_mem+0xff7fa9d4>
  802c88:	3083ffcc 	andi	r2,r6,4095
  802c8c:	103f181e 	bne	r2,zero,8028f0 <__alt_mem_onchip_mem+0xff7fa8f0>
  802c90:	99000217 	ldw	r4,8(r19)
  802c94:	b545883a 	add	r2,r22,r21
  802c98:	10800054 	ori	r2,r2,1
  802c9c:	20800115 	stw	r2,4(r4)
  802ca0:	003f3e06 	br	80299c <__alt_mem_onchip_mem+0xff7fa99c>
  802ca4:	01003f84 	movi	r4,254
  802ca8:	02001fc4 	movi	r8,127
  802cac:	01c01f84 	movi	r7,126
  802cb0:	003e4006 	br	8025b4 <__alt_mem_onchip_mem+0xff7fa5b4>
  802cb4:	00802074 	movhi	r2,129
  802cb8:	10947c04 	addi	r2,r2,20976
  802cbc:	15000015 	stw	r20,0(r2)
  802cc0:	003f1106 	br	802908 <__alt_mem_onchip_mem+0xff7fa908>
  802cc4:	00800044 	movi	r2,1
  802cc8:	002b883a 	mov	r21,zero
  802ccc:	003f1f06 	br	80294c <__alt_mem_onchip_mem+0xff7fa94c>
  802cd0:	81400204 	addi	r5,r16,8
  802cd4:	9009883a 	mov	r4,r18
  802cd8:	0807b340 	call	807b34 <_free_r>
  802cdc:	00802074 	movhi	r2,129
  802ce0:	109be904 	addi	r2,r2,28580
  802ce4:	10c00017 	ldw	r3,0(r2)
  802ce8:	003f2c06 	br	80299c <__alt_mem_onchip_mem+0xff7fa99c>
  802cec:	00c05504 	movi	r3,340
  802cf0:	18800536 	bltu	r3,r2,802d08 <_malloc_r+0x7cc>
  802cf4:	3804d3fa 	srli	r2,r7,15
  802cf8:	11401e04 	addi	r5,r2,120
  802cfc:	10c01dc4 	addi	r3,r2,119
  802d00:	294b883a 	add	r5,r5,r5
  802d04:	003f5606 	br	802a60 <__alt_mem_onchip_mem+0xff7faa60>
  802d08:	00c15504 	movi	r3,1364
  802d0c:	18800536 	bltu	r3,r2,802d24 <_malloc_r+0x7e8>
  802d10:	3804d4ba 	srli	r2,r7,18
  802d14:	11401f44 	addi	r5,r2,125
  802d18:	10c01f04 	addi	r3,r2,124
  802d1c:	294b883a 	add	r5,r5,r5
  802d20:	003f4f06 	br	802a60 <__alt_mem_onchip_mem+0xff7faa60>
  802d24:	01403f84 	movi	r5,254
  802d28:	00c01f84 	movi	r3,126
  802d2c:	003f4c06 	br	802a60 <__alt_mem_onchip_mem+0xff7faa60>
  802d30:	98800117 	ldw	r2,4(r19)
  802d34:	003fa006 	br	802bb8 <__alt_mem_onchip_mem+0xff7fabb8>
  802d38:	8808d0fa 	srli	r4,r17,3
  802d3c:	20800044 	addi	r2,r4,1
  802d40:	1085883a 	add	r2,r2,r2
  802d44:	003e9006 	br	802788 <__alt_mem_onchip_mem+0xff7fa788>

00802d48 <memset>:
  802d48:	20c000cc 	andi	r3,r4,3
  802d4c:	2005883a 	mov	r2,r4
  802d50:	18004426 	beq	r3,zero,802e64 <memset+0x11c>
  802d54:	31ffffc4 	addi	r7,r6,-1
  802d58:	30004026 	beq	r6,zero,802e5c <memset+0x114>
  802d5c:	2813883a 	mov	r9,r5
  802d60:	200d883a 	mov	r6,r4
  802d64:	2007883a 	mov	r3,r4
  802d68:	00000406 	br	802d7c <memset+0x34>
  802d6c:	3a3fffc4 	addi	r8,r7,-1
  802d70:	31800044 	addi	r6,r6,1
  802d74:	38003926 	beq	r7,zero,802e5c <memset+0x114>
  802d78:	400f883a 	mov	r7,r8
  802d7c:	18c00044 	addi	r3,r3,1
  802d80:	32400005 	stb	r9,0(r6)
  802d84:	1a0000cc 	andi	r8,r3,3
  802d88:	403ff81e 	bne	r8,zero,802d6c <__alt_mem_onchip_mem+0xff7fad6c>
  802d8c:	010000c4 	movi	r4,3
  802d90:	21c02d2e 	bgeu	r4,r7,802e48 <memset+0x100>
  802d94:	29003fcc 	andi	r4,r5,255
  802d98:	200c923a 	slli	r6,r4,8
  802d9c:	3108b03a 	or	r4,r6,r4
  802da0:	200c943a 	slli	r6,r4,16
  802da4:	218cb03a 	or	r6,r4,r6
  802da8:	010003c4 	movi	r4,15
  802dac:	21c0182e 	bgeu	r4,r7,802e10 <memset+0xc8>
  802db0:	3b3ffc04 	addi	r12,r7,-16
  802db4:	6018d13a 	srli	r12,r12,4
  802db8:	1a000104 	addi	r8,r3,4
  802dbc:	1ac00204 	addi	r11,r3,8
  802dc0:	6008913a 	slli	r4,r12,4
  802dc4:	1a800304 	addi	r10,r3,12
  802dc8:	1813883a 	mov	r9,r3
  802dcc:	21000504 	addi	r4,r4,20
  802dd0:	1909883a 	add	r4,r3,r4
  802dd4:	49800015 	stw	r6,0(r9)
  802dd8:	41800015 	stw	r6,0(r8)
  802ddc:	59800015 	stw	r6,0(r11)
  802de0:	51800015 	stw	r6,0(r10)
  802de4:	42000404 	addi	r8,r8,16
  802de8:	4a400404 	addi	r9,r9,16
  802dec:	5ac00404 	addi	r11,r11,16
  802df0:	52800404 	addi	r10,r10,16
  802df4:	413ff71e 	bne	r8,r4,802dd4 <__alt_mem_onchip_mem+0xff7fadd4>
  802df8:	63000044 	addi	r12,r12,1
  802dfc:	6018913a 	slli	r12,r12,4
  802e00:	39c003cc 	andi	r7,r7,15
  802e04:	010000c4 	movi	r4,3
  802e08:	1b07883a 	add	r3,r3,r12
  802e0c:	21c00e2e 	bgeu	r4,r7,802e48 <memset+0x100>
  802e10:	1813883a 	mov	r9,r3
  802e14:	3811883a 	mov	r8,r7
  802e18:	010000c4 	movi	r4,3
  802e1c:	49800015 	stw	r6,0(r9)
  802e20:	423fff04 	addi	r8,r8,-4
  802e24:	4a400104 	addi	r9,r9,4
  802e28:	223ffc36 	bltu	r4,r8,802e1c <__alt_mem_onchip_mem+0xff7fae1c>
  802e2c:	393fff04 	addi	r4,r7,-4
  802e30:	2008d0ba 	srli	r4,r4,2
  802e34:	39c000cc 	andi	r7,r7,3
  802e38:	21000044 	addi	r4,r4,1
  802e3c:	2109883a 	add	r4,r4,r4
  802e40:	2109883a 	add	r4,r4,r4
  802e44:	1907883a 	add	r3,r3,r4
  802e48:	38000526 	beq	r7,zero,802e60 <memset+0x118>
  802e4c:	19cf883a 	add	r7,r3,r7
  802e50:	19400005 	stb	r5,0(r3)
  802e54:	18c00044 	addi	r3,r3,1
  802e58:	38fffd1e 	bne	r7,r3,802e50 <__alt_mem_onchip_mem+0xff7fae50>
  802e5c:	f800283a 	ret
  802e60:	f800283a 	ret
  802e64:	2007883a 	mov	r3,r4
  802e68:	300f883a 	mov	r7,r6
  802e6c:	003fc706 	br	802d8c <__alt_mem_onchip_mem+0xff7fad8c>

00802e70 <_open_r>:
  802e70:	defffd04 	addi	sp,sp,-12
  802e74:	2805883a 	mov	r2,r5
  802e78:	dc000015 	stw	r16,0(sp)
  802e7c:	04002074 	movhi	r16,129
  802e80:	dc400115 	stw	r17,4(sp)
  802e84:	300b883a 	mov	r5,r6
  802e88:	841bdb04 	addi	r16,r16,28524
  802e8c:	2023883a 	mov	r17,r4
  802e90:	380d883a 	mov	r6,r7
  802e94:	1009883a 	mov	r4,r2
  802e98:	dfc00215 	stw	ra,8(sp)
  802e9c:	80000015 	stw	zero,0(r16)
  802ea0:	080f5440 	call	80f544 <open>
  802ea4:	00ffffc4 	movi	r3,-1
  802ea8:	10c00526 	beq	r2,r3,802ec0 <_open_r+0x50>
  802eac:	dfc00217 	ldw	ra,8(sp)
  802eb0:	dc400117 	ldw	r17,4(sp)
  802eb4:	dc000017 	ldw	r16,0(sp)
  802eb8:	dec00304 	addi	sp,sp,12
  802ebc:	f800283a 	ret
  802ec0:	80c00017 	ldw	r3,0(r16)
  802ec4:	183ff926 	beq	r3,zero,802eac <__alt_mem_onchip_mem+0xff7faeac>
  802ec8:	88c00015 	stw	r3,0(r17)
  802ecc:	003ff706 	br	802eac <__alt_mem_onchip_mem+0xff7faeac>

00802ed0 <_printf_r>:
  802ed0:	defffd04 	addi	sp,sp,-12
  802ed4:	2805883a 	mov	r2,r5
  802ed8:	dfc00015 	stw	ra,0(sp)
  802edc:	d9800115 	stw	r6,4(sp)
  802ee0:	d9c00215 	stw	r7,8(sp)
  802ee4:	21400217 	ldw	r5,8(r4)
  802ee8:	d9c00104 	addi	r7,sp,4
  802eec:	100d883a 	mov	r6,r2
  802ef0:	08037000 	call	803700 <___vfprintf_internal_r>
  802ef4:	dfc00017 	ldw	ra,0(sp)
  802ef8:	dec00304 	addi	sp,sp,12
  802efc:	f800283a 	ret

00802f00 <printf>:
  802f00:	defffc04 	addi	sp,sp,-16
  802f04:	dfc00015 	stw	ra,0(sp)
  802f08:	d9400115 	stw	r5,4(sp)
  802f0c:	d9800215 	stw	r6,8(sp)
  802f10:	d9c00315 	stw	r7,12(sp)
  802f14:	00802074 	movhi	r2,129
  802f18:	10947b04 	addi	r2,r2,20972
  802f1c:	10800017 	ldw	r2,0(r2)
  802f20:	200b883a 	mov	r5,r4
  802f24:	d9800104 	addi	r6,sp,4
  802f28:	11000217 	ldw	r4,8(r2)
  802f2c:	08058f80 	call	8058f8 <__vfprintf_internal>
  802f30:	dfc00017 	ldw	ra,0(sp)
  802f34:	dec00404 	addi	sp,sp,16
  802f38:	f800283a 	ret

00802f3c <_putc_r>:
  802f3c:	defffc04 	addi	sp,sp,-16
  802f40:	dc000215 	stw	r16,8(sp)
  802f44:	dfc00315 	stw	ra,12(sp)
  802f48:	2021883a 	mov	r16,r4
  802f4c:	20000226 	beq	r4,zero,802f58 <_putc_r+0x1c>
  802f50:	20800e17 	ldw	r2,56(r4)
  802f54:	10001b26 	beq	r2,zero,802fc4 <_putc_r+0x88>
  802f58:	30800217 	ldw	r2,8(r6)
  802f5c:	10bfffc4 	addi	r2,r2,-1
  802f60:	30800215 	stw	r2,8(r6)
  802f64:	10000a16 	blt	r2,zero,802f90 <_putc_r+0x54>
  802f68:	30800017 	ldw	r2,0(r6)
  802f6c:	11400005 	stb	r5,0(r2)
  802f70:	30800017 	ldw	r2,0(r6)
  802f74:	10c00044 	addi	r3,r2,1
  802f78:	30c00015 	stw	r3,0(r6)
  802f7c:	10800003 	ldbu	r2,0(r2)
  802f80:	dfc00317 	ldw	ra,12(sp)
  802f84:	dc000217 	ldw	r16,8(sp)
  802f88:	dec00404 	addi	sp,sp,16
  802f8c:	f800283a 	ret
  802f90:	30c00617 	ldw	r3,24(r6)
  802f94:	10c00616 	blt	r2,r3,802fb0 <_putc_r+0x74>
  802f98:	30800017 	ldw	r2,0(r6)
  802f9c:	00c00284 	movi	r3,10
  802fa0:	11400005 	stb	r5,0(r2)
  802fa4:	30800017 	ldw	r2,0(r6)
  802fa8:	11400003 	ldbu	r5,0(r2)
  802fac:	28fff11e 	bne	r5,r3,802f74 <__alt_mem_onchip_mem+0xff7faf74>
  802fb0:	8009883a 	mov	r4,r16
  802fb4:	dfc00317 	ldw	ra,12(sp)
  802fb8:	dc000217 	ldw	r16,8(sp)
  802fbc:	dec00404 	addi	sp,sp,16
  802fc0:	08059d01 	jmpi	8059d0 <__swbuf_r>
  802fc4:	d9400015 	stw	r5,0(sp)
  802fc8:	d9800115 	stw	r6,4(sp)
  802fcc:	08019d40 	call	8019d4 <__sinit>
  802fd0:	d9800117 	ldw	r6,4(sp)
  802fd4:	d9400017 	ldw	r5,0(sp)
  802fd8:	003fdf06 	br	802f58 <__alt_mem_onchip_mem+0xff7faf58>

00802fdc <putc>:
  802fdc:	00802074 	movhi	r2,129
  802fe0:	defffc04 	addi	sp,sp,-16
  802fe4:	10947b04 	addi	r2,r2,20972
  802fe8:	dc000115 	stw	r16,4(sp)
  802fec:	14000017 	ldw	r16,0(r2)
  802ff0:	dc400215 	stw	r17,8(sp)
  802ff4:	dfc00315 	stw	ra,12(sp)
  802ff8:	2023883a 	mov	r17,r4
  802ffc:	80000226 	beq	r16,zero,803008 <putc+0x2c>
  803000:	80800e17 	ldw	r2,56(r16)
  803004:	10001a26 	beq	r2,zero,803070 <putc+0x94>
  803008:	28800217 	ldw	r2,8(r5)
  80300c:	10bfffc4 	addi	r2,r2,-1
  803010:	28800215 	stw	r2,8(r5)
  803014:	10000b16 	blt	r2,zero,803044 <putc+0x68>
  803018:	28800017 	ldw	r2,0(r5)
  80301c:	14400005 	stb	r17,0(r2)
  803020:	28800017 	ldw	r2,0(r5)
  803024:	10c00044 	addi	r3,r2,1
  803028:	28c00015 	stw	r3,0(r5)
  80302c:	10800003 	ldbu	r2,0(r2)
  803030:	dfc00317 	ldw	ra,12(sp)
  803034:	dc400217 	ldw	r17,8(sp)
  803038:	dc000117 	ldw	r16,4(sp)
  80303c:	dec00404 	addi	sp,sp,16
  803040:	f800283a 	ret
  803044:	28c00617 	ldw	r3,24(r5)
  803048:	10c00e16 	blt	r2,r3,803084 <putc+0xa8>
  80304c:	28800017 	ldw	r2,0(r5)
  803050:	01000284 	movi	r4,10
  803054:	14400005 	stb	r17,0(r2)
  803058:	28800017 	ldw	r2,0(r5)
  80305c:	10c00003 	ldbu	r3,0(r2)
  803060:	193ff01e 	bne	r3,r4,803024 <__alt_mem_onchip_mem+0xff7fb024>
  803064:	280d883a 	mov	r6,r5
  803068:	180b883a 	mov	r5,r3
  80306c:	00000706 	br	80308c <putc+0xb0>
  803070:	8009883a 	mov	r4,r16
  803074:	d9400015 	stw	r5,0(sp)
  803078:	08019d40 	call	8019d4 <__sinit>
  80307c:	d9400017 	ldw	r5,0(sp)
  803080:	003fe106 	br	803008 <__alt_mem_onchip_mem+0xff7fb008>
  803084:	280d883a 	mov	r6,r5
  803088:	880b883a 	mov	r5,r17
  80308c:	8009883a 	mov	r4,r16
  803090:	dfc00317 	ldw	ra,12(sp)
  803094:	dc400217 	ldw	r17,8(sp)
  803098:	dc000117 	ldw	r16,4(sp)
  80309c:	dec00404 	addi	sp,sp,16
  8030a0:	08059d01 	jmpi	8059d0 <__swbuf_r>

008030a4 <lflush>:
  8030a4:	2080030b 	ldhu	r2,12(r4)
  8030a8:	00c00244 	movi	r3,9
  8030ac:	1080024c 	andi	r2,r2,9
  8030b0:	10c00226 	beq	r2,r3,8030bc <lflush+0x18>
  8030b4:	0005883a 	mov	r2,zero
  8030b8:	f800283a 	ret
  8030bc:	08079341 	jmpi	807934 <fflush>

008030c0 <__srefill_r>:
  8030c0:	defffc04 	addi	sp,sp,-16
  8030c4:	dc400115 	stw	r17,4(sp)
  8030c8:	dc000015 	stw	r16,0(sp)
  8030cc:	dfc00315 	stw	ra,12(sp)
  8030d0:	dc800215 	stw	r18,8(sp)
  8030d4:	2023883a 	mov	r17,r4
  8030d8:	2821883a 	mov	r16,r5
  8030dc:	20000226 	beq	r4,zero,8030e8 <__srefill_r+0x28>
  8030e0:	20800e17 	ldw	r2,56(r4)
  8030e4:	10003c26 	beq	r2,zero,8031d8 <__srefill_r+0x118>
  8030e8:	80c0030b 	ldhu	r3,12(r16)
  8030ec:	1908000c 	andi	r4,r3,8192
  8030f0:	1805883a 	mov	r2,r3
  8030f4:	2000071e 	bne	r4,zero,803114 <__srefill_r+0x54>
  8030f8:	81001917 	ldw	r4,100(r16)
  8030fc:	18880014 	ori	r2,r3,8192
  803100:	00f7ffc4 	movi	r3,-8193
  803104:	20c8703a 	and	r4,r4,r3
  803108:	8080030d 	sth	r2,12(r16)
  80310c:	1007883a 	mov	r3,r2
  803110:	81001915 	stw	r4,100(r16)
  803114:	80000115 	stw	zero,4(r16)
  803118:	1100080c 	andi	r4,r2,32
  80311c:	2000571e 	bne	r4,zero,80327c <__srefill_r+0x1bc>
  803120:	1100010c 	andi	r4,r2,4
  803124:	20001f26 	beq	r4,zero,8031a4 <__srefill_r+0xe4>
  803128:	81400c17 	ldw	r5,48(r16)
  80312c:	28000826 	beq	r5,zero,803150 <__srefill_r+0x90>
  803130:	80801004 	addi	r2,r16,64
  803134:	28800226 	beq	r5,r2,803140 <__srefill_r+0x80>
  803138:	8809883a 	mov	r4,r17
  80313c:	0807b340 	call	807b34 <_free_r>
  803140:	80800f17 	ldw	r2,60(r16)
  803144:	80000c15 	stw	zero,48(r16)
  803148:	80800115 	stw	r2,4(r16)
  80314c:	1000391e 	bne	r2,zero,803234 <__srefill_r+0x174>
  803150:	80800417 	ldw	r2,16(r16)
  803154:	10004b26 	beq	r2,zero,803284 <__srefill_r+0x1c4>
  803158:	8480030b 	ldhu	r18,12(r16)
  80315c:	908000cc 	andi	r2,r18,3
  803160:	10001f1e 	bne	r2,zero,8031e0 <__srefill_r+0x120>
  803164:	81800417 	ldw	r6,16(r16)
  803168:	80800817 	ldw	r2,32(r16)
  80316c:	81c00517 	ldw	r7,20(r16)
  803170:	81400717 	ldw	r5,28(r16)
  803174:	81800015 	stw	r6,0(r16)
  803178:	8809883a 	mov	r4,r17
  80317c:	103ee83a 	callr	r2
  803180:	80800115 	stw	r2,4(r16)
  803184:	00800e0e 	bge	zero,r2,8031c0 <__srefill_r+0x100>
  803188:	0005883a 	mov	r2,zero
  80318c:	dfc00317 	ldw	ra,12(sp)
  803190:	dc800217 	ldw	r18,8(sp)
  803194:	dc400117 	ldw	r17,4(sp)
  803198:	dc000017 	ldw	r16,0(sp)
  80319c:	dec00404 	addi	sp,sp,16
  8031a0:	f800283a 	ret
  8031a4:	1100040c 	andi	r4,r2,16
  8031a8:	20003026 	beq	r4,zero,80326c <__srefill_r+0x1ac>
  8031ac:	1080020c 	andi	r2,r2,8
  8031b0:	1000241e 	bne	r2,zero,803244 <__srefill_r+0x184>
  8031b4:	18c00114 	ori	r3,r3,4
  8031b8:	80c0030d 	sth	r3,12(r16)
  8031bc:	003fe406 	br	803150 <__alt_mem_onchip_mem+0xff7fb150>
  8031c0:	80c0030b 	ldhu	r3,12(r16)
  8031c4:	1000161e 	bne	r2,zero,803220 <__srefill_r+0x160>
  8031c8:	18c00814 	ori	r3,r3,32
  8031cc:	00bfffc4 	movi	r2,-1
  8031d0:	80c0030d 	sth	r3,12(r16)
  8031d4:	003fed06 	br	80318c <__alt_mem_onchip_mem+0xff7fb18c>
  8031d8:	08019d40 	call	8019d4 <__sinit>
  8031dc:	003fc206 	br	8030e8 <__alt_mem_onchip_mem+0xff7fb0e8>
  8031e0:	00802074 	movhi	r2,129
  8031e4:	10947a04 	addi	r2,r2,20968
  8031e8:	11000017 	ldw	r4,0(r2)
  8031ec:	01402034 	movhi	r5,128
  8031f0:	00800044 	movi	r2,1
  8031f4:	294c2904 	addi	r5,r5,12452
  8031f8:	8080030d 	sth	r2,12(r16)
  8031fc:	08020f80 	call	8020f8 <_fwalk>
  803200:	00800244 	movi	r2,9
  803204:	8480030d 	sth	r18,12(r16)
  803208:	9480024c 	andi	r18,r18,9
  80320c:	90bfd51e 	bne	r18,r2,803164 <__alt_mem_onchip_mem+0xff7fb164>
  803210:	800b883a 	mov	r5,r16
  803214:	8809883a 	mov	r4,r17
  803218:	08076bc0 	call	8076bc <__sflush_r>
  80321c:	003fd106 	br	803164 <__alt_mem_onchip_mem+0xff7fb164>
  803220:	18c01014 	ori	r3,r3,64
  803224:	80000115 	stw	zero,4(r16)
  803228:	00bfffc4 	movi	r2,-1
  80322c:	80c0030d 	sth	r3,12(r16)
  803230:	003fd606 	br	80318c <__alt_mem_onchip_mem+0xff7fb18c>
  803234:	80c00e17 	ldw	r3,56(r16)
  803238:	0005883a 	mov	r2,zero
  80323c:	80c00015 	stw	r3,0(r16)
  803240:	003fd206 	br	80318c <__alt_mem_onchip_mem+0xff7fb18c>
  803244:	800b883a 	mov	r5,r16
  803248:	8809883a 	mov	r4,r17
  80324c:	08078d80 	call	8078d8 <_fflush_r>
  803250:	10000a1e 	bne	r2,zero,80327c <__srefill_r+0x1bc>
  803254:	8080030b 	ldhu	r2,12(r16)
  803258:	00fffdc4 	movi	r3,-9
  80325c:	80000215 	stw	zero,8(r16)
  803260:	1886703a 	and	r3,r3,r2
  803264:	80000615 	stw	zero,24(r16)
  803268:	003fd206 	br	8031b4 <__alt_mem_onchip_mem+0xff7fb1b4>
  80326c:	00800244 	movi	r2,9
  803270:	88800015 	stw	r2,0(r17)
  803274:	18c01014 	ori	r3,r3,64
  803278:	80c0030d 	sth	r3,12(r16)
  80327c:	00bfffc4 	movi	r2,-1
  803280:	003fc206 	br	80318c <__alt_mem_onchip_mem+0xff7fb18c>
  803284:	800b883a 	mov	r5,r16
  803288:	8809883a 	mov	r4,r17
  80328c:	08023800 	call	802380 <__smakebuf_r>
  803290:	003fb106 	br	803158 <__alt_mem_onchip_mem+0xff7fb158>

00803294 <__srget_r>:
  803294:	defffd04 	addi	sp,sp,-12
  803298:	dc400115 	stw	r17,4(sp)
  80329c:	dc000015 	stw	r16,0(sp)
  8032a0:	dfc00215 	stw	ra,8(sp)
  8032a4:	2023883a 	mov	r17,r4
  8032a8:	2821883a 	mov	r16,r5
  8032ac:	20000226 	beq	r4,zero,8032b8 <__srget_r+0x24>
  8032b0:	20800e17 	ldw	r2,56(r4)
  8032b4:	10001026 	beq	r2,zero,8032f8 <__srget_r+0x64>
  8032b8:	800b883a 	mov	r5,r16
  8032bc:	8809883a 	mov	r4,r17
  8032c0:	08030c00 	call	8030c0 <__srefill_r>
  8032c4:	10000e1e 	bne	r2,zero,803300 <__srget_r+0x6c>
  8032c8:	80c00017 	ldw	r3,0(r16)
  8032cc:	80800117 	ldw	r2,4(r16)
  8032d0:	19000044 	addi	r4,r3,1
  8032d4:	10bfffc4 	addi	r2,r2,-1
  8032d8:	80800115 	stw	r2,4(r16)
  8032dc:	81000015 	stw	r4,0(r16)
  8032e0:	18800003 	ldbu	r2,0(r3)
  8032e4:	dfc00217 	ldw	ra,8(sp)
  8032e8:	dc400117 	ldw	r17,4(sp)
  8032ec:	dc000017 	ldw	r16,0(sp)
  8032f0:	dec00304 	addi	sp,sp,12
  8032f4:	f800283a 	ret
  8032f8:	08019d40 	call	8019d4 <__sinit>
  8032fc:	003fee06 	br	8032b8 <__alt_mem_onchip_mem+0xff7fb2b8>
  803300:	00bfffc4 	movi	r2,-1
  803304:	003ff706 	br	8032e4 <__alt_mem_onchip_mem+0xff7fb2e4>

00803308 <__srget>:
  803308:	00802074 	movhi	r2,129
  80330c:	10947b04 	addi	r2,r2,20972
  803310:	200b883a 	mov	r5,r4
  803314:	11000017 	ldw	r4,0(r2)
  803318:	08032941 	jmpi	803294 <__srget_r>

0080331c <_sbrk_r>:
  80331c:	defffd04 	addi	sp,sp,-12
  803320:	dc000015 	stw	r16,0(sp)
  803324:	04002074 	movhi	r16,129
  803328:	dc400115 	stw	r17,4(sp)
  80332c:	841bdb04 	addi	r16,r16,28524
  803330:	2023883a 	mov	r17,r4
  803334:	2809883a 	mov	r4,r5
  803338:	dfc00215 	stw	ra,8(sp)
  80333c:	80000015 	stw	zero,0(r16)
  803340:	080f8340 	call	80f834 <sbrk>
  803344:	00ffffc4 	movi	r3,-1
  803348:	10c00526 	beq	r2,r3,803360 <_sbrk_r+0x44>
  80334c:	dfc00217 	ldw	ra,8(sp)
  803350:	dc400117 	ldw	r17,4(sp)
  803354:	dc000017 	ldw	r16,0(sp)
  803358:	dec00304 	addi	sp,sp,12
  80335c:	f800283a 	ret
  803360:	80c00017 	ldw	r3,0(r16)
  803364:	183ff926 	beq	r3,zero,80334c <__alt_mem_onchip_mem+0xff7fb34c>
  803368:	88c00015 	stw	r3,0(r17)
  80336c:	003ff706 	br	80334c <__alt_mem_onchip_mem+0xff7fb34c>

00803370 <__sread>:
  803370:	defffe04 	addi	sp,sp,-8
  803374:	dc000015 	stw	r16,0(sp)
  803378:	2821883a 	mov	r16,r5
  80337c:	2940038f 	ldh	r5,14(r5)
  803380:	dfc00115 	stw	ra,4(sp)
  803384:	08098140 	call	809814 <_read_r>
  803388:	10000716 	blt	r2,zero,8033a8 <__sread+0x38>
  80338c:	80c01417 	ldw	r3,80(r16)
  803390:	1887883a 	add	r3,r3,r2
  803394:	80c01415 	stw	r3,80(r16)
  803398:	dfc00117 	ldw	ra,4(sp)
  80339c:	dc000017 	ldw	r16,0(sp)
  8033a0:	dec00204 	addi	sp,sp,8
  8033a4:	f800283a 	ret
  8033a8:	80c0030b 	ldhu	r3,12(r16)
  8033ac:	18fbffcc 	andi	r3,r3,61439
  8033b0:	80c0030d 	sth	r3,12(r16)
  8033b4:	dfc00117 	ldw	ra,4(sp)
  8033b8:	dc000017 	ldw	r16,0(sp)
  8033bc:	dec00204 	addi	sp,sp,8
  8033c0:	f800283a 	ret

008033c4 <__seofread>:
  8033c4:	0005883a 	mov	r2,zero
  8033c8:	f800283a 	ret

008033cc <__swrite>:
  8033cc:	2880030b 	ldhu	r2,12(r5)
  8033d0:	defffb04 	addi	sp,sp,-20
  8033d4:	dcc00315 	stw	r19,12(sp)
  8033d8:	dc800215 	stw	r18,8(sp)
  8033dc:	dc400115 	stw	r17,4(sp)
  8033e0:	dc000015 	stw	r16,0(sp)
  8033e4:	dfc00415 	stw	ra,16(sp)
  8033e8:	10c0400c 	andi	r3,r2,256
  8033ec:	2821883a 	mov	r16,r5
  8033f0:	2023883a 	mov	r17,r4
  8033f4:	3025883a 	mov	r18,r6
  8033f8:	3827883a 	mov	r19,r7
  8033fc:	18000526 	beq	r3,zero,803414 <__swrite+0x48>
  803400:	2940038f 	ldh	r5,14(r5)
  803404:	01c00084 	movi	r7,2
  803408:	000d883a 	mov	r6,zero
  80340c:	08084300 	call	808430 <_lseek_r>
  803410:	8080030b 	ldhu	r2,12(r16)
  803414:	8140038f 	ldh	r5,14(r16)
  803418:	10bbffcc 	andi	r2,r2,61439
  80341c:	980f883a 	mov	r7,r19
  803420:	900d883a 	mov	r6,r18
  803424:	8809883a 	mov	r4,r17
  803428:	8080030d 	sth	r2,12(r16)
  80342c:	dfc00417 	ldw	ra,16(sp)
  803430:	dcc00317 	ldw	r19,12(sp)
  803434:	dc800217 	ldw	r18,8(sp)
  803438:	dc400117 	ldw	r17,4(sp)
  80343c:	dc000017 	ldw	r16,0(sp)
  803440:	dec00504 	addi	sp,sp,20
  803444:	0805b281 	jmpi	805b28 <_write_r>

00803448 <__sseek>:
  803448:	defffe04 	addi	sp,sp,-8
  80344c:	dc000015 	stw	r16,0(sp)
  803450:	2821883a 	mov	r16,r5
  803454:	2940038f 	ldh	r5,14(r5)
  803458:	dfc00115 	stw	ra,4(sp)
  80345c:	08084300 	call	808430 <_lseek_r>
  803460:	00ffffc4 	movi	r3,-1
  803464:	10c00826 	beq	r2,r3,803488 <__sseek+0x40>
  803468:	80c0030b 	ldhu	r3,12(r16)
  80346c:	80801415 	stw	r2,80(r16)
  803470:	18c40014 	ori	r3,r3,4096
  803474:	80c0030d 	sth	r3,12(r16)
  803478:	dfc00117 	ldw	ra,4(sp)
  80347c:	dc000017 	ldw	r16,0(sp)
  803480:	dec00204 	addi	sp,sp,8
  803484:	f800283a 	ret
  803488:	80c0030b 	ldhu	r3,12(r16)
  80348c:	18fbffcc 	andi	r3,r3,61439
  803490:	80c0030d 	sth	r3,12(r16)
  803494:	dfc00117 	ldw	ra,4(sp)
  803498:	dc000017 	ldw	r16,0(sp)
  80349c:	dec00204 	addi	sp,sp,8
  8034a0:	f800283a 	ret

008034a4 <__sclose>:
  8034a4:	2940038f 	ldh	r5,14(r5)
  8034a8:	0805cdc1 	jmpi	805cdc <_close_r>

008034ac <_strtol_r>:
  8034ac:	00802074 	movhi	r2,129
  8034b0:	defff404 	addi	sp,sp,-48
  8034b4:	10947e04 	addi	r2,r2,20984
  8034b8:	dd400715 	stw	r21,28(sp)
  8034bc:	15400017 	ldw	r21,0(r2)
  8034c0:	dd800815 	stw	r22,32(sp)
  8034c4:	dd000615 	stw	r20,24(sp)
  8034c8:	dcc00515 	stw	r19,20(sp)
  8034cc:	d9000015 	stw	r4,0(sp)
  8034d0:	dfc00b15 	stw	ra,44(sp)
  8034d4:	df000a15 	stw	fp,40(sp)
  8034d8:	ddc00915 	stw	r23,36(sp)
  8034dc:	dc800415 	stw	r18,16(sp)
  8034e0:	dc400315 	stw	r17,12(sp)
  8034e4:	dc000215 	stw	r16,8(sp)
  8034e8:	2829883a 	mov	r20,r5
  8034ec:	3027883a 	mov	r19,r6
  8034f0:	382d883a 	mov	r22,r7
  8034f4:	2809883a 	mov	r4,r5
  8034f8:	24000003 	ldbu	r16,0(r4)
  8034fc:	24400044 	addi	r17,r4,1
  803500:	2007883a 	mov	r3,r4
  803504:	ac05883a 	add	r2,r21,r16
  803508:	10800043 	ldbu	r2,1(r2)
  80350c:	8809883a 	mov	r4,r17
  803510:	1080020c 	andi	r2,r2,8
  803514:	103ff81e 	bne	r2,zero,8034f8 <__alt_mem_onchip_mem+0xff7fb4f8>
  803518:	00800b44 	movi	r2,45
  80351c:	80805826 	beq	r16,r2,803680 <_strtol_r+0x1d4>
  803520:	00800ac4 	movi	r2,43
  803524:	80805a26 	beq	r16,r2,803690 <_strtol_r+0x1e4>
  803528:	0039883a 	mov	fp,zero
  80352c:	b0004426 	beq	r22,zero,803640 <_strtol_r+0x194>
  803530:	00800404 	movi	r2,16
  803534:	b0806026 	beq	r22,r2,8036b8 <_strtol_r+0x20c>
  803538:	b02f883a 	mov	r23,r22
  80353c:	00a00034 	movhi	r2,32768
  803540:	e025003a 	cmpeq	r18,fp,zero
  803544:	14a5c83a 	sub	r18,r2,r18
  803548:	b80b883a 	mov	r5,r23
  80354c:	9009883a 	mov	r4,r18
  803550:	080151c0 	call	80151c <__umodsi3>
  803554:	b80b883a 	mov	r5,r23
  803558:	9009883a 	mov	r4,r18
  80355c:	d8800115 	stw	r2,4(sp)
  803560:	08014b80 	call	8014b8 <__udivsi3>
  803564:	ac07883a 	add	r3,r21,r16
  803568:	18c00043 	ldbu	r3,1(r3)
  80356c:	880b883a 	mov	r5,r17
  803570:	000d883a 	mov	r6,zero
  803574:	1a00010c 	andi	r8,r3,4
  803578:	0009883a 	mov	r4,zero
  80357c:	02800044 	movi	r10,1
  803580:	027fffc4 	movi	r9,-1
  803584:	d9c00117 	ldw	r7,4(sp)
  803588:	40000e26 	beq	r8,zero,8035c4 <_strtol_r+0x118>
  80358c:	843ff404 	addi	r16,r16,-48
  803590:	8580120e 	bge	r16,r22,8035dc <_strtol_r+0x130>
  803594:	32400526 	beq	r6,r9,8035ac <_strtol_r+0x100>
  803598:	11002536 	bltu	r2,r4,803630 <_strtol_r+0x184>
  80359c:	20802326 	beq	r4,r2,80362c <_strtol_r+0x180>
  8035a0:	25c9383a 	mul	r4,r4,r23
  8035a4:	01800044 	movi	r6,1
  8035a8:	8109883a 	add	r4,r16,r4
  8035ac:	2c000003 	ldbu	r16,0(r5)
  8035b0:	29400044 	addi	r5,r5,1
  8035b4:	ac07883a 	add	r3,r21,r16
  8035b8:	18c00043 	ldbu	r3,1(r3)
  8035bc:	1a00010c 	andi	r8,r3,4
  8035c0:	403ff21e 	bne	r8,zero,80358c <__alt_mem_onchip_mem+0xff7fb58c>
  8035c4:	18c000cc 	andi	r3,r3,3
  8035c8:	18000426 	beq	r3,zero,8035dc <_strtol_r+0x130>
  8035cc:	1a801a26 	beq	r3,r10,803638 <_strtol_r+0x18c>
  8035d0:	00c015c4 	movi	r3,87
  8035d4:	80e1c83a 	sub	r16,r16,r3
  8035d8:	85bfee16 	blt	r16,r22,803594 <__alt_mem_onchip_mem+0xff7fb594>
  8035dc:	00bfffc4 	movi	r2,-1
  8035e0:	30801e26 	beq	r6,r2,80365c <_strtol_r+0x1b0>
  8035e4:	e0001b1e 	bne	fp,zero,803654 <_strtol_r+0x1a8>
  8035e8:	2005883a 	mov	r2,r4
  8035ec:	98000326 	beq	r19,zero,8035fc <_strtol_r+0x150>
  8035f0:	3000211e 	bne	r6,zero,803678 <_strtol_r+0x1cc>
  8035f4:	a00b883a 	mov	r5,r20
  8035f8:	99400015 	stw	r5,0(r19)
  8035fc:	dfc00b17 	ldw	ra,44(sp)
  803600:	df000a17 	ldw	fp,40(sp)
  803604:	ddc00917 	ldw	r23,36(sp)
  803608:	dd800817 	ldw	r22,32(sp)
  80360c:	dd400717 	ldw	r21,28(sp)
  803610:	dd000617 	ldw	r20,24(sp)
  803614:	dcc00517 	ldw	r19,20(sp)
  803618:	dc800417 	ldw	r18,16(sp)
  80361c:	dc400317 	ldw	r17,12(sp)
  803620:	dc000217 	ldw	r16,8(sp)
  803624:	dec00c04 	addi	sp,sp,48
  803628:	f800283a 	ret
  80362c:	3c3fdc0e 	bge	r7,r16,8035a0 <__alt_mem_onchip_mem+0xff7fb5a0>
  803630:	01bfffc4 	movi	r6,-1
  803634:	003fdd06 	br	8035ac <__alt_mem_onchip_mem+0xff7fb5ac>
  803638:	00c00dc4 	movi	r3,55
  80363c:	003fe506 	br	8035d4 <__alt_mem_onchip_mem+0xff7fb5d4>
  803640:	00800c04 	movi	r2,48
  803644:	80801626 	beq	r16,r2,8036a0 <_strtol_r+0x1f4>
  803648:	05800284 	movi	r22,10
  80364c:	b02f883a 	mov	r23,r22
  803650:	003fba06 	br	80353c <__alt_mem_onchip_mem+0xff7fb53c>
  803654:	0109c83a 	sub	r4,zero,r4
  803658:	003fe306 	br	8035e8 <__alt_mem_onchip_mem+0xff7fb5e8>
  80365c:	d9000017 	ldw	r4,0(sp)
  803660:	00c00884 	movi	r3,34
  803664:	e005003a 	cmpeq	r2,fp,zero
  803668:	20c00015 	stw	r3,0(r4)
  80366c:	00e00034 	movhi	r3,32768
  803670:	1885c83a 	sub	r2,r3,r2
  803674:	983fe126 	beq	r19,zero,8035fc <__alt_mem_onchip_mem+0xff7fb5fc>
  803678:	297fffc4 	addi	r5,r5,-1
  80367c:	003fde06 	br	8035f8 <__alt_mem_onchip_mem+0xff7fb5f8>
  803680:	1c400084 	addi	r17,r3,2
  803684:	1c000043 	ldbu	r16,1(r3)
  803688:	07000044 	movi	fp,1
  80368c:	003fa706 	br	80352c <__alt_mem_onchip_mem+0xff7fb52c>
  803690:	1c400084 	addi	r17,r3,2
  803694:	1c000043 	ldbu	r16,1(r3)
  803698:	0039883a 	mov	fp,zero
  80369c:	003fa306 	br	80352c <__alt_mem_onchip_mem+0xff7fb52c>
  8036a0:	88800003 	ldbu	r2,0(r17)
  8036a4:	00c01604 	movi	r3,88
  8036a8:	108037cc 	andi	r2,r2,223
  8036ac:	10c00826 	beq	r2,r3,8036d0 <_strtol_r+0x224>
  8036b0:	05800204 	movi	r22,8
  8036b4:	003fa006 	br	803538 <__alt_mem_onchip_mem+0xff7fb538>
  8036b8:	00800c04 	movi	r2,48
  8036bc:	80bf9e1e 	bne	r16,r2,803538 <__alt_mem_onchip_mem+0xff7fb538>
  8036c0:	88800003 	ldbu	r2,0(r17)
  8036c4:	00c01604 	movi	r3,88
  8036c8:	108037cc 	andi	r2,r2,223
  8036cc:	10ff9a1e 	bne	r2,r3,803538 <__alt_mem_onchip_mem+0xff7fb538>
  8036d0:	05c00404 	movi	r23,16
  8036d4:	8c000043 	ldbu	r16,1(r17)
  8036d8:	b82d883a 	mov	r22,r23
  8036dc:	8c400084 	addi	r17,r17,2
  8036e0:	003f9606 	br	80353c <__alt_mem_onchip_mem+0xff7fb53c>

008036e4 <strtol>:
  8036e4:	00802074 	movhi	r2,129
  8036e8:	10947b04 	addi	r2,r2,20972
  8036ec:	300f883a 	mov	r7,r6
  8036f0:	280d883a 	mov	r6,r5
  8036f4:	200b883a 	mov	r5,r4
  8036f8:	11000017 	ldw	r4,0(r2)
  8036fc:	08034ac1 	jmpi	8034ac <_strtol_r>

00803700 <___vfprintf_internal_r>:
  803700:	deffb804 	addi	sp,sp,-288
  803704:	dfc04715 	stw	ra,284(sp)
  803708:	ddc04515 	stw	r23,276(sp)
  80370c:	dd404315 	stw	r21,268(sp)
  803710:	d9002c15 	stw	r4,176(sp)
  803714:	282f883a 	mov	r23,r5
  803718:	302b883a 	mov	r21,r6
  80371c:	d9c02d15 	stw	r7,180(sp)
  803720:	df004615 	stw	fp,280(sp)
  803724:	dd804415 	stw	r22,272(sp)
  803728:	dd004215 	stw	r20,264(sp)
  80372c:	dcc04115 	stw	r19,260(sp)
  803730:	dc804015 	stw	r18,256(sp)
  803734:	dc403f15 	stw	r17,252(sp)
  803738:	dc003e15 	stw	r16,248(sp)
  80373c:	08084000 	call	808400 <_localeconv_r>
  803740:	10800017 	ldw	r2,0(r2)
  803744:	1009883a 	mov	r4,r2
  803748:	d8803415 	stw	r2,208(sp)
  80374c:	0809f280 	call	809f28 <strlen>
  803750:	d8803715 	stw	r2,220(sp)
  803754:	d8802c17 	ldw	r2,176(sp)
  803758:	10000226 	beq	r2,zero,803764 <___vfprintf_internal_r+0x64>
  80375c:	10800e17 	ldw	r2,56(r2)
  803760:	1000f926 	beq	r2,zero,803b48 <___vfprintf_internal_r+0x448>
  803764:	b880030b 	ldhu	r2,12(r23)
  803768:	10c8000c 	andi	r3,r2,8192
  80376c:	1800061e 	bne	r3,zero,803788 <___vfprintf_internal_r+0x88>
  803770:	b9001917 	ldw	r4,100(r23)
  803774:	00f7ffc4 	movi	r3,-8193
  803778:	10880014 	ori	r2,r2,8192
  80377c:	20c6703a 	and	r3,r4,r3
  803780:	b880030d 	sth	r2,12(r23)
  803784:	b8c01915 	stw	r3,100(r23)
  803788:	10c0020c 	andi	r3,r2,8
  80378c:	1800c126 	beq	r3,zero,803a94 <___vfprintf_internal_r+0x394>
  803790:	b8c00417 	ldw	r3,16(r23)
  803794:	1800bf26 	beq	r3,zero,803a94 <___vfprintf_internal_r+0x394>
  803798:	1080068c 	andi	r2,r2,26
  80379c:	00c00284 	movi	r3,10
  8037a0:	10c0c426 	beq	r2,r3,803ab4 <___vfprintf_internal_r+0x3b4>
  8037a4:	d8c00404 	addi	r3,sp,16
  8037a8:	05002074 	movhi	r20,129
  8037ac:	d9001e04 	addi	r4,sp,120
  8037b0:	a50bfe84 	addi	r20,r20,12282
  8037b4:	d8c01e15 	stw	r3,120(sp)
  8037b8:	d8002015 	stw	zero,128(sp)
  8037bc:	d8001f15 	stw	zero,124(sp)
  8037c0:	d8003315 	stw	zero,204(sp)
  8037c4:	d8003615 	stw	zero,216(sp)
  8037c8:	d8003815 	stw	zero,224(sp)
  8037cc:	1811883a 	mov	r8,r3
  8037d0:	d8003915 	stw	zero,228(sp)
  8037d4:	d8003a15 	stw	zero,232(sp)
  8037d8:	d8002f15 	stw	zero,188(sp)
  8037dc:	d9002815 	stw	r4,160(sp)
  8037e0:	a8800007 	ldb	r2,0(r21)
  8037e4:	10027b26 	beq	r2,zero,8041d4 <___vfprintf_internal_r+0xad4>
  8037e8:	00c00944 	movi	r3,37
  8037ec:	a821883a 	mov	r16,r21
  8037f0:	10c0021e 	bne	r2,r3,8037fc <___vfprintf_internal_r+0xfc>
  8037f4:	00001406 	br	803848 <___vfprintf_internal_r+0x148>
  8037f8:	10c00326 	beq	r2,r3,803808 <___vfprintf_internal_r+0x108>
  8037fc:	84000044 	addi	r16,r16,1
  803800:	80800007 	ldb	r2,0(r16)
  803804:	103ffc1e 	bne	r2,zero,8037f8 <__alt_mem_onchip_mem+0xff7fb7f8>
  803808:	8563c83a 	sub	r17,r16,r21
  80380c:	88000e26 	beq	r17,zero,803848 <___vfprintf_internal_r+0x148>
  803810:	d8c02017 	ldw	r3,128(sp)
  803814:	d8801f17 	ldw	r2,124(sp)
  803818:	45400015 	stw	r21,0(r8)
  80381c:	1c47883a 	add	r3,r3,r17
  803820:	10800044 	addi	r2,r2,1
  803824:	d8c02015 	stw	r3,128(sp)
  803828:	44400115 	stw	r17,4(r8)
  80382c:	d8801f15 	stw	r2,124(sp)
  803830:	00c001c4 	movi	r3,7
  803834:	1880a716 	blt	r3,r2,803ad4 <___vfprintf_internal_r+0x3d4>
  803838:	42000204 	addi	r8,r8,8
  80383c:	d9402f17 	ldw	r5,188(sp)
  803840:	2c4b883a 	add	r5,r5,r17
  803844:	d9402f15 	stw	r5,188(sp)
  803848:	80800007 	ldb	r2,0(r16)
  80384c:	1000a826 	beq	r2,zero,803af0 <___vfprintf_internal_r+0x3f0>
  803850:	84400047 	ldb	r17,1(r16)
  803854:	00bfffc4 	movi	r2,-1
  803858:	85400044 	addi	r21,r16,1
  80385c:	d8002785 	stb	zero,158(sp)
  803860:	0007883a 	mov	r3,zero
  803864:	000f883a 	mov	r7,zero
  803868:	d8802915 	stw	r2,164(sp)
  80386c:	d8003115 	stw	zero,196(sp)
  803870:	0025883a 	mov	r18,zero
  803874:	01401604 	movi	r5,88
  803878:	01800244 	movi	r6,9
  80387c:	02800a84 	movi	r10,42
  803880:	02401b04 	movi	r9,108
  803884:	ad400044 	addi	r21,r21,1
  803888:	88bff804 	addi	r2,r17,-32
  80388c:	28830436 	bltu	r5,r2,8044a0 <___vfprintf_internal_r+0xda0>
  803890:	100490ba 	slli	r2,r2,2
  803894:	01002034 	movhi	r4,128
  803898:	210e2a04 	addi	r4,r4,14504
  80389c:	1105883a 	add	r2,r2,r4
  8038a0:	10800017 	ldw	r2,0(r2)
  8038a4:	1000683a 	jmp	r2
  8038a8:	008043c0 	call	8043c <__reset-0x77fbc4>
  8038ac:	008044a0 	cmpeqi	r2,zero,274
  8038b0:	008044a0 	cmpeqi	r2,zero,274
  8038b4:	008043e0 	cmpeqi	r2,zero,271
  8038b8:	008044a0 	cmpeqi	r2,zero,274
  8038bc:	008044a0 	cmpeqi	r2,zero,274
  8038c0:	008044a0 	cmpeqi	r2,zero,274
  8038c4:	008044a0 	cmpeqi	r2,zero,274
  8038c8:	008044a0 	cmpeqi	r2,zero,274
  8038cc:	008044a0 	cmpeqi	r2,zero,274
  8038d0:	00803b54 	movui	r2,237
  8038d4:	008042fc 	xorhi	r2,zero,267
  8038d8:	008044a0 	cmpeqi	r2,zero,274
  8038dc:	00803a1c 	xori	r2,zero,232
  8038e0:	00803b7c 	xorhi	r2,zero,237
  8038e4:	008044a0 	cmpeqi	r2,zero,274
  8038e8:	00803bbc 	xorhi	r2,zero,238
  8038ec:	00803bc8 	cmpgei	r2,zero,239
  8038f0:	00803bc8 	cmpgei	r2,zero,239
  8038f4:	00803bc8 	cmpgei	r2,zero,239
  8038f8:	00803bc8 	cmpgei	r2,zero,239
  8038fc:	00803bc8 	cmpgei	r2,zero,239
  803900:	00803bc8 	cmpgei	r2,zero,239
  803904:	00803bc8 	cmpgei	r2,zero,239
  803908:	00803bc8 	cmpgei	r2,zero,239
  80390c:	00803bc8 	cmpgei	r2,zero,239
  803910:	008044a0 	cmpeqi	r2,zero,274
  803914:	008044a0 	cmpeqi	r2,zero,274
  803918:	008044a0 	cmpeqi	r2,zero,274
  80391c:	008044a0 	cmpeqi	r2,zero,274
  803920:	008044a0 	cmpeqi	r2,zero,274
  803924:	008044a0 	cmpeqi	r2,zero,274
  803928:	008044a0 	cmpeqi	r2,zero,274
  80392c:	008044a0 	cmpeqi	r2,zero,274
  803930:	008044a0 	cmpeqi	r2,zero,274
  803934:	008044a0 	cmpeqi	r2,zero,274
  803938:	00803bfc 	xorhi	r2,zero,239
  80393c:	00803cb8 	rdprs	r2,zero,242
  803940:	008044a0 	cmpeqi	r2,zero,274
  803944:	00803cb8 	rdprs	r2,zero,242
  803948:	008044a0 	cmpeqi	r2,zero,274
  80394c:	008044a0 	cmpeqi	r2,zero,274
  803950:	008044a0 	cmpeqi	r2,zero,274
  803954:	008044a0 	cmpeqi	r2,zero,274
  803958:	00803d58 	cmpnei	r2,zero,245
  80395c:	008044a0 	cmpeqi	r2,zero,274
  803960:	008044a0 	cmpeqi	r2,zero,274
  803964:	00803d64 	muli	r2,zero,245
  803968:	008044a0 	cmpeqi	r2,zero,274
  80396c:	008044a0 	cmpeqi	r2,zero,274
  803970:	008044a0 	cmpeqi	r2,zero,274
  803974:	008044a0 	cmpeqi	r2,zero,274
  803978:	008044a0 	cmpeqi	r2,zero,274
  80397c:	008041dc 	xori	r2,zero,263
  803980:	008044a0 	cmpeqi	r2,zero,274
  803984:	008044a0 	cmpeqi	r2,zero,274
  803988:	0080423c 	xorhi	r2,zero,264
  80398c:	008044a0 	cmpeqi	r2,zero,274
  803990:	008044a0 	cmpeqi	r2,zero,274
  803994:	008044a0 	cmpeqi	r2,zero,274
  803998:	008044a0 	cmpeqi	r2,zero,274
  80399c:	008044a0 	cmpeqi	r2,zero,274
  8039a0:	008044a0 	cmpeqi	r2,zero,274
  8039a4:	008044a0 	cmpeqi	r2,zero,274
  8039a8:	008044a0 	cmpeqi	r2,zero,274
  8039ac:	008044a0 	cmpeqi	r2,zero,274
  8039b0:	008044a0 	cmpeqi	r2,zero,274
  8039b4:	0080444c 	andi	r2,zero,273
  8039b8:	008043ec 	andhi	r2,zero,271
  8039bc:	00803cb8 	rdprs	r2,zero,242
  8039c0:	00803cb8 	rdprs	r2,zero,242
  8039c4:	00803cb8 	rdprs	r2,zero,242
  8039c8:	008043fc 	xorhi	r2,zero,271
  8039cc:	008043ec 	andhi	r2,zero,271
  8039d0:	008044a0 	cmpeqi	r2,zero,274
  8039d4:	008044a0 	cmpeqi	r2,zero,274
  8039d8:	00804408 	cmpgei	r2,zero,272
  8039dc:	008044a0 	cmpeqi	r2,zero,274
  8039e0:	00804418 	cmpnei	r2,zero,272
  8039e4:	008042ec 	andhi	r2,zero,267
  8039e8:	00803a28 	cmpgeui	r2,zero,232
  8039ec:	0080430c 	andi	r2,zero,268
  8039f0:	008044a0 	cmpeqi	r2,zero,274
  8039f4:	00804318 	cmpnei	r2,zero,268
  8039f8:	008044a0 	cmpeqi	r2,zero,274
  8039fc:	00804374 	movhi	r2,269
  803a00:	008044a0 	cmpeqi	r2,zero,274
  803a04:	008044a0 	cmpeqi	r2,zero,274
  803a08:	00804384 	movi	r2,270
  803a0c:	d9003117 	ldw	r4,196(sp)
  803a10:	d8802d15 	stw	r2,180(sp)
  803a14:	0109c83a 	sub	r4,zero,r4
  803a18:	d9003115 	stw	r4,196(sp)
  803a1c:	94800114 	ori	r18,r18,4
  803a20:	ac400007 	ldb	r17,0(r21)
  803a24:	003f9706 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  803a28:	00800c04 	movi	r2,48
  803a2c:	d9002d17 	ldw	r4,180(sp)
  803a30:	d9402917 	ldw	r5,164(sp)
  803a34:	d8802705 	stb	r2,156(sp)
  803a38:	00801e04 	movi	r2,120
  803a3c:	d8802745 	stb	r2,157(sp)
  803a40:	d8002785 	stb	zero,158(sp)
  803a44:	20c00104 	addi	r3,r4,4
  803a48:	24c00017 	ldw	r19,0(r4)
  803a4c:	002d883a 	mov	r22,zero
  803a50:	90800094 	ori	r2,r18,2
  803a54:	28029a16 	blt	r5,zero,8044c0 <___vfprintf_internal_r+0xdc0>
  803a58:	00bfdfc4 	movi	r2,-129
  803a5c:	90a4703a 	and	r18,r18,r2
  803a60:	d8c02d15 	stw	r3,180(sp)
  803a64:	94800094 	ori	r18,r18,2
  803a68:	9802871e 	bne	r19,zero,804488 <___vfprintf_internal_r+0xd88>
  803a6c:	00802074 	movhi	r2,129
  803a70:	108bf704 	addi	r2,r2,12252
  803a74:	d8803915 	stw	r2,228(sp)
  803a78:	04401e04 	movi	r17,120
  803a7c:	d8802917 	ldw	r2,164(sp)
  803a80:	0039883a 	mov	fp,zero
  803a84:	1001e926 	beq	r2,zero,80422c <___vfprintf_internal_r+0xb2c>
  803a88:	0027883a 	mov	r19,zero
  803a8c:	002d883a 	mov	r22,zero
  803a90:	00020506 	br	8042a8 <___vfprintf_internal_r+0xba8>
  803a94:	d9002c17 	ldw	r4,176(sp)
  803a98:	b80b883a 	mov	r5,r23
  803a9c:	0805b880 	call	805b88 <__swsetup_r>
  803aa0:	1005ac1e 	bne	r2,zero,805154 <___vfprintf_internal_r+0x1a54>
  803aa4:	b880030b 	ldhu	r2,12(r23)
  803aa8:	00c00284 	movi	r3,10
  803aac:	1080068c 	andi	r2,r2,26
  803ab0:	10ff3c1e 	bne	r2,r3,8037a4 <__alt_mem_onchip_mem+0xff7fb7a4>
  803ab4:	b880038f 	ldh	r2,14(r23)
  803ab8:	103f3a16 	blt	r2,zero,8037a4 <__alt_mem_onchip_mem+0xff7fb7a4>
  803abc:	d9c02d17 	ldw	r7,180(sp)
  803ac0:	d9002c17 	ldw	r4,176(sp)
  803ac4:	a80d883a 	mov	r6,r21
  803ac8:	b80b883a 	mov	r5,r23
  803acc:	08059140 	call	805914 <__sbprintf>
  803ad0:	00001106 	br	803b18 <___vfprintf_internal_r+0x418>
  803ad4:	d9002c17 	ldw	r4,176(sp)
  803ad8:	d9801e04 	addi	r6,sp,120
  803adc:	b80b883a 	mov	r5,r23
  803ae0:	080a0bc0 	call	80a0bc <__sprint_r>
  803ae4:	1000081e 	bne	r2,zero,803b08 <___vfprintf_internal_r+0x408>
  803ae8:	da000404 	addi	r8,sp,16
  803aec:	003f5306 	br	80383c <__alt_mem_onchip_mem+0xff7fb83c>
  803af0:	d8802017 	ldw	r2,128(sp)
  803af4:	10000426 	beq	r2,zero,803b08 <___vfprintf_internal_r+0x408>
  803af8:	d9002c17 	ldw	r4,176(sp)
  803afc:	d9801e04 	addi	r6,sp,120
  803b00:	b80b883a 	mov	r5,r23
  803b04:	080a0bc0 	call	80a0bc <__sprint_r>
  803b08:	b880030b 	ldhu	r2,12(r23)
  803b0c:	1080100c 	andi	r2,r2,64
  803b10:	1005901e 	bne	r2,zero,805154 <___vfprintf_internal_r+0x1a54>
  803b14:	d8802f17 	ldw	r2,188(sp)
  803b18:	dfc04717 	ldw	ra,284(sp)
  803b1c:	df004617 	ldw	fp,280(sp)
  803b20:	ddc04517 	ldw	r23,276(sp)
  803b24:	dd804417 	ldw	r22,272(sp)
  803b28:	dd404317 	ldw	r21,268(sp)
  803b2c:	dd004217 	ldw	r20,264(sp)
  803b30:	dcc04117 	ldw	r19,260(sp)
  803b34:	dc804017 	ldw	r18,256(sp)
  803b38:	dc403f17 	ldw	r17,252(sp)
  803b3c:	dc003e17 	ldw	r16,248(sp)
  803b40:	dec04804 	addi	sp,sp,288
  803b44:	f800283a 	ret
  803b48:	d9002c17 	ldw	r4,176(sp)
  803b4c:	08019d40 	call	8019d4 <__sinit>
  803b50:	003f0406 	br	803764 <__alt_mem_onchip_mem+0xff7fb764>
  803b54:	d8802d17 	ldw	r2,180(sp)
  803b58:	d9002d17 	ldw	r4,180(sp)
  803b5c:	10800017 	ldw	r2,0(r2)
  803b60:	d8803115 	stw	r2,196(sp)
  803b64:	20800104 	addi	r2,r4,4
  803b68:	d9003117 	ldw	r4,196(sp)
  803b6c:	203fa716 	blt	r4,zero,803a0c <__alt_mem_onchip_mem+0xff7fba0c>
  803b70:	d8802d15 	stw	r2,180(sp)
  803b74:	ac400007 	ldb	r17,0(r21)
  803b78:	003f4206 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  803b7c:	ac400007 	ldb	r17,0(r21)
  803b80:	aac00044 	addi	r11,r21,1
  803b84:	8a872826 	beq	r17,r10,805828 <___vfprintf_internal_r+0x2128>
  803b88:	88bff404 	addi	r2,r17,-48
  803b8c:	0009883a 	mov	r4,zero
  803b90:	30867d36 	bltu	r6,r2,805588 <___vfprintf_internal_r+0x1e88>
  803b94:	5c400007 	ldb	r17,0(r11)
  803b98:	210002a4 	muli	r4,r4,10
  803b9c:	5d400044 	addi	r21,r11,1
  803ba0:	a817883a 	mov	r11,r21
  803ba4:	2089883a 	add	r4,r4,r2
  803ba8:	88bff404 	addi	r2,r17,-48
  803bac:	30bff92e 	bgeu	r6,r2,803b94 <__alt_mem_onchip_mem+0xff7fbb94>
  803bb0:	2005c916 	blt	r4,zero,8052d8 <___vfprintf_internal_r+0x1bd8>
  803bb4:	d9002915 	stw	r4,164(sp)
  803bb8:	003f3306 	br	803888 <__alt_mem_onchip_mem+0xff7fb888>
  803bbc:	94802014 	ori	r18,r18,128
  803bc0:	ac400007 	ldb	r17,0(r21)
  803bc4:	003f2f06 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  803bc8:	a809883a 	mov	r4,r21
  803bcc:	d8003115 	stw	zero,196(sp)
  803bd0:	88bff404 	addi	r2,r17,-48
  803bd4:	0017883a 	mov	r11,zero
  803bd8:	24400007 	ldb	r17,0(r4)
  803bdc:	5ac002a4 	muli	r11,r11,10
  803be0:	ad400044 	addi	r21,r21,1
  803be4:	a809883a 	mov	r4,r21
  803be8:	12d7883a 	add	r11,r2,r11
  803bec:	88bff404 	addi	r2,r17,-48
  803bf0:	30bff92e 	bgeu	r6,r2,803bd8 <__alt_mem_onchip_mem+0xff7fbbd8>
  803bf4:	dac03115 	stw	r11,196(sp)
  803bf8:	003f2306 	br	803888 <__alt_mem_onchip_mem+0xff7fb888>
  803bfc:	18c03fcc 	andi	r3,r3,255
  803c00:	18072b1e 	bne	r3,zero,8058b0 <___vfprintf_internal_r+0x21b0>
  803c04:	94800414 	ori	r18,r18,16
  803c08:	9080080c 	andi	r2,r18,32
  803c0c:	10037b26 	beq	r2,zero,8049fc <___vfprintf_internal_r+0x12fc>
  803c10:	d9402d17 	ldw	r5,180(sp)
  803c14:	28800117 	ldw	r2,4(r5)
  803c18:	2cc00017 	ldw	r19,0(r5)
  803c1c:	29400204 	addi	r5,r5,8
  803c20:	d9402d15 	stw	r5,180(sp)
  803c24:	102d883a 	mov	r22,r2
  803c28:	10044b16 	blt	r2,zero,804d58 <___vfprintf_internal_r+0x1658>
  803c2c:	d9402917 	ldw	r5,164(sp)
  803c30:	df002783 	ldbu	fp,158(sp)
  803c34:	2803bc16 	blt	r5,zero,804b28 <___vfprintf_internal_r+0x1428>
  803c38:	00ffdfc4 	movi	r3,-129
  803c3c:	9d84b03a 	or	r2,r19,r22
  803c40:	90e4703a 	and	r18,r18,r3
  803c44:	10017726 	beq	r2,zero,804224 <___vfprintf_internal_r+0xb24>
  803c48:	b0038326 	beq	r22,zero,804a58 <___vfprintf_internal_r+0x1358>
  803c4c:	dc402a15 	stw	r17,168(sp)
  803c50:	dc001e04 	addi	r16,sp,120
  803c54:	b023883a 	mov	r17,r22
  803c58:	402d883a 	mov	r22,r8
  803c5c:	9809883a 	mov	r4,r19
  803c60:	880b883a 	mov	r5,r17
  803c64:	01800284 	movi	r6,10
  803c68:	000f883a 	mov	r7,zero
  803c6c:	080c0340 	call	80c034 <__umoddi3>
  803c70:	10800c04 	addi	r2,r2,48
  803c74:	843fffc4 	addi	r16,r16,-1
  803c78:	9809883a 	mov	r4,r19
  803c7c:	880b883a 	mov	r5,r17
  803c80:	80800005 	stb	r2,0(r16)
  803c84:	01800284 	movi	r6,10
  803c88:	000f883a 	mov	r7,zero
  803c8c:	080babc0 	call	80babc <__udivdi3>
  803c90:	1027883a 	mov	r19,r2
  803c94:	10c4b03a 	or	r2,r2,r3
  803c98:	1823883a 	mov	r17,r3
  803c9c:	103fef1e 	bne	r2,zero,803c5c <__alt_mem_onchip_mem+0xff7fbc5c>
  803ca0:	d8c02817 	ldw	r3,160(sp)
  803ca4:	dc402a17 	ldw	r17,168(sp)
  803ca8:	b011883a 	mov	r8,r22
  803cac:	1c07c83a 	sub	r3,r3,r16
  803cb0:	d8c02e15 	stw	r3,184(sp)
  803cb4:	00005906 	br	803e1c <___vfprintf_internal_r+0x71c>
  803cb8:	18c03fcc 	andi	r3,r3,255
  803cbc:	1806fa1e 	bne	r3,zero,8058a8 <___vfprintf_internal_r+0x21a8>
  803cc0:	9080020c 	andi	r2,r18,8
  803cc4:	10048a26 	beq	r2,zero,804ef0 <___vfprintf_internal_r+0x17f0>
  803cc8:	d8c02d17 	ldw	r3,180(sp)
  803ccc:	d9002d17 	ldw	r4,180(sp)
  803cd0:	d9402d17 	ldw	r5,180(sp)
  803cd4:	18c00017 	ldw	r3,0(r3)
  803cd8:	21000117 	ldw	r4,4(r4)
  803cdc:	29400204 	addi	r5,r5,8
  803ce0:	d8c03615 	stw	r3,216(sp)
  803ce4:	d9003815 	stw	r4,224(sp)
  803ce8:	d9402d15 	stw	r5,180(sp)
  803cec:	d9003617 	ldw	r4,216(sp)
  803cf0:	d9403817 	ldw	r5,224(sp)
  803cf4:	da003d15 	stw	r8,244(sp)
  803cf8:	04000044 	movi	r16,1
  803cfc:	0809dd80 	call	809dd8 <__fpclassifyd>
  803d00:	da003d17 	ldw	r8,244(sp)
  803d04:	14041f1e 	bne	r2,r16,804d84 <___vfprintf_internal_r+0x1684>
  803d08:	d9003617 	ldw	r4,216(sp)
  803d0c:	d9403817 	ldw	r5,224(sp)
  803d10:	000d883a 	mov	r6,zero
  803d14:	000f883a 	mov	r7,zero
  803d18:	080d8640 	call	80d864 <__ledf2>
  803d1c:	da003d17 	ldw	r8,244(sp)
  803d20:	1005be16 	blt	r2,zero,80541c <___vfprintf_internal_r+0x1d1c>
  803d24:	df002783 	ldbu	fp,158(sp)
  803d28:	008011c4 	movi	r2,71
  803d2c:	1445330e 	bge	r2,r17,8051fc <___vfprintf_internal_r+0x1afc>
  803d30:	04002074 	movhi	r16,129
  803d34:	840bef04 	addi	r16,r16,12220
  803d38:	00c000c4 	movi	r3,3
  803d3c:	00bfdfc4 	movi	r2,-129
  803d40:	d8c02a15 	stw	r3,168(sp)
  803d44:	90a4703a 	and	r18,r18,r2
  803d48:	d8c02e15 	stw	r3,184(sp)
  803d4c:	d8002915 	stw	zero,164(sp)
  803d50:	d8003215 	stw	zero,200(sp)
  803d54:	00003706 	br	803e34 <___vfprintf_internal_r+0x734>
  803d58:	94800214 	ori	r18,r18,8
  803d5c:	ac400007 	ldb	r17,0(r21)
  803d60:	003ec806 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  803d64:	18c03fcc 	andi	r3,r3,255
  803d68:	1806db1e 	bne	r3,zero,8058d8 <___vfprintf_internal_r+0x21d8>
  803d6c:	94800414 	ori	r18,r18,16
  803d70:	9080080c 	andi	r2,r18,32
  803d74:	1002d826 	beq	r2,zero,8048d8 <___vfprintf_internal_r+0x11d8>
  803d78:	d9402d17 	ldw	r5,180(sp)
  803d7c:	d8c02917 	ldw	r3,164(sp)
  803d80:	d8002785 	stb	zero,158(sp)
  803d84:	28800204 	addi	r2,r5,8
  803d88:	2cc00017 	ldw	r19,0(r5)
  803d8c:	2d800117 	ldw	r22,4(r5)
  803d90:	18048f16 	blt	r3,zero,804fd0 <___vfprintf_internal_r+0x18d0>
  803d94:	013fdfc4 	movi	r4,-129
  803d98:	9d86b03a 	or	r3,r19,r22
  803d9c:	d8802d15 	stw	r2,180(sp)
  803da0:	9124703a 	and	r18,r18,r4
  803da4:	1802d91e 	bne	r3,zero,80490c <___vfprintf_internal_r+0x120c>
  803da8:	d8c02917 	ldw	r3,164(sp)
  803dac:	0039883a 	mov	fp,zero
  803db0:	1805c326 	beq	r3,zero,8054c0 <___vfprintf_internal_r+0x1dc0>
  803db4:	0027883a 	mov	r19,zero
  803db8:	002d883a 	mov	r22,zero
  803dbc:	dc001e04 	addi	r16,sp,120
  803dc0:	9806d0fa 	srli	r3,r19,3
  803dc4:	b008977a 	slli	r4,r22,29
  803dc8:	b02cd0fa 	srli	r22,r22,3
  803dcc:	9cc001cc 	andi	r19,r19,7
  803dd0:	98800c04 	addi	r2,r19,48
  803dd4:	843fffc4 	addi	r16,r16,-1
  803dd8:	20e6b03a 	or	r19,r4,r3
  803ddc:	80800005 	stb	r2,0(r16)
  803de0:	9d86b03a 	or	r3,r19,r22
  803de4:	183ff61e 	bne	r3,zero,803dc0 <__alt_mem_onchip_mem+0xff7fbdc0>
  803de8:	90c0004c 	andi	r3,r18,1
  803dec:	18013b26 	beq	r3,zero,8042dc <___vfprintf_internal_r+0xbdc>
  803df0:	10803fcc 	andi	r2,r2,255
  803df4:	1080201c 	xori	r2,r2,128
  803df8:	10bfe004 	addi	r2,r2,-128
  803dfc:	00c00c04 	movi	r3,48
  803e00:	10c13626 	beq	r2,r3,8042dc <___vfprintf_internal_r+0xbdc>
  803e04:	80ffffc5 	stb	r3,-1(r16)
  803e08:	d8c02817 	ldw	r3,160(sp)
  803e0c:	80bfffc4 	addi	r2,r16,-1
  803e10:	1021883a 	mov	r16,r2
  803e14:	1887c83a 	sub	r3,r3,r2
  803e18:	d8c02e15 	stw	r3,184(sp)
  803e1c:	d8802e17 	ldw	r2,184(sp)
  803e20:	d9002917 	ldw	r4,164(sp)
  803e24:	1100010e 	bge	r2,r4,803e2c <___vfprintf_internal_r+0x72c>
  803e28:	2005883a 	mov	r2,r4
  803e2c:	d8802a15 	stw	r2,168(sp)
  803e30:	d8003215 	stw	zero,200(sp)
  803e34:	e7003fcc 	andi	fp,fp,255
  803e38:	e700201c 	xori	fp,fp,128
  803e3c:	e73fe004 	addi	fp,fp,-128
  803e40:	e0000326 	beq	fp,zero,803e50 <___vfprintf_internal_r+0x750>
  803e44:	d8c02a17 	ldw	r3,168(sp)
  803e48:	18c00044 	addi	r3,r3,1
  803e4c:	d8c02a15 	stw	r3,168(sp)
  803e50:	90c0008c 	andi	r3,r18,2
  803e54:	d8c02b15 	stw	r3,172(sp)
  803e58:	18000326 	beq	r3,zero,803e68 <___vfprintf_internal_r+0x768>
  803e5c:	d8c02a17 	ldw	r3,168(sp)
  803e60:	18c00084 	addi	r3,r3,2
  803e64:	d8c02a15 	stw	r3,168(sp)
  803e68:	90c0210c 	andi	r3,r18,132
  803e6c:	d8c03015 	stw	r3,192(sp)
  803e70:	1801a31e 	bne	r3,zero,804500 <___vfprintf_internal_r+0xe00>
  803e74:	d9003117 	ldw	r4,196(sp)
  803e78:	d8c02a17 	ldw	r3,168(sp)
  803e7c:	20e7c83a 	sub	r19,r4,r3
  803e80:	04c19f0e 	bge	zero,r19,804500 <___vfprintf_internal_r+0xe00>
  803e84:	02400404 	movi	r9,16
  803e88:	d8c02017 	ldw	r3,128(sp)
  803e8c:	d8801f17 	ldw	r2,124(sp)
  803e90:	4cc50d0e 	bge	r9,r19,8052c8 <___vfprintf_internal_r+0x1bc8>
  803e94:	01402074 	movhi	r5,129
  803e98:	294c0284 	addi	r5,r5,12298
  803e9c:	dc403b15 	stw	r17,236(sp)
  803ea0:	d9403515 	stw	r5,212(sp)
  803ea4:	9823883a 	mov	r17,r19
  803ea8:	482d883a 	mov	r22,r9
  803eac:	9027883a 	mov	r19,r18
  803eb0:	070001c4 	movi	fp,7
  803eb4:	8025883a 	mov	r18,r16
  803eb8:	dc002c17 	ldw	r16,176(sp)
  803ebc:	00000306 	br	803ecc <___vfprintf_internal_r+0x7cc>
  803ec0:	8c7ffc04 	addi	r17,r17,-16
  803ec4:	42000204 	addi	r8,r8,8
  803ec8:	b440130e 	bge	r22,r17,803f18 <___vfprintf_internal_r+0x818>
  803ecc:	01002074 	movhi	r4,129
  803ed0:	18c00404 	addi	r3,r3,16
  803ed4:	10800044 	addi	r2,r2,1
  803ed8:	210c0284 	addi	r4,r4,12298
  803edc:	41000015 	stw	r4,0(r8)
  803ee0:	45800115 	stw	r22,4(r8)
  803ee4:	d8c02015 	stw	r3,128(sp)
  803ee8:	d8801f15 	stw	r2,124(sp)
  803eec:	e0bff40e 	bge	fp,r2,803ec0 <__alt_mem_onchip_mem+0xff7fbec0>
  803ef0:	d9801e04 	addi	r6,sp,120
  803ef4:	b80b883a 	mov	r5,r23
  803ef8:	8009883a 	mov	r4,r16
  803efc:	080a0bc0 	call	80a0bc <__sprint_r>
  803f00:	103f011e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  803f04:	8c7ffc04 	addi	r17,r17,-16
  803f08:	d8c02017 	ldw	r3,128(sp)
  803f0c:	d8801f17 	ldw	r2,124(sp)
  803f10:	da000404 	addi	r8,sp,16
  803f14:	b47fed16 	blt	r22,r17,803ecc <__alt_mem_onchip_mem+0xff7fbecc>
  803f18:	9021883a 	mov	r16,r18
  803f1c:	9825883a 	mov	r18,r19
  803f20:	8827883a 	mov	r19,r17
  803f24:	dc403b17 	ldw	r17,236(sp)
  803f28:	d9403517 	ldw	r5,212(sp)
  803f2c:	98c7883a 	add	r3,r19,r3
  803f30:	10800044 	addi	r2,r2,1
  803f34:	41400015 	stw	r5,0(r8)
  803f38:	44c00115 	stw	r19,4(r8)
  803f3c:	d8c02015 	stw	r3,128(sp)
  803f40:	d8801f15 	stw	r2,124(sp)
  803f44:	010001c4 	movi	r4,7
  803f48:	2082a316 	blt	r4,r2,8049d8 <___vfprintf_internal_r+0x12d8>
  803f4c:	df002787 	ldb	fp,158(sp)
  803f50:	42000204 	addi	r8,r8,8
  803f54:	e0000c26 	beq	fp,zero,803f88 <___vfprintf_internal_r+0x888>
  803f58:	d8801f17 	ldw	r2,124(sp)
  803f5c:	d9002784 	addi	r4,sp,158
  803f60:	18c00044 	addi	r3,r3,1
  803f64:	10800044 	addi	r2,r2,1
  803f68:	41000015 	stw	r4,0(r8)
  803f6c:	01000044 	movi	r4,1
  803f70:	41000115 	stw	r4,4(r8)
  803f74:	d8c02015 	stw	r3,128(sp)
  803f78:	d8801f15 	stw	r2,124(sp)
  803f7c:	010001c4 	movi	r4,7
  803f80:	20823c16 	blt	r4,r2,804874 <___vfprintf_internal_r+0x1174>
  803f84:	42000204 	addi	r8,r8,8
  803f88:	d8802b17 	ldw	r2,172(sp)
  803f8c:	10000c26 	beq	r2,zero,803fc0 <___vfprintf_internal_r+0x8c0>
  803f90:	d8801f17 	ldw	r2,124(sp)
  803f94:	d9002704 	addi	r4,sp,156
  803f98:	18c00084 	addi	r3,r3,2
  803f9c:	10800044 	addi	r2,r2,1
  803fa0:	41000015 	stw	r4,0(r8)
  803fa4:	01000084 	movi	r4,2
  803fa8:	41000115 	stw	r4,4(r8)
  803fac:	d8c02015 	stw	r3,128(sp)
  803fb0:	d8801f15 	stw	r2,124(sp)
  803fb4:	010001c4 	movi	r4,7
  803fb8:	20823616 	blt	r4,r2,804894 <___vfprintf_internal_r+0x1194>
  803fbc:	42000204 	addi	r8,r8,8
  803fc0:	d9003017 	ldw	r4,192(sp)
  803fc4:	00802004 	movi	r2,128
  803fc8:	20819926 	beq	r4,r2,804630 <___vfprintf_internal_r+0xf30>
  803fcc:	d9402917 	ldw	r5,164(sp)
  803fd0:	d8802e17 	ldw	r2,184(sp)
  803fd4:	28adc83a 	sub	r22,r5,r2
  803fd8:	0580310e 	bge	zero,r22,8040a0 <___vfprintf_internal_r+0x9a0>
  803fdc:	07000404 	movi	fp,16
  803fe0:	d8801f17 	ldw	r2,124(sp)
  803fe4:	e584140e 	bge	fp,r22,805038 <___vfprintf_internal_r+0x1938>
  803fe8:	01402074 	movhi	r5,129
  803fec:	294bfe84 	addi	r5,r5,12282
  803ff0:	dc402915 	stw	r17,164(sp)
  803ff4:	d9402b15 	stw	r5,172(sp)
  803ff8:	b023883a 	mov	r17,r22
  803ffc:	04c001c4 	movi	r19,7
  804000:	a82d883a 	mov	r22,r21
  804004:	902b883a 	mov	r21,r18
  804008:	8025883a 	mov	r18,r16
  80400c:	dc002c17 	ldw	r16,176(sp)
  804010:	00000306 	br	804020 <___vfprintf_internal_r+0x920>
  804014:	8c7ffc04 	addi	r17,r17,-16
  804018:	42000204 	addi	r8,r8,8
  80401c:	e440110e 	bge	fp,r17,804064 <___vfprintf_internal_r+0x964>
  804020:	18c00404 	addi	r3,r3,16
  804024:	10800044 	addi	r2,r2,1
  804028:	45000015 	stw	r20,0(r8)
  80402c:	47000115 	stw	fp,4(r8)
  804030:	d8c02015 	stw	r3,128(sp)
  804034:	d8801f15 	stw	r2,124(sp)
  804038:	98bff60e 	bge	r19,r2,804014 <__alt_mem_onchip_mem+0xff7fc014>
  80403c:	d9801e04 	addi	r6,sp,120
  804040:	b80b883a 	mov	r5,r23
  804044:	8009883a 	mov	r4,r16
  804048:	080a0bc0 	call	80a0bc <__sprint_r>
  80404c:	103eae1e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  804050:	8c7ffc04 	addi	r17,r17,-16
  804054:	d8c02017 	ldw	r3,128(sp)
  804058:	d8801f17 	ldw	r2,124(sp)
  80405c:	da000404 	addi	r8,sp,16
  804060:	e47fef16 	blt	fp,r17,804020 <__alt_mem_onchip_mem+0xff7fc020>
  804064:	9021883a 	mov	r16,r18
  804068:	a825883a 	mov	r18,r21
  80406c:	b02b883a 	mov	r21,r22
  804070:	882d883a 	mov	r22,r17
  804074:	dc402917 	ldw	r17,164(sp)
  804078:	d9002b17 	ldw	r4,172(sp)
  80407c:	1d87883a 	add	r3,r3,r22
  804080:	10800044 	addi	r2,r2,1
  804084:	41000015 	stw	r4,0(r8)
  804088:	45800115 	stw	r22,4(r8)
  80408c:	d8c02015 	stw	r3,128(sp)
  804090:	d8801f15 	stw	r2,124(sp)
  804094:	010001c4 	movi	r4,7
  804098:	2081ee16 	blt	r4,r2,804854 <___vfprintf_internal_r+0x1154>
  80409c:	42000204 	addi	r8,r8,8
  8040a0:	9080400c 	andi	r2,r18,256
  8040a4:	1001181e 	bne	r2,zero,804508 <___vfprintf_internal_r+0xe08>
  8040a8:	d9402e17 	ldw	r5,184(sp)
  8040ac:	d8801f17 	ldw	r2,124(sp)
  8040b0:	44000015 	stw	r16,0(r8)
  8040b4:	1947883a 	add	r3,r3,r5
  8040b8:	10800044 	addi	r2,r2,1
  8040bc:	41400115 	stw	r5,4(r8)
  8040c0:	d8c02015 	stw	r3,128(sp)
  8040c4:	d8801f15 	stw	r2,124(sp)
  8040c8:	010001c4 	movi	r4,7
  8040cc:	2081d316 	blt	r4,r2,80481c <___vfprintf_internal_r+0x111c>
  8040d0:	42000204 	addi	r8,r8,8
  8040d4:	9480010c 	andi	r18,r18,4
  8040d8:	90003226 	beq	r18,zero,8041a4 <___vfprintf_internal_r+0xaa4>
  8040dc:	d9403117 	ldw	r5,196(sp)
  8040e0:	d8802a17 	ldw	r2,168(sp)
  8040e4:	28a1c83a 	sub	r16,r5,r2
  8040e8:	04002e0e 	bge	zero,r16,8041a4 <___vfprintf_internal_r+0xaa4>
  8040ec:	04400404 	movi	r17,16
  8040f0:	d8801f17 	ldw	r2,124(sp)
  8040f4:	8c04a20e 	bge	r17,r16,805380 <___vfprintf_internal_r+0x1c80>
  8040f8:	01402074 	movhi	r5,129
  8040fc:	294c0284 	addi	r5,r5,12298
  804100:	d9403515 	stw	r5,212(sp)
  804104:	048001c4 	movi	r18,7
  804108:	dcc02c17 	ldw	r19,176(sp)
  80410c:	00000306 	br	80411c <___vfprintf_internal_r+0xa1c>
  804110:	843ffc04 	addi	r16,r16,-16
  804114:	42000204 	addi	r8,r8,8
  804118:	8c00130e 	bge	r17,r16,804168 <___vfprintf_internal_r+0xa68>
  80411c:	01002074 	movhi	r4,129
  804120:	18c00404 	addi	r3,r3,16
  804124:	10800044 	addi	r2,r2,1
  804128:	210c0284 	addi	r4,r4,12298
  80412c:	41000015 	stw	r4,0(r8)
  804130:	44400115 	stw	r17,4(r8)
  804134:	d8c02015 	stw	r3,128(sp)
  804138:	d8801f15 	stw	r2,124(sp)
  80413c:	90bff40e 	bge	r18,r2,804110 <__alt_mem_onchip_mem+0xff7fc110>
  804140:	d9801e04 	addi	r6,sp,120
  804144:	b80b883a 	mov	r5,r23
  804148:	9809883a 	mov	r4,r19
  80414c:	080a0bc0 	call	80a0bc <__sprint_r>
  804150:	103e6d1e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  804154:	843ffc04 	addi	r16,r16,-16
  804158:	d8c02017 	ldw	r3,128(sp)
  80415c:	d8801f17 	ldw	r2,124(sp)
  804160:	da000404 	addi	r8,sp,16
  804164:	8c3fed16 	blt	r17,r16,80411c <__alt_mem_onchip_mem+0xff7fc11c>
  804168:	d9403517 	ldw	r5,212(sp)
  80416c:	1c07883a 	add	r3,r3,r16
  804170:	10800044 	addi	r2,r2,1
  804174:	41400015 	stw	r5,0(r8)
  804178:	44000115 	stw	r16,4(r8)
  80417c:	d8c02015 	stw	r3,128(sp)
  804180:	d8801f15 	stw	r2,124(sp)
  804184:	010001c4 	movi	r4,7
  804188:	2080060e 	bge	r4,r2,8041a4 <___vfprintf_internal_r+0xaa4>
  80418c:	d9002c17 	ldw	r4,176(sp)
  804190:	d9801e04 	addi	r6,sp,120
  804194:	b80b883a 	mov	r5,r23
  804198:	080a0bc0 	call	80a0bc <__sprint_r>
  80419c:	103e5a1e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  8041a0:	d8c02017 	ldw	r3,128(sp)
  8041a4:	d8803117 	ldw	r2,196(sp)
  8041a8:	d9002a17 	ldw	r4,168(sp)
  8041ac:	1100010e 	bge	r2,r4,8041b4 <___vfprintf_internal_r+0xab4>
  8041b0:	2005883a 	mov	r2,r4
  8041b4:	d9402f17 	ldw	r5,188(sp)
  8041b8:	288b883a 	add	r5,r5,r2
  8041bc:	d9402f15 	stw	r5,188(sp)
  8041c0:	18019e1e 	bne	r3,zero,80483c <___vfprintf_internal_r+0x113c>
  8041c4:	a8800007 	ldb	r2,0(r21)
  8041c8:	d8001f15 	stw	zero,124(sp)
  8041cc:	da000404 	addi	r8,sp,16
  8041d0:	103d851e 	bne	r2,zero,8037e8 <__alt_mem_onchip_mem+0xff7fb7e8>
  8041d4:	a821883a 	mov	r16,r21
  8041d8:	003d9b06 	br	803848 <__alt_mem_onchip_mem+0xff7fb848>
  8041dc:	18c03fcc 	andi	r3,r3,255
  8041e0:	1805c11e 	bne	r3,zero,8058e8 <___vfprintf_internal_r+0x21e8>
  8041e4:	94800414 	ori	r18,r18,16
  8041e8:	9080080c 	andi	r2,r18,32
  8041ec:	10020c26 	beq	r2,zero,804a20 <___vfprintf_internal_r+0x1320>
  8041f0:	d8802d17 	ldw	r2,180(sp)
  8041f4:	d9002917 	ldw	r4,164(sp)
  8041f8:	d8002785 	stb	zero,158(sp)
  8041fc:	10c00204 	addi	r3,r2,8
  804200:	14c00017 	ldw	r19,0(r2)
  804204:	15800117 	ldw	r22,4(r2)
  804208:	20040f16 	blt	r4,zero,805248 <___vfprintf_internal_r+0x1b48>
  80420c:	013fdfc4 	movi	r4,-129
  804210:	9d84b03a 	or	r2,r19,r22
  804214:	d8c02d15 	stw	r3,180(sp)
  804218:	9124703a 	and	r18,r18,r4
  80421c:	0039883a 	mov	fp,zero
  804220:	103e891e 	bne	r2,zero,803c48 <__alt_mem_onchip_mem+0xff7fbc48>
  804224:	d9002917 	ldw	r4,164(sp)
  804228:	2002c11e 	bne	r4,zero,804d30 <___vfprintf_internal_r+0x1630>
  80422c:	d8002915 	stw	zero,164(sp)
  804230:	d8002e15 	stw	zero,184(sp)
  804234:	dc001e04 	addi	r16,sp,120
  804238:	003ef806 	br	803e1c <__alt_mem_onchip_mem+0xff7fbe1c>
  80423c:	18c03fcc 	andi	r3,r3,255
  804240:	18059d1e 	bne	r3,zero,8058b8 <___vfprintf_internal_r+0x21b8>
  804244:	01402074 	movhi	r5,129
  804248:	294bf204 	addi	r5,r5,12232
  80424c:	d9403915 	stw	r5,228(sp)
  804250:	9080080c 	andi	r2,r18,32
  804254:	10005226 	beq	r2,zero,8043a0 <___vfprintf_internal_r+0xca0>
  804258:	d8802d17 	ldw	r2,180(sp)
  80425c:	14c00017 	ldw	r19,0(r2)
  804260:	15800117 	ldw	r22,4(r2)
  804264:	10800204 	addi	r2,r2,8
  804268:	d8802d15 	stw	r2,180(sp)
  80426c:	9080004c 	andi	r2,r18,1
  804270:	10019026 	beq	r2,zero,8048b4 <___vfprintf_internal_r+0x11b4>
  804274:	9d84b03a 	or	r2,r19,r22
  804278:	10036926 	beq	r2,zero,805020 <___vfprintf_internal_r+0x1920>
  80427c:	d8c02917 	ldw	r3,164(sp)
  804280:	00800c04 	movi	r2,48
  804284:	d8802705 	stb	r2,156(sp)
  804288:	dc402745 	stb	r17,157(sp)
  80428c:	d8002785 	stb	zero,158(sp)
  804290:	90800094 	ori	r2,r18,2
  804294:	18045d16 	blt	r3,zero,80540c <___vfprintf_internal_r+0x1d0c>
  804298:	00bfdfc4 	movi	r2,-129
  80429c:	90a4703a 	and	r18,r18,r2
  8042a0:	94800094 	ori	r18,r18,2
  8042a4:	0039883a 	mov	fp,zero
  8042a8:	d9003917 	ldw	r4,228(sp)
  8042ac:	dc001e04 	addi	r16,sp,120
  8042b0:	988003cc 	andi	r2,r19,15
  8042b4:	b006973a 	slli	r3,r22,28
  8042b8:	2085883a 	add	r2,r4,r2
  8042bc:	9826d13a 	srli	r19,r19,4
  8042c0:	10800003 	ldbu	r2,0(r2)
  8042c4:	b02cd13a 	srli	r22,r22,4
  8042c8:	843fffc4 	addi	r16,r16,-1
  8042cc:	1ce6b03a 	or	r19,r3,r19
  8042d0:	80800005 	stb	r2,0(r16)
  8042d4:	9d84b03a 	or	r2,r19,r22
  8042d8:	103ff51e 	bne	r2,zero,8042b0 <__alt_mem_onchip_mem+0xff7fc2b0>
  8042dc:	d8c02817 	ldw	r3,160(sp)
  8042e0:	1c07c83a 	sub	r3,r3,r16
  8042e4:	d8c02e15 	stw	r3,184(sp)
  8042e8:	003ecc06 	br	803e1c <__alt_mem_onchip_mem+0xff7fbe1c>
  8042ec:	18c03fcc 	andi	r3,r3,255
  8042f0:	183e9f26 	beq	r3,zero,803d70 <__alt_mem_onchip_mem+0xff7fbd70>
  8042f4:	d9c02785 	stb	r7,158(sp)
  8042f8:	003e9d06 	br	803d70 <__alt_mem_onchip_mem+0xff7fbd70>
  8042fc:	00c00044 	movi	r3,1
  804300:	01c00ac4 	movi	r7,43
  804304:	ac400007 	ldb	r17,0(r21)
  804308:	003d5e06 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  80430c:	94800814 	ori	r18,r18,32
  804310:	ac400007 	ldb	r17,0(r21)
  804314:	003d5b06 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  804318:	d8c02d17 	ldw	r3,180(sp)
  80431c:	d8002785 	stb	zero,158(sp)
  804320:	1c000017 	ldw	r16,0(r3)
  804324:	1cc00104 	addi	r19,r3,4
  804328:	80041926 	beq	r16,zero,805390 <___vfprintf_internal_r+0x1c90>
  80432c:	d9002917 	ldw	r4,164(sp)
  804330:	2003d016 	blt	r4,zero,805274 <___vfprintf_internal_r+0x1b74>
  804334:	200d883a 	mov	r6,r4
  804338:	000b883a 	mov	r5,zero
  80433c:	8009883a 	mov	r4,r16
  804340:	da003d15 	stw	r8,244(sp)
  804344:	08084900 	call	808490 <memchr>
  804348:	da003d17 	ldw	r8,244(sp)
  80434c:	10045426 	beq	r2,zero,8054a0 <___vfprintf_internal_r+0x1da0>
  804350:	1405c83a 	sub	r2,r2,r16
  804354:	d8802e15 	stw	r2,184(sp)
  804358:	1003cc16 	blt	r2,zero,80528c <___vfprintf_internal_r+0x1b8c>
  80435c:	df002783 	ldbu	fp,158(sp)
  804360:	d8802a15 	stw	r2,168(sp)
  804364:	dcc02d15 	stw	r19,180(sp)
  804368:	d8002915 	stw	zero,164(sp)
  80436c:	d8003215 	stw	zero,200(sp)
  804370:	003eb006 	br	803e34 <__alt_mem_onchip_mem+0xff7fbe34>
  804374:	18c03fcc 	andi	r3,r3,255
  804378:	183f9b26 	beq	r3,zero,8041e8 <__alt_mem_onchip_mem+0xff7fc1e8>
  80437c:	d9c02785 	stb	r7,158(sp)
  804380:	003f9906 	br	8041e8 <__alt_mem_onchip_mem+0xff7fc1e8>
  804384:	18c03fcc 	andi	r3,r3,255
  804388:	1805551e 	bne	r3,zero,8058e0 <___vfprintf_internal_r+0x21e0>
  80438c:	01402074 	movhi	r5,129
  804390:	294bf704 	addi	r5,r5,12252
  804394:	d9403915 	stw	r5,228(sp)
  804398:	9080080c 	andi	r2,r18,32
  80439c:	103fae1e 	bne	r2,zero,804258 <__alt_mem_onchip_mem+0xff7fc258>
  8043a0:	9080040c 	andi	r2,r18,16
  8043a4:	1002de26 	beq	r2,zero,804f20 <___vfprintf_internal_r+0x1820>
  8043a8:	d8c02d17 	ldw	r3,180(sp)
  8043ac:	002d883a 	mov	r22,zero
  8043b0:	1cc00017 	ldw	r19,0(r3)
  8043b4:	18c00104 	addi	r3,r3,4
  8043b8:	d8c02d15 	stw	r3,180(sp)
  8043bc:	003fab06 	br	80426c <__alt_mem_onchip_mem+0xff7fc26c>
  8043c0:	38803fcc 	andi	r2,r7,255
  8043c4:	1080201c 	xori	r2,r2,128
  8043c8:	10bfe004 	addi	r2,r2,-128
  8043cc:	1002d21e 	bne	r2,zero,804f18 <___vfprintf_internal_r+0x1818>
  8043d0:	00c00044 	movi	r3,1
  8043d4:	01c00804 	movi	r7,32
  8043d8:	ac400007 	ldb	r17,0(r21)
  8043dc:	003d2906 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  8043e0:	94800054 	ori	r18,r18,1
  8043e4:	ac400007 	ldb	r17,0(r21)
  8043e8:	003d2606 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  8043ec:	18c03fcc 	andi	r3,r3,255
  8043f0:	183e0526 	beq	r3,zero,803c08 <__alt_mem_onchip_mem+0xff7fbc08>
  8043f4:	d9c02785 	stb	r7,158(sp)
  8043f8:	003e0306 	br	803c08 <__alt_mem_onchip_mem+0xff7fbc08>
  8043fc:	94801014 	ori	r18,r18,64
  804400:	ac400007 	ldb	r17,0(r21)
  804404:	003d1f06 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  804408:	ac400007 	ldb	r17,0(r21)
  80440c:	8a438726 	beq	r17,r9,80522c <___vfprintf_internal_r+0x1b2c>
  804410:	94800414 	ori	r18,r18,16
  804414:	003d1b06 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  804418:	18c03fcc 	andi	r3,r3,255
  80441c:	1805341e 	bne	r3,zero,8058f0 <___vfprintf_internal_r+0x21f0>
  804420:	9080080c 	andi	r2,r18,32
  804424:	1002cd26 	beq	r2,zero,804f5c <___vfprintf_internal_r+0x185c>
  804428:	d9402d17 	ldw	r5,180(sp)
  80442c:	d9002f17 	ldw	r4,188(sp)
  804430:	28800017 	ldw	r2,0(r5)
  804434:	2007d7fa 	srai	r3,r4,31
  804438:	29400104 	addi	r5,r5,4
  80443c:	d9402d15 	stw	r5,180(sp)
  804440:	11000015 	stw	r4,0(r2)
  804444:	10c00115 	stw	r3,4(r2)
  804448:	003ce506 	br	8037e0 <__alt_mem_onchip_mem+0xff7fb7e0>
  80444c:	d8c02d17 	ldw	r3,180(sp)
  804450:	d9002d17 	ldw	r4,180(sp)
  804454:	d8002785 	stb	zero,158(sp)
  804458:	18800017 	ldw	r2,0(r3)
  80445c:	21000104 	addi	r4,r4,4
  804460:	00c00044 	movi	r3,1
  804464:	d8c02a15 	stw	r3,168(sp)
  804468:	d8801405 	stb	r2,80(sp)
  80446c:	d9002d15 	stw	r4,180(sp)
  804470:	d8c02e15 	stw	r3,184(sp)
  804474:	d8002915 	stw	zero,164(sp)
  804478:	d8003215 	stw	zero,200(sp)
  80447c:	dc001404 	addi	r16,sp,80
  804480:	0039883a 	mov	fp,zero
  804484:	003e7206 	br	803e50 <__alt_mem_onchip_mem+0xff7fbe50>
  804488:	01002074 	movhi	r4,129
  80448c:	210bf704 	addi	r4,r4,12252
  804490:	0039883a 	mov	fp,zero
  804494:	d9003915 	stw	r4,228(sp)
  804498:	04401e04 	movi	r17,120
  80449c:	003f8206 	br	8042a8 <__alt_mem_onchip_mem+0xff7fc2a8>
  8044a0:	18c03fcc 	andi	r3,r3,255
  8044a4:	1805061e 	bne	r3,zero,8058c0 <___vfprintf_internal_r+0x21c0>
  8044a8:	883d9126 	beq	r17,zero,803af0 <__alt_mem_onchip_mem+0xff7fbaf0>
  8044ac:	00c00044 	movi	r3,1
  8044b0:	d8c02a15 	stw	r3,168(sp)
  8044b4:	dc401405 	stb	r17,80(sp)
  8044b8:	d8002785 	stb	zero,158(sp)
  8044bc:	003fec06 	br	804470 <__alt_mem_onchip_mem+0xff7fc470>
  8044c0:	01402074 	movhi	r5,129
  8044c4:	294bf704 	addi	r5,r5,12252
  8044c8:	d9403915 	stw	r5,228(sp)
  8044cc:	d8c02d15 	stw	r3,180(sp)
  8044d0:	1025883a 	mov	r18,r2
  8044d4:	04401e04 	movi	r17,120
  8044d8:	9d84b03a 	or	r2,r19,r22
  8044dc:	1000fc1e 	bne	r2,zero,8048d0 <___vfprintf_internal_r+0x11d0>
  8044e0:	0039883a 	mov	fp,zero
  8044e4:	00800084 	movi	r2,2
  8044e8:	10803fcc 	andi	r2,r2,255
  8044ec:	00c00044 	movi	r3,1
  8044f0:	10c20f26 	beq	r2,r3,804d30 <___vfprintf_internal_r+0x1630>
  8044f4:	00c00084 	movi	r3,2
  8044f8:	10fd6326 	beq	r2,r3,803a88 <__alt_mem_onchip_mem+0xff7fba88>
  8044fc:	003e2d06 	br	803db4 <__alt_mem_onchip_mem+0xff7fbdb4>
  804500:	d8c02017 	ldw	r3,128(sp)
  804504:	003e9306 	br	803f54 <__alt_mem_onchip_mem+0xff7fbf54>
  804508:	00801944 	movi	r2,101
  80450c:	14407e0e 	bge	r2,r17,804708 <___vfprintf_internal_r+0x1008>
  804510:	d9003617 	ldw	r4,216(sp)
  804514:	d9403817 	ldw	r5,224(sp)
  804518:	000d883a 	mov	r6,zero
  80451c:	000f883a 	mov	r7,zero
  804520:	d8c03c15 	stw	r3,240(sp)
  804524:	da003d15 	stw	r8,244(sp)
  804528:	080d7000 	call	80d700 <__eqdf2>
  80452c:	d8c03c17 	ldw	r3,240(sp)
  804530:	da003d17 	ldw	r8,244(sp)
  804534:	1000f71e 	bne	r2,zero,804914 <___vfprintf_internal_r+0x1214>
  804538:	d8801f17 	ldw	r2,124(sp)
  80453c:	01002074 	movhi	r4,129
  804540:	210bfe04 	addi	r4,r4,12280
  804544:	18c00044 	addi	r3,r3,1
  804548:	10800044 	addi	r2,r2,1
  80454c:	41000015 	stw	r4,0(r8)
  804550:	01000044 	movi	r4,1
  804554:	41000115 	stw	r4,4(r8)
  804558:	d8c02015 	stw	r3,128(sp)
  80455c:	d8801f15 	stw	r2,124(sp)
  804560:	010001c4 	movi	r4,7
  804564:	2082b816 	blt	r4,r2,805048 <___vfprintf_internal_r+0x1948>
  804568:	42000204 	addi	r8,r8,8
  80456c:	d8802617 	ldw	r2,152(sp)
  804570:	d9403317 	ldw	r5,204(sp)
  804574:	11400216 	blt	r2,r5,804580 <___vfprintf_internal_r+0xe80>
  804578:	9080004c 	andi	r2,r18,1
  80457c:	103ed526 	beq	r2,zero,8040d4 <__alt_mem_onchip_mem+0xff7fc0d4>
  804580:	d8803717 	ldw	r2,220(sp)
  804584:	d9003417 	ldw	r4,208(sp)
  804588:	d9403717 	ldw	r5,220(sp)
  80458c:	1887883a 	add	r3,r3,r2
  804590:	d8801f17 	ldw	r2,124(sp)
  804594:	41000015 	stw	r4,0(r8)
  804598:	41400115 	stw	r5,4(r8)
  80459c:	10800044 	addi	r2,r2,1
  8045a0:	d8c02015 	stw	r3,128(sp)
  8045a4:	d8801f15 	stw	r2,124(sp)
  8045a8:	010001c4 	movi	r4,7
  8045ac:	20832916 	blt	r4,r2,805254 <___vfprintf_internal_r+0x1b54>
  8045b0:	42000204 	addi	r8,r8,8
  8045b4:	d8803317 	ldw	r2,204(sp)
  8045b8:	143fffc4 	addi	r16,r2,-1
  8045bc:	043ec50e 	bge	zero,r16,8040d4 <__alt_mem_onchip_mem+0xff7fc0d4>
  8045c0:	04400404 	movi	r17,16
  8045c4:	d8801f17 	ldw	r2,124(sp)
  8045c8:	8c00880e 	bge	r17,r16,8047ec <___vfprintf_internal_r+0x10ec>
  8045cc:	01402074 	movhi	r5,129
  8045d0:	294bfe84 	addi	r5,r5,12282
  8045d4:	d9402b15 	stw	r5,172(sp)
  8045d8:	058001c4 	movi	r22,7
  8045dc:	dcc02c17 	ldw	r19,176(sp)
  8045e0:	00000306 	br	8045f0 <___vfprintf_internal_r+0xef0>
  8045e4:	42000204 	addi	r8,r8,8
  8045e8:	843ffc04 	addi	r16,r16,-16
  8045ec:	8c00820e 	bge	r17,r16,8047f8 <___vfprintf_internal_r+0x10f8>
  8045f0:	18c00404 	addi	r3,r3,16
  8045f4:	10800044 	addi	r2,r2,1
  8045f8:	45000015 	stw	r20,0(r8)
  8045fc:	44400115 	stw	r17,4(r8)
  804600:	d8c02015 	stw	r3,128(sp)
  804604:	d8801f15 	stw	r2,124(sp)
  804608:	b0bff60e 	bge	r22,r2,8045e4 <__alt_mem_onchip_mem+0xff7fc5e4>
  80460c:	d9801e04 	addi	r6,sp,120
  804610:	b80b883a 	mov	r5,r23
  804614:	9809883a 	mov	r4,r19
  804618:	080a0bc0 	call	80a0bc <__sprint_r>
  80461c:	103d3a1e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  804620:	d8c02017 	ldw	r3,128(sp)
  804624:	d8801f17 	ldw	r2,124(sp)
  804628:	da000404 	addi	r8,sp,16
  80462c:	003fee06 	br	8045e8 <__alt_mem_onchip_mem+0xff7fc5e8>
  804630:	d9403117 	ldw	r5,196(sp)
  804634:	d8802a17 	ldw	r2,168(sp)
  804638:	28adc83a 	sub	r22,r5,r2
  80463c:	05be630e 	bge	zero,r22,803fcc <__alt_mem_onchip_mem+0xff7fbfcc>
  804640:	07000404 	movi	fp,16
  804644:	d8801f17 	ldw	r2,124(sp)
  804648:	e5838f0e 	bge	fp,r22,805488 <___vfprintf_internal_r+0x1d88>
  80464c:	01402074 	movhi	r5,129
  804650:	294bfe84 	addi	r5,r5,12282
  804654:	dc403015 	stw	r17,192(sp)
  804658:	d9402b15 	stw	r5,172(sp)
  80465c:	b023883a 	mov	r17,r22
  804660:	04c001c4 	movi	r19,7
  804664:	a82d883a 	mov	r22,r21
  804668:	902b883a 	mov	r21,r18
  80466c:	8025883a 	mov	r18,r16
  804670:	dc002c17 	ldw	r16,176(sp)
  804674:	00000306 	br	804684 <___vfprintf_internal_r+0xf84>
  804678:	8c7ffc04 	addi	r17,r17,-16
  80467c:	42000204 	addi	r8,r8,8
  804680:	e440110e 	bge	fp,r17,8046c8 <___vfprintf_internal_r+0xfc8>
  804684:	18c00404 	addi	r3,r3,16
  804688:	10800044 	addi	r2,r2,1
  80468c:	45000015 	stw	r20,0(r8)
  804690:	47000115 	stw	fp,4(r8)
  804694:	d8c02015 	stw	r3,128(sp)
  804698:	d8801f15 	stw	r2,124(sp)
  80469c:	98bff60e 	bge	r19,r2,804678 <__alt_mem_onchip_mem+0xff7fc678>
  8046a0:	d9801e04 	addi	r6,sp,120
  8046a4:	b80b883a 	mov	r5,r23
  8046a8:	8009883a 	mov	r4,r16
  8046ac:	080a0bc0 	call	80a0bc <__sprint_r>
  8046b0:	103d151e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  8046b4:	8c7ffc04 	addi	r17,r17,-16
  8046b8:	d8c02017 	ldw	r3,128(sp)
  8046bc:	d8801f17 	ldw	r2,124(sp)
  8046c0:	da000404 	addi	r8,sp,16
  8046c4:	e47fef16 	blt	fp,r17,804684 <__alt_mem_onchip_mem+0xff7fc684>
  8046c8:	9021883a 	mov	r16,r18
  8046cc:	a825883a 	mov	r18,r21
  8046d0:	b02b883a 	mov	r21,r22
  8046d4:	882d883a 	mov	r22,r17
  8046d8:	dc403017 	ldw	r17,192(sp)
  8046dc:	d9002b17 	ldw	r4,172(sp)
  8046e0:	1d87883a 	add	r3,r3,r22
  8046e4:	10800044 	addi	r2,r2,1
  8046e8:	41000015 	stw	r4,0(r8)
  8046ec:	45800115 	stw	r22,4(r8)
  8046f0:	d8c02015 	stw	r3,128(sp)
  8046f4:	d8801f15 	stw	r2,124(sp)
  8046f8:	010001c4 	movi	r4,7
  8046fc:	20818e16 	blt	r4,r2,804d38 <___vfprintf_internal_r+0x1638>
  804700:	42000204 	addi	r8,r8,8
  804704:	003e3106 	br	803fcc <__alt_mem_onchip_mem+0xff7fbfcc>
  804708:	d9403317 	ldw	r5,204(sp)
  80470c:	00800044 	movi	r2,1
  804710:	18c00044 	addi	r3,r3,1
  804714:	1141530e 	bge	r2,r5,804c64 <___vfprintf_internal_r+0x1564>
  804718:	dc401f17 	ldw	r17,124(sp)
  80471c:	00800044 	movi	r2,1
  804720:	40800115 	stw	r2,4(r8)
  804724:	8c400044 	addi	r17,r17,1
  804728:	44000015 	stw	r16,0(r8)
  80472c:	d8c02015 	stw	r3,128(sp)
  804730:	dc401f15 	stw	r17,124(sp)
  804734:	008001c4 	movi	r2,7
  804738:	14416b16 	blt	r2,r17,804ce8 <___vfprintf_internal_r+0x15e8>
  80473c:	42000204 	addi	r8,r8,8
  804740:	d8803717 	ldw	r2,220(sp)
  804744:	d9003417 	ldw	r4,208(sp)
  804748:	8c400044 	addi	r17,r17,1
  80474c:	10c7883a 	add	r3,r2,r3
  804750:	40800115 	stw	r2,4(r8)
  804754:	41000015 	stw	r4,0(r8)
  804758:	d8c02015 	stw	r3,128(sp)
  80475c:	dc401f15 	stw	r17,124(sp)
  804760:	008001c4 	movi	r2,7
  804764:	14416916 	blt	r2,r17,804d0c <___vfprintf_internal_r+0x160c>
  804768:	45800204 	addi	r22,r8,8
  80476c:	d9003617 	ldw	r4,216(sp)
  804770:	d9403817 	ldw	r5,224(sp)
  804774:	000d883a 	mov	r6,zero
  804778:	000f883a 	mov	r7,zero
  80477c:	d8c03c15 	stw	r3,240(sp)
  804780:	080d7000 	call	80d700 <__eqdf2>
  804784:	d8c03c17 	ldw	r3,240(sp)
  804788:	1000bc26 	beq	r2,zero,804a7c <___vfprintf_internal_r+0x137c>
  80478c:	d9403317 	ldw	r5,204(sp)
  804790:	84000044 	addi	r16,r16,1
  804794:	8c400044 	addi	r17,r17,1
  804798:	28bfffc4 	addi	r2,r5,-1
  80479c:	1887883a 	add	r3,r3,r2
  8047a0:	b0800115 	stw	r2,4(r22)
  8047a4:	b4000015 	stw	r16,0(r22)
  8047a8:	d8c02015 	stw	r3,128(sp)
  8047ac:	dc401f15 	stw	r17,124(sp)
  8047b0:	008001c4 	movi	r2,7
  8047b4:	14414316 	blt	r2,r17,804cc4 <___vfprintf_internal_r+0x15c4>
  8047b8:	b5800204 	addi	r22,r22,8
  8047bc:	d9003a17 	ldw	r4,232(sp)
  8047c0:	df0022c4 	addi	fp,sp,139
  8047c4:	8c400044 	addi	r17,r17,1
  8047c8:	20c7883a 	add	r3,r4,r3
  8047cc:	b7000015 	stw	fp,0(r22)
  8047d0:	b1000115 	stw	r4,4(r22)
  8047d4:	d8c02015 	stw	r3,128(sp)
  8047d8:	dc401f15 	stw	r17,124(sp)
  8047dc:	008001c4 	movi	r2,7
  8047e0:	14400e16 	blt	r2,r17,80481c <___vfprintf_internal_r+0x111c>
  8047e4:	b2000204 	addi	r8,r22,8
  8047e8:	003e3a06 	br	8040d4 <__alt_mem_onchip_mem+0xff7fc0d4>
  8047ec:	01002074 	movhi	r4,129
  8047f0:	210bfe84 	addi	r4,r4,12282
  8047f4:	d9002b15 	stw	r4,172(sp)
  8047f8:	d9002b17 	ldw	r4,172(sp)
  8047fc:	1c07883a 	add	r3,r3,r16
  804800:	44000115 	stw	r16,4(r8)
  804804:	41000015 	stw	r4,0(r8)
  804808:	10800044 	addi	r2,r2,1
  80480c:	d8c02015 	stw	r3,128(sp)
  804810:	d8801f15 	stw	r2,124(sp)
  804814:	010001c4 	movi	r4,7
  804818:	20be2d0e 	bge	r4,r2,8040d0 <__alt_mem_onchip_mem+0xff7fc0d0>
  80481c:	d9002c17 	ldw	r4,176(sp)
  804820:	d9801e04 	addi	r6,sp,120
  804824:	b80b883a 	mov	r5,r23
  804828:	080a0bc0 	call	80a0bc <__sprint_r>
  80482c:	103cb61e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  804830:	d8c02017 	ldw	r3,128(sp)
  804834:	da000404 	addi	r8,sp,16
  804838:	003e2606 	br	8040d4 <__alt_mem_onchip_mem+0xff7fc0d4>
  80483c:	d9002c17 	ldw	r4,176(sp)
  804840:	d9801e04 	addi	r6,sp,120
  804844:	b80b883a 	mov	r5,r23
  804848:	080a0bc0 	call	80a0bc <__sprint_r>
  80484c:	103e5d26 	beq	r2,zero,8041c4 <__alt_mem_onchip_mem+0xff7fc1c4>
  804850:	003cad06 	br	803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  804854:	d9002c17 	ldw	r4,176(sp)
  804858:	d9801e04 	addi	r6,sp,120
  80485c:	b80b883a 	mov	r5,r23
  804860:	080a0bc0 	call	80a0bc <__sprint_r>
  804864:	103ca81e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  804868:	d8c02017 	ldw	r3,128(sp)
  80486c:	da000404 	addi	r8,sp,16
  804870:	003e0b06 	br	8040a0 <__alt_mem_onchip_mem+0xff7fc0a0>
  804874:	d9002c17 	ldw	r4,176(sp)
  804878:	d9801e04 	addi	r6,sp,120
  80487c:	b80b883a 	mov	r5,r23
  804880:	080a0bc0 	call	80a0bc <__sprint_r>
  804884:	103ca01e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  804888:	d8c02017 	ldw	r3,128(sp)
  80488c:	da000404 	addi	r8,sp,16
  804890:	003dbd06 	br	803f88 <__alt_mem_onchip_mem+0xff7fbf88>
  804894:	d9002c17 	ldw	r4,176(sp)
  804898:	d9801e04 	addi	r6,sp,120
  80489c:	b80b883a 	mov	r5,r23
  8048a0:	080a0bc0 	call	80a0bc <__sprint_r>
  8048a4:	103c981e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  8048a8:	d8c02017 	ldw	r3,128(sp)
  8048ac:	da000404 	addi	r8,sp,16
  8048b0:	003dc306 	br	803fc0 <__alt_mem_onchip_mem+0xff7fbfc0>
  8048b4:	d8802917 	ldw	r2,164(sp)
  8048b8:	d8002785 	stb	zero,158(sp)
  8048bc:	103f0616 	blt	r2,zero,8044d8 <__alt_mem_onchip_mem+0xff7fc4d8>
  8048c0:	00ffdfc4 	movi	r3,-129
  8048c4:	9d84b03a 	or	r2,r19,r22
  8048c8:	90e4703a 	and	r18,r18,r3
  8048cc:	103c6b26 	beq	r2,zero,803a7c <__alt_mem_onchip_mem+0xff7fba7c>
  8048d0:	0039883a 	mov	fp,zero
  8048d4:	003e7406 	br	8042a8 <__alt_mem_onchip_mem+0xff7fc2a8>
  8048d8:	9080040c 	andi	r2,r18,16
  8048dc:	1001b326 	beq	r2,zero,804fac <___vfprintf_internal_r+0x18ac>
  8048e0:	d9002d17 	ldw	r4,180(sp)
  8048e4:	d9402917 	ldw	r5,164(sp)
  8048e8:	d8002785 	stb	zero,158(sp)
  8048ec:	20800104 	addi	r2,r4,4
  8048f0:	24c00017 	ldw	r19,0(r4)
  8048f4:	002d883a 	mov	r22,zero
  8048f8:	2801b516 	blt	r5,zero,804fd0 <___vfprintf_internal_r+0x18d0>
  8048fc:	00ffdfc4 	movi	r3,-129
  804900:	d8802d15 	stw	r2,180(sp)
  804904:	90e4703a 	and	r18,r18,r3
  804908:	983d2726 	beq	r19,zero,803da8 <__alt_mem_onchip_mem+0xff7fbda8>
  80490c:	0039883a 	mov	fp,zero
  804910:	003d2a06 	br	803dbc <__alt_mem_onchip_mem+0xff7fbdbc>
  804914:	dc402617 	ldw	r17,152(sp)
  804918:	0441d30e 	bge	zero,r17,805068 <___vfprintf_internal_r+0x1968>
  80491c:	dc403217 	ldw	r17,200(sp)
  804920:	d8803317 	ldw	r2,204(sp)
  804924:	1440010e 	bge	r2,r17,80492c <___vfprintf_internal_r+0x122c>
  804928:	1023883a 	mov	r17,r2
  80492c:	04400a0e 	bge	zero,r17,804958 <___vfprintf_internal_r+0x1258>
  804930:	d8801f17 	ldw	r2,124(sp)
  804934:	1c47883a 	add	r3,r3,r17
  804938:	44000015 	stw	r16,0(r8)
  80493c:	10800044 	addi	r2,r2,1
  804940:	44400115 	stw	r17,4(r8)
  804944:	d8c02015 	stw	r3,128(sp)
  804948:	d8801f15 	stw	r2,124(sp)
  80494c:	010001c4 	movi	r4,7
  804950:	20826516 	blt	r4,r2,8052e8 <___vfprintf_internal_r+0x1be8>
  804954:	42000204 	addi	r8,r8,8
  804958:	88026116 	blt	r17,zero,8052e0 <___vfprintf_internal_r+0x1be0>
  80495c:	d9003217 	ldw	r4,200(sp)
  804960:	2463c83a 	sub	r17,r4,r17
  804964:	04407b0e 	bge	zero,r17,804b54 <___vfprintf_internal_r+0x1454>
  804968:	05800404 	movi	r22,16
  80496c:	d8801f17 	ldw	r2,124(sp)
  804970:	b4419d0e 	bge	r22,r17,804fe8 <___vfprintf_internal_r+0x18e8>
  804974:	01002074 	movhi	r4,129
  804978:	210bfe84 	addi	r4,r4,12282
  80497c:	d9002b15 	stw	r4,172(sp)
  804980:	070001c4 	movi	fp,7
  804984:	dcc02c17 	ldw	r19,176(sp)
  804988:	00000306 	br	804998 <___vfprintf_internal_r+0x1298>
  80498c:	42000204 	addi	r8,r8,8
  804990:	8c7ffc04 	addi	r17,r17,-16
  804994:	b441970e 	bge	r22,r17,804ff4 <___vfprintf_internal_r+0x18f4>
  804998:	18c00404 	addi	r3,r3,16
  80499c:	10800044 	addi	r2,r2,1
  8049a0:	45000015 	stw	r20,0(r8)
  8049a4:	45800115 	stw	r22,4(r8)
  8049a8:	d8c02015 	stw	r3,128(sp)
  8049ac:	d8801f15 	stw	r2,124(sp)
  8049b0:	e0bff60e 	bge	fp,r2,80498c <__alt_mem_onchip_mem+0xff7fc98c>
  8049b4:	d9801e04 	addi	r6,sp,120
  8049b8:	b80b883a 	mov	r5,r23
  8049bc:	9809883a 	mov	r4,r19
  8049c0:	080a0bc0 	call	80a0bc <__sprint_r>
  8049c4:	103c501e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  8049c8:	d8c02017 	ldw	r3,128(sp)
  8049cc:	d8801f17 	ldw	r2,124(sp)
  8049d0:	da000404 	addi	r8,sp,16
  8049d4:	003fee06 	br	804990 <__alt_mem_onchip_mem+0xff7fc990>
  8049d8:	d9002c17 	ldw	r4,176(sp)
  8049dc:	d9801e04 	addi	r6,sp,120
  8049e0:	b80b883a 	mov	r5,r23
  8049e4:	080a0bc0 	call	80a0bc <__sprint_r>
  8049e8:	103c471e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  8049ec:	d8c02017 	ldw	r3,128(sp)
  8049f0:	df002787 	ldb	fp,158(sp)
  8049f4:	da000404 	addi	r8,sp,16
  8049f8:	003d5606 	br	803f54 <__alt_mem_onchip_mem+0xff7fbf54>
  8049fc:	9080040c 	andi	r2,r18,16
  804a00:	10016126 	beq	r2,zero,804f88 <___vfprintf_internal_r+0x1888>
  804a04:	d8802d17 	ldw	r2,180(sp)
  804a08:	14c00017 	ldw	r19,0(r2)
  804a0c:	10800104 	addi	r2,r2,4
  804a10:	d8802d15 	stw	r2,180(sp)
  804a14:	982dd7fa 	srai	r22,r19,31
  804a18:	b005883a 	mov	r2,r22
  804a1c:	003c8206 	br	803c28 <__alt_mem_onchip_mem+0xff7fbc28>
  804a20:	9080040c 	andi	r2,r18,16
  804a24:	10003526 	beq	r2,zero,804afc <___vfprintf_internal_r+0x13fc>
  804a28:	d9402d17 	ldw	r5,180(sp)
  804a2c:	d8c02917 	ldw	r3,164(sp)
  804a30:	d8002785 	stb	zero,158(sp)
  804a34:	28800104 	addi	r2,r5,4
  804a38:	2cc00017 	ldw	r19,0(r5)
  804a3c:	002d883a 	mov	r22,zero
  804a40:	18003716 	blt	r3,zero,804b20 <___vfprintf_internal_r+0x1420>
  804a44:	00ffdfc4 	movi	r3,-129
  804a48:	d8802d15 	stw	r2,180(sp)
  804a4c:	90e4703a 	and	r18,r18,r3
  804a50:	0039883a 	mov	fp,zero
  804a54:	983df326 	beq	r19,zero,804224 <__alt_mem_onchip_mem+0xff7fc224>
  804a58:	00800244 	movi	r2,9
  804a5c:	14fc7b36 	bltu	r2,r19,803c4c <__alt_mem_onchip_mem+0xff7fbc4c>
  804a60:	d8c02817 	ldw	r3,160(sp)
  804a64:	dc001dc4 	addi	r16,sp,119
  804a68:	9cc00c04 	addi	r19,r19,48
  804a6c:	1c07c83a 	sub	r3,r3,r16
  804a70:	dcc01dc5 	stb	r19,119(sp)
  804a74:	d8c02e15 	stw	r3,184(sp)
  804a78:	003ce806 	br	803e1c <__alt_mem_onchip_mem+0xff7fbe1c>
  804a7c:	d8803317 	ldw	r2,204(sp)
  804a80:	143fffc4 	addi	r16,r2,-1
  804a84:	043f4d0e 	bge	zero,r16,8047bc <__alt_mem_onchip_mem+0xff7fc7bc>
  804a88:	07000404 	movi	fp,16
  804a8c:	e400810e 	bge	fp,r16,804c94 <___vfprintf_internal_r+0x1594>
  804a90:	01402074 	movhi	r5,129
  804a94:	294bfe84 	addi	r5,r5,12282
  804a98:	d9402b15 	stw	r5,172(sp)
  804a9c:	01c001c4 	movi	r7,7
  804aa0:	dcc02c17 	ldw	r19,176(sp)
  804aa4:	00000306 	br	804ab4 <___vfprintf_internal_r+0x13b4>
  804aa8:	b5800204 	addi	r22,r22,8
  804aac:	843ffc04 	addi	r16,r16,-16
  804ab0:	e4007b0e 	bge	fp,r16,804ca0 <___vfprintf_internal_r+0x15a0>
  804ab4:	18c00404 	addi	r3,r3,16
  804ab8:	8c400044 	addi	r17,r17,1
  804abc:	b5000015 	stw	r20,0(r22)
  804ac0:	b7000115 	stw	fp,4(r22)
  804ac4:	d8c02015 	stw	r3,128(sp)
  804ac8:	dc401f15 	stw	r17,124(sp)
  804acc:	3c7ff60e 	bge	r7,r17,804aa8 <__alt_mem_onchip_mem+0xff7fcaa8>
  804ad0:	d9801e04 	addi	r6,sp,120
  804ad4:	b80b883a 	mov	r5,r23
  804ad8:	9809883a 	mov	r4,r19
  804adc:	d9c03c15 	stw	r7,240(sp)
  804ae0:	080a0bc0 	call	80a0bc <__sprint_r>
  804ae4:	d9c03c17 	ldw	r7,240(sp)
  804ae8:	103c071e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  804aec:	d8c02017 	ldw	r3,128(sp)
  804af0:	dc401f17 	ldw	r17,124(sp)
  804af4:	dd800404 	addi	r22,sp,16
  804af8:	003fec06 	br	804aac <__alt_mem_onchip_mem+0xff7fcaac>
  804afc:	9080100c 	andi	r2,r18,64
  804b00:	d8002785 	stb	zero,158(sp)
  804b04:	10010e26 	beq	r2,zero,804f40 <___vfprintf_internal_r+0x1840>
  804b08:	d9002d17 	ldw	r4,180(sp)
  804b0c:	d9402917 	ldw	r5,164(sp)
  804b10:	002d883a 	mov	r22,zero
  804b14:	20800104 	addi	r2,r4,4
  804b18:	24c0000b 	ldhu	r19,0(r4)
  804b1c:	283fc90e 	bge	r5,zero,804a44 <__alt_mem_onchip_mem+0xff7fca44>
  804b20:	d8802d15 	stw	r2,180(sp)
  804b24:	0039883a 	mov	fp,zero
  804b28:	9d84b03a 	or	r2,r19,r22
  804b2c:	103c461e 	bne	r2,zero,803c48 <__alt_mem_onchip_mem+0xff7fbc48>
  804b30:	00800044 	movi	r2,1
  804b34:	003e6c06 	br	8044e8 <__alt_mem_onchip_mem+0xff7fc4e8>
  804b38:	d9002c17 	ldw	r4,176(sp)
  804b3c:	d9801e04 	addi	r6,sp,120
  804b40:	b80b883a 	mov	r5,r23
  804b44:	080a0bc0 	call	80a0bc <__sprint_r>
  804b48:	103bef1e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  804b4c:	d8c02017 	ldw	r3,128(sp)
  804b50:	da000404 	addi	r8,sp,16
  804b54:	d9003217 	ldw	r4,200(sp)
  804b58:	d8802617 	ldw	r2,152(sp)
  804b5c:	d9403317 	ldw	r5,204(sp)
  804b60:	8123883a 	add	r17,r16,r4
  804b64:	11400216 	blt	r2,r5,804b70 <___vfprintf_internal_r+0x1470>
  804b68:	9100004c 	andi	r4,r18,1
  804b6c:	20000d26 	beq	r4,zero,804ba4 <___vfprintf_internal_r+0x14a4>
  804b70:	d9003717 	ldw	r4,220(sp)
  804b74:	d9403417 	ldw	r5,208(sp)
  804b78:	1907883a 	add	r3,r3,r4
  804b7c:	d9001f17 	ldw	r4,124(sp)
  804b80:	41400015 	stw	r5,0(r8)
  804b84:	d9403717 	ldw	r5,220(sp)
  804b88:	21000044 	addi	r4,r4,1
  804b8c:	d8c02015 	stw	r3,128(sp)
  804b90:	41400115 	stw	r5,4(r8)
  804b94:	d9001f15 	stw	r4,124(sp)
  804b98:	014001c4 	movi	r5,7
  804b9c:	2901e816 	blt	r5,r4,805340 <___vfprintf_internal_r+0x1c40>
  804ba0:	42000204 	addi	r8,r8,8
  804ba4:	d9003317 	ldw	r4,204(sp)
  804ba8:	8121883a 	add	r16,r16,r4
  804bac:	2085c83a 	sub	r2,r4,r2
  804bb0:	8461c83a 	sub	r16,r16,r17
  804bb4:	1400010e 	bge	r2,r16,804bbc <___vfprintf_internal_r+0x14bc>
  804bb8:	1021883a 	mov	r16,r2
  804bbc:	04000a0e 	bge	zero,r16,804be8 <___vfprintf_internal_r+0x14e8>
  804bc0:	d9001f17 	ldw	r4,124(sp)
  804bc4:	1c07883a 	add	r3,r3,r16
  804bc8:	44400015 	stw	r17,0(r8)
  804bcc:	21000044 	addi	r4,r4,1
  804bd0:	44000115 	stw	r16,4(r8)
  804bd4:	d8c02015 	stw	r3,128(sp)
  804bd8:	d9001f15 	stw	r4,124(sp)
  804bdc:	014001c4 	movi	r5,7
  804be0:	2901fb16 	blt	r5,r4,8053d0 <___vfprintf_internal_r+0x1cd0>
  804be4:	42000204 	addi	r8,r8,8
  804be8:	8001f716 	blt	r16,zero,8053c8 <___vfprintf_internal_r+0x1cc8>
  804bec:	1421c83a 	sub	r16,r2,r16
  804bf0:	043d380e 	bge	zero,r16,8040d4 <__alt_mem_onchip_mem+0xff7fc0d4>
  804bf4:	04400404 	movi	r17,16
  804bf8:	d8801f17 	ldw	r2,124(sp)
  804bfc:	8c3efb0e 	bge	r17,r16,8047ec <__alt_mem_onchip_mem+0xff7fc7ec>
  804c00:	01402074 	movhi	r5,129
  804c04:	294bfe84 	addi	r5,r5,12282
  804c08:	d9402b15 	stw	r5,172(sp)
  804c0c:	058001c4 	movi	r22,7
  804c10:	dcc02c17 	ldw	r19,176(sp)
  804c14:	00000306 	br	804c24 <___vfprintf_internal_r+0x1524>
  804c18:	42000204 	addi	r8,r8,8
  804c1c:	843ffc04 	addi	r16,r16,-16
  804c20:	8c3ef50e 	bge	r17,r16,8047f8 <__alt_mem_onchip_mem+0xff7fc7f8>
  804c24:	18c00404 	addi	r3,r3,16
  804c28:	10800044 	addi	r2,r2,1
  804c2c:	45000015 	stw	r20,0(r8)
  804c30:	44400115 	stw	r17,4(r8)
  804c34:	d8c02015 	stw	r3,128(sp)
  804c38:	d8801f15 	stw	r2,124(sp)
  804c3c:	b0bff60e 	bge	r22,r2,804c18 <__alt_mem_onchip_mem+0xff7fcc18>
  804c40:	d9801e04 	addi	r6,sp,120
  804c44:	b80b883a 	mov	r5,r23
  804c48:	9809883a 	mov	r4,r19
  804c4c:	080a0bc0 	call	80a0bc <__sprint_r>
  804c50:	103bad1e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  804c54:	d8c02017 	ldw	r3,128(sp)
  804c58:	d8801f17 	ldw	r2,124(sp)
  804c5c:	da000404 	addi	r8,sp,16
  804c60:	003fee06 	br	804c1c <__alt_mem_onchip_mem+0xff7fcc1c>
  804c64:	9088703a 	and	r4,r18,r2
  804c68:	203eab1e 	bne	r4,zero,804718 <__alt_mem_onchip_mem+0xff7fc718>
  804c6c:	dc401f17 	ldw	r17,124(sp)
  804c70:	40800115 	stw	r2,4(r8)
  804c74:	44000015 	stw	r16,0(r8)
  804c78:	8c400044 	addi	r17,r17,1
  804c7c:	d8c02015 	stw	r3,128(sp)
  804c80:	dc401f15 	stw	r17,124(sp)
  804c84:	008001c4 	movi	r2,7
  804c88:	14400e16 	blt	r2,r17,804cc4 <___vfprintf_internal_r+0x15c4>
  804c8c:	45800204 	addi	r22,r8,8
  804c90:	003eca06 	br	8047bc <__alt_mem_onchip_mem+0xff7fc7bc>
  804c94:	01002074 	movhi	r4,129
  804c98:	210bfe84 	addi	r4,r4,12282
  804c9c:	d9002b15 	stw	r4,172(sp)
  804ca0:	d8802b17 	ldw	r2,172(sp)
  804ca4:	1c07883a 	add	r3,r3,r16
  804ca8:	8c400044 	addi	r17,r17,1
  804cac:	b0800015 	stw	r2,0(r22)
  804cb0:	b4000115 	stw	r16,4(r22)
  804cb4:	d8c02015 	stw	r3,128(sp)
  804cb8:	dc401f15 	stw	r17,124(sp)
  804cbc:	008001c4 	movi	r2,7
  804cc0:	147ebd0e 	bge	r2,r17,8047b8 <__alt_mem_onchip_mem+0xff7fc7b8>
  804cc4:	d9002c17 	ldw	r4,176(sp)
  804cc8:	d9801e04 	addi	r6,sp,120
  804ccc:	b80b883a 	mov	r5,r23
  804cd0:	080a0bc0 	call	80a0bc <__sprint_r>
  804cd4:	103b8c1e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  804cd8:	d8c02017 	ldw	r3,128(sp)
  804cdc:	dc401f17 	ldw	r17,124(sp)
  804ce0:	dd800404 	addi	r22,sp,16
  804ce4:	003eb506 	br	8047bc <__alt_mem_onchip_mem+0xff7fc7bc>
  804ce8:	d9002c17 	ldw	r4,176(sp)
  804cec:	d9801e04 	addi	r6,sp,120
  804cf0:	b80b883a 	mov	r5,r23
  804cf4:	080a0bc0 	call	80a0bc <__sprint_r>
  804cf8:	103b831e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  804cfc:	d8c02017 	ldw	r3,128(sp)
  804d00:	dc401f17 	ldw	r17,124(sp)
  804d04:	da000404 	addi	r8,sp,16
  804d08:	003e8d06 	br	804740 <__alt_mem_onchip_mem+0xff7fc740>
  804d0c:	d9002c17 	ldw	r4,176(sp)
  804d10:	d9801e04 	addi	r6,sp,120
  804d14:	b80b883a 	mov	r5,r23
  804d18:	080a0bc0 	call	80a0bc <__sprint_r>
  804d1c:	103b7a1e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  804d20:	d8c02017 	ldw	r3,128(sp)
  804d24:	dc401f17 	ldw	r17,124(sp)
  804d28:	dd800404 	addi	r22,sp,16
  804d2c:	003e8f06 	br	80476c <__alt_mem_onchip_mem+0xff7fc76c>
  804d30:	0027883a 	mov	r19,zero
  804d34:	003f4a06 	br	804a60 <__alt_mem_onchip_mem+0xff7fca60>
  804d38:	d9002c17 	ldw	r4,176(sp)
  804d3c:	d9801e04 	addi	r6,sp,120
  804d40:	b80b883a 	mov	r5,r23
  804d44:	080a0bc0 	call	80a0bc <__sprint_r>
  804d48:	103b6f1e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  804d4c:	d8c02017 	ldw	r3,128(sp)
  804d50:	da000404 	addi	r8,sp,16
  804d54:	003c9d06 	br	803fcc <__alt_mem_onchip_mem+0xff7fbfcc>
  804d58:	04e7c83a 	sub	r19,zero,r19
  804d5c:	9804c03a 	cmpne	r2,r19,zero
  804d60:	05adc83a 	sub	r22,zero,r22
  804d64:	b0adc83a 	sub	r22,r22,r2
  804d68:	d8802917 	ldw	r2,164(sp)
  804d6c:	07000b44 	movi	fp,45
  804d70:	df002785 	stb	fp,158(sp)
  804d74:	10017b16 	blt	r2,zero,805364 <___vfprintf_internal_r+0x1c64>
  804d78:	00bfdfc4 	movi	r2,-129
  804d7c:	90a4703a 	and	r18,r18,r2
  804d80:	003bb106 	br	803c48 <__alt_mem_onchip_mem+0xff7fbc48>
  804d84:	d9003617 	ldw	r4,216(sp)
  804d88:	d9403817 	ldw	r5,224(sp)
  804d8c:	da003d15 	stw	r8,244(sp)
  804d90:	0809dd80 	call	809dd8 <__fpclassifyd>
  804d94:	da003d17 	ldw	r8,244(sp)
  804d98:	1000f026 	beq	r2,zero,80515c <___vfprintf_internal_r+0x1a5c>
  804d9c:	d9002917 	ldw	r4,164(sp)
  804da0:	05bff7c4 	movi	r22,-33
  804da4:	00bfffc4 	movi	r2,-1
  804da8:	8dac703a 	and	r22,r17,r22
  804dac:	20820026 	beq	r4,r2,8055b0 <___vfprintf_internal_r+0x1eb0>
  804db0:	008011c4 	movi	r2,71
  804db4:	b081f726 	beq	r22,r2,805594 <___vfprintf_internal_r+0x1e94>
  804db8:	d9003817 	ldw	r4,224(sp)
  804dbc:	90c04014 	ori	r3,r18,256
  804dc0:	d8c02b15 	stw	r3,172(sp)
  804dc4:	20021516 	blt	r4,zero,80561c <___vfprintf_internal_r+0x1f1c>
  804dc8:	dcc03817 	ldw	r19,224(sp)
  804dcc:	d8002a05 	stb	zero,168(sp)
  804dd0:	00801984 	movi	r2,102
  804dd4:	8881f926 	beq	r17,r2,8055bc <___vfprintf_internal_r+0x1ebc>
  804dd8:	00801184 	movi	r2,70
  804ddc:	88821c26 	beq	r17,r2,805650 <___vfprintf_internal_r+0x1f50>
  804de0:	00801144 	movi	r2,69
  804de4:	b081ef26 	beq	r22,r2,8055a4 <___vfprintf_internal_r+0x1ea4>
  804de8:	d8c02917 	ldw	r3,164(sp)
  804dec:	d8802104 	addi	r2,sp,132
  804df0:	d8800315 	stw	r2,12(sp)
  804df4:	d9403617 	ldw	r5,216(sp)
  804df8:	d8802504 	addi	r2,sp,148
  804dfc:	d9002c17 	ldw	r4,176(sp)
  804e00:	d8800215 	stw	r2,8(sp)
  804e04:	d8802604 	addi	r2,sp,152
  804e08:	d8c00015 	stw	r3,0(sp)
  804e0c:	d8800115 	stw	r2,4(sp)
  804e10:	01c00084 	movi	r7,2
  804e14:	980d883a 	mov	r6,r19
  804e18:	d8c03c15 	stw	r3,240(sp)
  804e1c:	da003d15 	stw	r8,244(sp)
  804e20:	0805f300 	call	805f30 <_dtoa_r>
  804e24:	1021883a 	mov	r16,r2
  804e28:	008019c4 	movi	r2,103
  804e2c:	d8c03c17 	ldw	r3,240(sp)
  804e30:	da003d17 	ldw	r8,244(sp)
  804e34:	88817126 	beq	r17,r2,8053fc <___vfprintf_internal_r+0x1cfc>
  804e38:	008011c4 	movi	r2,71
  804e3c:	88829226 	beq	r17,r2,805888 <___vfprintf_internal_r+0x2188>
  804e40:	80f9883a 	add	fp,r16,r3
  804e44:	d9003617 	ldw	r4,216(sp)
  804e48:	000d883a 	mov	r6,zero
  804e4c:	000f883a 	mov	r7,zero
  804e50:	980b883a 	mov	r5,r19
  804e54:	da003d15 	stw	r8,244(sp)
  804e58:	080d7000 	call	80d700 <__eqdf2>
  804e5c:	da003d17 	ldw	r8,244(sp)
  804e60:	10018d26 	beq	r2,zero,805498 <___vfprintf_internal_r+0x1d98>
  804e64:	d8802117 	ldw	r2,132(sp)
  804e68:	1700062e 	bgeu	r2,fp,804e84 <___vfprintf_internal_r+0x1784>
  804e6c:	01000c04 	movi	r4,48
  804e70:	10c00044 	addi	r3,r2,1
  804e74:	d8c02115 	stw	r3,132(sp)
  804e78:	11000005 	stb	r4,0(r2)
  804e7c:	d8802117 	ldw	r2,132(sp)
  804e80:	173ffb36 	bltu	r2,fp,804e70 <__alt_mem_onchip_mem+0xff7fce70>
  804e84:	1405c83a 	sub	r2,r2,r16
  804e88:	d8803315 	stw	r2,204(sp)
  804e8c:	008011c4 	movi	r2,71
  804e90:	b0817626 	beq	r22,r2,80546c <___vfprintf_internal_r+0x1d6c>
  804e94:	00801944 	movi	r2,101
  804e98:	1442810e 	bge	r2,r17,8058a0 <___vfprintf_internal_r+0x21a0>
  804e9c:	d8c02617 	ldw	r3,152(sp)
  804ea0:	00801984 	movi	r2,102
  804ea4:	d8c03215 	stw	r3,200(sp)
  804ea8:	8881fe26 	beq	r17,r2,8056a4 <___vfprintf_internal_r+0x1fa4>
  804eac:	d8c03217 	ldw	r3,200(sp)
  804eb0:	d9003317 	ldw	r4,204(sp)
  804eb4:	1901dd16 	blt	r3,r4,80562c <___vfprintf_internal_r+0x1f2c>
  804eb8:	9480004c 	andi	r18,r18,1
  804ebc:	90022b1e 	bne	r18,zero,80576c <___vfprintf_internal_r+0x206c>
  804ec0:	1805883a 	mov	r2,r3
  804ec4:	18028016 	blt	r3,zero,8058c8 <___vfprintf_internal_r+0x21c8>
  804ec8:	d8c03217 	ldw	r3,200(sp)
  804ecc:	044019c4 	movi	r17,103
  804ed0:	d8c02e15 	stw	r3,184(sp)
  804ed4:	df002a07 	ldb	fp,168(sp)
  804ed8:	e001531e 	bne	fp,zero,805428 <___vfprintf_internal_r+0x1d28>
  804edc:	df002783 	ldbu	fp,158(sp)
  804ee0:	d8802a15 	stw	r2,168(sp)
  804ee4:	dc802b17 	ldw	r18,172(sp)
  804ee8:	d8002915 	stw	zero,164(sp)
  804eec:	003bd106 	br	803e34 <__alt_mem_onchip_mem+0xff7fbe34>
  804ef0:	d8802d17 	ldw	r2,180(sp)
  804ef4:	d8c02d17 	ldw	r3,180(sp)
  804ef8:	d9002d17 	ldw	r4,180(sp)
  804efc:	10800017 	ldw	r2,0(r2)
  804f00:	18c00117 	ldw	r3,4(r3)
  804f04:	21000204 	addi	r4,r4,8
  804f08:	d8803615 	stw	r2,216(sp)
  804f0c:	d8c03815 	stw	r3,224(sp)
  804f10:	d9002d15 	stw	r4,180(sp)
  804f14:	003b7506 	br	803cec <__alt_mem_onchip_mem+0xff7fbcec>
  804f18:	ac400007 	ldb	r17,0(r21)
  804f1c:	003a5906 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  804f20:	9080100c 	andi	r2,r18,64
  804f24:	1000a826 	beq	r2,zero,8051c8 <___vfprintf_internal_r+0x1ac8>
  804f28:	d9002d17 	ldw	r4,180(sp)
  804f2c:	002d883a 	mov	r22,zero
  804f30:	24c0000b 	ldhu	r19,0(r4)
  804f34:	21000104 	addi	r4,r4,4
  804f38:	d9002d15 	stw	r4,180(sp)
  804f3c:	003ccb06 	br	80426c <__alt_mem_onchip_mem+0xff7fc26c>
  804f40:	d8c02d17 	ldw	r3,180(sp)
  804f44:	d9002917 	ldw	r4,164(sp)
  804f48:	002d883a 	mov	r22,zero
  804f4c:	18800104 	addi	r2,r3,4
  804f50:	1cc00017 	ldw	r19,0(r3)
  804f54:	203ebb0e 	bge	r4,zero,804a44 <__alt_mem_onchip_mem+0xff7fca44>
  804f58:	003ef106 	br	804b20 <__alt_mem_onchip_mem+0xff7fcb20>
  804f5c:	9080040c 	andi	r2,r18,16
  804f60:	1000921e 	bne	r2,zero,8051ac <___vfprintf_internal_r+0x1aac>
  804f64:	9480100c 	andi	r18,r18,64
  804f68:	90013926 	beq	r18,zero,805450 <___vfprintf_internal_r+0x1d50>
  804f6c:	d9002d17 	ldw	r4,180(sp)
  804f70:	d9402f17 	ldw	r5,188(sp)
  804f74:	20800017 	ldw	r2,0(r4)
  804f78:	21000104 	addi	r4,r4,4
  804f7c:	d9002d15 	stw	r4,180(sp)
  804f80:	1140000d 	sth	r5,0(r2)
  804f84:	003a1606 	br	8037e0 <__alt_mem_onchip_mem+0xff7fb7e0>
  804f88:	9080100c 	andi	r2,r18,64
  804f8c:	10008026 	beq	r2,zero,805190 <___vfprintf_internal_r+0x1a90>
  804f90:	d8c02d17 	ldw	r3,180(sp)
  804f94:	1cc0000f 	ldh	r19,0(r3)
  804f98:	18c00104 	addi	r3,r3,4
  804f9c:	d8c02d15 	stw	r3,180(sp)
  804fa0:	982dd7fa 	srai	r22,r19,31
  804fa4:	b005883a 	mov	r2,r22
  804fa8:	003b1f06 	br	803c28 <__alt_mem_onchip_mem+0xff7fbc28>
  804fac:	9080100c 	andi	r2,r18,64
  804fb0:	d8002785 	stb	zero,158(sp)
  804fb4:	10008a1e 	bne	r2,zero,8051e0 <___vfprintf_internal_r+0x1ae0>
  804fb8:	d9402d17 	ldw	r5,180(sp)
  804fbc:	d8c02917 	ldw	r3,164(sp)
  804fc0:	002d883a 	mov	r22,zero
  804fc4:	28800104 	addi	r2,r5,4
  804fc8:	2cc00017 	ldw	r19,0(r5)
  804fcc:	183e4b0e 	bge	r3,zero,8048fc <__alt_mem_onchip_mem+0xff7fc8fc>
  804fd0:	9d86b03a 	or	r3,r19,r22
  804fd4:	d8802d15 	stw	r2,180(sp)
  804fd8:	183e4c1e 	bne	r3,zero,80490c <__alt_mem_onchip_mem+0xff7fc90c>
  804fdc:	0039883a 	mov	fp,zero
  804fe0:	0005883a 	mov	r2,zero
  804fe4:	003d4006 	br	8044e8 <__alt_mem_onchip_mem+0xff7fc4e8>
  804fe8:	01402074 	movhi	r5,129
  804fec:	294bfe84 	addi	r5,r5,12282
  804ff0:	d9402b15 	stw	r5,172(sp)
  804ff4:	d9402b17 	ldw	r5,172(sp)
  804ff8:	1c47883a 	add	r3,r3,r17
  804ffc:	10800044 	addi	r2,r2,1
  805000:	41400015 	stw	r5,0(r8)
  805004:	44400115 	stw	r17,4(r8)
  805008:	d8c02015 	stw	r3,128(sp)
  80500c:	d8801f15 	stw	r2,124(sp)
  805010:	010001c4 	movi	r4,7
  805014:	20bec816 	blt	r4,r2,804b38 <__alt_mem_onchip_mem+0xff7fcb38>
  805018:	42000204 	addi	r8,r8,8
  80501c:	003ecd06 	br	804b54 <__alt_mem_onchip_mem+0xff7fcb54>
  805020:	d9002917 	ldw	r4,164(sp)
  805024:	d8002785 	stb	zero,158(sp)
  805028:	203d2d16 	blt	r4,zero,8044e0 <__alt_mem_onchip_mem+0xff7fc4e0>
  80502c:	00bfdfc4 	movi	r2,-129
  805030:	90a4703a 	and	r18,r18,r2
  805034:	003a9106 	br	803a7c <__alt_mem_onchip_mem+0xff7fba7c>
  805038:	01002074 	movhi	r4,129
  80503c:	210bfe84 	addi	r4,r4,12282
  805040:	d9002b15 	stw	r4,172(sp)
  805044:	003c0c06 	br	804078 <__alt_mem_onchip_mem+0xff7fc078>
  805048:	d9002c17 	ldw	r4,176(sp)
  80504c:	d9801e04 	addi	r6,sp,120
  805050:	b80b883a 	mov	r5,r23
  805054:	080a0bc0 	call	80a0bc <__sprint_r>
  805058:	103aab1e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  80505c:	d8c02017 	ldw	r3,128(sp)
  805060:	da000404 	addi	r8,sp,16
  805064:	003d4106 	br	80456c <__alt_mem_onchip_mem+0xff7fc56c>
  805068:	d8801f17 	ldw	r2,124(sp)
  80506c:	01402074 	movhi	r5,129
  805070:	01000044 	movi	r4,1
  805074:	18c00044 	addi	r3,r3,1
  805078:	10800044 	addi	r2,r2,1
  80507c:	294bfe04 	addi	r5,r5,12280
  805080:	41000115 	stw	r4,4(r8)
  805084:	41400015 	stw	r5,0(r8)
  805088:	d8c02015 	stw	r3,128(sp)
  80508c:	d8801f15 	stw	r2,124(sp)
  805090:	010001c4 	movi	r4,7
  805094:	20805c16 	blt	r4,r2,805208 <___vfprintf_internal_r+0x1b08>
  805098:	42000204 	addi	r8,r8,8
  80509c:	8800041e 	bne	r17,zero,8050b0 <___vfprintf_internal_r+0x19b0>
  8050a0:	d8803317 	ldw	r2,204(sp)
  8050a4:	1000021e 	bne	r2,zero,8050b0 <___vfprintf_internal_r+0x19b0>
  8050a8:	9080004c 	andi	r2,r18,1
  8050ac:	103c0926 	beq	r2,zero,8040d4 <__alt_mem_onchip_mem+0xff7fc0d4>
  8050b0:	d9003717 	ldw	r4,220(sp)
  8050b4:	d8801f17 	ldw	r2,124(sp)
  8050b8:	d9403417 	ldw	r5,208(sp)
  8050bc:	20c7883a 	add	r3,r4,r3
  8050c0:	10800044 	addi	r2,r2,1
  8050c4:	41000115 	stw	r4,4(r8)
  8050c8:	41400015 	stw	r5,0(r8)
  8050cc:	d8c02015 	stw	r3,128(sp)
  8050d0:	d8801f15 	stw	r2,124(sp)
  8050d4:	010001c4 	movi	r4,7
  8050d8:	20812116 	blt	r4,r2,805560 <___vfprintf_internal_r+0x1e60>
  8050dc:	42000204 	addi	r8,r8,8
  8050e0:	0463c83a 	sub	r17,zero,r17
  8050e4:	0440730e 	bge	zero,r17,8052b4 <___vfprintf_internal_r+0x1bb4>
  8050e8:	05800404 	movi	r22,16
  8050ec:	b440860e 	bge	r22,r17,805308 <___vfprintf_internal_r+0x1c08>
  8050f0:	01402074 	movhi	r5,129
  8050f4:	294bfe84 	addi	r5,r5,12282
  8050f8:	d9402b15 	stw	r5,172(sp)
  8050fc:	070001c4 	movi	fp,7
  805100:	dcc02c17 	ldw	r19,176(sp)
  805104:	00000306 	br	805114 <___vfprintf_internal_r+0x1a14>
  805108:	42000204 	addi	r8,r8,8
  80510c:	8c7ffc04 	addi	r17,r17,-16
  805110:	b440800e 	bge	r22,r17,805314 <___vfprintf_internal_r+0x1c14>
  805114:	18c00404 	addi	r3,r3,16
  805118:	10800044 	addi	r2,r2,1
  80511c:	45000015 	stw	r20,0(r8)
  805120:	45800115 	stw	r22,4(r8)
  805124:	d8c02015 	stw	r3,128(sp)
  805128:	d8801f15 	stw	r2,124(sp)
  80512c:	e0bff60e 	bge	fp,r2,805108 <__alt_mem_onchip_mem+0xff7fd108>
  805130:	d9801e04 	addi	r6,sp,120
  805134:	b80b883a 	mov	r5,r23
  805138:	9809883a 	mov	r4,r19
  80513c:	080a0bc0 	call	80a0bc <__sprint_r>
  805140:	103a711e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  805144:	d8c02017 	ldw	r3,128(sp)
  805148:	d8801f17 	ldw	r2,124(sp)
  80514c:	da000404 	addi	r8,sp,16
  805150:	003fee06 	br	80510c <__alt_mem_onchip_mem+0xff7fd10c>
  805154:	00bfffc4 	movi	r2,-1
  805158:	003a6f06 	br	803b18 <__alt_mem_onchip_mem+0xff7fbb18>
  80515c:	008011c4 	movi	r2,71
  805160:	1440b816 	blt	r2,r17,805444 <___vfprintf_internal_r+0x1d44>
  805164:	04002074 	movhi	r16,129
  805168:	840bf004 	addi	r16,r16,12224
  80516c:	00c000c4 	movi	r3,3
  805170:	00bfdfc4 	movi	r2,-129
  805174:	d8c02a15 	stw	r3,168(sp)
  805178:	90a4703a 	and	r18,r18,r2
  80517c:	df002783 	ldbu	fp,158(sp)
  805180:	d8c02e15 	stw	r3,184(sp)
  805184:	d8002915 	stw	zero,164(sp)
  805188:	d8003215 	stw	zero,200(sp)
  80518c:	003b2906 	br	803e34 <__alt_mem_onchip_mem+0xff7fbe34>
  805190:	d9002d17 	ldw	r4,180(sp)
  805194:	24c00017 	ldw	r19,0(r4)
  805198:	21000104 	addi	r4,r4,4
  80519c:	d9002d15 	stw	r4,180(sp)
  8051a0:	982dd7fa 	srai	r22,r19,31
  8051a4:	b005883a 	mov	r2,r22
  8051a8:	003a9f06 	br	803c28 <__alt_mem_onchip_mem+0xff7fbc28>
  8051ac:	d9402d17 	ldw	r5,180(sp)
  8051b0:	d8c02f17 	ldw	r3,188(sp)
  8051b4:	28800017 	ldw	r2,0(r5)
  8051b8:	29400104 	addi	r5,r5,4
  8051bc:	d9402d15 	stw	r5,180(sp)
  8051c0:	10c00015 	stw	r3,0(r2)
  8051c4:	00398606 	br	8037e0 <__alt_mem_onchip_mem+0xff7fb7e0>
  8051c8:	d9402d17 	ldw	r5,180(sp)
  8051cc:	002d883a 	mov	r22,zero
  8051d0:	2cc00017 	ldw	r19,0(r5)
  8051d4:	29400104 	addi	r5,r5,4
  8051d8:	d9402d15 	stw	r5,180(sp)
  8051dc:	003c2306 	br	80426c <__alt_mem_onchip_mem+0xff7fc26c>
  8051e0:	d8c02d17 	ldw	r3,180(sp)
  8051e4:	d9002917 	ldw	r4,164(sp)
  8051e8:	002d883a 	mov	r22,zero
  8051ec:	18800104 	addi	r2,r3,4
  8051f0:	1cc0000b 	ldhu	r19,0(r3)
  8051f4:	203dc10e 	bge	r4,zero,8048fc <__alt_mem_onchip_mem+0xff7fc8fc>
  8051f8:	003f7506 	br	804fd0 <__alt_mem_onchip_mem+0xff7fcfd0>
  8051fc:	04002074 	movhi	r16,129
  805200:	840bee04 	addi	r16,r16,12216
  805204:	003acc06 	br	803d38 <__alt_mem_onchip_mem+0xff7fbd38>
  805208:	d9002c17 	ldw	r4,176(sp)
  80520c:	d9801e04 	addi	r6,sp,120
  805210:	b80b883a 	mov	r5,r23
  805214:	080a0bc0 	call	80a0bc <__sprint_r>
  805218:	103a3b1e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  80521c:	dc402617 	ldw	r17,152(sp)
  805220:	d8c02017 	ldw	r3,128(sp)
  805224:	da000404 	addi	r8,sp,16
  805228:	003f9c06 	br	80509c <__alt_mem_onchip_mem+0xff7fd09c>
  80522c:	ac400043 	ldbu	r17,1(r21)
  805230:	94800814 	ori	r18,r18,32
  805234:	ad400044 	addi	r21,r21,1
  805238:	8c403fcc 	andi	r17,r17,255
  80523c:	8c40201c 	xori	r17,r17,128
  805240:	8c7fe004 	addi	r17,r17,-128
  805244:	00398f06 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  805248:	d8c02d15 	stw	r3,180(sp)
  80524c:	0039883a 	mov	fp,zero
  805250:	003e3506 	br	804b28 <__alt_mem_onchip_mem+0xff7fcb28>
  805254:	d9002c17 	ldw	r4,176(sp)
  805258:	d9801e04 	addi	r6,sp,120
  80525c:	b80b883a 	mov	r5,r23
  805260:	080a0bc0 	call	80a0bc <__sprint_r>
  805264:	103a281e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  805268:	d8c02017 	ldw	r3,128(sp)
  80526c:	da000404 	addi	r8,sp,16
  805270:	003cd006 	br	8045b4 <__alt_mem_onchip_mem+0xff7fc5b4>
  805274:	8009883a 	mov	r4,r16
  805278:	da003d15 	stw	r8,244(sp)
  80527c:	0809f280 	call	809f28 <strlen>
  805280:	d8802e15 	stw	r2,184(sp)
  805284:	da003d17 	ldw	r8,244(sp)
  805288:	103c340e 	bge	r2,zero,80435c <__alt_mem_onchip_mem+0xff7fc35c>
  80528c:	0005883a 	mov	r2,zero
  805290:	003c3206 	br	80435c <__alt_mem_onchip_mem+0xff7fc35c>
  805294:	d9002c17 	ldw	r4,176(sp)
  805298:	d9801e04 	addi	r6,sp,120
  80529c:	b80b883a 	mov	r5,r23
  8052a0:	080a0bc0 	call	80a0bc <__sprint_r>
  8052a4:	103a181e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  8052a8:	d8c02017 	ldw	r3,128(sp)
  8052ac:	d8801f17 	ldw	r2,124(sp)
  8052b0:	da000404 	addi	r8,sp,16
  8052b4:	d9403317 	ldw	r5,204(sp)
  8052b8:	10800044 	addi	r2,r2,1
  8052bc:	44000015 	stw	r16,0(r8)
  8052c0:	28c7883a 	add	r3,r5,r3
  8052c4:	003b7d06 	br	8040bc <__alt_mem_onchip_mem+0xff7fc0bc>
  8052c8:	01002074 	movhi	r4,129
  8052cc:	210c0284 	addi	r4,r4,12298
  8052d0:	d9003515 	stw	r4,212(sp)
  8052d4:	003b1406 	br	803f28 <__alt_mem_onchip_mem+0xff7fbf28>
  8052d8:	013fffc4 	movi	r4,-1
  8052dc:	003a3506 	br	803bb4 <__alt_mem_onchip_mem+0xff7fbbb4>
  8052e0:	0023883a 	mov	r17,zero
  8052e4:	003d9d06 	br	80495c <__alt_mem_onchip_mem+0xff7fc95c>
  8052e8:	d9002c17 	ldw	r4,176(sp)
  8052ec:	d9801e04 	addi	r6,sp,120
  8052f0:	b80b883a 	mov	r5,r23
  8052f4:	080a0bc0 	call	80a0bc <__sprint_r>
  8052f8:	103a031e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  8052fc:	d8c02017 	ldw	r3,128(sp)
  805300:	da000404 	addi	r8,sp,16
  805304:	003d9406 	br	804958 <__alt_mem_onchip_mem+0xff7fc958>
  805308:	01002074 	movhi	r4,129
  80530c:	210bfe84 	addi	r4,r4,12282
  805310:	d9002b15 	stw	r4,172(sp)
  805314:	d9002b17 	ldw	r4,172(sp)
  805318:	1c47883a 	add	r3,r3,r17
  80531c:	10800044 	addi	r2,r2,1
  805320:	41000015 	stw	r4,0(r8)
  805324:	44400115 	stw	r17,4(r8)
  805328:	d8c02015 	stw	r3,128(sp)
  80532c:	d8801f15 	stw	r2,124(sp)
  805330:	010001c4 	movi	r4,7
  805334:	20bfd716 	blt	r4,r2,805294 <__alt_mem_onchip_mem+0xff7fd294>
  805338:	42000204 	addi	r8,r8,8
  80533c:	003fdd06 	br	8052b4 <__alt_mem_onchip_mem+0xff7fd2b4>
  805340:	d9002c17 	ldw	r4,176(sp)
  805344:	d9801e04 	addi	r6,sp,120
  805348:	b80b883a 	mov	r5,r23
  80534c:	080a0bc0 	call	80a0bc <__sprint_r>
  805350:	1039ed1e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  805354:	d8802617 	ldw	r2,152(sp)
  805358:	d8c02017 	ldw	r3,128(sp)
  80535c:	da000404 	addi	r8,sp,16
  805360:	003e1006 	br	804ba4 <__alt_mem_onchip_mem+0xff7fcba4>
  805364:	00800044 	movi	r2,1
  805368:	10803fcc 	andi	r2,r2,255
  80536c:	00c00044 	movi	r3,1
  805370:	10fa3526 	beq	r2,r3,803c48 <__alt_mem_onchip_mem+0xff7fbc48>
  805374:	00c00084 	movi	r3,2
  805378:	10fbcb26 	beq	r2,r3,8042a8 <__alt_mem_onchip_mem+0xff7fc2a8>
  80537c:	003a8f06 	br	803dbc <__alt_mem_onchip_mem+0xff7fbdbc>
  805380:	01002074 	movhi	r4,129
  805384:	210c0284 	addi	r4,r4,12298
  805388:	d9003515 	stw	r4,212(sp)
  80538c:	003b7606 	br	804168 <__alt_mem_onchip_mem+0xff7fc168>
  805390:	d8802917 	ldw	r2,164(sp)
  805394:	00c00184 	movi	r3,6
  805398:	1880012e 	bgeu	r3,r2,8053a0 <___vfprintf_internal_r+0x1ca0>
  80539c:	1805883a 	mov	r2,r3
  8053a0:	d8802e15 	stw	r2,184(sp)
  8053a4:	1000ef16 	blt	r2,zero,805764 <___vfprintf_internal_r+0x2064>
  8053a8:	04002074 	movhi	r16,129
  8053ac:	d8802a15 	stw	r2,168(sp)
  8053b0:	dcc02d15 	stw	r19,180(sp)
  8053b4:	d8002915 	stw	zero,164(sp)
  8053b8:	d8003215 	stw	zero,200(sp)
  8053bc:	840bfc04 	addi	r16,r16,12272
  8053c0:	0039883a 	mov	fp,zero
  8053c4:	003aa206 	br	803e50 <__alt_mem_onchip_mem+0xff7fbe50>
  8053c8:	0021883a 	mov	r16,zero
  8053cc:	003e0706 	br	804bec <__alt_mem_onchip_mem+0xff7fcbec>
  8053d0:	d9002c17 	ldw	r4,176(sp)
  8053d4:	d9801e04 	addi	r6,sp,120
  8053d8:	b80b883a 	mov	r5,r23
  8053dc:	080a0bc0 	call	80a0bc <__sprint_r>
  8053e0:	1039c91e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  8053e4:	d8802617 	ldw	r2,152(sp)
  8053e8:	d9403317 	ldw	r5,204(sp)
  8053ec:	d8c02017 	ldw	r3,128(sp)
  8053f0:	da000404 	addi	r8,sp,16
  8053f4:	2885c83a 	sub	r2,r5,r2
  8053f8:	003dfb06 	br	804be8 <__alt_mem_onchip_mem+0xff7fcbe8>
  8053fc:	9080004c 	andi	r2,r18,1
  805400:	103e8f1e 	bne	r2,zero,804e40 <__alt_mem_onchip_mem+0xff7fce40>
  805404:	d8802117 	ldw	r2,132(sp)
  805408:	003e9e06 	br	804e84 <__alt_mem_onchip_mem+0xff7fce84>
  80540c:	1025883a 	mov	r18,r2
  805410:	0039883a 	mov	fp,zero
  805414:	00800084 	movi	r2,2
  805418:	003fd306 	br	805368 <__alt_mem_onchip_mem+0xff7fd368>
  80541c:	07000b44 	movi	fp,45
  805420:	df002785 	stb	fp,158(sp)
  805424:	003a4006 	br	803d28 <__alt_mem_onchip_mem+0xff7fbd28>
  805428:	00c00b44 	movi	r3,45
  80542c:	d8c02785 	stb	r3,158(sp)
  805430:	d8802a15 	stw	r2,168(sp)
  805434:	dc802b17 	ldw	r18,172(sp)
  805438:	d8002915 	stw	zero,164(sp)
  80543c:	07000b44 	movi	fp,45
  805440:	003a8006 	br	803e44 <__alt_mem_onchip_mem+0xff7fbe44>
  805444:	04002074 	movhi	r16,129
  805448:	840bf104 	addi	r16,r16,12228
  80544c:	003f4706 	br	80516c <__alt_mem_onchip_mem+0xff7fd16c>
  805450:	d8c02d17 	ldw	r3,180(sp)
  805454:	d9002f17 	ldw	r4,188(sp)
  805458:	18800017 	ldw	r2,0(r3)
  80545c:	18c00104 	addi	r3,r3,4
  805460:	d8c02d15 	stw	r3,180(sp)
  805464:	11000015 	stw	r4,0(r2)
  805468:	0038dd06 	br	8037e0 <__alt_mem_onchip_mem+0xff7fb7e0>
  80546c:	dd802617 	ldw	r22,152(sp)
  805470:	00bfff44 	movi	r2,-3
  805474:	b0801c16 	blt	r22,r2,8054e8 <___vfprintf_internal_r+0x1de8>
  805478:	d9402917 	ldw	r5,164(sp)
  80547c:	2d801a16 	blt	r5,r22,8054e8 <___vfprintf_internal_r+0x1de8>
  805480:	dd803215 	stw	r22,200(sp)
  805484:	003e8906 	br	804eac <__alt_mem_onchip_mem+0xff7fceac>
  805488:	01002074 	movhi	r4,129
  80548c:	210bfe84 	addi	r4,r4,12282
  805490:	d9002b15 	stw	r4,172(sp)
  805494:	003c9106 	br	8046dc <__alt_mem_onchip_mem+0xff7fc6dc>
  805498:	e005883a 	mov	r2,fp
  80549c:	003e7906 	br	804e84 <__alt_mem_onchip_mem+0xff7fce84>
  8054a0:	d9402917 	ldw	r5,164(sp)
  8054a4:	df002783 	ldbu	fp,158(sp)
  8054a8:	dcc02d15 	stw	r19,180(sp)
  8054ac:	d9402a15 	stw	r5,168(sp)
  8054b0:	d9402e15 	stw	r5,184(sp)
  8054b4:	d8002915 	stw	zero,164(sp)
  8054b8:	d8003215 	stw	zero,200(sp)
  8054bc:	003a5d06 	br	803e34 <__alt_mem_onchip_mem+0xff7fbe34>
  8054c0:	9080004c 	andi	r2,r18,1
  8054c4:	0039883a 	mov	fp,zero
  8054c8:	10000426 	beq	r2,zero,8054dc <___vfprintf_internal_r+0x1ddc>
  8054cc:	00800c04 	movi	r2,48
  8054d0:	dc001dc4 	addi	r16,sp,119
  8054d4:	d8801dc5 	stb	r2,119(sp)
  8054d8:	003b8006 	br	8042dc <__alt_mem_onchip_mem+0xff7fc2dc>
  8054dc:	d8002e15 	stw	zero,184(sp)
  8054e0:	dc001e04 	addi	r16,sp,120
  8054e4:	003a4d06 	br	803e1c <__alt_mem_onchip_mem+0xff7fbe1c>
  8054e8:	8c7fff84 	addi	r17,r17,-2
  8054ec:	b5bfffc4 	addi	r22,r22,-1
  8054f0:	dd802615 	stw	r22,152(sp)
  8054f4:	dc4022c5 	stb	r17,139(sp)
  8054f8:	b000bf16 	blt	r22,zero,8057f8 <___vfprintf_internal_r+0x20f8>
  8054fc:	00800ac4 	movi	r2,43
  805500:	d8802305 	stb	r2,140(sp)
  805504:	00800244 	movi	r2,9
  805508:	15807016 	blt	r2,r22,8056cc <___vfprintf_internal_r+0x1fcc>
  80550c:	00800c04 	movi	r2,48
  805510:	b5800c04 	addi	r22,r22,48
  805514:	d8802345 	stb	r2,141(sp)
  805518:	dd802385 	stb	r22,142(sp)
  80551c:	d88023c4 	addi	r2,sp,143
  805520:	df0022c4 	addi	fp,sp,139
  805524:	d8c03317 	ldw	r3,204(sp)
  805528:	1739c83a 	sub	fp,r2,fp
  80552c:	d9003317 	ldw	r4,204(sp)
  805530:	e0c7883a 	add	r3,fp,r3
  805534:	df003a15 	stw	fp,232(sp)
  805538:	d8c02e15 	stw	r3,184(sp)
  80553c:	00800044 	movi	r2,1
  805540:	1100b30e 	bge	r2,r4,805810 <___vfprintf_internal_r+0x2110>
  805544:	d8c02e17 	ldw	r3,184(sp)
  805548:	18c00044 	addi	r3,r3,1
  80554c:	d8c02e15 	stw	r3,184(sp)
  805550:	1805883a 	mov	r2,r3
  805554:	1800ac16 	blt	r3,zero,805808 <___vfprintf_internal_r+0x2108>
  805558:	d8003215 	stw	zero,200(sp)
  80555c:	003e5d06 	br	804ed4 <__alt_mem_onchip_mem+0xff7fced4>
  805560:	d9002c17 	ldw	r4,176(sp)
  805564:	d9801e04 	addi	r6,sp,120
  805568:	b80b883a 	mov	r5,r23
  80556c:	080a0bc0 	call	80a0bc <__sprint_r>
  805570:	1039651e 	bne	r2,zero,803b08 <__alt_mem_onchip_mem+0xff7fbb08>
  805574:	dc402617 	ldw	r17,152(sp)
  805578:	d8c02017 	ldw	r3,128(sp)
  80557c:	d8801f17 	ldw	r2,124(sp)
  805580:	da000404 	addi	r8,sp,16
  805584:	003ed606 	br	8050e0 <__alt_mem_onchip_mem+0xff7fd0e0>
  805588:	582b883a 	mov	r21,r11
  80558c:	d8002915 	stw	zero,164(sp)
  805590:	0038bd06 	br	803888 <__alt_mem_onchip_mem+0xff7fb888>
  805594:	d8802917 	ldw	r2,164(sp)
  805598:	103e071e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff7fcdb8>
  80559c:	dc002915 	stw	r16,164(sp)
  8055a0:	003e0506 	br	804db8 <__alt_mem_onchip_mem+0xff7fcdb8>
  8055a4:	d9002917 	ldw	r4,164(sp)
  8055a8:	20c00044 	addi	r3,r4,1
  8055ac:	003e0f06 	br	804dec <__alt_mem_onchip_mem+0xff7fcdec>
  8055b0:	01400184 	movi	r5,6
  8055b4:	d9402915 	stw	r5,164(sp)
  8055b8:	003dff06 	br	804db8 <__alt_mem_onchip_mem+0xff7fcdb8>
  8055bc:	d8802104 	addi	r2,sp,132
  8055c0:	d8800315 	stw	r2,12(sp)
  8055c4:	d8802504 	addi	r2,sp,148
  8055c8:	d8800215 	stw	r2,8(sp)
  8055cc:	d8802604 	addi	r2,sp,152
  8055d0:	d8800115 	stw	r2,4(sp)
  8055d4:	d8802917 	ldw	r2,164(sp)
  8055d8:	d9403617 	ldw	r5,216(sp)
  8055dc:	d9002c17 	ldw	r4,176(sp)
  8055e0:	d8800015 	stw	r2,0(sp)
  8055e4:	01c000c4 	movi	r7,3
  8055e8:	980d883a 	mov	r6,r19
  8055ec:	da003d15 	stw	r8,244(sp)
  8055f0:	0805f300 	call	805f30 <_dtoa_r>
  8055f4:	d8c02917 	ldw	r3,164(sp)
  8055f8:	da003d17 	ldw	r8,244(sp)
  8055fc:	1021883a 	mov	r16,r2
  805600:	10f9883a 	add	fp,r2,r3
  805604:	81000007 	ldb	r4,0(r16)
  805608:	00800c04 	movi	r2,48
  80560c:	20805e26 	beq	r4,r2,805788 <___vfprintf_internal_r+0x2088>
  805610:	d8c02617 	ldw	r3,152(sp)
  805614:	e0f9883a 	add	fp,fp,r3
  805618:	003e0a06 	br	804e44 <__alt_mem_onchip_mem+0xff7fce44>
  80561c:	00c00b44 	movi	r3,45
  805620:	24e0003c 	xorhi	r19,r4,32768
  805624:	d8c02a05 	stb	r3,168(sp)
  805628:	003de906 	br	804dd0 <__alt_mem_onchip_mem+0xff7fcdd0>
  80562c:	d8c03217 	ldw	r3,200(sp)
  805630:	00c07a0e 	bge	zero,r3,80581c <___vfprintf_internal_r+0x211c>
  805634:	00800044 	movi	r2,1
  805638:	d9003317 	ldw	r4,204(sp)
  80563c:	1105883a 	add	r2,r2,r4
  805640:	d8802e15 	stw	r2,184(sp)
  805644:	10004e16 	blt	r2,zero,805780 <___vfprintf_internal_r+0x2080>
  805648:	044019c4 	movi	r17,103
  80564c:	003e2106 	br	804ed4 <__alt_mem_onchip_mem+0xff7fced4>
  805650:	d9002917 	ldw	r4,164(sp)
  805654:	d8802104 	addi	r2,sp,132
  805658:	d8800315 	stw	r2,12(sp)
  80565c:	d9000015 	stw	r4,0(sp)
  805660:	d8802504 	addi	r2,sp,148
  805664:	d9403617 	ldw	r5,216(sp)
  805668:	d9002c17 	ldw	r4,176(sp)
  80566c:	d8800215 	stw	r2,8(sp)
  805670:	d8802604 	addi	r2,sp,152
  805674:	d8800115 	stw	r2,4(sp)
  805678:	01c000c4 	movi	r7,3
  80567c:	980d883a 	mov	r6,r19
  805680:	da003d15 	stw	r8,244(sp)
  805684:	0805f300 	call	805f30 <_dtoa_r>
  805688:	d8c02917 	ldw	r3,164(sp)
  80568c:	da003d17 	ldw	r8,244(sp)
  805690:	1021883a 	mov	r16,r2
  805694:	00801184 	movi	r2,70
  805698:	80f9883a 	add	fp,r16,r3
  80569c:	88bfd926 	beq	r17,r2,805604 <__alt_mem_onchip_mem+0xff7fd604>
  8056a0:	003de806 	br	804e44 <__alt_mem_onchip_mem+0xff7fce44>
  8056a4:	d9002917 	ldw	r4,164(sp)
  8056a8:	00c04d0e 	bge	zero,r3,8057e0 <___vfprintf_internal_r+0x20e0>
  8056ac:	2000441e 	bne	r4,zero,8057c0 <___vfprintf_internal_r+0x20c0>
  8056b0:	9480004c 	andi	r18,r18,1
  8056b4:	9000421e 	bne	r18,zero,8057c0 <___vfprintf_internal_r+0x20c0>
  8056b8:	1805883a 	mov	r2,r3
  8056bc:	18007016 	blt	r3,zero,805880 <___vfprintf_internal_r+0x2180>
  8056c0:	d8c03217 	ldw	r3,200(sp)
  8056c4:	d8c02e15 	stw	r3,184(sp)
  8056c8:	003e0206 	br	804ed4 <__alt_mem_onchip_mem+0xff7fced4>
  8056cc:	df0022c4 	addi	fp,sp,139
  8056d0:	dc002915 	stw	r16,164(sp)
  8056d4:	4027883a 	mov	r19,r8
  8056d8:	e021883a 	mov	r16,fp
  8056dc:	b009883a 	mov	r4,r22
  8056e0:	01400284 	movi	r5,10
  8056e4:	08014440 	call	801444 <__modsi3>
  8056e8:	10800c04 	addi	r2,r2,48
  8056ec:	843fffc4 	addi	r16,r16,-1
  8056f0:	b009883a 	mov	r4,r22
  8056f4:	01400284 	movi	r5,10
  8056f8:	80800005 	stb	r2,0(r16)
  8056fc:	08013c00 	call	8013c0 <__divsi3>
  805700:	102d883a 	mov	r22,r2
  805704:	00800244 	movi	r2,9
  805708:	15bff416 	blt	r2,r22,8056dc <__alt_mem_onchip_mem+0xff7fd6dc>
  80570c:	9811883a 	mov	r8,r19
  805710:	b0800c04 	addi	r2,r22,48
  805714:	8027883a 	mov	r19,r16
  805718:	997fffc4 	addi	r5,r19,-1
  80571c:	98bfffc5 	stb	r2,-1(r19)
  805720:	dc002917 	ldw	r16,164(sp)
  805724:	2f006a2e 	bgeu	r5,fp,8058d0 <___vfprintf_internal_r+0x21d0>
  805728:	d9c02384 	addi	r7,sp,142
  80572c:	3ccfc83a 	sub	r7,r7,r19
  805730:	d9002344 	addi	r4,sp,141
  805734:	e1cf883a 	add	r7,fp,r7
  805738:	00000106 	br	805740 <___vfprintf_internal_r+0x2040>
  80573c:	28800003 	ldbu	r2,0(r5)
  805740:	20800005 	stb	r2,0(r4)
  805744:	21000044 	addi	r4,r4,1
  805748:	29400044 	addi	r5,r5,1
  80574c:	393ffb1e 	bne	r7,r4,80573c <__alt_mem_onchip_mem+0xff7fd73c>
  805750:	d8802304 	addi	r2,sp,140
  805754:	14c5c83a 	sub	r2,r2,r19
  805758:	d8c02344 	addi	r3,sp,141
  80575c:	1885883a 	add	r2,r3,r2
  805760:	003f7006 	br	805524 <__alt_mem_onchip_mem+0xff7fd524>
  805764:	0005883a 	mov	r2,zero
  805768:	003f0f06 	br	8053a8 <__alt_mem_onchip_mem+0xff7fd3a8>
  80576c:	d8c03217 	ldw	r3,200(sp)
  805770:	18c00044 	addi	r3,r3,1
  805774:	d8c02e15 	stw	r3,184(sp)
  805778:	1805883a 	mov	r2,r3
  80577c:	183fb20e 	bge	r3,zero,805648 <__alt_mem_onchip_mem+0xff7fd648>
  805780:	0005883a 	mov	r2,zero
  805784:	003fb006 	br	805648 <__alt_mem_onchip_mem+0xff7fd648>
  805788:	d9003617 	ldw	r4,216(sp)
  80578c:	000d883a 	mov	r6,zero
  805790:	000f883a 	mov	r7,zero
  805794:	980b883a 	mov	r5,r19
  805798:	d8c03c15 	stw	r3,240(sp)
  80579c:	da003d15 	stw	r8,244(sp)
  8057a0:	080d7000 	call	80d700 <__eqdf2>
  8057a4:	d8c03c17 	ldw	r3,240(sp)
  8057a8:	da003d17 	ldw	r8,244(sp)
  8057ac:	103f9826 	beq	r2,zero,805610 <__alt_mem_onchip_mem+0xff7fd610>
  8057b0:	00800044 	movi	r2,1
  8057b4:	10c7c83a 	sub	r3,r2,r3
  8057b8:	d8c02615 	stw	r3,152(sp)
  8057bc:	003f9506 	br	805614 <__alt_mem_onchip_mem+0xff7fd614>
  8057c0:	d9002917 	ldw	r4,164(sp)
  8057c4:	d8c03217 	ldw	r3,200(sp)
  8057c8:	20800044 	addi	r2,r4,1
  8057cc:	1885883a 	add	r2,r3,r2
  8057d0:	d8802e15 	stw	r2,184(sp)
  8057d4:	103dbf0e 	bge	r2,zero,804ed4 <__alt_mem_onchip_mem+0xff7fced4>
  8057d8:	0005883a 	mov	r2,zero
  8057dc:	003dbd06 	br	804ed4 <__alt_mem_onchip_mem+0xff7fced4>
  8057e0:	2000211e 	bne	r4,zero,805868 <___vfprintf_internal_r+0x2168>
  8057e4:	9480004c 	andi	r18,r18,1
  8057e8:	90001f1e 	bne	r18,zero,805868 <___vfprintf_internal_r+0x2168>
  8057ec:	00800044 	movi	r2,1
  8057f0:	d8802e15 	stw	r2,184(sp)
  8057f4:	003db706 	br	804ed4 <__alt_mem_onchip_mem+0xff7fced4>
  8057f8:	00800b44 	movi	r2,45
  8057fc:	05adc83a 	sub	r22,zero,r22
  805800:	d8802305 	stb	r2,140(sp)
  805804:	003f3f06 	br	805504 <__alt_mem_onchip_mem+0xff7fd504>
  805808:	0005883a 	mov	r2,zero
  80580c:	003f5206 	br	805558 <__alt_mem_onchip_mem+0xff7fd558>
  805810:	90a4703a 	and	r18,r18,r2
  805814:	903f4e26 	beq	r18,zero,805550 <__alt_mem_onchip_mem+0xff7fd550>
  805818:	003f4a06 	br	805544 <__alt_mem_onchip_mem+0xff7fd544>
  80581c:	00800084 	movi	r2,2
  805820:	10c5c83a 	sub	r2,r2,r3
  805824:	003f8406 	br	805638 <__alt_mem_onchip_mem+0xff7fd638>
  805828:	d8802d17 	ldw	r2,180(sp)
  80582c:	d9002d17 	ldw	r4,180(sp)
  805830:	ac400043 	ldbu	r17,1(r21)
  805834:	10800017 	ldw	r2,0(r2)
  805838:	582b883a 	mov	r21,r11
  80583c:	d8802915 	stw	r2,164(sp)
  805840:	20800104 	addi	r2,r4,4
  805844:	d9002917 	ldw	r4,164(sp)
  805848:	d8802d15 	stw	r2,180(sp)
  80584c:	203e7a0e 	bge	r4,zero,805238 <__alt_mem_onchip_mem+0xff7fd238>
  805850:	8c403fcc 	andi	r17,r17,255
  805854:	00bfffc4 	movi	r2,-1
  805858:	8c40201c 	xori	r17,r17,128
  80585c:	d8802915 	stw	r2,164(sp)
  805860:	8c7fe004 	addi	r17,r17,-128
  805864:	00380706 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  805868:	d8c02917 	ldw	r3,164(sp)
  80586c:	18c00084 	addi	r3,r3,2
  805870:	d8c02e15 	stw	r3,184(sp)
  805874:	1805883a 	mov	r2,r3
  805878:	183d960e 	bge	r3,zero,804ed4 <__alt_mem_onchip_mem+0xff7fced4>
  80587c:	003fd606 	br	8057d8 <__alt_mem_onchip_mem+0xff7fd7d8>
  805880:	0005883a 	mov	r2,zero
  805884:	003f8e06 	br	8056c0 <__alt_mem_onchip_mem+0xff7fd6c0>
  805888:	9080004c 	andi	r2,r18,1
  80588c:	103f811e 	bne	r2,zero,805694 <__alt_mem_onchip_mem+0xff7fd694>
  805890:	d8802117 	ldw	r2,132(sp)
  805894:	1405c83a 	sub	r2,r2,r16
  805898:	d8803315 	stw	r2,204(sp)
  80589c:	b47ef326 	beq	r22,r17,80546c <__alt_mem_onchip_mem+0xff7fd46c>
  8058a0:	dd802617 	ldw	r22,152(sp)
  8058a4:	003f1106 	br	8054ec <__alt_mem_onchip_mem+0xff7fd4ec>
  8058a8:	d9c02785 	stb	r7,158(sp)
  8058ac:	00390406 	br	803cc0 <__alt_mem_onchip_mem+0xff7fbcc0>
  8058b0:	d9c02785 	stb	r7,158(sp)
  8058b4:	0038d306 	br	803c04 <__alt_mem_onchip_mem+0xff7fbc04>
  8058b8:	d9c02785 	stb	r7,158(sp)
  8058bc:	003a6106 	br	804244 <__alt_mem_onchip_mem+0xff7fc244>
  8058c0:	d9c02785 	stb	r7,158(sp)
  8058c4:	003af806 	br	8044a8 <__alt_mem_onchip_mem+0xff7fc4a8>
  8058c8:	0005883a 	mov	r2,zero
  8058cc:	003d7e06 	br	804ec8 <__alt_mem_onchip_mem+0xff7fcec8>
  8058d0:	d8802344 	addi	r2,sp,141
  8058d4:	003f1306 	br	805524 <__alt_mem_onchip_mem+0xff7fd524>
  8058d8:	d9c02785 	stb	r7,158(sp)
  8058dc:	00392306 	br	803d6c <__alt_mem_onchip_mem+0xff7fbd6c>
  8058e0:	d9c02785 	stb	r7,158(sp)
  8058e4:	003aa906 	br	80438c <__alt_mem_onchip_mem+0xff7fc38c>
  8058e8:	d9c02785 	stb	r7,158(sp)
  8058ec:	003a3d06 	br	8041e4 <__alt_mem_onchip_mem+0xff7fc1e4>
  8058f0:	d9c02785 	stb	r7,158(sp)
  8058f4:	003aca06 	br	804420 <__alt_mem_onchip_mem+0xff7fc420>

008058f8 <__vfprintf_internal>:
  8058f8:	00802074 	movhi	r2,129
  8058fc:	10947b04 	addi	r2,r2,20972
  805900:	300f883a 	mov	r7,r6
  805904:	280d883a 	mov	r6,r5
  805908:	200b883a 	mov	r5,r4
  80590c:	11000017 	ldw	r4,0(r2)
  805910:	08037001 	jmpi	803700 <___vfprintf_internal_r>

00805914 <__sbprintf>:
  805914:	2880030b 	ldhu	r2,12(r5)
  805918:	2ac01917 	ldw	r11,100(r5)
  80591c:	2a80038b 	ldhu	r10,14(r5)
  805920:	2a400717 	ldw	r9,28(r5)
  805924:	2a000917 	ldw	r8,36(r5)
  805928:	defee204 	addi	sp,sp,-1144
  80592c:	00c10004 	movi	r3,1024
  805930:	dc011a15 	stw	r16,1128(sp)
  805934:	10bfff4c 	andi	r2,r2,65533
  805938:	2821883a 	mov	r16,r5
  80593c:	d8cb883a 	add	r5,sp,r3
  805940:	dc811c15 	stw	r18,1136(sp)
  805944:	dc411b15 	stw	r17,1132(sp)
  805948:	dfc11d15 	stw	ra,1140(sp)
  80594c:	2025883a 	mov	r18,r4
  805950:	d881030d 	sth	r2,1036(sp)
  805954:	dac11915 	stw	r11,1124(sp)
  805958:	da81038d 	sth	r10,1038(sp)
  80595c:	da410715 	stw	r9,1052(sp)
  805960:	da010915 	stw	r8,1060(sp)
  805964:	dec10015 	stw	sp,1024(sp)
  805968:	dec10415 	stw	sp,1040(sp)
  80596c:	d8c10215 	stw	r3,1032(sp)
  805970:	d8c10515 	stw	r3,1044(sp)
  805974:	d8010615 	stw	zero,1048(sp)
  805978:	08037000 	call	803700 <___vfprintf_internal_r>
  80597c:	1023883a 	mov	r17,r2
  805980:	10000416 	blt	r2,zero,805994 <__sbprintf+0x80>
  805984:	d9410004 	addi	r5,sp,1024
  805988:	9009883a 	mov	r4,r18
  80598c:	08078d80 	call	8078d8 <_fflush_r>
  805990:	10000d1e 	bne	r2,zero,8059c8 <__sbprintf+0xb4>
  805994:	d881030b 	ldhu	r2,1036(sp)
  805998:	1080100c 	andi	r2,r2,64
  80599c:	10000326 	beq	r2,zero,8059ac <__sbprintf+0x98>
  8059a0:	8080030b 	ldhu	r2,12(r16)
  8059a4:	10801014 	ori	r2,r2,64
  8059a8:	8080030d 	sth	r2,12(r16)
  8059ac:	8805883a 	mov	r2,r17
  8059b0:	dfc11d17 	ldw	ra,1140(sp)
  8059b4:	dc811c17 	ldw	r18,1136(sp)
  8059b8:	dc411b17 	ldw	r17,1132(sp)
  8059bc:	dc011a17 	ldw	r16,1128(sp)
  8059c0:	dec11e04 	addi	sp,sp,1144
  8059c4:	f800283a 	ret
  8059c8:	047fffc4 	movi	r17,-1
  8059cc:	003ff106 	br	805994 <__alt_mem_onchip_mem+0xff7fd994>

008059d0 <__swbuf_r>:
  8059d0:	defffb04 	addi	sp,sp,-20
  8059d4:	dcc00315 	stw	r19,12(sp)
  8059d8:	dc800215 	stw	r18,8(sp)
  8059dc:	dc000015 	stw	r16,0(sp)
  8059e0:	dfc00415 	stw	ra,16(sp)
  8059e4:	dc400115 	stw	r17,4(sp)
  8059e8:	2025883a 	mov	r18,r4
  8059ec:	2827883a 	mov	r19,r5
  8059f0:	3021883a 	mov	r16,r6
  8059f4:	20000226 	beq	r4,zero,805a00 <__swbuf_r+0x30>
  8059f8:	20800e17 	ldw	r2,56(r4)
  8059fc:	10004226 	beq	r2,zero,805b08 <__swbuf_r+0x138>
  805a00:	80800617 	ldw	r2,24(r16)
  805a04:	8100030b 	ldhu	r4,12(r16)
  805a08:	80800215 	stw	r2,8(r16)
  805a0c:	2080020c 	andi	r2,r4,8
  805a10:	10003626 	beq	r2,zero,805aec <__swbuf_r+0x11c>
  805a14:	80c00417 	ldw	r3,16(r16)
  805a18:	18003426 	beq	r3,zero,805aec <__swbuf_r+0x11c>
  805a1c:	2088000c 	andi	r2,r4,8192
  805a20:	9c403fcc 	andi	r17,r19,255
  805a24:	10001a26 	beq	r2,zero,805a90 <__swbuf_r+0xc0>
  805a28:	80800017 	ldw	r2,0(r16)
  805a2c:	81000517 	ldw	r4,20(r16)
  805a30:	10c7c83a 	sub	r3,r2,r3
  805a34:	1900200e 	bge	r3,r4,805ab8 <__swbuf_r+0xe8>
  805a38:	18c00044 	addi	r3,r3,1
  805a3c:	81000217 	ldw	r4,8(r16)
  805a40:	11400044 	addi	r5,r2,1
  805a44:	81400015 	stw	r5,0(r16)
  805a48:	213fffc4 	addi	r4,r4,-1
  805a4c:	81000215 	stw	r4,8(r16)
  805a50:	14c00005 	stb	r19,0(r2)
  805a54:	80800517 	ldw	r2,20(r16)
  805a58:	10c01e26 	beq	r2,r3,805ad4 <__swbuf_r+0x104>
  805a5c:	8080030b 	ldhu	r2,12(r16)
  805a60:	1080004c 	andi	r2,r2,1
  805a64:	10000226 	beq	r2,zero,805a70 <__swbuf_r+0xa0>
  805a68:	00800284 	movi	r2,10
  805a6c:	88801926 	beq	r17,r2,805ad4 <__swbuf_r+0x104>
  805a70:	8805883a 	mov	r2,r17
  805a74:	dfc00417 	ldw	ra,16(sp)
  805a78:	dcc00317 	ldw	r19,12(sp)
  805a7c:	dc800217 	ldw	r18,8(sp)
  805a80:	dc400117 	ldw	r17,4(sp)
  805a84:	dc000017 	ldw	r16,0(sp)
  805a88:	dec00504 	addi	sp,sp,20
  805a8c:	f800283a 	ret
  805a90:	81401917 	ldw	r5,100(r16)
  805a94:	00b7ffc4 	movi	r2,-8193
  805a98:	21080014 	ori	r4,r4,8192
  805a9c:	2884703a 	and	r2,r5,r2
  805aa0:	80801915 	stw	r2,100(r16)
  805aa4:	80800017 	ldw	r2,0(r16)
  805aa8:	8100030d 	sth	r4,12(r16)
  805aac:	81000517 	ldw	r4,20(r16)
  805ab0:	10c7c83a 	sub	r3,r2,r3
  805ab4:	193fe016 	blt	r3,r4,805a38 <__alt_mem_onchip_mem+0xff7fda38>
  805ab8:	800b883a 	mov	r5,r16
  805abc:	9009883a 	mov	r4,r18
  805ac0:	08078d80 	call	8078d8 <_fflush_r>
  805ac4:	1000071e 	bne	r2,zero,805ae4 <__swbuf_r+0x114>
  805ac8:	80800017 	ldw	r2,0(r16)
  805acc:	00c00044 	movi	r3,1
  805ad0:	003fda06 	br	805a3c <__alt_mem_onchip_mem+0xff7fda3c>
  805ad4:	800b883a 	mov	r5,r16
  805ad8:	9009883a 	mov	r4,r18
  805adc:	08078d80 	call	8078d8 <_fflush_r>
  805ae0:	103fe326 	beq	r2,zero,805a70 <__alt_mem_onchip_mem+0xff7fda70>
  805ae4:	00bfffc4 	movi	r2,-1
  805ae8:	003fe206 	br	805a74 <__alt_mem_onchip_mem+0xff7fda74>
  805aec:	800b883a 	mov	r5,r16
  805af0:	9009883a 	mov	r4,r18
  805af4:	0805b880 	call	805b88 <__swsetup_r>
  805af8:	103ffa1e 	bne	r2,zero,805ae4 <__alt_mem_onchip_mem+0xff7fdae4>
  805afc:	8100030b 	ldhu	r4,12(r16)
  805b00:	80c00417 	ldw	r3,16(r16)
  805b04:	003fc506 	br	805a1c <__alt_mem_onchip_mem+0xff7fda1c>
  805b08:	08019d40 	call	8019d4 <__sinit>
  805b0c:	003fbc06 	br	805a00 <__alt_mem_onchip_mem+0xff7fda00>

00805b10 <__swbuf>:
  805b10:	00802074 	movhi	r2,129
  805b14:	10947b04 	addi	r2,r2,20972
  805b18:	280d883a 	mov	r6,r5
  805b1c:	200b883a 	mov	r5,r4
  805b20:	11000017 	ldw	r4,0(r2)
  805b24:	08059d01 	jmpi	8059d0 <__swbuf_r>

00805b28 <_write_r>:
  805b28:	defffd04 	addi	sp,sp,-12
  805b2c:	2805883a 	mov	r2,r5
  805b30:	dc000015 	stw	r16,0(sp)
  805b34:	04002074 	movhi	r16,129
  805b38:	dc400115 	stw	r17,4(sp)
  805b3c:	300b883a 	mov	r5,r6
  805b40:	841bdb04 	addi	r16,r16,28524
  805b44:	2023883a 	mov	r17,r4
  805b48:	380d883a 	mov	r6,r7
  805b4c:	1009883a 	mov	r4,r2
  805b50:	dfc00215 	stw	ra,8(sp)
  805b54:	80000015 	stw	zero,0(r16)
  805b58:	080fac40 	call	80fac4 <write>
  805b5c:	00ffffc4 	movi	r3,-1
  805b60:	10c00526 	beq	r2,r3,805b78 <_write_r+0x50>
  805b64:	dfc00217 	ldw	ra,8(sp)
  805b68:	dc400117 	ldw	r17,4(sp)
  805b6c:	dc000017 	ldw	r16,0(sp)
  805b70:	dec00304 	addi	sp,sp,12
  805b74:	f800283a 	ret
  805b78:	80c00017 	ldw	r3,0(r16)
  805b7c:	183ff926 	beq	r3,zero,805b64 <__alt_mem_onchip_mem+0xff7fdb64>
  805b80:	88c00015 	stw	r3,0(r17)
  805b84:	003ff706 	br	805b64 <__alt_mem_onchip_mem+0xff7fdb64>

00805b88 <__swsetup_r>:
  805b88:	00802074 	movhi	r2,129
  805b8c:	defffd04 	addi	sp,sp,-12
  805b90:	10947b04 	addi	r2,r2,20972
  805b94:	dc400115 	stw	r17,4(sp)
  805b98:	2023883a 	mov	r17,r4
  805b9c:	11000017 	ldw	r4,0(r2)
  805ba0:	dc000015 	stw	r16,0(sp)
  805ba4:	dfc00215 	stw	ra,8(sp)
  805ba8:	2821883a 	mov	r16,r5
  805bac:	20000226 	beq	r4,zero,805bb8 <__swsetup_r+0x30>
  805bb0:	20800e17 	ldw	r2,56(r4)
  805bb4:	10003126 	beq	r2,zero,805c7c <__swsetup_r+0xf4>
  805bb8:	8080030b 	ldhu	r2,12(r16)
  805bbc:	10c0020c 	andi	r3,r2,8
  805bc0:	1009883a 	mov	r4,r2
  805bc4:	18000f26 	beq	r3,zero,805c04 <__swsetup_r+0x7c>
  805bc8:	80c00417 	ldw	r3,16(r16)
  805bcc:	18001526 	beq	r3,zero,805c24 <__swsetup_r+0x9c>
  805bd0:	1100004c 	andi	r4,r2,1
  805bd4:	20001c1e 	bne	r4,zero,805c48 <__swsetup_r+0xc0>
  805bd8:	1080008c 	andi	r2,r2,2
  805bdc:	1000291e 	bne	r2,zero,805c84 <__swsetup_r+0xfc>
  805be0:	80800517 	ldw	r2,20(r16)
  805be4:	80800215 	stw	r2,8(r16)
  805be8:	18001c26 	beq	r3,zero,805c5c <__swsetup_r+0xd4>
  805bec:	0005883a 	mov	r2,zero
  805bf0:	dfc00217 	ldw	ra,8(sp)
  805bf4:	dc400117 	ldw	r17,4(sp)
  805bf8:	dc000017 	ldw	r16,0(sp)
  805bfc:	dec00304 	addi	sp,sp,12
  805c00:	f800283a 	ret
  805c04:	2080040c 	andi	r2,r4,16
  805c08:	10002e26 	beq	r2,zero,805cc4 <__swsetup_r+0x13c>
  805c0c:	2080010c 	andi	r2,r4,4
  805c10:	10001e1e 	bne	r2,zero,805c8c <__swsetup_r+0x104>
  805c14:	80c00417 	ldw	r3,16(r16)
  805c18:	20800214 	ori	r2,r4,8
  805c1c:	8080030d 	sth	r2,12(r16)
  805c20:	183feb1e 	bne	r3,zero,805bd0 <__alt_mem_onchip_mem+0xff7fdbd0>
  805c24:	1100a00c 	andi	r4,r2,640
  805c28:	01408004 	movi	r5,512
  805c2c:	217fe826 	beq	r4,r5,805bd0 <__alt_mem_onchip_mem+0xff7fdbd0>
  805c30:	800b883a 	mov	r5,r16
  805c34:	8809883a 	mov	r4,r17
  805c38:	08023800 	call	802380 <__smakebuf_r>
  805c3c:	8080030b 	ldhu	r2,12(r16)
  805c40:	80c00417 	ldw	r3,16(r16)
  805c44:	003fe206 	br	805bd0 <__alt_mem_onchip_mem+0xff7fdbd0>
  805c48:	80800517 	ldw	r2,20(r16)
  805c4c:	80000215 	stw	zero,8(r16)
  805c50:	0085c83a 	sub	r2,zero,r2
  805c54:	80800615 	stw	r2,24(r16)
  805c58:	183fe41e 	bne	r3,zero,805bec <__alt_mem_onchip_mem+0xff7fdbec>
  805c5c:	80c0030b 	ldhu	r3,12(r16)
  805c60:	0005883a 	mov	r2,zero
  805c64:	1900200c 	andi	r4,r3,128
  805c68:	203fe126 	beq	r4,zero,805bf0 <__alt_mem_onchip_mem+0xff7fdbf0>
  805c6c:	18c01014 	ori	r3,r3,64
  805c70:	80c0030d 	sth	r3,12(r16)
  805c74:	00bfffc4 	movi	r2,-1
  805c78:	003fdd06 	br	805bf0 <__alt_mem_onchip_mem+0xff7fdbf0>
  805c7c:	08019d40 	call	8019d4 <__sinit>
  805c80:	003fcd06 	br	805bb8 <__alt_mem_onchip_mem+0xff7fdbb8>
  805c84:	0005883a 	mov	r2,zero
  805c88:	003fd606 	br	805be4 <__alt_mem_onchip_mem+0xff7fdbe4>
  805c8c:	81400c17 	ldw	r5,48(r16)
  805c90:	28000626 	beq	r5,zero,805cac <__swsetup_r+0x124>
  805c94:	80801004 	addi	r2,r16,64
  805c98:	28800326 	beq	r5,r2,805ca8 <__swsetup_r+0x120>
  805c9c:	8809883a 	mov	r4,r17
  805ca0:	0807b340 	call	807b34 <_free_r>
  805ca4:	8100030b 	ldhu	r4,12(r16)
  805ca8:	80000c15 	stw	zero,48(r16)
  805cac:	80c00417 	ldw	r3,16(r16)
  805cb0:	00bff6c4 	movi	r2,-37
  805cb4:	1108703a 	and	r4,r2,r4
  805cb8:	80000115 	stw	zero,4(r16)
  805cbc:	80c00015 	stw	r3,0(r16)
  805cc0:	003fd506 	br	805c18 <__alt_mem_onchip_mem+0xff7fdc18>
  805cc4:	00800244 	movi	r2,9
  805cc8:	88800015 	stw	r2,0(r17)
  805ccc:	20801014 	ori	r2,r4,64
  805cd0:	8080030d 	sth	r2,12(r16)
  805cd4:	00bfffc4 	movi	r2,-1
  805cd8:	003fc506 	br	805bf0 <__alt_mem_onchip_mem+0xff7fdbf0>

00805cdc <_close_r>:
  805cdc:	defffd04 	addi	sp,sp,-12
  805ce0:	dc000015 	stw	r16,0(sp)
  805ce4:	04002074 	movhi	r16,129
  805ce8:	dc400115 	stw	r17,4(sp)
  805cec:	841bdb04 	addi	r16,r16,28524
  805cf0:	2023883a 	mov	r17,r4
  805cf4:	2809883a 	mov	r4,r5
  805cf8:	dfc00215 	stw	ra,8(sp)
  805cfc:	80000015 	stw	zero,0(r16)
  805d00:	080ed3c0 	call	80ed3c <close>
  805d04:	00ffffc4 	movi	r3,-1
  805d08:	10c00526 	beq	r2,r3,805d20 <_close_r+0x44>
  805d0c:	dfc00217 	ldw	ra,8(sp)
  805d10:	dc400117 	ldw	r17,4(sp)
  805d14:	dc000017 	ldw	r16,0(sp)
  805d18:	dec00304 	addi	sp,sp,12
  805d1c:	f800283a 	ret
  805d20:	80c00017 	ldw	r3,0(r16)
  805d24:	183ff926 	beq	r3,zero,805d0c <__alt_mem_onchip_mem+0xff7fdd0c>
  805d28:	88c00015 	stw	r3,0(r17)
  805d2c:	003ff706 	br	805d0c <__alt_mem_onchip_mem+0xff7fdd0c>

00805d30 <quorem>:
  805d30:	defff704 	addi	sp,sp,-36
  805d34:	dc800215 	stw	r18,8(sp)
  805d38:	20800417 	ldw	r2,16(r4)
  805d3c:	2c800417 	ldw	r18,16(r5)
  805d40:	dfc00815 	stw	ra,32(sp)
  805d44:	ddc00715 	stw	r23,28(sp)
  805d48:	dd800615 	stw	r22,24(sp)
  805d4c:	dd400515 	stw	r21,20(sp)
  805d50:	dd000415 	stw	r20,16(sp)
  805d54:	dcc00315 	stw	r19,12(sp)
  805d58:	dc400115 	stw	r17,4(sp)
  805d5c:	dc000015 	stw	r16,0(sp)
  805d60:	14807116 	blt	r2,r18,805f28 <quorem+0x1f8>
  805d64:	94bfffc4 	addi	r18,r18,-1
  805d68:	94ad883a 	add	r22,r18,r18
  805d6c:	b5ad883a 	add	r22,r22,r22
  805d70:	2c400504 	addi	r17,r5,20
  805d74:	8da9883a 	add	r20,r17,r22
  805d78:	25400504 	addi	r21,r4,20
  805d7c:	282f883a 	mov	r23,r5
  805d80:	adad883a 	add	r22,r21,r22
  805d84:	a1400017 	ldw	r5,0(r20)
  805d88:	2021883a 	mov	r16,r4
  805d8c:	b1000017 	ldw	r4,0(r22)
  805d90:	29400044 	addi	r5,r5,1
  805d94:	08014b80 	call	8014b8 <__udivsi3>
  805d98:	1027883a 	mov	r19,r2
  805d9c:	10002c26 	beq	r2,zero,805e50 <quorem+0x120>
  805da0:	a813883a 	mov	r9,r21
  805da4:	880b883a 	mov	r5,r17
  805da8:	0009883a 	mov	r4,zero
  805dac:	000d883a 	mov	r6,zero
  805db0:	2a000017 	ldw	r8,0(r5)
  805db4:	49c00017 	ldw	r7,0(r9)
  805db8:	29400104 	addi	r5,r5,4
  805dbc:	40bfffcc 	andi	r2,r8,65535
  805dc0:	14c5383a 	mul	r2,r2,r19
  805dc4:	4010d43a 	srli	r8,r8,16
  805dc8:	38ffffcc 	andi	r3,r7,65535
  805dcc:	1105883a 	add	r2,r2,r4
  805dd0:	1008d43a 	srli	r4,r2,16
  805dd4:	44d1383a 	mul	r8,r8,r19
  805dd8:	198d883a 	add	r6,r3,r6
  805ddc:	10ffffcc 	andi	r3,r2,65535
  805de0:	30c7c83a 	sub	r3,r6,r3
  805de4:	380ed43a 	srli	r7,r7,16
  805de8:	4105883a 	add	r2,r8,r4
  805dec:	180dd43a 	srai	r6,r3,16
  805df0:	113fffcc 	andi	r4,r2,65535
  805df4:	390fc83a 	sub	r7,r7,r4
  805df8:	398d883a 	add	r6,r7,r6
  805dfc:	300e943a 	slli	r7,r6,16
  805e00:	18ffffcc 	andi	r3,r3,65535
  805e04:	1008d43a 	srli	r4,r2,16
  805e08:	38ceb03a 	or	r7,r7,r3
  805e0c:	49c00015 	stw	r7,0(r9)
  805e10:	300dd43a 	srai	r6,r6,16
  805e14:	4a400104 	addi	r9,r9,4
  805e18:	a17fe52e 	bgeu	r20,r5,805db0 <__alt_mem_onchip_mem+0xff7fddb0>
  805e1c:	b0800017 	ldw	r2,0(r22)
  805e20:	10000b1e 	bne	r2,zero,805e50 <quorem+0x120>
  805e24:	b0bfff04 	addi	r2,r22,-4
  805e28:	a880082e 	bgeu	r21,r2,805e4c <quorem+0x11c>
  805e2c:	b0ffff17 	ldw	r3,-4(r22)
  805e30:	18000326 	beq	r3,zero,805e40 <quorem+0x110>
  805e34:	00000506 	br	805e4c <quorem+0x11c>
  805e38:	10c00017 	ldw	r3,0(r2)
  805e3c:	1800031e 	bne	r3,zero,805e4c <quorem+0x11c>
  805e40:	10bfff04 	addi	r2,r2,-4
  805e44:	94bfffc4 	addi	r18,r18,-1
  805e48:	a8bffb36 	bltu	r21,r2,805e38 <__alt_mem_onchip_mem+0xff7fde38>
  805e4c:	84800415 	stw	r18,16(r16)
  805e50:	b80b883a 	mov	r5,r23
  805e54:	8009883a 	mov	r4,r16
  805e58:	08090e00 	call	8090e0 <__mcmp>
  805e5c:	10002616 	blt	r2,zero,805ef8 <quorem+0x1c8>
  805e60:	9cc00044 	addi	r19,r19,1
  805e64:	a805883a 	mov	r2,r21
  805e68:	000b883a 	mov	r5,zero
  805e6c:	11000017 	ldw	r4,0(r2)
  805e70:	89800017 	ldw	r6,0(r17)
  805e74:	10800104 	addi	r2,r2,4
  805e78:	20ffffcc 	andi	r3,r4,65535
  805e7c:	194b883a 	add	r5,r3,r5
  805e80:	30ffffcc 	andi	r3,r6,65535
  805e84:	28c7c83a 	sub	r3,r5,r3
  805e88:	300cd43a 	srli	r6,r6,16
  805e8c:	2008d43a 	srli	r4,r4,16
  805e90:	180bd43a 	srai	r5,r3,16
  805e94:	18ffffcc 	andi	r3,r3,65535
  805e98:	2189c83a 	sub	r4,r4,r6
  805e9c:	2149883a 	add	r4,r4,r5
  805ea0:	200c943a 	slli	r6,r4,16
  805ea4:	8c400104 	addi	r17,r17,4
  805ea8:	200bd43a 	srai	r5,r4,16
  805eac:	30c6b03a 	or	r3,r6,r3
  805eb0:	10ffff15 	stw	r3,-4(r2)
  805eb4:	a47fed2e 	bgeu	r20,r17,805e6c <__alt_mem_onchip_mem+0xff7fde6c>
  805eb8:	9485883a 	add	r2,r18,r18
  805ebc:	1085883a 	add	r2,r2,r2
  805ec0:	a887883a 	add	r3,r21,r2
  805ec4:	18800017 	ldw	r2,0(r3)
  805ec8:	10000b1e 	bne	r2,zero,805ef8 <quorem+0x1c8>
  805ecc:	18bfff04 	addi	r2,r3,-4
  805ed0:	a880082e 	bgeu	r21,r2,805ef4 <quorem+0x1c4>
  805ed4:	18ffff17 	ldw	r3,-4(r3)
  805ed8:	18000326 	beq	r3,zero,805ee8 <quorem+0x1b8>
  805edc:	00000506 	br	805ef4 <quorem+0x1c4>
  805ee0:	10c00017 	ldw	r3,0(r2)
  805ee4:	1800031e 	bne	r3,zero,805ef4 <quorem+0x1c4>
  805ee8:	10bfff04 	addi	r2,r2,-4
  805eec:	94bfffc4 	addi	r18,r18,-1
  805ef0:	a8bffb36 	bltu	r21,r2,805ee0 <__alt_mem_onchip_mem+0xff7fdee0>
  805ef4:	84800415 	stw	r18,16(r16)
  805ef8:	9805883a 	mov	r2,r19
  805efc:	dfc00817 	ldw	ra,32(sp)
  805f00:	ddc00717 	ldw	r23,28(sp)
  805f04:	dd800617 	ldw	r22,24(sp)
  805f08:	dd400517 	ldw	r21,20(sp)
  805f0c:	dd000417 	ldw	r20,16(sp)
  805f10:	dcc00317 	ldw	r19,12(sp)
  805f14:	dc800217 	ldw	r18,8(sp)
  805f18:	dc400117 	ldw	r17,4(sp)
  805f1c:	dc000017 	ldw	r16,0(sp)
  805f20:	dec00904 	addi	sp,sp,36
  805f24:	f800283a 	ret
  805f28:	0005883a 	mov	r2,zero
  805f2c:	003ff306 	br	805efc <__alt_mem_onchip_mem+0xff7fdefc>

00805f30 <_dtoa_r>:
  805f30:	20801017 	ldw	r2,64(r4)
  805f34:	deffde04 	addi	sp,sp,-136
  805f38:	df002015 	stw	fp,128(sp)
  805f3c:	dcc01b15 	stw	r19,108(sp)
  805f40:	dc801a15 	stw	r18,104(sp)
  805f44:	dc401915 	stw	r17,100(sp)
  805f48:	dc001815 	stw	r16,96(sp)
  805f4c:	dfc02115 	stw	ra,132(sp)
  805f50:	ddc01f15 	stw	r23,124(sp)
  805f54:	dd801e15 	stw	r22,120(sp)
  805f58:	dd401d15 	stw	r21,116(sp)
  805f5c:	dd001c15 	stw	r20,112(sp)
  805f60:	d9c00315 	stw	r7,12(sp)
  805f64:	2039883a 	mov	fp,r4
  805f68:	3023883a 	mov	r17,r6
  805f6c:	2825883a 	mov	r18,r5
  805f70:	dc002417 	ldw	r16,144(sp)
  805f74:	3027883a 	mov	r19,r6
  805f78:	10000826 	beq	r2,zero,805f9c <_dtoa_r+0x6c>
  805f7c:	21801117 	ldw	r6,68(r4)
  805f80:	00c00044 	movi	r3,1
  805f84:	100b883a 	mov	r5,r2
  805f88:	1986983a 	sll	r3,r3,r6
  805f8c:	11800115 	stw	r6,4(r2)
  805f90:	10c00215 	stw	r3,8(r2)
  805f94:	08088c00 	call	8088c0 <_Bfree>
  805f98:	e0001015 	stw	zero,64(fp)
  805f9c:	88002e16 	blt	r17,zero,806058 <_dtoa_r+0x128>
  805fa0:	80000015 	stw	zero,0(r16)
  805fa4:	889ffc2c 	andhi	r2,r17,32752
  805fa8:	00dffc34 	movhi	r3,32752
  805fac:	10c01c26 	beq	r2,r3,806020 <_dtoa_r+0xf0>
  805fb0:	000d883a 	mov	r6,zero
  805fb4:	000f883a 	mov	r7,zero
  805fb8:	9009883a 	mov	r4,r18
  805fbc:	980b883a 	mov	r5,r19
  805fc0:	080d7000 	call	80d700 <__eqdf2>
  805fc4:	10002b1e 	bne	r2,zero,806074 <_dtoa_r+0x144>
  805fc8:	d9c02317 	ldw	r7,140(sp)
  805fcc:	00800044 	movi	r2,1
  805fd0:	38800015 	stw	r2,0(r7)
  805fd4:	d8802517 	ldw	r2,148(sp)
  805fd8:	10019e26 	beq	r2,zero,806654 <_dtoa_r+0x724>
  805fdc:	d8c02517 	ldw	r3,148(sp)
  805fe0:	00802074 	movhi	r2,129
  805fe4:	108bfe44 	addi	r2,r2,12281
  805fe8:	18800015 	stw	r2,0(r3)
  805fec:	10bfffc4 	addi	r2,r2,-1
  805ff0:	dfc02117 	ldw	ra,132(sp)
  805ff4:	df002017 	ldw	fp,128(sp)
  805ff8:	ddc01f17 	ldw	r23,124(sp)
  805ffc:	dd801e17 	ldw	r22,120(sp)
  806000:	dd401d17 	ldw	r21,116(sp)
  806004:	dd001c17 	ldw	r20,112(sp)
  806008:	dcc01b17 	ldw	r19,108(sp)
  80600c:	dc801a17 	ldw	r18,104(sp)
  806010:	dc401917 	ldw	r17,100(sp)
  806014:	dc001817 	ldw	r16,96(sp)
  806018:	dec02204 	addi	sp,sp,136
  80601c:	f800283a 	ret
  806020:	d8c02317 	ldw	r3,140(sp)
  806024:	0089c3c4 	movi	r2,9999
  806028:	18800015 	stw	r2,0(r3)
  80602c:	90017726 	beq	r18,zero,80660c <_dtoa_r+0x6dc>
  806030:	00802074 	movhi	r2,129
  806034:	108caa04 	addi	r2,r2,12968
  806038:	d9002517 	ldw	r4,148(sp)
  80603c:	203fec26 	beq	r4,zero,805ff0 <__alt_mem_onchip_mem+0xff7fdff0>
  806040:	10c000c7 	ldb	r3,3(r2)
  806044:	1801781e 	bne	r3,zero,806628 <_dtoa_r+0x6f8>
  806048:	10c000c4 	addi	r3,r2,3
  80604c:	d9802517 	ldw	r6,148(sp)
  806050:	30c00015 	stw	r3,0(r6)
  806054:	003fe606 	br	805ff0 <__alt_mem_onchip_mem+0xff7fdff0>
  806058:	04e00034 	movhi	r19,32768
  80605c:	9cffffc4 	addi	r19,r19,-1
  806060:	00800044 	movi	r2,1
  806064:	8ce6703a 	and	r19,r17,r19
  806068:	80800015 	stw	r2,0(r16)
  80606c:	9823883a 	mov	r17,r19
  806070:	003fcc06 	br	805fa4 <__alt_mem_onchip_mem+0xff7fdfa4>
  806074:	d8800204 	addi	r2,sp,8
  806078:	d8800015 	stw	r2,0(sp)
  80607c:	d9c00104 	addi	r7,sp,4
  806080:	900b883a 	mov	r5,r18
  806084:	980d883a 	mov	r6,r19
  806088:	e009883a 	mov	r4,fp
  80608c:	8820d53a 	srli	r16,r17,20
  806090:	08094ac0 	call	8094ac <__d2b>
  806094:	d8800915 	stw	r2,36(sp)
  806098:	8001651e 	bne	r16,zero,806630 <_dtoa_r+0x700>
  80609c:	dd800217 	ldw	r22,8(sp)
  8060a0:	dc000117 	ldw	r16,4(sp)
  8060a4:	00800804 	movi	r2,32
  8060a8:	b421883a 	add	r16,r22,r16
  8060ac:	80c10c84 	addi	r3,r16,1074
  8060b0:	10c2d10e 	bge	r2,r3,806bf8 <_dtoa_r+0xcc8>
  8060b4:	00801004 	movi	r2,64
  8060b8:	81010484 	addi	r4,r16,1042
  8060bc:	10c7c83a 	sub	r3,r2,r3
  8060c0:	9108d83a 	srl	r4,r18,r4
  8060c4:	88e2983a 	sll	r17,r17,r3
  8060c8:	2448b03a 	or	r4,r4,r17
  8060cc:	080eac80 	call	80eac8 <__floatunsidf>
  8060d0:	017f8434 	movhi	r5,65040
  8060d4:	01800044 	movi	r6,1
  8060d8:	1009883a 	mov	r4,r2
  8060dc:	194b883a 	add	r5,r3,r5
  8060e0:	843fffc4 	addi	r16,r16,-1
  8060e4:	d9801115 	stw	r6,68(sp)
  8060e8:	000d883a 	mov	r6,zero
  8060ec:	01cffe34 	movhi	r7,16376
  8060f0:	080e0700 	call	80e070 <__subdf3>
  8060f4:	0198dbf4 	movhi	r6,25455
  8060f8:	01cff4f4 	movhi	r7,16339
  8060fc:	3190d844 	addi	r6,r6,17249
  806100:	39e1e9c4 	addi	r7,r7,-30809
  806104:	1009883a 	mov	r4,r2
  806108:	180b883a 	mov	r5,r3
  80610c:	080d9580 	call	80d958 <__muldf3>
  806110:	01a2d874 	movhi	r6,35681
  806114:	01cff1f4 	movhi	r7,16327
  806118:	31b22cc4 	addi	r6,r6,-14157
  80611c:	39e28a04 	addi	r7,r7,-30168
  806120:	180b883a 	mov	r5,r3
  806124:	1009883a 	mov	r4,r2
  806128:	080c56c0 	call	80c56c <__adddf3>
  80612c:	8009883a 	mov	r4,r16
  806130:	1029883a 	mov	r20,r2
  806134:	1823883a 	mov	r17,r3
  806138:	080e9ec0 	call	80e9ec <__floatsidf>
  80613c:	019427f4 	movhi	r6,20639
  806140:	01cff4f4 	movhi	r7,16339
  806144:	319e7ec4 	addi	r6,r6,31227
  806148:	39d104c4 	addi	r7,r7,17427
  80614c:	1009883a 	mov	r4,r2
  806150:	180b883a 	mov	r5,r3
  806154:	080d9580 	call	80d958 <__muldf3>
  806158:	100d883a 	mov	r6,r2
  80615c:	180f883a 	mov	r7,r3
  806160:	a009883a 	mov	r4,r20
  806164:	880b883a 	mov	r5,r17
  806168:	080c56c0 	call	80c56c <__adddf3>
  80616c:	1009883a 	mov	r4,r2
  806170:	180b883a 	mov	r5,r3
  806174:	1029883a 	mov	r20,r2
  806178:	1823883a 	mov	r17,r3
  80617c:	080e96c0 	call	80e96c <__fixdfsi>
  806180:	000d883a 	mov	r6,zero
  806184:	000f883a 	mov	r7,zero
  806188:	a009883a 	mov	r4,r20
  80618c:	880b883a 	mov	r5,r17
  806190:	d8800515 	stw	r2,20(sp)
  806194:	080d8640 	call	80d864 <__ledf2>
  806198:	10028716 	blt	r2,zero,806bb8 <_dtoa_r+0xc88>
  80619c:	d8c00517 	ldw	r3,20(sp)
  8061a0:	00800584 	movi	r2,22
  8061a4:	10c27536 	bltu	r2,r3,806b7c <_dtoa_r+0xc4c>
  8061a8:	180490fa 	slli	r2,r3,3
  8061ac:	00c02074 	movhi	r3,129
  8061b0:	18ccc504 	addi	r3,r3,13076
  8061b4:	1885883a 	add	r2,r3,r2
  8061b8:	11000017 	ldw	r4,0(r2)
  8061bc:	11400117 	ldw	r5,4(r2)
  8061c0:	900d883a 	mov	r6,r18
  8061c4:	980f883a 	mov	r7,r19
  8061c8:	080d7880 	call	80d788 <__gedf2>
  8061cc:	00828d0e 	bge	zero,r2,806c04 <_dtoa_r+0xcd4>
  8061d0:	d9000517 	ldw	r4,20(sp)
  8061d4:	d8000e15 	stw	zero,56(sp)
  8061d8:	213fffc4 	addi	r4,r4,-1
  8061dc:	d9000515 	stw	r4,20(sp)
  8061e0:	b42dc83a 	sub	r22,r22,r16
  8061e4:	b5bfffc4 	addi	r22,r22,-1
  8061e8:	b0026f16 	blt	r22,zero,806ba8 <_dtoa_r+0xc78>
  8061ec:	d8000815 	stw	zero,32(sp)
  8061f0:	d9c00517 	ldw	r7,20(sp)
  8061f4:	38026416 	blt	r7,zero,806b88 <_dtoa_r+0xc58>
  8061f8:	b1ed883a 	add	r22,r22,r7
  8061fc:	d9c00d15 	stw	r7,52(sp)
  806200:	d8000a15 	stw	zero,40(sp)
  806204:	d9800317 	ldw	r6,12(sp)
  806208:	00800244 	movi	r2,9
  80620c:	11811436 	bltu	r2,r6,806660 <_dtoa_r+0x730>
  806210:	00800144 	movi	r2,5
  806214:	1184e10e 	bge	r2,r6,80759c <_dtoa_r+0x166c>
  806218:	31bfff04 	addi	r6,r6,-4
  80621c:	d9800315 	stw	r6,12(sp)
  806220:	0023883a 	mov	r17,zero
  806224:	d9800317 	ldw	r6,12(sp)
  806228:	008000c4 	movi	r2,3
  80622c:	30836726 	beq	r6,r2,806fcc <_dtoa_r+0x109c>
  806230:	1183410e 	bge	r2,r6,806f38 <_dtoa_r+0x1008>
  806234:	d9c00317 	ldw	r7,12(sp)
  806238:	00800104 	movi	r2,4
  80623c:	38827c26 	beq	r7,r2,806c30 <_dtoa_r+0xd00>
  806240:	00800144 	movi	r2,5
  806244:	3884c41e 	bne	r7,r2,807558 <_dtoa_r+0x1628>
  806248:	00800044 	movi	r2,1
  80624c:	d8800b15 	stw	r2,44(sp)
  806250:	d8c00517 	ldw	r3,20(sp)
  806254:	d9002217 	ldw	r4,136(sp)
  806258:	1907883a 	add	r3,r3,r4
  80625c:	19800044 	addi	r6,r3,1
  806260:	d8c00c15 	stw	r3,48(sp)
  806264:	d9800615 	stw	r6,24(sp)
  806268:	0183a40e 	bge	zero,r6,8070fc <_dtoa_r+0x11cc>
  80626c:	d9800617 	ldw	r6,24(sp)
  806270:	3021883a 	mov	r16,r6
  806274:	e0001115 	stw	zero,68(fp)
  806278:	008005c4 	movi	r2,23
  80627c:	1184c92e 	bgeu	r2,r6,8075a4 <_dtoa_r+0x1674>
  806280:	00c00044 	movi	r3,1
  806284:	00800104 	movi	r2,4
  806288:	1085883a 	add	r2,r2,r2
  80628c:	11000504 	addi	r4,r2,20
  806290:	180b883a 	mov	r5,r3
  806294:	18c00044 	addi	r3,r3,1
  806298:	313ffb2e 	bgeu	r6,r4,806288 <__alt_mem_onchip_mem+0xff7fe288>
  80629c:	e1401115 	stw	r5,68(fp)
  8062a0:	e009883a 	mov	r4,fp
  8062a4:	08088180 	call	808818 <_Balloc>
  8062a8:	d8800715 	stw	r2,28(sp)
  8062ac:	e0801015 	stw	r2,64(fp)
  8062b0:	00800384 	movi	r2,14
  8062b4:	1400f736 	bltu	r2,r16,806694 <_dtoa_r+0x764>
  8062b8:	8800f626 	beq	r17,zero,806694 <_dtoa_r+0x764>
  8062bc:	d9c00517 	ldw	r7,20(sp)
  8062c0:	01c39a0e 	bge	zero,r7,80712c <_dtoa_r+0x11fc>
  8062c4:	388003cc 	andi	r2,r7,15
  8062c8:	100490fa 	slli	r2,r2,3
  8062cc:	382bd13a 	srai	r21,r7,4
  8062d0:	00c02074 	movhi	r3,129
  8062d4:	18ccc504 	addi	r3,r3,13076
  8062d8:	1885883a 	add	r2,r3,r2
  8062dc:	a8c0040c 	andi	r3,r21,16
  8062e0:	12400017 	ldw	r9,0(r2)
  8062e4:	12000117 	ldw	r8,4(r2)
  8062e8:	18037926 	beq	r3,zero,8070d0 <_dtoa_r+0x11a0>
  8062ec:	00802074 	movhi	r2,129
  8062f0:	108cbb04 	addi	r2,r2,13036
  8062f4:	11800817 	ldw	r6,32(r2)
  8062f8:	11c00917 	ldw	r7,36(r2)
  8062fc:	9009883a 	mov	r4,r18
  806300:	980b883a 	mov	r5,r19
  806304:	da001715 	stw	r8,92(sp)
  806308:	da401615 	stw	r9,88(sp)
  80630c:	080ce180 	call	80ce18 <__divdf3>
  806310:	da001717 	ldw	r8,92(sp)
  806314:	da401617 	ldw	r9,88(sp)
  806318:	ad4003cc 	andi	r21,r21,15
  80631c:	040000c4 	movi	r16,3
  806320:	1023883a 	mov	r17,r2
  806324:	1829883a 	mov	r20,r3
  806328:	a8001126 	beq	r21,zero,806370 <_dtoa_r+0x440>
  80632c:	05c02074 	movhi	r23,129
  806330:	bdccbb04 	addi	r23,r23,13036
  806334:	4805883a 	mov	r2,r9
  806338:	4007883a 	mov	r3,r8
  80633c:	a980004c 	andi	r6,r21,1
  806340:	1009883a 	mov	r4,r2
  806344:	a82bd07a 	srai	r21,r21,1
  806348:	180b883a 	mov	r5,r3
  80634c:	30000426 	beq	r6,zero,806360 <_dtoa_r+0x430>
  806350:	b9800017 	ldw	r6,0(r23)
  806354:	b9c00117 	ldw	r7,4(r23)
  806358:	84000044 	addi	r16,r16,1
  80635c:	080d9580 	call	80d958 <__muldf3>
  806360:	bdc00204 	addi	r23,r23,8
  806364:	a83ff51e 	bne	r21,zero,80633c <__alt_mem_onchip_mem+0xff7fe33c>
  806368:	1013883a 	mov	r9,r2
  80636c:	1811883a 	mov	r8,r3
  806370:	480d883a 	mov	r6,r9
  806374:	400f883a 	mov	r7,r8
  806378:	8809883a 	mov	r4,r17
  80637c:	a00b883a 	mov	r5,r20
  806380:	080ce180 	call	80ce18 <__divdf3>
  806384:	d8800f15 	stw	r2,60(sp)
  806388:	d8c01015 	stw	r3,64(sp)
  80638c:	d8c00e17 	ldw	r3,56(sp)
  806390:	18000626 	beq	r3,zero,8063ac <_dtoa_r+0x47c>
  806394:	d9000f17 	ldw	r4,60(sp)
  806398:	d9401017 	ldw	r5,64(sp)
  80639c:	000d883a 	mov	r6,zero
  8063a0:	01cffc34 	movhi	r7,16368
  8063a4:	080d8640 	call	80d864 <__ledf2>
  8063a8:	10040b16 	blt	r2,zero,8073d8 <_dtoa_r+0x14a8>
  8063ac:	8009883a 	mov	r4,r16
  8063b0:	080e9ec0 	call	80e9ec <__floatsidf>
  8063b4:	d9800f17 	ldw	r6,60(sp)
  8063b8:	d9c01017 	ldw	r7,64(sp)
  8063bc:	1009883a 	mov	r4,r2
  8063c0:	180b883a 	mov	r5,r3
  8063c4:	080d9580 	call	80d958 <__muldf3>
  8063c8:	000d883a 	mov	r6,zero
  8063cc:	01d00734 	movhi	r7,16412
  8063d0:	1009883a 	mov	r4,r2
  8063d4:	180b883a 	mov	r5,r3
  8063d8:	080c56c0 	call	80c56c <__adddf3>
  8063dc:	1021883a 	mov	r16,r2
  8063e0:	d8800617 	ldw	r2,24(sp)
  8063e4:	047f3034 	movhi	r17,64704
  8063e8:	1c63883a 	add	r17,r3,r17
  8063ec:	10031826 	beq	r2,zero,807050 <_dtoa_r+0x1120>
  8063f0:	d8c00517 	ldw	r3,20(sp)
  8063f4:	db000617 	ldw	r12,24(sp)
  8063f8:	d8c01315 	stw	r3,76(sp)
  8063fc:	d9000b17 	ldw	r4,44(sp)
  806400:	20038f26 	beq	r4,zero,807240 <_dtoa_r+0x1310>
  806404:	60bfffc4 	addi	r2,r12,-1
  806408:	100490fa 	slli	r2,r2,3
  80640c:	00c02074 	movhi	r3,129
  806410:	18ccc504 	addi	r3,r3,13076
  806414:	1885883a 	add	r2,r3,r2
  806418:	11800017 	ldw	r6,0(r2)
  80641c:	11c00117 	ldw	r7,4(r2)
  806420:	d8800717 	ldw	r2,28(sp)
  806424:	0009883a 	mov	r4,zero
  806428:	014ff834 	movhi	r5,16352
  80642c:	db001615 	stw	r12,88(sp)
  806430:	15c00044 	addi	r23,r2,1
  806434:	080ce180 	call	80ce18 <__divdf3>
  806438:	800d883a 	mov	r6,r16
  80643c:	880f883a 	mov	r7,r17
  806440:	1009883a 	mov	r4,r2
  806444:	180b883a 	mov	r5,r3
  806448:	080e0700 	call	80e070 <__subdf3>
  80644c:	d9401017 	ldw	r5,64(sp)
  806450:	d9000f17 	ldw	r4,60(sp)
  806454:	102b883a 	mov	r21,r2
  806458:	d8c01215 	stw	r3,72(sp)
  80645c:	080e96c0 	call	80e96c <__fixdfsi>
  806460:	1009883a 	mov	r4,r2
  806464:	1029883a 	mov	r20,r2
  806468:	080e9ec0 	call	80e9ec <__floatsidf>
  80646c:	d9000f17 	ldw	r4,60(sp)
  806470:	d9401017 	ldw	r5,64(sp)
  806474:	100d883a 	mov	r6,r2
  806478:	180f883a 	mov	r7,r3
  80647c:	080e0700 	call	80e070 <__subdf3>
  806480:	1823883a 	mov	r17,r3
  806484:	d8c00717 	ldw	r3,28(sp)
  806488:	d9401217 	ldw	r5,72(sp)
  80648c:	a2000c04 	addi	r8,r20,48
  806490:	1021883a 	mov	r16,r2
  806494:	1a000005 	stb	r8,0(r3)
  806498:	800d883a 	mov	r6,r16
  80649c:	880f883a 	mov	r7,r17
  8064a0:	a809883a 	mov	r4,r21
  8064a4:	4029883a 	mov	r20,r8
  8064a8:	080d7880 	call	80d788 <__gedf2>
  8064ac:	00841d16 	blt	zero,r2,807524 <_dtoa_r+0x15f4>
  8064b0:	800d883a 	mov	r6,r16
  8064b4:	880f883a 	mov	r7,r17
  8064b8:	0009883a 	mov	r4,zero
  8064bc:	014ffc34 	movhi	r5,16368
  8064c0:	080e0700 	call	80e070 <__subdf3>
  8064c4:	d9401217 	ldw	r5,72(sp)
  8064c8:	100d883a 	mov	r6,r2
  8064cc:	180f883a 	mov	r7,r3
  8064d0:	a809883a 	mov	r4,r21
  8064d4:	080d7880 	call	80d788 <__gedf2>
  8064d8:	db001617 	ldw	r12,88(sp)
  8064dc:	00840e16 	blt	zero,r2,807518 <_dtoa_r+0x15e8>
  8064e0:	00800044 	movi	r2,1
  8064e4:	13006b0e 	bge	r2,r12,806694 <_dtoa_r+0x764>
  8064e8:	d9000717 	ldw	r4,28(sp)
  8064ec:	dd800f15 	stw	r22,60(sp)
  8064f0:	dcc01015 	stw	r19,64(sp)
  8064f4:	2319883a 	add	r12,r4,r12
  8064f8:	dcc01217 	ldw	r19,72(sp)
  8064fc:	602d883a 	mov	r22,r12
  806500:	dc801215 	stw	r18,72(sp)
  806504:	b825883a 	mov	r18,r23
  806508:	00000906 	br	806530 <_dtoa_r+0x600>
  80650c:	080e0700 	call	80e070 <__subdf3>
  806510:	a80d883a 	mov	r6,r21
  806514:	980f883a 	mov	r7,r19
  806518:	1009883a 	mov	r4,r2
  80651c:	180b883a 	mov	r5,r3
  806520:	080d8640 	call	80d864 <__ledf2>
  806524:	1003e816 	blt	r2,zero,8074c8 <_dtoa_r+0x1598>
  806528:	b825883a 	mov	r18,r23
  80652c:	bd83e926 	beq	r23,r22,8074d4 <_dtoa_r+0x15a4>
  806530:	a809883a 	mov	r4,r21
  806534:	980b883a 	mov	r5,r19
  806538:	000d883a 	mov	r6,zero
  80653c:	01d00934 	movhi	r7,16420
  806540:	080d9580 	call	80d958 <__muldf3>
  806544:	000d883a 	mov	r6,zero
  806548:	01d00934 	movhi	r7,16420
  80654c:	8009883a 	mov	r4,r16
  806550:	880b883a 	mov	r5,r17
  806554:	102b883a 	mov	r21,r2
  806558:	1827883a 	mov	r19,r3
  80655c:	080d9580 	call	80d958 <__muldf3>
  806560:	180b883a 	mov	r5,r3
  806564:	1009883a 	mov	r4,r2
  806568:	1821883a 	mov	r16,r3
  80656c:	1023883a 	mov	r17,r2
  806570:	080e96c0 	call	80e96c <__fixdfsi>
  806574:	1009883a 	mov	r4,r2
  806578:	1029883a 	mov	r20,r2
  80657c:	080e9ec0 	call	80e9ec <__floatsidf>
  806580:	8809883a 	mov	r4,r17
  806584:	800b883a 	mov	r5,r16
  806588:	100d883a 	mov	r6,r2
  80658c:	180f883a 	mov	r7,r3
  806590:	080e0700 	call	80e070 <__subdf3>
  806594:	a5000c04 	addi	r20,r20,48
  806598:	a80d883a 	mov	r6,r21
  80659c:	980f883a 	mov	r7,r19
  8065a0:	1009883a 	mov	r4,r2
  8065a4:	180b883a 	mov	r5,r3
  8065a8:	95000005 	stb	r20,0(r18)
  8065ac:	1021883a 	mov	r16,r2
  8065b0:	1823883a 	mov	r17,r3
  8065b4:	080d8640 	call	80d864 <__ledf2>
  8065b8:	bdc00044 	addi	r23,r23,1
  8065bc:	800d883a 	mov	r6,r16
  8065c0:	880f883a 	mov	r7,r17
  8065c4:	0009883a 	mov	r4,zero
  8065c8:	014ffc34 	movhi	r5,16368
  8065cc:	103fcf0e 	bge	r2,zero,80650c <__alt_mem_onchip_mem+0xff7fe50c>
  8065d0:	d8c01317 	ldw	r3,76(sp)
  8065d4:	d8c00515 	stw	r3,20(sp)
  8065d8:	d9400917 	ldw	r5,36(sp)
  8065dc:	e009883a 	mov	r4,fp
  8065e0:	08088c00 	call	8088c0 <_Bfree>
  8065e4:	d9000517 	ldw	r4,20(sp)
  8065e8:	d9802317 	ldw	r6,140(sp)
  8065ec:	d9c02517 	ldw	r7,148(sp)
  8065f0:	b8000005 	stb	zero,0(r23)
  8065f4:	20800044 	addi	r2,r4,1
  8065f8:	30800015 	stw	r2,0(r6)
  8065fc:	3802aa26 	beq	r7,zero,8070a8 <_dtoa_r+0x1178>
  806600:	3dc00015 	stw	r23,0(r7)
  806604:	d8800717 	ldw	r2,28(sp)
  806608:	003e7906 	br	805ff0 <__alt_mem_onchip_mem+0xff7fdff0>
  80660c:	00800434 	movhi	r2,16
  806610:	10bfffc4 	addi	r2,r2,-1
  806614:	88a2703a 	and	r17,r17,r2
  806618:	883e851e 	bne	r17,zero,806030 <__alt_mem_onchip_mem+0xff7fe030>
  80661c:	00802074 	movhi	r2,129
  806620:	108ca704 	addi	r2,r2,12956
  806624:	003e8406 	br	806038 <__alt_mem_onchip_mem+0xff7fe038>
  806628:	10c00204 	addi	r3,r2,8
  80662c:	003e8706 	br	80604c <__alt_mem_onchip_mem+0xff7fe04c>
  806630:	01400434 	movhi	r5,16
  806634:	297fffc4 	addi	r5,r5,-1
  806638:	994a703a 	and	r5,r19,r5
  80663c:	9009883a 	mov	r4,r18
  806640:	843f0044 	addi	r16,r16,-1023
  806644:	294ffc34 	orhi	r5,r5,16368
  806648:	dd800217 	ldw	r22,8(sp)
  80664c:	d8001115 	stw	zero,68(sp)
  806650:	003ea506 	br	8060e8 <__alt_mem_onchip_mem+0xff7fe0e8>
  806654:	00802074 	movhi	r2,129
  806658:	108bfe04 	addi	r2,r2,12280
  80665c:	003e6406 	br	805ff0 <__alt_mem_onchip_mem+0xff7fdff0>
  806660:	e0001115 	stw	zero,68(fp)
  806664:	000b883a 	mov	r5,zero
  806668:	e009883a 	mov	r4,fp
  80666c:	08088180 	call	808818 <_Balloc>
  806670:	01bfffc4 	movi	r6,-1
  806674:	01c00044 	movi	r7,1
  806678:	d8800715 	stw	r2,28(sp)
  80667c:	d9800c15 	stw	r6,48(sp)
  806680:	e0801015 	stw	r2,64(fp)
  806684:	d8000315 	stw	zero,12(sp)
  806688:	d9c00b15 	stw	r7,44(sp)
  80668c:	d9800615 	stw	r6,24(sp)
  806690:	d8002215 	stw	zero,136(sp)
  806694:	d8800117 	ldw	r2,4(sp)
  806698:	10008916 	blt	r2,zero,8068c0 <_dtoa_r+0x990>
  80669c:	d9000517 	ldw	r4,20(sp)
  8066a0:	00c00384 	movi	r3,14
  8066a4:	19008616 	blt	r3,r4,8068c0 <_dtoa_r+0x990>
  8066a8:	200490fa 	slli	r2,r4,3
  8066ac:	00c02074 	movhi	r3,129
  8066b0:	d9802217 	ldw	r6,136(sp)
  8066b4:	18ccc504 	addi	r3,r3,13076
  8066b8:	1885883a 	add	r2,r3,r2
  8066bc:	14000017 	ldw	r16,0(r2)
  8066c0:	14400117 	ldw	r17,4(r2)
  8066c4:	30016316 	blt	r6,zero,806c54 <_dtoa_r+0xd24>
  8066c8:	800d883a 	mov	r6,r16
  8066cc:	880f883a 	mov	r7,r17
  8066d0:	9009883a 	mov	r4,r18
  8066d4:	980b883a 	mov	r5,r19
  8066d8:	080ce180 	call	80ce18 <__divdf3>
  8066dc:	180b883a 	mov	r5,r3
  8066e0:	1009883a 	mov	r4,r2
  8066e4:	080e96c0 	call	80e96c <__fixdfsi>
  8066e8:	1009883a 	mov	r4,r2
  8066ec:	102b883a 	mov	r21,r2
  8066f0:	080e9ec0 	call	80e9ec <__floatsidf>
  8066f4:	800d883a 	mov	r6,r16
  8066f8:	880f883a 	mov	r7,r17
  8066fc:	1009883a 	mov	r4,r2
  806700:	180b883a 	mov	r5,r3
  806704:	080d9580 	call	80d958 <__muldf3>
  806708:	100d883a 	mov	r6,r2
  80670c:	180f883a 	mov	r7,r3
  806710:	9009883a 	mov	r4,r18
  806714:	980b883a 	mov	r5,r19
  806718:	080e0700 	call	80e070 <__subdf3>
  80671c:	d9c00717 	ldw	r7,28(sp)
  806720:	1009883a 	mov	r4,r2
  806724:	a8800c04 	addi	r2,r21,48
  806728:	38800005 	stb	r2,0(r7)
  80672c:	3dc00044 	addi	r23,r7,1
  806730:	d9c00617 	ldw	r7,24(sp)
  806734:	01800044 	movi	r6,1
  806738:	180b883a 	mov	r5,r3
  80673c:	2005883a 	mov	r2,r4
  806740:	39803826 	beq	r7,r6,806824 <_dtoa_r+0x8f4>
  806744:	000d883a 	mov	r6,zero
  806748:	01d00934 	movhi	r7,16420
  80674c:	080d9580 	call	80d958 <__muldf3>
  806750:	000d883a 	mov	r6,zero
  806754:	000f883a 	mov	r7,zero
  806758:	1009883a 	mov	r4,r2
  80675c:	180b883a 	mov	r5,r3
  806760:	1025883a 	mov	r18,r2
  806764:	1827883a 	mov	r19,r3
  806768:	080d7000 	call	80d700 <__eqdf2>
  80676c:	103f9a26 	beq	r2,zero,8065d8 <__alt_mem_onchip_mem+0xff7fe5d8>
  806770:	d9c00617 	ldw	r7,24(sp)
  806774:	d8c00717 	ldw	r3,28(sp)
  806778:	b829883a 	mov	r20,r23
  80677c:	38bfffc4 	addi	r2,r7,-1
  806780:	18ad883a 	add	r22,r3,r2
  806784:	00000a06 	br	8067b0 <_dtoa_r+0x880>
  806788:	080d9580 	call	80d958 <__muldf3>
  80678c:	000d883a 	mov	r6,zero
  806790:	000f883a 	mov	r7,zero
  806794:	1009883a 	mov	r4,r2
  806798:	180b883a 	mov	r5,r3
  80679c:	1025883a 	mov	r18,r2
  8067a0:	1827883a 	mov	r19,r3
  8067a4:	b829883a 	mov	r20,r23
  8067a8:	080d7000 	call	80d700 <__eqdf2>
  8067ac:	103f8a26 	beq	r2,zero,8065d8 <__alt_mem_onchip_mem+0xff7fe5d8>
  8067b0:	800d883a 	mov	r6,r16
  8067b4:	880f883a 	mov	r7,r17
  8067b8:	9009883a 	mov	r4,r18
  8067bc:	980b883a 	mov	r5,r19
  8067c0:	080ce180 	call	80ce18 <__divdf3>
  8067c4:	180b883a 	mov	r5,r3
  8067c8:	1009883a 	mov	r4,r2
  8067cc:	080e96c0 	call	80e96c <__fixdfsi>
  8067d0:	1009883a 	mov	r4,r2
  8067d4:	102b883a 	mov	r21,r2
  8067d8:	080e9ec0 	call	80e9ec <__floatsidf>
  8067dc:	800d883a 	mov	r6,r16
  8067e0:	880f883a 	mov	r7,r17
  8067e4:	1009883a 	mov	r4,r2
  8067e8:	180b883a 	mov	r5,r3
  8067ec:	080d9580 	call	80d958 <__muldf3>
  8067f0:	100d883a 	mov	r6,r2
  8067f4:	180f883a 	mov	r7,r3
  8067f8:	9009883a 	mov	r4,r18
  8067fc:	980b883a 	mov	r5,r19
  806800:	080e0700 	call	80e070 <__subdf3>
  806804:	aa000c04 	addi	r8,r21,48
  806808:	a2000005 	stb	r8,0(r20)
  80680c:	000d883a 	mov	r6,zero
  806810:	01d00934 	movhi	r7,16420
  806814:	1009883a 	mov	r4,r2
  806818:	180b883a 	mov	r5,r3
  80681c:	a5c00044 	addi	r23,r20,1
  806820:	b53fd91e 	bne	r22,r20,806788 <__alt_mem_onchip_mem+0xff7fe788>
  806824:	100d883a 	mov	r6,r2
  806828:	180f883a 	mov	r7,r3
  80682c:	1009883a 	mov	r4,r2
  806830:	180b883a 	mov	r5,r3
  806834:	080c56c0 	call	80c56c <__adddf3>
  806838:	100d883a 	mov	r6,r2
  80683c:	180f883a 	mov	r7,r3
  806840:	8009883a 	mov	r4,r16
  806844:	880b883a 	mov	r5,r17
  806848:	1027883a 	mov	r19,r2
  80684c:	1825883a 	mov	r18,r3
  806850:	080d8640 	call	80d864 <__ledf2>
  806854:	10000816 	blt	r2,zero,806878 <_dtoa_r+0x948>
  806858:	980d883a 	mov	r6,r19
  80685c:	900f883a 	mov	r7,r18
  806860:	8009883a 	mov	r4,r16
  806864:	880b883a 	mov	r5,r17
  806868:	080d7000 	call	80d700 <__eqdf2>
  80686c:	103f5a1e 	bne	r2,zero,8065d8 <__alt_mem_onchip_mem+0xff7fe5d8>
  806870:	ad40004c 	andi	r21,r21,1
  806874:	a83f5826 	beq	r21,zero,8065d8 <__alt_mem_onchip_mem+0xff7fe5d8>
  806878:	bd3fffc3 	ldbu	r20,-1(r23)
  80687c:	b8bfffc4 	addi	r2,r23,-1
  806880:	1007883a 	mov	r3,r2
  806884:	01400e44 	movi	r5,57
  806888:	d9800717 	ldw	r6,28(sp)
  80688c:	00000506 	br	8068a4 <_dtoa_r+0x974>
  806890:	18ffffc4 	addi	r3,r3,-1
  806894:	11824726 	beq	r2,r6,8071b4 <_dtoa_r+0x1284>
  806898:	1d000003 	ldbu	r20,0(r3)
  80689c:	102f883a 	mov	r23,r2
  8068a0:	10bfffc4 	addi	r2,r2,-1
  8068a4:	a1003fcc 	andi	r4,r20,255
  8068a8:	2100201c 	xori	r4,r4,128
  8068ac:	213fe004 	addi	r4,r4,-128
  8068b0:	217ff726 	beq	r4,r5,806890 <__alt_mem_onchip_mem+0xff7fe890>
  8068b4:	a2000044 	addi	r8,r20,1
  8068b8:	12000005 	stb	r8,0(r2)
  8068bc:	003f4606 	br	8065d8 <__alt_mem_onchip_mem+0xff7fe5d8>
  8068c0:	d9000b17 	ldw	r4,44(sp)
  8068c4:	2000c826 	beq	r4,zero,806be8 <_dtoa_r+0xcb8>
  8068c8:	d9800317 	ldw	r6,12(sp)
  8068cc:	00c00044 	movi	r3,1
  8068d0:	1980f90e 	bge	r3,r6,806cb8 <_dtoa_r+0xd88>
  8068d4:	d8800617 	ldw	r2,24(sp)
  8068d8:	d8c00a17 	ldw	r3,40(sp)
  8068dc:	157fffc4 	addi	r21,r2,-1
  8068e0:	1d41f316 	blt	r3,r21,8070b0 <_dtoa_r+0x1180>
  8068e4:	1d6bc83a 	sub	r21,r3,r21
  8068e8:	d9c00617 	ldw	r7,24(sp)
  8068ec:	3802aa16 	blt	r7,zero,807398 <_dtoa_r+0x1468>
  8068f0:	dd000817 	ldw	r20,32(sp)
  8068f4:	d8800617 	ldw	r2,24(sp)
  8068f8:	d8c00817 	ldw	r3,32(sp)
  8068fc:	01400044 	movi	r5,1
  806900:	e009883a 	mov	r4,fp
  806904:	1887883a 	add	r3,r3,r2
  806908:	d8c00815 	stw	r3,32(sp)
  80690c:	b0ad883a 	add	r22,r22,r2
  806910:	0808c240 	call	808c24 <__i2b>
  806914:	1023883a 	mov	r17,r2
  806918:	a0000826 	beq	r20,zero,80693c <_dtoa_r+0xa0c>
  80691c:	0580070e 	bge	zero,r22,80693c <_dtoa_r+0xa0c>
  806920:	a005883a 	mov	r2,r20
  806924:	b500b916 	blt	r22,r20,806c0c <_dtoa_r+0xcdc>
  806928:	d9000817 	ldw	r4,32(sp)
  80692c:	a0a9c83a 	sub	r20,r20,r2
  806930:	b0adc83a 	sub	r22,r22,r2
  806934:	2089c83a 	sub	r4,r4,r2
  806938:	d9000815 	stw	r4,32(sp)
  80693c:	d9800a17 	ldw	r6,40(sp)
  806940:	0181810e 	bge	zero,r6,806f48 <_dtoa_r+0x1018>
  806944:	d9c00b17 	ldw	r7,44(sp)
  806948:	3800b326 	beq	r7,zero,806c18 <_dtoa_r+0xce8>
  80694c:	a800b226 	beq	r21,zero,806c18 <_dtoa_r+0xce8>
  806950:	880b883a 	mov	r5,r17
  806954:	a80d883a 	mov	r6,r21
  806958:	e009883a 	mov	r4,fp
  80695c:	0808e580 	call	808e58 <__pow5mult>
  806960:	d9800917 	ldw	r6,36(sp)
  806964:	100b883a 	mov	r5,r2
  806968:	e009883a 	mov	r4,fp
  80696c:	1023883a 	mov	r17,r2
  806970:	0808c600 	call	808c60 <__multiply>
  806974:	1021883a 	mov	r16,r2
  806978:	d8800a17 	ldw	r2,40(sp)
  80697c:	d9400917 	ldw	r5,36(sp)
  806980:	e009883a 	mov	r4,fp
  806984:	1545c83a 	sub	r2,r2,r21
  806988:	d8800a15 	stw	r2,40(sp)
  80698c:	08088c00 	call	8088c0 <_Bfree>
  806990:	d8c00a17 	ldw	r3,40(sp)
  806994:	18009f1e 	bne	r3,zero,806c14 <_dtoa_r+0xce4>
  806998:	05c00044 	movi	r23,1
  80699c:	e009883a 	mov	r4,fp
  8069a0:	b80b883a 	mov	r5,r23
  8069a4:	0808c240 	call	808c24 <__i2b>
  8069a8:	d9000d17 	ldw	r4,52(sp)
  8069ac:	102b883a 	mov	r21,r2
  8069b0:	2000ce26 	beq	r4,zero,806cec <_dtoa_r+0xdbc>
  8069b4:	200d883a 	mov	r6,r4
  8069b8:	100b883a 	mov	r5,r2
  8069bc:	e009883a 	mov	r4,fp
  8069c0:	0808e580 	call	808e58 <__pow5mult>
  8069c4:	d9800317 	ldw	r6,12(sp)
  8069c8:	102b883a 	mov	r21,r2
  8069cc:	b981810e 	bge	r23,r6,806fd4 <_dtoa_r+0x10a4>
  8069d0:	0027883a 	mov	r19,zero
  8069d4:	a8800417 	ldw	r2,16(r21)
  8069d8:	05c00804 	movi	r23,32
  8069dc:	10800104 	addi	r2,r2,4
  8069e0:	1085883a 	add	r2,r2,r2
  8069e4:	1085883a 	add	r2,r2,r2
  8069e8:	a885883a 	add	r2,r21,r2
  8069ec:	11000017 	ldw	r4,0(r2)
  8069f0:	0808b0c0 	call	808b0c <__hi0bits>
  8069f4:	b885c83a 	sub	r2,r23,r2
  8069f8:	1585883a 	add	r2,r2,r22
  8069fc:	108007cc 	andi	r2,r2,31
  806a00:	1000b326 	beq	r2,zero,806cd0 <_dtoa_r+0xda0>
  806a04:	00c00804 	movi	r3,32
  806a08:	1887c83a 	sub	r3,r3,r2
  806a0c:	01000104 	movi	r4,4
  806a10:	20c2cd0e 	bge	r4,r3,807548 <_dtoa_r+0x1618>
  806a14:	00c00704 	movi	r3,28
  806a18:	1885c83a 	sub	r2,r3,r2
  806a1c:	d8c00817 	ldw	r3,32(sp)
  806a20:	a0a9883a 	add	r20,r20,r2
  806a24:	b0ad883a 	add	r22,r22,r2
  806a28:	1887883a 	add	r3,r3,r2
  806a2c:	d8c00815 	stw	r3,32(sp)
  806a30:	d9800817 	ldw	r6,32(sp)
  806a34:	0180040e 	bge	zero,r6,806a48 <_dtoa_r+0xb18>
  806a38:	800b883a 	mov	r5,r16
  806a3c:	e009883a 	mov	r4,fp
  806a40:	0808f980 	call	808f98 <__lshift>
  806a44:	1021883a 	mov	r16,r2
  806a48:	0580050e 	bge	zero,r22,806a60 <_dtoa_r+0xb30>
  806a4c:	a80b883a 	mov	r5,r21
  806a50:	b00d883a 	mov	r6,r22
  806a54:	e009883a 	mov	r4,fp
  806a58:	0808f980 	call	808f98 <__lshift>
  806a5c:	102b883a 	mov	r21,r2
  806a60:	d9c00e17 	ldw	r7,56(sp)
  806a64:	3801211e 	bne	r7,zero,806eec <_dtoa_r+0xfbc>
  806a68:	d9800617 	ldw	r6,24(sp)
  806a6c:	0181380e 	bge	zero,r6,806f50 <_dtoa_r+0x1020>
  806a70:	d8c00b17 	ldw	r3,44(sp)
  806a74:	1800ab1e 	bne	r3,zero,806d24 <_dtoa_r+0xdf4>
  806a78:	dc800717 	ldw	r18,28(sp)
  806a7c:	dcc00617 	ldw	r19,24(sp)
  806a80:	9029883a 	mov	r20,r18
  806a84:	00000206 	br	806a90 <_dtoa_r+0xb60>
  806a88:	08088e80 	call	8088e8 <__multadd>
  806a8c:	1021883a 	mov	r16,r2
  806a90:	a80b883a 	mov	r5,r21
  806a94:	8009883a 	mov	r4,r16
  806a98:	0805d300 	call	805d30 <quorem>
  806a9c:	10800c04 	addi	r2,r2,48
  806aa0:	90800005 	stb	r2,0(r18)
  806aa4:	94800044 	addi	r18,r18,1
  806aa8:	9507c83a 	sub	r3,r18,r20
  806aac:	000f883a 	mov	r7,zero
  806ab0:	01800284 	movi	r6,10
  806ab4:	800b883a 	mov	r5,r16
  806ab8:	e009883a 	mov	r4,fp
  806abc:	1cfff216 	blt	r3,r19,806a88 <__alt_mem_onchip_mem+0xff7fea88>
  806ac0:	1011883a 	mov	r8,r2
  806ac4:	d8800617 	ldw	r2,24(sp)
  806ac8:	0082370e 	bge	zero,r2,8073a8 <_dtoa_r+0x1478>
  806acc:	d9000717 	ldw	r4,28(sp)
  806ad0:	0025883a 	mov	r18,zero
  806ad4:	20af883a 	add	r23,r4,r2
  806ad8:	01800044 	movi	r6,1
  806adc:	800b883a 	mov	r5,r16
  806ae0:	e009883a 	mov	r4,fp
  806ae4:	da001715 	stw	r8,92(sp)
  806ae8:	0808f980 	call	808f98 <__lshift>
  806aec:	a80b883a 	mov	r5,r21
  806af0:	1009883a 	mov	r4,r2
  806af4:	d8800915 	stw	r2,36(sp)
  806af8:	08090e00 	call	8090e0 <__mcmp>
  806afc:	da001717 	ldw	r8,92(sp)
  806b00:	0081800e 	bge	zero,r2,807104 <_dtoa_r+0x11d4>
  806b04:	b93fffc3 	ldbu	r4,-1(r23)
  806b08:	b8bfffc4 	addi	r2,r23,-1
  806b0c:	1007883a 	mov	r3,r2
  806b10:	01800e44 	movi	r6,57
  806b14:	d9c00717 	ldw	r7,28(sp)
  806b18:	00000506 	br	806b30 <_dtoa_r+0xc00>
  806b1c:	18ffffc4 	addi	r3,r3,-1
  806b20:	11c12326 	beq	r2,r7,806fb0 <_dtoa_r+0x1080>
  806b24:	19000003 	ldbu	r4,0(r3)
  806b28:	102f883a 	mov	r23,r2
  806b2c:	10bfffc4 	addi	r2,r2,-1
  806b30:	21403fcc 	andi	r5,r4,255
  806b34:	2940201c 	xori	r5,r5,128
  806b38:	297fe004 	addi	r5,r5,-128
  806b3c:	29bff726 	beq	r5,r6,806b1c <__alt_mem_onchip_mem+0xff7feb1c>
  806b40:	21000044 	addi	r4,r4,1
  806b44:	11000005 	stb	r4,0(r2)
  806b48:	a80b883a 	mov	r5,r21
  806b4c:	e009883a 	mov	r4,fp
  806b50:	08088c00 	call	8088c0 <_Bfree>
  806b54:	883ea026 	beq	r17,zero,8065d8 <__alt_mem_onchip_mem+0xff7fe5d8>
  806b58:	90000426 	beq	r18,zero,806b6c <_dtoa_r+0xc3c>
  806b5c:	94400326 	beq	r18,r17,806b6c <_dtoa_r+0xc3c>
  806b60:	900b883a 	mov	r5,r18
  806b64:	e009883a 	mov	r4,fp
  806b68:	08088c00 	call	8088c0 <_Bfree>
  806b6c:	880b883a 	mov	r5,r17
  806b70:	e009883a 	mov	r4,fp
  806b74:	08088c00 	call	8088c0 <_Bfree>
  806b78:	003e9706 	br	8065d8 <__alt_mem_onchip_mem+0xff7fe5d8>
  806b7c:	01800044 	movi	r6,1
  806b80:	d9800e15 	stw	r6,56(sp)
  806b84:	003d9606 	br	8061e0 <__alt_mem_onchip_mem+0xff7fe1e0>
  806b88:	d8800817 	ldw	r2,32(sp)
  806b8c:	d8c00517 	ldw	r3,20(sp)
  806b90:	d8000d15 	stw	zero,52(sp)
  806b94:	10c5c83a 	sub	r2,r2,r3
  806b98:	00c9c83a 	sub	r4,zero,r3
  806b9c:	d8800815 	stw	r2,32(sp)
  806ba0:	d9000a15 	stw	r4,40(sp)
  806ba4:	003d9706 	br	806204 <__alt_mem_onchip_mem+0xff7fe204>
  806ba8:	05adc83a 	sub	r22,zero,r22
  806bac:	dd800815 	stw	r22,32(sp)
  806bb0:	002d883a 	mov	r22,zero
  806bb4:	003d8e06 	br	8061f0 <__alt_mem_onchip_mem+0xff7fe1f0>
  806bb8:	d9000517 	ldw	r4,20(sp)
  806bbc:	080e9ec0 	call	80e9ec <__floatsidf>
  806bc0:	100d883a 	mov	r6,r2
  806bc4:	180f883a 	mov	r7,r3
  806bc8:	a009883a 	mov	r4,r20
  806bcc:	880b883a 	mov	r5,r17
  806bd0:	080d7000 	call	80d700 <__eqdf2>
  806bd4:	103d7126 	beq	r2,zero,80619c <__alt_mem_onchip_mem+0xff7fe19c>
  806bd8:	d9c00517 	ldw	r7,20(sp)
  806bdc:	39ffffc4 	addi	r7,r7,-1
  806be0:	d9c00515 	stw	r7,20(sp)
  806be4:	003d6d06 	br	80619c <__alt_mem_onchip_mem+0xff7fe19c>
  806be8:	dd400a17 	ldw	r21,40(sp)
  806bec:	dd000817 	ldw	r20,32(sp)
  806bf0:	0023883a 	mov	r17,zero
  806bf4:	003f4806 	br	806918 <__alt_mem_onchip_mem+0xff7fe918>
  806bf8:	10e3c83a 	sub	r17,r2,r3
  806bfc:	9448983a 	sll	r4,r18,r17
  806c00:	003d3206 	br	8060cc <__alt_mem_onchip_mem+0xff7fe0cc>
  806c04:	d8000e15 	stw	zero,56(sp)
  806c08:	003d7506 	br	8061e0 <__alt_mem_onchip_mem+0xff7fe1e0>
  806c0c:	b005883a 	mov	r2,r22
  806c10:	003f4506 	br	806928 <__alt_mem_onchip_mem+0xff7fe928>
  806c14:	dc000915 	stw	r16,36(sp)
  806c18:	d9800a17 	ldw	r6,40(sp)
  806c1c:	d9400917 	ldw	r5,36(sp)
  806c20:	e009883a 	mov	r4,fp
  806c24:	0808e580 	call	808e58 <__pow5mult>
  806c28:	1021883a 	mov	r16,r2
  806c2c:	003f5a06 	br	806998 <__alt_mem_onchip_mem+0xff7fe998>
  806c30:	01c00044 	movi	r7,1
  806c34:	d9c00b15 	stw	r7,44(sp)
  806c38:	d8802217 	ldw	r2,136(sp)
  806c3c:	0081280e 	bge	zero,r2,8070e0 <_dtoa_r+0x11b0>
  806c40:	100d883a 	mov	r6,r2
  806c44:	1021883a 	mov	r16,r2
  806c48:	d8800c15 	stw	r2,48(sp)
  806c4c:	d8800615 	stw	r2,24(sp)
  806c50:	003d8806 	br	806274 <__alt_mem_onchip_mem+0xff7fe274>
  806c54:	d8800617 	ldw	r2,24(sp)
  806c58:	00be9b16 	blt	zero,r2,8066c8 <__alt_mem_onchip_mem+0xff7fe6c8>
  806c5c:	10010f1e 	bne	r2,zero,80709c <_dtoa_r+0x116c>
  806c60:	880b883a 	mov	r5,r17
  806c64:	000d883a 	mov	r6,zero
  806c68:	01d00534 	movhi	r7,16404
  806c6c:	8009883a 	mov	r4,r16
  806c70:	080d9580 	call	80d958 <__muldf3>
  806c74:	900d883a 	mov	r6,r18
  806c78:	980f883a 	mov	r7,r19
  806c7c:	1009883a 	mov	r4,r2
  806c80:	180b883a 	mov	r5,r3
  806c84:	080d7880 	call	80d788 <__gedf2>
  806c88:	002b883a 	mov	r21,zero
  806c8c:	0023883a 	mov	r17,zero
  806c90:	1000bf16 	blt	r2,zero,806f90 <_dtoa_r+0x1060>
  806c94:	d9802217 	ldw	r6,136(sp)
  806c98:	ddc00717 	ldw	r23,28(sp)
  806c9c:	018c303a 	nor	r6,zero,r6
  806ca0:	d9800515 	stw	r6,20(sp)
  806ca4:	a80b883a 	mov	r5,r21
  806ca8:	e009883a 	mov	r4,fp
  806cac:	08088c00 	call	8088c0 <_Bfree>
  806cb0:	883e4926 	beq	r17,zero,8065d8 <__alt_mem_onchip_mem+0xff7fe5d8>
  806cb4:	003fad06 	br	806b6c <__alt_mem_onchip_mem+0xff7feb6c>
  806cb8:	d9c01117 	ldw	r7,68(sp)
  806cbc:	3801bc26 	beq	r7,zero,8073b0 <_dtoa_r+0x1480>
  806cc0:	10810cc4 	addi	r2,r2,1075
  806cc4:	dd400a17 	ldw	r21,40(sp)
  806cc8:	dd000817 	ldw	r20,32(sp)
  806ccc:	003f0a06 	br	8068f8 <__alt_mem_onchip_mem+0xff7fe8f8>
  806cd0:	00800704 	movi	r2,28
  806cd4:	d9000817 	ldw	r4,32(sp)
  806cd8:	a0a9883a 	add	r20,r20,r2
  806cdc:	b0ad883a 	add	r22,r22,r2
  806ce0:	2089883a 	add	r4,r4,r2
  806ce4:	d9000815 	stw	r4,32(sp)
  806ce8:	003f5106 	br	806a30 <__alt_mem_onchip_mem+0xff7fea30>
  806cec:	d8c00317 	ldw	r3,12(sp)
  806cf0:	b8c1fc0e 	bge	r23,r3,8074e4 <_dtoa_r+0x15b4>
  806cf4:	0027883a 	mov	r19,zero
  806cf8:	b805883a 	mov	r2,r23
  806cfc:	003f3e06 	br	8069f8 <__alt_mem_onchip_mem+0xff7fe9f8>
  806d00:	880b883a 	mov	r5,r17
  806d04:	e009883a 	mov	r4,fp
  806d08:	000f883a 	mov	r7,zero
  806d0c:	01800284 	movi	r6,10
  806d10:	08088e80 	call	8088e8 <__multadd>
  806d14:	d9000c17 	ldw	r4,48(sp)
  806d18:	1023883a 	mov	r17,r2
  806d1c:	0102040e 	bge	zero,r4,807530 <_dtoa_r+0x1600>
  806d20:	d9000615 	stw	r4,24(sp)
  806d24:	0500050e 	bge	zero,r20,806d3c <_dtoa_r+0xe0c>
  806d28:	880b883a 	mov	r5,r17
  806d2c:	a00d883a 	mov	r6,r20
  806d30:	e009883a 	mov	r4,fp
  806d34:	0808f980 	call	808f98 <__lshift>
  806d38:	1023883a 	mov	r17,r2
  806d3c:	9801241e 	bne	r19,zero,8071d0 <_dtoa_r+0x12a0>
  806d40:	8829883a 	mov	r20,r17
  806d44:	d9000617 	ldw	r4,24(sp)
  806d48:	dcc00717 	ldw	r19,28(sp)
  806d4c:	9480004c 	andi	r18,r18,1
  806d50:	20bfffc4 	addi	r2,r4,-1
  806d54:	9885883a 	add	r2,r19,r2
  806d58:	d8800415 	stw	r2,16(sp)
  806d5c:	dc800615 	stw	r18,24(sp)
  806d60:	a80b883a 	mov	r5,r21
  806d64:	8009883a 	mov	r4,r16
  806d68:	0805d300 	call	805d30 <quorem>
  806d6c:	880b883a 	mov	r5,r17
  806d70:	8009883a 	mov	r4,r16
  806d74:	102f883a 	mov	r23,r2
  806d78:	08090e00 	call	8090e0 <__mcmp>
  806d7c:	a80b883a 	mov	r5,r21
  806d80:	a00d883a 	mov	r6,r20
  806d84:	e009883a 	mov	r4,fp
  806d88:	102d883a 	mov	r22,r2
  806d8c:	08091400 	call	809140 <__mdiff>
  806d90:	1007883a 	mov	r3,r2
  806d94:	10800317 	ldw	r2,12(r2)
  806d98:	bc800c04 	addi	r18,r23,48
  806d9c:	180b883a 	mov	r5,r3
  806da0:	10004e1e 	bne	r2,zero,806edc <_dtoa_r+0xfac>
  806da4:	8009883a 	mov	r4,r16
  806da8:	d8c01615 	stw	r3,88(sp)
  806dac:	08090e00 	call	8090e0 <__mcmp>
  806db0:	d8c01617 	ldw	r3,88(sp)
  806db4:	e009883a 	mov	r4,fp
  806db8:	d8801615 	stw	r2,88(sp)
  806dbc:	180b883a 	mov	r5,r3
  806dc0:	08088c00 	call	8088c0 <_Bfree>
  806dc4:	d8801617 	ldw	r2,88(sp)
  806dc8:	1000041e 	bne	r2,zero,806ddc <_dtoa_r+0xeac>
  806dcc:	d9800317 	ldw	r6,12(sp)
  806dd0:	3000021e 	bne	r6,zero,806ddc <_dtoa_r+0xeac>
  806dd4:	d8c00617 	ldw	r3,24(sp)
  806dd8:	18003726 	beq	r3,zero,806eb8 <_dtoa_r+0xf88>
  806ddc:	b0002016 	blt	r22,zero,806e60 <_dtoa_r+0xf30>
  806de0:	b000041e 	bne	r22,zero,806df4 <_dtoa_r+0xec4>
  806de4:	d9000317 	ldw	r4,12(sp)
  806de8:	2000021e 	bne	r4,zero,806df4 <_dtoa_r+0xec4>
  806dec:	d8c00617 	ldw	r3,24(sp)
  806df0:	18001b26 	beq	r3,zero,806e60 <_dtoa_r+0xf30>
  806df4:	00810716 	blt	zero,r2,807214 <_dtoa_r+0x12e4>
  806df8:	d8c00417 	ldw	r3,16(sp)
  806dfc:	9d800044 	addi	r22,r19,1
  806e00:	9c800005 	stb	r18,0(r19)
  806e04:	b02f883a 	mov	r23,r22
  806e08:	98c10626 	beq	r19,r3,807224 <_dtoa_r+0x12f4>
  806e0c:	800b883a 	mov	r5,r16
  806e10:	000f883a 	mov	r7,zero
  806e14:	01800284 	movi	r6,10
  806e18:	e009883a 	mov	r4,fp
  806e1c:	08088e80 	call	8088e8 <__multadd>
  806e20:	1021883a 	mov	r16,r2
  806e24:	000f883a 	mov	r7,zero
  806e28:	01800284 	movi	r6,10
  806e2c:	880b883a 	mov	r5,r17
  806e30:	e009883a 	mov	r4,fp
  806e34:	8d002526 	beq	r17,r20,806ecc <_dtoa_r+0xf9c>
  806e38:	08088e80 	call	8088e8 <__multadd>
  806e3c:	a00b883a 	mov	r5,r20
  806e40:	000f883a 	mov	r7,zero
  806e44:	01800284 	movi	r6,10
  806e48:	e009883a 	mov	r4,fp
  806e4c:	1023883a 	mov	r17,r2
  806e50:	08088e80 	call	8088e8 <__multadd>
  806e54:	1029883a 	mov	r20,r2
  806e58:	b027883a 	mov	r19,r22
  806e5c:	003fc006 	br	806d60 <__alt_mem_onchip_mem+0xff7fed60>
  806e60:	9011883a 	mov	r8,r18
  806e64:	00800e0e 	bge	zero,r2,806ea0 <_dtoa_r+0xf70>
  806e68:	800b883a 	mov	r5,r16
  806e6c:	01800044 	movi	r6,1
  806e70:	e009883a 	mov	r4,fp
  806e74:	da001715 	stw	r8,92(sp)
  806e78:	0808f980 	call	808f98 <__lshift>
  806e7c:	a80b883a 	mov	r5,r21
  806e80:	1009883a 	mov	r4,r2
  806e84:	1021883a 	mov	r16,r2
  806e88:	08090e00 	call	8090e0 <__mcmp>
  806e8c:	da001717 	ldw	r8,92(sp)
  806e90:	0081960e 	bge	zero,r2,8074ec <_dtoa_r+0x15bc>
  806e94:	00800e44 	movi	r2,57
  806e98:	40817026 	beq	r8,r2,80745c <_dtoa_r+0x152c>
  806e9c:	ba000c44 	addi	r8,r23,49
  806ea0:	8825883a 	mov	r18,r17
  806ea4:	9dc00044 	addi	r23,r19,1
  806ea8:	9a000005 	stb	r8,0(r19)
  806eac:	a023883a 	mov	r17,r20
  806eb0:	dc000915 	stw	r16,36(sp)
  806eb4:	003f2406 	br	806b48 <__alt_mem_onchip_mem+0xff7feb48>
  806eb8:	00800e44 	movi	r2,57
  806ebc:	9011883a 	mov	r8,r18
  806ec0:	90816626 	beq	r18,r2,80745c <_dtoa_r+0x152c>
  806ec4:	05bff516 	blt	zero,r22,806e9c <__alt_mem_onchip_mem+0xff7fee9c>
  806ec8:	003ff506 	br	806ea0 <__alt_mem_onchip_mem+0xff7feea0>
  806ecc:	08088e80 	call	8088e8 <__multadd>
  806ed0:	1023883a 	mov	r17,r2
  806ed4:	1029883a 	mov	r20,r2
  806ed8:	003fdf06 	br	806e58 <__alt_mem_onchip_mem+0xff7fee58>
  806edc:	e009883a 	mov	r4,fp
  806ee0:	08088c00 	call	8088c0 <_Bfree>
  806ee4:	00800044 	movi	r2,1
  806ee8:	003fbc06 	br	806ddc <__alt_mem_onchip_mem+0xff7feddc>
  806eec:	a80b883a 	mov	r5,r21
  806ef0:	8009883a 	mov	r4,r16
  806ef4:	08090e00 	call	8090e0 <__mcmp>
  806ef8:	103edb0e 	bge	r2,zero,806a68 <__alt_mem_onchip_mem+0xff7fea68>
  806efc:	800b883a 	mov	r5,r16
  806f00:	000f883a 	mov	r7,zero
  806f04:	01800284 	movi	r6,10
  806f08:	e009883a 	mov	r4,fp
  806f0c:	08088e80 	call	8088e8 <__multadd>
  806f10:	1021883a 	mov	r16,r2
  806f14:	d8800517 	ldw	r2,20(sp)
  806f18:	d8c00b17 	ldw	r3,44(sp)
  806f1c:	10bfffc4 	addi	r2,r2,-1
  806f20:	d8800515 	stw	r2,20(sp)
  806f24:	183f761e 	bne	r3,zero,806d00 <__alt_mem_onchip_mem+0xff7fed00>
  806f28:	d9000c17 	ldw	r4,48(sp)
  806f2c:	0101730e 	bge	zero,r4,8074fc <_dtoa_r+0x15cc>
  806f30:	d9000615 	stw	r4,24(sp)
  806f34:	003ed006 	br	806a78 <__alt_mem_onchip_mem+0xff7fea78>
  806f38:	00800084 	movi	r2,2
  806f3c:	3081861e 	bne	r6,r2,807558 <_dtoa_r+0x1628>
  806f40:	d8000b15 	stw	zero,44(sp)
  806f44:	003f3c06 	br	806c38 <__alt_mem_onchip_mem+0xff7fec38>
  806f48:	dc000917 	ldw	r16,36(sp)
  806f4c:	003e9206 	br	806998 <__alt_mem_onchip_mem+0xff7fe998>
  806f50:	d9c00317 	ldw	r7,12(sp)
  806f54:	00800084 	movi	r2,2
  806f58:	11fec50e 	bge	r2,r7,806a70 <__alt_mem_onchip_mem+0xff7fea70>
  806f5c:	d9000617 	ldw	r4,24(sp)
  806f60:	20013c1e 	bne	r4,zero,807454 <_dtoa_r+0x1524>
  806f64:	a80b883a 	mov	r5,r21
  806f68:	000f883a 	mov	r7,zero
  806f6c:	01800144 	movi	r6,5
  806f70:	e009883a 	mov	r4,fp
  806f74:	08088e80 	call	8088e8 <__multadd>
  806f78:	100b883a 	mov	r5,r2
  806f7c:	8009883a 	mov	r4,r16
  806f80:	102b883a 	mov	r21,r2
  806f84:	08090e00 	call	8090e0 <__mcmp>
  806f88:	dc000915 	stw	r16,36(sp)
  806f8c:	00bf410e 	bge	zero,r2,806c94 <__alt_mem_onchip_mem+0xff7fec94>
  806f90:	d9c00717 	ldw	r7,28(sp)
  806f94:	00800c44 	movi	r2,49
  806f98:	38800005 	stb	r2,0(r7)
  806f9c:	d8800517 	ldw	r2,20(sp)
  806fa0:	3dc00044 	addi	r23,r7,1
  806fa4:	10800044 	addi	r2,r2,1
  806fa8:	d8800515 	stw	r2,20(sp)
  806fac:	003f3d06 	br	806ca4 <__alt_mem_onchip_mem+0xff7feca4>
  806fb0:	d9800517 	ldw	r6,20(sp)
  806fb4:	d9c00717 	ldw	r7,28(sp)
  806fb8:	00800c44 	movi	r2,49
  806fbc:	31800044 	addi	r6,r6,1
  806fc0:	d9800515 	stw	r6,20(sp)
  806fc4:	38800005 	stb	r2,0(r7)
  806fc8:	003edf06 	br	806b48 <__alt_mem_onchip_mem+0xff7feb48>
  806fcc:	d8000b15 	stw	zero,44(sp)
  806fd0:	003c9f06 	br	806250 <__alt_mem_onchip_mem+0xff7fe250>
  806fd4:	903e7e1e 	bne	r18,zero,8069d0 <__alt_mem_onchip_mem+0xff7fe9d0>
  806fd8:	00800434 	movhi	r2,16
  806fdc:	10bfffc4 	addi	r2,r2,-1
  806fe0:	9884703a 	and	r2,r19,r2
  806fe4:	1000ea1e 	bne	r2,zero,807390 <_dtoa_r+0x1460>
  806fe8:	9cdffc2c 	andhi	r19,r19,32752
  806fec:	9800e826 	beq	r19,zero,807390 <_dtoa_r+0x1460>
  806ff0:	d9c00817 	ldw	r7,32(sp)
  806ff4:	b5800044 	addi	r22,r22,1
  806ff8:	04c00044 	movi	r19,1
  806ffc:	39c00044 	addi	r7,r7,1
  807000:	d9c00815 	stw	r7,32(sp)
  807004:	d8800d17 	ldw	r2,52(sp)
  807008:	103e721e 	bne	r2,zero,8069d4 <__alt_mem_onchip_mem+0xff7fe9d4>
  80700c:	00800044 	movi	r2,1
  807010:	003e7906 	br	8069f8 <__alt_mem_onchip_mem+0xff7fe9f8>
  807014:	8009883a 	mov	r4,r16
  807018:	080e9ec0 	call	80e9ec <__floatsidf>
  80701c:	d9800f17 	ldw	r6,60(sp)
  807020:	d9c01017 	ldw	r7,64(sp)
  807024:	1009883a 	mov	r4,r2
  807028:	180b883a 	mov	r5,r3
  80702c:	080d9580 	call	80d958 <__muldf3>
  807030:	000d883a 	mov	r6,zero
  807034:	01d00734 	movhi	r7,16412
  807038:	1009883a 	mov	r4,r2
  80703c:	180b883a 	mov	r5,r3
  807040:	080c56c0 	call	80c56c <__adddf3>
  807044:	047f3034 	movhi	r17,64704
  807048:	1021883a 	mov	r16,r2
  80704c:	1c63883a 	add	r17,r3,r17
  807050:	d9000f17 	ldw	r4,60(sp)
  807054:	d9401017 	ldw	r5,64(sp)
  807058:	000d883a 	mov	r6,zero
  80705c:	01d00534 	movhi	r7,16404
  807060:	080e0700 	call	80e070 <__subdf3>
  807064:	800d883a 	mov	r6,r16
  807068:	880f883a 	mov	r7,r17
  80706c:	1009883a 	mov	r4,r2
  807070:	180b883a 	mov	r5,r3
  807074:	102b883a 	mov	r21,r2
  807078:	1829883a 	mov	r20,r3
  80707c:	080d7880 	call	80d788 <__gedf2>
  807080:	00806c16 	blt	zero,r2,807234 <_dtoa_r+0x1304>
  807084:	89e0003c 	xorhi	r7,r17,32768
  807088:	800d883a 	mov	r6,r16
  80708c:	a809883a 	mov	r4,r21
  807090:	a00b883a 	mov	r5,r20
  807094:	080d8640 	call	80d864 <__ledf2>
  807098:	103d7e0e 	bge	r2,zero,806694 <__alt_mem_onchip_mem+0xff7fe694>
  80709c:	002b883a 	mov	r21,zero
  8070a0:	0023883a 	mov	r17,zero
  8070a4:	003efb06 	br	806c94 <__alt_mem_onchip_mem+0xff7fec94>
  8070a8:	d8800717 	ldw	r2,28(sp)
  8070ac:	003bd006 	br	805ff0 <__alt_mem_onchip_mem+0xff7fdff0>
  8070b0:	d9000a17 	ldw	r4,40(sp)
  8070b4:	d9800d17 	ldw	r6,52(sp)
  8070b8:	dd400a15 	stw	r21,40(sp)
  8070bc:	a905c83a 	sub	r2,r21,r4
  8070c0:	308d883a 	add	r6,r6,r2
  8070c4:	d9800d15 	stw	r6,52(sp)
  8070c8:	002b883a 	mov	r21,zero
  8070cc:	003e0606 	br	8068e8 <__alt_mem_onchip_mem+0xff7fe8e8>
  8070d0:	9023883a 	mov	r17,r18
  8070d4:	9829883a 	mov	r20,r19
  8070d8:	04000084 	movi	r16,2
  8070dc:	003c9206 	br	806328 <__alt_mem_onchip_mem+0xff7fe328>
  8070e0:	04000044 	movi	r16,1
  8070e4:	dc000c15 	stw	r16,48(sp)
  8070e8:	dc000615 	stw	r16,24(sp)
  8070ec:	dc002215 	stw	r16,136(sp)
  8070f0:	e0001115 	stw	zero,68(fp)
  8070f4:	000b883a 	mov	r5,zero
  8070f8:	003c6906 	br	8062a0 <__alt_mem_onchip_mem+0xff7fe2a0>
  8070fc:	3021883a 	mov	r16,r6
  807100:	003ffb06 	br	8070f0 <__alt_mem_onchip_mem+0xff7ff0f0>
  807104:	1000021e 	bne	r2,zero,807110 <_dtoa_r+0x11e0>
  807108:	4200004c 	andi	r8,r8,1
  80710c:	403e7d1e 	bne	r8,zero,806b04 <__alt_mem_onchip_mem+0xff7feb04>
  807110:	01000c04 	movi	r4,48
  807114:	00000106 	br	80711c <_dtoa_r+0x11ec>
  807118:	102f883a 	mov	r23,r2
  80711c:	b8bfffc4 	addi	r2,r23,-1
  807120:	10c00007 	ldb	r3,0(r2)
  807124:	193ffc26 	beq	r3,r4,807118 <__alt_mem_onchip_mem+0xff7ff118>
  807128:	003e8706 	br	806b48 <__alt_mem_onchip_mem+0xff7feb48>
  80712c:	d8800517 	ldw	r2,20(sp)
  807130:	00a3c83a 	sub	r17,zero,r2
  807134:	8800a426 	beq	r17,zero,8073c8 <_dtoa_r+0x1498>
  807138:	888003cc 	andi	r2,r17,15
  80713c:	100490fa 	slli	r2,r2,3
  807140:	00c02074 	movhi	r3,129
  807144:	18ccc504 	addi	r3,r3,13076
  807148:	1885883a 	add	r2,r3,r2
  80714c:	11800017 	ldw	r6,0(r2)
  807150:	11c00117 	ldw	r7,4(r2)
  807154:	9009883a 	mov	r4,r18
  807158:	980b883a 	mov	r5,r19
  80715c:	8823d13a 	srai	r17,r17,4
  807160:	080d9580 	call	80d958 <__muldf3>
  807164:	d8800f15 	stw	r2,60(sp)
  807168:	d8c01015 	stw	r3,64(sp)
  80716c:	8800e826 	beq	r17,zero,807510 <_dtoa_r+0x15e0>
  807170:	05002074 	movhi	r20,129
  807174:	a50cbb04 	addi	r20,r20,13036
  807178:	04000084 	movi	r16,2
  80717c:	8980004c 	andi	r6,r17,1
  807180:	1009883a 	mov	r4,r2
  807184:	8823d07a 	srai	r17,r17,1
  807188:	180b883a 	mov	r5,r3
  80718c:	30000426 	beq	r6,zero,8071a0 <_dtoa_r+0x1270>
  807190:	a1800017 	ldw	r6,0(r20)
  807194:	a1c00117 	ldw	r7,4(r20)
  807198:	84000044 	addi	r16,r16,1
  80719c:	080d9580 	call	80d958 <__muldf3>
  8071a0:	a5000204 	addi	r20,r20,8
  8071a4:	883ff51e 	bne	r17,zero,80717c <__alt_mem_onchip_mem+0xff7ff17c>
  8071a8:	d8800f15 	stw	r2,60(sp)
  8071ac:	d8c01015 	stw	r3,64(sp)
  8071b0:	003c7606 	br	80638c <__alt_mem_onchip_mem+0xff7fe38c>
  8071b4:	00c00c04 	movi	r3,48
  8071b8:	10c00005 	stb	r3,0(r2)
  8071bc:	d8c00517 	ldw	r3,20(sp)
  8071c0:	bd3fffc3 	ldbu	r20,-1(r23)
  8071c4:	18c00044 	addi	r3,r3,1
  8071c8:	d8c00515 	stw	r3,20(sp)
  8071cc:	003db906 	br	8068b4 <__alt_mem_onchip_mem+0xff7fe8b4>
  8071d0:	89400117 	ldw	r5,4(r17)
  8071d4:	e009883a 	mov	r4,fp
  8071d8:	08088180 	call	808818 <_Balloc>
  8071dc:	89800417 	ldw	r6,16(r17)
  8071e0:	89400304 	addi	r5,r17,12
  8071e4:	11000304 	addi	r4,r2,12
  8071e8:	31800084 	addi	r6,r6,2
  8071ec:	318d883a 	add	r6,r6,r6
  8071f0:	318d883a 	add	r6,r6,r6
  8071f4:	1027883a 	mov	r19,r2
  8071f8:	08085740 	call	808574 <memcpy>
  8071fc:	01800044 	movi	r6,1
  807200:	980b883a 	mov	r5,r19
  807204:	e009883a 	mov	r4,fp
  807208:	0808f980 	call	808f98 <__lshift>
  80720c:	1029883a 	mov	r20,r2
  807210:	003ecc06 	br	806d44 <__alt_mem_onchip_mem+0xff7fed44>
  807214:	00800e44 	movi	r2,57
  807218:	90809026 	beq	r18,r2,80745c <_dtoa_r+0x152c>
  80721c:	92000044 	addi	r8,r18,1
  807220:	003f1f06 	br	806ea0 <__alt_mem_onchip_mem+0xff7feea0>
  807224:	9011883a 	mov	r8,r18
  807228:	8825883a 	mov	r18,r17
  80722c:	a023883a 	mov	r17,r20
  807230:	003e2906 	br	806ad8 <__alt_mem_onchip_mem+0xff7fead8>
  807234:	002b883a 	mov	r21,zero
  807238:	0023883a 	mov	r17,zero
  80723c:	003f5406 	br	806f90 <__alt_mem_onchip_mem+0xff7fef90>
  807240:	61bfffc4 	addi	r6,r12,-1
  807244:	300490fa 	slli	r2,r6,3
  807248:	00c02074 	movhi	r3,129
  80724c:	18ccc504 	addi	r3,r3,13076
  807250:	1885883a 	add	r2,r3,r2
  807254:	11000017 	ldw	r4,0(r2)
  807258:	11400117 	ldw	r5,4(r2)
  80725c:	d8800717 	ldw	r2,28(sp)
  807260:	880f883a 	mov	r7,r17
  807264:	d9801215 	stw	r6,72(sp)
  807268:	800d883a 	mov	r6,r16
  80726c:	db001615 	stw	r12,88(sp)
  807270:	15c00044 	addi	r23,r2,1
  807274:	080d9580 	call	80d958 <__muldf3>
  807278:	d9401017 	ldw	r5,64(sp)
  80727c:	d9000f17 	ldw	r4,60(sp)
  807280:	d8c01515 	stw	r3,84(sp)
  807284:	d8801415 	stw	r2,80(sp)
  807288:	080e96c0 	call	80e96c <__fixdfsi>
  80728c:	1009883a 	mov	r4,r2
  807290:	1021883a 	mov	r16,r2
  807294:	080e9ec0 	call	80e9ec <__floatsidf>
  807298:	d9000f17 	ldw	r4,60(sp)
  80729c:	d9401017 	ldw	r5,64(sp)
  8072a0:	100d883a 	mov	r6,r2
  8072a4:	180f883a 	mov	r7,r3
  8072a8:	080e0700 	call	80e070 <__subdf3>
  8072ac:	1829883a 	mov	r20,r3
  8072b0:	d8c00717 	ldw	r3,28(sp)
  8072b4:	84000c04 	addi	r16,r16,48
  8072b8:	1023883a 	mov	r17,r2
  8072bc:	1c000005 	stb	r16,0(r3)
  8072c0:	db001617 	ldw	r12,88(sp)
  8072c4:	00800044 	movi	r2,1
  8072c8:	60802226 	beq	r12,r2,807354 <_dtoa_r+0x1424>
  8072cc:	d9c00717 	ldw	r7,28(sp)
  8072d0:	8805883a 	mov	r2,r17
  8072d4:	b82b883a 	mov	r21,r23
  8072d8:	3b19883a 	add	r12,r7,r12
  8072dc:	6023883a 	mov	r17,r12
  8072e0:	a007883a 	mov	r3,r20
  8072e4:	dc800f15 	stw	r18,60(sp)
  8072e8:	000d883a 	mov	r6,zero
  8072ec:	01d00934 	movhi	r7,16420
  8072f0:	1009883a 	mov	r4,r2
  8072f4:	180b883a 	mov	r5,r3
  8072f8:	080d9580 	call	80d958 <__muldf3>
  8072fc:	180b883a 	mov	r5,r3
  807300:	1009883a 	mov	r4,r2
  807304:	1829883a 	mov	r20,r3
  807308:	1025883a 	mov	r18,r2
  80730c:	080e96c0 	call	80e96c <__fixdfsi>
  807310:	1009883a 	mov	r4,r2
  807314:	1021883a 	mov	r16,r2
  807318:	080e9ec0 	call	80e9ec <__floatsidf>
  80731c:	100d883a 	mov	r6,r2
  807320:	180f883a 	mov	r7,r3
  807324:	9009883a 	mov	r4,r18
  807328:	a00b883a 	mov	r5,r20
  80732c:	84000c04 	addi	r16,r16,48
  807330:	080e0700 	call	80e070 <__subdf3>
  807334:	ad400044 	addi	r21,r21,1
  807338:	ac3fffc5 	stb	r16,-1(r21)
  80733c:	ac7fea1e 	bne	r21,r17,8072e8 <__alt_mem_onchip_mem+0xff7ff2e8>
  807340:	1023883a 	mov	r17,r2
  807344:	d8801217 	ldw	r2,72(sp)
  807348:	dc800f17 	ldw	r18,60(sp)
  80734c:	1829883a 	mov	r20,r3
  807350:	b8af883a 	add	r23,r23,r2
  807354:	d9001417 	ldw	r4,80(sp)
  807358:	d9401517 	ldw	r5,84(sp)
  80735c:	000d883a 	mov	r6,zero
  807360:	01cff834 	movhi	r7,16352
  807364:	080c56c0 	call	80c56c <__adddf3>
  807368:	880d883a 	mov	r6,r17
  80736c:	a00f883a 	mov	r7,r20
  807370:	1009883a 	mov	r4,r2
  807374:	180b883a 	mov	r5,r3
  807378:	080d8640 	call	80d864 <__ledf2>
  80737c:	10003e0e 	bge	r2,zero,807478 <_dtoa_r+0x1548>
  807380:	d9001317 	ldw	r4,76(sp)
  807384:	bd3fffc3 	ldbu	r20,-1(r23)
  807388:	d9000515 	stw	r4,20(sp)
  80738c:	003d3b06 	br	80687c <__alt_mem_onchip_mem+0xff7fe87c>
  807390:	0027883a 	mov	r19,zero
  807394:	003f1b06 	br	807004 <__alt_mem_onchip_mem+0xff7ff004>
  807398:	d8800817 	ldw	r2,32(sp)
  80739c:	11e9c83a 	sub	r20,r2,r7
  8073a0:	0005883a 	mov	r2,zero
  8073a4:	003d5406 	br	8068f8 <__alt_mem_onchip_mem+0xff7fe8f8>
  8073a8:	00800044 	movi	r2,1
  8073ac:	003dc706 	br	806acc <__alt_mem_onchip_mem+0xff7feacc>
  8073b0:	d8c00217 	ldw	r3,8(sp)
  8073b4:	00800d84 	movi	r2,54
  8073b8:	dd400a17 	ldw	r21,40(sp)
  8073bc:	10c5c83a 	sub	r2,r2,r3
  8073c0:	dd000817 	ldw	r20,32(sp)
  8073c4:	003d4c06 	br	8068f8 <__alt_mem_onchip_mem+0xff7fe8f8>
  8073c8:	dc800f15 	stw	r18,60(sp)
  8073cc:	dcc01015 	stw	r19,64(sp)
  8073d0:	04000084 	movi	r16,2
  8073d4:	003bed06 	br	80638c <__alt_mem_onchip_mem+0xff7fe38c>
  8073d8:	d9000617 	ldw	r4,24(sp)
  8073dc:	203f0d26 	beq	r4,zero,807014 <__alt_mem_onchip_mem+0xff7ff014>
  8073e0:	d9800c17 	ldw	r6,48(sp)
  8073e4:	01bcab0e 	bge	zero,r6,806694 <__alt_mem_onchip_mem+0xff7fe694>
  8073e8:	d9401017 	ldw	r5,64(sp)
  8073ec:	d9000f17 	ldw	r4,60(sp)
  8073f0:	000d883a 	mov	r6,zero
  8073f4:	01d00934 	movhi	r7,16420
  8073f8:	080d9580 	call	80d958 <__muldf3>
  8073fc:	81000044 	addi	r4,r16,1
  807400:	d8800f15 	stw	r2,60(sp)
  807404:	d8c01015 	stw	r3,64(sp)
  807408:	080e9ec0 	call	80e9ec <__floatsidf>
  80740c:	d9800f17 	ldw	r6,60(sp)
  807410:	d9c01017 	ldw	r7,64(sp)
  807414:	1009883a 	mov	r4,r2
  807418:	180b883a 	mov	r5,r3
  80741c:	080d9580 	call	80d958 <__muldf3>
  807420:	01d00734 	movhi	r7,16412
  807424:	000d883a 	mov	r6,zero
  807428:	1009883a 	mov	r4,r2
  80742c:	180b883a 	mov	r5,r3
  807430:	080c56c0 	call	80c56c <__adddf3>
  807434:	d9c00517 	ldw	r7,20(sp)
  807438:	047f3034 	movhi	r17,64704
  80743c:	1021883a 	mov	r16,r2
  807440:	39ffffc4 	addi	r7,r7,-1
  807444:	d9c01315 	stw	r7,76(sp)
  807448:	1c63883a 	add	r17,r3,r17
  80744c:	db000c17 	ldw	r12,48(sp)
  807450:	003bea06 	br	8063fc <__alt_mem_onchip_mem+0xff7fe3fc>
  807454:	dc000915 	stw	r16,36(sp)
  807458:	003e0e06 	br	806c94 <__alt_mem_onchip_mem+0xff7fec94>
  80745c:	01000e44 	movi	r4,57
  807460:	8825883a 	mov	r18,r17
  807464:	9dc00044 	addi	r23,r19,1
  807468:	99000005 	stb	r4,0(r19)
  80746c:	a023883a 	mov	r17,r20
  807470:	dc000915 	stw	r16,36(sp)
  807474:	003da406 	br	806b08 <__alt_mem_onchip_mem+0xff7feb08>
  807478:	d9801417 	ldw	r6,80(sp)
  80747c:	d9c01517 	ldw	r7,84(sp)
  807480:	0009883a 	mov	r4,zero
  807484:	014ff834 	movhi	r5,16352
  807488:	080e0700 	call	80e070 <__subdf3>
  80748c:	880d883a 	mov	r6,r17
  807490:	a00f883a 	mov	r7,r20
  807494:	1009883a 	mov	r4,r2
  807498:	180b883a 	mov	r5,r3
  80749c:	080d7880 	call	80d788 <__gedf2>
  8074a0:	00bc7c0e 	bge	zero,r2,806694 <__alt_mem_onchip_mem+0xff7fe694>
  8074a4:	01000c04 	movi	r4,48
  8074a8:	00000106 	br	8074b0 <_dtoa_r+0x1580>
  8074ac:	102f883a 	mov	r23,r2
  8074b0:	b8bfffc4 	addi	r2,r23,-1
  8074b4:	10c00007 	ldb	r3,0(r2)
  8074b8:	193ffc26 	beq	r3,r4,8074ac <__alt_mem_onchip_mem+0xff7ff4ac>
  8074bc:	d9801317 	ldw	r6,76(sp)
  8074c0:	d9800515 	stw	r6,20(sp)
  8074c4:	003c4406 	br	8065d8 <__alt_mem_onchip_mem+0xff7fe5d8>
  8074c8:	d9801317 	ldw	r6,76(sp)
  8074cc:	d9800515 	stw	r6,20(sp)
  8074d0:	003cea06 	br	80687c <__alt_mem_onchip_mem+0xff7fe87c>
  8074d4:	dd800f17 	ldw	r22,60(sp)
  8074d8:	dcc01017 	ldw	r19,64(sp)
  8074dc:	dc801217 	ldw	r18,72(sp)
  8074e0:	003c6c06 	br	806694 <__alt_mem_onchip_mem+0xff7fe694>
  8074e4:	903e031e 	bne	r18,zero,806cf4 <__alt_mem_onchip_mem+0xff7fecf4>
  8074e8:	003ebb06 	br	806fd8 <__alt_mem_onchip_mem+0xff7fefd8>
  8074ec:	103e6c1e 	bne	r2,zero,806ea0 <__alt_mem_onchip_mem+0xff7feea0>
  8074f0:	4080004c 	andi	r2,r8,1
  8074f4:	103e6a26 	beq	r2,zero,806ea0 <__alt_mem_onchip_mem+0xff7feea0>
  8074f8:	003e6606 	br	806e94 <__alt_mem_onchip_mem+0xff7fee94>
  8074fc:	d8c00317 	ldw	r3,12(sp)
  807500:	00800084 	movi	r2,2
  807504:	10c02916 	blt	r2,r3,8075ac <_dtoa_r+0x167c>
  807508:	d9000c17 	ldw	r4,48(sp)
  80750c:	003e8806 	br	806f30 <__alt_mem_onchip_mem+0xff7fef30>
  807510:	04000084 	movi	r16,2
  807514:	003b9d06 	br	80638c <__alt_mem_onchip_mem+0xff7fe38c>
  807518:	d9001317 	ldw	r4,76(sp)
  80751c:	d9000515 	stw	r4,20(sp)
  807520:	003cd606 	br	80687c <__alt_mem_onchip_mem+0xff7fe87c>
  807524:	d8801317 	ldw	r2,76(sp)
  807528:	d8800515 	stw	r2,20(sp)
  80752c:	003c2a06 	br	8065d8 <__alt_mem_onchip_mem+0xff7fe5d8>
  807530:	d9800317 	ldw	r6,12(sp)
  807534:	00800084 	movi	r2,2
  807538:	11801516 	blt	r2,r6,807590 <_dtoa_r+0x1660>
  80753c:	d9c00c17 	ldw	r7,48(sp)
  807540:	d9c00615 	stw	r7,24(sp)
  807544:	003df706 	br	806d24 <__alt_mem_onchip_mem+0xff7fed24>
  807548:	193d3926 	beq	r3,r4,806a30 <__alt_mem_onchip_mem+0xff7fea30>
  80754c:	00c00f04 	movi	r3,60
  807550:	1885c83a 	sub	r2,r3,r2
  807554:	003ddf06 	br	806cd4 <__alt_mem_onchip_mem+0xff7fecd4>
  807558:	e009883a 	mov	r4,fp
  80755c:	e0001115 	stw	zero,68(fp)
  807560:	000b883a 	mov	r5,zero
  807564:	08088180 	call	808818 <_Balloc>
  807568:	d8800715 	stw	r2,28(sp)
  80756c:	d8c00717 	ldw	r3,28(sp)
  807570:	00bfffc4 	movi	r2,-1
  807574:	01000044 	movi	r4,1
  807578:	d8800c15 	stw	r2,48(sp)
  80757c:	e0c01015 	stw	r3,64(fp)
  807580:	d9000b15 	stw	r4,44(sp)
  807584:	d8800615 	stw	r2,24(sp)
  807588:	d8002215 	stw	zero,136(sp)
  80758c:	003c4106 	br	806694 <__alt_mem_onchip_mem+0xff7fe694>
  807590:	d8c00c17 	ldw	r3,48(sp)
  807594:	d8c00615 	stw	r3,24(sp)
  807598:	003e7006 	br	806f5c <__alt_mem_onchip_mem+0xff7fef5c>
  80759c:	04400044 	movi	r17,1
  8075a0:	003b2006 	br	806224 <__alt_mem_onchip_mem+0xff7fe224>
  8075a4:	000b883a 	mov	r5,zero
  8075a8:	003b3d06 	br	8062a0 <__alt_mem_onchip_mem+0xff7fe2a0>
  8075ac:	d8800c17 	ldw	r2,48(sp)
  8075b0:	d8800615 	stw	r2,24(sp)
  8075b4:	003e6906 	br	806f5c <__alt_mem_onchip_mem+0xff7fef5c>

008075b8 <_fclose_r>:
  8075b8:	28003926 	beq	r5,zero,8076a0 <_fclose_r+0xe8>
  8075bc:	defffc04 	addi	sp,sp,-16
  8075c0:	dc400115 	stw	r17,4(sp)
  8075c4:	dc000015 	stw	r16,0(sp)
  8075c8:	dfc00315 	stw	ra,12(sp)
  8075cc:	dc800215 	stw	r18,8(sp)
  8075d0:	2023883a 	mov	r17,r4
  8075d4:	2821883a 	mov	r16,r5
  8075d8:	20000226 	beq	r4,zero,8075e4 <_fclose_r+0x2c>
  8075dc:	20800e17 	ldw	r2,56(r4)
  8075e0:	10002726 	beq	r2,zero,807680 <_fclose_r+0xc8>
  8075e4:	8080030f 	ldh	r2,12(r16)
  8075e8:	1000071e 	bne	r2,zero,807608 <_fclose_r+0x50>
  8075ec:	0005883a 	mov	r2,zero
  8075f0:	dfc00317 	ldw	ra,12(sp)
  8075f4:	dc800217 	ldw	r18,8(sp)
  8075f8:	dc400117 	ldw	r17,4(sp)
  8075fc:	dc000017 	ldw	r16,0(sp)
  807600:	dec00404 	addi	sp,sp,16
  807604:	f800283a 	ret
  807608:	800b883a 	mov	r5,r16
  80760c:	8809883a 	mov	r4,r17
  807610:	08076bc0 	call	8076bc <__sflush_r>
  807614:	1025883a 	mov	r18,r2
  807618:	80800b17 	ldw	r2,44(r16)
  80761c:	10000426 	beq	r2,zero,807630 <_fclose_r+0x78>
  807620:	81400717 	ldw	r5,28(r16)
  807624:	8809883a 	mov	r4,r17
  807628:	103ee83a 	callr	r2
  80762c:	10001616 	blt	r2,zero,807688 <_fclose_r+0xd0>
  807630:	8080030b 	ldhu	r2,12(r16)
  807634:	1080200c 	andi	r2,r2,128
  807638:	1000151e 	bne	r2,zero,807690 <_fclose_r+0xd8>
  80763c:	81400c17 	ldw	r5,48(r16)
  807640:	28000526 	beq	r5,zero,807658 <_fclose_r+0xa0>
  807644:	80801004 	addi	r2,r16,64
  807648:	28800226 	beq	r5,r2,807654 <_fclose_r+0x9c>
  80764c:	8809883a 	mov	r4,r17
  807650:	0807b340 	call	807b34 <_free_r>
  807654:	80000c15 	stw	zero,48(r16)
  807658:	81401117 	ldw	r5,68(r16)
  80765c:	28000326 	beq	r5,zero,80766c <_fclose_r+0xb4>
  807660:	8809883a 	mov	r4,r17
  807664:	0807b340 	call	807b34 <_free_r>
  807668:	80001115 	stw	zero,68(r16)
  80766c:	08019e40 	call	8019e4 <__sfp_lock_acquire>
  807670:	8000030d 	sth	zero,12(r16)
  807674:	08019e80 	call	8019e8 <__sfp_lock_release>
  807678:	9005883a 	mov	r2,r18
  80767c:	003fdc06 	br	8075f0 <__alt_mem_onchip_mem+0xff7ff5f0>
  807680:	08019d40 	call	8019d4 <__sinit>
  807684:	003fd706 	br	8075e4 <__alt_mem_onchip_mem+0xff7ff5e4>
  807688:	04bfffc4 	movi	r18,-1
  80768c:	003fe806 	br	807630 <__alt_mem_onchip_mem+0xff7ff630>
  807690:	81400417 	ldw	r5,16(r16)
  807694:	8809883a 	mov	r4,r17
  807698:	0807b340 	call	807b34 <_free_r>
  80769c:	003fe706 	br	80763c <__alt_mem_onchip_mem+0xff7ff63c>
  8076a0:	0005883a 	mov	r2,zero
  8076a4:	f800283a 	ret

008076a8 <fclose>:
  8076a8:	00802074 	movhi	r2,129
  8076ac:	10947b04 	addi	r2,r2,20972
  8076b0:	200b883a 	mov	r5,r4
  8076b4:	11000017 	ldw	r4,0(r2)
  8076b8:	08075b81 	jmpi	8075b8 <_fclose_r>

008076bc <__sflush_r>:
  8076bc:	2880030b 	ldhu	r2,12(r5)
  8076c0:	defffb04 	addi	sp,sp,-20
  8076c4:	dcc00315 	stw	r19,12(sp)
  8076c8:	dc400115 	stw	r17,4(sp)
  8076cc:	dfc00415 	stw	ra,16(sp)
  8076d0:	dc800215 	stw	r18,8(sp)
  8076d4:	dc000015 	stw	r16,0(sp)
  8076d8:	10c0020c 	andi	r3,r2,8
  8076dc:	2823883a 	mov	r17,r5
  8076e0:	2027883a 	mov	r19,r4
  8076e4:	1800311e 	bne	r3,zero,8077ac <__sflush_r+0xf0>
  8076e8:	28c00117 	ldw	r3,4(r5)
  8076ec:	10820014 	ori	r2,r2,2048
  8076f0:	2880030d 	sth	r2,12(r5)
  8076f4:	00c04b0e 	bge	zero,r3,807824 <__sflush_r+0x168>
  8076f8:	8a000a17 	ldw	r8,40(r17)
  8076fc:	40002326 	beq	r8,zero,80778c <__sflush_r+0xd0>
  807700:	9c000017 	ldw	r16,0(r19)
  807704:	10c4000c 	andi	r3,r2,4096
  807708:	98000015 	stw	zero,0(r19)
  80770c:	18004826 	beq	r3,zero,807830 <__sflush_r+0x174>
  807710:	89801417 	ldw	r6,80(r17)
  807714:	10c0010c 	andi	r3,r2,4
  807718:	18000626 	beq	r3,zero,807734 <__sflush_r+0x78>
  80771c:	88c00117 	ldw	r3,4(r17)
  807720:	88800c17 	ldw	r2,48(r17)
  807724:	30cdc83a 	sub	r6,r6,r3
  807728:	10000226 	beq	r2,zero,807734 <__sflush_r+0x78>
  80772c:	88800f17 	ldw	r2,60(r17)
  807730:	308dc83a 	sub	r6,r6,r2
  807734:	89400717 	ldw	r5,28(r17)
  807738:	000f883a 	mov	r7,zero
  80773c:	9809883a 	mov	r4,r19
  807740:	403ee83a 	callr	r8
  807744:	00ffffc4 	movi	r3,-1
  807748:	10c04426 	beq	r2,r3,80785c <__sflush_r+0x1a0>
  80774c:	88c0030b 	ldhu	r3,12(r17)
  807750:	89000417 	ldw	r4,16(r17)
  807754:	88000115 	stw	zero,4(r17)
  807758:	197dffcc 	andi	r5,r3,63487
  80775c:	8940030d 	sth	r5,12(r17)
  807760:	89000015 	stw	r4,0(r17)
  807764:	18c4000c 	andi	r3,r3,4096
  807768:	18002c1e 	bne	r3,zero,80781c <__sflush_r+0x160>
  80776c:	89400c17 	ldw	r5,48(r17)
  807770:	9c000015 	stw	r16,0(r19)
  807774:	28000526 	beq	r5,zero,80778c <__sflush_r+0xd0>
  807778:	88801004 	addi	r2,r17,64
  80777c:	28800226 	beq	r5,r2,807788 <__sflush_r+0xcc>
  807780:	9809883a 	mov	r4,r19
  807784:	0807b340 	call	807b34 <_free_r>
  807788:	88000c15 	stw	zero,48(r17)
  80778c:	0005883a 	mov	r2,zero
  807790:	dfc00417 	ldw	ra,16(sp)
  807794:	dcc00317 	ldw	r19,12(sp)
  807798:	dc800217 	ldw	r18,8(sp)
  80779c:	dc400117 	ldw	r17,4(sp)
  8077a0:	dc000017 	ldw	r16,0(sp)
  8077a4:	dec00504 	addi	sp,sp,20
  8077a8:	f800283a 	ret
  8077ac:	2c800417 	ldw	r18,16(r5)
  8077b0:	903ff626 	beq	r18,zero,80778c <__alt_mem_onchip_mem+0xff7ff78c>
  8077b4:	2c000017 	ldw	r16,0(r5)
  8077b8:	108000cc 	andi	r2,r2,3
  8077bc:	2c800015 	stw	r18,0(r5)
  8077c0:	84a1c83a 	sub	r16,r16,r18
  8077c4:	1000131e 	bne	r2,zero,807814 <__sflush_r+0x158>
  8077c8:	28800517 	ldw	r2,20(r5)
  8077cc:	88800215 	stw	r2,8(r17)
  8077d0:	04000316 	blt	zero,r16,8077e0 <__sflush_r+0x124>
  8077d4:	003fed06 	br	80778c <__alt_mem_onchip_mem+0xff7ff78c>
  8077d8:	90a5883a 	add	r18,r18,r2
  8077dc:	043feb0e 	bge	zero,r16,80778c <__alt_mem_onchip_mem+0xff7ff78c>
  8077e0:	88800917 	ldw	r2,36(r17)
  8077e4:	89400717 	ldw	r5,28(r17)
  8077e8:	800f883a 	mov	r7,r16
  8077ec:	900d883a 	mov	r6,r18
  8077f0:	9809883a 	mov	r4,r19
  8077f4:	103ee83a 	callr	r2
  8077f8:	80a1c83a 	sub	r16,r16,r2
  8077fc:	00bff616 	blt	zero,r2,8077d8 <__alt_mem_onchip_mem+0xff7ff7d8>
  807800:	88c0030b 	ldhu	r3,12(r17)
  807804:	00bfffc4 	movi	r2,-1
  807808:	18c01014 	ori	r3,r3,64
  80780c:	88c0030d 	sth	r3,12(r17)
  807810:	003fdf06 	br	807790 <__alt_mem_onchip_mem+0xff7ff790>
  807814:	0005883a 	mov	r2,zero
  807818:	003fec06 	br	8077cc <__alt_mem_onchip_mem+0xff7ff7cc>
  80781c:	88801415 	stw	r2,80(r17)
  807820:	003fd206 	br	80776c <__alt_mem_onchip_mem+0xff7ff76c>
  807824:	28c00f17 	ldw	r3,60(r5)
  807828:	00ffb316 	blt	zero,r3,8076f8 <__alt_mem_onchip_mem+0xff7ff6f8>
  80782c:	003fd706 	br	80778c <__alt_mem_onchip_mem+0xff7ff78c>
  807830:	89400717 	ldw	r5,28(r17)
  807834:	000d883a 	mov	r6,zero
  807838:	01c00044 	movi	r7,1
  80783c:	9809883a 	mov	r4,r19
  807840:	403ee83a 	callr	r8
  807844:	100d883a 	mov	r6,r2
  807848:	00bfffc4 	movi	r2,-1
  80784c:	30801426 	beq	r6,r2,8078a0 <__sflush_r+0x1e4>
  807850:	8880030b 	ldhu	r2,12(r17)
  807854:	8a000a17 	ldw	r8,40(r17)
  807858:	003fae06 	br	807714 <__alt_mem_onchip_mem+0xff7ff714>
  80785c:	98c00017 	ldw	r3,0(r19)
  807860:	183fba26 	beq	r3,zero,80774c <__alt_mem_onchip_mem+0xff7ff74c>
  807864:	01000744 	movi	r4,29
  807868:	19000626 	beq	r3,r4,807884 <__sflush_r+0x1c8>
  80786c:	01000584 	movi	r4,22
  807870:	19000426 	beq	r3,r4,807884 <__sflush_r+0x1c8>
  807874:	88c0030b 	ldhu	r3,12(r17)
  807878:	18c01014 	ori	r3,r3,64
  80787c:	88c0030d 	sth	r3,12(r17)
  807880:	003fc306 	br	807790 <__alt_mem_onchip_mem+0xff7ff790>
  807884:	8880030b 	ldhu	r2,12(r17)
  807888:	88c00417 	ldw	r3,16(r17)
  80788c:	88000115 	stw	zero,4(r17)
  807890:	10bdffcc 	andi	r2,r2,63487
  807894:	8880030d 	sth	r2,12(r17)
  807898:	88c00015 	stw	r3,0(r17)
  80789c:	003fb306 	br	80776c <__alt_mem_onchip_mem+0xff7ff76c>
  8078a0:	98800017 	ldw	r2,0(r19)
  8078a4:	103fea26 	beq	r2,zero,807850 <__alt_mem_onchip_mem+0xff7ff850>
  8078a8:	00c00744 	movi	r3,29
  8078ac:	10c00226 	beq	r2,r3,8078b8 <__sflush_r+0x1fc>
  8078b0:	00c00584 	movi	r3,22
  8078b4:	10c0031e 	bne	r2,r3,8078c4 <__sflush_r+0x208>
  8078b8:	9c000015 	stw	r16,0(r19)
  8078bc:	0005883a 	mov	r2,zero
  8078c0:	003fb306 	br	807790 <__alt_mem_onchip_mem+0xff7ff790>
  8078c4:	88c0030b 	ldhu	r3,12(r17)
  8078c8:	3005883a 	mov	r2,r6
  8078cc:	18c01014 	ori	r3,r3,64
  8078d0:	88c0030d 	sth	r3,12(r17)
  8078d4:	003fae06 	br	807790 <__alt_mem_onchip_mem+0xff7ff790>

008078d8 <_fflush_r>:
  8078d8:	defffd04 	addi	sp,sp,-12
  8078dc:	dc000115 	stw	r16,4(sp)
  8078e0:	dfc00215 	stw	ra,8(sp)
  8078e4:	2021883a 	mov	r16,r4
  8078e8:	20000226 	beq	r4,zero,8078f4 <_fflush_r+0x1c>
  8078ec:	20800e17 	ldw	r2,56(r4)
  8078f0:	10000c26 	beq	r2,zero,807924 <_fflush_r+0x4c>
  8078f4:	2880030f 	ldh	r2,12(r5)
  8078f8:	1000051e 	bne	r2,zero,807910 <_fflush_r+0x38>
  8078fc:	0005883a 	mov	r2,zero
  807900:	dfc00217 	ldw	ra,8(sp)
  807904:	dc000117 	ldw	r16,4(sp)
  807908:	dec00304 	addi	sp,sp,12
  80790c:	f800283a 	ret
  807910:	8009883a 	mov	r4,r16
  807914:	dfc00217 	ldw	ra,8(sp)
  807918:	dc000117 	ldw	r16,4(sp)
  80791c:	dec00304 	addi	sp,sp,12
  807920:	08076bc1 	jmpi	8076bc <__sflush_r>
  807924:	d9400015 	stw	r5,0(sp)
  807928:	08019d40 	call	8019d4 <__sinit>
  80792c:	d9400017 	ldw	r5,0(sp)
  807930:	003ff006 	br	8078f4 <__alt_mem_onchip_mem+0xff7ff8f4>

00807934 <fflush>:
  807934:	20000526 	beq	r4,zero,80794c <fflush+0x18>
  807938:	00802074 	movhi	r2,129
  80793c:	10947b04 	addi	r2,r2,20972
  807940:	200b883a 	mov	r5,r4
  807944:	11000017 	ldw	r4,0(r2)
  807948:	08078d81 	jmpi	8078d8 <_fflush_r>
  80794c:	00802074 	movhi	r2,129
  807950:	10947a04 	addi	r2,r2,20968
  807954:	11000017 	ldw	r4,0(r2)
  807958:	01402034 	movhi	r5,128
  80795c:	295e3604 	addi	r5,r5,30936
  807960:	08021bc1 	jmpi	8021bc <_fwalk_reent>

00807964 <__sflags>:
  807964:	28800007 	ldb	r2,0(r5)
  807968:	00c01c84 	movi	r3,114
  80796c:	10c02426 	beq	r2,r3,807a00 <__sflags+0x9c>
  807970:	00c01dc4 	movi	r3,119
  807974:	10c01e26 	beq	r2,r3,8079f0 <__sflags+0x8c>
  807978:	00c01844 	movi	r3,97
  80797c:	10c00426 	beq	r2,r3,807990 <__sflags+0x2c>
  807980:	00800584 	movi	r2,22
  807984:	20800015 	stw	r2,0(r4)
  807988:	0005883a 	mov	r2,zero
  80798c:	f800283a 	ret
  807990:	02c08204 	movi	r11,520
  807994:	01000044 	movi	r4,1
  807998:	00804204 	movi	r2,264
  80799c:	01c00ac4 	movi	r7,43
  8079a0:	02bff8c4 	movi	r10,-29
  8079a4:	027fff04 	movi	r9,-4
  8079a8:	02001e04 	movi	r8,120
  8079ac:	29400044 	addi	r5,r5,1
  8079b0:	28c00007 	ldb	r3,0(r5)
  8079b4:	18000626 	beq	r3,zero,8079d0 <__sflags+0x6c>
  8079b8:	19c00826 	beq	r3,r7,8079dc <__sflags+0x78>
  8079bc:	1a3ffb1e 	bne	r3,r8,8079ac <__alt_mem_onchip_mem+0xff7ff9ac>
  8079c0:	29400044 	addi	r5,r5,1
  8079c4:	28c00007 	ldb	r3,0(r5)
  8079c8:	21020014 	ori	r4,r4,2048
  8079cc:	183ffa1e 	bne	r3,zero,8079b8 <__alt_mem_onchip_mem+0xff7ff9b8>
  8079d0:	22c8b03a 	or	r4,r4,r11
  8079d4:	31000015 	stw	r4,0(r6)
  8079d8:	f800283a 	ret
  8079dc:	1284703a 	and	r2,r2,r10
  8079e0:	2248703a 	and	r4,r4,r9
  8079e4:	10800414 	ori	r2,r2,16
  8079e8:	21000094 	ori	r4,r4,2
  8079ec:	003fef06 	br	8079ac <__alt_mem_onchip_mem+0xff7ff9ac>
  8079f0:	02c18004 	movi	r11,1536
  8079f4:	01000044 	movi	r4,1
  8079f8:	00800204 	movi	r2,8
  8079fc:	003fe706 	br	80799c <__alt_mem_onchip_mem+0xff7ff99c>
  807a00:	0017883a 	mov	r11,zero
  807a04:	0009883a 	mov	r4,zero
  807a08:	00800104 	movi	r2,4
  807a0c:	003fe306 	br	80799c <__alt_mem_onchip_mem+0xff7ff99c>

00807a10 <_malloc_trim_r>:
  807a10:	defffb04 	addi	sp,sp,-20
  807a14:	dcc00315 	stw	r19,12(sp)
  807a18:	04c02074 	movhi	r19,129
  807a1c:	dc800215 	stw	r18,8(sp)
  807a20:	dc400115 	stw	r17,4(sp)
  807a24:	dc000015 	stw	r16,0(sp)
  807a28:	dfc00415 	stw	ra,16(sp)
  807a2c:	2821883a 	mov	r16,r5
  807a30:	9cce5f04 	addi	r19,r19,14716
  807a34:	2025883a 	mov	r18,r4
  807a38:	080f3fc0 	call	80f3fc <__malloc_lock>
  807a3c:	98800217 	ldw	r2,8(r19)
  807a40:	14400117 	ldw	r17,4(r2)
  807a44:	00bfff04 	movi	r2,-4
  807a48:	88a2703a 	and	r17,r17,r2
  807a4c:	8c21c83a 	sub	r16,r17,r16
  807a50:	8403fbc4 	addi	r16,r16,4079
  807a54:	8020d33a 	srli	r16,r16,12
  807a58:	0083ffc4 	movi	r2,4095
  807a5c:	843fffc4 	addi	r16,r16,-1
  807a60:	8020933a 	slli	r16,r16,12
  807a64:	1400060e 	bge	r2,r16,807a80 <_malloc_trim_r+0x70>
  807a68:	000b883a 	mov	r5,zero
  807a6c:	9009883a 	mov	r4,r18
  807a70:	080331c0 	call	80331c <_sbrk_r>
  807a74:	98c00217 	ldw	r3,8(r19)
  807a78:	1c47883a 	add	r3,r3,r17
  807a7c:	10c00a26 	beq	r2,r3,807aa8 <_malloc_trim_r+0x98>
  807a80:	9009883a 	mov	r4,r18
  807a84:	080f4200 	call	80f420 <__malloc_unlock>
  807a88:	0005883a 	mov	r2,zero
  807a8c:	dfc00417 	ldw	ra,16(sp)
  807a90:	dcc00317 	ldw	r19,12(sp)
  807a94:	dc800217 	ldw	r18,8(sp)
  807a98:	dc400117 	ldw	r17,4(sp)
  807a9c:	dc000017 	ldw	r16,0(sp)
  807aa0:	dec00504 	addi	sp,sp,20
  807aa4:	f800283a 	ret
  807aa8:	040bc83a 	sub	r5,zero,r16
  807aac:	9009883a 	mov	r4,r18
  807ab0:	080331c0 	call	80331c <_sbrk_r>
  807ab4:	00ffffc4 	movi	r3,-1
  807ab8:	10c00d26 	beq	r2,r3,807af0 <_malloc_trim_r+0xe0>
  807abc:	00c02074 	movhi	r3,129
  807ac0:	18dbe904 	addi	r3,r3,28580
  807ac4:	18800017 	ldw	r2,0(r3)
  807ac8:	99000217 	ldw	r4,8(r19)
  807acc:	8c23c83a 	sub	r17,r17,r16
  807ad0:	8c400054 	ori	r17,r17,1
  807ad4:	1421c83a 	sub	r16,r2,r16
  807ad8:	24400115 	stw	r17,4(r4)
  807adc:	9009883a 	mov	r4,r18
  807ae0:	1c000015 	stw	r16,0(r3)
  807ae4:	080f4200 	call	80f420 <__malloc_unlock>
  807ae8:	00800044 	movi	r2,1
  807aec:	003fe706 	br	807a8c <__alt_mem_onchip_mem+0xff7ffa8c>
  807af0:	000b883a 	mov	r5,zero
  807af4:	9009883a 	mov	r4,r18
  807af8:	080331c0 	call	80331c <_sbrk_r>
  807afc:	99000217 	ldw	r4,8(r19)
  807b00:	014003c4 	movi	r5,15
  807b04:	1107c83a 	sub	r3,r2,r4
  807b08:	28ffdd0e 	bge	r5,r3,807a80 <__alt_mem_onchip_mem+0xff7ffa80>
  807b0c:	01402074 	movhi	r5,129
  807b10:	29547c04 	addi	r5,r5,20976
  807b14:	29400017 	ldw	r5,0(r5)
  807b18:	18c00054 	ori	r3,r3,1
  807b1c:	20c00115 	stw	r3,4(r4)
  807b20:	00c02074 	movhi	r3,129
  807b24:	1145c83a 	sub	r2,r2,r5
  807b28:	18dbe904 	addi	r3,r3,28580
  807b2c:	18800015 	stw	r2,0(r3)
  807b30:	003fd306 	br	807a80 <__alt_mem_onchip_mem+0xff7ffa80>

00807b34 <_free_r>:
  807b34:	28004126 	beq	r5,zero,807c3c <_free_r+0x108>
  807b38:	defffd04 	addi	sp,sp,-12
  807b3c:	dc400115 	stw	r17,4(sp)
  807b40:	dc000015 	stw	r16,0(sp)
  807b44:	2023883a 	mov	r17,r4
  807b48:	2821883a 	mov	r16,r5
  807b4c:	dfc00215 	stw	ra,8(sp)
  807b50:	080f3fc0 	call	80f3fc <__malloc_lock>
  807b54:	81ffff17 	ldw	r7,-4(r16)
  807b58:	00bfff84 	movi	r2,-2
  807b5c:	01002074 	movhi	r4,129
  807b60:	81bffe04 	addi	r6,r16,-8
  807b64:	3884703a 	and	r2,r7,r2
  807b68:	210e5f04 	addi	r4,r4,14716
  807b6c:	308b883a 	add	r5,r6,r2
  807b70:	2a400117 	ldw	r9,4(r5)
  807b74:	22000217 	ldw	r8,8(r4)
  807b78:	00ffff04 	movi	r3,-4
  807b7c:	48c6703a 	and	r3,r9,r3
  807b80:	2a005726 	beq	r5,r8,807ce0 <_free_r+0x1ac>
  807b84:	28c00115 	stw	r3,4(r5)
  807b88:	39c0004c 	andi	r7,r7,1
  807b8c:	3800091e 	bne	r7,zero,807bb4 <_free_r+0x80>
  807b90:	823ffe17 	ldw	r8,-8(r16)
  807b94:	22400204 	addi	r9,r4,8
  807b98:	320dc83a 	sub	r6,r6,r8
  807b9c:	31c00217 	ldw	r7,8(r6)
  807ba0:	1205883a 	add	r2,r2,r8
  807ba4:	3a406526 	beq	r7,r9,807d3c <_free_r+0x208>
  807ba8:	32000317 	ldw	r8,12(r6)
  807bac:	3a000315 	stw	r8,12(r7)
  807bb0:	41c00215 	stw	r7,8(r8)
  807bb4:	28cf883a 	add	r7,r5,r3
  807bb8:	39c00117 	ldw	r7,4(r7)
  807bbc:	39c0004c 	andi	r7,r7,1
  807bc0:	38003a26 	beq	r7,zero,807cac <_free_r+0x178>
  807bc4:	10c00054 	ori	r3,r2,1
  807bc8:	30c00115 	stw	r3,4(r6)
  807bcc:	3087883a 	add	r3,r6,r2
  807bd0:	18800015 	stw	r2,0(r3)
  807bd4:	00c07fc4 	movi	r3,511
  807bd8:	18801936 	bltu	r3,r2,807c40 <_free_r+0x10c>
  807bdc:	1004d0fa 	srli	r2,r2,3
  807be0:	01c00044 	movi	r7,1
  807be4:	21400117 	ldw	r5,4(r4)
  807be8:	10c00044 	addi	r3,r2,1
  807bec:	18c7883a 	add	r3,r3,r3
  807bf0:	1005d0ba 	srai	r2,r2,2
  807bf4:	18c7883a 	add	r3,r3,r3
  807bf8:	18c7883a 	add	r3,r3,r3
  807bfc:	1907883a 	add	r3,r3,r4
  807c00:	3884983a 	sll	r2,r7,r2
  807c04:	19c00017 	ldw	r7,0(r3)
  807c08:	1a3ffe04 	addi	r8,r3,-8
  807c0c:	1144b03a 	or	r2,r2,r5
  807c10:	32000315 	stw	r8,12(r6)
  807c14:	31c00215 	stw	r7,8(r6)
  807c18:	20800115 	stw	r2,4(r4)
  807c1c:	19800015 	stw	r6,0(r3)
  807c20:	39800315 	stw	r6,12(r7)
  807c24:	8809883a 	mov	r4,r17
  807c28:	dfc00217 	ldw	ra,8(sp)
  807c2c:	dc400117 	ldw	r17,4(sp)
  807c30:	dc000017 	ldw	r16,0(sp)
  807c34:	dec00304 	addi	sp,sp,12
  807c38:	080f4201 	jmpi	80f420 <__malloc_unlock>
  807c3c:	f800283a 	ret
  807c40:	100ad27a 	srli	r5,r2,9
  807c44:	00c00104 	movi	r3,4
  807c48:	19404a36 	bltu	r3,r5,807d74 <_free_r+0x240>
  807c4c:	100ad1ba 	srli	r5,r2,6
  807c50:	28c00e44 	addi	r3,r5,57
  807c54:	18c7883a 	add	r3,r3,r3
  807c58:	29400e04 	addi	r5,r5,56
  807c5c:	18c7883a 	add	r3,r3,r3
  807c60:	18c7883a 	add	r3,r3,r3
  807c64:	1909883a 	add	r4,r3,r4
  807c68:	20c00017 	ldw	r3,0(r4)
  807c6c:	01c02074 	movhi	r7,129
  807c70:	213ffe04 	addi	r4,r4,-8
  807c74:	39ce5f04 	addi	r7,r7,14716
  807c78:	20c04426 	beq	r4,r3,807d8c <_free_r+0x258>
  807c7c:	01ffff04 	movi	r7,-4
  807c80:	19400117 	ldw	r5,4(r3)
  807c84:	29ca703a 	and	r5,r5,r7
  807c88:	1140022e 	bgeu	r2,r5,807c94 <_free_r+0x160>
  807c8c:	18c00217 	ldw	r3,8(r3)
  807c90:	20fffb1e 	bne	r4,r3,807c80 <__alt_mem_onchip_mem+0xff7ffc80>
  807c94:	19000317 	ldw	r4,12(r3)
  807c98:	31000315 	stw	r4,12(r6)
  807c9c:	30c00215 	stw	r3,8(r6)
  807ca0:	21800215 	stw	r6,8(r4)
  807ca4:	19800315 	stw	r6,12(r3)
  807ca8:	003fde06 	br	807c24 <__alt_mem_onchip_mem+0xff7ffc24>
  807cac:	29c00217 	ldw	r7,8(r5)
  807cb0:	10c5883a 	add	r2,r2,r3
  807cb4:	00c02074 	movhi	r3,129
  807cb8:	18ce6104 	addi	r3,r3,14724
  807cbc:	38c03b26 	beq	r7,r3,807dac <_free_r+0x278>
  807cc0:	2a000317 	ldw	r8,12(r5)
  807cc4:	11400054 	ori	r5,r2,1
  807cc8:	3087883a 	add	r3,r6,r2
  807ccc:	3a000315 	stw	r8,12(r7)
  807cd0:	41c00215 	stw	r7,8(r8)
  807cd4:	31400115 	stw	r5,4(r6)
  807cd8:	18800015 	stw	r2,0(r3)
  807cdc:	003fbd06 	br	807bd4 <__alt_mem_onchip_mem+0xff7ffbd4>
  807ce0:	39c0004c 	andi	r7,r7,1
  807ce4:	10c5883a 	add	r2,r2,r3
  807ce8:	3800071e 	bne	r7,zero,807d08 <_free_r+0x1d4>
  807cec:	81fffe17 	ldw	r7,-8(r16)
  807cf0:	31cdc83a 	sub	r6,r6,r7
  807cf4:	30c00317 	ldw	r3,12(r6)
  807cf8:	31400217 	ldw	r5,8(r6)
  807cfc:	11c5883a 	add	r2,r2,r7
  807d00:	28c00315 	stw	r3,12(r5)
  807d04:	19400215 	stw	r5,8(r3)
  807d08:	10c00054 	ori	r3,r2,1
  807d0c:	30c00115 	stw	r3,4(r6)
  807d10:	00c02074 	movhi	r3,129
  807d14:	18d47d04 	addi	r3,r3,20980
  807d18:	18c00017 	ldw	r3,0(r3)
  807d1c:	21800215 	stw	r6,8(r4)
  807d20:	10ffc036 	bltu	r2,r3,807c24 <__alt_mem_onchip_mem+0xff7ffc24>
  807d24:	00802074 	movhi	r2,129
  807d28:	109bde04 	addi	r2,r2,28536
  807d2c:	11400017 	ldw	r5,0(r2)
  807d30:	8809883a 	mov	r4,r17
  807d34:	0807a100 	call	807a10 <_malloc_trim_r>
  807d38:	003fba06 	br	807c24 <__alt_mem_onchip_mem+0xff7ffc24>
  807d3c:	28c9883a 	add	r4,r5,r3
  807d40:	21000117 	ldw	r4,4(r4)
  807d44:	2100004c 	andi	r4,r4,1
  807d48:	2000391e 	bne	r4,zero,807e30 <_free_r+0x2fc>
  807d4c:	29c00217 	ldw	r7,8(r5)
  807d50:	29000317 	ldw	r4,12(r5)
  807d54:	1885883a 	add	r2,r3,r2
  807d58:	10c00054 	ori	r3,r2,1
  807d5c:	39000315 	stw	r4,12(r7)
  807d60:	21c00215 	stw	r7,8(r4)
  807d64:	30c00115 	stw	r3,4(r6)
  807d68:	308d883a 	add	r6,r6,r2
  807d6c:	30800015 	stw	r2,0(r6)
  807d70:	003fac06 	br	807c24 <__alt_mem_onchip_mem+0xff7ffc24>
  807d74:	00c00504 	movi	r3,20
  807d78:	19401536 	bltu	r3,r5,807dd0 <_free_r+0x29c>
  807d7c:	28c01704 	addi	r3,r5,92
  807d80:	18c7883a 	add	r3,r3,r3
  807d84:	294016c4 	addi	r5,r5,91
  807d88:	003fb406 	br	807c5c <__alt_mem_onchip_mem+0xff7ffc5c>
  807d8c:	280bd0ba 	srai	r5,r5,2
  807d90:	00c00044 	movi	r3,1
  807d94:	38800117 	ldw	r2,4(r7)
  807d98:	194a983a 	sll	r5,r3,r5
  807d9c:	2007883a 	mov	r3,r4
  807da0:	2884b03a 	or	r2,r5,r2
  807da4:	38800115 	stw	r2,4(r7)
  807da8:	003fbb06 	br	807c98 <__alt_mem_onchip_mem+0xff7ffc98>
  807dac:	21800515 	stw	r6,20(r4)
  807db0:	21800415 	stw	r6,16(r4)
  807db4:	10c00054 	ori	r3,r2,1
  807db8:	31c00315 	stw	r7,12(r6)
  807dbc:	31c00215 	stw	r7,8(r6)
  807dc0:	30c00115 	stw	r3,4(r6)
  807dc4:	308d883a 	add	r6,r6,r2
  807dc8:	30800015 	stw	r2,0(r6)
  807dcc:	003f9506 	br	807c24 <__alt_mem_onchip_mem+0xff7ffc24>
  807dd0:	00c01504 	movi	r3,84
  807dd4:	19400536 	bltu	r3,r5,807dec <_free_r+0x2b8>
  807dd8:	100ad33a 	srli	r5,r2,12
  807ddc:	28c01bc4 	addi	r3,r5,111
  807de0:	18c7883a 	add	r3,r3,r3
  807de4:	29401b84 	addi	r5,r5,110
  807de8:	003f9c06 	br	807c5c <__alt_mem_onchip_mem+0xff7ffc5c>
  807dec:	00c05504 	movi	r3,340
  807df0:	19400536 	bltu	r3,r5,807e08 <_free_r+0x2d4>
  807df4:	100ad3fa 	srli	r5,r2,15
  807df8:	28c01e04 	addi	r3,r5,120
  807dfc:	18c7883a 	add	r3,r3,r3
  807e00:	29401dc4 	addi	r5,r5,119
  807e04:	003f9506 	br	807c5c <__alt_mem_onchip_mem+0xff7ffc5c>
  807e08:	00c15504 	movi	r3,1364
  807e0c:	19400536 	bltu	r3,r5,807e24 <_free_r+0x2f0>
  807e10:	100ad4ba 	srli	r5,r2,18
  807e14:	28c01f44 	addi	r3,r5,125
  807e18:	18c7883a 	add	r3,r3,r3
  807e1c:	29401f04 	addi	r5,r5,124
  807e20:	003f8e06 	br	807c5c <__alt_mem_onchip_mem+0xff7ffc5c>
  807e24:	00c03f84 	movi	r3,254
  807e28:	01401f84 	movi	r5,126
  807e2c:	003f8b06 	br	807c5c <__alt_mem_onchip_mem+0xff7ffc5c>
  807e30:	10c00054 	ori	r3,r2,1
  807e34:	30c00115 	stw	r3,4(r6)
  807e38:	308d883a 	add	r6,r6,r2
  807e3c:	30800015 	stw	r2,0(r6)
  807e40:	003f7806 	br	807c24 <__alt_mem_onchip_mem+0xff7ffc24>

00807e44 <__sfvwrite_r>:
  807e44:	30800217 	ldw	r2,8(r6)
  807e48:	10006726 	beq	r2,zero,807fe8 <__sfvwrite_r+0x1a4>
  807e4c:	28c0030b 	ldhu	r3,12(r5)
  807e50:	defff404 	addi	sp,sp,-48
  807e54:	dd400715 	stw	r21,28(sp)
  807e58:	dd000615 	stw	r20,24(sp)
  807e5c:	dc000215 	stw	r16,8(sp)
  807e60:	dfc00b15 	stw	ra,44(sp)
  807e64:	df000a15 	stw	fp,40(sp)
  807e68:	ddc00915 	stw	r23,36(sp)
  807e6c:	dd800815 	stw	r22,32(sp)
  807e70:	dcc00515 	stw	r19,20(sp)
  807e74:	dc800415 	stw	r18,16(sp)
  807e78:	dc400315 	stw	r17,12(sp)
  807e7c:	1880020c 	andi	r2,r3,8
  807e80:	2821883a 	mov	r16,r5
  807e84:	202b883a 	mov	r21,r4
  807e88:	3029883a 	mov	r20,r6
  807e8c:	10002726 	beq	r2,zero,807f2c <__sfvwrite_r+0xe8>
  807e90:	28800417 	ldw	r2,16(r5)
  807e94:	10002526 	beq	r2,zero,807f2c <__sfvwrite_r+0xe8>
  807e98:	1880008c 	andi	r2,r3,2
  807e9c:	a4400017 	ldw	r17,0(r20)
  807ea0:	10002a26 	beq	r2,zero,807f4c <__sfvwrite_r+0x108>
  807ea4:	05a00034 	movhi	r22,32768
  807ea8:	0027883a 	mov	r19,zero
  807eac:	0025883a 	mov	r18,zero
  807eb0:	b5bf0004 	addi	r22,r22,-1024
  807eb4:	980d883a 	mov	r6,r19
  807eb8:	a809883a 	mov	r4,r21
  807ebc:	90004626 	beq	r18,zero,807fd8 <__sfvwrite_r+0x194>
  807ec0:	900f883a 	mov	r7,r18
  807ec4:	b480022e 	bgeu	r22,r18,807ed0 <__sfvwrite_r+0x8c>
  807ec8:	01e00034 	movhi	r7,32768
  807ecc:	39ff0004 	addi	r7,r7,-1024
  807ed0:	80800917 	ldw	r2,36(r16)
  807ed4:	81400717 	ldw	r5,28(r16)
  807ed8:	103ee83a 	callr	r2
  807edc:	0080570e 	bge	zero,r2,80803c <__sfvwrite_r+0x1f8>
  807ee0:	a0c00217 	ldw	r3,8(r20)
  807ee4:	98a7883a 	add	r19,r19,r2
  807ee8:	90a5c83a 	sub	r18,r18,r2
  807eec:	1885c83a 	sub	r2,r3,r2
  807ef0:	a0800215 	stw	r2,8(r20)
  807ef4:	103fef1e 	bne	r2,zero,807eb4 <__alt_mem_onchip_mem+0xff7ffeb4>
  807ef8:	0005883a 	mov	r2,zero
  807efc:	dfc00b17 	ldw	ra,44(sp)
  807f00:	df000a17 	ldw	fp,40(sp)
  807f04:	ddc00917 	ldw	r23,36(sp)
  807f08:	dd800817 	ldw	r22,32(sp)
  807f0c:	dd400717 	ldw	r21,28(sp)
  807f10:	dd000617 	ldw	r20,24(sp)
  807f14:	dcc00517 	ldw	r19,20(sp)
  807f18:	dc800417 	ldw	r18,16(sp)
  807f1c:	dc400317 	ldw	r17,12(sp)
  807f20:	dc000217 	ldw	r16,8(sp)
  807f24:	dec00c04 	addi	sp,sp,48
  807f28:	f800283a 	ret
  807f2c:	800b883a 	mov	r5,r16
  807f30:	a809883a 	mov	r4,r21
  807f34:	0805b880 	call	805b88 <__swsetup_r>
  807f38:	1000eb1e 	bne	r2,zero,8082e8 <__sfvwrite_r+0x4a4>
  807f3c:	80c0030b 	ldhu	r3,12(r16)
  807f40:	a4400017 	ldw	r17,0(r20)
  807f44:	1880008c 	andi	r2,r3,2
  807f48:	103fd61e 	bne	r2,zero,807ea4 <__alt_mem_onchip_mem+0xff7ffea4>
  807f4c:	1880004c 	andi	r2,r3,1
  807f50:	10003f1e 	bne	r2,zero,808050 <__sfvwrite_r+0x20c>
  807f54:	0039883a 	mov	fp,zero
  807f58:	0025883a 	mov	r18,zero
  807f5c:	90001a26 	beq	r18,zero,807fc8 <__sfvwrite_r+0x184>
  807f60:	1880800c 	andi	r2,r3,512
  807f64:	84c00217 	ldw	r19,8(r16)
  807f68:	10002126 	beq	r2,zero,807ff0 <__sfvwrite_r+0x1ac>
  807f6c:	982f883a 	mov	r23,r19
  807f70:	94c09336 	bltu	r18,r19,8081c0 <__sfvwrite_r+0x37c>
  807f74:	1881200c 	andi	r2,r3,1152
  807f78:	10009e1e 	bne	r2,zero,8081f4 <__sfvwrite_r+0x3b0>
  807f7c:	81000017 	ldw	r4,0(r16)
  807f80:	b80d883a 	mov	r6,r23
  807f84:	e00b883a 	mov	r5,fp
  807f88:	08086bc0 	call	8086bc <memmove>
  807f8c:	80c00217 	ldw	r3,8(r16)
  807f90:	81000017 	ldw	r4,0(r16)
  807f94:	9005883a 	mov	r2,r18
  807f98:	1ce7c83a 	sub	r19,r3,r19
  807f9c:	25cf883a 	add	r7,r4,r23
  807fa0:	84c00215 	stw	r19,8(r16)
  807fa4:	81c00015 	stw	r7,0(r16)
  807fa8:	a0c00217 	ldw	r3,8(r20)
  807fac:	e0b9883a 	add	fp,fp,r2
  807fb0:	90a5c83a 	sub	r18,r18,r2
  807fb4:	18a7c83a 	sub	r19,r3,r2
  807fb8:	a4c00215 	stw	r19,8(r20)
  807fbc:	983fce26 	beq	r19,zero,807ef8 <__alt_mem_onchip_mem+0xff7ffef8>
  807fc0:	80c0030b 	ldhu	r3,12(r16)
  807fc4:	903fe61e 	bne	r18,zero,807f60 <__alt_mem_onchip_mem+0xff7fff60>
  807fc8:	8f000017 	ldw	fp,0(r17)
  807fcc:	8c800117 	ldw	r18,4(r17)
  807fd0:	8c400204 	addi	r17,r17,8
  807fd4:	003fe106 	br	807f5c <__alt_mem_onchip_mem+0xff7fff5c>
  807fd8:	8cc00017 	ldw	r19,0(r17)
  807fdc:	8c800117 	ldw	r18,4(r17)
  807fe0:	8c400204 	addi	r17,r17,8
  807fe4:	003fb306 	br	807eb4 <__alt_mem_onchip_mem+0xff7ffeb4>
  807fe8:	0005883a 	mov	r2,zero
  807fec:	f800283a 	ret
  807ff0:	81000017 	ldw	r4,0(r16)
  807ff4:	80800417 	ldw	r2,16(r16)
  807ff8:	11005736 	bltu	r2,r4,808158 <__sfvwrite_r+0x314>
  807ffc:	85c00517 	ldw	r23,20(r16)
  808000:	95c05536 	bltu	r18,r23,808158 <__sfvwrite_r+0x314>
  808004:	00a00034 	movhi	r2,32768
  808008:	10bfffc4 	addi	r2,r2,-1
  80800c:	9009883a 	mov	r4,r18
  808010:	1480012e 	bgeu	r2,r18,808018 <__sfvwrite_r+0x1d4>
  808014:	1009883a 	mov	r4,r2
  808018:	b80b883a 	mov	r5,r23
  80801c:	08013c00 	call	8013c0 <__divsi3>
  808020:	15cf383a 	mul	r7,r2,r23
  808024:	81400717 	ldw	r5,28(r16)
  808028:	80800917 	ldw	r2,36(r16)
  80802c:	e00d883a 	mov	r6,fp
  808030:	a809883a 	mov	r4,r21
  808034:	103ee83a 	callr	r2
  808038:	00bfdb16 	blt	zero,r2,807fa8 <__alt_mem_onchip_mem+0xff7fffa8>
  80803c:	8080030b 	ldhu	r2,12(r16)
  808040:	10801014 	ori	r2,r2,64
  808044:	8080030d 	sth	r2,12(r16)
  808048:	00bfffc4 	movi	r2,-1
  80804c:	003fab06 	br	807efc <__alt_mem_onchip_mem+0xff7ffefc>
  808050:	0027883a 	mov	r19,zero
  808054:	0011883a 	mov	r8,zero
  808058:	0039883a 	mov	fp,zero
  80805c:	0025883a 	mov	r18,zero
  808060:	90001f26 	beq	r18,zero,8080e0 <__sfvwrite_r+0x29c>
  808064:	40005a26 	beq	r8,zero,8081d0 <__sfvwrite_r+0x38c>
  808068:	982d883a 	mov	r22,r19
  80806c:	94c0012e 	bgeu	r18,r19,808074 <__sfvwrite_r+0x230>
  808070:	902d883a 	mov	r22,r18
  808074:	81000017 	ldw	r4,0(r16)
  808078:	80800417 	ldw	r2,16(r16)
  80807c:	b02f883a 	mov	r23,r22
  808080:	81c00517 	ldw	r7,20(r16)
  808084:	1100032e 	bgeu	r2,r4,808094 <__sfvwrite_r+0x250>
  808088:	80c00217 	ldw	r3,8(r16)
  80808c:	38c7883a 	add	r3,r7,r3
  808090:	1d801816 	blt	r3,r22,8080f4 <__sfvwrite_r+0x2b0>
  808094:	b1c03e16 	blt	r22,r7,808190 <__sfvwrite_r+0x34c>
  808098:	80800917 	ldw	r2,36(r16)
  80809c:	81400717 	ldw	r5,28(r16)
  8080a0:	e00d883a 	mov	r6,fp
  8080a4:	da000115 	stw	r8,4(sp)
  8080a8:	a809883a 	mov	r4,r21
  8080ac:	103ee83a 	callr	r2
  8080b0:	102f883a 	mov	r23,r2
  8080b4:	da000117 	ldw	r8,4(sp)
  8080b8:	00bfe00e 	bge	zero,r2,80803c <__alt_mem_onchip_mem+0xff80003c>
  8080bc:	9de7c83a 	sub	r19,r19,r23
  8080c0:	98001f26 	beq	r19,zero,808140 <__sfvwrite_r+0x2fc>
  8080c4:	a0800217 	ldw	r2,8(r20)
  8080c8:	e5f9883a 	add	fp,fp,r23
  8080cc:	95e5c83a 	sub	r18,r18,r23
  8080d0:	15efc83a 	sub	r23,r2,r23
  8080d4:	a5c00215 	stw	r23,8(r20)
  8080d8:	b83f8726 	beq	r23,zero,807ef8 <__alt_mem_onchip_mem+0xff7ffef8>
  8080dc:	903fe11e 	bne	r18,zero,808064 <__alt_mem_onchip_mem+0xff800064>
  8080e0:	8f000017 	ldw	fp,0(r17)
  8080e4:	8c800117 	ldw	r18,4(r17)
  8080e8:	0011883a 	mov	r8,zero
  8080ec:	8c400204 	addi	r17,r17,8
  8080f0:	003fdb06 	br	808060 <__alt_mem_onchip_mem+0xff800060>
  8080f4:	180d883a 	mov	r6,r3
  8080f8:	e00b883a 	mov	r5,fp
  8080fc:	da000115 	stw	r8,4(sp)
  808100:	d8c00015 	stw	r3,0(sp)
  808104:	08086bc0 	call	8086bc <memmove>
  808108:	d8c00017 	ldw	r3,0(sp)
  80810c:	80800017 	ldw	r2,0(r16)
  808110:	800b883a 	mov	r5,r16
  808114:	a809883a 	mov	r4,r21
  808118:	10c5883a 	add	r2,r2,r3
  80811c:	80800015 	stw	r2,0(r16)
  808120:	d8c00015 	stw	r3,0(sp)
  808124:	08078d80 	call	8078d8 <_fflush_r>
  808128:	d8c00017 	ldw	r3,0(sp)
  80812c:	da000117 	ldw	r8,4(sp)
  808130:	103fc21e 	bne	r2,zero,80803c <__alt_mem_onchip_mem+0xff80003c>
  808134:	182f883a 	mov	r23,r3
  808138:	9de7c83a 	sub	r19,r19,r23
  80813c:	983fe11e 	bne	r19,zero,8080c4 <__alt_mem_onchip_mem+0xff8000c4>
  808140:	800b883a 	mov	r5,r16
  808144:	a809883a 	mov	r4,r21
  808148:	08078d80 	call	8078d8 <_fflush_r>
  80814c:	103fbb1e 	bne	r2,zero,80803c <__alt_mem_onchip_mem+0xff80003c>
  808150:	0011883a 	mov	r8,zero
  808154:	003fdb06 	br	8080c4 <__alt_mem_onchip_mem+0xff8000c4>
  808158:	94c0012e 	bgeu	r18,r19,808160 <__sfvwrite_r+0x31c>
  80815c:	9027883a 	mov	r19,r18
  808160:	980d883a 	mov	r6,r19
  808164:	e00b883a 	mov	r5,fp
  808168:	08086bc0 	call	8086bc <memmove>
  80816c:	80800217 	ldw	r2,8(r16)
  808170:	80c00017 	ldw	r3,0(r16)
  808174:	14c5c83a 	sub	r2,r2,r19
  808178:	1cc7883a 	add	r3,r3,r19
  80817c:	80800215 	stw	r2,8(r16)
  808180:	80c00015 	stw	r3,0(r16)
  808184:	10004326 	beq	r2,zero,808294 <__sfvwrite_r+0x450>
  808188:	9805883a 	mov	r2,r19
  80818c:	003f8606 	br	807fa8 <__alt_mem_onchip_mem+0xff7fffa8>
  808190:	b00d883a 	mov	r6,r22
  808194:	e00b883a 	mov	r5,fp
  808198:	da000115 	stw	r8,4(sp)
  80819c:	08086bc0 	call	8086bc <memmove>
  8081a0:	80800217 	ldw	r2,8(r16)
  8081a4:	80c00017 	ldw	r3,0(r16)
  8081a8:	da000117 	ldw	r8,4(sp)
  8081ac:	1585c83a 	sub	r2,r2,r22
  8081b0:	1dad883a 	add	r22,r3,r22
  8081b4:	80800215 	stw	r2,8(r16)
  8081b8:	85800015 	stw	r22,0(r16)
  8081bc:	003fbf06 	br	8080bc <__alt_mem_onchip_mem+0xff8000bc>
  8081c0:	81000017 	ldw	r4,0(r16)
  8081c4:	9027883a 	mov	r19,r18
  8081c8:	902f883a 	mov	r23,r18
  8081cc:	003f6c06 	br	807f80 <__alt_mem_onchip_mem+0xff7fff80>
  8081d0:	900d883a 	mov	r6,r18
  8081d4:	01400284 	movi	r5,10
  8081d8:	e009883a 	mov	r4,fp
  8081dc:	08084900 	call	808490 <memchr>
  8081e0:	10003e26 	beq	r2,zero,8082dc <__sfvwrite_r+0x498>
  8081e4:	10800044 	addi	r2,r2,1
  8081e8:	1727c83a 	sub	r19,r2,fp
  8081ec:	02000044 	movi	r8,1
  8081f0:	003f9d06 	br	808068 <__alt_mem_onchip_mem+0xff800068>
  8081f4:	80800517 	ldw	r2,20(r16)
  8081f8:	81400417 	ldw	r5,16(r16)
  8081fc:	81c00017 	ldw	r7,0(r16)
  808200:	10a7883a 	add	r19,r2,r2
  808204:	9885883a 	add	r2,r19,r2
  808208:	1026d7fa 	srli	r19,r2,31
  80820c:	396dc83a 	sub	r22,r7,r5
  808210:	b1000044 	addi	r4,r22,1
  808214:	9885883a 	add	r2,r19,r2
  808218:	1027d07a 	srai	r19,r2,1
  80821c:	2485883a 	add	r2,r4,r18
  808220:	980d883a 	mov	r6,r19
  808224:	9880022e 	bgeu	r19,r2,808230 <__sfvwrite_r+0x3ec>
  808228:	1027883a 	mov	r19,r2
  80822c:	100d883a 	mov	r6,r2
  808230:	18c1000c 	andi	r3,r3,1024
  808234:	18001c26 	beq	r3,zero,8082a8 <__sfvwrite_r+0x464>
  808238:	300b883a 	mov	r5,r6
  80823c:	a809883a 	mov	r4,r21
  808240:	080253c0 	call	80253c <_malloc_r>
  808244:	102f883a 	mov	r23,r2
  808248:	10002926 	beq	r2,zero,8082f0 <__sfvwrite_r+0x4ac>
  80824c:	81400417 	ldw	r5,16(r16)
  808250:	b00d883a 	mov	r6,r22
  808254:	1009883a 	mov	r4,r2
  808258:	08085740 	call	808574 <memcpy>
  80825c:	8080030b 	ldhu	r2,12(r16)
  808260:	00fedfc4 	movi	r3,-1153
  808264:	10c4703a 	and	r2,r2,r3
  808268:	10802014 	ori	r2,r2,128
  80826c:	8080030d 	sth	r2,12(r16)
  808270:	bd89883a 	add	r4,r23,r22
  808274:	9d8fc83a 	sub	r7,r19,r22
  808278:	85c00415 	stw	r23,16(r16)
  80827c:	84c00515 	stw	r19,20(r16)
  808280:	81000015 	stw	r4,0(r16)
  808284:	9027883a 	mov	r19,r18
  808288:	81c00215 	stw	r7,8(r16)
  80828c:	902f883a 	mov	r23,r18
  808290:	003f3b06 	br	807f80 <__alt_mem_onchip_mem+0xff7fff80>
  808294:	800b883a 	mov	r5,r16
  808298:	a809883a 	mov	r4,r21
  80829c:	08078d80 	call	8078d8 <_fflush_r>
  8082a0:	103fb926 	beq	r2,zero,808188 <__alt_mem_onchip_mem+0xff800188>
  8082a4:	003f6506 	br	80803c <__alt_mem_onchip_mem+0xff80003c>
  8082a8:	a809883a 	mov	r4,r21
  8082ac:	08098740 	call	809874 <_realloc_r>
  8082b0:	102f883a 	mov	r23,r2
  8082b4:	103fee1e 	bne	r2,zero,808270 <__alt_mem_onchip_mem+0xff800270>
  8082b8:	81400417 	ldw	r5,16(r16)
  8082bc:	a809883a 	mov	r4,r21
  8082c0:	0807b340 	call	807b34 <_free_r>
  8082c4:	8080030b 	ldhu	r2,12(r16)
  8082c8:	00ffdfc4 	movi	r3,-129
  8082cc:	1884703a 	and	r2,r3,r2
  8082d0:	00c00304 	movi	r3,12
  8082d4:	a8c00015 	stw	r3,0(r21)
  8082d8:	003f5906 	br	808040 <__alt_mem_onchip_mem+0xff800040>
  8082dc:	94c00044 	addi	r19,r18,1
  8082e0:	02000044 	movi	r8,1
  8082e4:	003f6006 	br	808068 <__alt_mem_onchip_mem+0xff800068>
  8082e8:	00bfffc4 	movi	r2,-1
  8082ec:	003f0306 	br	807efc <__alt_mem_onchip_mem+0xff7ffefc>
  8082f0:	00800304 	movi	r2,12
  8082f4:	a8800015 	stw	r2,0(r21)
  8082f8:	8080030b 	ldhu	r2,12(r16)
  8082fc:	003f5006 	br	808040 <__alt_mem_onchip_mem+0xff800040>

00808300 <_isatty_r>:
  808300:	defffd04 	addi	sp,sp,-12
  808304:	dc000015 	stw	r16,0(sp)
  808308:	04002074 	movhi	r16,129
  80830c:	dc400115 	stw	r17,4(sp)
  808310:	841bdb04 	addi	r16,r16,28524
  808314:	2023883a 	mov	r17,r4
  808318:	2809883a 	mov	r4,r5
  80831c:	dfc00215 	stw	ra,8(sp)
  808320:	80000015 	stw	zero,0(r16)
  808324:	080f0e00 	call	80f0e0 <isatty>
  808328:	00ffffc4 	movi	r3,-1
  80832c:	10c00526 	beq	r2,r3,808344 <_isatty_r+0x44>
  808330:	dfc00217 	ldw	ra,8(sp)
  808334:	dc400117 	ldw	r17,4(sp)
  808338:	dc000017 	ldw	r16,0(sp)
  80833c:	dec00304 	addi	sp,sp,12
  808340:	f800283a 	ret
  808344:	80c00017 	ldw	r3,0(r16)
  808348:	183ff926 	beq	r3,zero,808330 <__alt_mem_onchip_mem+0xff800330>
  80834c:	88c00015 	stw	r3,0(r17)
  808350:	003ff706 	br	808330 <__alt_mem_onchip_mem+0xff800330>

00808354 <_setlocale_r>:
  808354:	30001b26 	beq	r6,zero,8083c4 <_setlocale_r+0x70>
  808358:	01402074 	movhi	r5,129
  80835c:	defffe04 	addi	sp,sp,-8
  808360:	294cab04 	addi	r5,r5,12972
  808364:	3009883a 	mov	r4,r6
  808368:	dc000015 	stw	r16,0(sp)
  80836c:	dfc00115 	stw	ra,4(sp)
  808370:	3021883a 	mov	r16,r6
  808374:	0809e4c0 	call	809e4c <strcmp>
  808378:	1000061e 	bne	r2,zero,808394 <_setlocale_r+0x40>
  80837c:	00802074 	movhi	r2,129
  808380:	108bed04 	addi	r2,r2,12212
  808384:	dfc00117 	ldw	ra,4(sp)
  808388:	dc000017 	ldw	r16,0(sp)
  80838c:	dec00204 	addi	sp,sp,8
  808390:	f800283a 	ret
  808394:	01402074 	movhi	r5,129
  808398:	294bed04 	addi	r5,r5,12212
  80839c:	8009883a 	mov	r4,r16
  8083a0:	0809e4c0 	call	809e4c <strcmp>
  8083a4:	103ff526 	beq	r2,zero,80837c <__alt_mem_onchip_mem+0xff80037c>
  8083a8:	01402074 	movhi	r5,129
  8083ac:	294bf604 	addi	r5,r5,12248
  8083b0:	8009883a 	mov	r4,r16
  8083b4:	0809e4c0 	call	809e4c <strcmp>
  8083b8:	103ff026 	beq	r2,zero,80837c <__alt_mem_onchip_mem+0xff80037c>
  8083bc:	0005883a 	mov	r2,zero
  8083c0:	003ff006 	br	808384 <__alt_mem_onchip_mem+0xff800384>
  8083c4:	00802074 	movhi	r2,129
  8083c8:	108bed04 	addi	r2,r2,12212
  8083cc:	f800283a 	ret

008083d0 <__locale_charset>:
  8083d0:	00802074 	movhi	r2,129
  8083d4:	108f6904 	addi	r2,r2,15780
  8083d8:	f800283a 	ret

008083dc <__locale_mb_cur_max>:
  8083dc:	00802074 	movhi	r2,129
  8083e0:	10947f04 	addi	r2,r2,20988
  8083e4:	10800017 	ldw	r2,0(r2)
  8083e8:	f800283a 	ret

008083ec <__locale_msgcharset>:
  8083ec:	00802074 	movhi	r2,129
  8083f0:	108f6104 	addi	r2,r2,15748
  8083f4:	f800283a 	ret

008083f8 <__locale_cjk_lang>:
  8083f8:	0005883a 	mov	r2,zero
  8083fc:	f800283a 	ret

00808400 <_localeconv_r>:
  808400:	00802074 	movhi	r2,129
  808404:	108f7104 	addi	r2,r2,15812
  808408:	f800283a 	ret

0080840c <setlocale>:
  80840c:	00802074 	movhi	r2,129
  808410:	10947b04 	addi	r2,r2,20972
  808414:	280d883a 	mov	r6,r5
  808418:	200b883a 	mov	r5,r4
  80841c:	11000017 	ldw	r4,0(r2)
  808420:	08083541 	jmpi	808354 <_setlocale_r>

00808424 <localeconv>:
  808424:	00802074 	movhi	r2,129
  808428:	108f7104 	addi	r2,r2,15812
  80842c:	f800283a 	ret

00808430 <_lseek_r>:
  808430:	defffd04 	addi	sp,sp,-12
  808434:	2805883a 	mov	r2,r5
  808438:	dc000015 	stw	r16,0(sp)
  80843c:	04002074 	movhi	r16,129
  808440:	dc400115 	stw	r17,4(sp)
  808444:	300b883a 	mov	r5,r6
  808448:	841bdb04 	addi	r16,r16,28524
  80844c:	2023883a 	mov	r17,r4
  808450:	380d883a 	mov	r6,r7
  808454:	1009883a 	mov	r4,r2
  808458:	dfc00215 	stw	ra,8(sp)
  80845c:	80000015 	stw	zero,0(r16)
  808460:	080f2ac0 	call	80f2ac <lseek>
  808464:	00ffffc4 	movi	r3,-1
  808468:	10c00526 	beq	r2,r3,808480 <_lseek_r+0x50>
  80846c:	dfc00217 	ldw	ra,8(sp)
  808470:	dc400117 	ldw	r17,4(sp)
  808474:	dc000017 	ldw	r16,0(sp)
  808478:	dec00304 	addi	sp,sp,12
  80847c:	f800283a 	ret
  808480:	80c00017 	ldw	r3,0(r16)
  808484:	183ff926 	beq	r3,zero,80846c <__alt_mem_onchip_mem+0xff80046c>
  808488:	88c00015 	stw	r3,0(r17)
  80848c:	003ff706 	br	80846c <__alt_mem_onchip_mem+0xff80046c>

00808490 <memchr>:
  808490:	208000cc 	andi	r2,r4,3
  808494:	280f883a 	mov	r7,r5
  808498:	10003426 	beq	r2,zero,80856c <memchr+0xdc>
  80849c:	30bfffc4 	addi	r2,r6,-1
  8084a0:	30001a26 	beq	r6,zero,80850c <memchr+0x7c>
  8084a4:	20c00003 	ldbu	r3,0(r4)
  8084a8:	29803fcc 	andi	r6,r5,255
  8084ac:	30c0051e 	bne	r6,r3,8084c4 <memchr+0x34>
  8084b0:	00001806 	br	808514 <memchr+0x84>
  8084b4:	10001526 	beq	r2,zero,80850c <memchr+0x7c>
  8084b8:	20c00003 	ldbu	r3,0(r4)
  8084bc:	10bfffc4 	addi	r2,r2,-1
  8084c0:	30c01426 	beq	r6,r3,808514 <memchr+0x84>
  8084c4:	21000044 	addi	r4,r4,1
  8084c8:	20c000cc 	andi	r3,r4,3
  8084cc:	183ff91e 	bne	r3,zero,8084b4 <__alt_mem_onchip_mem+0xff8004b4>
  8084d0:	020000c4 	movi	r8,3
  8084d4:	40801136 	bltu	r8,r2,80851c <memchr+0x8c>
  8084d8:	10000c26 	beq	r2,zero,80850c <memchr+0x7c>
  8084dc:	20c00003 	ldbu	r3,0(r4)
  8084e0:	29403fcc 	andi	r5,r5,255
  8084e4:	28c00b26 	beq	r5,r3,808514 <memchr+0x84>
  8084e8:	20c00044 	addi	r3,r4,1
  8084ec:	39803fcc 	andi	r6,r7,255
  8084f0:	2089883a 	add	r4,r4,r2
  8084f4:	00000306 	br	808504 <memchr+0x74>
  8084f8:	18c00044 	addi	r3,r3,1
  8084fc:	197fffc3 	ldbu	r5,-1(r3)
  808500:	31400526 	beq	r6,r5,808518 <memchr+0x88>
  808504:	1805883a 	mov	r2,r3
  808508:	20fffb1e 	bne	r4,r3,8084f8 <__alt_mem_onchip_mem+0xff8004f8>
  80850c:	0005883a 	mov	r2,zero
  808510:	f800283a 	ret
  808514:	2005883a 	mov	r2,r4
  808518:	f800283a 	ret
  80851c:	28c03fcc 	andi	r3,r5,255
  808520:	1812923a 	slli	r9,r3,8
  808524:	02ffbff4 	movhi	r11,65279
  808528:	02a02074 	movhi	r10,32897
  80852c:	48d2b03a 	or	r9,r9,r3
  808530:	4806943a 	slli	r3,r9,16
  808534:	5affbfc4 	addi	r11,r11,-257
  808538:	52a02004 	addi	r10,r10,-32640
  80853c:	48d2b03a 	or	r9,r9,r3
  808540:	20c00017 	ldw	r3,0(r4)
  808544:	48c6f03a 	xor	r3,r9,r3
  808548:	1acd883a 	add	r6,r3,r11
  80854c:	00c6303a 	nor	r3,zero,r3
  808550:	30c6703a 	and	r3,r6,r3
  808554:	1a86703a 	and	r3,r3,r10
  808558:	183fe01e 	bne	r3,zero,8084dc <__alt_mem_onchip_mem+0xff8004dc>
  80855c:	10bfff04 	addi	r2,r2,-4
  808560:	21000104 	addi	r4,r4,4
  808564:	40bff636 	bltu	r8,r2,808540 <__alt_mem_onchip_mem+0xff800540>
  808568:	003fdb06 	br	8084d8 <__alt_mem_onchip_mem+0xff8004d8>
  80856c:	3005883a 	mov	r2,r6
  808570:	003fd706 	br	8084d0 <__alt_mem_onchip_mem+0xff8004d0>

00808574 <memcpy>:
  808574:	defffd04 	addi	sp,sp,-12
  808578:	dfc00215 	stw	ra,8(sp)
  80857c:	dc400115 	stw	r17,4(sp)
  808580:	dc000015 	stw	r16,0(sp)
  808584:	00c003c4 	movi	r3,15
  808588:	2005883a 	mov	r2,r4
  80858c:	1980452e 	bgeu	r3,r6,8086a4 <memcpy+0x130>
  808590:	2906b03a 	or	r3,r5,r4
  808594:	18c000cc 	andi	r3,r3,3
  808598:	1800441e 	bne	r3,zero,8086ac <memcpy+0x138>
  80859c:	347ffc04 	addi	r17,r6,-16
  8085a0:	8822d13a 	srli	r17,r17,4
  8085a4:	28c00104 	addi	r3,r5,4
  8085a8:	23400104 	addi	r13,r4,4
  8085ac:	8820913a 	slli	r16,r17,4
  8085b0:	2b000204 	addi	r12,r5,8
  8085b4:	22c00204 	addi	r11,r4,8
  8085b8:	84000504 	addi	r16,r16,20
  8085bc:	2a800304 	addi	r10,r5,12
  8085c0:	22400304 	addi	r9,r4,12
  8085c4:	2c21883a 	add	r16,r5,r16
  8085c8:	2811883a 	mov	r8,r5
  8085cc:	200f883a 	mov	r7,r4
  8085d0:	41000017 	ldw	r4,0(r8)
  8085d4:	1fc00017 	ldw	ra,0(r3)
  8085d8:	63c00017 	ldw	r15,0(r12)
  8085dc:	39000015 	stw	r4,0(r7)
  8085e0:	53800017 	ldw	r14,0(r10)
  8085e4:	6fc00015 	stw	ra,0(r13)
  8085e8:	5bc00015 	stw	r15,0(r11)
  8085ec:	4b800015 	stw	r14,0(r9)
  8085f0:	18c00404 	addi	r3,r3,16
  8085f4:	39c00404 	addi	r7,r7,16
  8085f8:	42000404 	addi	r8,r8,16
  8085fc:	6b400404 	addi	r13,r13,16
  808600:	63000404 	addi	r12,r12,16
  808604:	5ac00404 	addi	r11,r11,16
  808608:	52800404 	addi	r10,r10,16
  80860c:	4a400404 	addi	r9,r9,16
  808610:	1c3fef1e 	bne	r3,r16,8085d0 <__alt_mem_onchip_mem+0xff8005d0>
  808614:	89c00044 	addi	r7,r17,1
  808618:	380e913a 	slli	r7,r7,4
  80861c:	310003cc 	andi	r4,r6,15
  808620:	02c000c4 	movi	r11,3
  808624:	11c7883a 	add	r3,r2,r7
  808628:	29cb883a 	add	r5,r5,r7
  80862c:	5900212e 	bgeu	r11,r4,8086b4 <memcpy+0x140>
  808630:	1813883a 	mov	r9,r3
  808634:	2811883a 	mov	r8,r5
  808638:	200f883a 	mov	r7,r4
  80863c:	42800017 	ldw	r10,0(r8)
  808640:	4a400104 	addi	r9,r9,4
  808644:	39ffff04 	addi	r7,r7,-4
  808648:	4abfff15 	stw	r10,-4(r9)
  80864c:	42000104 	addi	r8,r8,4
  808650:	59fffa36 	bltu	r11,r7,80863c <__alt_mem_onchip_mem+0xff80063c>
  808654:	213fff04 	addi	r4,r4,-4
  808658:	2008d0ba 	srli	r4,r4,2
  80865c:	318000cc 	andi	r6,r6,3
  808660:	21000044 	addi	r4,r4,1
  808664:	2109883a 	add	r4,r4,r4
  808668:	2109883a 	add	r4,r4,r4
  80866c:	1907883a 	add	r3,r3,r4
  808670:	290b883a 	add	r5,r5,r4
  808674:	30000626 	beq	r6,zero,808690 <memcpy+0x11c>
  808678:	198d883a 	add	r6,r3,r6
  80867c:	29c00003 	ldbu	r7,0(r5)
  808680:	18c00044 	addi	r3,r3,1
  808684:	29400044 	addi	r5,r5,1
  808688:	19ffffc5 	stb	r7,-1(r3)
  80868c:	19bffb1e 	bne	r3,r6,80867c <__alt_mem_onchip_mem+0xff80067c>
  808690:	dfc00217 	ldw	ra,8(sp)
  808694:	dc400117 	ldw	r17,4(sp)
  808698:	dc000017 	ldw	r16,0(sp)
  80869c:	dec00304 	addi	sp,sp,12
  8086a0:	f800283a 	ret
  8086a4:	2007883a 	mov	r3,r4
  8086a8:	003ff206 	br	808674 <__alt_mem_onchip_mem+0xff800674>
  8086ac:	2007883a 	mov	r3,r4
  8086b0:	003ff106 	br	808678 <__alt_mem_onchip_mem+0xff800678>
  8086b4:	200d883a 	mov	r6,r4
  8086b8:	003fee06 	br	808674 <__alt_mem_onchip_mem+0xff800674>

008086bc <memmove>:
  8086bc:	2005883a 	mov	r2,r4
  8086c0:	29000b2e 	bgeu	r5,r4,8086f0 <memmove+0x34>
  8086c4:	298f883a 	add	r7,r5,r6
  8086c8:	21c0092e 	bgeu	r4,r7,8086f0 <memmove+0x34>
  8086cc:	2187883a 	add	r3,r4,r6
  8086d0:	198bc83a 	sub	r5,r3,r6
  8086d4:	30004826 	beq	r6,zero,8087f8 <memmove+0x13c>
  8086d8:	39ffffc4 	addi	r7,r7,-1
  8086dc:	39000003 	ldbu	r4,0(r7)
  8086e0:	18ffffc4 	addi	r3,r3,-1
  8086e4:	19000005 	stb	r4,0(r3)
  8086e8:	28fffb1e 	bne	r5,r3,8086d8 <__alt_mem_onchip_mem+0xff8006d8>
  8086ec:	f800283a 	ret
  8086f0:	00c003c4 	movi	r3,15
  8086f4:	1980412e 	bgeu	r3,r6,8087fc <memmove+0x140>
  8086f8:	2886b03a 	or	r3,r5,r2
  8086fc:	18c000cc 	andi	r3,r3,3
  808700:	1800401e 	bne	r3,zero,808804 <memmove+0x148>
  808704:	33fffc04 	addi	r15,r6,-16
  808708:	781ed13a 	srli	r15,r15,4
  80870c:	28c00104 	addi	r3,r5,4
  808710:	13400104 	addi	r13,r2,4
  808714:	781c913a 	slli	r14,r15,4
  808718:	2b000204 	addi	r12,r5,8
  80871c:	12c00204 	addi	r11,r2,8
  808720:	73800504 	addi	r14,r14,20
  808724:	2a800304 	addi	r10,r5,12
  808728:	12400304 	addi	r9,r2,12
  80872c:	2b9d883a 	add	r14,r5,r14
  808730:	2811883a 	mov	r8,r5
  808734:	100f883a 	mov	r7,r2
  808738:	41000017 	ldw	r4,0(r8)
  80873c:	39c00404 	addi	r7,r7,16
  808740:	18c00404 	addi	r3,r3,16
  808744:	393ffc15 	stw	r4,-16(r7)
  808748:	193ffc17 	ldw	r4,-16(r3)
  80874c:	6b400404 	addi	r13,r13,16
  808750:	5ac00404 	addi	r11,r11,16
  808754:	693ffc15 	stw	r4,-16(r13)
  808758:	61000017 	ldw	r4,0(r12)
  80875c:	4a400404 	addi	r9,r9,16
  808760:	42000404 	addi	r8,r8,16
  808764:	593ffc15 	stw	r4,-16(r11)
  808768:	51000017 	ldw	r4,0(r10)
  80876c:	63000404 	addi	r12,r12,16
  808770:	52800404 	addi	r10,r10,16
  808774:	493ffc15 	stw	r4,-16(r9)
  808778:	1bbfef1e 	bne	r3,r14,808738 <__alt_mem_onchip_mem+0xff800738>
  80877c:	79000044 	addi	r4,r15,1
  808780:	2008913a 	slli	r4,r4,4
  808784:	328003cc 	andi	r10,r6,15
  808788:	02c000c4 	movi	r11,3
  80878c:	1107883a 	add	r3,r2,r4
  808790:	290b883a 	add	r5,r5,r4
  808794:	5a801e2e 	bgeu	r11,r10,808810 <memmove+0x154>
  808798:	1813883a 	mov	r9,r3
  80879c:	2811883a 	mov	r8,r5
  8087a0:	500f883a 	mov	r7,r10
  8087a4:	41000017 	ldw	r4,0(r8)
  8087a8:	4a400104 	addi	r9,r9,4
  8087ac:	39ffff04 	addi	r7,r7,-4
  8087b0:	493fff15 	stw	r4,-4(r9)
  8087b4:	42000104 	addi	r8,r8,4
  8087b8:	59fffa36 	bltu	r11,r7,8087a4 <__alt_mem_onchip_mem+0xff8007a4>
  8087bc:	513fff04 	addi	r4,r10,-4
  8087c0:	2008d0ba 	srli	r4,r4,2
  8087c4:	318000cc 	andi	r6,r6,3
  8087c8:	21000044 	addi	r4,r4,1
  8087cc:	2109883a 	add	r4,r4,r4
  8087d0:	2109883a 	add	r4,r4,r4
  8087d4:	1907883a 	add	r3,r3,r4
  8087d8:	290b883a 	add	r5,r5,r4
  8087dc:	30000b26 	beq	r6,zero,80880c <memmove+0x150>
  8087e0:	198d883a 	add	r6,r3,r6
  8087e4:	29c00003 	ldbu	r7,0(r5)
  8087e8:	18c00044 	addi	r3,r3,1
  8087ec:	29400044 	addi	r5,r5,1
  8087f0:	19ffffc5 	stb	r7,-1(r3)
  8087f4:	19bffb1e 	bne	r3,r6,8087e4 <__alt_mem_onchip_mem+0xff8007e4>
  8087f8:	f800283a 	ret
  8087fc:	1007883a 	mov	r3,r2
  808800:	003ff606 	br	8087dc <__alt_mem_onchip_mem+0xff8007dc>
  808804:	1007883a 	mov	r3,r2
  808808:	003ff506 	br	8087e0 <__alt_mem_onchip_mem+0xff8007e0>
  80880c:	f800283a 	ret
  808810:	500d883a 	mov	r6,r10
  808814:	003ff106 	br	8087dc <__alt_mem_onchip_mem+0xff8007dc>

00808818 <_Balloc>:
  808818:	20801317 	ldw	r2,76(r4)
  80881c:	defffc04 	addi	sp,sp,-16
  808820:	dc400115 	stw	r17,4(sp)
  808824:	dc000015 	stw	r16,0(sp)
  808828:	dfc00315 	stw	ra,12(sp)
  80882c:	dc800215 	stw	r18,8(sp)
  808830:	2023883a 	mov	r17,r4
  808834:	2821883a 	mov	r16,r5
  808838:	10000f26 	beq	r2,zero,808878 <_Balloc+0x60>
  80883c:	8407883a 	add	r3,r16,r16
  808840:	18c7883a 	add	r3,r3,r3
  808844:	10c7883a 	add	r3,r2,r3
  808848:	18800017 	ldw	r2,0(r3)
  80884c:	10001126 	beq	r2,zero,808894 <_Balloc+0x7c>
  808850:	11000017 	ldw	r4,0(r2)
  808854:	19000015 	stw	r4,0(r3)
  808858:	10000415 	stw	zero,16(r2)
  80885c:	10000315 	stw	zero,12(r2)
  808860:	dfc00317 	ldw	ra,12(sp)
  808864:	dc800217 	ldw	r18,8(sp)
  808868:	dc400117 	ldw	r17,4(sp)
  80886c:	dc000017 	ldw	r16,0(sp)
  808870:	dec00404 	addi	sp,sp,16
  808874:	f800283a 	ret
  808878:	01800844 	movi	r6,33
  80887c:	01400104 	movi	r5,4
  808880:	080b6080 	call	80b608 <_calloc_r>
  808884:	88801315 	stw	r2,76(r17)
  808888:	103fec1e 	bne	r2,zero,80883c <__alt_mem_onchip_mem+0xff80083c>
  80888c:	0005883a 	mov	r2,zero
  808890:	003ff306 	br	808860 <__alt_mem_onchip_mem+0xff800860>
  808894:	01400044 	movi	r5,1
  808898:	2c24983a 	sll	r18,r5,r16
  80889c:	8809883a 	mov	r4,r17
  8088a0:	91800144 	addi	r6,r18,5
  8088a4:	318d883a 	add	r6,r6,r6
  8088a8:	318d883a 	add	r6,r6,r6
  8088ac:	080b6080 	call	80b608 <_calloc_r>
  8088b0:	103ff626 	beq	r2,zero,80888c <__alt_mem_onchip_mem+0xff80088c>
  8088b4:	14000115 	stw	r16,4(r2)
  8088b8:	14800215 	stw	r18,8(r2)
  8088bc:	003fe606 	br	808858 <__alt_mem_onchip_mem+0xff800858>

008088c0 <_Bfree>:
  8088c0:	28000826 	beq	r5,zero,8088e4 <_Bfree+0x24>
  8088c4:	28c00117 	ldw	r3,4(r5)
  8088c8:	20801317 	ldw	r2,76(r4)
  8088cc:	18c7883a 	add	r3,r3,r3
  8088d0:	18c7883a 	add	r3,r3,r3
  8088d4:	10c5883a 	add	r2,r2,r3
  8088d8:	10c00017 	ldw	r3,0(r2)
  8088dc:	28c00015 	stw	r3,0(r5)
  8088e0:	11400015 	stw	r5,0(r2)
  8088e4:	f800283a 	ret

008088e8 <__multadd>:
  8088e8:	defffa04 	addi	sp,sp,-24
  8088ec:	dc800315 	stw	r18,12(sp)
  8088f0:	dc400215 	stw	r17,8(sp)
  8088f4:	dc000115 	stw	r16,4(sp)
  8088f8:	2823883a 	mov	r17,r5
  8088fc:	2c000417 	ldw	r16,16(r5)
  808900:	dfc00515 	stw	ra,20(sp)
  808904:	dcc00415 	stw	r19,16(sp)
  808908:	2025883a 	mov	r18,r4
  80890c:	29400504 	addi	r5,r5,20
  808910:	0011883a 	mov	r8,zero
  808914:	28c00017 	ldw	r3,0(r5)
  808918:	29400104 	addi	r5,r5,4
  80891c:	42000044 	addi	r8,r8,1
  808920:	18bfffcc 	andi	r2,r3,65535
  808924:	1185383a 	mul	r2,r2,r6
  808928:	1806d43a 	srli	r3,r3,16
  80892c:	11cf883a 	add	r7,r2,r7
  808930:	3808d43a 	srli	r4,r7,16
  808934:	1987383a 	mul	r3,r3,r6
  808938:	38bfffcc 	andi	r2,r7,65535
  80893c:	1907883a 	add	r3,r3,r4
  808940:	1808943a 	slli	r4,r3,16
  808944:	180ed43a 	srli	r7,r3,16
  808948:	2085883a 	add	r2,r4,r2
  80894c:	28bfff15 	stw	r2,-4(r5)
  808950:	443ff016 	blt	r8,r16,808914 <__alt_mem_onchip_mem+0xff800914>
  808954:	38000926 	beq	r7,zero,80897c <__multadd+0x94>
  808958:	88800217 	ldw	r2,8(r17)
  80895c:	80800f0e 	bge	r16,r2,80899c <__multadd+0xb4>
  808960:	80800144 	addi	r2,r16,5
  808964:	1085883a 	add	r2,r2,r2
  808968:	1085883a 	add	r2,r2,r2
  80896c:	8885883a 	add	r2,r17,r2
  808970:	11c00015 	stw	r7,0(r2)
  808974:	84000044 	addi	r16,r16,1
  808978:	8c000415 	stw	r16,16(r17)
  80897c:	8805883a 	mov	r2,r17
  808980:	dfc00517 	ldw	ra,20(sp)
  808984:	dcc00417 	ldw	r19,16(sp)
  808988:	dc800317 	ldw	r18,12(sp)
  80898c:	dc400217 	ldw	r17,8(sp)
  808990:	dc000117 	ldw	r16,4(sp)
  808994:	dec00604 	addi	sp,sp,24
  808998:	f800283a 	ret
  80899c:	89400117 	ldw	r5,4(r17)
  8089a0:	9009883a 	mov	r4,r18
  8089a4:	d9c00015 	stw	r7,0(sp)
  8089a8:	29400044 	addi	r5,r5,1
  8089ac:	08088180 	call	808818 <_Balloc>
  8089b0:	89800417 	ldw	r6,16(r17)
  8089b4:	89400304 	addi	r5,r17,12
  8089b8:	11000304 	addi	r4,r2,12
  8089bc:	31800084 	addi	r6,r6,2
  8089c0:	318d883a 	add	r6,r6,r6
  8089c4:	318d883a 	add	r6,r6,r6
  8089c8:	1027883a 	mov	r19,r2
  8089cc:	08085740 	call	808574 <memcpy>
  8089d0:	d9c00017 	ldw	r7,0(sp)
  8089d4:	88000a26 	beq	r17,zero,808a00 <__multadd+0x118>
  8089d8:	88c00117 	ldw	r3,4(r17)
  8089dc:	90801317 	ldw	r2,76(r18)
  8089e0:	18c7883a 	add	r3,r3,r3
  8089e4:	18c7883a 	add	r3,r3,r3
  8089e8:	10c5883a 	add	r2,r2,r3
  8089ec:	10c00017 	ldw	r3,0(r2)
  8089f0:	88c00015 	stw	r3,0(r17)
  8089f4:	14400015 	stw	r17,0(r2)
  8089f8:	9823883a 	mov	r17,r19
  8089fc:	003fd806 	br	808960 <__alt_mem_onchip_mem+0xff800960>
  808a00:	9823883a 	mov	r17,r19
  808a04:	003fd606 	br	808960 <__alt_mem_onchip_mem+0xff800960>

00808a08 <__s2b>:
  808a08:	defff904 	addi	sp,sp,-28
  808a0c:	dc400115 	stw	r17,4(sp)
  808a10:	dc000015 	stw	r16,0(sp)
  808a14:	2023883a 	mov	r17,r4
  808a18:	2821883a 	mov	r16,r5
  808a1c:	39000204 	addi	r4,r7,8
  808a20:	01400244 	movi	r5,9
  808a24:	dcc00315 	stw	r19,12(sp)
  808a28:	dc800215 	stw	r18,8(sp)
  808a2c:	dfc00615 	stw	ra,24(sp)
  808a30:	dd400515 	stw	r21,20(sp)
  808a34:	dd000415 	stw	r20,16(sp)
  808a38:	3825883a 	mov	r18,r7
  808a3c:	3027883a 	mov	r19,r6
  808a40:	08013c00 	call	8013c0 <__divsi3>
  808a44:	00c00044 	movi	r3,1
  808a48:	000b883a 	mov	r5,zero
  808a4c:	1880030e 	bge	r3,r2,808a5c <__s2b+0x54>
  808a50:	18c7883a 	add	r3,r3,r3
  808a54:	29400044 	addi	r5,r5,1
  808a58:	18bffd16 	blt	r3,r2,808a50 <__alt_mem_onchip_mem+0xff800a50>
  808a5c:	8809883a 	mov	r4,r17
  808a60:	08088180 	call	808818 <_Balloc>
  808a64:	d8c00717 	ldw	r3,28(sp)
  808a68:	10c00515 	stw	r3,20(r2)
  808a6c:	00c00044 	movi	r3,1
  808a70:	10c00415 	stw	r3,16(r2)
  808a74:	00c00244 	movi	r3,9
  808a78:	1cc0210e 	bge	r3,r19,808b00 <__s2b+0xf8>
  808a7c:	80eb883a 	add	r21,r16,r3
  808a80:	a829883a 	mov	r20,r21
  808a84:	84e1883a 	add	r16,r16,r19
  808a88:	a1c00007 	ldb	r7,0(r20)
  808a8c:	01800284 	movi	r6,10
  808a90:	a5000044 	addi	r20,r20,1
  808a94:	100b883a 	mov	r5,r2
  808a98:	39fff404 	addi	r7,r7,-48
  808a9c:	8809883a 	mov	r4,r17
  808aa0:	08088e80 	call	8088e8 <__multadd>
  808aa4:	a43ff81e 	bne	r20,r16,808a88 <__alt_mem_onchip_mem+0xff800a88>
  808aa8:	ace1883a 	add	r16,r21,r19
  808aac:	843ffe04 	addi	r16,r16,-8
  808ab0:	9c800a0e 	bge	r19,r18,808adc <__s2b+0xd4>
  808ab4:	94e5c83a 	sub	r18,r18,r19
  808ab8:	84a5883a 	add	r18,r16,r18
  808abc:	81c00007 	ldb	r7,0(r16)
  808ac0:	01800284 	movi	r6,10
  808ac4:	84000044 	addi	r16,r16,1
  808ac8:	100b883a 	mov	r5,r2
  808acc:	39fff404 	addi	r7,r7,-48
  808ad0:	8809883a 	mov	r4,r17
  808ad4:	08088e80 	call	8088e8 <__multadd>
  808ad8:	84bff81e 	bne	r16,r18,808abc <__alt_mem_onchip_mem+0xff800abc>
  808adc:	dfc00617 	ldw	ra,24(sp)
  808ae0:	dd400517 	ldw	r21,20(sp)
  808ae4:	dd000417 	ldw	r20,16(sp)
  808ae8:	dcc00317 	ldw	r19,12(sp)
  808aec:	dc800217 	ldw	r18,8(sp)
  808af0:	dc400117 	ldw	r17,4(sp)
  808af4:	dc000017 	ldw	r16,0(sp)
  808af8:	dec00704 	addi	sp,sp,28
  808afc:	f800283a 	ret
  808b00:	84000284 	addi	r16,r16,10
  808b04:	1827883a 	mov	r19,r3
  808b08:	003fe906 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>

00808b0c <__hi0bits>:
  808b0c:	20bfffec 	andhi	r2,r4,65535
  808b10:	1000141e 	bne	r2,zero,808b64 <__hi0bits+0x58>
  808b14:	2008943a 	slli	r4,r4,16
  808b18:	00800404 	movi	r2,16
  808b1c:	20ffc02c 	andhi	r3,r4,65280
  808b20:	1800021e 	bne	r3,zero,808b2c <__hi0bits+0x20>
  808b24:	2008923a 	slli	r4,r4,8
  808b28:	10800204 	addi	r2,r2,8
  808b2c:	20fc002c 	andhi	r3,r4,61440
  808b30:	1800021e 	bne	r3,zero,808b3c <__hi0bits+0x30>
  808b34:	2008913a 	slli	r4,r4,4
  808b38:	10800104 	addi	r2,r2,4
  808b3c:	20f0002c 	andhi	r3,r4,49152
  808b40:	1800031e 	bne	r3,zero,808b50 <__hi0bits+0x44>
  808b44:	2109883a 	add	r4,r4,r4
  808b48:	10800084 	addi	r2,r2,2
  808b4c:	2109883a 	add	r4,r4,r4
  808b50:	20000316 	blt	r4,zero,808b60 <__hi0bits+0x54>
  808b54:	2110002c 	andhi	r4,r4,16384
  808b58:	2000041e 	bne	r4,zero,808b6c <__hi0bits+0x60>
  808b5c:	00800804 	movi	r2,32
  808b60:	f800283a 	ret
  808b64:	0005883a 	mov	r2,zero
  808b68:	003fec06 	br	808b1c <__alt_mem_onchip_mem+0xff800b1c>
  808b6c:	10800044 	addi	r2,r2,1
  808b70:	f800283a 	ret

00808b74 <__lo0bits>:
  808b74:	20c00017 	ldw	r3,0(r4)
  808b78:	188001cc 	andi	r2,r3,7
  808b7c:	10000826 	beq	r2,zero,808ba0 <__lo0bits+0x2c>
  808b80:	1880004c 	andi	r2,r3,1
  808b84:	1000211e 	bne	r2,zero,808c0c <__lo0bits+0x98>
  808b88:	1880008c 	andi	r2,r3,2
  808b8c:	1000211e 	bne	r2,zero,808c14 <__lo0bits+0xa0>
  808b90:	1806d0ba 	srli	r3,r3,2
  808b94:	00800084 	movi	r2,2
  808b98:	20c00015 	stw	r3,0(r4)
  808b9c:	f800283a 	ret
  808ba0:	18bfffcc 	andi	r2,r3,65535
  808ba4:	10001326 	beq	r2,zero,808bf4 <__lo0bits+0x80>
  808ba8:	0005883a 	mov	r2,zero
  808bac:	19403fcc 	andi	r5,r3,255
  808bb0:	2800021e 	bne	r5,zero,808bbc <__lo0bits+0x48>
  808bb4:	1806d23a 	srli	r3,r3,8
  808bb8:	10800204 	addi	r2,r2,8
  808bbc:	194003cc 	andi	r5,r3,15
  808bc0:	2800021e 	bne	r5,zero,808bcc <__lo0bits+0x58>
  808bc4:	1806d13a 	srli	r3,r3,4
  808bc8:	10800104 	addi	r2,r2,4
  808bcc:	194000cc 	andi	r5,r3,3
  808bd0:	2800021e 	bne	r5,zero,808bdc <__lo0bits+0x68>
  808bd4:	1806d0ba 	srli	r3,r3,2
  808bd8:	10800084 	addi	r2,r2,2
  808bdc:	1940004c 	andi	r5,r3,1
  808be0:	2800081e 	bne	r5,zero,808c04 <__lo0bits+0x90>
  808be4:	1806d07a 	srli	r3,r3,1
  808be8:	1800051e 	bne	r3,zero,808c00 <__lo0bits+0x8c>
  808bec:	00800804 	movi	r2,32
  808bf0:	f800283a 	ret
  808bf4:	1806d43a 	srli	r3,r3,16
  808bf8:	00800404 	movi	r2,16
  808bfc:	003feb06 	br	808bac <__alt_mem_onchip_mem+0xff800bac>
  808c00:	10800044 	addi	r2,r2,1
  808c04:	20c00015 	stw	r3,0(r4)
  808c08:	f800283a 	ret
  808c0c:	0005883a 	mov	r2,zero
  808c10:	f800283a 	ret
  808c14:	1806d07a 	srli	r3,r3,1
  808c18:	00800044 	movi	r2,1
  808c1c:	20c00015 	stw	r3,0(r4)
  808c20:	f800283a 	ret

00808c24 <__i2b>:
  808c24:	defffd04 	addi	sp,sp,-12
  808c28:	dc000015 	stw	r16,0(sp)
  808c2c:	04000044 	movi	r16,1
  808c30:	dc400115 	stw	r17,4(sp)
  808c34:	2823883a 	mov	r17,r5
  808c38:	800b883a 	mov	r5,r16
  808c3c:	dfc00215 	stw	ra,8(sp)
  808c40:	08088180 	call	808818 <_Balloc>
  808c44:	14400515 	stw	r17,20(r2)
  808c48:	14000415 	stw	r16,16(r2)
  808c4c:	dfc00217 	ldw	ra,8(sp)
  808c50:	dc400117 	ldw	r17,4(sp)
  808c54:	dc000017 	ldw	r16,0(sp)
  808c58:	dec00304 	addi	sp,sp,12
  808c5c:	f800283a 	ret

00808c60 <__multiply>:
  808c60:	defffa04 	addi	sp,sp,-24
  808c64:	dcc00315 	stw	r19,12(sp)
  808c68:	dc800215 	stw	r18,8(sp)
  808c6c:	34c00417 	ldw	r19,16(r6)
  808c70:	2c800417 	ldw	r18,16(r5)
  808c74:	dd000415 	stw	r20,16(sp)
  808c78:	dc400115 	stw	r17,4(sp)
  808c7c:	dfc00515 	stw	ra,20(sp)
  808c80:	dc000015 	stw	r16,0(sp)
  808c84:	2829883a 	mov	r20,r5
  808c88:	3023883a 	mov	r17,r6
  808c8c:	94c0050e 	bge	r18,r19,808ca4 <__multiply+0x44>
  808c90:	9007883a 	mov	r3,r18
  808c94:	3029883a 	mov	r20,r6
  808c98:	9825883a 	mov	r18,r19
  808c9c:	2823883a 	mov	r17,r5
  808ca0:	1827883a 	mov	r19,r3
  808ca4:	a0800217 	ldw	r2,8(r20)
  808ca8:	94e1883a 	add	r16,r18,r19
  808cac:	a1400117 	ldw	r5,4(r20)
  808cb0:	1400010e 	bge	r2,r16,808cb8 <__multiply+0x58>
  808cb4:	29400044 	addi	r5,r5,1
  808cb8:	08088180 	call	808818 <_Balloc>
  808cbc:	8415883a 	add	r10,r16,r16
  808cc0:	12c00504 	addi	r11,r2,20
  808cc4:	5295883a 	add	r10,r10,r10
  808cc8:	5a95883a 	add	r10,r11,r10
  808ccc:	5807883a 	mov	r3,r11
  808cd0:	5a80032e 	bgeu	r11,r10,808ce0 <__multiply+0x80>
  808cd4:	18000015 	stw	zero,0(r3)
  808cd8:	18c00104 	addi	r3,r3,4
  808cdc:	1abffd36 	bltu	r3,r10,808cd4 <__alt_mem_onchip_mem+0xff800cd4>
  808ce0:	9ce7883a 	add	r19,r19,r19
  808ce4:	94a5883a 	add	r18,r18,r18
  808ce8:	89800504 	addi	r6,r17,20
  808cec:	9ce7883a 	add	r19,r19,r19
  808cf0:	a3400504 	addi	r13,r20,20
  808cf4:	94a5883a 	add	r18,r18,r18
  808cf8:	34d9883a 	add	r12,r6,r19
  808cfc:	6c93883a 	add	r9,r13,r18
  808d00:	3300422e 	bgeu	r6,r12,808e0c <__multiply+0x1ac>
  808d04:	37c00017 	ldw	ra,0(r6)
  808d08:	fbffffcc 	andi	r15,ra,65535
  808d0c:	78001b26 	beq	r15,zero,808d7c <__multiply+0x11c>
  808d10:	5811883a 	mov	r8,r11
  808d14:	681d883a 	mov	r14,r13
  808d18:	000f883a 	mov	r7,zero
  808d1c:	71000017 	ldw	r4,0(r14)
  808d20:	40c00017 	ldw	r3,0(r8)
  808d24:	73800104 	addi	r14,r14,4
  808d28:	217fffcc 	andi	r5,r4,65535
  808d2c:	2bcb383a 	mul	r5,r5,r15
  808d30:	2008d43a 	srli	r4,r4,16
  808d34:	1c7fffcc 	andi	r17,r3,65535
  808d38:	2c4b883a 	add	r5,r5,r17
  808d3c:	29cb883a 	add	r5,r5,r7
  808d40:	23c9383a 	mul	r4,r4,r15
  808d44:	1806d43a 	srli	r3,r3,16
  808d48:	280ed43a 	srli	r7,r5,16
  808d4c:	297fffcc 	andi	r5,r5,65535
  808d50:	20c7883a 	add	r3,r4,r3
  808d54:	19c7883a 	add	r3,r3,r7
  808d58:	1808943a 	slli	r4,r3,16
  808d5c:	4023883a 	mov	r17,r8
  808d60:	180ed43a 	srli	r7,r3,16
  808d64:	214ab03a 	or	r5,r4,r5
  808d68:	41400015 	stw	r5,0(r8)
  808d6c:	42000104 	addi	r8,r8,4
  808d70:	727fea36 	bltu	r14,r9,808d1c <__alt_mem_onchip_mem+0xff800d1c>
  808d74:	89c00115 	stw	r7,4(r17)
  808d78:	37c00017 	ldw	ra,0(r6)
  808d7c:	f83ed43a 	srli	ra,ra,16
  808d80:	f8001f26 	beq	ra,zero,808e00 <__multiply+0x1a0>
  808d84:	58c00017 	ldw	r3,0(r11)
  808d88:	681d883a 	mov	r14,r13
  808d8c:	581f883a 	mov	r15,r11
  808d90:	1811883a 	mov	r8,r3
  808d94:	5825883a 	mov	r18,r11
  808d98:	000f883a 	mov	r7,zero
  808d9c:	00000106 	br	808da4 <__multiply+0x144>
  808da0:	8825883a 	mov	r18,r17
  808da4:	7140000b 	ldhu	r5,0(r14)
  808da8:	4010d43a 	srli	r8,r8,16
  808dac:	193fffcc 	andi	r4,r3,65535
  808db0:	2fcb383a 	mul	r5,r5,ra
  808db4:	7bc00104 	addi	r15,r15,4
  808db8:	73800104 	addi	r14,r14,4
  808dbc:	2a0b883a 	add	r5,r5,r8
  808dc0:	29cb883a 	add	r5,r5,r7
  808dc4:	2806943a 	slli	r3,r5,16
  808dc8:	94400104 	addi	r17,r18,4
  808dcc:	280ad43a 	srli	r5,r5,16
  808dd0:	1908b03a 	or	r4,r3,r4
  808dd4:	793fff15 	stw	r4,-4(r15)
  808dd8:	70ffff17 	ldw	r3,-4(r14)
  808ddc:	8a000017 	ldw	r8,0(r17)
  808de0:	1806d43a 	srli	r3,r3,16
  808de4:	413fffcc 	andi	r4,r8,65535
  808de8:	1fc7383a 	mul	r3,r3,ra
  808dec:	1907883a 	add	r3,r3,r4
  808df0:	1947883a 	add	r3,r3,r5
  808df4:	180ed43a 	srli	r7,r3,16
  808df8:	727fe936 	bltu	r14,r9,808da0 <__alt_mem_onchip_mem+0xff800da0>
  808dfc:	90c00115 	stw	r3,4(r18)
  808e00:	31800104 	addi	r6,r6,4
  808e04:	5ac00104 	addi	r11,r11,4
  808e08:	333fbe36 	bltu	r6,r12,808d04 <__alt_mem_onchip_mem+0xff800d04>
  808e0c:	0400090e 	bge	zero,r16,808e34 <__multiply+0x1d4>
  808e10:	50ffff17 	ldw	r3,-4(r10)
  808e14:	52bfff04 	addi	r10,r10,-4
  808e18:	18000326 	beq	r3,zero,808e28 <__multiply+0x1c8>
  808e1c:	00000506 	br	808e34 <__multiply+0x1d4>
  808e20:	50c00017 	ldw	r3,0(r10)
  808e24:	1800031e 	bne	r3,zero,808e34 <__multiply+0x1d4>
  808e28:	843fffc4 	addi	r16,r16,-1
  808e2c:	52bfff04 	addi	r10,r10,-4
  808e30:	803ffb1e 	bne	r16,zero,808e20 <__alt_mem_onchip_mem+0xff800e20>
  808e34:	14000415 	stw	r16,16(r2)
  808e38:	dfc00517 	ldw	ra,20(sp)
  808e3c:	dd000417 	ldw	r20,16(sp)
  808e40:	dcc00317 	ldw	r19,12(sp)
  808e44:	dc800217 	ldw	r18,8(sp)
  808e48:	dc400117 	ldw	r17,4(sp)
  808e4c:	dc000017 	ldw	r16,0(sp)
  808e50:	dec00604 	addi	sp,sp,24
  808e54:	f800283a 	ret

00808e58 <__pow5mult>:
  808e58:	defffa04 	addi	sp,sp,-24
  808e5c:	dcc00315 	stw	r19,12(sp)
  808e60:	dc000015 	stw	r16,0(sp)
  808e64:	dfc00515 	stw	ra,20(sp)
  808e68:	dd000415 	stw	r20,16(sp)
  808e6c:	dc800215 	stw	r18,8(sp)
  808e70:	dc400115 	stw	r17,4(sp)
  808e74:	308000cc 	andi	r2,r6,3
  808e78:	3021883a 	mov	r16,r6
  808e7c:	2027883a 	mov	r19,r4
  808e80:	10002f1e 	bne	r2,zero,808f40 <__pow5mult+0xe8>
  808e84:	2825883a 	mov	r18,r5
  808e88:	8021d0ba 	srai	r16,r16,2
  808e8c:	80001a26 	beq	r16,zero,808ef8 <__pow5mult+0xa0>
  808e90:	9c401217 	ldw	r17,72(r19)
  808e94:	8800061e 	bne	r17,zero,808eb0 <__pow5mult+0x58>
  808e98:	00003406 	br	808f6c <__pow5mult+0x114>
  808e9c:	8021d07a 	srai	r16,r16,1
  808ea0:	80001526 	beq	r16,zero,808ef8 <__pow5mult+0xa0>
  808ea4:	88800017 	ldw	r2,0(r17)
  808ea8:	10001c26 	beq	r2,zero,808f1c <__pow5mult+0xc4>
  808eac:	1023883a 	mov	r17,r2
  808eb0:	8080004c 	andi	r2,r16,1
  808eb4:	103ff926 	beq	r2,zero,808e9c <__alt_mem_onchip_mem+0xff800e9c>
  808eb8:	880d883a 	mov	r6,r17
  808ebc:	900b883a 	mov	r5,r18
  808ec0:	9809883a 	mov	r4,r19
  808ec4:	0808c600 	call	808c60 <__multiply>
  808ec8:	90001b26 	beq	r18,zero,808f38 <__pow5mult+0xe0>
  808ecc:	91000117 	ldw	r4,4(r18)
  808ed0:	98c01317 	ldw	r3,76(r19)
  808ed4:	8021d07a 	srai	r16,r16,1
  808ed8:	2109883a 	add	r4,r4,r4
  808edc:	2109883a 	add	r4,r4,r4
  808ee0:	1907883a 	add	r3,r3,r4
  808ee4:	19000017 	ldw	r4,0(r3)
  808ee8:	91000015 	stw	r4,0(r18)
  808eec:	1c800015 	stw	r18,0(r3)
  808ef0:	1025883a 	mov	r18,r2
  808ef4:	803feb1e 	bne	r16,zero,808ea4 <__alt_mem_onchip_mem+0xff800ea4>
  808ef8:	9005883a 	mov	r2,r18
  808efc:	dfc00517 	ldw	ra,20(sp)
  808f00:	dd000417 	ldw	r20,16(sp)
  808f04:	dcc00317 	ldw	r19,12(sp)
  808f08:	dc800217 	ldw	r18,8(sp)
  808f0c:	dc400117 	ldw	r17,4(sp)
  808f10:	dc000017 	ldw	r16,0(sp)
  808f14:	dec00604 	addi	sp,sp,24
  808f18:	f800283a 	ret
  808f1c:	880d883a 	mov	r6,r17
  808f20:	880b883a 	mov	r5,r17
  808f24:	9809883a 	mov	r4,r19
  808f28:	0808c600 	call	808c60 <__multiply>
  808f2c:	88800015 	stw	r2,0(r17)
  808f30:	10000015 	stw	zero,0(r2)
  808f34:	003fdd06 	br	808eac <__alt_mem_onchip_mem+0xff800eac>
  808f38:	1025883a 	mov	r18,r2
  808f3c:	003fd706 	br	808e9c <__alt_mem_onchip_mem+0xff800e9c>
  808f40:	10bfffc4 	addi	r2,r2,-1
  808f44:	1085883a 	add	r2,r2,r2
  808f48:	00c02074 	movhi	r3,129
  808f4c:	18ccae04 	addi	r3,r3,12984
  808f50:	1085883a 	add	r2,r2,r2
  808f54:	1885883a 	add	r2,r3,r2
  808f58:	11800017 	ldw	r6,0(r2)
  808f5c:	000f883a 	mov	r7,zero
  808f60:	08088e80 	call	8088e8 <__multadd>
  808f64:	1025883a 	mov	r18,r2
  808f68:	003fc706 	br	808e88 <__alt_mem_onchip_mem+0xff800e88>
  808f6c:	05000044 	movi	r20,1
  808f70:	a00b883a 	mov	r5,r20
  808f74:	9809883a 	mov	r4,r19
  808f78:	08088180 	call	808818 <_Balloc>
  808f7c:	1023883a 	mov	r17,r2
  808f80:	00809c44 	movi	r2,625
  808f84:	88800515 	stw	r2,20(r17)
  808f88:	8d000415 	stw	r20,16(r17)
  808f8c:	9c401215 	stw	r17,72(r19)
  808f90:	88000015 	stw	zero,0(r17)
  808f94:	003fc606 	br	808eb0 <__alt_mem_onchip_mem+0xff800eb0>

00808f98 <__lshift>:
  808f98:	defff904 	addi	sp,sp,-28
  808f9c:	dd400515 	stw	r21,20(sp)
  808fa0:	dcc00315 	stw	r19,12(sp)
  808fa4:	302bd17a 	srai	r21,r6,5
  808fa8:	2cc00417 	ldw	r19,16(r5)
  808fac:	28800217 	ldw	r2,8(r5)
  808fb0:	dd000415 	stw	r20,16(sp)
  808fb4:	ace7883a 	add	r19,r21,r19
  808fb8:	dc800215 	stw	r18,8(sp)
  808fbc:	dc400115 	stw	r17,4(sp)
  808fc0:	dc000015 	stw	r16,0(sp)
  808fc4:	dfc00615 	stw	ra,24(sp)
  808fc8:	9c000044 	addi	r16,r19,1
  808fcc:	2823883a 	mov	r17,r5
  808fd0:	3029883a 	mov	r20,r6
  808fd4:	2025883a 	mov	r18,r4
  808fd8:	29400117 	ldw	r5,4(r5)
  808fdc:	1400030e 	bge	r2,r16,808fec <__lshift+0x54>
  808fe0:	1085883a 	add	r2,r2,r2
  808fe4:	29400044 	addi	r5,r5,1
  808fe8:	143ffd16 	blt	r2,r16,808fe0 <__alt_mem_onchip_mem+0xff800fe0>
  808fec:	9009883a 	mov	r4,r18
  808ff0:	08088180 	call	808818 <_Balloc>
  808ff4:	10c00504 	addi	r3,r2,20
  808ff8:	0540070e 	bge	zero,r21,809018 <__lshift+0x80>
  808ffc:	ad6b883a 	add	r21,r21,r21
  809000:	ad6b883a 	add	r21,r21,r21
  809004:	1809883a 	mov	r4,r3
  809008:	1d47883a 	add	r3,r3,r21
  80900c:	20000015 	stw	zero,0(r4)
  809010:	21000104 	addi	r4,r4,4
  809014:	193ffd1e 	bne	r3,r4,80900c <__alt_mem_onchip_mem+0xff80100c>
  809018:	8a000417 	ldw	r8,16(r17)
  80901c:	89000504 	addi	r4,r17,20
  809020:	a18007cc 	andi	r6,r20,31
  809024:	4211883a 	add	r8,r8,r8
  809028:	4211883a 	add	r8,r8,r8
  80902c:	2211883a 	add	r8,r4,r8
  809030:	30002326 	beq	r6,zero,8090c0 <__lshift+0x128>
  809034:	02400804 	movi	r9,32
  809038:	4993c83a 	sub	r9,r9,r6
  80903c:	000b883a 	mov	r5,zero
  809040:	21c00017 	ldw	r7,0(r4)
  809044:	1815883a 	mov	r10,r3
  809048:	18c00104 	addi	r3,r3,4
  80904c:	398e983a 	sll	r7,r7,r6
  809050:	21000104 	addi	r4,r4,4
  809054:	394ab03a 	or	r5,r7,r5
  809058:	197fff15 	stw	r5,-4(r3)
  80905c:	217fff17 	ldw	r5,-4(r4)
  809060:	2a4ad83a 	srl	r5,r5,r9
  809064:	223ff636 	bltu	r4,r8,809040 <__alt_mem_onchip_mem+0xff801040>
  809068:	51400115 	stw	r5,4(r10)
  80906c:	28001a1e 	bne	r5,zero,8090d8 <__lshift+0x140>
  809070:	843fffc4 	addi	r16,r16,-1
  809074:	14000415 	stw	r16,16(r2)
  809078:	88000826 	beq	r17,zero,80909c <__lshift+0x104>
  80907c:	89000117 	ldw	r4,4(r17)
  809080:	90c01317 	ldw	r3,76(r18)
  809084:	2109883a 	add	r4,r4,r4
  809088:	2109883a 	add	r4,r4,r4
  80908c:	1907883a 	add	r3,r3,r4
  809090:	19000017 	ldw	r4,0(r3)
  809094:	89000015 	stw	r4,0(r17)
  809098:	1c400015 	stw	r17,0(r3)
  80909c:	dfc00617 	ldw	ra,24(sp)
  8090a0:	dd400517 	ldw	r21,20(sp)
  8090a4:	dd000417 	ldw	r20,16(sp)
  8090a8:	dcc00317 	ldw	r19,12(sp)
  8090ac:	dc800217 	ldw	r18,8(sp)
  8090b0:	dc400117 	ldw	r17,4(sp)
  8090b4:	dc000017 	ldw	r16,0(sp)
  8090b8:	dec00704 	addi	sp,sp,28
  8090bc:	f800283a 	ret
  8090c0:	21400017 	ldw	r5,0(r4)
  8090c4:	18c00104 	addi	r3,r3,4
  8090c8:	21000104 	addi	r4,r4,4
  8090cc:	197fff15 	stw	r5,-4(r3)
  8090d0:	223ffb36 	bltu	r4,r8,8090c0 <__alt_mem_onchip_mem+0xff8010c0>
  8090d4:	003fe606 	br	809070 <__alt_mem_onchip_mem+0xff801070>
  8090d8:	9c000084 	addi	r16,r19,2
  8090dc:	003fe406 	br	809070 <__alt_mem_onchip_mem+0xff801070>

008090e0 <__mcmp>:
  8090e0:	20800417 	ldw	r2,16(r4)
  8090e4:	28c00417 	ldw	r3,16(r5)
  8090e8:	10c5c83a 	sub	r2,r2,r3
  8090ec:	1000111e 	bne	r2,zero,809134 <__mcmp+0x54>
  8090f0:	18c7883a 	add	r3,r3,r3
  8090f4:	18c7883a 	add	r3,r3,r3
  8090f8:	21000504 	addi	r4,r4,20
  8090fc:	29400504 	addi	r5,r5,20
  809100:	20c5883a 	add	r2,r4,r3
  809104:	28cb883a 	add	r5,r5,r3
  809108:	00000106 	br	809110 <__mcmp+0x30>
  80910c:	20800a2e 	bgeu	r4,r2,809138 <__mcmp+0x58>
  809110:	10bfff04 	addi	r2,r2,-4
  809114:	297fff04 	addi	r5,r5,-4
  809118:	11800017 	ldw	r6,0(r2)
  80911c:	28c00017 	ldw	r3,0(r5)
  809120:	30fffa26 	beq	r6,r3,80910c <__alt_mem_onchip_mem+0xff80110c>
  809124:	30c00236 	bltu	r6,r3,809130 <__mcmp+0x50>
  809128:	00800044 	movi	r2,1
  80912c:	f800283a 	ret
  809130:	00bfffc4 	movi	r2,-1
  809134:	f800283a 	ret
  809138:	0005883a 	mov	r2,zero
  80913c:	f800283a 	ret

00809140 <__mdiff>:
  809140:	28c00417 	ldw	r3,16(r5)
  809144:	30800417 	ldw	r2,16(r6)
  809148:	defffa04 	addi	sp,sp,-24
  80914c:	dcc00315 	stw	r19,12(sp)
  809150:	dc800215 	stw	r18,8(sp)
  809154:	dfc00515 	stw	ra,20(sp)
  809158:	dd000415 	stw	r20,16(sp)
  80915c:	dc400115 	stw	r17,4(sp)
  809160:	dc000015 	stw	r16,0(sp)
  809164:	1887c83a 	sub	r3,r3,r2
  809168:	2825883a 	mov	r18,r5
  80916c:	3027883a 	mov	r19,r6
  809170:	1800141e 	bne	r3,zero,8091c4 <__mdiff+0x84>
  809174:	1085883a 	add	r2,r2,r2
  809178:	1085883a 	add	r2,r2,r2
  80917c:	2a000504 	addi	r8,r5,20
  809180:	34000504 	addi	r16,r6,20
  809184:	4087883a 	add	r3,r8,r2
  809188:	8085883a 	add	r2,r16,r2
  80918c:	00000106 	br	809194 <__mdiff+0x54>
  809190:	40c0592e 	bgeu	r8,r3,8092f8 <__mdiff+0x1b8>
  809194:	18ffff04 	addi	r3,r3,-4
  809198:	10bfff04 	addi	r2,r2,-4
  80919c:	19c00017 	ldw	r7,0(r3)
  8091a0:	11400017 	ldw	r5,0(r2)
  8091a4:	397ffa26 	beq	r7,r5,809190 <__alt_mem_onchip_mem+0xff801190>
  8091a8:	3940592e 	bgeu	r7,r5,809310 <__mdiff+0x1d0>
  8091ac:	9005883a 	mov	r2,r18
  8091b0:	4023883a 	mov	r17,r8
  8091b4:	9825883a 	mov	r18,r19
  8091b8:	05000044 	movi	r20,1
  8091bc:	1027883a 	mov	r19,r2
  8091c0:	00000406 	br	8091d4 <__mdiff+0x94>
  8091c4:	18005616 	blt	r3,zero,809320 <__mdiff+0x1e0>
  8091c8:	34400504 	addi	r17,r6,20
  8091cc:	2c000504 	addi	r16,r5,20
  8091d0:	0029883a 	mov	r20,zero
  8091d4:	91400117 	ldw	r5,4(r18)
  8091d8:	08088180 	call	808818 <_Balloc>
  8091dc:	92400417 	ldw	r9,16(r18)
  8091e0:	9b000417 	ldw	r12,16(r19)
  8091e4:	12c00504 	addi	r11,r2,20
  8091e8:	4a51883a 	add	r8,r9,r9
  8091ec:	6319883a 	add	r12,r12,r12
  8091f0:	4211883a 	add	r8,r8,r8
  8091f4:	6319883a 	add	r12,r12,r12
  8091f8:	15000315 	stw	r20,12(r2)
  8091fc:	8211883a 	add	r8,r16,r8
  809200:	8b19883a 	add	r12,r17,r12
  809204:	0007883a 	mov	r3,zero
  809208:	81400017 	ldw	r5,0(r16)
  80920c:	89c00017 	ldw	r7,0(r17)
  809210:	59800104 	addi	r6,r11,4
  809214:	293fffcc 	andi	r4,r5,65535
  809218:	20c7883a 	add	r3,r4,r3
  80921c:	393fffcc 	andi	r4,r7,65535
  809220:	1909c83a 	sub	r4,r3,r4
  809224:	280ad43a 	srli	r5,r5,16
  809228:	380ed43a 	srli	r7,r7,16
  80922c:	2007d43a 	srai	r3,r4,16
  809230:	213fffcc 	andi	r4,r4,65535
  809234:	29cbc83a 	sub	r5,r5,r7
  809238:	28c7883a 	add	r3,r5,r3
  80923c:	180a943a 	slli	r5,r3,16
  809240:	8c400104 	addi	r17,r17,4
  809244:	84000104 	addi	r16,r16,4
  809248:	2908b03a 	or	r4,r5,r4
  80924c:	59000015 	stw	r4,0(r11)
  809250:	1807d43a 	srai	r3,r3,16
  809254:	3015883a 	mov	r10,r6
  809258:	3017883a 	mov	r11,r6
  80925c:	8b3fea36 	bltu	r17,r12,809208 <__alt_mem_onchip_mem+0xff801208>
  809260:	8200162e 	bgeu	r16,r8,8092bc <__mdiff+0x17c>
  809264:	8017883a 	mov	r11,r16
  809268:	59400017 	ldw	r5,0(r11)
  80926c:	31800104 	addi	r6,r6,4
  809270:	5ac00104 	addi	r11,r11,4
  809274:	293fffcc 	andi	r4,r5,65535
  809278:	20c7883a 	add	r3,r4,r3
  80927c:	280ed43a 	srli	r7,r5,16
  809280:	180bd43a 	srai	r5,r3,16
  809284:	193fffcc 	andi	r4,r3,65535
  809288:	3947883a 	add	r3,r7,r5
  80928c:	180a943a 	slli	r5,r3,16
  809290:	1807d43a 	srai	r3,r3,16
  809294:	2908b03a 	or	r4,r5,r4
  809298:	313fff15 	stw	r4,-4(r6)
  80929c:	5a3ff236 	bltu	r11,r8,809268 <__alt_mem_onchip_mem+0xff801268>
  8092a0:	0406303a 	nor	r3,zero,r16
  8092a4:	1a07883a 	add	r3,r3,r8
  8092a8:	1806d0ba 	srli	r3,r3,2
  8092ac:	18c00044 	addi	r3,r3,1
  8092b0:	18c7883a 	add	r3,r3,r3
  8092b4:	18c7883a 	add	r3,r3,r3
  8092b8:	50d5883a 	add	r10,r10,r3
  8092bc:	50ffff04 	addi	r3,r10,-4
  8092c0:	2000041e 	bne	r4,zero,8092d4 <__mdiff+0x194>
  8092c4:	18ffff04 	addi	r3,r3,-4
  8092c8:	19000017 	ldw	r4,0(r3)
  8092cc:	4a7fffc4 	addi	r9,r9,-1
  8092d0:	203ffc26 	beq	r4,zero,8092c4 <__alt_mem_onchip_mem+0xff8012c4>
  8092d4:	12400415 	stw	r9,16(r2)
  8092d8:	dfc00517 	ldw	ra,20(sp)
  8092dc:	dd000417 	ldw	r20,16(sp)
  8092e0:	dcc00317 	ldw	r19,12(sp)
  8092e4:	dc800217 	ldw	r18,8(sp)
  8092e8:	dc400117 	ldw	r17,4(sp)
  8092ec:	dc000017 	ldw	r16,0(sp)
  8092f0:	dec00604 	addi	sp,sp,24
  8092f4:	f800283a 	ret
  8092f8:	000b883a 	mov	r5,zero
  8092fc:	08088180 	call	808818 <_Balloc>
  809300:	00c00044 	movi	r3,1
  809304:	10c00415 	stw	r3,16(r2)
  809308:	10000515 	stw	zero,20(r2)
  80930c:	003ff206 	br	8092d8 <__alt_mem_onchip_mem+0xff8012d8>
  809310:	8023883a 	mov	r17,r16
  809314:	0029883a 	mov	r20,zero
  809318:	4021883a 	mov	r16,r8
  80931c:	003fad06 	br	8091d4 <__alt_mem_onchip_mem+0xff8011d4>
  809320:	9005883a 	mov	r2,r18
  809324:	94400504 	addi	r17,r18,20
  809328:	9c000504 	addi	r16,r19,20
  80932c:	9825883a 	mov	r18,r19
  809330:	05000044 	movi	r20,1
  809334:	1027883a 	mov	r19,r2
  809338:	003fa606 	br	8091d4 <__alt_mem_onchip_mem+0xff8011d4>

0080933c <__ulp>:
  80933c:	295ffc2c 	andhi	r5,r5,32752
  809340:	00bf3034 	movhi	r2,64704
  809344:	2887883a 	add	r3,r5,r2
  809348:	00c0020e 	bge	zero,r3,809354 <__ulp+0x18>
  80934c:	0005883a 	mov	r2,zero
  809350:	f800283a 	ret
  809354:	00c7c83a 	sub	r3,zero,r3
  809358:	1807d53a 	srai	r3,r3,20
  80935c:	008004c4 	movi	r2,19
  809360:	10c00b0e 	bge	r2,r3,809390 <__ulp+0x54>
  809364:	18bffb04 	addi	r2,r3,-20
  809368:	01000784 	movi	r4,30
  80936c:	0007883a 	mov	r3,zero
  809370:	20800516 	blt	r4,r2,809388 <__ulp+0x4c>
  809374:	010007c4 	movi	r4,31
  809378:	2089c83a 	sub	r4,r4,r2
  80937c:	00800044 	movi	r2,1
  809380:	1104983a 	sll	r2,r2,r4
  809384:	f800283a 	ret
  809388:	00800044 	movi	r2,1
  80938c:	f800283a 	ret
  809390:	01400234 	movhi	r5,8
  809394:	28c7d83a 	sra	r3,r5,r3
  809398:	0005883a 	mov	r2,zero
  80939c:	f800283a 	ret

008093a0 <__b2d>:
  8093a0:	defffa04 	addi	sp,sp,-24
  8093a4:	dc000015 	stw	r16,0(sp)
  8093a8:	24000417 	ldw	r16,16(r4)
  8093ac:	dc400115 	stw	r17,4(sp)
  8093b0:	24400504 	addi	r17,r4,20
  8093b4:	8421883a 	add	r16,r16,r16
  8093b8:	8421883a 	add	r16,r16,r16
  8093bc:	8c21883a 	add	r16,r17,r16
  8093c0:	dc800215 	stw	r18,8(sp)
  8093c4:	84bfff17 	ldw	r18,-4(r16)
  8093c8:	dd000415 	stw	r20,16(sp)
  8093cc:	dcc00315 	stw	r19,12(sp)
  8093d0:	9009883a 	mov	r4,r18
  8093d4:	2829883a 	mov	r20,r5
  8093d8:	dfc00515 	stw	ra,20(sp)
  8093dc:	0808b0c0 	call	808b0c <__hi0bits>
  8093e0:	00c00804 	movi	r3,32
  8093e4:	1889c83a 	sub	r4,r3,r2
  8093e8:	a1000015 	stw	r4,0(r20)
  8093ec:	01000284 	movi	r4,10
  8093f0:	84ffff04 	addi	r19,r16,-4
  8093f4:	20801216 	blt	r4,r2,809440 <__b2d+0xa0>
  8093f8:	018002c4 	movi	r6,11
  8093fc:	308dc83a 	sub	r6,r6,r2
  809400:	9186d83a 	srl	r3,r18,r6
  809404:	18cffc34 	orhi	r3,r3,16368
  809408:	8cc0212e 	bgeu	r17,r19,809490 <__b2d+0xf0>
  80940c:	813ffe17 	ldw	r4,-8(r16)
  809410:	218cd83a 	srl	r6,r4,r6
  809414:	10800544 	addi	r2,r2,21
  809418:	9084983a 	sll	r2,r18,r2
  80941c:	1184b03a 	or	r2,r2,r6
  809420:	dfc00517 	ldw	ra,20(sp)
  809424:	dd000417 	ldw	r20,16(sp)
  809428:	dcc00317 	ldw	r19,12(sp)
  80942c:	dc800217 	ldw	r18,8(sp)
  809430:	dc400117 	ldw	r17,4(sp)
  809434:	dc000017 	ldw	r16,0(sp)
  809438:	dec00604 	addi	sp,sp,24
  80943c:	f800283a 	ret
  809440:	8cc00f2e 	bgeu	r17,r19,809480 <__b2d+0xe0>
  809444:	117ffd44 	addi	r5,r2,-11
  809448:	80bffe17 	ldw	r2,-8(r16)
  80944c:	28000e26 	beq	r5,zero,809488 <__b2d+0xe8>
  809450:	1949c83a 	sub	r4,r3,r5
  809454:	9164983a 	sll	r18,r18,r5
  809458:	1106d83a 	srl	r3,r2,r4
  80945c:	81bffe04 	addi	r6,r16,-8
  809460:	948ffc34 	orhi	r18,r18,16368
  809464:	90c6b03a 	or	r3,r18,r3
  809468:	89800e2e 	bgeu	r17,r6,8094a4 <__b2d+0x104>
  80946c:	81bffd17 	ldw	r6,-12(r16)
  809470:	1144983a 	sll	r2,r2,r5
  809474:	310ad83a 	srl	r5,r6,r4
  809478:	2884b03a 	or	r2,r5,r2
  80947c:	003fe806 	br	809420 <__alt_mem_onchip_mem+0xff801420>
  809480:	10bffd44 	addi	r2,r2,-11
  809484:	1000041e 	bne	r2,zero,809498 <__b2d+0xf8>
  809488:	90cffc34 	orhi	r3,r18,16368
  80948c:	003fe406 	br	809420 <__alt_mem_onchip_mem+0xff801420>
  809490:	000d883a 	mov	r6,zero
  809494:	003fdf06 	br	809414 <__alt_mem_onchip_mem+0xff801414>
  809498:	90a4983a 	sll	r18,r18,r2
  80949c:	0005883a 	mov	r2,zero
  8094a0:	003ff906 	br	809488 <__alt_mem_onchip_mem+0xff801488>
  8094a4:	1144983a 	sll	r2,r2,r5
  8094a8:	003fdd06 	br	809420 <__alt_mem_onchip_mem+0xff801420>

008094ac <__d2b>:
  8094ac:	defff804 	addi	sp,sp,-32
  8094b0:	dc000215 	stw	r16,8(sp)
  8094b4:	3021883a 	mov	r16,r6
  8094b8:	dc400315 	stw	r17,12(sp)
  8094bc:	8022907a 	slli	r17,r16,1
  8094c0:	dd000615 	stw	r20,24(sp)
  8094c4:	2829883a 	mov	r20,r5
  8094c8:	01400044 	movi	r5,1
  8094cc:	dcc00515 	stw	r19,20(sp)
  8094d0:	dc800415 	stw	r18,16(sp)
  8094d4:	dfc00715 	stw	ra,28(sp)
  8094d8:	3825883a 	mov	r18,r7
  8094dc:	8822d57a 	srli	r17,r17,21
  8094e0:	08088180 	call	808818 <_Balloc>
  8094e4:	1027883a 	mov	r19,r2
  8094e8:	00800434 	movhi	r2,16
  8094ec:	10bfffc4 	addi	r2,r2,-1
  8094f0:	808c703a 	and	r6,r16,r2
  8094f4:	88000126 	beq	r17,zero,8094fc <__d2b+0x50>
  8094f8:	31800434 	orhi	r6,r6,16
  8094fc:	d9800015 	stw	r6,0(sp)
  809500:	a0002426 	beq	r20,zero,809594 <__d2b+0xe8>
  809504:	d9000104 	addi	r4,sp,4
  809508:	dd000115 	stw	r20,4(sp)
  80950c:	0808b740 	call	808b74 <__lo0bits>
  809510:	d8c00017 	ldw	r3,0(sp)
  809514:	10002f1e 	bne	r2,zero,8095d4 <__d2b+0x128>
  809518:	d9000117 	ldw	r4,4(sp)
  80951c:	99000515 	stw	r4,20(r19)
  809520:	1821003a 	cmpeq	r16,r3,zero
  809524:	01000084 	movi	r4,2
  809528:	2421c83a 	sub	r16,r4,r16
  80952c:	98c00615 	stw	r3,24(r19)
  809530:	9c000415 	stw	r16,16(r19)
  809534:	88001f1e 	bne	r17,zero,8095b4 <__d2b+0x108>
  809538:	10bef384 	addi	r2,r2,-1074
  80953c:	90800015 	stw	r2,0(r18)
  809540:	00900034 	movhi	r2,16384
  809544:	10bfffc4 	addi	r2,r2,-1
  809548:	8085883a 	add	r2,r16,r2
  80954c:	1085883a 	add	r2,r2,r2
  809550:	1085883a 	add	r2,r2,r2
  809554:	9885883a 	add	r2,r19,r2
  809558:	11000517 	ldw	r4,20(r2)
  80955c:	8020917a 	slli	r16,r16,5
  809560:	0808b0c0 	call	808b0c <__hi0bits>
  809564:	d8c00817 	ldw	r3,32(sp)
  809568:	8085c83a 	sub	r2,r16,r2
  80956c:	18800015 	stw	r2,0(r3)
  809570:	9805883a 	mov	r2,r19
  809574:	dfc00717 	ldw	ra,28(sp)
  809578:	dd000617 	ldw	r20,24(sp)
  80957c:	dcc00517 	ldw	r19,20(sp)
  809580:	dc800417 	ldw	r18,16(sp)
  809584:	dc400317 	ldw	r17,12(sp)
  809588:	dc000217 	ldw	r16,8(sp)
  80958c:	dec00804 	addi	sp,sp,32
  809590:	f800283a 	ret
  809594:	d809883a 	mov	r4,sp
  809598:	0808b740 	call	808b74 <__lo0bits>
  80959c:	d8c00017 	ldw	r3,0(sp)
  8095a0:	04000044 	movi	r16,1
  8095a4:	9c000415 	stw	r16,16(r19)
  8095a8:	98c00515 	stw	r3,20(r19)
  8095ac:	10800804 	addi	r2,r2,32
  8095b0:	883fe126 	beq	r17,zero,809538 <__alt_mem_onchip_mem+0xff801538>
  8095b4:	00c00d44 	movi	r3,53
  8095b8:	8c7ef344 	addi	r17,r17,-1075
  8095bc:	88a3883a 	add	r17,r17,r2
  8095c0:	1885c83a 	sub	r2,r3,r2
  8095c4:	d8c00817 	ldw	r3,32(sp)
  8095c8:	94400015 	stw	r17,0(r18)
  8095cc:	18800015 	stw	r2,0(r3)
  8095d0:	003fe706 	br	809570 <__alt_mem_onchip_mem+0xff801570>
  8095d4:	01000804 	movi	r4,32
  8095d8:	2089c83a 	sub	r4,r4,r2
  8095dc:	1908983a 	sll	r4,r3,r4
  8095e0:	d9400117 	ldw	r5,4(sp)
  8095e4:	1886d83a 	srl	r3,r3,r2
  8095e8:	2148b03a 	or	r4,r4,r5
  8095ec:	99000515 	stw	r4,20(r19)
  8095f0:	d8c00015 	stw	r3,0(sp)
  8095f4:	003fca06 	br	809520 <__alt_mem_onchip_mem+0xff801520>

008095f8 <__ratio>:
  8095f8:	defff904 	addi	sp,sp,-28
  8095fc:	dc400315 	stw	r17,12(sp)
  809600:	2823883a 	mov	r17,r5
  809604:	d9400104 	addi	r5,sp,4
  809608:	dfc00615 	stw	ra,24(sp)
  80960c:	dcc00515 	stw	r19,20(sp)
  809610:	dc800415 	stw	r18,16(sp)
  809614:	2027883a 	mov	r19,r4
  809618:	dc000215 	stw	r16,8(sp)
  80961c:	08093a00 	call	8093a0 <__b2d>
  809620:	d80b883a 	mov	r5,sp
  809624:	8809883a 	mov	r4,r17
  809628:	1025883a 	mov	r18,r2
  80962c:	1821883a 	mov	r16,r3
  809630:	08093a00 	call	8093a0 <__b2d>
  809634:	8a000417 	ldw	r8,16(r17)
  809638:	99000417 	ldw	r4,16(r19)
  80963c:	d9400117 	ldw	r5,4(sp)
  809640:	2209c83a 	sub	r4,r4,r8
  809644:	2010917a 	slli	r8,r4,5
  809648:	d9000017 	ldw	r4,0(sp)
  80964c:	2909c83a 	sub	r4,r5,r4
  809650:	4109883a 	add	r4,r8,r4
  809654:	01000e0e 	bge	zero,r4,809690 <__ratio+0x98>
  809658:	2008953a 	slli	r4,r4,20
  80965c:	2421883a 	add	r16,r4,r16
  809660:	100d883a 	mov	r6,r2
  809664:	180f883a 	mov	r7,r3
  809668:	9009883a 	mov	r4,r18
  80966c:	800b883a 	mov	r5,r16
  809670:	080ce180 	call	80ce18 <__divdf3>
  809674:	dfc00617 	ldw	ra,24(sp)
  809678:	dcc00517 	ldw	r19,20(sp)
  80967c:	dc800417 	ldw	r18,16(sp)
  809680:	dc400317 	ldw	r17,12(sp)
  809684:	dc000217 	ldw	r16,8(sp)
  809688:	dec00704 	addi	sp,sp,28
  80968c:	f800283a 	ret
  809690:	2008953a 	slli	r4,r4,20
  809694:	1907c83a 	sub	r3,r3,r4
  809698:	003ff106 	br	809660 <__alt_mem_onchip_mem+0xff801660>

0080969c <_mprec_log10>:
  80969c:	defffe04 	addi	sp,sp,-8
  8096a0:	dc000015 	stw	r16,0(sp)
  8096a4:	dfc00115 	stw	ra,4(sp)
  8096a8:	008005c4 	movi	r2,23
  8096ac:	2021883a 	mov	r16,r4
  8096b0:	11000d0e 	bge	r2,r4,8096e8 <_mprec_log10+0x4c>
  8096b4:	0005883a 	mov	r2,zero
  8096b8:	00cffc34 	movhi	r3,16368
  8096bc:	843fffc4 	addi	r16,r16,-1
  8096c0:	000d883a 	mov	r6,zero
  8096c4:	01d00934 	movhi	r7,16420
  8096c8:	1009883a 	mov	r4,r2
  8096cc:	180b883a 	mov	r5,r3
  8096d0:	080d9580 	call	80d958 <__muldf3>
  8096d4:	803ff91e 	bne	r16,zero,8096bc <__alt_mem_onchip_mem+0xff8016bc>
  8096d8:	dfc00117 	ldw	ra,4(sp)
  8096dc:	dc000017 	ldw	r16,0(sp)
  8096e0:	dec00204 	addi	sp,sp,8
  8096e4:	f800283a 	ret
  8096e8:	202090fa 	slli	r16,r4,3
  8096ec:	00802074 	movhi	r2,129
  8096f0:	108cc504 	addi	r2,r2,13076
  8096f4:	1421883a 	add	r16,r2,r16
  8096f8:	80800017 	ldw	r2,0(r16)
  8096fc:	80c00117 	ldw	r3,4(r16)
  809700:	dfc00117 	ldw	ra,4(sp)
  809704:	dc000017 	ldw	r16,0(sp)
  809708:	dec00204 	addi	sp,sp,8
  80970c:	f800283a 	ret

00809710 <__copybits>:
  809710:	297fffc4 	addi	r5,r5,-1
  809714:	280fd17a 	srai	r7,r5,5
  809718:	30c00417 	ldw	r3,16(r6)
  80971c:	30800504 	addi	r2,r6,20
  809720:	39c00044 	addi	r7,r7,1
  809724:	18c7883a 	add	r3,r3,r3
  809728:	39cf883a 	add	r7,r7,r7
  80972c:	18c7883a 	add	r3,r3,r3
  809730:	39cf883a 	add	r7,r7,r7
  809734:	10c7883a 	add	r3,r2,r3
  809738:	21cf883a 	add	r7,r4,r7
  80973c:	10c00d2e 	bgeu	r2,r3,809774 <__copybits+0x64>
  809740:	200b883a 	mov	r5,r4
  809744:	12000017 	ldw	r8,0(r2)
  809748:	29400104 	addi	r5,r5,4
  80974c:	10800104 	addi	r2,r2,4
  809750:	2a3fff15 	stw	r8,-4(r5)
  809754:	10fffb36 	bltu	r2,r3,809744 <__alt_mem_onchip_mem+0xff801744>
  809758:	1985c83a 	sub	r2,r3,r6
  80975c:	10bffac4 	addi	r2,r2,-21
  809760:	1004d0ba 	srli	r2,r2,2
  809764:	10800044 	addi	r2,r2,1
  809768:	1085883a 	add	r2,r2,r2
  80976c:	1085883a 	add	r2,r2,r2
  809770:	2089883a 	add	r4,r4,r2
  809774:	21c0032e 	bgeu	r4,r7,809784 <__copybits+0x74>
  809778:	20000015 	stw	zero,0(r4)
  80977c:	21000104 	addi	r4,r4,4
  809780:	21fffd36 	bltu	r4,r7,809778 <__alt_mem_onchip_mem+0xff801778>
  809784:	f800283a 	ret

00809788 <__any_on>:
  809788:	20c00417 	ldw	r3,16(r4)
  80978c:	2805d17a 	srai	r2,r5,5
  809790:	21000504 	addi	r4,r4,20
  809794:	18800d0e 	bge	r3,r2,8097cc <__any_on+0x44>
  809798:	18c7883a 	add	r3,r3,r3
  80979c:	18c7883a 	add	r3,r3,r3
  8097a0:	20c7883a 	add	r3,r4,r3
  8097a4:	20c0192e 	bgeu	r4,r3,80980c <__any_on+0x84>
  8097a8:	18bfff17 	ldw	r2,-4(r3)
  8097ac:	18ffff04 	addi	r3,r3,-4
  8097b0:	1000041e 	bne	r2,zero,8097c4 <__any_on+0x3c>
  8097b4:	20c0142e 	bgeu	r4,r3,809808 <__any_on+0x80>
  8097b8:	18ffff04 	addi	r3,r3,-4
  8097bc:	19400017 	ldw	r5,0(r3)
  8097c0:	283ffc26 	beq	r5,zero,8097b4 <__alt_mem_onchip_mem+0xff8017b4>
  8097c4:	00800044 	movi	r2,1
  8097c8:	f800283a 	ret
  8097cc:	10c00a0e 	bge	r2,r3,8097f8 <__any_on+0x70>
  8097d0:	1085883a 	add	r2,r2,r2
  8097d4:	1085883a 	add	r2,r2,r2
  8097d8:	294007cc 	andi	r5,r5,31
  8097dc:	2087883a 	add	r3,r4,r2
  8097e0:	283ff026 	beq	r5,zero,8097a4 <__alt_mem_onchip_mem+0xff8017a4>
  8097e4:	19800017 	ldw	r6,0(r3)
  8097e8:	3144d83a 	srl	r2,r6,r5
  8097ec:	114a983a 	sll	r5,r2,r5
  8097f0:	317ff41e 	bne	r6,r5,8097c4 <__alt_mem_onchip_mem+0xff8017c4>
  8097f4:	003feb06 	br	8097a4 <__alt_mem_onchip_mem+0xff8017a4>
  8097f8:	1085883a 	add	r2,r2,r2
  8097fc:	1085883a 	add	r2,r2,r2
  809800:	2087883a 	add	r3,r4,r2
  809804:	003fe706 	br	8097a4 <__alt_mem_onchip_mem+0xff8017a4>
  809808:	f800283a 	ret
  80980c:	0005883a 	mov	r2,zero
  809810:	f800283a 	ret

00809814 <_read_r>:
  809814:	defffd04 	addi	sp,sp,-12
  809818:	2805883a 	mov	r2,r5
  80981c:	dc000015 	stw	r16,0(sp)
  809820:	04002074 	movhi	r16,129
  809824:	dc400115 	stw	r17,4(sp)
  809828:	300b883a 	mov	r5,r6
  80982c:	841bdb04 	addi	r16,r16,28524
  809830:	2023883a 	mov	r17,r4
  809834:	380d883a 	mov	r6,r7
  809838:	1009883a 	mov	r4,r2
  80983c:	dfc00215 	stw	ra,8(sp)
  809840:	80000015 	stw	zero,0(r16)
  809844:	080f6d40 	call	80f6d4 <read>
  809848:	00ffffc4 	movi	r3,-1
  80984c:	10c00526 	beq	r2,r3,809864 <_read_r+0x50>
  809850:	dfc00217 	ldw	ra,8(sp)
  809854:	dc400117 	ldw	r17,4(sp)
  809858:	dc000017 	ldw	r16,0(sp)
  80985c:	dec00304 	addi	sp,sp,12
  809860:	f800283a 	ret
  809864:	80c00017 	ldw	r3,0(r16)
  809868:	183ff926 	beq	r3,zero,809850 <__alt_mem_onchip_mem+0xff801850>
  80986c:	88c00015 	stw	r3,0(r17)
  809870:	003ff706 	br	809850 <__alt_mem_onchip_mem+0xff801850>

00809874 <_realloc_r>:
  809874:	defff604 	addi	sp,sp,-40
  809878:	dc800215 	stw	r18,8(sp)
  80987c:	dfc00915 	stw	ra,36(sp)
  809880:	df000815 	stw	fp,32(sp)
  809884:	ddc00715 	stw	r23,28(sp)
  809888:	dd800615 	stw	r22,24(sp)
  80988c:	dd400515 	stw	r21,20(sp)
  809890:	dd000415 	stw	r20,16(sp)
  809894:	dcc00315 	stw	r19,12(sp)
  809898:	dc400115 	stw	r17,4(sp)
  80989c:	dc000015 	stw	r16,0(sp)
  8098a0:	3025883a 	mov	r18,r6
  8098a4:	2800b726 	beq	r5,zero,809b84 <_realloc_r+0x310>
  8098a8:	282b883a 	mov	r21,r5
  8098ac:	2029883a 	mov	r20,r4
  8098b0:	080f3fc0 	call	80f3fc <__malloc_lock>
  8098b4:	a8bfff17 	ldw	r2,-4(r21)
  8098b8:	043fff04 	movi	r16,-4
  8098bc:	90c002c4 	addi	r3,r18,11
  8098c0:	01000584 	movi	r4,22
  8098c4:	acfffe04 	addi	r19,r21,-8
  8098c8:	1420703a 	and	r16,r2,r16
  8098cc:	20c0332e 	bgeu	r4,r3,80999c <_realloc_r+0x128>
  8098d0:	047ffe04 	movi	r17,-8
  8098d4:	1c62703a 	and	r17,r3,r17
  8098d8:	8807883a 	mov	r3,r17
  8098dc:	88005816 	blt	r17,zero,809a40 <_realloc_r+0x1cc>
  8098e0:	8c805736 	bltu	r17,r18,809a40 <_realloc_r+0x1cc>
  8098e4:	80c0300e 	bge	r16,r3,8099a8 <_realloc_r+0x134>
  8098e8:	07002074 	movhi	fp,129
  8098ec:	e70e5f04 	addi	fp,fp,14716
  8098f0:	e1c00217 	ldw	r7,8(fp)
  8098f4:	9c09883a 	add	r4,r19,r16
  8098f8:	22000117 	ldw	r8,4(r4)
  8098fc:	21c06326 	beq	r4,r7,809a8c <_realloc_r+0x218>
  809900:	017fff84 	movi	r5,-2
  809904:	414a703a 	and	r5,r8,r5
  809908:	214b883a 	add	r5,r4,r5
  80990c:	29800117 	ldw	r6,4(r5)
  809910:	3180004c 	andi	r6,r6,1
  809914:	30003f26 	beq	r6,zero,809a14 <_realloc_r+0x1a0>
  809918:	1080004c 	andi	r2,r2,1
  80991c:	10008326 	beq	r2,zero,809b2c <_realloc_r+0x2b8>
  809920:	900b883a 	mov	r5,r18
  809924:	a009883a 	mov	r4,r20
  809928:	080253c0 	call	80253c <_malloc_r>
  80992c:	1025883a 	mov	r18,r2
  809930:	10011e26 	beq	r2,zero,809dac <_realloc_r+0x538>
  809934:	a93fff17 	ldw	r4,-4(r21)
  809938:	10fffe04 	addi	r3,r2,-8
  80993c:	00bfff84 	movi	r2,-2
  809940:	2084703a 	and	r2,r4,r2
  809944:	9885883a 	add	r2,r19,r2
  809948:	1880ee26 	beq	r3,r2,809d04 <_realloc_r+0x490>
  80994c:	81bfff04 	addi	r6,r16,-4
  809950:	00800904 	movi	r2,36
  809954:	1180b836 	bltu	r2,r6,809c38 <_realloc_r+0x3c4>
  809958:	00c004c4 	movi	r3,19
  80995c:	19809636 	bltu	r3,r6,809bb8 <_realloc_r+0x344>
  809960:	9005883a 	mov	r2,r18
  809964:	a807883a 	mov	r3,r21
  809968:	19000017 	ldw	r4,0(r3)
  80996c:	11000015 	stw	r4,0(r2)
  809970:	19000117 	ldw	r4,4(r3)
  809974:	11000115 	stw	r4,4(r2)
  809978:	18c00217 	ldw	r3,8(r3)
  80997c:	10c00215 	stw	r3,8(r2)
  809980:	a80b883a 	mov	r5,r21
  809984:	a009883a 	mov	r4,r20
  809988:	0807b340 	call	807b34 <_free_r>
  80998c:	a009883a 	mov	r4,r20
  809990:	080f4200 	call	80f420 <__malloc_unlock>
  809994:	9005883a 	mov	r2,r18
  809998:	00001206 	br	8099e4 <_realloc_r+0x170>
  80999c:	00c00404 	movi	r3,16
  8099a0:	1823883a 	mov	r17,r3
  8099a4:	003fce06 	br	8098e0 <__alt_mem_onchip_mem+0xff8018e0>
  8099a8:	a825883a 	mov	r18,r21
  8099ac:	8445c83a 	sub	r2,r16,r17
  8099b0:	00c003c4 	movi	r3,15
  8099b4:	18802636 	bltu	r3,r2,809a50 <_realloc_r+0x1dc>
  8099b8:	99800117 	ldw	r6,4(r19)
  8099bc:	9c07883a 	add	r3,r19,r16
  8099c0:	3180004c 	andi	r6,r6,1
  8099c4:	3420b03a 	or	r16,r6,r16
  8099c8:	9c000115 	stw	r16,4(r19)
  8099cc:	18800117 	ldw	r2,4(r3)
  8099d0:	10800054 	ori	r2,r2,1
  8099d4:	18800115 	stw	r2,4(r3)
  8099d8:	a009883a 	mov	r4,r20
  8099dc:	080f4200 	call	80f420 <__malloc_unlock>
  8099e0:	9005883a 	mov	r2,r18
  8099e4:	dfc00917 	ldw	ra,36(sp)
  8099e8:	df000817 	ldw	fp,32(sp)
  8099ec:	ddc00717 	ldw	r23,28(sp)
  8099f0:	dd800617 	ldw	r22,24(sp)
  8099f4:	dd400517 	ldw	r21,20(sp)
  8099f8:	dd000417 	ldw	r20,16(sp)
  8099fc:	dcc00317 	ldw	r19,12(sp)
  809a00:	dc800217 	ldw	r18,8(sp)
  809a04:	dc400117 	ldw	r17,4(sp)
  809a08:	dc000017 	ldw	r16,0(sp)
  809a0c:	dec00a04 	addi	sp,sp,40
  809a10:	f800283a 	ret
  809a14:	017fff04 	movi	r5,-4
  809a18:	414a703a 	and	r5,r8,r5
  809a1c:	814d883a 	add	r6,r16,r5
  809a20:	30c01f16 	blt	r6,r3,809aa0 <_realloc_r+0x22c>
  809a24:	20800317 	ldw	r2,12(r4)
  809a28:	20c00217 	ldw	r3,8(r4)
  809a2c:	a825883a 	mov	r18,r21
  809a30:	3021883a 	mov	r16,r6
  809a34:	18800315 	stw	r2,12(r3)
  809a38:	10c00215 	stw	r3,8(r2)
  809a3c:	003fdb06 	br	8099ac <__alt_mem_onchip_mem+0xff8019ac>
  809a40:	00800304 	movi	r2,12
  809a44:	a0800015 	stw	r2,0(r20)
  809a48:	0005883a 	mov	r2,zero
  809a4c:	003fe506 	br	8099e4 <__alt_mem_onchip_mem+0xff8019e4>
  809a50:	98c00117 	ldw	r3,4(r19)
  809a54:	9c4b883a 	add	r5,r19,r17
  809a58:	11000054 	ori	r4,r2,1
  809a5c:	18c0004c 	andi	r3,r3,1
  809a60:	1c62b03a 	or	r17,r3,r17
  809a64:	9c400115 	stw	r17,4(r19)
  809a68:	29000115 	stw	r4,4(r5)
  809a6c:	2885883a 	add	r2,r5,r2
  809a70:	10c00117 	ldw	r3,4(r2)
  809a74:	29400204 	addi	r5,r5,8
  809a78:	a009883a 	mov	r4,r20
  809a7c:	18c00054 	ori	r3,r3,1
  809a80:	10c00115 	stw	r3,4(r2)
  809a84:	0807b340 	call	807b34 <_free_r>
  809a88:	003fd306 	br	8099d8 <__alt_mem_onchip_mem+0xff8019d8>
  809a8c:	017fff04 	movi	r5,-4
  809a90:	414a703a 	and	r5,r8,r5
  809a94:	89800404 	addi	r6,r17,16
  809a98:	8151883a 	add	r8,r16,r5
  809a9c:	4180590e 	bge	r8,r6,809c04 <_realloc_r+0x390>
  809aa0:	1080004c 	andi	r2,r2,1
  809aa4:	103f9e1e 	bne	r2,zero,809920 <__alt_mem_onchip_mem+0xff801920>
  809aa8:	adbffe17 	ldw	r22,-8(r21)
  809aac:	00bfff04 	movi	r2,-4
  809ab0:	9dadc83a 	sub	r22,r19,r22
  809ab4:	b1800117 	ldw	r6,4(r22)
  809ab8:	3084703a 	and	r2,r6,r2
  809abc:	20002026 	beq	r4,zero,809b40 <_realloc_r+0x2cc>
  809ac0:	80af883a 	add	r23,r16,r2
  809ac4:	b96f883a 	add	r23,r23,r5
  809ac8:	21c05f26 	beq	r4,r7,809c48 <_realloc_r+0x3d4>
  809acc:	b8c01c16 	blt	r23,r3,809b40 <_realloc_r+0x2cc>
  809ad0:	20800317 	ldw	r2,12(r4)
  809ad4:	20c00217 	ldw	r3,8(r4)
  809ad8:	81bfff04 	addi	r6,r16,-4
  809adc:	01000904 	movi	r4,36
  809ae0:	18800315 	stw	r2,12(r3)
  809ae4:	10c00215 	stw	r3,8(r2)
  809ae8:	b0c00217 	ldw	r3,8(r22)
  809aec:	b0800317 	ldw	r2,12(r22)
  809af0:	b4800204 	addi	r18,r22,8
  809af4:	18800315 	stw	r2,12(r3)
  809af8:	10c00215 	stw	r3,8(r2)
  809afc:	21801b36 	bltu	r4,r6,809b6c <_realloc_r+0x2f8>
  809b00:	008004c4 	movi	r2,19
  809b04:	1180352e 	bgeu	r2,r6,809bdc <_realloc_r+0x368>
  809b08:	a8800017 	ldw	r2,0(r21)
  809b0c:	b0800215 	stw	r2,8(r22)
  809b10:	a8800117 	ldw	r2,4(r21)
  809b14:	b0800315 	stw	r2,12(r22)
  809b18:	008006c4 	movi	r2,27
  809b1c:	11807f36 	bltu	r2,r6,809d1c <_realloc_r+0x4a8>
  809b20:	b0800404 	addi	r2,r22,16
  809b24:	ad400204 	addi	r21,r21,8
  809b28:	00002d06 	br	809be0 <_realloc_r+0x36c>
  809b2c:	adbffe17 	ldw	r22,-8(r21)
  809b30:	00bfff04 	movi	r2,-4
  809b34:	9dadc83a 	sub	r22,r19,r22
  809b38:	b1000117 	ldw	r4,4(r22)
  809b3c:	2084703a 	and	r2,r4,r2
  809b40:	b03f7726 	beq	r22,zero,809920 <__alt_mem_onchip_mem+0xff801920>
  809b44:	80af883a 	add	r23,r16,r2
  809b48:	b8ff7516 	blt	r23,r3,809920 <__alt_mem_onchip_mem+0xff801920>
  809b4c:	b0800317 	ldw	r2,12(r22)
  809b50:	b0c00217 	ldw	r3,8(r22)
  809b54:	81bfff04 	addi	r6,r16,-4
  809b58:	01000904 	movi	r4,36
  809b5c:	18800315 	stw	r2,12(r3)
  809b60:	10c00215 	stw	r3,8(r2)
  809b64:	b4800204 	addi	r18,r22,8
  809b68:	21bfe52e 	bgeu	r4,r6,809b00 <__alt_mem_onchip_mem+0xff801b00>
  809b6c:	a80b883a 	mov	r5,r21
  809b70:	9009883a 	mov	r4,r18
  809b74:	08086bc0 	call	8086bc <memmove>
  809b78:	b821883a 	mov	r16,r23
  809b7c:	b027883a 	mov	r19,r22
  809b80:	003f8a06 	br	8099ac <__alt_mem_onchip_mem+0xff8019ac>
  809b84:	300b883a 	mov	r5,r6
  809b88:	dfc00917 	ldw	ra,36(sp)
  809b8c:	df000817 	ldw	fp,32(sp)
  809b90:	ddc00717 	ldw	r23,28(sp)
  809b94:	dd800617 	ldw	r22,24(sp)
  809b98:	dd400517 	ldw	r21,20(sp)
  809b9c:	dd000417 	ldw	r20,16(sp)
  809ba0:	dcc00317 	ldw	r19,12(sp)
  809ba4:	dc800217 	ldw	r18,8(sp)
  809ba8:	dc400117 	ldw	r17,4(sp)
  809bac:	dc000017 	ldw	r16,0(sp)
  809bb0:	dec00a04 	addi	sp,sp,40
  809bb4:	080253c1 	jmpi	80253c <_malloc_r>
  809bb8:	a8c00017 	ldw	r3,0(r21)
  809bbc:	90c00015 	stw	r3,0(r18)
  809bc0:	a8c00117 	ldw	r3,4(r21)
  809bc4:	90c00115 	stw	r3,4(r18)
  809bc8:	00c006c4 	movi	r3,27
  809bcc:	19804536 	bltu	r3,r6,809ce4 <_realloc_r+0x470>
  809bd0:	90800204 	addi	r2,r18,8
  809bd4:	a8c00204 	addi	r3,r21,8
  809bd8:	003f6306 	br	809968 <__alt_mem_onchip_mem+0xff801968>
  809bdc:	9005883a 	mov	r2,r18
  809be0:	a8c00017 	ldw	r3,0(r21)
  809be4:	b821883a 	mov	r16,r23
  809be8:	b027883a 	mov	r19,r22
  809bec:	10c00015 	stw	r3,0(r2)
  809bf0:	a8c00117 	ldw	r3,4(r21)
  809bf4:	10c00115 	stw	r3,4(r2)
  809bf8:	a8c00217 	ldw	r3,8(r21)
  809bfc:	10c00215 	stw	r3,8(r2)
  809c00:	003f6a06 	br	8099ac <__alt_mem_onchip_mem+0xff8019ac>
  809c04:	9c67883a 	add	r19,r19,r17
  809c08:	4445c83a 	sub	r2,r8,r17
  809c0c:	e4c00215 	stw	r19,8(fp)
  809c10:	10800054 	ori	r2,r2,1
  809c14:	98800115 	stw	r2,4(r19)
  809c18:	a8bfff17 	ldw	r2,-4(r21)
  809c1c:	a009883a 	mov	r4,r20
  809c20:	1080004c 	andi	r2,r2,1
  809c24:	1462b03a 	or	r17,r2,r17
  809c28:	ac7fff15 	stw	r17,-4(r21)
  809c2c:	080f4200 	call	80f420 <__malloc_unlock>
  809c30:	a805883a 	mov	r2,r21
  809c34:	003f6b06 	br	8099e4 <__alt_mem_onchip_mem+0xff8019e4>
  809c38:	a80b883a 	mov	r5,r21
  809c3c:	9009883a 	mov	r4,r18
  809c40:	08086bc0 	call	8086bc <memmove>
  809c44:	003f4e06 	br	809980 <__alt_mem_onchip_mem+0xff801980>
  809c48:	89000404 	addi	r4,r17,16
  809c4c:	b93fbc16 	blt	r23,r4,809b40 <__alt_mem_onchip_mem+0xff801b40>
  809c50:	b0800317 	ldw	r2,12(r22)
  809c54:	b0c00217 	ldw	r3,8(r22)
  809c58:	81bfff04 	addi	r6,r16,-4
  809c5c:	01000904 	movi	r4,36
  809c60:	18800315 	stw	r2,12(r3)
  809c64:	10c00215 	stw	r3,8(r2)
  809c68:	b4800204 	addi	r18,r22,8
  809c6c:	21804336 	bltu	r4,r6,809d7c <_realloc_r+0x508>
  809c70:	008004c4 	movi	r2,19
  809c74:	11803f2e 	bgeu	r2,r6,809d74 <_realloc_r+0x500>
  809c78:	a8800017 	ldw	r2,0(r21)
  809c7c:	b0800215 	stw	r2,8(r22)
  809c80:	a8800117 	ldw	r2,4(r21)
  809c84:	b0800315 	stw	r2,12(r22)
  809c88:	008006c4 	movi	r2,27
  809c8c:	11803f36 	bltu	r2,r6,809d8c <_realloc_r+0x518>
  809c90:	b0800404 	addi	r2,r22,16
  809c94:	ad400204 	addi	r21,r21,8
  809c98:	a8c00017 	ldw	r3,0(r21)
  809c9c:	10c00015 	stw	r3,0(r2)
  809ca0:	a8c00117 	ldw	r3,4(r21)
  809ca4:	10c00115 	stw	r3,4(r2)
  809ca8:	a8c00217 	ldw	r3,8(r21)
  809cac:	10c00215 	stw	r3,8(r2)
  809cb0:	b447883a 	add	r3,r22,r17
  809cb4:	bc45c83a 	sub	r2,r23,r17
  809cb8:	e0c00215 	stw	r3,8(fp)
  809cbc:	10800054 	ori	r2,r2,1
  809cc0:	18800115 	stw	r2,4(r3)
  809cc4:	b0800117 	ldw	r2,4(r22)
  809cc8:	a009883a 	mov	r4,r20
  809ccc:	1080004c 	andi	r2,r2,1
  809cd0:	1462b03a 	or	r17,r2,r17
  809cd4:	b4400115 	stw	r17,4(r22)
  809cd8:	080f4200 	call	80f420 <__malloc_unlock>
  809cdc:	9005883a 	mov	r2,r18
  809ce0:	003f4006 	br	8099e4 <__alt_mem_onchip_mem+0xff8019e4>
  809ce4:	a8c00217 	ldw	r3,8(r21)
  809ce8:	90c00215 	stw	r3,8(r18)
  809cec:	a8c00317 	ldw	r3,12(r21)
  809cf0:	90c00315 	stw	r3,12(r18)
  809cf4:	30801126 	beq	r6,r2,809d3c <_realloc_r+0x4c8>
  809cf8:	90800404 	addi	r2,r18,16
  809cfc:	a8c00404 	addi	r3,r21,16
  809d00:	003f1906 	br	809968 <__alt_mem_onchip_mem+0xff801968>
  809d04:	90ffff17 	ldw	r3,-4(r18)
  809d08:	00bfff04 	movi	r2,-4
  809d0c:	a825883a 	mov	r18,r21
  809d10:	1884703a 	and	r2,r3,r2
  809d14:	80a1883a 	add	r16,r16,r2
  809d18:	003f2406 	br	8099ac <__alt_mem_onchip_mem+0xff8019ac>
  809d1c:	a8800217 	ldw	r2,8(r21)
  809d20:	b0800415 	stw	r2,16(r22)
  809d24:	a8800317 	ldw	r2,12(r21)
  809d28:	b0800515 	stw	r2,20(r22)
  809d2c:	31000a26 	beq	r6,r4,809d58 <_realloc_r+0x4e4>
  809d30:	b0800604 	addi	r2,r22,24
  809d34:	ad400404 	addi	r21,r21,16
  809d38:	003fa906 	br	809be0 <__alt_mem_onchip_mem+0xff801be0>
  809d3c:	a9000417 	ldw	r4,16(r21)
  809d40:	90800604 	addi	r2,r18,24
  809d44:	a8c00604 	addi	r3,r21,24
  809d48:	91000415 	stw	r4,16(r18)
  809d4c:	a9000517 	ldw	r4,20(r21)
  809d50:	91000515 	stw	r4,20(r18)
  809d54:	003f0406 	br	809968 <__alt_mem_onchip_mem+0xff801968>
  809d58:	a8c00417 	ldw	r3,16(r21)
  809d5c:	ad400604 	addi	r21,r21,24
  809d60:	b0800804 	addi	r2,r22,32
  809d64:	b0c00615 	stw	r3,24(r22)
  809d68:	a8ffff17 	ldw	r3,-4(r21)
  809d6c:	b0c00715 	stw	r3,28(r22)
  809d70:	003f9b06 	br	809be0 <__alt_mem_onchip_mem+0xff801be0>
  809d74:	9005883a 	mov	r2,r18
  809d78:	003fc706 	br	809c98 <__alt_mem_onchip_mem+0xff801c98>
  809d7c:	a80b883a 	mov	r5,r21
  809d80:	9009883a 	mov	r4,r18
  809d84:	08086bc0 	call	8086bc <memmove>
  809d88:	003fc906 	br	809cb0 <__alt_mem_onchip_mem+0xff801cb0>
  809d8c:	a8800217 	ldw	r2,8(r21)
  809d90:	b0800415 	stw	r2,16(r22)
  809d94:	a8800317 	ldw	r2,12(r21)
  809d98:	b0800515 	stw	r2,20(r22)
  809d9c:	31000726 	beq	r6,r4,809dbc <_realloc_r+0x548>
  809da0:	b0800604 	addi	r2,r22,24
  809da4:	ad400404 	addi	r21,r21,16
  809da8:	003fbb06 	br	809c98 <__alt_mem_onchip_mem+0xff801c98>
  809dac:	a009883a 	mov	r4,r20
  809db0:	080f4200 	call	80f420 <__malloc_unlock>
  809db4:	0005883a 	mov	r2,zero
  809db8:	003f0a06 	br	8099e4 <__alt_mem_onchip_mem+0xff8019e4>
  809dbc:	a8c00417 	ldw	r3,16(r21)
  809dc0:	ad400604 	addi	r21,r21,24
  809dc4:	b0800804 	addi	r2,r22,32
  809dc8:	b0c00615 	stw	r3,24(r22)
  809dcc:	a8ffff17 	ldw	r3,-4(r21)
  809dd0:	b0c00715 	stw	r3,28(r22)
  809dd4:	003fb006 	br	809c98 <__alt_mem_onchip_mem+0xff801c98>

00809dd8 <__fpclassifyd>:
  809dd8:	00a00034 	movhi	r2,32768
  809ddc:	10bfffc4 	addi	r2,r2,-1
  809de0:	2884703a 	and	r2,r5,r2
  809de4:	10000726 	beq	r2,zero,809e04 <__fpclassifyd+0x2c>
  809de8:	00fffc34 	movhi	r3,65520
  809dec:	019ff834 	movhi	r6,32736
  809df0:	28c7883a 	add	r3,r5,r3
  809df4:	31bfffc4 	addi	r6,r6,-1
  809df8:	30c00536 	bltu	r6,r3,809e10 <__fpclassifyd+0x38>
  809dfc:	00800104 	movi	r2,4
  809e00:	f800283a 	ret
  809e04:	2000021e 	bne	r4,zero,809e10 <__fpclassifyd+0x38>
  809e08:	00800084 	movi	r2,2
  809e0c:	f800283a 	ret
  809e10:	00dffc34 	movhi	r3,32752
  809e14:	019ff834 	movhi	r6,32736
  809e18:	28cb883a 	add	r5,r5,r3
  809e1c:	31bfffc4 	addi	r6,r6,-1
  809e20:	317ff62e 	bgeu	r6,r5,809dfc <__alt_mem_onchip_mem+0xff801dfc>
  809e24:	01400434 	movhi	r5,16
  809e28:	297fffc4 	addi	r5,r5,-1
  809e2c:	28800236 	bltu	r5,r2,809e38 <__fpclassifyd+0x60>
  809e30:	008000c4 	movi	r2,3
  809e34:	f800283a 	ret
  809e38:	10c00226 	beq	r2,r3,809e44 <__fpclassifyd+0x6c>
  809e3c:	0005883a 	mov	r2,zero
  809e40:	f800283a 	ret
  809e44:	2005003a 	cmpeq	r2,r4,zero
  809e48:	f800283a 	ret

00809e4c <strcmp>:
  809e4c:	2144b03a 	or	r2,r4,r5
  809e50:	108000cc 	andi	r2,r2,3
  809e54:	1000171e 	bne	r2,zero,809eb4 <strcmp+0x68>
  809e58:	20800017 	ldw	r2,0(r4)
  809e5c:	28c00017 	ldw	r3,0(r5)
  809e60:	10c0141e 	bne	r2,r3,809eb4 <strcmp+0x68>
  809e64:	027fbff4 	movhi	r9,65279
  809e68:	4a7fbfc4 	addi	r9,r9,-257
  809e6c:	0086303a 	nor	r3,zero,r2
  809e70:	02202074 	movhi	r8,32897
  809e74:	1245883a 	add	r2,r2,r9
  809e78:	42202004 	addi	r8,r8,-32640
  809e7c:	10c4703a 	and	r2,r2,r3
  809e80:	1204703a 	and	r2,r2,r8
  809e84:	10000226 	beq	r2,zero,809e90 <strcmp+0x44>
  809e88:	00002306 	br	809f18 <strcmp+0xcc>
  809e8c:	1000221e 	bne	r2,zero,809f18 <strcmp+0xcc>
  809e90:	21000104 	addi	r4,r4,4
  809e94:	20c00017 	ldw	r3,0(r4)
  809e98:	29400104 	addi	r5,r5,4
  809e9c:	29800017 	ldw	r6,0(r5)
  809ea0:	1a4f883a 	add	r7,r3,r9
  809ea4:	00c4303a 	nor	r2,zero,r3
  809ea8:	3884703a 	and	r2,r7,r2
  809eac:	1204703a 	and	r2,r2,r8
  809eb0:	19bff626 	beq	r3,r6,809e8c <__alt_mem_onchip_mem+0xff801e8c>
  809eb4:	20800003 	ldbu	r2,0(r4)
  809eb8:	10c03fcc 	andi	r3,r2,255
  809ebc:	18c0201c 	xori	r3,r3,128
  809ec0:	18ffe004 	addi	r3,r3,-128
  809ec4:	18000c26 	beq	r3,zero,809ef8 <strcmp+0xac>
  809ec8:	29800007 	ldb	r6,0(r5)
  809ecc:	19800326 	beq	r3,r6,809edc <strcmp+0x90>
  809ed0:	00001306 	br	809f20 <strcmp+0xd4>
  809ed4:	29800007 	ldb	r6,0(r5)
  809ed8:	11800b1e 	bne	r2,r6,809f08 <strcmp+0xbc>
  809edc:	21000044 	addi	r4,r4,1
  809ee0:	20c00003 	ldbu	r3,0(r4)
  809ee4:	29400044 	addi	r5,r5,1
  809ee8:	18803fcc 	andi	r2,r3,255
  809eec:	1080201c 	xori	r2,r2,128
  809ef0:	10bfe004 	addi	r2,r2,-128
  809ef4:	103ff71e 	bne	r2,zero,809ed4 <__alt_mem_onchip_mem+0xff801ed4>
  809ef8:	0007883a 	mov	r3,zero
  809efc:	28800003 	ldbu	r2,0(r5)
  809f00:	1885c83a 	sub	r2,r3,r2
  809f04:	f800283a 	ret
  809f08:	28800003 	ldbu	r2,0(r5)
  809f0c:	18c03fcc 	andi	r3,r3,255
  809f10:	1885c83a 	sub	r2,r3,r2
  809f14:	f800283a 	ret
  809f18:	0005883a 	mov	r2,zero
  809f1c:	f800283a 	ret
  809f20:	10c03fcc 	andi	r3,r2,255
  809f24:	003ff506 	br	809efc <__alt_mem_onchip_mem+0xff801efc>

00809f28 <strlen>:
  809f28:	208000cc 	andi	r2,r4,3
  809f2c:	10002026 	beq	r2,zero,809fb0 <strlen+0x88>
  809f30:	20800007 	ldb	r2,0(r4)
  809f34:	10002026 	beq	r2,zero,809fb8 <strlen+0x90>
  809f38:	2005883a 	mov	r2,r4
  809f3c:	00000206 	br	809f48 <strlen+0x20>
  809f40:	10c00007 	ldb	r3,0(r2)
  809f44:	18001826 	beq	r3,zero,809fa8 <strlen+0x80>
  809f48:	10800044 	addi	r2,r2,1
  809f4c:	10c000cc 	andi	r3,r2,3
  809f50:	183ffb1e 	bne	r3,zero,809f40 <__alt_mem_onchip_mem+0xff801f40>
  809f54:	10c00017 	ldw	r3,0(r2)
  809f58:	01ffbff4 	movhi	r7,65279
  809f5c:	39ffbfc4 	addi	r7,r7,-257
  809f60:	00ca303a 	nor	r5,zero,r3
  809f64:	01a02074 	movhi	r6,32897
  809f68:	19c7883a 	add	r3,r3,r7
  809f6c:	31a02004 	addi	r6,r6,-32640
  809f70:	1946703a 	and	r3,r3,r5
  809f74:	1986703a 	and	r3,r3,r6
  809f78:	1800091e 	bne	r3,zero,809fa0 <strlen+0x78>
  809f7c:	10800104 	addi	r2,r2,4
  809f80:	10c00017 	ldw	r3,0(r2)
  809f84:	19cb883a 	add	r5,r3,r7
  809f88:	00c6303a 	nor	r3,zero,r3
  809f8c:	28c6703a 	and	r3,r5,r3
  809f90:	1986703a 	and	r3,r3,r6
  809f94:	183ff926 	beq	r3,zero,809f7c <__alt_mem_onchip_mem+0xff801f7c>
  809f98:	00000106 	br	809fa0 <strlen+0x78>
  809f9c:	10800044 	addi	r2,r2,1
  809fa0:	10c00007 	ldb	r3,0(r2)
  809fa4:	183ffd1e 	bne	r3,zero,809f9c <__alt_mem_onchip_mem+0xff801f9c>
  809fa8:	1105c83a 	sub	r2,r2,r4
  809fac:	f800283a 	ret
  809fb0:	2005883a 	mov	r2,r4
  809fb4:	003fe706 	br	809f54 <__alt_mem_onchip_mem+0xff801f54>
  809fb8:	0005883a 	mov	r2,zero
  809fbc:	f800283a 	ret

00809fc0 <__sprint_r.part.0>:
  809fc0:	28801917 	ldw	r2,100(r5)
  809fc4:	defff604 	addi	sp,sp,-40
  809fc8:	dd400515 	stw	r21,20(sp)
  809fcc:	dfc00915 	stw	ra,36(sp)
  809fd0:	df000815 	stw	fp,32(sp)
  809fd4:	ddc00715 	stw	r23,28(sp)
  809fd8:	dd800615 	stw	r22,24(sp)
  809fdc:	dd000415 	stw	r20,16(sp)
  809fe0:	dcc00315 	stw	r19,12(sp)
  809fe4:	dc800215 	stw	r18,8(sp)
  809fe8:	dc400115 	stw	r17,4(sp)
  809fec:	dc000015 	stw	r16,0(sp)
  809ff0:	1088000c 	andi	r2,r2,8192
  809ff4:	302b883a 	mov	r21,r6
  809ff8:	10002e26 	beq	r2,zero,80a0b4 <__sprint_r.part.0+0xf4>
  809ffc:	30800217 	ldw	r2,8(r6)
  80a000:	35800017 	ldw	r22,0(r6)
  80a004:	10002926 	beq	r2,zero,80a0ac <__sprint_r.part.0+0xec>
  80a008:	2827883a 	mov	r19,r5
  80a00c:	2029883a 	mov	r20,r4
  80a010:	b5c00104 	addi	r23,r22,4
  80a014:	04bfffc4 	movi	r18,-1
  80a018:	bc400017 	ldw	r17,0(r23)
  80a01c:	b4000017 	ldw	r16,0(r22)
  80a020:	0039883a 	mov	fp,zero
  80a024:	8822d0ba 	srli	r17,r17,2
  80a028:	8800031e 	bne	r17,zero,80a038 <__sprint_r.part.0+0x78>
  80a02c:	00001806 	br	80a090 <__sprint_r.part.0+0xd0>
  80a030:	84000104 	addi	r16,r16,4
  80a034:	8f001526 	beq	r17,fp,80a08c <__sprint_r.part.0+0xcc>
  80a038:	81400017 	ldw	r5,0(r16)
  80a03c:	980d883a 	mov	r6,r19
  80a040:	a009883a 	mov	r4,r20
  80a044:	080b8300 	call	80b830 <_fputwc_r>
  80a048:	e7000044 	addi	fp,fp,1
  80a04c:	14bff81e 	bne	r2,r18,80a030 <__alt_mem_onchip_mem+0xff802030>
  80a050:	9005883a 	mov	r2,r18
  80a054:	a8000215 	stw	zero,8(r21)
  80a058:	a8000115 	stw	zero,4(r21)
  80a05c:	dfc00917 	ldw	ra,36(sp)
  80a060:	df000817 	ldw	fp,32(sp)
  80a064:	ddc00717 	ldw	r23,28(sp)
  80a068:	dd800617 	ldw	r22,24(sp)
  80a06c:	dd400517 	ldw	r21,20(sp)
  80a070:	dd000417 	ldw	r20,16(sp)
  80a074:	dcc00317 	ldw	r19,12(sp)
  80a078:	dc800217 	ldw	r18,8(sp)
  80a07c:	dc400117 	ldw	r17,4(sp)
  80a080:	dc000017 	ldw	r16,0(sp)
  80a084:	dec00a04 	addi	sp,sp,40
  80a088:	f800283a 	ret
  80a08c:	a8800217 	ldw	r2,8(r21)
  80a090:	8c63883a 	add	r17,r17,r17
  80a094:	8c63883a 	add	r17,r17,r17
  80a098:	1445c83a 	sub	r2,r2,r17
  80a09c:	a8800215 	stw	r2,8(r21)
  80a0a0:	b5800204 	addi	r22,r22,8
  80a0a4:	bdc00204 	addi	r23,r23,8
  80a0a8:	103fdb1e 	bne	r2,zero,80a018 <__alt_mem_onchip_mem+0xff802018>
  80a0ac:	0005883a 	mov	r2,zero
  80a0b0:	003fe806 	br	80a054 <__alt_mem_onchip_mem+0xff802054>
  80a0b4:	0807e440 	call	807e44 <__sfvwrite_r>
  80a0b8:	003fe606 	br	80a054 <__alt_mem_onchip_mem+0xff802054>

0080a0bc <__sprint_r>:
  80a0bc:	30c00217 	ldw	r3,8(r6)
  80a0c0:	18000126 	beq	r3,zero,80a0c8 <__sprint_r+0xc>
  80a0c4:	0809fc01 	jmpi	809fc0 <__sprint_r.part.0>
  80a0c8:	30000115 	stw	zero,4(r6)
  80a0cc:	0005883a 	mov	r2,zero
  80a0d0:	f800283a 	ret

0080a0d4 <___vfiprintf_internal_r>:
  80a0d4:	deffc904 	addi	sp,sp,-220
  80a0d8:	df003515 	stw	fp,212(sp)
  80a0dc:	dd003115 	stw	r20,196(sp)
  80a0e0:	dfc03615 	stw	ra,216(sp)
  80a0e4:	ddc03415 	stw	r23,208(sp)
  80a0e8:	dd803315 	stw	r22,204(sp)
  80a0ec:	dd403215 	stw	r21,200(sp)
  80a0f0:	dcc03015 	stw	r19,192(sp)
  80a0f4:	dc802f15 	stw	r18,188(sp)
  80a0f8:	dc402e15 	stw	r17,184(sp)
  80a0fc:	dc002d15 	stw	r16,180(sp)
  80a100:	d9002015 	stw	r4,128(sp)
  80a104:	d9c02215 	stw	r7,136(sp)
  80a108:	2829883a 	mov	r20,r5
  80a10c:	3039883a 	mov	fp,r6
  80a110:	20000226 	beq	r4,zero,80a11c <___vfiprintf_internal_r+0x48>
  80a114:	20800e17 	ldw	r2,56(r4)
  80a118:	1000cf26 	beq	r2,zero,80a458 <___vfiprintf_internal_r+0x384>
  80a11c:	a080030b 	ldhu	r2,12(r20)
  80a120:	10c8000c 	andi	r3,r2,8192
  80a124:	1800061e 	bne	r3,zero,80a140 <___vfiprintf_internal_r+0x6c>
  80a128:	a1001917 	ldw	r4,100(r20)
  80a12c:	00f7ffc4 	movi	r3,-8193
  80a130:	10880014 	ori	r2,r2,8192
  80a134:	20c6703a 	and	r3,r4,r3
  80a138:	a080030d 	sth	r2,12(r20)
  80a13c:	a0c01915 	stw	r3,100(r20)
  80a140:	10c0020c 	andi	r3,r2,8
  80a144:	1800a926 	beq	r3,zero,80a3ec <___vfiprintf_internal_r+0x318>
  80a148:	a0c00417 	ldw	r3,16(r20)
  80a14c:	1800a726 	beq	r3,zero,80a3ec <___vfiprintf_internal_r+0x318>
  80a150:	1080068c 	andi	r2,r2,26
  80a154:	00c00284 	movi	r3,10
  80a158:	10c0ac26 	beq	r2,r3,80a40c <___vfiprintf_internal_r+0x338>
  80a15c:	da801a04 	addi	r10,sp,104
  80a160:	da801e15 	stw	r10,120(sp)
  80a164:	d8801e17 	ldw	r2,120(sp)
  80a168:	da8019c4 	addi	r10,sp,103
  80a16c:	05802074 	movhi	r22,129
  80a170:	05c02074 	movhi	r23,129
  80a174:	da801f15 	stw	r10,124(sp)
  80a178:	1295c83a 	sub	r10,r2,r10
  80a17c:	b58cfb04 	addi	r22,r22,13292
  80a180:	bdccf704 	addi	r23,r23,13276
  80a184:	dec01a15 	stw	sp,104(sp)
  80a188:	d8001c15 	stw	zero,112(sp)
  80a18c:	d8001b15 	stw	zero,108(sp)
  80a190:	d8002615 	stw	zero,152(sp)
  80a194:	d8002315 	stw	zero,140(sp)
  80a198:	da802715 	stw	r10,156(sp)
  80a19c:	d811883a 	mov	r8,sp
  80a1a0:	dd002115 	stw	r20,132(sp)
  80a1a4:	e021883a 	mov	r16,fp
  80a1a8:	80800007 	ldb	r2,0(r16)
  80a1ac:	1003ea26 	beq	r2,zero,80b158 <___vfiprintf_internal_r+0x1084>
  80a1b0:	00c00944 	movi	r3,37
  80a1b4:	8025883a 	mov	r18,r16
  80a1b8:	10c0021e 	bne	r2,r3,80a1c4 <___vfiprintf_internal_r+0xf0>
  80a1bc:	00001606 	br	80a218 <___vfiprintf_internal_r+0x144>
  80a1c0:	10c00326 	beq	r2,r3,80a1d0 <___vfiprintf_internal_r+0xfc>
  80a1c4:	94800044 	addi	r18,r18,1
  80a1c8:	90800007 	ldb	r2,0(r18)
  80a1cc:	103ffc1e 	bne	r2,zero,80a1c0 <__alt_mem_onchip_mem+0xff8021c0>
  80a1d0:	9423c83a 	sub	r17,r18,r16
  80a1d4:	88001026 	beq	r17,zero,80a218 <___vfiprintf_internal_r+0x144>
  80a1d8:	d8c01c17 	ldw	r3,112(sp)
  80a1dc:	d8801b17 	ldw	r2,108(sp)
  80a1e0:	44000015 	stw	r16,0(r8)
  80a1e4:	88c7883a 	add	r3,r17,r3
  80a1e8:	10800044 	addi	r2,r2,1
  80a1ec:	44400115 	stw	r17,4(r8)
  80a1f0:	d8c01c15 	stw	r3,112(sp)
  80a1f4:	d8801b15 	stw	r2,108(sp)
  80a1f8:	010001c4 	movi	r4,7
  80a1fc:	2080760e 	bge	r4,r2,80a3d8 <___vfiprintf_internal_r+0x304>
  80a200:	1803821e 	bne	r3,zero,80b00c <___vfiprintf_internal_r+0xf38>
  80a204:	da802317 	ldw	r10,140(sp)
  80a208:	d8001b15 	stw	zero,108(sp)
  80a20c:	d811883a 	mov	r8,sp
  80a210:	5455883a 	add	r10,r10,r17
  80a214:	da802315 	stw	r10,140(sp)
  80a218:	90800007 	ldb	r2,0(r18)
  80a21c:	10044626 	beq	r2,zero,80b338 <___vfiprintf_internal_r+0x1264>
  80a220:	90c00047 	ldb	r3,1(r18)
  80a224:	94000044 	addi	r16,r18,1
  80a228:	d8001d85 	stb	zero,118(sp)
  80a22c:	0009883a 	mov	r4,zero
  80a230:	000f883a 	mov	r7,zero
  80a234:	027fffc4 	movi	r9,-1
  80a238:	0023883a 	mov	r17,zero
  80a23c:	0029883a 	mov	r20,zero
  80a240:	01401604 	movi	r5,88
  80a244:	01800244 	movi	r6,9
  80a248:	03400a84 	movi	r13,42
  80a24c:	03001b04 	movi	r12,108
  80a250:	84000044 	addi	r16,r16,1
  80a254:	18bff804 	addi	r2,r3,-32
  80a258:	28827336 	bltu	r5,r2,80ac28 <___vfiprintf_internal_r+0xb54>
  80a25c:	100490ba 	slli	r2,r2,2
  80a260:	02802074 	movhi	r10,129
  80a264:	52a89d04 	addi	r10,r10,-23948
  80a268:	1285883a 	add	r2,r2,r10
  80a26c:	10800017 	ldw	r2,0(r2)
  80a270:	1000683a 	jmp	r2
  80a274:	0080a95c 	xori	r2,zero,677
  80a278:	0080ac28 	cmpgeui	r2,zero,688
  80a27c:	0080ac28 	cmpgeui	r2,zero,688
  80a280:	0080a97c 	xorhi	r2,zero,677
  80a284:	0080ac28 	cmpgeui	r2,zero,688
  80a288:	0080ac28 	cmpgeui	r2,zero,688
  80a28c:	0080ac28 	cmpgeui	r2,zero,688
  80a290:	0080ac28 	cmpgeui	r2,zero,688
  80a294:	0080ac28 	cmpgeui	r2,zero,688
  80a298:	0080ac28 	cmpgeui	r2,zero,688
  80a29c:	0080ab64 	muli	r2,zero,685
  80a2a0:	0080ab80 	call	80ab8 <__reset-0x77f548>
  80a2a4:	0080ac28 	cmpgeui	r2,zero,688
  80a2a8:	0080a468 	cmpgeui	r2,zero,657
  80a2ac:	0080ab90 	cmplti	r2,zero,686
  80a2b0:	0080ac28 	cmpgeui	r2,zero,688
  80a2b4:	0080a988 	cmpgei	r2,zero,678
  80a2b8:	0080a994 	movui	r2,678
  80a2bc:	0080a994 	movui	r2,678
  80a2c0:	0080a994 	movui	r2,678
  80a2c4:	0080a994 	movui	r2,678
  80a2c8:	0080a994 	movui	r2,678
  80a2cc:	0080a994 	movui	r2,678
  80a2d0:	0080a994 	movui	r2,678
  80a2d4:	0080a994 	movui	r2,678
  80a2d8:	0080a994 	movui	r2,678
  80a2dc:	0080ac28 	cmpgeui	r2,zero,688
  80a2e0:	0080ac28 	cmpgeui	r2,zero,688
  80a2e4:	0080ac28 	cmpgeui	r2,zero,688
  80a2e8:	0080ac28 	cmpgeui	r2,zero,688
  80a2ec:	0080ac28 	cmpgeui	r2,zero,688
  80a2f0:	0080ac28 	cmpgeui	r2,zero,688
  80a2f4:	0080ac28 	cmpgeui	r2,zero,688
  80a2f8:	0080ac28 	cmpgeui	r2,zero,688
  80a2fc:	0080ac28 	cmpgeui	r2,zero,688
  80a300:	0080ac28 	cmpgeui	r2,zero,688
  80a304:	0080a9c0 	call	80a9c <__reset-0x77f564>
  80a308:	0080ac28 	cmpgeui	r2,zero,688
  80a30c:	0080ac28 	cmpgeui	r2,zero,688
  80a310:	0080ac28 	cmpgeui	r2,zero,688
  80a314:	0080ac28 	cmpgeui	r2,zero,688
  80a318:	0080ac28 	cmpgeui	r2,zero,688
  80a31c:	0080ac28 	cmpgeui	r2,zero,688
  80a320:	0080ac28 	cmpgeui	r2,zero,688
  80a324:	0080ac28 	cmpgeui	r2,zero,688
  80a328:	0080ac28 	cmpgeui	r2,zero,688
  80a32c:	0080ac28 	cmpgeui	r2,zero,688
  80a330:	0080a9f8 	rdprs	r2,zero,679
  80a334:	0080ac28 	cmpgeui	r2,zero,688
  80a338:	0080ac28 	cmpgeui	r2,zero,688
  80a33c:	0080ac28 	cmpgeui	r2,zero,688
  80a340:	0080ac28 	cmpgeui	r2,zero,688
  80a344:	0080ac28 	cmpgeui	r2,zero,688
  80a348:	0080aa50 	cmplti	r2,zero,681
  80a34c:	0080ac28 	cmpgeui	r2,zero,688
  80a350:	0080ac28 	cmpgeui	r2,zero,688
  80a354:	0080aac0 	call	80aac <__reset-0x77f554>
  80a358:	0080ac28 	cmpgeui	r2,zero,688
  80a35c:	0080ac28 	cmpgeui	r2,zero,688
  80a360:	0080ac28 	cmpgeui	r2,zero,688
  80a364:	0080ac28 	cmpgeui	r2,zero,688
  80a368:	0080ac28 	cmpgeui	r2,zero,688
  80a36c:	0080ac28 	cmpgeui	r2,zero,688
  80a370:	0080ac28 	cmpgeui	r2,zero,688
  80a374:	0080ac28 	cmpgeui	r2,zero,688
  80a378:	0080ac28 	cmpgeui	r2,zero,688
  80a37c:	0080ac28 	cmpgeui	r2,zero,688
  80a380:	0080a86c 	andhi	r2,zero,673
  80a384:	0080a898 	cmpnei	r2,zero,674
  80a388:	0080ac28 	cmpgeui	r2,zero,688
  80a38c:	0080ac28 	cmpgeui	r2,zero,688
  80a390:	0080ac28 	cmpgeui	r2,zero,688
  80a394:	0080abd0 	cmplti	r2,zero,687
  80a398:	0080a898 	cmpnei	r2,zero,674
  80a39c:	0080ac28 	cmpgeui	r2,zero,688
  80a3a0:	0080ac28 	cmpgeui	r2,zero,688
  80a3a4:	0080a72c 	andhi	r2,zero,668
  80a3a8:	0080ac28 	cmpgeui	r2,zero,688
  80a3ac:	0080a73c 	xorhi	r2,zero,668
  80a3b0:	0080a778 	rdprs	r2,zero,669
  80a3b4:	0080a474 	movhi	r2,657
  80a3b8:	0080a720 	cmpeqi	r2,zero,668
  80a3bc:	0080ac28 	cmpgeui	r2,zero,688
  80a3c0:	0080aafc 	xorhi	r2,zero,683
  80a3c4:	0080ac28 	cmpgeui	r2,zero,688
  80a3c8:	0080ab54 	movui	r2,685
  80a3cc:	0080ac28 	cmpgeui	r2,zero,688
  80a3d0:	0080ac28 	cmpgeui	r2,zero,688
  80a3d4:	0080a818 	cmpnei	r2,zero,672
  80a3d8:	42000204 	addi	r8,r8,8
  80a3dc:	da802317 	ldw	r10,140(sp)
  80a3e0:	5455883a 	add	r10,r10,r17
  80a3e4:	da802315 	stw	r10,140(sp)
  80a3e8:	003f8b06 	br	80a218 <__alt_mem_onchip_mem+0xff802218>
  80a3ec:	d9002017 	ldw	r4,128(sp)
  80a3f0:	a00b883a 	mov	r5,r20
  80a3f4:	0805b880 	call	805b88 <__swsetup_r>
  80a3f8:	1003b11e 	bne	r2,zero,80b2c0 <___vfiprintf_internal_r+0x11ec>
  80a3fc:	a080030b 	ldhu	r2,12(r20)
  80a400:	00c00284 	movi	r3,10
  80a404:	1080068c 	andi	r2,r2,26
  80a408:	10ff541e 	bne	r2,r3,80a15c <__alt_mem_onchip_mem+0xff80215c>
  80a40c:	a080038f 	ldh	r2,14(r20)
  80a410:	103f5216 	blt	r2,zero,80a15c <__alt_mem_onchip_mem+0xff80215c>
  80a414:	d9c02217 	ldw	r7,136(sp)
  80a418:	d9002017 	ldw	r4,128(sp)
  80a41c:	e00d883a 	mov	r6,fp
  80a420:	a00b883a 	mov	r5,r20
  80a424:	080b54c0 	call	80b54c <__sbprintf>
  80a428:	dfc03617 	ldw	ra,216(sp)
  80a42c:	df003517 	ldw	fp,212(sp)
  80a430:	ddc03417 	ldw	r23,208(sp)
  80a434:	dd803317 	ldw	r22,204(sp)
  80a438:	dd403217 	ldw	r21,200(sp)
  80a43c:	dd003117 	ldw	r20,196(sp)
  80a440:	dcc03017 	ldw	r19,192(sp)
  80a444:	dc802f17 	ldw	r18,188(sp)
  80a448:	dc402e17 	ldw	r17,184(sp)
  80a44c:	dc002d17 	ldw	r16,180(sp)
  80a450:	dec03704 	addi	sp,sp,220
  80a454:	f800283a 	ret
  80a458:	08019d40 	call	8019d4 <__sinit>
  80a45c:	003f2f06 	br	80a11c <__alt_mem_onchip_mem+0xff80211c>
  80a460:	0463c83a 	sub	r17,zero,r17
  80a464:	d8802215 	stw	r2,136(sp)
  80a468:	a5000114 	ori	r20,r20,4
  80a46c:	80c00007 	ldb	r3,0(r16)
  80a470:	003f7706 	br	80a250 <__alt_mem_onchip_mem+0xff802250>
  80a474:	00800c04 	movi	r2,48
  80a478:	da802217 	ldw	r10,136(sp)
  80a47c:	d8801d05 	stb	r2,116(sp)
  80a480:	00801e04 	movi	r2,120
  80a484:	d8801d45 	stb	r2,117(sp)
  80a488:	d8001d85 	stb	zero,118(sp)
  80a48c:	50c00104 	addi	r3,r10,4
  80a490:	54800017 	ldw	r18,0(r10)
  80a494:	0027883a 	mov	r19,zero
  80a498:	a0800094 	ori	r2,r20,2
  80a49c:	48030b16 	blt	r9,zero,80b0cc <___vfiprintf_internal_r+0xff8>
  80a4a0:	00bfdfc4 	movi	r2,-129
  80a4a4:	a096703a 	and	r11,r20,r2
  80a4a8:	d8c02215 	stw	r3,136(sp)
  80a4ac:	5d000094 	ori	r20,r11,2
  80a4b0:	90032b1e 	bne	r18,zero,80b160 <___vfiprintf_internal_r+0x108c>
  80a4b4:	00802074 	movhi	r2,129
  80a4b8:	108bf704 	addi	r2,r2,12252
  80a4bc:	d8802615 	stw	r2,152(sp)
  80a4c0:	0039883a 	mov	fp,zero
  80a4c4:	48017b1e 	bne	r9,zero,80aab4 <___vfiprintf_internal_r+0x9e0>
  80a4c8:	0013883a 	mov	r9,zero
  80a4cc:	0027883a 	mov	r19,zero
  80a4d0:	dd401a04 	addi	r21,sp,104
  80a4d4:	4825883a 	mov	r18,r9
  80a4d8:	4cc0010e 	bge	r9,r19,80a4e0 <___vfiprintf_internal_r+0x40c>
  80a4dc:	9825883a 	mov	r18,r19
  80a4e0:	e7003fcc 	andi	fp,fp,255
  80a4e4:	e700201c 	xori	fp,fp,128
  80a4e8:	e73fe004 	addi	fp,fp,-128
  80a4ec:	e0000126 	beq	fp,zero,80a4f4 <___vfiprintf_internal_r+0x420>
  80a4f0:	94800044 	addi	r18,r18,1
  80a4f4:	a380008c 	andi	r14,r20,2
  80a4f8:	70000126 	beq	r14,zero,80a500 <___vfiprintf_internal_r+0x42c>
  80a4fc:	94800084 	addi	r18,r18,2
  80a500:	a700210c 	andi	fp,r20,132
  80a504:	e001df1e 	bne	fp,zero,80ac84 <___vfiprintf_internal_r+0xbb0>
  80a508:	8c87c83a 	sub	r3,r17,r18
  80a50c:	00c1dd0e 	bge	zero,r3,80ac84 <___vfiprintf_internal_r+0xbb0>
  80a510:	01c00404 	movi	r7,16
  80a514:	d8801c17 	ldw	r2,112(sp)
  80a518:	38c3ad0e 	bge	r7,r3,80b3d0 <___vfiprintf_internal_r+0x12fc>
  80a51c:	02802074 	movhi	r10,129
  80a520:	528cfb04 	addi	r10,r10,13292
  80a524:	dc002915 	stw	r16,164(sp)
  80a528:	d9801b17 	ldw	r6,108(sp)
  80a52c:	da802415 	stw	r10,144(sp)
  80a530:	03c001c4 	movi	r15,7
  80a534:	da402515 	stw	r9,148(sp)
  80a538:	db802815 	stw	r14,160(sp)
  80a53c:	1821883a 	mov	r16,r3
  80a540:	00000506 	br	80a558 <___vfiprintf_internal_r+0x484>
  80a544:	31400084 	addi	r5,r6,2
  80a548:	42000204 	addi	r8,r8,8
  80a54c:	200d883a 	mov	r6,r4
  80a550:	843ffc04 	addi	r16,r16,-16
  80a554:	3c000d0e 	bge	r7,r16,80a58c <___vfiprintf_internal_r+0x4b8>
  80a558:	10800404 	addi	r2,r2,16
  80a55c:	31000044 	addi	r4,r6,1
  80a560:	45800015 	stw	r22,0(r8)
  80a564:	41c00115 	stw	r7,4(r8)
  80a568:	d8801c15 	stw	r2,112(sp)
  80a56c:	d9001b15 	stw	r4,108(sp)
  80a570:	793ff40e 	bge	r15,r4,80a544 <__alt_mem_onchip_mem+0xff802544>
  80a574:	1001b51e 	bne	r2,zero,80ac4c <___vfiprintf_internal_r+0xb78>
  80a578:	843ffc04 	addi	r16,r16,-16
  80a57c:	000d883a 	mov	r6,zero
  80a580:	01400044 	movi	r5,1
  80a584:	d811883a 	mov	r8,sp
  80a588:	3c3ff316 	blt	r7,r16,80a558 <__alt_mem_onchip_mem+0xff802558>
  80a58c:	8007883a 	mov	r3,r16
  80a590:	da402517 	ldw	r9,148(sp)
  80a594:	db802817 	ldw	r14,160(sp)
  80a598:	dc002917 	ldw	r16,164(sp)
  80a59c:	da802417 	ldw	r10,144(sp)
  80a5a0:	1885883a 	add	r2,r3,r2
  80a5a4:	40c00115 	stw	r3,4(r8)
  80a5a8:	42800015 	stw	r10,0(r8)
  80a5ac:	d8801c15 	stw	r2,112(sp)
  80a5b0:	d9401b15 	stw	r5,108(sp)
  80a5b4:	00c001c4 	movi	r3,7
  80a5b8:	19426016 	blt	r3,r5,80af3c <___vfiprintf_internal_r+0xe68>
  80a5bc:	d8c01d87 	ldb	r3,118(sp)
  80a5c0:	42000204 	addi	r8,r8,8
  80a5c4:	29000044 	addi	r4,r5,1
  80a5c8:	1801b31e 	bne	r3,zero,80ac98 <___vfiprintf_internal_r+0xbc4>
  80a5cc:	7001c026 	beq	r14,zero,80acd0 <___vfiprintf_internal_r+0xbfc>
  80a5d0:	d8c01d04 	addi	r3,sp,116
  80a5d4:	10800084 	addi	r2,r2,2
  80a5d8:	40c00015 	stw	r3,0(r8)
  80a5dc:	00c00084 	movi	r3,2
  80a5e0:	40c00115 	stw	r3,4(r8)
  80a5e4:	d8801c15 	stw	r2,112(sp)
  80a5e8:	d9001b15 	stw	r4,108(sp)
  80a5ec:	00c001c4 	movi	r3,7
  80a5f0:	1902650e 	bge	r3,r4,80af88 <___vfiprintf_internal_r+0xeb4>
  80a5f4:	10029a1e 	bne	r2,zero,80b060 <___vfiprintf_internal_r+0xf8c>
  80a5f8:	00c02004 	movi	r3,128
  80a5fc:	01000044 	movi	r4,1
  80a600:	000b883a 	mov	r5,zero
  80a604:	d811883a 	mov	r8,sp
  80a608:	e0c1b31e 	bne	fp,r3,80acd8 <___vfiprintf_internal_r+0xc04>
  80a60c:	8cb9c83a 	sub	fp,r17,r18
  80a610:	0701b10e 	bge	zero,fp,80acd8 <___vfiprintf_internal_r+0xc04>
  80a614:	01c00404 	movi	r7,16
  80a618:	3f03890e 	bge	r7,fp,80b440 <___vfiprintf_internal_r+0x136c>
  80a61c:	00c02074 	movhi	r3,129
  80a620:	18ccf704 	addi	r3,r3,13276
  80a624:	d8c02415 	stw	r3,144(sp)
  80a628:	8007883a 	mov	r3,r16
  80a62c:	034001c4 	movi	r13,7
  80a630:	e021883a 	mov	r16,fp
  80a634:	da402515 	stw	r9,148(sp)
  80a638:	1839883a 	mov	fp,r3
  80a63c:	00000506 	br	80a654 <___vfiprintf_internal_r+0x580>
  80a640:	29800084 	addi	r6,r5,2
  80a644:	42000204 	addi	r8,r8,8
  80a648:	180b883a 	mov	r5,r3
  80a64c:	843ffc04 	addi	r16,r16,-16
  80a650:	3c000d0e 	bge	r7,r16,80a688 <___vfiprintf_internal_r+0x5b4>
  80a654:	10800404 	addi	r2,r2,16
  80a658:	28c00044 	addi	r3,r5,1
  80a65c:	45c00015 	stw	r23,0(r8)
  80a660:	41c00115 	stw	r7,4(r8)
  80a664:	d8801c15 	stw	r2,112(sp)
  80a668:	d8c01b15 	stw	r3,108(sp)
  80a66c:	68fff40e 	bge	r13,r3,80a640 <__alt_mem_onchip_mem+0xff802640>
  80a670:	1002241e 	bne	r2,zero,80af04 <___vfiprintf_internal_r+0xe30>
  80a674:	843ffc04 	addi	r16,r16,-16
  80a678:	01800044 	movi	r6,1
  80a67c:	000b883a 	mov	r5,zero
  80a680:	d811883a 	mov	r8,sp
  80a684:	3c3ff316 	blt	r7,r16,80a654 <__alt_mem_onchip_mem+0xff802654>
  80a688:	da402517 	ldw	r9,148(sp)
  80a68c:	e007883a 	mov	r3,fp
  80a690:	8039883a 	mov	fp,r16
  80a694:	1821883a 	mov	r16,r3
  80a698:	d8c02417 	ldw	r3,144(sp)
  80a69c:	1705883a 	add	r2,r2,fp
  80a6a0:	47000115 	stw	fp,4(r8)
  80a6a4:	40c00015 	stw	r3,0(r8)
  80a6a8:	d8801c15 	stw	r2,112(sp)
  80a6ac:	d9801b15 	stw	r6,108(sp)
  80a6b0:	00c001c4 	movi	r3,7
  80a6b4:	19827616 	blt	r3,r6,80b090 <___vfiprintf_internal_r+0xfbc>
  80a6b8:	4cf9c83a 	sub	fp,r9,r19
  80a6bc:	42000204 	addi	r8,r8,8
  80a6c0:	31000044 	addi	r4,r6,1
  80a6c4:	300b883a 	mov	r5,r6
  80a6c8:	07018516 	blt	zero,fp,80ace0 <___vfiprintf_internal_r+0xc0c>
  80a6cc:	9885883a 	add	r2,r19,r2
  80a6d0:	45400015 	stw	r21,0(r8)
  80a6d4:	44c00115 	stw	r19,4(r8)
  80a6d8:	d8801c15 	stw	r2,112(sp)
  80a6dc:	d9001b15 	stw	r4,108(sp)
  80a6e0:	00c001c4 	movi	r3,7
  80a6e4:	1901dd0e 	bge	r3,r4,80ae5c <___vfiprintf_internal_r+0xd88>
  80a6e8:	1002401e 	bne	r2,zero,80afec <___vfiprintf_internal_r+0xf18>
  80a6ec:	d8001b15 	stw	zero,108(sp)
  80a6f0:	a2c0010c 	andi	r11,r20,4
  80a6f4:	58000226 	beq	r11,zero,80a700 <___vfiprintf_internal_r+0x62c>
  80a6f8:	8ca7c83a 	sub	r19,r17,r18
  80a6fc:	04c2f216 	blt	zero,r19,80b2c8 <___vfiprintf_internal_r+0x11f4>
  80a700:	8c80010e 	bge	r17,r18,80a708 <___vfiprintf_internal_r+0x634>
  80a704:	9023883a 	mov	r17,r18
  80a708:	da802317 	ldw	r10,140(sp)
  80a70c:	5455883a 	add	r10,r10,r17
  80a710:	da802315 	stw	r10,140(sp)
  80a714:	d8001b15 	stw	zero,108(sp)
  80a718:	d811883a 	mov	r8,sp
  80a71c:	003ea206 	br	80a1a8 <__alt_mem_onchip_mem+0xff8021a8>
  80a720:	a5000814 	ori	r20,r20,32
  80a724:	80c00007 	ldb	r3,0(r16)
  80a728:	003ec906 	br	80a250 <__alt_mem_onchip_mem+0xff802250>
  80a72c:	80c00007 	ldb	r3,0(r16)
  80a730:	1b030926 	beq	r3,r12,80b358 <___vfiprintf_internal_r+0x1284>
  80a734:	a5000414 	ori	r20,r20,16
  80a738:	003ec506 	br	80a250 <__alt_mem_onchip_mem+0xff802250>
  80a73c:	21003fcc 	andi	r4,r4,255
  80a740:	20035e1e 	bne	r4,zero,80b4bc <___vfiprintf_internal_r+0x13e8>
  80a744:	a080080c 	andi	r2,r20,32
  80a748:	1002a526 	beq	r2,zero,80b1e0 <___vfiprintf_internal_r+0x110c>
  80a74c:	da802217 	ldw	r10,136(sp)
  80a750:	50800017 	ldw	r2,0(r10)
  80a754:	da802317 	ldw	r10,140(sp)
  80a758:	5007d7fa 	srai	r3,r10,31
  80a75c:	da802217 	ldw	r10,136(sp)
  80a760:	10c00115 	stw	r3,4(r2)
  80a764:	52800104 	addi	r10,r10,4
  80a768:	da802215 	stw	r10,136(sp)
  80a76c:	da802317 	ldw	r10,140(sp)
  80a770:	12800015 	stw	r10,0(r2)
  80a774:	003e8c06 	br	80a1a8 <__alt_mem_onchip_mem+0xff8021a8>
  80a778:	21003fcc 	andi	r4,r4,255
  80a77c:	2003511e 	bne	r4,zero,80b4c4 <___vfiprintf_internal_r+0x13f0>
  80a780:	a080080c 	andi	r2,r20,32
  80a784:	1000a126 	beq	r2,zero,80aa0c <___vfiprintf_internal_r+0x938>
  80a788:	da802217 	ldw	r10,136(sp)
  80a78c:	d8001d85 	stb	zero,118(sp)
  80a790:	50800204 	addi	r2,r10,8
  80a794:	54800017 	ldw	r18,0(r10)
  80a798:	54c00117 	ldw	r19,4(r10)
  80a79c:	4802b416 	blt	r9,zero,80b270 <___vfiprintf_internal_r+0x119c>
  80a7a0:	013fdfc4 	movi	r4,-129
  80a7a4:	94c6b03a 	or	r3,r18,r19
  80a7a8:	d8802215 	stw	r2,136(sp)
  80a7ac:	a128703a 	and	r20,r20,r4
  80a7b0:	1800a226 	beq	r3,zero,80aa3c <___vfiprintf_internal_r+0x968>
  80a7b4:	0039883a 	mov	fp,zero
  80a7b8:	dd401a04 	addi	r21,sp,104
  80a7bc:	9006d0fa 	srli	r3,r18,3
  80a7c0:	9808977a 	slli	r4,r19,29
  80a7c4:	9826d0fa 	srli	r19,r19,3
  80a7c8:	948001cc 	andi	r18,r18,7
  80a7cc:	90800c04 	addi	r2,r18,48
  80a7d0:	ad7fffc4 	addi	r21,r21,-1
  80a7d4:	20e4b03a 	or	r18,r4,r3
  80a7d8:	a8800005 	stb	r2,0(r21)
  80a7dc:	94c6b03a 	or	r3,r18,r19
  80a7e0:	183ff61e 	bne	r3,zero,80a7bc <__alt_mem_onchip_mem+0xff8027bc>
  80a7e4:	a0c0004c 	andi	r3,r20,1
  80a7e8:	18005926 	beq	r3,zero,80a950 <___vfiprintf_internal_r+0x87c>
  80a7ec:	10803fcc 	andi	r2,r2,255
  80a7f0:	1080201c 	xori	r2,r2,128
  80a7f4:	10bfe004 	addi	r2,r2,-128
  80a7f8:	00c00c04 	movi	r3,48
  80a7fc:	10c05426 	beq	r2,r3,80a950 <___vfiprintf_internal_r+0x87c>
  80a800:	da801e17 	ldw	r10,120(sp)
  80a804:	a8bfffc4 	addi	r2,r21,-1
  80a808:	a8ffffc5 	stb	r3,-1(r21)
  80a80c:	50a7c83a 	sub	r19,r10,r2
  80a810:	102b883a 	mov	r21,r2
  80a814:	003f2f06 	br	80a4d4 <__alt_mem_onchip_mem+0xff8024d4>
  80a818:	21003fcc 	andi	r4,r4,255
  80a81c:	2003421e 	bne	r4,zero,80b528 <___vfiprintf_internal_r+0x1454>
  80a820:	00802074 	movhi	r2,129
  80a824:	108bf704 	addi	r2,r2,12252
  80a828:	d8802615 	stw	r2,152(sp)
  80a82c:	a080080c 	andi	r2,r20,32
  80a830:	1000aa26 	beq	r2,zero,80aadc <___vfiprintf_internal_r+0xa08>
  80a834:	da802217 	ldw	r10,136(sp)
  80a838:	54800017 	ldw	r18,0(r10)
  80a83c:	54c00117 	ldw	r19,4(r10)
  80a840:	52800204 	addi	r10,r10,8
  80a844:	da802215 	stw	r10,136(sp)
  80a848:	a080004c 	andi	r2,r20,1
  80a84c:	1001d226 	beq	r2,zero,80af98 <___vfiprintf_internal_r+0xec4>
  80a850:	94c4b03a 	or	r2,r18,r19
  80a854:	1002351e 	bne	r2,zero,80b12c <___vfiprintf_internal_r+0x1058>
  80a858:	d8001d85 	stb	zero,118(sp)
  80a85c:	48022216 	blt	r9,zero,80b0e8 <___vfiprintf_internal_r+0x1014>
  80a860:	00bfdfc4 	movi	r2,-129
  80a864:	a0a8703a 	and	r20,r20,r2
  80a868:	003f1506 	br	80a4c0 <__alt_mem_onchip_mem+0xff8024c0>
  80a86c:	da802217 	ldw	r10,136(sp)
  80a870:	04800044 	movi	r18,1
  80a874:	d8001d85 	stb	zero,118(sp)
  80a878:	50800017 	ldw	r2,0(r10)
  80a87c:	52800104 	addi	r10,r10,4
  80a880:	da802215 	stw	r10,136(sp)
  80a884:	d8801005 	stb	r2,64(sp)
  80a888:	9027883a 	mov	r19,r18
  80a88c:	dd401004 	addi	r21,sp,64
  80a890:	0013883a 	mov	r9,zero
  80a894:	003f1706 	br	80a4f4 <__alt_mem_onchip_mem+0xff8024f4>
  80a898:	21003fcc 	andi	r4,r4,255
  80a89c:	2003201e 	bne	r4,zero,80b520 <___vfiprintf_internal_r+0x144c>
  80a8a0:	a080080c 	andi	r2,r20,32
  80a8a4:	10004b26 	beq	r2,zero,80a9d4 <___vfiprintf_internal_r+0x900>
  80a8a8:	da802217 	ldw	r10,136(sp)
  80a8ac:	50800117 	ldw	r2,4(r10)
  80a8b0:	54800017 	ldw	r18,0(r10)
  80a8b4:	52800204 	addi	r10,r10,8
  80a8b8:	da802215 	stw	r10,136(sp)
  80a8bc:	1027883a 	mov	r19,r2
  80a8c0:	10022c16 	blt	r2,zero,80b174 <___vfiprintf_internal_r+0x10a0>
  80a8c4:	df001d83 	ldbu	fp,118(sp)
  80a8c8:	48007216 	blt	r9,zero,80aa94 <___vfiprintf_internal_r+0x9c0>
  80a8cc:	00ffdfc4 	movi	r3,-129
  80a8d0:	94c4b03a 	or	r2,r18,r19
  80a8d4:	a0e8703a 	and	r20,r20,r3
  80a8d8:	1000cc26 	beq	r2,zero,80ac0c <___vfiprintf_internal_r+0xb38>
  80a8dc:	98021026 	beq	r19,zero,80b120 <___vfiprintf_internal_r+0x104c>
  80a8e0:	dc402415 	stw	r17,144(sp)
  80a8e4:	dc002515 	stw	r16,148(sp)
  80a8e8:	9823883a 	mov	r17,r19
  80a8ec:	9021883a 	mov	r16,r18
  80a8f0:	dd401a04 	addi	r21,sp,104
  80a8f4:	4825883a 	mov	r18,r9
  80a8f8:	4027883a 	mov	r19,r8
  80a8fc:	8009883a 	mov	r4,r16
  80a900:	880b883a 	mov	r5,r17
  80a904:	01800284 	movi	r6,10
  80a908:	000f883a 	mov	r7,zero
  80a90c:	080c0340 	call	80c034 <__umoddi3>
  80a910:	10800c04 	addi	r2,r2,48
  80a914:	ad7fffc4 	addi	r21,r21,-1
  80a918:	8009883a 	mov	r4,r16
  80a91c:	880b883a 	mov	r5,r17
  80a920:	a8800005 	stb	r2,0(r21)
  80a924:	01800284 	movi	r6,10
  80a928:	000f883a 	mov	r7,zero
  80a92c:	080babc0 	call	80babc <__udivdi3>
  80a930:	1021883a 	mov	r16,r2
  80a934:	10c4b03a 	or	r2,r2,r3
  80a938:	1823883a 	mov	r17,r3
  80a93c:	103fef1e 	bne	r2,zero,80a8fc <__alt_mem_onchip_mem+0xff8028fc>
  80a940:	dc402417 	ldw	r17,144(sp)
  80a944:	dc002517 	ldw	r16,148(sp)
  80a948:	9013883a 	mov	r9,r18
  80a94c:	9811883a 	mov	r8,r19
  80a950:	da801e17 	ldw	r10,120(sp)
  80a954:	5567c83a 	sub	r19,r10,r21
  80a958:	003ede06 	br	80a4d4 <__alt_mem_onchip_mem+0xff8024d4>
  80a95c:	38803fcc 	andi	r2,r7,255
  80a960:	1080201c 	xori	r2,r2,128
  80a964:	10bfe004 	addi	r2,r2,-128
  80a968:	1002371e 	bne	r2,zero,80b248 <___vfiprintf_internal_r+0x1174>
  80a96c:	01000044 	movi	r4,1
  80a970:	01c00804 	movi	r7,32
  80a974:	80c00007 	ldb	r3,0(r16)
  80a978:	003e3506 	br	80a250 <__alt_mem_onchip_mem+0xff802250>
  80a97c:	a5000054 	ori	r20,r20,1
  80a980:	80c00007 	ldb	r3,0(r16)
  80a984:	003e3206 	br	80a250 <__alt_mem_onchip_mem+0xff802250>
  80a988:	a5002014 	ori	r20,r20,128
  80a98c:	80c00007 	ldb	r3,0(r16)
  80a990:	003e2f06 	br	80a250 <__alt_mem_onchip_mem+0xff802250>
  80a994:	8015883a 	mov	r10,r16
  80a998:	0023883a 	mov	r17,zero
  80a99c:	18bff404 	addi	r2,r3,-48
  80a9a0:	50c00007 	ldb	r3,0(r10)
  80a9a4:	8c4002a4 	muli	r17,r17,10
  80a9a8:	84000044 	addi	r16,r16,1
  80a9ac:	8015883a 	mov	r10,r16
  80a9b0:	1463883a 	add	r17,r2,r17
  80a9b4:	18bff404 	addi	r2,r3,-48
  80a9b8:	30bff92e 	bgeu	r6,r2,80a9a0 <__alt_mem_onchip_mem+0xff8029a0>
  80a9bc:	003e2506 	br	80a254 <__alt_mem_onchip_mem+0xff802254>
  80a9c0:	21003fcc 	andi	r4,r4,255
  80a9c4:	2002d41e 	bne	r4,zero,80b518 <___vfiprintf_internal_r+0x1444>
  80a9c8:	a5000414 	ori	r20,r20,16
  80a9cc:	a080080c 	andi	r2,r20,32
  80a9d0:	103fb51e 	bne	r2,zero,80a8a8 <__alt_mem_onchip_mem+0xff8028a8>
  80a9d4:	a080040c 	andi	r2,r20,16
  80a9d8:	1001f826 	beq	r2,zero,80b1bc <___vfiprintf_internal_r+0x10e8>
  80a9dc:	da802217 	ldw	r10,136(sp)
  80a9e0:	54800017 	ldw	r18,0(r10)
  80a9e4:	52800104 	addi	r10,r10,4
  80a9e8:	da802215 	stw	r10,136(sp)
  80a9ec:	9027d7fa 	srai	r19,r18,31
  80a9f0:	9805883a 	mov	r2,r19
  80a9f4:	003fb206 	br	80a8c0 <__alt_mem_onchip_mem+0xff8028c0>
  80a9f8:	21003fcc 	andi	r4,r4,255
  80a9fc:	2002c41e 	bne	r4,zero,80b510 <___vfiprintf_internal_r+0x143c>
  80aa00:	a5000414 	ori	r20,r20,16
  80aa04:	a080080c 	andi	r2,r20,32
  80aa08:	103f5f1e 	bne	r2,zero,80a788 <__alt_mem_onchip_mem+0xff802788>
  80aa0c:	a080040c 	andi	r2,r20,16
  80aa10:	10020f26 	beq	r2,zero,80b250 <___vfiprintf_internal_r+0x117c>
  80aa14:	da802217 	ldw	r10,136(sp)
  80aa18:	d8001d85 	stb	zero,118(sp)
  80aa1c:	0027883a 	mov	r19,zero
  80aa20:	50800104 	addi	r2,r10,4
  80aa24:	54800017 	ldw	r18,0(r10)
  80aa28:	48021116 	blt	r9,zero,80b270 <___vfiprintf_internal_r+0x119c>
  80aa2c:	00ffdfc4 	movi	r3,-129
  80aa30:	d8802215 	stw	r2,136(sp)
  80aa34:	a0e8703a 	and	r20,r20,r3
  80aa38:	903f5e1e 	bne	r18,zero,80a7b4 <__alt_mem_onchip_mem+0xff8027b4>
  80aa3c:	0039883a 	mov	fp,zero
  80aa40:	4802a626 	beq	r9,zero,80b4dc <___vfiprintf_internal_r+0x1408>
  80aa44:	0025883a 	mov	r18,zero
  80aa48:	0027883a 	mov	r19,zero
  80aa4c:	003f5a06 	br	80a7b8 <__alt_mem_onchip_mem+0xff8027b8>
  80aa50:	21003fcc 	andi	r4,r4,255
  80aa54:	20029f1e 	bne	r4,zero,80b4d4 <___vfiprintf_internal_r+0x1400>
  80aa58:	a5000414 	ori	r20,r20,16
  80aa5c:	a080080c 	andi	r2,r20,32
  80aa60:	10005e1e 	bne	r2,zero,80abdc <___vfiprintf_internal_r+0xb08>
  80aa64:	a080040c 	andi	r2,r20,16
  80aa68:	1001a21e 	bne	r2,zero,80b0f4 <___vfiprintf_internal_r+0x1020>
  80aa6c:	a080100c 	andi	r2,r20,64
  80aa70:	d8001d85 	stb	zero,118(sp)
  80aa74:	da802217 	ldw	r10,136(sp)
  80aa78:	1002231e 	bne	r2,zero,80b308 <___vfiprintf_internal_r+0x1234>
  80aa7c:	50800104 	addi	r2,r10,4
  80aa80:	54800017 	ldw	r18,0(r10)
  80aa84:	0027883a 	mov	r19,zero
  80aa88:	4801a00e 	bge	r9,zero,80b10c <___vfiprintf_internal_r+0x1038>
  80aa8c:	d8802215 	stw	r2,136(sp)
  80aa90:	0039883a 	mov	fp,zero
  80aa94:	94c4b03a 	or	r2,r18,r19
  80aa98:	103f901e 	bne	r2,zero,80a8dc <__alt_mem_onchip_mem+0xff8028dc>
  80aa9c:	00800044 	movi	r2,1
  80aaa0:	10803fcc 	andi	r2,r2,255
  80aaa4:	00c00044 	movi	r3,1
  80aaa8:	10c05926 	beq	r2,r3,80ac10 <___vfiprintf_internal_r+0xb3c>
  80aaac:	00c00084 	movi	r3,2
  80aab0:	10ffe41e 	bne	r2,r3,80aa44 <__alt_mem_onchip_mem+0xff802a44>
  80aab4:	0025883a 	mov	r18,zero
  80aab8:	0027883a 	mov	r19,zero
  80aabc:	00013d06 	br	80afb4 <___vfiprintf_internal_r+0xee0>
  80aac0:	21003fcc 	andi	r4,r4,255
  80aac4:	2002811e 	bne	r4,zero,80b4cc <___vfiprintf_internal_r+0x13f8>
  80aac8:	00802074 	movhi	r2,129
  80aacc:	108bf204 	addi	r2,r2,12232
  80aad0:	d8802615 	stw	r2,152(sp)
  80aad4:	a080080c 	andi	r2,r20,32
  80aad8:	103f561e 	bne	r2,zero,80a834 <__alt_mem_onchip_mem+0xff802834>
  80aadc:	a080040c 	andi	r2,r20,16
  80aae0:	1001d126 	beq	r2,zero,80b228 <___vfiprintf_internal_r+0x1154>
  80aae4:	da802217 	ldw	r10,136(sp)
  80aae8:	0027883a 	mov	r19,zero
  80aaec:	54800017 	ldw	r18,0(r10)
  80aaf0:	52800104 	addi	r10,r10,4
  80aaf4:	da802215 	stw	r10,136(sp)
  80aaf8:	003f5306 	br	80a848 <__alt_mem_onchip_mem+0xff802848>
  80aafc:	da802217 	ldw	r10,136(sp)
  80ab00:	d8001d85 	stb	zero,118(sp)
  80ab04:	55400017 	ldw	r21,0(r10)
  80ab08:	50c00104 	addi	r3,r10,4
  80ab0c:	a8024226 	beq	r21,zero,80b418 <___vfiprintf_internal_r+0x1344>
  80ab10:	48021816 	blt	r9,zero,80b374 <___vfiprintf_internal_r+0x12a0>
  80ab14:	480d883a 	mov	r6,r9
  80ab18:	000b883a 	mov	r5,zero
  80ab1c:	a809883a 	mov	r4,r21
  80ab20:	d8c02a15 	stw	r3,168(sp)
  80ab24:	da002b15 	stw	r8,172(sp)
  80ab28:	da402c15 	stw	r9,176(sp)
  80ab2c:	08084900 	call	808490 <memchr>
  80ab30:	d8c02a17 	ldw	r3,168(sp)
  80ab34:	da002b17 	ldw	r8,172(sp)
  80ab38:	da402c17 	ldw	r9,176(sp)
  80ab3c:	10024826 	beq	r2,zero,80b460 <___vfiprintf_internal_r+0x138c>
  80ab40:	1567c83a 	sub	r19,r2,r21
  80ab44:	df001d83 	ldbu	fp,118(sp)
  80ab48:	d8c02215 	stw	r3,136(sp)
  80ab4c:	0013883a 	mov	r9,zero
  80ab50:	003e6006 	br	80a4d4 <__alt_mem_onchip_mem+0xff8024d4>
  80ab54:	21003fcc 	andi	r4,r4,255
  80ab58:	203fc026 	beq	r4,zero,80aa5c <__alt_mem_onchip_mem+0xff802a5c>
  80ab5c:	d9c01d85 	stb	r7,118(sp)
  80ab60:	003fbe06 	br	80aa5c <__alt_mem_onchip_mem+0xff802a5c>
  80ab64:	da802217 	ldw	r10,136(sp)
  80ab68:	54400017 	ldw	r17,0(r10)
  80ab6c:	50800104 	addi	r2,r10,4
  80ab70:	883e3b16 	blt	r17,zero,80a460 <__alt_mem_onchip_mem+0xff802460>
  80ab74:	d8802215 	stw	r2,136(sp)
  80ab78:	80c00007 	ldb	r3,0(r16)
  80ab7c:	003db406 	br	80a250 <__alt_mem_onchip_mem+0xff802250>
  80ab80:	01000044 	movi	r4,1
  80ab84:	01c00ac4 	movi	r7,43
  80ab88:	80c00007 	ldb	r3,0(r16)
  80ab8c:	003db006 	br	80a250 <__alt_mem_onchip_mem+0xff802250>
  80ab90:	80c00007 	ldb	r3,0(r16)
  80ab94:	82800044 	addi	r10,r16,1
  80ab98:	1b423c26 	beq	r3,r13,80b48c <___vfiprintf_internal_r+0x13b8>
  80ab9c:	18bff404 	addi	r2,r3,-48
  80aba0:	0013883a 	mov	r9,zero
  80aba4:	30822b36 	bltu	r6,r2,80b454 <___vfiprintf_internal_r+0x1380>
  80aba8:	50c00007 	ldb	r3,0(r10)
  80abac:	4a4002a4 	muli	r9,r9,10
  80abb0:	54000044 	addi	r16,r10,1
  80abb4:	8015883a 	mov	r10,r16
  80abb8:	4893883a 	add	r9,r9,r2
  80abbc:	18bff404 	addi	r2,r3,-48
  80abc0:	30bff92e 	bgeu	r6,r2,80aba8 <__alt_mem_onchip_mem+0xff802ba8>
  80abc4:	483da30e 	bge	r9,zero,80a254 <__alt_mem_onchip_mem+0xff802254>
  80abc8:	027fffc4 	movi	r9,-1
  80abcc:	003da106 	br	80a254 <__alt_mem_onchip_mem+0xff802254>
  80abd0:	a5001014 	ori	r20,r20,64
  80abd4:	80c00007 	ldb	r3,0(r16)
  80abd8:	003d9d06 	br	80a250 <__alt_mem_onchip_mem+0xff802250>
  80abdc:	da802217 	ldw	r10,136(sp)
  80abe0:	d8001d85 	stb	zero,118(sp)
  80abe4:	50c00204 	addi	r3,r10,8
  80abe8:	54800017 	ldw	r18,0(r10)
  80abec:	54c00117 	ldw	r19,4(r10)
  80abf0:	4801ca16 	blt	r9,zero,80b31c <___vfiprintf_internal_r+0x1248>
  80abf4:	013fdfc4 	movi	r4,-129
  80abf8:	94c4b03a 	or	r2,r18,r19
  80abfc:	d8c02215 	stw	r3,136(sp)
  80ac00:	a128703a 	and	r20,r20,r4
  80ac04:	0039883a 	mov	fp,zero
  80ac08:	103f341e 	bne	r2,zero,80a8dc <__alt_mem_onchip_mem+0xff8028dc>
  80ac0c:	483e2e26 	beq	r9,zero,80a4c8 <__alt_mem_onchip_mem+0xff8024c8>
  80ac10:	0025883a 	mov	r18,zero
  80ac14:	94800c04 	addi	r18,r18,48
  80ac18:	dc8019c5 	stb	r18,103(sp)
  80ac1c:	dcc02717 	ldw	r19,156(sp)
  80ac20:	dd4019c4 	addi	r21,sp,103
  80ac24:	003e2b06 	br	80a4d4 <__alt_mem_onchip_mem+0xff8024d4>
  80ac28:	21003fcc 	andi	r4,r4,255
  80ac2c:	2002361e 	bne	r4,zero,80b508 <___vfiprintf_internal_r+0x1434>
  80ac30:	1801c126 	beq	r3,zero,80b338 <___vfiprintf_internal_r+0x1264>
  80ac34:	04800044 	movi	r18,1
  80ac38:	d8c01005 	stb	r3,64(sp)
  80ac3c:	d8001d85 	stb	zero,118(sp)
  80ac40:	9027883a 	mov	r19,r18
  80ac44:	dd401004 	addi	r21,sp,64
  80ac48:	003f1106 	br	80a890 <__alt_mem_onchip_mem+0xff802890>
  80ac4c:	d9402117 	ldw	r5,132(sp)
  80ac50:	d9002017 	ldw	r4,128(sp)
  80ac54:	d9801a04 	addi	r6,sp,104
  80ac58:	d9c02b15 	stw	r7,172(sp)
  80ac5c:	dbc02a15 	stw	r15,168(sp)
  80ac60:	0809fc00 	call	809fc0 <__sprint_r.part.0>
  80ac64:	d9c02b17 	ldw	r7,172(sp)
  80ac68:	dbc02a17 	ldw	r15,168(sp)
  80ac6c:	10006d1e 	bne	r2,zero,80ae24 <___vfiprintf_internal_r+0xd50>
  80ac70:	d9801b17 	ldw	r6,108(sp)
  80ac74:	d8801c17 	ldw	r2,112(sp)
  80ac78:	d811883a 	mov	r8,sp
  80ac7c:	31400044 	addi	r5,r6,1
  80ac80:	003e3306 	br	80a550 <__alt_mem_onchip_mem+0xff802550>
  80ac84:	d9401b17 	ldw	r5,108(sp)
  80ac88:	d8801c17 	ldw	r2,112(sp)
  80ac8c:	29000044 	addi	r4,r5,1
  80ac90:	d8c01d87 	ldb	r3,118(sp)
  80ac94:	183e4d26 	beq	r3,zero,80a5cc <__alt_mem_onchip_mem+0xff8025cc>
  80ac98:	00c00044 	movi	r3,1
  80ac9c:	d9401d84 	addi	r5,sp,118
  80aca0:	10c5883a 	add	r2,r2,r3
  80aca4:	41400015 	stw	r5,0(r8)
  80aca8:	40c00115 	stw	r3,4(r8)
  80acac:	d8801c15 	stw	r2,112(sp)
  80acb0:	d9001b15 	stw	r4,108(sp)
  80acb4:	014001c4 	movi	r5,7
  80acb8:	2900a90e 	bge	r5,r4,80af60 <___vfiprintf_internal_r+0xe8c>
  80acbc:	1000da1e 	bne	r2,zero,80b028 <___vfiprintf_internal_r+0xf54>
  80acc0:	7000ab1e 	bne	r14,zero,80af70 <___vfiprintf_internal_r+0xe9c>
  80acc4:	000b883a 	mov	r5,zero
  80acc8:	1809883a 	mov	r4,r3
  80accc:	d811883a 	mov	r8,sp
  80acd0:	00c02004 	movi	r3,128
  80acd4:	e0fe4d26 	beq	fp,r3,80a60c <__alt_mem_onchip_mem+0xff80260c>
  80acd8:	4cf9c83a 	sub	fp,r9,r19
  80acdc:	073e7b0e 	bge	zero,fp,80a6cc <__alt_mem_onchip_mem+0xff8026cc>
  80ace0:	01c00404 	movi	r7,16
  80ace4:	3f01900e 	bge	r7,fp,80b328 <___vfiprintf_internal_r+0x1254>
  80ace8:	00c02074 	movhi	r3,129
  80acec:	18ccf704 	addi	r3,r3,13276
  80acf0:	d8c02415 	stw	r3,144(sp)
  80acf4:	034001c4 	movi	r13,7
  80acf8:	00000506 	br	80ad10 <___vfiprintf_internal_r+0xc3c>
  80acfc:	29000084 	addi	r4,r5,2
  80ad00:	42000204 	addi	r8,r8,8
  80ad04:	180b883a 	mov	r5,r3
  80ad08:	e73ffc04 	addi	fp,fp,-16
  80ad0c:	3f000d0e 	bge	r7,fp,80ad44 <___vfiprintf_internal_r+0xc70>
  80ad10:	10800404 	addi	r2,r2,16
  80ad14:	28c00044 	addi	r3,r5,1
  80ad18:	45c00015 	stw	r23,0(r8)
  80ad1c:	41c00115 	stw	r7,4(r8)
  80ad20:	d8801c15 	stw	r2,112(sp)
  80ad24:	d8c01b15 	stw	r3,108(sp)
  80ad28:	68fff40e 	bge	r13,r3,80acfc <__alt_mem_onchip_mem+0xff802cfc>
  80ad2c:	1000101e 	bne	r2,zero,80ad70 <___vfiprintf_internal_r+0xc9c>
  80ad30:	e73ffc04 	addi	fp,fp,-16
  80ad34:	01000044 	movi	r4,1
  80ad38:	000b883a 	mov	r5,zero
  80ad3c:	d811883a 	mov	r8,sp
  80ad40:	3f3ff316 	blt	r7,fp,80ad10 <__alt_mem_onchip_mem+0xff802d10>
  80ad44:	da802417 	ldw	r10,144(sp)
  80ad48:	1705883a 	add	r2,r2,fp
  80ad4c:	47000115 	stw	fp,4(r8)
  80ad50:	42800015 	stw	r10,0(r8)
  80ad54:	d8801c15 	stw	r2,112(sp)
  80ad58:	d9001b15 	stw	r4,108(sp)
  80ad5c:	00c001c4 	movi	r3,7
  80ad60:	19003616 	blt	r3,r4,80ae3c <___vfiprintf_internal_r+0xd68>
  80ad64:	42000204 	addi	r8,r8,8
  80ad68:	21000044 	addi	r4,r4,1
  80ad6c:	003e5706 	br	80a6cc <__alt_mem_onchip_mem+0xff8026cc>
  80ad70:	d9402117 	ldw	r5,132(sp)
  80ad74:	d9002017 	ldw	r4,128(sp)
  80ad78:	d9801a04 	addi	r6,sp,104
  80ad7c:	d9c02b15 	stw	r7,172(sp)
  80ad80:	db402a15 	stw	r13,168(sp)
  80ad84:	0809fc00 	call	809fc0 <__sprint_r.part.0>
  80ad88:	d9c02b17 	ldw	r7,172(sp)
  80ad8c:	db402a17 	ldw	r13,168(sp)
  80ad90:	1000241e 	bne	r2,zero,80ae24 <___vfiprintf_internal_r+0xd50>
  80ad94:	d9401b17 	ldw	r5,108(sp)
  80ad98:	d8801c17 	ldw	r2,112(sp)
  80ad9c:	d811883a 	mov	r8,sp
  80ada0:	29000044 	addi	r4,r5,1
  80ada4:	003fd806 	br	80ad08 <__alt_mem_onchip_mem+0xff802d08>
  80ada8:	d9401b17 	ldw	r5,108(sp)
  80adac:	00c02074 	movhi	r3,129
  80adb0:	18ccfb04 	addi	r3,r3,13292
  80adb4:	d8c02415 	stw	r3,144(sp)
  80adb8:	29400044 	addi	r5,r5,1
  80adbc:	d8c02417 	ldw	r3,144(sp)
  80adc0:	14c5883a 	add	r2,r2,r19
  80adc4:	44c00115 	stw	r19,4(r8)
  80adc8:	40c00015 	stw	r3,0(r8)
  80adcc:	d8801c15 	stw	r2,112(sp)
  80add0:	d9401b15 	stw	r5,108(sp)
  80add4:	00c001c4 	movi	r3,7
  80add8:	1940070e 	bge	r3,r5,80adf8 <___vfiprintf_internal_r+0xd24>
  80addc:	103e4826 	beq	r2,zero,80a700 <__alt_mem_onchip_mem+0xff802700>
  80ade0:	d9402117 	ldw	r5,132(sp)
  80ade4:	d9002017 	ldw	r4,128(sp)
  80ade8:	d9801a04 	addi	r6,sp,104
  80adec:	0809fc00 	call	809fc0 <__sprint_r.part.0>
  80adf0:	10000c1e 	bne	r2,zero,80ae24 <___vfiprintf_internal_r+0xd50>
  80adf4:	d8801c17 	ldw	r2,112(sp)
  80adf8:	8c80010e 	bge	r17,r18,80ae00 <___vfiprintf_internal_r+0xd2c>
  80adfc:	9023883a 	mov	r17,r18
  80ae00:	da802317 	ldw	r10,140(sp)
  80ae04:	5455883a 	add	r10,r10,r17
  80ae08:	da802315 	stw	r10,140(sp)
  80ae0c:	103e4126 	beq	r2,zero,80a714 <__alt_mem_onchip_mem+0xff802714>
  80ae10:	d9402117 	ldw	r5,132(sp)
  80ae14:	d9002017 	ldw	r4,128(sp)
  80ae18:	d9801a04 	addi	r6,sp,104
  80ae1c:	0809fc00 	call	809fc0 <__sprint_r.part.0>
  80ae20:	103e3c26 	beq	r2,zero,80a714 <__alt_mem_onchip_mem+0xff802714>
  80ae24:	dd002117 	ldw	r20,132(sp)
  80ae28:	a080030b 	ldhu	r2,12(r20)
  80ae2c:	1080100c 	andi	r2,r2,64
  80ae30:	1001231e 	bne	r2,zero,80b2c0 <___vfiprintf_internal_r+0x11ec>
  80ae34:	d8802317 	ldw	r2,140(sp)
  80ae38:	003d7b06 	br	80a428 <__alt_mem_onchip_mem+0xff802428>
  80ae3c:	1000991e 	bne	r2,zero,80b0a4 <___vfiprintf_internal_r+0xfd0>
  80ae40:	00c00044 	movi	r3,1
  80ae44:	9805883a 	mov	r2,r19
  80ae48:	dd400015 	stw	r21,0(sp)
  80ae4c:	dcc00115 	stw	r19,4(sp)
  80ae50:	dcc01c15 	stw	r19,112(sp)
  80ae54:	d8c01b15 	stw	r3,108(sp)
  80ae58:	d811883a 	mov	r8,sp
  80ae5c:	42000204 	addi	r8,r8,8
  80ae60:	a2c0010c 	andi	r11,r20,4
  80ae64:	583fe426 	beq	r11,zero,80adf8 <__alt_mem_onchip_mem+0xff802df8>
  80ae68:	8ca7c83a 	sub	r19,r17,r18
  80ae6c:	04ffe20e 	bge	zero,r19,80adf8 <__alt_mem_onchip_mem+0xff802df8>
  80ae70:	01c00404 	movi	r7,16
  80ae74:	3cffcc0e 	bge	r7,r19,80ada8 <__alt_mem_onchip_mem+0xff802da8>
  80ae78:	02802074 	movhi	r10,129
  80ae7c:	528cfb04 	addi	r10,r10,13292
  80ae80:	d9001b17 	ldw	r4,108(sp)
  80ae84:	da802415 	stw	r10,144(sp)
  80ae88:	382b883a 	mov	r21,r7
  80ae8c:	050001c4 	movi	r20,7
  80ae90:	df002017 	ldw	fp,128(sp)
  80ae94:	00000506 	br	80aeac <___vfiprintf_internal_r+0xdd8>
  80ae98:	21400084 	addi	r5,r4,2
  80ae9c:	42000204 	addi	r8,r8,8
  80aea0:	1809883a 	mov	r4,r3
  80aea4:	9cfffc04 	addi	r19,r19,-16
  80aea8:	acffc40e 	bge	r21,r19,80adbc <__alt_mem_onchip_mem+0xff802dbc>
  80aeac:	10800404 	addi	r2,r2,16
  80aeb0:	20c00044 	addi	r3,r4,1
  80aeb4:	45800015 	stw	r22,0(r8)
  80aeb8:	45400115 	stw	r21,4(r8)
  80aebc:	d8801c15 	stw	r2,112(sp)
  80aec0:	d8c01b15 	stw	r3,108(sp)
  80aec4:	a0fff40e 	bge	r20,r3,80ae98 <__alt_mem_onchip_mem+0xff802e98>
  80aec8:	1000041e 	bne	r2,zero,80aedc <___vfiprintf_internal_r+0xe08>
  80aecc:	01400044 	movi	r5,1
  80aed0:	0009883a 	mov	r4,zero
  80aed4:	d811883a 	mov	r8,sp
  80aed8:	003ff206 	br	80aea4 <__alt_mem_onchip_mem+0xff802ea4>
  80aedc:	d9402117 	ldw	r5,132(sp)
  80aee0:	d9801a04 	addi	r6,sp,104
  80aee4:	e009883a 	mov	r4,fp
  80aee8:	0809fc00 	call	809fc0 <__sprint_r.part.0>
  80aeec:	103fcd1e 	bne	r2,zero,80ae24 <__alt_mem_onchip_mem+0xff802e24>
  80aef0:	d9001b17 	ldw	r4,108(sp)
  80aef4:	d8801c17 	ldw	r2,112(sp)
  80aef8:	d811883a 	mov	r8,sp
  80aefc:	21400044 	addi	r5,r4,1
  80af00:	003fe806 	br	80aea4 <__alt_mem_onchip_mem+0xff802ea4>
  80af04:	d9402117 	ldw	r5,132(sp)
  80af08:	d9002017 	ldw	r4,128(sp)
  80af0c:	d9801a04 	addi	r6,sp,104
  80af10:	d9c02b15 	stw	r7,172(sp)
  80af14:	db402a15 	stw	r13,168(sp)
  80af18:	0809fc00 	call	809fc0 <__sprint_r.part.0>
  80af1c:	d9c02b17 	ldw	r7,172(sp)
  80af20:	db402a17 	ldw	r13,168(sp)
  80af24:	103fbf1e 	bne	r2,zero,80ae24 <__alt_mem_onchip_mem+0xff802e24>
  80af28:	d9401b17 	ldw	r5,108(sp)
  80af2c:	d8801c17 	ldw	r2,112(sp)
  80af30:	d811883a 	mov	r8,sp
  80af34:	29800044 	addi	r6,r5,1
  80af38:	003dc406 	br	80a64c <__alt_mem_onchip_mem+0xff80264c>
  80af3c:	1000d21e 	bne	r2,zero,80b288 <___vfiprintf_internal_r+0x11b4>
  80af40:	d8c01d87 	ldb	r3,118(sp)
  80af44:	18009526 	beq	r3,zero,80b19c <___vfiprintf_internal_r+0x10c8>
  80af48:	00800044 	movi	r2,1
  80af4c:	d8c01d84 	addi	r3,sp,118
  80af50:	1009883a 	mov	r4,r2
  80af54:	d8c00015 	stw	r3,0(sp)
  80af58:	d8800115 	stw	r2,4(sp)
  80af5c:	d811883a 	mov	r8,sp
  80af60:	200b883a 	mov	r5,r4
  80af64:	42000204 	addi	r8,r8,8
  80af68:	21000044 	addi	r4,r4,1
  80af6c:	003d9706 	br	80a5cc <__alt_mem_onchip_mem+0xff8025cc>
  80af70:	d9001d04 	addi	r4,sp,116
  80af74:	00800084 	movi	r2,2
  80af78:	d9000015 	stw	r4,0(sp)
  80af7c:	d8800115 	stw	r2,4(sp)
  80af80:	1809883a 	mov	r4,r3
  80af84:	d811883a 	mov	r8,sp
  80af88:	200b883a 	mov	r5,r4
  80af8c:	42000204 	addi	r8,r8,8
  80af90:	21000044 	addi	r4,r4,1
  80af94:	003f4e06 	br	80acd0 <__alt_mem_onchip_mem+0xff802cd0>
  80af98:	d8001d85 	stb	zero,118(sp)
  80af9c:	48005016 	blt	r9,zero,80b0e0 <___vfiprintf_internal_r+0x100c>
  80afa0:	00ffdfc4 	movi	r3,-129
  80afa4:	94c4b03a 	or	r2,r18,r19
  80afa8:	a0e8703a 	and	r20,r20,r3
  80afac:	103d4426 	beq	r2,zero,80a4c0 <__alt_mem_onchip_mem+0xff8024c0>
  80afb0:	0039883a 	mov	fp,zero
  80afb4:	d9002617 	ldw	r4,152(sp)
  80afb8:	dd401a04 	addi	r21,sp,104
  80afbc:	908003cc 	andi	r2,r18,15
  80afc0:	9806973a 	slli	r3,r19,28
  80afc4:	2085883a 	add	r2,r4,r2
  80afc8:	9024d13a 	srli	r18,r18,4
  80afcc:	10800003 	ldbu	r2,0(r2)
  80afd0:	9826d13a 	srli	r19,r19,4
  80afd4:	ad7fffc4 	addi	r21,r21,-1
  80afd8:	1ca4b03a 	or	r18,r3,r18
  80afdc:	a8800005 	stb	r2,0(r21)
  80afe0:	94c4b03a 	or	r2,r18,r19
  80afe4:	103ff51e 	bne	r2,zero,80afbc <__alt_mem_onchip_mem+0xff802fbc>
  80afe8:	003e5906 	br	80a950 <__alt_mem_onchip_mem+0xff802950>
  80afec:	d9402117 	ldw	r5,132(sp)
  80aff0:	d9002017 	ldw	r4,128(sp)
  80aff4:	d9801a04 	addi	r6,sp,104
  80aff8:	0809fc00 	call	809fc0 <__sprint_r.part.0>
  80affc:	103f891e 	bne	r2,zero,80ae24 <__alt_mem_onchip_mem+0xff802e24>
  80b000:	d8801c17 	ldw	r2,112(sp)
  80b004:	d811883a 	mov	r8,sp
  80b008:	003f9506 	br	80ae60 <__alt_mem_onchip_mem+0xff802e60>
  80b00c:	d9402117 	ldw	r5,132(sp)
  80b010:	d9002017 	ldw	r4,128(sp)
  80b014:	d9801a04 	addi	r6,sp,104
  80b018:	0809fc00 	call	809fc0 <__sprint_r.part.0>
  80b01c:	103f811e 	bne	r2,zero,80ae24 <__alt_mem_onchip_mem+0xff802e24>
  80b020:	d811883a 	mov	r8,sp
  80b024:	003ced06 	br	80a3dc <__alt_mem_onchip_mem+0xff8023dc>
  80b028:	d9402117 	ldw	r5,132(sp)
  80b02c:	d9002017 	ldw	r4,128(sp)
  80b030:	d9801a04 	addi	r6,sp,104
  80b034:	da402c15 	stw	r9,176(sp)
  80b038:	db802a15 	stw	r14,168(sp)
  80b03c:	0809fc00 	call	809fc0 <__sprint_r.part.0>
  80b040:	da402c17 	ldw	r9,176(sp)
  80b044:	db802a17 	ldw	r14,168(sp)
  80b048:	103f761e 	bne	r2,zero,80ae24 <__alt_mem_onchip_mem+0xff802e24>
  80b04c:	d9401b17 	ldw	r5,108(sp)
  80b050:	d8801c17 	ldw	r2,112(sp)
  80b054:	d811883a 	mov	r8,sp
  80b058:	29000044 	addi	r4,r5,1
  80b05c:	003d5b06 	br	80a5cc <__alt_mem_onchip_mem+0xff8025cc>
  80b060:	d9402117 	ldw	r5,132(sp)
  80b064:	d9002017 	ldw	r4,128(sp)
  80b068:	d9801a04 	addi	r6,sp,104
  80b06c:	da402c15 	stw	r9,176(sp)
  80b070:	0809fc00 	call	809fc0 <__sprint_r.part.0>
  80b074:	da402c17 	ldw	r9,176(sp)
  80b078:	103f6a1e 	bne	r2,zero,80ae24 <__alt_mem_onchip_mem+0xff802e24>
  80b07c:	d9401b17 	ldw	r5,108(sp)
  80b080:	d8801c17 	ldw	r2,112(sp)
  80b084:	d811883a 	mov	r8,sp
  80b088:	29000044 	addi	r4,r5,1
  80b08c:	003f1006 	br	80acd0 <__alt_mem_onchip_mem+0xff802cd0>
  80b090:	1000c31e 	bne	r2,zero,80b3a0 <___vfiprintf_internal_r+0x12cc>
  80b094:	01000044 	movi	r4,1
  80b098:	000b883a 	mov	r5,zero
  80b09c:	d811883a 	mov	r8,sp
  80b0a0:	003f0d06 	br	80acd8 <__alt_mem_onchip_mem+0xff802cd8>
  80b0a4:	d9402117 	ldw	r5,132(sp)
  80b0a8:	d9002017 	ldw	r4,128(sp)
  80b0ac:	d9801a04 	addi	r6,sp,104
  80b0b0:	0809fc00 	call	809fc0 <__sprint_r.part.0>
  80b0b4:	103f5b1e 	bne	r2,zero,80ae24 <__alt_mem_onchip_mem+0xff802e24>
  80b0b8:	d9001b17 	ldw	r4,108(sp)
  80b0bc:	d8801c17 	ldw	r2,112(sp)
  80b0c0:	d811883a 	mov	r8,sp
  80b0c4:	21000044 	addi	r4,r4,1
  80b0c8:	003d8006 	br	80a6cc <__alt_mem_onchip_mem+0xff8026cc>
  80b0cc:	01002074 	movhi	r4,129
  80b0d0:	210bf704 	addi	r4,r4,12252
  80b0d4:	d9002615 	stw	r4,152(sp)
  80b0d8:	d8c02215 	stw	r3,136(sp)
  80b0dc:	1029883a 	mov	r20,r2
  80b0e0:	94c4b03a 	or	r2,r18,r19
  80b0e4:	103fb21e 	bne	r2,zero,80afb0 <__alt_mem_onchip_mem+0xff802fb0>
  80b0e8:	0039883a 	mov	fp,zero
  80b0ec:	00800084 	movi	r2,2
  80b0f0:	003e6b06 	br	80aaa0 <__alt_mem_onchip_mem+0xff802aa0>
  80b0f4:	da802217 	ldw	r10,136(sp)
  80b0f8:	d8001d85 	stb	zero,118(sp)
  80b0fc:	0027883a 	mov	r19,zero
  80b100:	50800104 	addi	r2,r10,4
  80b104:	54800017 	ldw	r18,0(r10)
  80b108:	483e6016 	blt	r9,zero,80aa8c <__alt_mem_onchip_mem+0xff802a8c>
  80b10c:	00ffdfc4 	movi	r3,-129
  80b110:	d8802215 	stw	r2,136(sp)
  80b114:	a0e8703a 	and	r20,r20,r3
  80b118:	0039883a 	mov	fp,zero
  80b11c:	903ebb26 	beq	r18,zero,80ac0c <__alt_mem_onchip_mem+0xff802c0c>
  80b120:	00800244 	movi	r2,9
  80b124:	14bdee36 	bltu	r2,r18,80a8e0 <__alt_mem_onchip_mem+0xff8028e0>
  80b128:	003eba06 	br	80ac14 <__alt_mem_onchip_mem+0xff802c14>
  80b12c:	00800c04 	movi	r2,48
  80b130:	d8c01d45 	stb	r3,117(sp)
  80b134:	d8801d05 	stb	r2,116(sp)
  80b138:	d8001d85 	stb	zero,118(sp)
  80b13c:	a0c00094 	ori	r3,r20,2
  80b140:	4800a916 	blt	r9,zero,80b3e8 <___vfiprintf_internal_r+0x1314>
  80b144:	00bfdfc4 	movi	r2,-129
  80b148:	a096703a 	and	r11,r20,r2
  80b14c:	5d000094 	ori	r20,r11,2
  80b150:	0039883a 	mov	fp,zero
  80b154:	003f9706 	br	80afb4 <__alt_mem_onchip_mem+0xff802fb4>
  80b158:	8025883a 	mov	r18,r16
  80b15c:	003c2e06 	br	80a218 <__alt_mem_onchip_mem+0xff802218>
  80b160:	00802074 	movhi	r2,129
  80b164:	108bf704 	addi	r2,r2,12252
  80b168:	0039883a 	mov	fp,zero
  80b16c:	d8802615 	stw	r2,152(sp)
  80b170:	003f9006 	br	80afb4 <__alt_mem_onchip_mem+0xff802fb4>
  80b174:	04a5c83a 	sub	r18,zero,r18
  80b178:	07000b44 	movi	fp,45
  80b17c:	9004c03a 	cmpne	r2,r18,zero
  80b180:	04e7c83a 	sub	r19,zero,r19
  80b184:	df001d85 	stb	fp,118(sp)
  80b188:	98a7c83a 	sub	r19,r19,r2
  80b18c:	48009f16 	blt	r9,zero,80b40c <___vfiprintf_internal_r+0x1338>
  80b190:	00bfdfc4 	movi	r2,-129
  80b194:	a0a8703a 	and	r20,r20,r2
  80b198:	003dd006 	br	80a8dc <__alt_mem_onchip_mem+0xff8028dc>
  80b19c:	70004c26 	beq	r14,zero,80b2d0 <___vfiprintf_internal_r+0x11fc>
  80b1a0:	00800084 	movi	r2,2
  80b1a4:	d8c01d04 	addi	r3,sp,116
  80b1a8:	d8c00015 	stw	r3,0(sp)
  80b1ac:	d8800115 	stw	r2,4(sp)
  80b1b0:	01000044 	movi	r4,1
  80b1b4:	d811883a 	mov	r8,sp
  80b1b8:	003f7306 	br	80af88 <__alt_mem_onchip_mem+0xff802f88>
  80b1bc:	a080100c 	andi	r2,r20,64
  80b1c0:	da802217 	ldw	r10,136(sp)
  80b1c4:	103e0626 	beq	r2,zero,80a9e0 <__alt_mem_onchip_mem+0xff8029e0>
  80b1c8:	5480000f 	ldh	r18,0(r10)
  80b1cc:	52800104 	addi	r10,r10,4
  80b1d0:	da802215 	stw	r10,136(sp)
  80b1d4:	9027d7fa 	srai	r19,r18,31
  80b1d8:	9805883a 	mov	r2,r19
  80b1dc:	003db806 	br	80a8c0 <__alt_mem_onchip_mem+0xff8028c0>
  80b1e0:	a080040c 	andi	r2,r20,16
  80b1e4:	1000091e 	bne	r2,zero,80b20c <___vfiprintf_internal_r+0x1138>
  80b1e8:	a2c0100c 	andi	r11,r20,64
  80b1ec:	58000726 	beq	r11,zero,80b20c <___vfiprintf_internal_r+0x1138>
  80b1f0:	da802217 	ldw	r10,136(sp)
  80b1f4:	50800017 	ldw	r2,0(r10)
  80b1f8:	52800104 	addi	r10,r10,4
  80b1fc:	da802215 	stw	r10,136(sp)
  80b200:	da802317 	ldw	r10,140(sp)
  80b204:	1280000d 	sth	r10,0(r2)
  80b208:	003be706 	br	80a1a8 <__alt_mem_onchip_mem+0xff8021a8>
  80b20c:	da802217 	ldw	r10,136(sp)
  80b210:	50800017 	ldw	r2,0(r10)
  80b214:	52800104 	addi	r10,r10,4
  80b218:	da802215 	stw	r10,136(sp)
  80b21c:	da802317 	ldw	r10,140(sp)
  80b220:	12800015 	stw	r10,0(r2)
  80b224:	003be006 	br	80a1a8 <__alt_mem_onchip_mem+0xff8021a8>
  80b228:	a080100c 	andi	r2,r20,64
  80b22c:	da802217 	ldw	r10,136(sp)
  80b230:	10003026 	beq	r2,zero,80b2f4 <___vfiprintf_internal_r+0x1220>
  80b234:	5480000b 	ldhu	r18,0(r10)
  80b238:	52800104 	addi	r10,r10,4
  80b23c:	0027883a 	mov	r19,zero
  80b240:	da802215 	stw	r10,136(sp)
  80b244:	003d8006 	br	80a848 <__alt_mem_onchip_mem+0xff802848>
  80b248:	80c00007 	ldb	r3,0(r16)
  80b24c:	003c0006 	br	80a250 <__alt_mem_onchip_mem+0xff802250>
  80b250:	a080100c 	andi	r2,r20,64
  80b254:	d8001d85 	stb	zero,118(sp)
  80b258:	da802217 	ldw	r10,136(sp)
  80b25c:	1000201e 	bne	r2,zero,80b2e0 <___vfiprintf_internal_r+0x120c>
  80b260:	50800104 	addi	r2,r10,4
  80b264:	54800017 	ldw	r18,0(r10)
  80b268:	0027883a 	mov	r19,zero
  80b26c:	483def0e 	bge	r9,zero,80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80b270:	94c6b03a 	or	r3,r18,r19
  80b274:	d8802215 	stw	r2,136(sp)
  80b278:	183d4e1e 	bne	r3,zero,80a7b4 <__alt_mem_onchip_mem+0xff8027b4>
  80b27c:	0039883a 	mov	fp,zero
  80b280:	0005883a 	mov	r2,zero
  80b284:	003e0606 	br	80aaa0 <__alt_mem_onchip_mem+0xff802aa0>
  80b288:	d9402117 	ldw	r5,132(sp)
  80b28c:	d9002017 	ldw	r4,128(sp)
  80b290:	d9801a04 	addi	r6,sp,104
  80b294:	da402c15 	stw	r9,176(sp)
  80b298:	db802a15 	stw	r14,168(sp)
  80b29c:	0809fc00 	call	809fc0 <__sprint_r.part.0>
  80b2a0:	da402c17 	ldw	r9,176(sp)
  80b2a4:	db802a17 	ldw	r14,168(sp)
  80b2a8:	103ede1e 	bne	r2,zero,80ae24 <__alt_mem_onchip_mem+0xff802e24>
  80b2ac:	d9401b17 	ldw	r5,108(sp)
  80b2b0:	d8801c17 	ldw	r2,112(sp)
  80b2b4:	d811883a 	mov	r8,sp
  80b2b8:	29000044 	addi	r4,r5,1
  80b2bc:	003e7406 	br	80ac90 <__alt_mem_onchip_mem+0xff802c90>
  80b2c0:	00bfffc4 	movi	r2,-1
  80b2c4:	003c5806 	br	80a428 <__alt_mem_onchip_mem+0xff802428>
  80b2c8:	d811883a 	mov	r8,sp
  80b2cc:	003ee806 	br	80ae70 <__alt_mem_onchip_mem+0xff802e70>
  80b2d0:	000b883a 	mov	r5,zero
  80b2d4:	01000044 	movi	r4,1
  80b2d8:	d811883a 	mov	r8,sp
  80b2dc:	003e7c06 	br	80acd0 <__alt_mem_onchip_mem+0xff802cd0>
  80b2e0:	50800104 	addi	r2,r10,4
  80b2e4:	5480000b 	ldhu	r18,0(r10)
  80b2e8:	0027883a 	mov	r19,zero
  80b2ec:	483dcf0e 	bge	r9,zero,80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80b2f0:	003fdf06 	br	80b270 <__alt_mem_onchip_mem+0xff803270>
  80b2f4:	54800017 	ldw	r18,0(r10)
  80b2f8:	52800104 	addi	r10,r10,4
  80b2fc:	0027883a 	mov	r19,zero
  80b300:	da802215 	stw	r10,136(sp)
  80b304:	003d5006 	br	80a848 <__alt_mem_onchip_mem+0xff802848>
  80b308:	50800104 	addi	r2,r10,4
  80b30c:	5480000b 	ldhu	r18,0(r10)
  80b310:	0027883a 	mov	r19,zero
  80b314:	483f7d0e 	bge	r9,zero,80b10c <__alt_mem_onchip_mem+0xff80310c>
  80b318:	003ddc06 	br	80aa8c <__alt_mem_onchip_mem+0xff802a8c>
  80b31c:	d8c02215 	stw	r3,136(sp)
  80b320:	0039883a 	mov	fp,zero
  80b324:	003ddb06 	br	80aa94 <__alt_mem_onchip_mem+0xff802a94>
  80b328:	02802074 	movhi	r10,129
  80b32c:	528cf704 	addi	r10,r10,13276
  80b330:	da802415 	stw	r10,144(sp)
  80b334:	003e8306 	br	80ad44 <__alt_mem_onchip_mem+0xff802d44>
  80b338:	d8801c17 	ldw	r2,112(sp)
  80b33c:	dd002117 	ldw	r20,132(sp)
  80b340:	103eb926 	beq	r2,zero,80ae28 <__alt_mem_onchip_mem+0xff802e28>
  80b344:	d9002017 	ldw	r4,128(sp)
  80b348:	d9801a04 	addi	r6,sp,104
  80b34c:	a00b883a 	mov	r5,r20
  80b350:	0809fc00 	call	809fc0 <__sprint_r.part.0>
  80b354:	003eb406 	br	80ae28 <__alt_mem_onchip_mem+0xff802e28>
  80b358:	80c00043 	ldbu	r3,1(r16)
  80b35c:	a5000814 	ori	r20,r20,32
  80b360:	84000044 	addi	r16,r16,1
  80b364:	18c03fcc 	andi	r3,r3,255
  80b368:	18c0201c 	xori	r3,r3,128
  80b36c:	18ffe004 	addi	r3,r3,-128
  80b370:	003bb706 	br	80a250 <__alt_mem_onchip_mem+0xff802250>
  80b374:	a809883a 	mov	r4,r21
  80b378:	d8c02a15 	stw	r3,168(sp)
  80b37c:	da002b15 	stw	r8,172(sp)
  80b380:	0809f280 	call	809f28 <strlen>
  80b384:	d8c02a17 	ldw	r3,168(sp)
  80b388:	1027883a 	mov	r19,r2
  80b38c:	df001d83 	ldbu	fp,118(sp)
  80b390:	d8c02215 	stw	r3,136(sp)
  80b394:	0013883a 	mov	r9,zero
  80b398:	da002b17 	ldw	r8,172(sp)
  80b39c:	003c4d06 	br	80a4d4 <__alt_mem_onchip_mem+0xff8024d4>
  80b3a0:	d9402117 	ldw	r5,132(sp)
  80b3a4:	d9002017 	ldw	r4,128(sp)
  80b3a8:	d9801a04 	addi	r6,sp,104
  80b3ac:	da402c15 	stw	r9,176(sp)
  80b3b0:	0809fc00 	call	809fc0 <__sprint_r.part.0>
  80b3b4:	da402c17 	ldw	r9,176(sp)
  80b3b8:	103e9a1e 	bne	r2,zero,80ae24 <__alt_mem_onchip_mem+0xff802e24>
  80b3bc:	d9401b17 	ldw	r5,108(sp)
  80b3c0:	d8801c17 	ldw	r2,112(sp)
  80b3c4:	d811883a 	mov	r8,sp
  80b3c8:	29000044 	addi	r4,r5,1
  80b3cc:	003e4206 	br	80acd8 <__alt_mem_onchip_mem+0xff802cd8>
  80b3d0:	d9401b17 	ldw	r5,108(sp)
  80b3d4:	01002074 	movhi	r4,129
  80b3d8:	210cfb04 	addi	r4,r4,13292
  80b3dc:	d9002415 	stw	r4,144(sp)
  80b3e0:	29400044 	addi	r5,r5,1
  80b3e4:	003c6d06 	br	80a59c <__alt_mem_onchip_mem+0xff80259c>
  80b3e8:	0039883a 	mov	fp,zero
  80b3ec:	00800084 	movi	r2,2
  80b3f0:	10803fcc 	andi	r2,r2,255
  80b3f4:	01000044 	movi	r4,1
  80b3f8:	11001e26 	beq	r2,r4,80b474 <___vfiprintf_internal_r+0x13a0>
  80b3fc:	01000084 	movi	r4,2
  80b400:	11001e1e 	bne	r2,r4,80b47c <___vfiprintf_internal_r+0x13a8>
  80b404:	1829883a 	mov	r20,r3
  80b408:	003eea06 	br	80afb4 <__alt_mem_onchip_mem+0xff802fb4>
  80b40c:	a007883a 	mov	r3,r20
  80b410:	00800044 	movi	r2,1
  80b414:	003ff606 	br	80b3f0 <__alt_mem_onchip_mem+0xff8033f0>
  80b418:	00800184 	movi	r2,6
  80b41c:	1240012e 	bgeu	r2,r9,80b424 <___vfiprintf_internal_r+0x1350>
  80b420:	1013883a 	mov	r9,r2
  80b424:	4827883a 	mov	r19,r9
  80b428:	4825883a 	mov	r18,r9
  80b42c:	48001516 	blt	r9,zero,80b484 <___vfiprintf_internal_r+0x13b0>
  80b430:	05402074 	movhi	r21,129
  80b434:	d8c02215 	stw	r3,136(sp)
  80b438:	ad4bfc04 	addi	r21,r21,12272
  80b43c:	003d1406 	br	80a890 <__alt_mem_onchip_mem+0xff802890>
  80b440:	02802074 	movhi	r10,129
  80b444:	528cf704 	addi	r10,r10,13276
  80b448:	da802415 	stw	r10,144(sp)
  80b44c:	200d883a 	mov	r6,r4
  80b450:	003c9106 	br	80a698 <__alt_mem_onchip_mem+0xff802698>
  80b454:	5021883a 	mov	r16,r10
  80b458:	0013883a 	mov	r9,zero
  80b45c:	003b7d06 	br	80a254 <__alt_mem_onchip_mem+0xff802254>
  80b460:	4827883a 	mov	r19,r9
  80b464:	df001d83 	ldbu	fp,118(sp)
  80b468:	d8c02215 	stw	r3,136(sp)
  80b46c:	0013883a 	mov	r9,zero
  80b470:	003c1806 	br	80a4d4 <__alt_mem_onchip_mem+0xff8024d4>
  80b474:	1829883a 	mov	r20,r3
  80b478:	003d1806 	br	80a8dc <__alt_mem_onchip_mem+0xff8028dc>
  80b47c:	1829883a 	mov	r20,r3
  80b480:	003ccd06 	br	80a7b8 <__alt_mem_onchip_mem+0xff8027b8>
  80b484:	0025883a 	mov	r18,zero
  80b488:	003fe906 	br	80b430 <__alt_mem_onchip_mem+0xff803430>
  80b48c:	d8802217 	ldw	r2,136(sp)
  80b490:	80c00043 	ldbu	r3,1(r16)
  80b494:	5021883a 	mov	r16,r10
  80b498:	12400017 	ldw	r9,0(r2)
  80b49c:	10800104 	addi	r2,r2,4
  80b4a0:	d8802215 	stw	r2,136(sp)
  80b4a4:	483faf0e 	bge	r9,zero,80b364 <__alt_mem_onchip_mem+0xff803364>
  80b4a8:	18c03fcc 	andi	r3,r3,255
  80b4ac:	18c0201c 	xori	r3,r3,128
  80b4b0:	027fffc4 	movi	r9,-1
  80b4b4:	18ffe004 	addi	r3,r3,-128
  80b4b8:	003b6506 	br	80a250 <__alt_mem_onchip_mem+0xff802250>
  80b4bc:	d9c01d85 	stb	r7,118(sp)
  80b4c0:	003ca006 	br	80a744 <__alt_mem_onchip_mem+0xff802744>
  80b4c4:	d9c01d85 	stb	r7,118(sp)
  80b4c8:	003cad06 	br	80a780 <__alt_mem_onchip_mem+0xff802780>
  80b4cc:	d9c01d85 	stb	r7,118(sp)
  80b4d0:	003d7d06 	br	80aac8 <__alt_mem_onchip_mem+0xff802ac8>
  80b4d4:	d9c01d85 	stb	r7,118(sp)
  80b4d8:	003d5f06 	br	80aa58 <__alt_mem_onchip_mem+0xff802a58>
  80b4dc:	a080004c 	andi	r2,r20,1
  80b4e0:	0039883a 	mov	fp,zero
  80b4e4:	10000526 	beq	r2,zero,80b4fc <___vfiprintf_internal_r+0x1428>
  80b4e8:	00800c04 	movi	r2,48
  80b4ec:	d88019c5 	stb	r2,103(sp)
  80b4f0:	dcc02717 	ldw	r19,156(sp)
  80b4f4:	dd4019c4 	addi	r21,sp,103
  80b4f8:	003bf606 	br	80a4d4 <__alt_mem_onchip_mem+0xff8024d4>
  80b4fc:	0027883a 	mov	r19,zero
  80b500:	dd401a04 	addi	r21,sp,104
  80b504:	003bf306 	br	80a4d4 <__alt_mem_onchip_mem+0xff8024d4>
  80b508:	d9c01d85 	stb	r7,118(sp)
  80b50c:	003dc806 	br	80ac30 <__alt_mem_onchip_mem+0xff802c30>
  80b510:	d9c01d85 	stb	r7,118(sp)
  80b514:	003d3a06 	br	80aa00 <__alt_mem_onchip_mem+0xff802a00>
  80b518:	d9c01d85 	stb	r7,118(sp)
  80b51c:	003d2a06 	br	80a9c8 <__alt_mem_onchip_mem+0xff8029c8>
  80b520:	d9c01d85 	stb	r7,118(sp)
  80b524:	003cde06 	br	80a8a0 <__alt_mem_onchip_mem+0xff8028a0>
  80b528:	d9c01d85 	stb	r7,118(sp)
  80b52c:	003cbc06 	br	80a820 <__alt_mem_onchip_mem+0xff802820>

0080b530 <__vfiprintf_internal>:
  80b530:	00802074 	movhi	r2,129
  80b534:	10947b04 	addi	r2,r2,20972
  80b538:	300f883a 	mov	r7,r6
  80b53c:	280d883a 	mov	r6,r5
  80b540:	200b883a 	mov	r5,r4
  80b544:	11000017 	ldw	r4,0(r2)
  80b548:	080a0d41 	jmpi	80a0d4 <___vfiprintf_internal_r>

0080b54c <__sbprintf>:
  80b54c:	2880030b 	ldhu	r2,12(r5)
  80b550:	2ac01917 	ldw	r11,100(r5)
  80b554:	2a80038b 	ldhu	r10,14(r5)
  80b558:	2a400717 	ldw	r9,28(r5)
  80b55c:	2a000917 	ldw	r8,36(r5)
  80b560:	defee204 	addi	sp,sp,-1144
  80b564:	00c10004 	movi	r3,1024
  80b568:	dc011a15 	stw	r16,1128(sp)
  80b56c:	10bfff4c 	andi	r2,r2,65533
  80b570:	2821883a 	mov	r16,r5
  80b574:	d8cb883a 	add	r5,sp,r3
  80b578:	dc811c15 	stw	r18,1136(sp)
  80b57c:	dc411b15 	stw	r17,1132(sp)
  80b580:	dfc11d15 	stw	ra,1140(sp)
  80b584:	2025883a 	mov	r18,r4
  80b588:	d881030d 	sth	r2,1036(sp)
  80b58c:	dac11915 	stw	r11,1124(sp)
  80b590:	da81038d 	sth	r10,1038(sp)
  80b594:	da410715 	stw	r9,1052(sp)
  80b598:	da010915 	stw	r8,1060(sp)
  80b59c:	dec10015 	stw	sp,1024(sp)
  80b5a0:	dec10415 	stw	sp,1040(sp)
  80b5a4:	d8c10215 	stw	r3,1032(sp)
  80b5a8:	d8c10515 	stw	r3,1044(sp)
  80b5ac:	d8010615 	stw	zero,1048(sp)
  80b5b0:	080a0d40 	call	80a0d4 <___vfiprintf_internal_r>
  80b5b4:	1023883a 	mov	r17,r2
  80b5b8:	10000416 	blt	r2,zero,80b5cc <__sbprintf+0x80>
  80b5bc:	d9410004 	addi	r5,sp,1024
  80b5c0:	9009883a 	mov	r4,r18
  80b5c4:	08078d80 	call	8078d8 <_fflush_r>
  80b5c8:	10000d1e 	bne	r2,zero,80b600 <__sbprintf+0xb4>
  80b5cc:	d881030b 	ldhu	r2,1036(sp)
  80b5d0:	1080100c 	andi	r2,r2,64
  80b5d4:	10000326 	beq	r2,zero,80b5e4 <__sbprintf+0x98>
  80b5d8:	8080030b 	ldhu	r2,12(r16)
  80b5dc:	10801014 	ori	r2,r2,64
  80b5e0:	8080030d 	sth	r2,12(r16)
  80b5e4:	8805883a 	mov	r2,r17
  80b5e8:	dfc11d17 	ldw	ra,1140(sp)
  80b5ec:	dc811c17 	ldw	r18,1136(sp)
  80b5f0:	dc411b17 	ldw	r17,1132(sp)
  80b5f4:	dc011a17 	ldw	r16,1128(sp)
  80b5f8:	dec11e04 	addi	sp,sp,1144
  80b5fc:	f800283a 	ret
  80b600:	047fffc4 	movi	r17,-1
  80b604:	003ff106 	br	80b5cc <__alt_mem_onchip_mem+0xff8035cc>

0080b608 <_calloc_r>:
  80b608:	298b383a 	mul	r5,r5,r6
  80b60c:	defffe04 	addi	sp,sp,-8
  80b610:	dfc00115 	stw	ra,4(sp)
  80b614:	dc000015 	stw	r16,0(sp)
  80b618:	080253c0 	call	80253c <_malloc_r>
  80b61c:	10002926 	beq	r2,zero,80b6c4 <_calloc_r+0xbc>
  80b620:	11bfff17 	ldw	r6,-4(r2)
  80b624:	1021883a 	mov	r16,r2
  80b628:	00bfff04 	movi	r2,-4
  80b62c:	308c703a 	and	r6,r6,r2
  80b630:	00c00904 	movi	r3,36
  80b634:	308d883a 	add	r6,r6,r2
  80b638:	19801636 	bltu	r3,r6,80b694 <_calloc_r+0x8c>
  80b63c:	008004c4 	movi	r2,19
  80b640:	11800b2e 	bgeu	r2,r6,80b670 <_calloc_r+0x68>
  80b644:	80000015 	stw	zero,0(r16)
  80b648:	80000115 	stw	zero,4(r16)
  80b64c:	008006c4 	movi	r2,27
  80b650:	11801a2e 	bgeu	r2,r6,80b6bc <_calloc_r+0xb4>
  80b654:	80000215 	stw	zero,8(r16)
  80b658:	80000315 	stw	zero,12(r16)
  80b65c:	30c0151e 	bne	r6,r3,80b6b4 <_calloc_r+0xac>
  80b660:	80000415 	stw	zero,16(r16)
  80b664:	80800604 	addi	r2,r16,24
  80b668:	80000515 	stw	zero,20(r16)
  80b66c:	00000106 	br	80b674 <_calloc_r+0x6c>
  80b670:	8005883a 	mov	r2,r16
  80b674:	10000015 	stw	zero,0(r2)
  80b678:	10000115 	stw	zero,4(r2)
  80b67c:	10000215 	stw	zero,8(r2)
  80b680:	8005883a 	mov	r2,r16
  80b684:	dfc00117 	ldw	ra,4(sp)
  80b688:	dc000017 	ldw	r16,0(sp)
  80b68c:	dec00204 	addi	sp,sp,8
  80b690:	f800283a 	ret
  80b694:	000b883a 	mov	r5,zero
  80b698:	8009883a 	mov	r4,r16
  80b69c:	0802d480 	call	802d48 <memset>
  80b6a0:	8005883a 	mov	r2,r16
  80b6a4:	dfc00117 	ldw	ra,4(sp)
  80b6a8:	dc000017 	ldw	r16,0(sp)
  80b6ac:	dec00204 	addi	sp,sp,8
  80b6b0:	f800283a 	ret
  80b6b4:	80800404 	addi	r2,r16,16
  80b6b8:	003fee06 	br	80b674 <__alt_mem_onchip_mem+0xff803674>
  80b6bc:	80800204 	addi	r2,r16,8
  80b6c0:	003fec06 	br	80b674 <__alt_mem_onchip_mem+0xff803674>
  80b6c4:	0005883a 	mov	r2,zero
  80b6c8:	003fee06 	br	80b684 <__alt_mem_onchip_mem+0xff803684>

0080b6cc <__fputwc>:
  80b6cc:	defff804 	addi	sp,sp,-32
  80b6d0:	dcc00415 	stw	r19,16(sp)
  80b6d4:	dc800315 	stw	r18,12(sp)
  80b6d8:	dc000115 	stw	r16,4(sp)
  80b6dc:	dfc00715 	stw	ra,28(sp)
  80b6e0:	dd400615 	stw	r21,24(sp)
  80b6e4:	dd000515 	stw	r20,20(sp)
  80b6e8:	dc400215 	stw	r17,8(sp)
  80b6ec:	2027883a 	mov	r19,r4
  80b6f0:	2825883a 	mov	r18,r5
  80b6f4:	3021883a 	mov	r16,r6
  80b6f8:	08083dc0 	call	8083dc <__locale_mb_cur_max>
  80b6fc:	00c00044 	movi	r3,1
  80b700:	10c03e26 	beq	r2,r3,80b7fc <__fputwc+0x130>
  80b704:	81c01704 	addi	r7,r16,92
  80b708:	900d883a 	mov	r6,r18
  80b70c:	d80b883a 	mov	r5,sp
  80b710:	9809883a 	mov	r4,r19
  80b714:	080b8d40 	call	80b8d4 <_wcrtomb_r>
  80b718:	1029883a 	mov	r20,r2
  80b71c:	00bfffc4 	movi	r2,-1
  80b720:	a0802026 	beq	r20,r2,80b7a4 <__fputwc+0xd8>
  80b724:	d9400003 	ldbu	r5,0(sp)
  80b728:	a0001c26 	beq	r20,zero,80b79c <__fputwc+0xd0>
  80b72c:	0023883a 	mov	r17,zero
  80b730:	05400284 	movi	r21,10
  80b734:	00000906 	br	80b75c <__fputwc+0x90>
  80b738:	80800017 	ldw	r2,0(r16)
  80b73c:	11400005 	stb	r5,0(r2)
  80b740:	80c00017 	ldw	r3,0(r16)
  80b744:	18c00044 	addi	r3,r3,1
  80b748:	80c00015 	stw	r3,0(r16)
  80b74c:	8c400044 	addi	r17,r17,1
  80b750:	dc45883a 	add	r2,sp,r17
  80b754:	8d00112e 	bgeu	r17,r20,80b79c <__fputwc+0xd0>
  80b758:	11400003 	ldbu	r5,0(r2)
  80b75c:	80c00217 	ldw	r3,8(r16)
  80b760:	18ffffc4 	addi	r3,r3,-1
  80b764:	80c00215 	stw	r3,8(r16)
  80b768:	183ff30e 	bge	r3,zero,80b738 <__alt_mem_onchip_mem+0xff803738>
  80b76c:	80800617 	ldw	r2,24(r16)
  80b770:	18801916 	blt	r3,r2,80b7d8 <__fputwc+0x10c>
  80b774:	80800017 	ldw	r2,0(r16)
  80b778:	11400005 	stb	r5,0(r2)
  80b77c:	80800017 	ldw	r2,0(r16)
  80b780:	10c00003 	ldbu	r3,0(r2)
  80b784:	10800044 	addi	r2,r2,1
  80b788:	1d402326 	beq	r3,r21,80b818 <__fputwc+0x14c>
  80b78c:	80800015 	stw	r2,0(r16)
  80b790:	8c400044 	addi	r17,r17,1
  80b794:	dc45883a 	add	r2,sp,r17
  80b798:	8d3fef36 	bltu	r17,r20,80b758 <__alt_mem_onchip_mem+0xff803758>
  80b79c:	9005883a 	mov	r2,r18
  80b7a0:	00000406 	br	80b7b4 <__fputwc+0xe8>
  80b7a4:	80c0030b 	ldhu	r3,12(r16)
  80b7a8:	a005883a 	mov	r2,r20
  80b7ac:	18c01014 	ori	r3,r3,64
  80b7b0:	80c0030d 	sth	r3,12(r16)
  80b7b4:	dfc00717 	ldw	ra,28(sp)
  80b7b8:	dd400617 	ldw	r21,24(sp)
  80b7bc:	dd000517 	ldw	r20,20(sp)
  80b7c0:	dcc00417 	ldw	r19,16(sp)
  80b7c4:	dc800317 	ldw	r18,12(sp)
  80b7c8:	dc400217 	ldw	r17,8(sp)
  80b7cc:	dc000117 	ldw	r16,4(sp)
  80b7d0:	dec00804 	addi	sp,sp,32
  80b7d4:	f800283a 	ret
  80b7d8:	800d883a 	mov	r6,r16
  80b7dc:	29403fcc 	andi	r5,r5,255
  80b7e0:	9809883a 	mov	r4,r19
  80b7e4:	08059d00 	call	8059d0 <__swbuf_r>
  80b7e8:	10bfffe0 	cmpeqi	r2,r2,-1
  80b7ec:	10803fcc 	andi	r2,r2,255
  80b7f0:	103fd626 	beq	r2,zero,80b74c <__alt_mem_onchip_mem+0xff80374c>
  80b7f4:	00bfffc4 	movi	r2,-1
  80b7f8:	003fee06 	br	80b7b4 <__alt_mem_onchip_mem+0xff8037b4>
  80b7fc:	90ffffc4 	addi	r3,r18,-1
  80b800:	01003f84 	movi	r4,254
  80b804:	20ffbf36 	bltu	r4,r3,80b704 <__alt_mem_onchip_mem+0xff803704>
  80b808:	900b883a 	mov	r5,r18
  80b80c:	dc800005 	stb	r18,0(sp)
  80b810:	1029883a 	mov	r20,r2
  80b814:	003fc506 	br	80b72c <__alt_mem_onchip_mem+0xff80372c>
  80b818:	800d883a 	mov	r6,r16
  80b81c:	a80b883a 	mov	r5,r21
  80b820:	9809883a 	mov	r4,r19
  80b824:	08059d00 	call	8059d0 <__swbuf_r>
  80b828:	10bfffe0 	cmpeqi	r2,r2,-1
  80b82c:	003fef06 	br	80b7ec <__alt_mem_onchip_mem+0xff8037ec>

0080b830 <_fputwc_r>:
  80b830:	3080030b 	ldhu	r2,12(r6)
  80b834:	10c8000c 	andi	r3,r2,8192
  80b838:	1800051e 	bne	r3,zero,80b850 <_fputwc_r+0x20>
  80b83c:	30c01917 	ldw	r3,100(r6)
  80b840:	10880014 	ori	r2,r2,8192
  80b844:	3080030d 	sth	r2,12(r6)
  80b848:	18880014 	ori	r2,r3,8192
  80b84c:	30801915 	stw	r2,100(r6)
  80b850:	080b6cc1 	jmpi	80b6cc <__fputwc>

0080b854 <fputwc>:
  80b854:	00802074 	movhi	r2,129
  80b858:	defffc04 	addi	sp,sp,-16
  80b85c:	10947b04 	addi	r2,r2,20972
  80b860:	dc000115 	stw	r16,4(sp)
  80b864:	14000017 	ldw	r16,0(r2)
  80b868:	dc400215 	stw	r17,8(sp)
  80b86c:	dfc00315 	stw	ra,12(sp)
  80b870:	2023883a 	mov	r17,r4
  80b874:	80000226 	beq	r16,zero,80b880 <fputwc+0x2c>
  80b878:	80800e17 	ldw	r2,56(r16)
  80b87c:	10001026 	beq	r2,zero,80b8c0 <fputwc+0x6c>
  80b880:	2880030b 	ldhu	r2,12(r5)
  80b884:	10c8000c 	andi	r3,r2,8192
  80b888:	1800051e 	bne	r3,zero,80b8a0 <fputwc+0x4c>
  80b88c:	28c01917 	ldw	r3,100(r5)
  80b890:	10880014 	ori	r2,r2,8192
  80b894:	2880030d 	sth	r2,12(r5)
  80b898:	18880014 	ori	r2,r3,8192
  80b89c:	28801915 	stw	r2,100(r5)
  80b8a0:	280d883a 	mov	r6,r5
  80b8a4:	8009883a 	mov	r4,r16
  80b8a8:	880b883a 	mov	r5,r17
  80b8ac:	dfc00317 	ldw	ra,12(sp)
  80b8b0:	dc400217 	ldw	r17,8(sp)
  80b8b4:	dc000117 	ldw	r16,4(sp)
  80b8b8:	dec00404 	addi	sp,sp,16
  80b8bc:	080b6cc1 	jmpi	80b6cc <__fputwc>
  80b8c0:	8009883a 	mov	r4,r16
  80b8c4:	d9400015 	stw	r5,0(sp)
  80b8c8:	08019d40 	call	8019d4 <__sinit>
  80b8cc:	d9400017 	ldw	r5,0(sp)
  80b8d0:	003feb06 	br	80b880 <__alt_mem_onchip_mem+0xff803880>

0080b8d4 <_wcrtomb_r>:
  80b8d4:	defff604 	addi	sp,sp,-40
  80b8d8:	00802074 	movhi	r2,129
  80b8dc:	dc800815 	stw	r18,32(sp)
  80b8e0:	dc400715 	stw	r17,28(sp)
  80b8e4:	dc000615 	stw	r16,24(sp)
  80b8e8:	10948004 	addi	r2,r2,20992
  80b8ec:	dfc00915 	stw	ra,36(sp)
  80b8f0:	2021883a 	mov	r16,r4
  80b8f4:	3823883a 	mov	r17,r7
  80b8f8:	14800017 	ldw	r18,0(r2)
  80b8fc:	28001426 	beq	r5,zero,80b950 <_wcrtomb_r+0x7c>
  80b900:	d9400415 	stw	r5,16(sp)
  80b904:	d9800515 	stw	r6,20(sp)
  80b908:	08083d00 	call	8083d0 <__locale_charset>
  80b90c:	d9800517 	ldw	r6,20(sp)
  80b910:	d9400417 	ldw	r5,16(sp)
  80b914:	100f883a 	mov	r7,r2
  80b918:	dc400015 	stw	r17,0(sp)
  80b91c:	8009883a 	mov	r4,r16
  80b920:	903ee83a 	callr	r18
  80b924:	00ffffc4 	movi	r3,-1
  80b928:	10c0031e 	bne	r2,r3,80b938 <_wcrtomb_r+0x64>
  80b92c:	88000015 	stw	zero,0(r17)
  80b930:	00c02284 	movi	r3,138
  80b934:	80c00015 	stw	r3,0(r16)
  80b938:	dfc00917 	ldw	ra,36(sp)
  80b93c:	dc800817 	ldw	r18,32(sp)
  80b940:	dc400717 	ldw	r17,28(sp)
  80b944:	dc000617 	ldw	r16,24(sp)
  80b948:	dec00a04 	addi	sp,sp,40
  80b94c:	f800283a 	ret
  80b950:	08083d00 	call	8083d0 <__locale_charset>
  80b954:	100f883a 	mov	r7,r2
  80b958:	dc400015 	stw	r17,0(sp)
  80b95c:	000d883a 	mov	r6,zero
  80b960:	d9400104 	addi	r5,sp,4
  80b964:	8009883a 	mov	r4,r16
  80b968:	903ee83a 	callr	r18
  80b96c:	003fed06 	br	80b924 <__alt_mem_onchip_mem+0xff803924>

0080b970 <wcrtomb>:
  80b970:	defff604 	addi	sp,sp,-40
  80b974:	00802074 	movhi	r2,129
  80b978:	dc800615 	stw	r18,24(sp)
  80b97c:	dc400515 	stw	r17,20(sp)
  80b980:	10947b04 	addi	r2,r2,20972
  80b984:	dfc00915 	stw	ra,36(sp)
  80b988:	dd000815 	stw	r20,32(sp)
  80b98c:	dcc00715 	stw	r19,28(sp)
  80b990:	dc000415 	stw	r16,16(sp)
  80b994:	3025883a 	mov	r18,r6
  80b998:	14400017 	ldw	r17,0(r2)
  80b99c:	20001926 	beq	r4,zero,80ba04 <wcrtomb+0x94>
  80b9a0:	00802074 	movhi	r2,129
  80b9a4:	10948004 	addi	r2,r2,20992
  80b9a8:	15000017 	ldw	r20,0(r2)
  80b9ac:	2021883a 	mov	r16,r4
  80b9b0:	2827883a 	mov	r19,r5
  80b9b4:	08083d00 	call	8083d0 <__locale_charset>
  80b9b8:	100f883a 	mov	r7,r2
  80b9bc:	dc800015 	stw	r18,0(sp)
  80b9c0:	980d883a 	mov	r6,r19
  80b9c4:	800b883a 	mov	r5,r16
  80b9c8:	8809883a 	mov	r4,r17
  80b9cc:	a03ee83a 	callr	r20
  80b9d0:	00ffffc4 	movi	r3,-1
  80b9d4:	10c0031e 	bne	r2,r3,80b9e4 <wcrtomb+0x74>
  80b9d8:	90000015 	stw	zero,0(r18)
  80b9dc:	00c02284 	movi	r3,138
  80b9e0:	88c00015 	stw	r3,0(r17)
  80b9e4:	dfc00917 	ldw	ra,36(sp)
  80b9e8:	dd000817 	ldw	r20,32(sp)
  80b9ec:	dcc00717 	ldw	r19,28(sp)
  80b9f0:	dc800617 	ldw	r18,24(sp)
  80b9f4:	dc400517 	ldw	r17,20(sp)
  80b9f8:	dc000417 	ldw	r16,16(sp)
  80b9fc:	dec00a04 	addi	sp,sp,40
  80ba00:	f800283a 	ret
  80ba04:	00802074 	movhi	r2,129
  80ba08:	10948004 	addi	r2,r2,20992
  80ba0c:	14000017 	ldw	r16,0(r2)
  80ba10:	08083d00 	call	8083d0 <__locale_charset>
  80ba14:	100f883a 	mov	r7,r2
  80ba18:	dc800015 	stw	r18,0(sp)
  80ba1c:	000d883a 	mov	r6,zero
  80ba20:	d9400104 	addi	r5,sp,4
  80ba24:	8809883a 	mov	r4,r17
  80ba28:	803ee83a 	callr	r16
  80ba2c:	003fe806 	br	80b9d0 <__alt_mem_onchip_mem+0xff8039d0>

0080ba30 <__ascii_wctomb>:
  80ba30:	28000526 	beq	r5,zero,80ba48 <__ascii_wctomb+0x18>
  80ba34:	00803fc4 	movi	r2,255
  80ba38:	11800536 	bltu	r2,r6,80ba50 <__ascii_wctomb+0x20>
  80ba3c:	29800005 	stb	r6,0(r5)
  80ba40:	00800044 	movi	r2,1
  80ba44:	f800283a 	ret
  80ba48:	0005883a 	mov	r2,zero
  80ba4c:	f800283a 	ret
  80ba50:	00802284 	movi	r2,138
  80ba54:	20800015 	stw	r2,0(r4)
  80ba58:	00bfffc4 	movi	r2,-1
  80ba5c:	f800283a 	ret

0080ba60 <_wctomb_r>:
  80ba60:	00802074 	movhi	r2,129
  80ba64:	defff904 	addi	sp,sp,-28
  80ba68:	10948004 	addi	r2,r2,20992
  80ba6c:	dfc00615 	stw	ra,24(sp)
  80ba70:	dc400515 	stw	r17,20(sp)
  80ba74:	dc000415 	stw	r16,16(sp)
  80ba78:	3823883a 	mov	r17,r7
  80ba7c:	14000017 	ldw	r16,0(r2)
  80ba80:	d9000115 	stw	r4,4(sp)
  80ba84:	d9400215 	stw	r5,8(sp)
  80ba88:	d9800315 	stw	r6,12(sp)
  80ba8c:	08083d00 	call	8083d0 <__locale_charset>
  80ba90:	d9800317 	ldw	r6,12(sp)
  80ba94:	d9400217 	ldw	r5,8(sp)
  80ba98:	d9000117 	ldw	r4,4(sp)
  80ba9c:	100f883a 	mov	r7,r2
  80baa0:	dc400015 	stw	r17,0(sp)
  80baa4:	803ee83a 	callr	r16
  80baa8:	dfc00617 	ldw	ra,24(sp)
  80baac:	dc400517 	ldw	r17,20(sp)
  80bab0:	dc000417 	ldw	r16,16(sp)
  80bab4:	dec00704 	addi	sp,sp,28
  80bab8:	f800283a 	ret

0080babc <__udivdi3>:
  80babc:	defff504 	addi	sp,sp,-44
  80bac0:	dcc00415 	stw	r19,16(sp)
  80bac4:	dc000115 	stw	r16,4(sp)
  80bac8:	dfc00a15 	stw	ra,40(sp)
  80bacc:	df000915 	stw	fp,36(sp)
  80bad0:	ddc00815 	stw	r23,32(sp)
  80bad4:	dd800715 	stw	r22,28(sp)
  80bad8:	dd400615 	stw	r21,24(sp)
  80badc:	dd000515 	stw	r20,20(sp)
  80bae0:	dc800315 	stw	r18,12(sp)
  80bae4:	dc400215 	stw	r17,8(sp)
  80bae8:	2027883a 	mov	r19,r4
  80baec:	2821883a 	mov	r16,r5
  80baf0:	3800411e 	bne	r7,zero,80bbf8 <__udivdi3+0x13c>
  80baf4:	3023883a 	mov	r17,r6
  80baf8:	2025883a 	mov	r18,r4
  80bafc:	2980522e 	bgeu	r5,r6,80bc48 <__udivdi3+0x18c>
  80bb00:	00bfffd4 	movui	r2,65535
  80bb04:	282d883a 	mov	r22,r5
  80bb08:	1180a836 	bltu	r2,r6,80bdac <__udivdi3+0x2f0>
  80bb0c:	00803fc4 	movi	r2,255
  80bb10:	1185803a 	cmpltu	r2,r2,r6
  80bb14:	100490fa 	slli	r2,r2,3
  80bb18:	3086d83a 	srl	r3,r6,r2
  80bb1c:	01002074 	movhi	r4,129
  80bb20:	210cff04 	addi	r4,r4,13308
  80bb24:	20c7883a 	add	r3,r4,r3
  80bb28:	18c00003 	ldbu	r3,0(r3)
  80bb2c:	1885883a 	add	r2,r3,r2
  80bb30:	00c00804 	movi	r3,32
  80bb34:	1887c83a 	sub	r3,r3,r2
  80bb38:	18000526 	beq	r3,zero,80bb50 <__udivdi3+0x94>
  80bb3c:	80e0983a 	sll	r16,r16,r3
  80bb40:	9884d83a 	srl	r2,r19,r2
  80bb44:	30e2983a 	sll	r17,r6,r3
  80bb48:	98e4983a 	sll	r18,r19,r3
  80bb4c:	142cb03a 	or	r22,r2,r16
  80bb50:	882ad43a 	srli	r21,r17,16
  80bb54:	b009883a 	mov	r4,r22
  80bb58:	8d3fffcc 	andi	r20,r17,65535
  80bb5c:	a80b883a 	mov	r5,r21
  80bb60:	080151c0 	call	80151c <__umodsi3>
  80bb64:	b009883a 	mov	r4,r22
  80bb68:	a80b883a 	mov	r5,r21
  80bb6c:	1027883a 	mov	r19,r2
  80bb70:	08014b80 	call	8014b8 <__udivsi3>
  80bb74:	102d883a 	mov	r22,r2
  80bb78:	9826943a 	slli	r19,r19,16
  80bb7c:	9004d43a 	srli	r2,r18,16
  80bb80:	a5a1383a 	mul	r16,r20,r22
  80bb84:	14c4b03a 	or	r2,r2,r19
  80bb88:	1400052e 	bgeu	r2,r16,80bba0 <__udivdi3+0xe4>
  80bb8c:	1445883a 	add	r2,r2,r17
  80bb90:	b0ffffc4 	addi	r3,r22,-1
  80bb94:	14400136 	bltu	r2,r17,80bb9c <__udivdi3+0xe0>
  80bb98:	14012336 	bltu	r2,r16,80c028 <__udivdi3+0x56c>
  80bb9c:	182d883a 	mov	r22,r3
  80bba0:	1421c83a 	sub	r16,r2,r16
  80bba4:	a80b883a 	mov	r5,r21
  80bba8:	8009883a 	mov	r4,r16
  80bbac:	080151c0 	call	80151c <__umodsi3>
  80bbb0:	1027883a 	mov	r19,r2
  80bbb4:	a80b883a 	mov	r5,r21
  80bbb8:	8009883a 	mov	r4,r16
  80bbbc:	08014b80 	call	8014b8 <__udivsi3>
  80bbc0:	9826943a 	slli	r19,r19,16
  80bbc4:	a0a9383a 	mul	r20,r20,r2
  80bbc8:	94bfffcc 	andi	r18,r18,65535
  80bbcc:	94e4b03a 	or	r18,r18,r19
  80bbd0:	9500052e 	bgeu	r18,r20,80bbe8 <__udivdi3+0x12c>
  80bbd4:	8ca5883a 	add	r18,r17,r18
  80bbd8:	10ffffc4 	addi	r3,r2,-1
  80bbdc:	9440f136 	bltu	r18,r17,80bfa4 <__udivdi3+0x4e8>
  80bbe0:	9500f02e 	bgeu	r18,r20,80bfa4 <__udivdi3+0x4e8>
  80bbe4:	10bfff84 	addi	r2,r2,-2
  80bbe8:	b00c943a 	slli	r6,r22,16
  80bbec:	0007883a 	mov	r3,zero
  80bbf0:	3084b03a 	or	r2,r6,r2
  80bbf4:	00005906 	br	80bd5c <__udivdi3+0x2a0>
  80bbf8:	29c05636 	bltu	r5,r7,80bd54 <__udivdi3+0x298>
  80bbfc:	00bfffd4 	movui	r2,65535
  80bc00:	11c0622e 	bgeu	r2,r7,80bd8c <__udivdi3+0x2d0>
  80bc04:	00804034 	movhi	r2,256
  80bc08:	10bfffc4 	addi	r2,r2,-1
  80bc0c:	11c0ee36 	bltu	r2,r7,80bfc8 <__udivdi3+0x50c>
  80bc10:	00800404 	movi	r2,16
  80bc14:	3886d83a 	srl	r3,r7,r2
  80bc18:	01002074 	movhi	r4,129
  80bc1c:	210cff04 	addi	r4,r4,13308
  80bc20:	20c7883a 	add	r3,r4,r3
  80bc24:	18c00003 	ldbu	r3,0(r3)
  80bc28:	05400804 	movi	r21,32
  80bc2c:	1885883a 	add	r2,r3,r2
  80bc30:	a8abc83a 	sub	r21,r21,r2
  80bc34:	a800621e 	bne	r21,zero,80bdc0 <__udivdi3+0x304>
  80bc38:	3c00e936 	bltu	r7,r16,80bfe0 <__udivdi3+0x524>
  80bc3c:	9985403a 	cmpgeu	r2,r19,r6
  80bc40:	0007883a 	mov	r3,zero
  80bc44:	00004506 	br	80bd5c <__udivdi3+0x2a0>
  80bc48:	3000041e 	bne	r6,zero,80bc5c <__udivdi3+0x1a0>
  80bc4c:	000b883a 	mov	r5,zero
  80bc50:	01000044 	movi	r4,1
  80bc54:	08014b80 	call	8014b8 <__udivsi3>
  80bc58:	1023883a 	mov	r17,r2
  80bc5c:	00bfffd4 	movui	r2,65535
  80bc60:	14404e2e 	bgeu	r2,r17,80bd9c <__udivdi3+0x2e0>
  80bc64:	00804034 	movhi	r2,256
  80bc68:	10bfffc4 	addi	r2,r2,-1
  80bc6c:	1440d836 	bltu	r2,r17,80bfd0 <__udivdi3+0x514>
  80bc70:	00800404 	movi	r2,16
  80bc74:	8886d83a 	srl	r3,r17,r2
  80bc78:	01002074 	movhi	r4,129
  80bc7c:	210cff04 	addi	r4,r4,13308
  80bc80:	20c7883a 	add	r3,r4,r3
  80bc84:	18c00003 	ldbu	r3,0(r3)
  80bc88:	1885883a 	add	r2,r3,r2
  80bc8c:	00c00804 	movi	r3,32
  80bc90:	1887c83a 	sub	r3,r3,r2
  80bc94:	18008f1e 	bne	r3,zero,80bed4 <__udivdi3+0x418>
  80bc98:	882ad43a 	srli	r21,r17,16
  80bc9c:	8461c83a 	sub	r16,r16,r17
  80bca0:	8d3fffcc 	andi	r20,r17,65535
  80bca4:	00c00044 	movi	r3,1
  80bca8:	8009883a 	mov	r4,r16
  80bcac:	a80b883a 	mov	r5,r21
  80bcb0:	d8c00015 	stw	r3,0(sp)
  80bcb4:	080151c0 	call	80151c <__umodsi3>
  80bcb8:	8009883a 	mov	r4,r16
  80bcbc:	a80b883a 	mov	r5,r21
  80bcc0:	1027883a 	mov	r19,r2
  80bcc4:	08014b80 	call	8014b8 <__udivsi3>
  80bcc8:	9826943a 	slli	r19,r19,16
  80bccc:	9008d43a 	srli	r4,r18,16
  80bcd0:	1521383a 	mul	r16,r2,r20
  80bcd4:	102d883a 	mov	r22,r2
  80bcd8:	24c8b03a 	or	r4,r4,r19
  80bcdc:	d8c00017 	ldw	r3,0(sp)
  80bce0:	2400052e 	bgeu	r4,r16,80bcf8 <__udivdi3+0x23c>
  80bce4:	2449883a 	add	r4,r4,r17
  80bce8:	b0bfffc4 	addi	r2,r22,-1
  80bcec:	24400136 	bltu	r4,r17,80bcf4 <__udivdi3+0x238>
  80bcf0:	2400ca36 	bltu	r4,r16,80c01c <__udivdi3+0x560>
  80bcf4:	102d883a 	mov	r22,r2
  80bcf8:	2421c83a 	sub	r16,r4,r16
  80bcfc:	a80b883a 	mov	r5,r21
  80bd00:	8009883a 	mov	r4,r16
  80bd04:	d8c00015 	stw	r3,0(sp)
  80bd08:	080151c0 	call	80151c <__umodsi3>
  80bd0c:	1027883a 	mov	r19,r2
  80bd10:	a80b883a 	mov	r5,r21
  80bd14:	8009883a 	mov	r4,r16
  80bd18:	08014b80 	call	8014b8 <__udivsi3>
  80bd1c:	9826943a 	slli	r19,r19,16
  80bd20:	1529383a 	mul	r20,r2,r20
  80bd24:	94bfffcc 	andi	r18,r18,65535
  80bd28:	94e4b03a 	or	r18,r18,r19
  80bd2c:	d8c00017 	ldw	r3,0(sp)
  80bd30:	9500052e 	bgeu	r18,r20,80bd48 <__udivdi3+0x28c>
  80bd34:	8ca5883a 	add	r18,r17,r18
  80bd38:	113fffc4 	addi	r4,r2,-1
  80bd3c:	94409736 	bltu	r18,r17,80bf9c <__udivdi3+0x4e0>
  80bd40:	9500962e 	bgeu	r18,r20,80bf9c <__udivdi3+0x4e0>
  80bd44:	10bfff84 	addi	r2,r2,-2
  80bd48:	b00c943a 	slli	r6,r22,16
  80bd4c:	3084b03a 	or	r2,r6,r2
  80bd50:	00000206 	br	80bd5c <__udivdi3+0x2a0>
  80bd54:	0007883a 	mov	r3,zero
  80bd58:	0005883a 	mov	r2,zero
  80bd5c:	dfc00a17 	ldw	ra,40(sp)
  80bd60:	df000917 	ldw	fp,36(sp)
  80bd64:	ddc00817 	ldw	r23,32(sp)
  80bd68:	dd800717 	ldw	r22,28(sp)
  80bd6c:	dd400617 	ldw	r21,24(sp)
  80bd70:	dd000517 	ldw	r20,20(sp)
  80bd74:	dcc00417 	ldw	r19,16(sp)
  80bd78:	dc800317 	ldw	r18,12(sp)
  80bd7c:	dc400217 	ldw	r17,8(sp)
  80bd80:	dc000117 	ldw	r16,4(sp)
  80bd84:	dec00b04 	addi	sp,sp,44
  80bd88:	f800283a 	ret
  80bd8c:	00803fc4 	movi	r2,255
  80bd90:	11c5803a 	cmpltu	r2,r2,r7
  80bd94:	100490fa 	slli	r2,r2,3
  80bd98:	003f9e06 	br	80bc14 <__alt_mem_onchip_mem+0xff803c14>
  80bd9c:	00803fc4 	movi	r2,255
  80bda0:	1445803a 	cmpltu	r2,r2,r17
  80bda4:	100490fa 	slli	r2,r2,3
  80bda8:	003fb206 	br	80bc74 <__alt_mem_onchip_mem+0xff803c74>
  80bdac:	00804034 	movhi	r2,256
  80bdb0:	10bfffc4 	addi	r2,r2,-1
  80bdb4:	11808836 	bltu	r2,r6,80bfd8 <__udivdi3+0x51c>
  80bdb8:	00800404 	movi	r2,16
  80bdbc:	003f5606 	br	80bb18 <__alt_mem_onchip_mem+0xff803b18>
  80bdc0:	30aed83a 	srl	r23,r6,r2
  80bdc4:	3d4e983a 	sll	r7,r7,r21
  80bdc8:	80acd83a 	srl	r22,r16,r2
  80bdcc:	9884d83a 	srl	r2,r19,r2
  80bdd0:	3deeb03a 	or	r23,r7,r23
  80bdd4:	b824d43a 	srli	r18,r23,16
  80bdd8:	8560983a 	sll	r16,r16,r21
  80bddc:	b009883a 	mov	r4,r22
  80bde0:	900b883a 	mov	r5,r18
  80bde4:	3568983a 	sll	r20,r6,r21
  80bde8:	1420b03a 	or	r16,r2,r16
  80bdec:	080151c0 	call	80151c <__umodsi3>
  80bdf0:	b009883a 	mov	r4,r22
  80bdf4:	900b883a 	mov	r5,r18
  80bdf8:	1023883a 	mov	r17,r2
  80bdfc:	08014b80 	call	8014b8 <__udivsi3>
  80be00:	8808943a 	slli	r4,r17,16
  80be04:	bf3fffcc 	andi	fp,r23,65535
  80be08:	8006d43a 	srli	r3,r16,16
  80be0c:	e0a3383a 	mul	r17,fp,r2
  80be10:	100d883a 	mov	r6,r2
  80be14:	1906b03a 	or	r3,r3,r4
  80be18:	1c40042e 	bgeu	r3,r17,80be2c <__udivdi3+0x370>
  80be1c:	1dc7883a 	add	r3,r3,r23
  80be20:	10bfffc4 	addi	r2,r2,-1
  80be24:	1dc0752e 	bgeu	r3,r23,80bffc <__udivdi3+0x540>
  80be28:	100d883a 	mov	r6,r2
  80be2c:	1c63c83a 	sub	r17,r3,r17
  80be30:	900b883a 	mov	r5,r18
  80be34:	8809883a 	mov	r4,r17
  80be38:	d9800015 	stw	r6,0(sp)
  80be3c:	080151c0 	call	80151c <__umodsi3>
  80be40:	102d883a 	mov	r22,r2
  80be44:	8809883a 	mov	r4,r17
  80be48:	900b883a 	mov	r5,r18
  80be4c:	08014b80 	call	8014b8 <__udivsi3>
  80be50:	b02c943a 	slli	r22,r22,16
  80be54:	e089383a 	mul	r4,fp,r2
  80be58:	843fffcc 	andi	r16,r16,65535
  80be5c:	85a0b03a 	or	r16,r16,r22
  80be60:	d9800017 	ldw	r6,0(sp)
  80be64:	8100042e 	bgeu	r16,r4,80be78 <__udivdi3+0x3bc>
  80be68:	85e1883a 	add	r16,r16,r23
  80be6c:	10ffffc4 	addi	r3,r2,-1
  80be70:	85c05e2e 	bgeu	r16,r23,80bfec <__udivdi3+0x530>
  80be74:	1805883a 	mov	r2,r3
  80be78:	300c943a 	slli	r6,r6,16
  80be7c:	a17fffcc 	andi	r5,r20,65535
  80be80:	a028d43a 	srli	r20,r20,16
  80be84:	3084b03a 	or	r2,r6,r2
  80be88:	10ffffcc 	andi	r3,r2,65535
  80be8c:	100cd43a 	srli	r6,r2,16
  80be90:	194f383a 	mul	r7,r3,r5
  80be94:	1d07383a 	mul	r3,r3,r20
  80be98:	314b383a 	mul	r5,r6,r5
  80be9c:	3810d43a 	srli	r8,r7,16
  80bea0:	8121c83a 	sub	r16,r16,r4
  80bea4:	1947883a 	add	r3,r3,r5
  80bea8:	40c7883a 	add	r3,r8,r3
  80beac:	350d383a 	mul	r6,r6,r20
  80beb0:	1940022e 	bgeu	r3,r5,80bebc <__udivdi3+0x400>
  80beb4:	01000074 	movhi	r4,1
  80beb8:	310d883a 	add	r6,r6,r4
  80bebc:	1828d43a 	srli	r20,r3,16
  80bec0:	a18d883a 	add	r6,r20,r6
  80bec4:	81803e36 	bltu	r16,r6,80bfc0 <__udivdi3+0x504>
  80bec8:	81803826 	beq	r16,r6,80bfac <__udivdi3+0x4f0>
  80becc:	0007883a 	mov	r3,zero
  80bed0:	003fa206 	br	80bd5c <__alt_mem_onchip_mem+0xff803d5c>
  80bed4:	88e2983a 	sll	r17,r17,r3
  80bed8:	80a8d83a 	srl	r20,r16,r2
  80bedc:	80e0983a 	sll	r16,r16,r3
  80bee0:	882ad43a 	srli	r21,r17,16
  80bee4:	9884d83a 	srl	r2,r19,r2
  80bee8:	a009883a 	mov	r4,r20
  80beec:	a80b883a 	mov	r5,r21
  80bef0:	142eb03a 	or	r23,r2,r16
  80bef4:	98e4983a 	sll	r18,r19,r3
  80bef8:	080151c0 	call	80151c <__umodsi3>
  80befc:	a009883a 	mov	r4,r20
  80bf00:	a80b883a 	mov	r5,r21
  80bf04:	1021883a 	mov	r16,r2
  80bf08:	08014b80 	call	8014b8 <__udivsi3>
  80bf0c:	1039883a 	mov	fp,r2
  80bf10:	8d3fffcc 	andi	r20,r17,65535
  80bf14:	8020943a 	slli	r16,r16,16
  80bf18:	b804d43a 	srli	r2,r23,16
  80bf1c:	a72d383a 	mul	r22,r20,fp
  80bf20:	1404b03a 	or	r2,r2,r16
  80bf24:	1580062e 	bgeu	r2,r22,80bf40 <__udivdi3+0x484>
  80bf28:	1445883a 	add	r2,r2,r17
  80bf2c:	e0ffffc4 	addi	r3,fp,-1
  80bf30:	14403836 	bltu	r2,r17,80c014 <__udivdi3+0x558>
  80bf34:	1580372e 	bgeu	r2,r22,80c014 <__udivdi3+0x558>
  80bf38:	e73fff84 	addi	fp,fp,-2
  80bf3c:	1445883a 	add	r2,r2,r17
  80bf40:	15adc83a 	sub	r22,r2,r22
  80bf44:	a80b883a 	mov	r5,r21
  80bf48:	b009883a 	mov	r4,r22
  80bf4c:	080151c0 	call	80151c <__umodsi3>
  80bf50:	1027883a 	mov	r19,r2
  80bf54:	b009883a 	mov	r4,r22
  80bf58:	a80b883a 	mov	r5,r21
  80bf5c:	08014b80 	call	8014b8 <__udivsi3>
  80bf60:	9826943a 	slli	r19,r19,16
  80bf64:	a0a1383a 	mul	r16,r20,r2
  80bf68:	b93fffcc 	andi	r4,r23,65535
  80bf6c:	24c8b03a 	or	r4,r4,r19
  80bf70:	2400062e 	bgeu	r4,r16,80bf8c <__udivdi3+0x4d0>
  80bf74:	2449883a 	add	r4,r4,r17
  80bf78:	10ffffc4 	addi	r3,r2,-1
  80bf7c:	24402336 	bltu	r4,r17,80c00c <__udivdi3+0x550>
  80bf80:	2400222e 	bgeu	r4,r16,80c00c <__udivdi3+0x550>
  80bf84:	10bfff84 	addi	r2,r2,-2
  80bf88:	2449883a 	add	r4,r4,r17
  80bf8c:	e038943a 	slli	fp,fp,16
  80bf90:	2421c83a 	sub	r16,r4,r16
  80bf94:	e086b03a 	or	r3,fp,r2
  80bf98:	003f4306 	br	80bca8 <__alt_mem_onchip_mem+0xff803ca8>
  80bf9c:	2005883a 	mov	r2,r4
  80bfa0:	003f6906 	br	80bd48 <__alt_mem_onchip_mem+0xff803d48>
  80bfa4:	1805883a 	mov	r2,r3
  80bfa8:	003f0f06 	br	80bbe8 <__alt_mem_onchip_mem+0xff803be8>
  80bfac:	1806943a 	slli	r3,r3,16
  80bfb0:	9d66983a 	sll	r19,r19,r21
  80bfb4:	39ffffcc 	andi	r7,r7,65535
  80bfb8:	19c7883a 	add	r3,r3,r7
  80bfbc:	98ffc32e 	bgeu	r19,r3,80becc <__alt_mem_onchip_mem+0xff803ecc>
  80bfc0:	10bfffc4 	addi	r2,r2,-1
  80bfc4:	003fc106 	br	80becc <__alt_mem_onchip_mem+0xff803ecc>
  80bfc8:	00800604 	movi	r2,24
  80bfcc:	003f1106 	br	80bc14 <__alt_mem_onchip_mem+0xff803c14>
  80bfd0:	00800604 	movi	r2,24
  80bfd4:	003f2706 	br	80bc74 <__alt_mem_onchip_mem+0xff803c74>
  80bfd8:	00800604 	movi	r2,24
  80bfdc:	003ece06 	br	80bb18 <__alt_mem_onchip_mem+0xff803b18>
  80bfe0:	0007883a 	mov	r3,zero
  80bfe4:	00800044 	movi	r2,1
  80bfe8:	003f5c06 	br	80bd5c <__alt_mem_onchip_mem+0xff803d5c>
  80bfec:	813fa12e 	bgeu	r16,r4,80be74 <__alt_mem_onchip_mem+0xff803e74>
  80bff0:	10bfff84 	addi	r2,r2,-2
  80bff4:	85e1883a 	add	r16,r16,r23
  80bff8:	003f9f06 	br	80be78 <__alt_mem_onchip_mem+0xff803e78>
  80bffc:	1c7f8a2e 	bgeu	r3,r17,80be28 <__alt_mem_onchip_mem+0xff803e28>
  80c000:	31bfff84 	addi	r6,r6,-2
  80c004:	1dc7883a 	add	r3,r3,r23
  80c008:	003f8806 	br	80be2c <__alt_mem_onchip_mem+0xff803e2c>
  80c00c:	1805883a 	mov	r2,r3
  80c010:	003fde06 	br	80bf8c <__alt_mem_onchip_mem+0xff803f8c>
  80c014:	1839883a 	mov	fp,r3
  80c018:	003fc906 	br	80bf40 <__alt_mem_onchip_mem+0xff803f40>
  80c01c:	b5bfff84 	addi	r22,r22,-2
  80c020:	2449883a 	add	r4,r4,r17
  80c024:	003f3406 	br	80bcf8 <__alt_mem_onchip_mem+0xff803cf8>
  80c028:	b5bfff84 	addi	r22,r22,-2
  80c02c:	1445883a 	add	r2,r2,r17
  80c030:	003edb06 	br	80bba0 <__alt_mem_onchip_mem+0xff803ba0>

0080c034 <__umoddi3>:
  80c034:	defff404 	addi	sp,sp,-48
  80c038:	df000a15 	stw	fp,40(sp)
  80c03c:	dc400315 	stw	r17,12(sp)
  80c040:	dc000215 	stw	r16,8(sp)
  80c044:	dfc00b15 	stw	ra,44(sp)
  80c048:	ddc00915 	stw	r23,36(sp)
  80c04c:	dd800815 	stw	r22,32(sp)
  80c050:	dd400715 	stw	r21,28(sp)
  80c054:	dd000615 	stw	r20,24(sp)
  80c058:	dcc00515 	stw	r19,20(sp)
  80c05c:	dc800415 	stw	r18,16(sp)
  80c060:	2021883a 	mov	r16,r4
  80c064:	2823883a 	mov	r17,r5
  80c068:	2839883a 	mov	fp,r5
  80c06c:	38003c1e 	bne	r7,zero,80c160 <__umoddi3+0x12c>
  80c070:	3027883a 	mov	r19,r6
  80c074:	2029883a 	mov	r20,r4
  80c078:	2980512e 	bgeu	r5,r6,80c1c0 <__umoddi3+0x18c>
  80c07c:	00bfffd4 	movui	r2,65535
  80c080:	11809a36 	bltu	r2,r6,80c2ec <__umoddi3+0x2b8>
  80c084:	01003fc4 	movi	r4,255
  80c088:	2189803a 	cmpltu	r4,r4,r6
  80c08c:	200890fa 	slli	r4,r4,3
  80c090:	3104d83a 	srl	r2,r6,r4
  80c094:	00c02074 	movhi	r3,129
  80c098:	18ccff04 	addi	r3,r3,13308
  80c09c:	1885883a 	add	r2,r3,r2
  80c0a0:	10c00003 	ldbu	r3,0(r2)
  80c0a4:	00800804 	movi	r2,32
  80c0a8:	1909883a 	add	r4,r3,r4
  80c0ac:	1125c83a 	sub	r18,r2,r4
  80c0b0:	90000526 	beq	r18,zero,80c0c8 <__umoddi3+0x94>
  80c0b4:	8ca2983a 	sll	r17,r17,r18
  80c0b8:	8108d83a 	srl	r4,r16,r4
  80c0bc:	34a6983a 	sll	r19,r6,r18
  80c0c0:	84a8983a 	sll	r20,r16,r18
  80c0c4:	2478b03a 	or	fp,r4,r17
  80c0c8:	982ed43a 	srli	r23,r19,16
  80c0cc:	e009883a 	mov	r4,fp
  80c0d0:	9dbfffcc 	andi	r22,r19,65535
  80c0d4:	b80b883a 	mov	r5,r23
  80c0d8:	080151c0 	call	80151c <__umodsi3>
  80c0dc:	e009883a 	mov	r4,fp
  80c0e0:	b80b883a 	mov	r5,r23
  80c0e4:	102b883a 	mov	r21,r2
  80c0e8:	08014b80 	call	8014b8 <__udivsi3>
  80c0ec:	a806943a 	slli	r3,r21,16
  80c0f0:	a008d43a 	srli	r4,r20,16
  80c0f4:	b085383a 	mul	r2,r22,r2
  80c0f8:	20c8b03a 	or	r4,r4,r3
  80c0fc:	2080032e 	bgeu	r4,r2,80c10c <__umoddi3+0xd8>
  80c100:	24c9883a 	add	r4,r4,r19
  80c104:	24c00136 	bltu	r4,r19,80c10c <__umoddi3+0xd8>
  80c108:	20811036 	bltu	r4,r2,80c54c <__umoddi3+0x518>
  80c10c:	20abc83a 	sub	r21,r4,r2
  80c110:	b80b883a 	mov	r5,r23
  80c114:	a809883a 	mov	r4,r21
  80c118:	080151c0 	call	80151c <__umodsi3>
  80c11c:	1023883a 	mov	r17,r2
  80c120:	b80b883a 	mov	r5,r23
  80c124:	a809883a 	mov	r4,r21
  80c128:	08014b80 	call	8014b8 <__udivsi3>
  80c12c:	8822943a 	slli	r17,r17,16
  80c130:	b085383a 	mul	r2,r22,r2
  80c134:	a0ffffcc 	andi	r3,r20,65535
  80c138:	1c46b03a 	or	r3,r3,r17
  80c13c:	1880042e 	bgeu	r3,r2,80c150 <__umoddi3+0x11c>
  80c140:	1cc7883a 	add	r3,r3,r19
  80c144:	1cc00236 	bltu	r3,r19,80c150 <__umoddi3+0x11c>
  80c148:	1880012e 	bgeu	r3,r2,80c150 <__umoddi3+0x11c>
  80c14c:	1cc7883a 	add	r3,r3,r19
  80c150:	1885c83a 	sub	r2,r3,r2
  80c154:	1484d83a 	srl	r2,r2,r18
  80c158:	0007883a 	mov	r3,zero
  80c15c:	00004f06 	br	80c29c <__umoddi3+0x268>
  80c160:	29c04c36 	bltu	r5,r7,80c294 <__umoddi3+0x260>
  80c164:	00bfffd4 	movui	r2,65535
  80c168:	11c0582e 	bgeu	r2,r7,80c2cc <__umoddi3+0x298>
  80c16c:	00804034 	movhi	r2,256
  80c170:	10bfffc4 	addi	r2,r2,-1
  80c174:	11c0e736 	bltu	r2,r7,80c514 <__umoddi3+0x4e0>
  80c178:	01000404 	movi	r4,16
  80c17c:	3904d83a 	srl	r2,r7,r4
  80c180:	00c02074 	movhi	r3,129
  80c184:	18ccff04 	addi	r3,r3,13308
  80c188:	1885883a 	add	r2,r3,r2
  80c18c:	14c00003 	ldbu	r19,0(r2)
  80c190:	00c00804 	movi	r3,32
  80c194:	9927883a 	add	r19,r19,r4
  80c198:	1ce9c83a 	sub	r20,r3,r19
  80c19c:	a000581e 	bne	r20,zero,80c300 <__umoddi3+0x2cc>
  80c1a0:	3c400136 	bltu	r7,r17,80c1a8 <__umoddi3+0x174>
  80c1a4:	8180eb36 	bltu	r16,r6,80c554 <__umoddi3+0x520>
  80c1a8:	8185c83a 	sub	r2,r16,r6
  80c1ac:	89e3c83a 	sub	r17,r17,r7
  80c1b0:	8089803a 	cmpltu	r4,r16,r2
  80c1b4:	8939c83a 	sub	fp,r17,r4
  80c1b8:	e007883a 	mov	r3,fp
  80c1bc:	00003706 	br	80c29c <__umoddi3+0x268>
  80c1c0:	3000041e 	bne	r6,zero,80c1d4 <__umoddi3+0x1a0>
  80c1c4:	000b883a 	mov	r5,zero
  80c1c8:	01000044 	movi	r4,1
  80c1cc:	08014b80 	call	8014b8 <__udivsi3>
  80c1d0:	1027883a 	mov	r19,r2
  80c1d4:	00bfffd4 	movui	r2,65535
  80c1d8:	14c0402e 	bgeu	r2,r19,80c2dc <__umoddi3+0x2a8>
  80c1dc:	00804034 	movhi	r2,256
  80c1e0:	10bfffc4 	addi	r2,r2,-1
  80c1e4:	14c0cd36 	bltu	r2,r19,80c51c <__umoddi3+0x4e8>
  80c1e8:	00800404 	movi	r2,16
  80c1ec:	9886d83a 	srl	r3,r19,r2
  80c1f0:	01002074 	movhi	r4,129
  80c1f4:	210cff04 	addi	r4,r4,13308
  80c1f8:	20c7883a 	add	r3,r4,r3
  80c1fc:	18c00003 	ldbu	r3,0(r3)
  80c200:	1887883a 	add	r3,r3,r2
  80c204:	00800804 	movi	r2,32
  80c208:	10e5c83a 	sub	r18,r2,r3
  80c20c:	9000901e 	bne	r18,zero,80c450 <__umoddi3+0x41c>
  80c210:	982cd43a 	srli	r22,r19,16
  80c214:	8ce3c83a 	sub	r17,r17,r19
  80c218:	9d7fffcc 	andi	r21,r19,65535
  80c21c:	b00b883a 	mov	r5,r22
  80c220:	8809883a 	mov	r4,r17
  80c224:	080151c0 	call	80151c <__umodsi3>
  80c228:	8809883a 	mov	r4,r17
  80c22c:	b00b883a 	mov	r5,r22
  80c230:	1021883a 	mov	r16,r2
  80c234:	08014b80 	call	8014b8 <__udivsi3>
  80c238:	8006943a 	slli	r3,r16,16
  80c23c:	a008d43a 	srli	r4,r20,16
  80c240:	1545383a 	mul	r2,r2,r21
  80c244:	20c8b03a 	or	r4,r4,r3
  80c248:	2080042e 	bgeu	r4,r2,80c25c <__umoddi3+0x228>
  80c24c:	24c9883a 	add	r4,r4,r19
  80c250:	24c00236 	bltu	r4,r19,80c25c <__umoddi3+0x228>
  80c254:	2080012e 	bgeu	r4,r2,80c25c <__umoddi3+0x228>
  80c258:	24c9883a 	add	r4,r4,r19
  80c25c:	20a1c83a 	sub	r16,r4,r2
  80c260:	b00b883a 	mov	r5,r22
  80c264:	8009883a 	mov	r4,r16
  80c268:	080151c0 	call	80151c <__umodsi3>
  80c26c:	1023883a 	mov	r17,r2
  80c270:	b00b883a 	mov	r5,r22
  80c274:	8009883a 	mov	r4,r16
  80c278:	08014b80 	call	8014b8 <__udivsi3>
  80c27c:	8822943a 	slli	r17,r17,16
  80c280:	1545383a 	mul	r2,r2,r21
  80c284:	a53fffcc 	andi	r20,r20,65535
  80c288:	a446b03a 	or	r3,r20,r17
  80c28c:	18bfb02e 	bgeu	r3,r2,80c150 <__alt_mem_onchip_mem+0xff804150>
  80c290:	003fab06 	br	80c140 <__alt_mem_onchip_mem+0xff804140>
  80c294:	2005883a 	mov	r2,r4
  80c298:	2807883a 	mov	r3,r5
  80c29c:	dfc00b17 	ldw	ra,44(sp)
  80c2a0:	df000a17 	ldw	fp,40(sp)
  80c2a4:	ddc00917 	ldw	r23,36(sp)
  80c2a8:	dd800817 	ldw	r22,32(sp)
  80c2ac:	dd400717 	ldw	r21,28(sp)
  80c2b0:	dd000617 	ldw	r20,24(sp)
  80c2b4:	dcc00517 	ldw	r19,20(sp)
  80c2b8:	dc800417 	ldw	r18,16(sp)
  80c2bc:	dc400317 	ldw	r17,12(sp)
  80c2c0:	dc000217 	ldw	r16,8(sp)
  80c2c4:	dec00c04 	addi	sp,sp,48
  80c2c8:	f800283a 	ret
  80c2cc:	04c03fc4 	movi	r19,255
  80c2d0:	99c9803a 	cmpltu	r4,r19,r7
  80c2d4:	200890fa 	slli	r4,r4,3
  80c2d8:	003fa806 	br	80c17c <__alt_mem_onchip_mem+0xff80417c>
  80c2dc:	00803fc4 	movi	r2,255
  80c2e0:	14c5803a 	cmpltu	r2,r2,r19
  80c2e4:	100490fa 	slli	r2,r2,3
  80c2e8:	003fc006 	br	80c1ec <__alt_mem_onchip_mem+0xff8041ec>
  80c2ec:	00804034 	movhi	r2,256
  80c2f0:	10bfffc4 	addi	r2,r2,-1
  80c2f4:	11808b36 	bltu	r2,r6,80c524 <__umoddi3+0x4f0>
  80c2f8:	01000404 	movi	r4,16
  80c2fc:	003f6406 	br	80c090 <__alt_mem_onchip_mem+0xff804090>
  80c300:	34c4d83a 	srl	r2,r6,r19
  80c304:	3d0e983a 	sll	r7,r7,r20
  80c308:	8cf8d83a 	srl	fp,r17,r19
  80c30c:	8d10983a 	sll	r8,r17,r20
  80c310:	38aab03a 	or	r21,r7,r2
  80c314:	a82cd43a 	srli	r22,r21,16
  80c318:	84e2d83a 	srl	r17,r16,r19
  80c31c:	e009883a 	mov	r4,fp
  80c320:	b00b883a 	mov	r5,r22
  80c324:	8a22b03a 	or	r17,r17,r8
  80c328:	3524983a 	sll	r18,r6,r20
  80c32c:	080151c0 	call	80151c <__umodsi3>
  80c330:	e009883a 	mov	r4,fp
  80c334:	b00b883a 	mov	r5,r22
  80c338:	102f883a 	mov	r23,r2
  80c33c:	08014b80 	call	8014b8 <__udivsi3>
  80c340:	100d883a 	mov	r6,r2
  80c344:	b808943a 	slli	r4,r23,16
  80c348:	aa3fffcc 	andi	r8,r21,65535
  80c34c:	8804d43a 	srli	r2,r17,16
  80c350:	41af383a 	mul	r23,r8,r6
  80c354:	8520983a 	sll	r16,r16,r20
  80c358:	1104b03a 	or	r2,r2,r4
  80c35c:	15c0042e 	bgeu	r2,r23,80c370 <__umoddi3+0x33c>
  80c360:	1545883a 	add	r2,r2,r21
  80c364:	30ffffc4 	addi	r3,r6,-1
  80c368:	1540742e 	bgeu	r2,r21,80c53c <__umoddi3+0x508>
  80c36c:	180d883a 	mov	r6,r3
  80c370:	15efc83a 	sub	r23,r2,r23
  80c374:	b00b883a 	mov	r5,r22
  80c378:	b809883a 	mov	r4,r23
  80c37c:	d9800115 	stw	r6,4(sp)
  80c380:	da000015 	stw	r8,0(sp)
  80c384:	080151c0 	call	80151c <__umodsi3>
  80c388:	b00b883a 	mov	r5,r22
  80c38c:	b809883a 	mov	r4,r23
  80c390:	1039883a 	mov	fp,r2
  80c394:	08014b80 	call	8014b8 <__udivsi3>
  80c398:	da000017 	ldw	r8,0(sp)
  80c39c:	e038943a 	slli	fp,fp,16
  80c3a0:	100b883a 	mov	r5,r2
  80c3a4:	4089383a 	mul	r4,r8,r2
  80c3a8:	8a3fffcc 	andi	r8,r17,65535
  80c3ac:	4710b03a 	or	r8,r8,fp
  80c3b0:	d9800117 	ldw	r6,4(sp)
  80c3b4:	4100042e 	bgeu	r8,r4,80c3c8 <__umoddi3+0x394>
  80c3b8:	4551883a 	add	r8,r8,r21
  80c3bc:	10bfffc4 	addi	r2,r2,-1
  80c3c0:	45405a2e 	bgeu	r8,r21,80c52c <__umoddi3+0x4f8>
  80c3c4:	100b883a 	mov	r5,r2
  80c3c8:	300c943a 	slli	r6,r6,16
  80c3cc:	91ffffcc 	andi	r7,r18,65535
  80c3d0:	9004d43a 	srli	r2,r18,16
  80c3d4:	314cb03a 	or	r6,r6,r5
  80c3d8:	317fffcc 	andi	r5,r6,65535
  80c3dc:	300cd43a 	srli	r6,r6,16
  80c3e0:	29d3383a 	mul	r9,r5,r7
  80c3e4:	288b383a 	mul	r5,r5,r2
  80c3e8:	31cf383a 	mul	r7,r6,r7
  80c3ec:	4806d43a 	srli	r3,r9,16
  80c3f0:	4111c83a 	sub	r8,r8,r4
  80c3f4:	29cb883a 	add	r5,r5,r7
  80c3f8:	194b883a 	add	r5,r3,r5
  80c3fc:	3085383a 	mul	r2,r6,r2
  80c400:	29c0022e 	bgeu	r5,r7,80c40c <__umoddi3+0x3d8>
  80c404:	00c00074 	movhi	r3,1
  80c408:	10c5883a 	add	r2,r2,r3
  80c40c:	2808d43a 	srli	r4,r5,16
  80c410:	280a943a 	slli	r5,r5,16
  80c414:	4a7fffcc 	andi	r9,r9,65535
  80c418:	2085883a 	add	r2,r4,r2
  80c41c:	2a4b883a 	add	r5,r5,r9
  80c420:	40803636 	bltu	r8,r2,80c4fc <__umoddi3+0x4c8>
  80c424:	40804d26 	beq	r8,r2,80c55c <__umoddi3+0x528>
  80c428:	4089c83a 	sub	r4,r8,r2
  80c42c:	280f883a 	mov	r7,r5
  80c430:	81cfc83a 	sub	r7,r16,r7
  80c434:	81c7803a 	cmpltu	r3,r16,r7
  80c438:	20c7c83a 	sub	r3,r4,r3
  80c43c:	1cc4983a 	sll	r2,r3,r19
  80c440:	3d0ed83a 	srl	r7,r7,r20
  80c444:	1d06d83a 	srl	r3,r3,r20
  80c448:	11c4b03a 	or	r2,r2,r7
  80c44c:	003f9306 	br	80c29c <__alt_mem_onchip_mem+0xff80429c>
  80c450:	9ca6983a 	sll	r19,r19,r18
  80c454:	88e8d83a 	srl	r20,r17,r3
  80c458:	80c4d83a 	srl	r2,r16,r3
  80c45c:	982cd43a 	srli	r22,r19,16
  80c460:	8ca2983a 	sll	r17,r17,r18
  80c464:	a009883a 	mov	r4,r20
  80c468:	b00b883a 	mov	r5,r22
  80c46c:	1478b03a 	or	fp,r2,r17
  80c470:	080151c0 	call	80151c <__umodsi3>
  80c474:	a009883a 	mov	r4,r20
  80c478:	b00b883a 	mov	r5,r22
  80c47c:	1023883a 	mov	r17,r2
  80c480:	08014b80 	call	8014b8 <__udivsi3>
  80c484:	9d7fffcc 	andi	r21,r19,65535
  80c488:	880a943a 	slli	r5,r17,16
  80c48c:	e008d43a 	srli	r4,fp,16
  80c490:	a885383a 	mul	r2,r21,r2
  80c494:	84a8983a 	sll	r20,r16,r18
  80c498:	2148b03a 	or	r4,r4,r5
  80c49c:	2080042e 	bgeu	r4,r2,80c4b0 <__umoddi3+0x47c>
  80c4a0:	24c9883a 	add	r4,r4,r19
  80c4a4:	24c00236 	bltu	r4,r19,80c4b0 <__umoddi3+0x47c>
  80c4a8:	2080012e 	bgeu	r4,r2,80c4b0 <__umoddi3+0x47c>
  80c4ac:	24c9883a 	add	r4,r4,r19
  80c4b0:	20a3c83a 	sub	r17,r4,r2
  80c4b4:	b00b883a 	mov	r5,r22
  80c4b8:	8809883a 	mov	r4,r17
  80c4bc:	080151c0 	call	80151c <__umodsi3>
  80c4c0:	102f883a 	mov	r23,r2
  80c4c4:	8809883a 	mov	r4,r17
  80c4c8:	b00b883a 	mov	r5,r22
  80c4cc:	08014b80 	call	8014b8 <__udivsi3>
  80c4d0:	b82e943a 	slli	r23,r23,16
  80c4d4:	a885383a 	mul	r2,r21,r2
  80c4d8:	e13fffcc 	andi	r4,fp,65535
  80c4dc:	25c8b03a 	or	r4,r4,r23
  80c4e0:	2080042e 	bgeu	r4,r2,80c4f4 <__umoddi3+0x4c0>
  80c4e4:	24c9883a 	add	r4,r4,r19
  80c4e8:	24c00236 	bltu	r4,r19,80c4f4 <__umoddi3+0x4c0>
  80c4ec:	2080012e 	bgeu	r4,r2,80c4f4 <__umoddi3+0x4c0>
  80c4f0:	24c9883a 	add	r4,r4,r19
  80c4f4:	20a3c83a 	sub	r17,r4,r2
  80c4f8:	003f4806 	br	80c21c <__alt_mem_onchip_mem+0xff80421c>
  80c4fc:	2c8fc83a 	sub	r7,r5,r18
  80c500:	1545c83a 	sub	r2,r2,r21
  80c504:	29cb803a 	cmpltu	r5,r5,r7
  80c508:	1145c83a 	sub	r2,r2,r5
  80c50c:	4089c83a 	sub	r4,r8,r2
  80c510:	003fc706 	br	80c430 <__alt_mem_onchip_mem+0xff804430>
  80c514:	01000604 	movi	r4,24
  80c518:	003f1806 	br	80c17c <__alt_mem_onchip_mem+0xff80417c>
  80c51c:	00800604 	movi	r2,24
  80c520:	003f3206 	br	80c1ec <__alt_mem_onchip_mem+0xff8041ec>
  80c524:	01000604 	movi	r4,24
  80c528:	003ed906 	br	80c090 <__alt_mem_onchip_mem+0xff804090>
  80c52c:	413fa52e 	bgeu	r8,r4,80c3c4 <__alt_mem_onchip_mem+0xff8043c4>
  80c530:	297fff84 	addi	r5,r5,-2
  80c534:	4551883a 	add	r8,r8,r21
  80c538:	003fa306 	br	80c3c8 <__alt_mem_onchip_mem+0xff8043c8>
  80c53c:	15ff8b2e 	bgeu	r2,r23,80c36c <__alt_mem_onchip_mem+0xff80436c>
  80c540:	31bfff84 	addi	r6,r6,-2
  80c544:	1545883a 	add	r2,r2,r21
  80c548:	003f8906 	br	80c370 <__alt_mem_onchip_mem+0xff804370>
  80c54c:	24c9883a 	add	r4,r4,r19
  80c550:	003eee06 	br	80c10c <__alt_mem_onchip_mem+0xff80410c>
  80c554:	8005883a 	mov	r2,r16
  80c558:	003f1706 	br	80c1b8 <__alt_mem_onchip_mem+0xff8041b8>
  80c55c:	817fe736 	bltu	r16,r5,80c4fc <__alt_mem_onchip_mem+0xff8044fc>
  80c560:	280f883a 	mov	r7,r5
  80c564:	0009883a 	mov	r4,zero
  80c568:	003fb106 	br	80c430 <__alt_mem_onchip_mem+0xff804430>

0080c56c <__adddf3>:
  80c56c:	02c00434 	movhi	r11,16
  80c570:	5affffc4 	addi	r11,r11,-1
  80c574:	2806d7fa 	srli	r3,r5,31
  80c578:	2ad4703a 	and	r10,r5,r11
  80c57c:	3ad2703a 	and	r9,r7,r11
  80c580:	3804d53a 	srli	r2,r7,20
  80c584:	3018d77a 	srli	r12,r6,29
  80c588:	280ad53a 	srli	r5,r5,20
  80c58c:	501490fa 	slli	r10,r10,3
  80c590:	2010d77a 	srli	r8,r4,29
  80c594:	481290fa 	slli	r9,r9,3
  80c598:	380ed7fa 	srli	r7,r7,31
  80c59c:	defffb04 	addi	sp,sp,-20
  80c5a0:	dc800215 	stw	r18,8(sp)
  80c5a4:	dc400115 	stw	r17,4(sp)
  80c5a8:	dc000015 	stw	r16,0(sp)
  80c5ac:	dfc00415 	stw	ra,16(sp)
  80c5b0:	dcc00315 	stw	r19,12(sp)
  80c5b4:	1c803fcc 	andi	r18,r3,255
  80c5b8:	2c01ffcc 	andi	r16,r5,2047
  80c5bc:	5210b03a 	or	r8,r10,r8
  80c5c0:	202290fa 	slli	r17,r4,3
  80c5c4:	1081ffcc 	andi	r2,r2,2047
  80c5c8:	4b12b03a 	or	r9,r9,r12
  80c5cc:	300c90fa 	slli	r6,r6,3
  80c5d0:	91c07526 	beq	r18,r7,80c7a8 <__adddf3+0x23c>
  80c5d4:	8087c83a 	sub	r3,r16,r2
  80c5d8:	00c0ab0e 	bge	zero,r3,80c888 <__adddf3+0x31c>
  80c5dc:	10002a1e 	bne	r2,zero,80c688 <__adddf3+0x11c>
  80c5e0:	4984b03a 	or	r2,r9,r6
  80c5e4:	1000961e 	bne	r2,zero,80c840 <__adddf3+0x2d4>
  80c5e8:	888001cc 	andi	r2,r17,7
  80c5ec:	10000726 	beq	r2,zero,80c60c <__adddf3+0xa0>
  80c5f0:	888003cc 	andi	r2,r17,15
  80c5f4:	00c00104 	movi	r3,4
  80c5f8:	10c00426 	beq	r2,r3,80c60c <__adddf3+0xa0>
  80c5fc:	88c7883a 	add	r3,r17,r3
  80c600:	1c63803a 	cmpltu	r17,r3,r17
  80c604:	4451883a 	add	r8,r8,r17
  80c608:	1823883a 	mov	r17,r3
  80c60c:	4080202c 	andhi	r2,r8,128
  80c610:	10005926 	beq	r2,zero,80c778 <__adddf3+0x20c>
  80c614:	84000044 	addi	r16,r16,1
  80c618:	0081ffc4 	movi	r2,2047
  80c61c:	8080ba26 	beq	r16,r2,80c908 <__adddf3+0x39c>
  80c620:	00bfe034 	movhi	r2,65408
  80c624:	10bfffc4 	addi	r2,r2,-1
  80c628:	4090703a 	and	r8,r8,r2
  80c62c:	4004977a 	slli	r2,r8,29
  80c630:	4010927a 	slli	r8,r8,9
  80c634:	8822d0fa 	srli	r17,r17,3
  80c638:	8401ffcc 	andi	r16,r16,2047
  80c63c:	4010d33a 	srli	r8,r8,12
  80c640:	9007883a 	mov	r3,r18
  80c644:	1444b03a 	or	r2,r2,r17
  80c648:	8401ffcc 	andi	r16,r16,2047
  80c64c:	8020953a 	slli	r16,r16,20
  80c650:	18c03fcc 	andi	r3,r3,255
  80c654:	01000434 	movhi	r4,16
  80c658:	213fffc4 	addi	r4,r4,-1
  80c65c:	180697fa 	slli	r3,r3,31
  80c660:	4110703a 	and	r8,r8,r4
  80c664:	4410b03a 	or	r8,r8,r16
  80c668:	40c6b03a 	or	r3,r8,r3
  80c66c:	dfc00417 	ldw	ra,16(sp)
  80c670:	dcc00317 	ldw	r19,12(sp)
  80c674:	dc800217 	ldw	r18,8(sp)
  80c678:	dc400117 	ldw	r17,4(sp)
  80c67c:	dc000017 	ldw	r16,0(sp)
  80c680:	dec00504 	addi	sp,sp,20
  80c684:	f800283a 	ret
  80c688:	0081ffc4 	movi	r2,2047
  80c68c:	80bfd626 	beq	r16,r2,80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80c690:	4a402034 	orhi	r9,r9,128
  80c694:	00800e04 	movi	r2,56
  80c698:	10c09f16 	blt	r2,r3,80c918 <__adddf3+0x3ac>
  80c69c:	008007c4 	movi	r2,31
  80c6a0:	10c0c216 	blt	r2,r3,80c9ac <__adddf3+0x440>
  80c6a4:	00800804 	movi	r2,32
  80c6a8:	10c5c83a 	sub	r2,r2,r3
  80c6ac:	488a983a 	sll	r5,r9,r2
  80c6b0:	30c8d83a 	srl	r4,r6,r3
  80c6b4:	3084983a 	sll	r2,r6,r2
  80c6b8:	48c6d83a 	srl	r3,r9,r3
  80c6bc:	290cb03a 	or	r6,r5,r4
  80c6c0:	1004c03a 	cmpne	r2,r2,zero
  80c6c4:	308cb03a 	or	r6,r6,r2
  80c6c8:	898dc83a 	sub	r6,r17,r6
  80c6cc:	89a3803a 	cmpltu	r17,r17,r6
  80c6d0:	40d1c83a 	sub	r8,r8,r3
  80c6d4:	4451c83a 	sub	r8,r8,r17
  80c6d8:	3023883a 	mov	r17,r6
  80c6dc:	4080202c 	andhi	r2,r8,128
  80c6e0:	10002326 	beq	r2,zero,80c770 <__adddf3+0x204>
  80c6e4:	04c02034 	movhi	r19,128
  80c6e8:	9cffffc4 	addi	r19,r19,-1
  80c6ec:	44e6703a 	and	r19,r8,r19
  80c6f0:	98007626 	beq	r19,zero,80c8cc <__adddf3+0x360>
  80c6f4:	9809883a 	mov	r4,r19
  80c6f8:	080eb700 	call	80eb70 <__clzsi2>
  80c6fc:	10fffe04 	addi	r3,r2,-8
  80c700:	010007c4 	movi	r4,31
  80c704:	20c07716 	blt	r4,r3,80c8e4 <__adddf3+0x378>
  80c708:	00800804 	movi	r2,32
  80c70c:	10c5c83a 	sub	r2,r2,r3
  80c710:	8884d83a 	srl	r2,r17,r2
  80c714:	98d0983a 	sll	r8,r19,r3
  80c718:	88e2983a 	sll	r17,r17,r3
  80c71c:	1204b03a 	or	r2,r2,r8
  80c720:	1c007416 	blt	r3,r16,80c8f4 <__adddf3+0x388>
  80c724:	1c21c83a 	sub	r16,r3,r16
  80c728:	82000044 	addi	r8,r16,1
  80c72c:	00c007c4 	movi	r3,31
  80c730:	1a009116 	blt	r3,r8,80c978 <__adddf3+0x40c>
  80c734:	00c00804 	movi	r3,32
  80c738:	1a07c83a 	sub	r3,r3,r8
  80c73c:	8a08d83a 	srl	r4,r17,r8
  80c740:	88e2983a 	sll	r17,r17,r3
  80c744:	10c6983a 	sll	r3,r2,r3
  80c748:	1210d83a 	srl	r8,r2,r8
  80c74c:	8804c03a 	cmpne	r2,r17,zero
  80c750:	1906b03a 	or	r3,r3,r4
  80c754:	18a2b03a 	or	r17,r3,r2
  80c758:	0021883a 	mov	r16,zero
  80c75c:	003fa206 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80c760:	1890b03a 	or	r8,r3,r2
  80c764:	40017d26 	beq	r8,zero,80cd5c <__adddf3+0x7f0>
  80c768:	1011883a 	mov	r8,r2
  80c76c:	1823883a 	mov	r17,r3
  80c770:	888001cc 	andi	r2,r17,7
  80c774:	103f9e1e 	bne	r2,zero,80c5f0 <__alt_mem_onchip_mem+0xff8045f0>
  80c778:	4004977a 	slli	r2,r8,29
  80c77c:	8822d0fa 	srli	r17,r17,3
  80c780:	4010d0fa 	srli	r8,r8,3
  80c784:	9007883a 	mov	r3,r18
  80c788:	1444b03a 	or	r2,r2,r17
  80c78c:	0101ffc4 	movi	r4,2047
  80c790:	81002426 	beq	r16,r4,80c824 <__adddf3+0x2b8>
  80c794:	8120703a 	and	r16,r16,r4
  80c798:	01000434 	movhi	r4,16
  80c79c:	213fffc4 	addi	r4,r4,-1
  80c7a0:	4110703a 	and	r8,r8,r4
  80c7a4:	003fa806 	br	80c648 <__alt_mem_onchip_mem+0xff804648>
  80c7a8:	8089c83a 	sub	r4,r16,r2
  80c7ac:	01005e0e 	bge	zero,r4,80c928 <__adddf3+0x3bc>
  80c7b0:	10002b26 	beq	r2,zero,80c860 <__adddf3+0x2f4>
  80c7b4:	0081ffc4 	movi	r2,2047
  80c7b8:	80bf8b26 	beq	r16,r2,80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80c7bc:	4a402034 	orhi	r9,r9,128
  80c7c0:	00800e04 	movi	r2,56
  80c7c4:	1100a40e 	bge	r2,r4,80ca58 <__adddf3+0x4ec>
  80c7c8:	498cb03a 	or	r6,r9,r6
  80c7cc:	300ac03a 	cmpne	r5,r6,zero
  80c7d0:	0013883a 	mov	r9,zero
  80c7d4:	2c4b883a 	add	r5,r5,r17
  80c7d8:	2c63803a 	cmpltu	r17,r5,r17
  80c7dc:	4a11883a 	add	r8,r9,r8
  80c7e0:	8a11883a 	add	r8,r17,r8
  80c7e4:	2823883a 	mov	r17,r5
  80c7e8:	4080202c 	andhi	r2,r8,128
  80c7ec:	103fe026 	beq	r2,zero,80c770 <__alt_mem_onchip_mem+0xff804770>
  80c7f0:	84000044 	addi	r16,r16,1
  80c7f4:	0081ffc4 	movi	r2,2047
  80c7f8:	8080d226 	beq	r16,r2,80cb44 <__adddf3+0x5d8>
  80c7fc:	00bfe034 	movhi	r2,65408
  80c800:	10bfffc4 	addi	r2,r2,-1
  80c804:	4090703a 	and	r8,r8,r2
  80c808:	880ad07a 	srli	r5,r17,1
  80c80c:	400897fa 	slli	r4,r8,31
  80c810:	88c0004c 	andi	r3,r17,1
  80c814:	28e2b03a 	or	r17,r5,r3
  80c818:	4010d07a 	srli	r8,r8,1
  80c81c:	2462b03a 	or	r17,r4,r17
  80c820:	003f7106 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80c824:	4088b03a 	or	r4,r8,r2
  80c828:	20014526 	beq	r4,zero,80cd40 <__adddf3+0x7d4>
  80c82c:	01000434 	movhi	r4,16
  80c830:	42000234 	orhi	r8,r8,8
  80c834:	213fffc4 	addi	r4,r4,-1
  80c838:	4110703a 	and	r8,r8,r4
  80c83c:	003f8206 	br	80c648 <__alt_mem_onchip_mem+0xff804648>
  80c840:	18ffffc4 	addi	r3,r3,-1
  80c844:	1800491e 	bne	r3,zero,80c96c <__adddf3+0x400>
  80c848:	898bc83a 	sub	r5,r17,r6
  80c84c:	8963803a 	cmpltu	r17,r17,r5
  80c850:	4251c83a 	sub	r8,r8,r9
  80c854:	4451c83a 	sub	r8,r8,r17
  80c858:	2823883a 	mov	r17,r5
  80c85c:	003f9f06 	br	80c6dc <__alt_mem_onchip_mem+0xff8046dc>
  80c860:	4984b03a 	or	r2,r9,r6
  80c864:	103f6026 	beq	r2,zero,80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80c868:	213fffc4 	addi	r4,r4,-1
  80c86c:	2000931e 	bne	r4,zero,80cabc <__adddf3+0x550>
  80c870:	898d883a 	add	r6,r17,r6
  80c874:	3463803a 	cmpltu	r17,r6,r17
  80c878:	4251883a 	add	r8,r8,r9
  80c87c:	8a11883a 	add	r8,r17,r8
  80c880:	3023883a 	mov	r17,r6
  80c884:	003fd806 	br	80c7e8 <__alt_mem_onchip_mem+0xff8047e8>
  80c888:	1800541e 	bne	r3,zero,80c9dc <__adddf3+0x470>
  80c88c:	80800044 	addi	r2,r16,1
  80c890:	1081ffcc 	andi	r2,r2,2047
  80c894:	00c00044 	movi	r3,1
  80c898:	1880a00e 	bge	r3,r2,80cb1c <__adddf3+0x5b0>
  80c89c:	8989c83a 	sub	r4,r17,r6
  80c8a0:	8905803a 	cmpltu	r2,r17,r4
  80c8a4:	4267c83a 	sub	r19,r8,r9
  80c8a8:	98a7c83a 	sub	r19,r19,r2
  80c8ac:	9880202c 	andhi	r2,r19,128
  80c8b0:	10006326 	beq	r2,zero,80ca40 <__adddf3+0x4d4>
  80c8b4:	3463c83a 	sub	r17,r6,r17
  80c8b8:	4a07c83a 	sub	r3,r9,r8
  80c8bc:	344d803a 	cmpltu	r6,r6,r17
  80c8c0:	19a7c83a 	sub	r19,r3,r6
  80c8c4:	3825883a 	mov	r18,r7
  80c8c8:	983f8a1e 	bne	r19,zero,80c6f4 <__alt_mem_onchip_mem+0xff8046f4>
  80c8cc:	8809883a 	mov	r4,r17
  80c8d0:	080eb700 	call	80eb70 <__clzsi2>
  80c8d4:	10800804 	addi	r2,r2,32
  80c8d8:	10fffe04 	addi	r3,r2,-8
  80c8dc:	010007c4 	movi	r4,31
  80c8e0:	20ff890e 	bge	r4,r3,80c708 <__alt_mem_onchip_mem+0xff804708>
  80c8e4:	10bff604 	addi	r2,r2,-40
  80c8e8:	8884983a 	sll	r2,r17,r2
  80c8ec:	0023883a 	mov	r17,zero
  80c8f0:	1c3f8c0e 	bge	r3,r16,80c724 <__alt_mem_onchip_mem+0xff804724>
  80c8f4:	023fe034 	movhi	r8,65408
  80c8f8:	423fffc4 	addi	r8,r8,-1
  80c8fc:	80e1c83a 	sub	r16,r16,r3
  80c900:	1210703a 	and	r8,r2,r8
  80c904:	003f3806 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80c908:	9007883a 	mov	r3,r18
  80c90c:	0011883a 	mov	r8,zero
  80c910:	0005883a 	mov	r2,zero
  80c914:	003f4c06 	br	80c648 <__alt_mem_onchip_mem+0xff804648>
  80c918:	498cb03a 	or	r6,r9,r6
  80c91c:	300cc03a 	cmpne	r6,r6,zero
  80c920:	0007883a 	mov	r3,zero
  80c924:	003f6806 	br	80c6c8 <__alt_mem_onchip_mem+0xff8046c8>
  80c928:	20009c1e 	bne	r4,zero,80cb9c <__adddf3+0x630>
  80c92c:	80800044 	addi	r2,r16,1
  80c930:	1141ffcc 	andi	r5,r2,2047
  80c934:	01000044 	movi	r4,1
  80c938:	2140670e 	bge	r4,r5,80cad8 <__adddf3+0x56c>
  80c93c:	0101ffc4 	movi	r4,2047
  80c940:	11007f26 	beq	r2,r4,80cb40 <__adddf3+0x5d4>
  80c944:	898d883a 	add	r6,r17,r6
  80c948:	4247883a 	add	r3,r8,r9
  80c94c:	3451803a 	cmpltu	r8,r6,r17
  80c950:	40d1883a 	add	r8,r8,r3
  80c954:	402297fa 	slli	r17,r8,31
  80c958:	300cd07a 	srli	r6,r6,1
  80c95c:	4010d07a 	srli	r8,r8,1
  80c960:	1021883a 	mov	r16,r2
  80c964:	89a2b03a 	or	r17,r17,r6
  80c968:	003f1f06 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80c96c:	0081ffc4 	movi	r2,2047
  80c970:	80bf481e 	bne	r16,r2,80c694 <__alt_mem_onchip_mem+0xff804694>
  80c974:	003f1c06 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80c978:	843ff844 	addi	r16,r16,-31
  80c97c:	01000804 	movi	r4,32
  80c980:	1406d83a 	srl	r3,r2,r16
  80c984:	41005026 	beq	r8,r4,80cac8 <__adddf3+0x55c>
  80c988:	01001004 	movi	r4,64
  80c98c:	2211c83a 	sub	r8,r4,r8
  80c990:	1204983a 	sll	r2,r2,r8
  80c994:	88a2b03a 	or	r17,r17,r2
  80c998:	8822c03a 	cmpne	r17,r17,zero
  80c99c:	1c62b03a 	or	r17,r3,r17
  80c9a0:	0011883a 	mov	r8,zero
  80c9a4:	0021883a 	mov	r16,zero
  80c9a8:	003f7106 	br	80c770 <__alt_mem_onchip_mem+0xff804770>
  80c9ac:	193ff804 	addi	r4,r3,-32
  80c9b0:	00800804 	movi	r2,32
  80c9b4:	4908d83a 	srl	r4,r9,r4
  80c9b8:	18804526 	beq	r3,r2,80cad0 <__adddf3+0x564>
  80c9bc:	00801004 	movi	r2,64
  80c9c0:	10c5c83a 	sub	r2,r2,r3
  80c9c4:	4886983a 	sll	r3,r9,r2
  80c9c8:	198cb03a 	or	r6,r3,r6
  80c9cc:	300cc03a 	cmpne	r6,r6,zero
  80c9d0:	218cb03a 	or	r6,r4,r6
  80c9d4:	0007883a 	mov	r3,zero
  80c9d8:	003f3b06 	br	80c6c8 <__alt_mem_onchip_mem+0xff8046c8>
  80c9dc:	80002a26 	beq	r16,zero,80ca88 <__adddf3+0x51c>
  80c9e0:	0101ffc4 	movi	r4,2047
  80c9e4:	11006826 	beq	r2,r4,80cb88 <__adddf3+0x61c>
  80c9e8:	00c7c83a 	sub	r3,zero,r3
  80c9ec:	42002034 	orhi	r8,r8,128
  80c9f0:	01000e04 	movi	r4,56
  80c9f4:	20c07c16 	blt	r4,r3,80cbe8 <__adddf3+0x67c>
  80c9f8:	010007c4 	movi	r4,31
  80c9fc:	20c0da16 	blt	r4,r3,80cd68 <__adddf3+0x7fc>
  80ca00:	01000804 	movi	r4,32
  80ca04:	20c9c83a 	sub	r4,r4,r3
  80ca08:	4114983a 	sll	r10,r8,r4
  80ca0c:	88cad83a 	srl	r5,r17,r3
  80ca10:	8908983a 	sll	r4,r17,r4
  80ca14:	40c6d83a 	srl	r3,r8,r3
  80ca18:	5162b03a 	or	r17,r10,r5
  80ca1c:	2008c03a 	cmpne	r4,r4,zero
  80ca20:	8922b03a 	or	r17,r17,r4
  80ca24:	3463c83a 	sub	r17,r6,r17
  80ca28:	48c7c83a 	sub	r3,r9,r3
  80ca2c:	344d803a 	cmpltu	r6,r6,r17
  80ca30:	1991c83a 	sub	r8,r3,r6
  80ca34:	1021883a 	mov	r16,r2
  80ca38:	3825883a 	mov	r18,r7
  80ca3c:	003f2706 	br	80c6dc <__alt_mem_onchip_mem+0xff8046dc>
  80ca40:	24d0b03a 	or	r8,r4,r19
  80ca44:	40001b1e 	bne	r8,zero,80cab4 <__adddf3+0x548>
  80ca48:	0005883a 	mov	r2,zero
  80ca4c:	0007883a 	mov	r3,zero
  80ca50:	0021883a 	mov	r16,zero
  80ca54:	003f4d06 	br	80c78c <__alt_mem_onchip_mem+0xff80478c>
  80ca58:	008007c4 	movi	r2,31
  80ca5c:	11003c16 	blt	r2,r4,80cb50 <__adddf3+0x5e4>
  80ca60:	00800804 	movi	r2,32
  80ca64:	1105c83a 	sub	r2,r2,r4
  80ca68:	488e983a 	sll	r7,r9,r2
  80ca6c:	310ad83a 	srl	r5,r6,r4
  80ca70:	3084983a 	sll	r2,r6,r2
  80ca74:	4912d83a 	srl	r9,r9,r4
  80ca78:	394ab03a 	or	r5,r7,r5
  80ca7c:	1004c03a 	cmpne	r2,r2,zero
  80ca80:	288ab03a 	or	r5,r5,r2
  80ca84:	003f5306 	br	80c7d4 <__alt_mem_onchip_mem+0xff8047d4>
  80ca88:	4448b03a 	or	r4,r8,r17
  80ca8c:	20003e26 	beq	r4,zero,80cb88 <__adddf3+0x61c>
  80ca90:	00c6303a 	nor	r3,zero,r3
  80ca94:	18003a1e 	bne	r3,zero,80cb80 <__adddf3+0x614>
  80ca98:	3463c83a 	sub	r17,r6,r17
  80ca9c:	4a07c83a 	sub	r3,r9,r8
  80caa0:	344d803a 	cmpltu	r6,r6,r17
  80caa4:	1991c83a 	sub	r8,r3,r6
  80caa8:	1021883a 	mov	r16,r2
  80caac:	3825883a 	mov	r18,r7
  80cab0:	003f0a06 	br	80c6dc <__alt_mem_onchip_mem+0xff8046dc>
  80cab4:	2023883a 	mov	r17,r4
  80cab8:	003f0d06 	br	80c6f0 <__alt_mem_onchip_mem+0xff8046f0>
  80cabc:	0081ffc4 	movi	r2,2047
  80cac0:	80bf3f1e 	bne	r16,r2,80c7c0 <__alt_mem_onchip_mem+0xff8047c0>
  80cac4:	003ec806 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80cac8:	0005883a 	mov	r2,zero
  80cacc:	003fb106 	br	80c994 <__alt_mem_onchip_mem+0xff804994>
  80cad0:	0007883a 	mov	r3,zero
  80cad4:	003fbc06 	br	80c9c8 <__alt_mem_onchip_mem+0xff8049c8>
  80cad8:	4444b03a 	or	r2,r8,r17
  80cadc:	8000871e 	bne	r16,zero,80ccfc <__adddf3+0x790>
  80cae0:	1000ba26 	beq	r2,zero,80cdcc <__adddf3+0x860>
  80cae4:	4984b03a 	or	r2,r9,r6
  80cae8:	103ebf26 	beq	r2,zero,80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80caec:	8985883a 	add	r2,r17,r6
  80caf0:	4247883a 	add	r3,r8,r9
  80caf4:	1451803a 	cmpltu	r8,r2,r17
  80caf8:	40d1883a 	add	r8,r8,r3
  80cafc:	40c0202c 	andhi	r3,r8,128
  80cb00:	1023883a 	mov	r17,r2
  80cb04:	183f1a26 	beq	r3,zero,80c770 <__alt_mem_onchip_mem+0xff804770>
  80cb08:	00bfe034 	movhi	r2,65408
  80cb0c:	10bfffc4 	addi	r2,r2,-1
  80cb10:	2021883a 	mov	r16,r4
  80cb14:	4090703a 	and	r8,r8,r2
  80cb18:	003eb306 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80cb1c:	4444b03a 	or	r2,r8,r17
  80cb20:	8000291e 	bne	r16,zero,80cbc8 <__adddf3+0x65c>
  80cb24:	10004b1e 	bne	r2,zero,80cc54 <__adddf3+0x6e8>
  80cb28:	4990b03a 	or	r8,r9,r6
  80cb2c:	40008b26 	beq	r8,zero,80cd5c <__adddf3+0x7f0>
  80cb30:	4811883a 	mov	r8,r9
  80cb34:	3023883a 	mov	r17,r6
  80cb38:	3825883a 	mov	r18,r7
  80cb3c:	003eaa06 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80cb40:	1021883a 	mov	r16,r2
  80cb44:	0011883a 	mov	r8,zero
  80cb48:	0005883a 	mov	r2,zero
  80cb4c:	003f0f06 	br	80c78c <__alt_mem_onchip_mem+0xff80478c>
  80cb50:	217ff804 	addi	r5,r4,-32
  80cb54:	00800804 	movi	r2,32
  80cb58:	494ad83a 	srl	r5,r9,r5
  80cb5c:	20807d26 	beq	r4,r2,80cd54 <__adddf3+0x7e8>
  80cb60:	00801004 	movi	r2,64
  80cb64:	1109c83a 	sub	r4,r2,r4
  80cb68:	4912983a 	sll	r9,r9,r4
  80cb6c:	498cb03a 	or	r6,r9,r6
  80cb70:	300cc03a 	cmpne	r6,r6,zero
  80cb74:	298ab03a 	or	r5,r5,r6
  80cb78:	0013883a 	mov	r9,zero
  80cb7c:	003f1506 	br	80c7d4 <__alt_mem_onchip_mem+0xff8047d4>
  80cb80:	0101ffc4 	movi	r4,2047
  80cb84:	113f9a1e 	bne	r2,r4,80c9f0 <__alt_mem_onchip_mem+0xff8049f0>
  80cb88:	4811883a 	mov	r8,r9
  80cb8c:	3023883a 	mov	r17,r6
  80cb90:	1021883a 	mov	r16,r2
  80cb94:	3825883a 	mov	r18,r7
  80cb98:	003e9306 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80cb9c:	8000161e 	bne	r16,zero,80cbf8 <__adddf3+0x68c>
  80cba0:	444ab03a 	or	r5,r8,r17
  80cba4:	28005126 	beq	r5,zero,80ccec <__adddf3+0x780>
  80cba8:	0108303a 	nor	r4,zero,r4
  80cbac:	20004d1e 	bne	r4,zero,80cce4 <__adddf3+0x778>
  80cbb0:	89a3883a 	add	r17,r17,r6
  80cbb4:	4253883a 	add	r9,r8,r9
  80cbb8:	898d803a 	cmpltu	r6,r17,r6
  80cbbc:	3251883a 	add	r8,r6,r9
  80cbc0:	1021883a 	mov	r16,r2
  80cbc4:	003f0806 	br	80c7e8 <__alt_mem_onchip_mem+0xff8047e8>
  80cbc8:	1000301e 	bne	r2,zero,80cc8c <__adddf3+0x720>
  80cbcc:	4984b03a 	or	r2,r9,r6
  80cbd0:	10007126 	beq	r2,zero,80cd98 <__adddf3+0x82c>
  80cbd4:	4811883a 	mov	r8,r9
  80cbd8:	3023883a 	mov	r17,r6
  80cbdc:	3825883a 	mov	r18,r7
  80cbe0:	0401ffc4 	movi	r16,2047
  80cbe4:	003e8006 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80cbe8:	4462b03a 	or	r17,r8,r17
  80cbec:	8822c03a 	cmpne	r17,r17,zero
  80cbf0:	0007883a 	mov	r3,zero
  80cbf4:	003f8b06 	br	80ca24 <__alt_mem_onchip_mem+0xff804a24>
  80cbf8:	0141ffc4 	movi	r5,2047
  80cbfc:	11403b26 	beq	r2,r5,80ccec <__adddf3+0x780>
  80cc00:	0109c83a 	sub	r4,zero,r4
  80cc04:	42002034 	orhi	r8,r8,128
  80cc08:	01400e04 	movi	r5,56
  80cc0c:	29006716 	blt	r5,r4,80cdac <__adddf3+0x840>
  80cc10:	014007c4 	movi	r5,31
  80cc14:	29007016 	blt	r5,r4,80cdd8 <__adddf3+0x86c>
  80cc18:	01400804 	movi	r5,32
  80cc1c:	290bc83a 	sub	r5,r5,r4
  80cc20:	4154983a 	sll	r10,r8,r5
  80cc24:	890ed83a 	srl	r7,r17,r4
  80cc28:	894a983a 	sll	r5,r17,r5
  80cc2c:	4108d83a 	srl	r4,r8,r4
  80cc30:	51e2b03a 	or	r17,r10,r7
  80cc34:	280ac03a 	cmpne	r5,r5,zero
  80cc38:	8962b03a 	or	r17,r17,r5
  80cc3c:	89a3883a 	add	r17,r17,r6
  80cc40:	2253883a 	add	r9,r4,r9
  80cc44:	898d803a 	cmpltu	r6,r17,r6
  80cc48:	3251883a 	add	r8,r6,r9
  80cc4c:	1021883a 	mov	r16,r2
  80cc50:	003ee506 	br	80c7e8 <__alt_mem_onchip_mem+0xff8047e8>
  80cc54:	4984b03a 	or	r2,r9,r6
  80cc58:	103e6326 	beq	r2,zero,80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80cc5c:	8987c83a 	sub	r3,r17,r6
  80cc60:	88c9803a 	cmpltu	r4,r17,r3
  80cc64:	4245c83a 	sub	r2,r8,r9
  80cc68:	1105c83a 	sub	r2,r2,r4
  80cc6c:	1100202c 	andhi	r4,r2,128
  80cc70:	203ebb26 	beq	r4,zero,80c760 <__alt_mem_onchip_mem+0xff804760>
  80cc74:	3463c83a 	sub	r17,r6,r17
  80cc78:	4a07c83a 	sub	r3,r9,r8
  80cc7c:	344d803a 	cmpltu	r6,r6,r17
  80cc80:	1991c83a 	sub	r8,r3,r6
  80cc84:	3825883a 	mov	r18,r7
  80cc88:	003e5706 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80cc8c:	4984b03a 	or	r2,r9,r6
  80cc90:	10002e26 	beq	r2,zero,80cd4c <__adddf3+0x7e0>
  80cc94:	4004d0fa 	srli	r2,r8,3
  80cc98:	8822d0fa 	srli	r17,r17,3
  80cc9c:	4010977a 	slli	r8,r8,29
  80cca0:	10c0022c 	andhi	r3,r2,8
  80cca4:	4462b03a 	or	r17,r8,r17
  80cca8:	18000826 	beq	r3,zero,80cccc <__adddf3+0x760>
  80ccac:	4808d0fa 	srli	r4,r9,3
  80ccb0:	20c0022c 	andhi	r3,r4,8
  80ccb4:	1800051e 	bne	r3,zero,80cccc <__adddf3+0x760>
  80ccb8:	300cd0fa 	srli	r6,r6,3
  80ccbc:	4806977a 	slli	r3,r9,29
  80ccc0:	2005883a 	mov	r2,r4
  80ccc4:	3825883a 	mov	r18,r7
  80ccc8:	19a2b03a 	or	r17,r3,r6
  80cccc:	8810d77a 	srli	r8,r17,29
  80ccd0:	100490fa 	slli	r2,r2,3
  80ccd4:	882290fa 	slli	r17,r17,3
  80ccd8:	0401ffc4 	movi	r16,2047
  80ccdc:	4090b03a 	or	r8,r8,r2
  80cce0:	003e4106 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80cce4:	0141ffc4 	movi	r5,2047
  80cce8:	117fc71e 	bne	r2,r5,80cc08 <__alt_mem_onchip_mem+0xff804c08>
  80ccec:	4811883a 	mov	r8,r9
  80ccf0:	3023883a 	mov	r17,r6
  80ccf4:	1021883a 	mov	r16,r2
  80ccf8:	003e3b06 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80ccfc:	10002f26 	beq	r2,zero,80cdbc <__adddf3+0x850>
  80cd00:	4984b03a 	or	r2,r9,r6
  80cd04:	10001126 	beq	r2,zero,80cd4c <__adddf3+0x7e0>
  80cd08:	4004d0fa 	srli	r2,r8,3
  80cd0c:	8822d0fa 	srli	r17,r17,3
  80cd10:	4010977a 	slli	r8,r8,29
  80cd14:	10c0022c 	andhi	r3,r2,8
  80cd18:	4462b03a 	or	r17,r8,r17
  80cd1c:	183feb26 	beq	r3,zero,80cccc <__alt_mem_onchip_mem+0xff804ccc>
  80cd20:	4808d0fa 	srli	r4,r9,3
  80cd24:	20c0022c 	andhi	r3,r4,8
  80cd28:	183fe81e 	bne	r3,zero,80cccc <__alt_mem_onchip_mem+0xff804ccc>
  80cd2c:	300cd0fa 	srli	r6,r6,3
  80cd30:	4806977a 	slli	r3,r9,29
  80cd34:	2005883a 	mov	r2,r4
  80cd38:	19a2b03a 	or	r17,r3,r6
  80cd3c:	003fe306 	br	80cccc <__alt_mem_onchip_mem+0xff804ccc>
  80cd40:	0011883a 	mov	r8,zero
  80cd44:	0005883a 	mov	r2,zero
  80cd48:	003e3f06 	br	80c648 <__alt_mem_onchip_mem+0xff804648>
  80cd4c:	0401ffc4 	movi	r16,2047
  80cd50:	003e2506 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80cd54:	0013883a 	mov	r9,zero
  80cd58:	003f8406 	br	80cb6c <__alt_mem_onchip_mem+0xff804b6c>
  80cd5c:	0005883a 	mov	r2,zero
  80cd60:	0007883a 	mov	r3,zero
  80cd64:	003e8906 	br	80c78c <__alt_mem_onchip_mem+0xff80478c>
  80cd68:	197ff804 	addi	r5,r3,-32
  80cd6c:	01000804 	movi	r4,32
  80cd70:	414ad83a 	srl	r5,r8,r5
  80cd74:	19002426 	beq	r3,r4,80ce08 <__adddf3+0x89c>
  80cd78:	01001004 	movi	r4,64
  80cd7c:	20c7c83a 	sub	r3,r4,r3
  80cd80:	40c6983a 	sll	r3,r8,r3
  80cd84:	1c46b03a 	or	r3,r3,r17
  80cd88:	1806c03a 	cmpne	r3,r3,zero
  80cd8c:	28e2b03a 	or	r17,r5,r3
  80cd90:	0007883a 	mov	r3,zero
  80cd94:	003f2306 	br	80ca24 <__alt_mem_onchip_mem+0xff804a24>
  80cd98:	0007883a 	mov	r3,zero
  80cd9c:	5811883a 	mov	r8,r11
  80cda0:	00bfffc4 	movi	r2,-1
  80cda4:	0401ffc4 	movi	r16,2047
  80cda8:	003e7806 	br	80c78c <__alt_mem_onchip_mem+0xff80478c>
  80cdac:	4462b03a 	or	r17,r8,r17
  80cdb0:	8822c03a 	cmpne	r17,r17,zero
  80cdb4:	0009883a 	mov	r4,zero
  80cdb8:	003fa006 	br	80cc3c <__alt_mem_onchip_mem+0xff804c3c>
  80cdbc:	4811883a 	mov	r8,r9
  80cdc0:	3023883a 	mov	r17,r6
  80cdc4:	0401ffc4 	movi	r16,2047
  80cdc8:	003e0706 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80cdcc:	4811883a 	mov	r8,r9
  80cdd0:	3023883a 	mov	r17,r6
  80cdd4:	003e0406 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80cdd8:	21fff804 	addi	r7,r4,-32
  80cddc:	01400804 	movi	r5,32
  80cde0:	41ced83a 	srl	r7,r8,r7
  80cde4:	21400a26 	beq	r4,r5,80ce10 <__adddf3+0x8a4>
  80cde8:	01401004 	movi	r5,64
  80cdec:	2909c83a 	sub	r4,r5,r4
  80cdf0:	4108983a 	sll	r4,r8,r4
  80cdf4:	2448b03a 	or	r4,r4,r17
  80cdf8:	2008c03a 	cmpne	r4,r4,zero
  80cdfc:	3922b03a 	or	r17,r7,r4
  80ce00:	0009883a 	mov	r4,zero
  80ce04:	003f8d06 	br	80cc3c <__alt_mem_onchip_mem+0xff804c3c>
  80ce08:	0007883a 	mov	r3,zero
  80ce0c:	003fdd06 	br	80cd84 <__alt_mem_onchip_mem+0xff804d84>
  80ce10:	0009883a 	mov	r4,zero
  80ce14:	003ff706 	br	80cdf4 <__alt_mem_onchip_mem+0xff804df4>

0080ce18 <__divdf3>:
  80ce18:	defff204 	addi	sp,sp,-56
  80ce1c:	dd400915 	stw	r21,36(sp)
  80ce20:	282ad53a 	srli	r21,r5,20
  80ce24:	dd000815 	stw	r20,32(sp)
  80ce28:	2828d7fa 	srli	r20,r5,31
  80ce2c:	dc000415 	stw	r16,16(sp)
  80ce30:	04000434 	movhi	r16,16
  80ce34:	df000c15 	stw	fp,48(sp)
  80ce38:	843fffc4 	addi	r16,r16,-1
  80ce3c:	dfc00d15 	stw	ra,52(sp)
  80ce40:	ddc00b15 	stw	r23,44(sp)
  80ce44:	dd800a15 	stw	r22,40(sp)
  80ce48:	dcc00715 	stw	r19,28(sp)
  80ce4c:	dc800615 	stw	r18,24(sp)
  80ce50:	dc400515 	stw	r17,20(sp)
  80ce54:	ad41ffcc 	andi	r21,r21,2047
  80ce58:	2c20703a 	and	r16,r5,r16
  80ce5c:	a7003fcc 	andi	fp,r20,255
  80ce60:	a8006126 	beq	r21,zero,80cfe8 <__divdf3+0x1d0>
  80ce64:	0081ffc4 	movi	r2,2047
  80ce68:	2025883a 	mov	r18,r4
  80ce6c:	a8803726 	beq	r21,r2,80cf4c <__divdf3+0x134>
  80ce70:	80800434 	orhi	r2,r16,16
  80ce74:	100490fa 	slli	r2,r2,3
  80ce78:	2020d77a 	srli	r16,r4,29
  80ce7c:	202490fa 	slli	r18,r4,3
  80ce80:	ad7f0044 	addi	r21,r21,-1023
  80ce84:	80a0b03a 	or	r16,r16,r2
  80ce88:	0027883a 	mov	r19,zero
  80ce8c:	0013883a 	mov	r9,zero
  80ce90:	3804d53a 	srli	r2,r7,20
  80ce94:	382cd7fa 	srli	r22,r7,31
  80ce98:	04400434 	movhi	r17,16
  80ce9c:	8c7fffc4 	addi	r17,r17,-1
  80cea0:	1081ffcc 	andi	r2,r2,2047
  80cea4:	3011883a 	mov	r8,r6
  80cea8:	3c62703a 	and	r17,r7,r17
  80ceac:	b5c03fcc 	andi	r23,r22,255
  80ceb0:	10006c26 	beq	r2,zero,80d064 <__divdf3+0x24c>
  80ceb4:	00c1ffc4 	movi	r3,2047
  80ceb8:	10c06426 	beq	r2,r3,80d04c <__divdf3+0x234>
  80cebc:	88c00434 	orhi	r3,r17,16
  80cec0:	180690fa 	slli	r3,r3,3
  80cec4:	3022d77a 	srli	r17,r6,29
  80cec8:	301090fa 	slli	r8,r6,3
  80cecc:	10bf0044 	addi	r2,r2,-1023
  80ced0:	88e2b03a 	or	r17,r17,r3
  80ced4:	000f883a 	mov	r7,zero
  80ced8:	a58cf03a 	xor	r6,r20,r22
  80cedc:	3cc8b03a 	or	r4,r7,r19
  80cee0:	a8abc83a 	sub	r21,r21,r2
  80cee4:	008003c4 	movi	r2,15
  80cee8:	3007883a 	mov	r3,r6
  80ceec:	34c03fcc 	andi	r19,r6,255
  80cef0:	11009036 	bltu	r2,r4,80d134 <__divdf3+0x31c>
  80cef4:	200890ba 	slli	r4,r4,2
  80cef8:	00802074 	movhi	r2,129
  80cefc:	10b3c304 	addi	r2,r2,-12532
  80cf00:	2089883a 	add	r4,r4,r2
  80cf04:	20800017 	ldw	r2,0(r4)
  80cf08:	1000683a 	jmp	r2
  80cf0c:	0080d134 	movhi	r2,836
  80cf10:	0080cf84 	movi	r2,830
  80cf14:	0080d124 	muli	r2,zero,836
  80cf18:	0080cf78 	rdprs	r2,zero,829
  80cf1c:	0080d124 	muli	r2,zero,836
  80cf20:	0080d0f8 	rdprs	r2,zero,835
  80cf24:	0080d124 	muli	r2,zero,836
  80cf28:	0080cf78 	rdprs	r2,zero,829
  80cf2c:	0080cf84 	movi	r2,830
  80cf30:	0080cf84 	movi	r2,830
  80cf34:	0080d0f8 	rdprs	r2,zero,835
  80cf38:	0080cf78 	rdprs	r2,zero,829
  80cf3c:	0080cf68 	cmpgeui	r2,zero,829
  80cf40:	0080cf68 	cmpgeui	r2,zero,829
  80cf44:	0080cf68 	cmpgeui	r2,zero,829
  80cf48:	0080d418 	cmpnei	r2,zero,848
  80cf4c:	2404b03a 	or	r2,r4,r16
  80cf50:	1000661e 	bne	r2,zero,80d0ec <__divdf3+0x2d4>
  80cf54:	04c00204 	movi	r19,8
  80cf58:	0021883a 	mov	r16,zero
  80cf5c:	0025883a 	mov	r18,zero
  80cf60:	02400084 	movi	r9,2
  80cf64:	003fca06 	br	80ce90 <__alt_mem_onchip_mem+0xff804e90>
  80cf68:	8023883a 	mov	r17,r16
  80cf6c:	9011883a 	mov	r8,r18
  80cf70:	e02f883a 	mov	r23,fp
  80cf74:	480f883a 	mov	r7,r9
  80cf78:	00800084 	movi	r2,2
  80cf7c:	3881311e 	bne	r7,r2,80d444 <__divdf3+0x62c>
  80cf80:	b827883a 	mov	r19,r23
  80cf84:	98c0004c 	andi	r3,r19,1
  80cf88:	0081ffc4 	movi	r2,2047
  80cf8c:	000b883a 	mov	r5,zero
  80cf90:	0025883a 	mov	r18,zero
  80cf94:	1004953a 	slli	r2,r2,20
  80cf98:	18c03fcc 	andi	r3,r3,255
  80cf9c:	04400434 	movhi	r17,16
  80cfa0:	8c7fffc4 	addi	r17,r17,-1
  80cfa4:	180697fa 	slli	r3,r3,31
  80cfa8:	2c4a703a 	and	r5,r5,r17
  80cfac:	288ab03a 	or	r5,r5,r2
  80cfb0:	28c6b03a 	or	r3,r5,r3
  80cfb4:	9005883a 	mov	r2,r18
  80cfb8:	dfc00d17 	ldw	ra,52(sp)
  80cfbc:	df000c17 	ldw	fp,48(sp)
  80cfc0:	ddc00b17 	ldw	r23,44(sp)
  80cfc4:	dd800a17 	ldw	r22,40(sp)
  80cfc8:	dd400917 	ldw	r21,36(sp)
  80cfcc:	dd000817 	ldw	r20,32(sp)
  80cfd0:	dcc00717 	ldw	r19,28(sp)
  80cfd4:	dc800617 	ldw	r18,24(sp)
  80cfd8:	dc400517 	ldw	r17,20(sp)
  80cfdc:	dc000417 	ldw	r16,16(sp)
  80cfe0:	dec00e04 	addi	sp,sp,56
  80cfe4:	f800283a 	ret
  80cfe8:	2404b03a 	or	r2,r4,r16
  80cfec:	2027883a 	mov	r19,r4
  80cff0:	10003926 	beq	r2,zero,80d0d8 <__divdf3+0x2c0>
  80cff4:	80012e26 	beq	r16,zero,80d4b0 <__divdf3+0x698>
  80cff8:	8009883a 	mov	r4,r16
  80cffc:	d9800315 	stw	r6,12(sp)
  80d000:	d9c00215 	stw	r7,8(sp)
  80d004:	080eb700 	call	80eb70 <__clzsi2>
  80d008:	d9800317 	ldw	r6,12(sp)
  80d00c:	d9c00217 	ldw	r7,8(sp)
  80d010:	113ffd44 	addi	r4,r2,-11
  80d014:	00c00704 	movi	r3,28
  80d018:	19012116 	blt	r3,r4,80d4a0 <__divdf3+0x688>
  80d01c:	00c00744 	movi	r3,29
  80d020:	147ffe04 	addi	r17,r2,-8
  80d024:	1907c83a 	sub	r3,r3,r4
  80d028:	8460983a 	sll	r16,r16,r17
  80d02c:	98c6d83a 	srl	r3,r19,r3
  80d030:	9c64983a 	sll	r18,r19,r17
  80d034:	1c20b03a 	or	r16,r3,r16
  80d038:	1080fcc4 	addi	r2,r2,1011
  80d03c:	00abc83a 	sub	r21,zero,r2
  80d040:	0027883a 	mov	r19,zero
  80d044:	0013883a 	mov	r9,zero
  80d048:	003f9106 	br	80ce90 <__alt_mem_onchip_mem+0xff804e90>
  80d04c:	3446b03a 	or	r3,r6,r17
  80d050:	18001f1e 	bne	r3,zero,80d0d0 <__divdf3+0x2b8>
  80d054:	0023883a 	mov	r17,zero
  80d058:	0011883a 	mov	r8,zero
  80d05c:	01c00084 	movi	r7,2
  80d060:	003f9d06 	br	80ced8 <__alt_mem_onchip_mem+0xff804ed8>
  80d064:	3446b03a 	or	r3,r6,r17
  80d068:	18001526 	beq	r3,zero,80d0c0 <__divdf3+0x2a8>
  80d06c:	88011b26 	beq	r17,zero,80d4dc <__divdf3+0x6c4>
  80d070:	8809883a 	mov	r4,r17
  80d074:	d9800315 	stw	r6,12(sp)
  80d078:	da400115 	stw	r9,4(sp)
  80d07c:	080eb700 	call	80eb70 <__clzsi2>
  80d080:	d9800317 	ldw	r6,12(sp)
  80d084:	da400117 	ldw	r9,4(sp)
  80d088:	113ffd44 	addi	r4,r2,-11
  80d08c:	00c00704 	movi	r3,28
  80d090:	19010e16 	blt	r3,r4,80d4cc <__divdf3+0x6b4>
  80d094:	00c00744 	movi	r3,29
  80d098:	123ffe04 	addi	r8,r2,-8
  80d09c:	1907c83a 	sub	r3,r3,r4
  80d0a0:	8a22983a 	sll	r17,r17,r8
  80d0a4:	30c6d83a 	srl	r3,r6,r3
  80d0a8:	3210983a 	sll	r8,r6,r8
  80d0ac:	1c62b03a 	or	r17,r3,r17
  80d0b0:	1080fcc4 	addi	r2,r2,1011
  80d0b4:	0085c83a 	sub	r2,zero,r2
  80d0b8:	000f883a 	mov	r7,zero
  80d0bc:	003f8606 	br	80ced8 <__alt_mem_onchip_mem+0xff804ed8>
  80d0c0:	0023883a 	mov	r17,zero
  80d0c4:	0011883a 	mov	r8,zero
  80d0c8:	01c00044 	movi	r7,1
  80d0cc:	003f8206 	br	80ced8 <__alt_mem_onchip_mem+0xff804ed8>
  80d0d0:	01c000c4 	movi	r7,3
  80d0d4:	003f8006 	br	80ced8 <__alt_mem_onchip_mem+0xff804ed8>
  80d0d8:	04c00104 	movi	r19,4
  80d0dc:	0021883a 	mov	r16,zero
  80d0e0:	0025883a 	mov	r18,zero
  80d0e4:	02400044 	movi	r9,1
  80d0e8:	003f6906 	br	80ce90 <__alt_mem_onchip_mem+0xff804e90>
  80d0ec:	04c00304 	movi	r19,12
  80d0f0:	024000c4 	movi	r9,3
  80d0f4:	003f6606 	br	80ce90 <__alt_mem_onchip_mem+0xff804e90>
  80d0f8:	01400434 	movhi	r5,16
  80d0fc:	0007883a 	mov	r3,zero
  80d100:	297fffc4 	addi	r5,r5,-1
  80d104:	04bfffc4 	movi	r18,-1
  80d108:	0081ffc4 	movi	r2,2047
  80d10c:	003fa106 	br	80cf94 <__alt_mem_onchip_mem+0xff804f94>
  80d110:	00c00044 	movi	r3,1
  80d114:	1887c83a 	sub	r3,r3,r2
  80d118:	01000e04 	movi	r4,56
  80d11c:	20c1210e 	bge	r4,r3,80d5a4 <__divdf3+0x78c>
  80d120:	98c0004c 	andi	r3,r19,1
  80d124:	0005883a 	mov	r2,zero
  80d128:	000b883a 	mov	r5,zero
  80d12c:	0025883a 	mov	r18,zero
  80d130:	003f9806 	br	80cf94 <__alt_mem_onchip_mem+0xff804f94>
  80d134:	8c00fd36 	bltu	r17,r16,80d52c <__divdf3+0x714>
  80d138:	8440fb26 	beq	r16,r17,80d528 <__divdf3+0x710>
  80d13c:	8007883a 	mov	r3,r16
  80d140:	ad7fffc4 	addi	r21,r21,-1
  80d144:	0021883a 	mov	r16,zero
  80d148:	4004d63a 	srli	r2,r8,24
  80d14c:	8822923a 	slli	r17,r17,8
  80d150:	1809883a 	mov	r4,r3
  80d154:	402c923a 	slli	r22,r8,8
  80d158:	88b8b03a 	or	fp,r17,r2
  80d15c:	e028d43a 	srli	r20,fp,16
  80d160:	d8c00015 	stw	r3,0(sp)
  80d164:	e5ffffcc 	andi	r23,fp,65535
  80d168:	a00b883a 	mov	r5,r20
  80d16c:	08014b80 	call	8014b8 <__udivsi3>
  80d170:	d8c00017 	ldw	r3,0(sp)
  80d174:	a00b883a 	mov	r5,r20
  80d178:	d8800315 	stw	r2,12(sp)
  80d17c:	1809883a 	mov	r4,r3
  80d180:	080151c0 	call	80151c <__umodsi3>
  80d184:	d9800317 	ldw	r6,12(sp)
  80d188:	1006943a 	slli	r3,r2,16
  80d18c:	9004d43a 	srli	r2,r18,16
  80d190:	b9a3383a 	mul	r17,r23,r6
  80d194:	10c4b03a 	or	r2,r2,r3
  80d198:	1440062e 	bgeu	r2,r17,80d1b4 <__divdf3+0x39c>
  80d19c:	1705883a 	add	r2,r2,fp
  80d1a0:	30ffffc4 	addi	r3,r6,-1
  80d1a4:	1700ee36 	bltu	r2,fp,80d560 <__divdf3+0x748>
  80d1a8:	1440ed2e 	bgeu	r2,r17,80d560 <__divdf3+0x748>
  80d1ac:	31bfff84 	addi	r6,r6,-2
  80d1b0:	1705883a 	add	r2,r2,fp
  80d1b4:	1463c83a 	sub	r17,r2,r17
  80d1b8:	a00b883a 	mov	r5,r20
  80d1bc:	8809883a 	mov	r4,r17
  80d1c0:	d9800315 	stw	r6,12(sp)
  80d1c4:	08014b80 	call	8014b8 <__udivsi3>
  80d1c8:	a00b883a 	mov	r5,r20
  80d1cc:	8809883a 	mov	r4,r17
  80d1d0:	d8800215 	stw	r2,8(sp)
  80d1d4:	080151c0 	call	80151c <__umodsi3>
  80d1d8:	d9c00217 	ldw	r7,8(sp)
  80d1dc:	1004943a 	slli	r2,r2,16
  80d1e0:	94bfffcc 	andi	r18,r18,65535
  80d1e4:	b9d1383a 	mul	r8,r23,r7
  80d1e8:	90a4b03a 	or	r18,r18,r2
  80d1ec:	d9800317 	ldw	r6,12(sp)
  80d1f0:	9200062e 	bgeu	r18,r8,80d20c <__divdf3+0x3f4>
  80d1f4:	9725883a 	add	r18,r18,fp
  80d1f8:	38bfffc4 	addi	r2,r7,-1
  80d1fc:	9700d636 	bltu	r18,fp,80d558 <__divdf3+0x740>
  80d200:	9200d52e 	bgeu	r18,r8,80d558 <__divdf3+0x740>
  80d204:	39ffff84 	addi	r7,r7,-2
  80d208:	9725883a 	add	r18,r18,fp
  80d20c:	3004943a 	slli	r2,r6,16
  80d210:	b012d43a 	srli	r9,r22,16
  80d214:	b1bfffcc 	andi	r6,r22,65535
  80d218:	11e2b03a 	or	r17,r2,r7
  80d21c:	8806d43a 	srli	r3,r17,16
  80d220:	893fffcc 	andi	r4,r17,65535
  80d224:	218b383a 	mul	r5,r4,r6
  80d228:	30c5383a 	mul	r2,r6,r3
  80d22c:	2249383a 	mul	r4,r4,r9
  80d230:	280ed43a 	srli	r7,r5,16
  80d234:	9225c83a 	sub	r18,r18,r8
  80d238:	2089883a 	add	r4,r4,r2
  80d23c:	3909883a 	add	r4,r7,r4
  80d240:	1a47383a 	mul	r3,r3,r9
  80d244:	2080022e 	bgeu	r4,r2,80d250 <__divdf3+0x438>
  80d248:	00800074 	movhi	r2,1
  80d24c:	1887883a 	add	r3,r3,r2
  80d250:	2004d43a 	srli	r2,r4,16
  80d254:	2008943a 	slli	r4,r4,16
  80d258:	297fffcc 	andi	r5,r5,65535
  80d25c:	10c7883a 	add	r3,r2,r3
  80d260:	2149883a 	add	r4,r4,r5
  80d264:	90c0a536 	bltu	r18,r3,80d4fc <__divdf3+0x6e4>
  80d268:	90c0bf26 	beq	r18,r3,80d568 <__divdf3+0x750>
  80d26c:	90c7c83a 	sub	r3,r18,r3
  80d270:	810fc83a 	sub	r7,r16,r4
  80d274:	81e5803a 	cmpltu	r18,r16,r7
  80d278:	1ca5c83a 	sub	r18,r3,r18
  80d27c:	e480c126 	beq	fp,r18,80d584 <__divdf3+0x76c>
  80d280:	a00b883a 	mov	r5,r20
  80d284:	9009883a 	mov	r4,r18
  80d288:	d9800315 	stw	r6,12(sp)
  80d28c:	d9c00215 	stw	r7,8(sp)
  80d290:	da400115 	stw	r9,4(sp)
  80d294:	08014b80 	call	8014b8 <__udivsi3>
  80d298:	a00b883a 	mov	r5,r20
  80d29c:	9009883a 	mov	r4,r18
  80d2a0:	d8800015 	stw	r2,0(sp)
  80d2a4:	080151c0 	call	80151c <__umodsi3>
  80d2a8:	d9c00217 	ldw	r7,8(sp)
  80d2ac:	da000017 	ldw	r8,0(sp)
  80d2b0:	1006943a 	slli	r3,r2,16
  80d2b4:	3804d43a 	srli	r2,r7,16
  80d2b8:	ba21383a 	mul	r16,r23,r8
  80d2bc:	d9800317 	ldw	r6,12(sp)
  80d2c0:	10c4b03a 	or	r2,r2,r3
  80d2c4:	da400117 	ldw	r9,4(sp)
  80d2c8:	1400062e 	bgeu	r2,r16,80d2e4 <__divdf3+0x4cc>
  80d2cc:	1705883a 	add	r2,r2,fp
  80d2d0:	40ffffc4 	addi	r3,r8,-1
  80d2d4:	1700ad36 	bltu	r2,fp,80d58c <__divdf3+0x774>
  80d2d8:	1400ac2e 	bgeu	r2,r16,80d58c <__divdf3+0x774>
  80d2dc:	423fff84 	addi	r8,r8,-2
  80d2e0:	1705883a 	add	r2,r2,fp
  80d2e4:	1421c83a 	sub	r16,r2,r16
  80d2e8:	a00b883a 	mov	r5,r20
  80d2ec:	8009883a 	mov	r4,r16
  80d2f0:	d9800315 	stw	r6,12(sp)
  80d2f4:	d9c00215 	stw	r7,8(sp)
  80d2f8:	da000015 	stw	r8,0(sp)
  80d2fc:	da400115 	stw	r9,4(sp)
  80d300:	08014b80 	call	8014b8 <__udivsi3>
  80d304:	8009883a 	mov	r4,r16
  80d308:	a00b883a 	mov	r5,r20
  80d30c:	1025883a 	mov	r18,r2
  80d310:	080151c0 	call	80151c <__umodsi3>
  80d314:	d9c00217 	ldw	r7,8(sp)
  80d318:	1004943a 	slli	r2,r2,16
  80d31c:	bcaf383a 	mul	r23,r23,r18
  80d320:	393fffcc 	andi	r4,r7,65535
  80d324:	2088b03a 	or	r4,r4,r2
  80d328:	d9800317 	ldw	r6,12(sp)
  80d32c:	da000017 	ldw	r8,0(sp)
  80d330:	da400117 	ldw	r9,4(sp)
  80d334:	25c0062e 	bgeu	r4,r23,80d350 <__divdf3+0x538>
  80d338:	2709883a 	add	r4,r4,fp
  80d33c:	90bfffc4 	addi	r2,r18,-1
  80d340:	27009436 	bltu	r4,fp,80d594 <__divdf3+0x77c>
  80d344:	25c0932e 	bgeu	r4,r23,80d594 <__divdf3+0x77c>
  80d348:	94bfff84 	addi	r18,r18,-2
  80d34c:	2709883a 	add	r4,r4,fp
  80d350:	4004943a 	slli	r2,r8,16
  80d354:	25efc83a 	sub	r23,r4,r23
  80d358:	1490b03a 	or	r8,r2,r18
  80d35c:	4008d43a 	srli	r4,r8,16
  80d360:	40ffffcc 	andi	r3,r8,65535
  80d364:	30c5383a 	mul	r2,r6,r3
  80d368:	1a47383a 	mul	r3,r3,r9
  80d36c:	310d383a 	mul	r6,r6,r4
  80d370:	100ad43a 	srli	r5,r2,16
  80d374:	4913383a 	mul	r9,r9,r4
  80d378:	1987883a 	add	r3,r3,r6
  80d37c:	28c7883a 	add	r3,r5,r3
  80d380:	1980022e 	bgeu	r3,r6,80d38c <__divdf3+0x574>
  80d384:	01000074 	movhi	r4,1
  80d388:	4913883a 	add	r9,r9,r4
  80d38c:	1808d43a 	srli	r4,r3,16
  80d390:	1806943a 	slli	r3,r3,16
  80d394:	10bfffcc 	andi	r2,r2,65535
  80d398:	2253883a 	add	r9,r4,r9
  80d39c:	1887883a 	add	r3,r3,r2
  80d3a0:	ba403836 	bltu	r23,r9,80d484 <__divdf3+0x66c>
  80d3a4:	ba403626 	beq	r23,r9,80d480 <__divdf3+0x668>
  80d3a8:	42000054 	ori	r8,r8,1
  80d3ac:	a880ffc4 	addi	r2,r21,1023
  80d3b0:	00bf570e 	bge	zero,r2,80d110 <__alt_mem_onchip_mem+0xff805110>
  80d3b4:	40c001cc 	andi	r3,r8,7
  80d3b8:	18000726 	beq	r3,zero,80d3d8 <__divdf3+0x5c0>
  80d3bc:	40c003cc 	andi	r3,r8,15
  80d3c0:	01000104 	movi	r4,4
  80d3c4:	19000426 	beq	r3,r4,80d3d8 <__divdf3+0x5c0>
  80d3c8:	4107883a 	add	r3,r8,r4
  80d3cc:	1a11803a 	cmpltu	r8,r3,r8
  80d3d0:	8a23883a 	add	r17,r17,r8
  80d3d4:	1811883a 	mov	r8,r3
  80d3d8:	88c0402c 	andhi	r3,r17,256
  80d3dc:	18000426 	beq	r3,zero,80d3f0 <__divdf3+0x5d8>
  80d3e0:	00ffc034 	movhi	r3,65280
  80d3e4:	18ffffc4 	addi	r3,r3,-1
  80d3e8:	a8810004 	addi	r2,r21,1024
  80d3ec:	88e2703a 	and	r17,r17,r3
  80d3f0:	00c1ff84 	movi	r3,2046
  80d3f4:	18bee316 	blt	r3,r2,80cf84 <__alt_mem_onchip_mem+0xff804f84>
  80d3f8:	8824977a 	slli	r18,r17,29
  80d3fc:	4010d0fa 	srli	r8,r8,3
  80d400:	8822927a 	slli	r17,r17,9
  80d404:	1081ffcc 	andi	r2,r2,2047
  80d408:	9224b03a 	or	r18,r18,r8
  80d40c:	880ad33a 	srli	r5,r17,12
  80d410:	98c0004c 	andi	r3,r19,1
  80d414:	003edf06 	br	80cf94 <__alt_mem_onchip_mem+0xff804f94>
  80d418:	8080022c 	andhi	r2,r16,8
  80d41c:	10001226 	beq	r2,zero,80d468 <__divdf3+0x650>
  80d420:	8880022c 	andhi	r2,r17,8
  80d424:	1000101e 	bne	r2,zero,80d468 <__divdf3+0x650>
  80d428:	00800434 	movhi	r2,16
  80d42c:	89400234 	orhi	r5,r17,8
  80d430:	10bfffc4 	addi	r2,r2,-1
  80d434:	b007883a 	mov	r3,r22
  80d438:	288a703a 	and	r5,r5,r2
  80d43c:	4025883a 	mov	r18,r8
  80d440:	003f3106 	br	80d108 <__alt_mem_onchip_mem+0xff805108>
  80d444:	008000c4 	movi	r2,3
  80d448:	3880a626 	beq	r7,r2,80d6e4 <__divdf3+0x8cc>
  80d44c:	00800044 	movi	r2,1
  80d450:	3880521e 	bne	r7,r2,80d59c <__divdf3+0x784>
  80d454:	b807883a 	mov	r3,r23
  80d458:	0005883a 	mov	r2,zero
  80d45c:	000b883a 	mov	r5,zero
  80d460:	0025883a 	mov	r18,zero
  80d464:	003ecb06 	br	80cf94 <__alt_mem_onchip_mem+0xff804f94>
  80d468:	00800434 	movhi	r2,16
  80d46c:	81400234 	orhi	r5,r16,8
  80d470:	10bfffc4 	addi	r2,r2,-1
  80d474:	a007883a 	mov	r3,r20
  80d478:	288a703a 	and	r5,r5,r2
  80d47c:	003f2206 	br	80d108 <__alt_mem_onchip_mem+0xff805108>
  80d480:	183fca26 	beq	r3,zero,80d3ac <__alt_mem_onchip_mem+0xff8053ac>
  80d484:	e5ef883a 	add	r23,fp,r23
  80d488:	40bfffc4 	addi	r2,r8,-1
  80d48c:	bf00392e 	bgeu	r23,fp,80d574 <__divdf3+0x75c>
  80d490:	1011883a 	mov	r8,r2
  80d494:	ba7fc41e 	bne	r23,r9,80d3a8 <__alt_mem_onchip_mem+0xff8053a8>
  80d498:	b0ffc31e 	bne	r22,r3,80d3a8 <__alt_mem_onchip_mem+0xff8053a8>
  80d49c:	003fc306 	br	80d3ac <__alt_mem_onchip_mem+0xff8053ac>
  80d4a0:	143ff604 	addi	r16,r2,-40
  80d4a4:	9c20983a 	sll	r16,r19,r16
  80d4a8:	0025883a 	mov	r18,zero
  80d4ac:	003ee206 	br	80d038 <__alt_mem_onchip_mem+0xff805038>
  80d4b0:	d9800315 	stw	r6,12(sp)
  80d4b4:	d9c00215 	stw	r7,8(sp)
  80d4b8:	080eb700 	call	80eb70 <__clzsi2>
  80d4bc:	10800804 	addi	r2,r2,32
  80d4c0:	d9c00217 	ldw	r7,8(sp)
  80d4c4:	d9800317 	ldw	r6,12(sp)
  80d4c8:	003ed106 	br	80d010 <__alt_mem_onchip_mem+0xff805010>
  80d4cc:	147ff604 	addi	r17,r2,-40
  80d4d0:	3462983a 	sll	r17,r6,r17
  80d4d4:	0011883a 	mov	r8,zero
  80d4d8:	003ef506 	br	80d0b0 <__alt_mem_onchip_mem+0xff8050b0>
  80d4dc:	3009883a 	mov	r4,r6
  80d4e0:	d9800315 	stw	r6,12(sp)
  80d4e4:	da400115 	stw	r9,4(sp)
  80d4e8:	080eb700 	call	80eb70 <__clzsi2>
  80d4ec:	10800804 	addi	r2,r2,32
  80d4f0:	da400117 	ldw	r9,4(sp)
  80d4f4:	d9800317 	ldw	r6,12(sp)
  80d4f8:	003ee306 	br	80d088 <__alt_mem_onchip_mem+0xff805088>
  80d4fc:	85a1883a 	add	r16,r16,r22
  80d500:	8585803a 	cmpltu	r2,r16,r22
  80d504:	1705883a 	add	r2,r2,fp
  80d508:	14a5883a 	add	r18,r2,r18
  80d50c:	88bfffc4 	addi	r2,r17,-1
  80d510:	e4800c2e 	bgeu	fp,r18,80d544 <__divdf3+0x72c>
  80d514:	90c03e36 	bltu	r18,r3,80d610 <__divdf3+0x7f8>
  80d518:	1c806926 	beq	r3,r18,80d6c0 <__divdf3+0x8a8>
  80d51c:	90c7c83a 	sub	r3,r18,r3
  80d520:	1023883a 	mov	r17,r2
  80d524:	003f5206 	br	80d270 <__alt_mem_onchip_mem+0xff805270>
  80d528:	923f0436 	bltu	r18,r8,80d13c <__alt_mem_onchip_mem+0xff80513c>
  80d52c:	800897fa 	slli	r4,r16,31
  80d530:	9004d07a 	srli	r2,r18,1
  80d534:	8006d07a 	srli	r3,r16,1
  80d538:	902097fa 	slli	r16,r18,31
  80d53c:	20a4b03a 	or	r18,r4,r2
  80d540:	003f0106 	br	80d148 <__alt_mem_onchip_mem+0xff805148>
  80d544:	e4bff51e 	bne	fp,r18,80d51c <__alt_mem_onchip_mem+0xff80551c>
  80d548:	85bff22e 	bgeu	r16,r22,80d514 <__alt_mem_onchip_mem+0xff805514>
  80d54c:	e0c7c83a 	sub	r3,fp,r3
  80d550:	1023883a 	mov	r17,r2
  80d554:	003f4606 	br	80d270 <__alt_mem_onchip_mem+0xff805270>
  80d558:	100f883a 	mov	r7,r2
  80d55c:	003f2b06 	br	80d20c <__alt_mem_onchip_mem+0xff80520c>
  80d560:	180d883a 	mov	r6,r3
  80d564:	003f1306 	br	80d1b4 <__alt_mem_onchip_mem+0xff8051b4>
  80d568:	813fe436 	bltu	r16,r4,80d4fc <__alt_mem_onchip_mem+0xff8054fc>
  80d56c:	0007883a 	mov	r3,zero
  80d570:	003f3f06 	br	80d270 <__alt_mem_onchip_mem+0xff805270>
  80d574:	ba402c36 	bltu	r23,r9,80d628 <__divdf3+0x810>
  80d578:	4dc05426 	beq	r9,r23,80d6cc <__divdf3+0x8b4>
  80d57c:	1011883a 	mov	r8,r2
  80d580:	003f8906 	br	80d3a8 <__alt_mem_onchip_mem+0xff8053a8>
  80d584:	023fffc4 	movi	r8,-1
  80d588:	003f8806 	br	80d3ac <__alt_mem_onchip_mem+0xff8053ac>
  80d58c:	1811883a 	mov	r8,r3
  80d590:	003f5406 	br	80d2e4 <__alt_mem_onchip_mem+0xff8052e4>
  80d594:	1025883a 	mov	r18,r2
  80d598:	003f6d06 	br	80d350 <__alt_mem_onchip_mem+0xff805350>
  80d59c:	b827883a 	mov	r19,r23
  80d5a0:	003f8206 	br	80d3ac <__alt_mem_onchip_mem+0xff8053ac>
  80d5a4:	010007c4 	movi	r4,31
  80d5a8:	20c02616 	blt	r4,r3,80d644 <__divdf3+0x82c>
  80d5ac:	00800804 	movi	r2,32
  80d5b0:	10c5c83a 	sub	r2,r2,r3
  80d5b4:	888a983a 	sll	r5,r17,r2
  80d5b8:	40c8d83a 	srl	r4,r8,r3
  80d5bc:	4084983a 	sll	r2,r8,r2
  80d5c0:	88e2d83a 	srl	r17,r17,r3
  80d5c4:	2906b03a 	or	r3,r5,r4
  80d5c8:	1004c03a 	cmpne	r2,r2,zero
  80d5cc:	1886b03a 	or	r3,r3,r2
  80d5d0:	188001cc 	andi	r2,r3,7
  80d5d4:	10000726 	beq	r2,zero,80d5f4 <__divdf3+0x7dc>
  80d5d8:	188003cc 	andi	r2,r3,15
  80d5dc:	01000104 	movi	r4,4
  80d5e0:	11000426 	beq	r2,r4,80d5f4 <__divdf3+0x7dc>
  80d5e4:	1805883a 	mov	r2,r3
  80d5e8:	10c00104 	addi	r3,r2,4
  80d5ec:	1885803a 	cmpltu	r2,r3,r2
  80d5f0:	88a3883a 	add	r17,r17,r2
  80d5f4:	8880202c 	andhi	r2,r17,128
  80d5f8:	10002726 	beq	r2,zero,80d698 <__divdf3+0x880>
  80d5fc:	98c0004c 	andi	r3,r19,1
  80d600:	00800044 	movi	r2,1
  80d604:	000b883a 	mov	r5,zero
  80d608:	0025883a 	mov	r18,zero
  80d60c:	003e6106 	br	80cf94 <__alt_mem_onchip_mem+0xff804f94>
  80d610:	85a1883a 	add	r16,r16,r22
  80d614:	8585803a 	cmpltu	r2,r16,r22
  80d618:	1705883a 	add	r2,r2,fp
  80d61c:	14a5883a 	add	r18,r2,r18
  80d620:	8c7fff84 	addi	r17,r17,-2
  80d624:	003f1106 	br	80d26c <__alt_mem_onchip_mem+0xff80526c>
  80d628:	b589883a 	add	r4,r22,r22
  80d62c:	25ad803a 	cmpltu	r22,r4,r22
  80d630:	b739883a 	add	fp,r22,fp
  80d634:	40bfff84 	addi	r2,r8,-2
  80d638:	bf2f883a 	add	r23,r23,fp
  80d63c:	202d883a 	mov	r22,r4
  80d640:	003f9306 	br	80d490 <__alt_mem_onchip_mem+0xff805490>
  80d644:	013ff844 	movi	r4,-31
  80d648:	2085c83a 	sub	r2,r4,r2
  80d64c:	8888d83a 	srl	r4,r17,r2
  80d650:	00800804 	movi	r2,32
  80d654:	18802126 	beq	r3,r2,80d6dc <__divdf3+0x8c4>
  80d658:	00801004 	movi	r2,64
  80d65c:	10c5c83a 	sub	r2,r2,r3
  80d660:	8884983a 	sll	r2,r17,r2
  80d664:	1204b03a 	or	r2,r2,r8
  80d668:	1004c03a 	cmpne	r2,r2,zero
  80d66c:	2084b03a 	or	r2,r4,r2
  80d670:	144001cc 	andi	r17,r2,7
  80d674:	88000d1e 	bne	r17,zero,80d6ac <__divdf3+0x894>
  80d678:	000b883a 	mov	r5,zero
  80d67c:	1024d0fa 	srli	r18,r2,3
  80d680:	98c0004c 	andi	r3,r19,1
  80d684:	0005883a 	mov	r2,zero
  80d688:	9464b03a 	or	r18,r18,r17
  80d68c:	003e4106 	br	80cf94 <__alt_mem_onchip_mem+0xff804f94>
  80d690:	1007883a 	mov	r3,r2
  80d694:	0023883a 	mov	r17,zero
  80d698:	880a927a 	slli	r5,r17,9
  80d69c:	1805883a 	mov	r2,r3
  80d6a0:	8822977a 	slli	r17,r17,29
  80d6a4:	280ad33a 	srli	r5,r5,12
  80d6a8:	003ff406 	br	80d67c <__alt_mem_onchip_mem+0xff80567c>
  80d6ac:	10c003cc 	andi	r3,r2,15
  80d6b0:	01000104 	movi	r4,4
  80d6b4:	193ff626 	beq	r3,r4,80d690 <__alt_mem_onchip_mem+0xff805690>
  80d6b8:	0023883a 	mov	r17,zero
  80d6bc:	003fca06 	br	80d5e8 <__alt_mem_onchip_mem+0xff8055e8>
  80d6c0:	813fd336 	bltu	r16,r4,80d610 <__alt_mem_onchip_mem+0xff805610>
  80d6c4:	1023883a 	mov	r17,r2
  80d6c8:	003fa806 	br	80d56c <__alt_mem_onchip_mem+0xff80556c>
  80d6cc:	b0ffd636 	bltu	r22,r3,80d628 <__alt_mem_onchip_mem+0xff805628>
  80d6d0:	1011883a 	mov	r8,r2
  80d6d4:	b0ff341e 	bne	r22,r3,80d3a8 <__alt_mem_onchip_mem+0xff8053a8>
  80d6d8:	003f3406 	br	80d3ac <__alt_mem_onchip_mem+0xff8053ac>
  80d6dc:	0005883a 	mov	r2,zero
  80d6e0:	003fe006 	br	80d664 <__alt_mem_onchip_mem+0xff805664>
  80d6e4:	00800434 	movhi	r2,16
  80d6e8:	89400234 	orhi	r5,r17,8
  80d6ec:	10bfffc4 	addi	r2,r2,-1
  80d6f0:	b807883a 	mov	r3,r23
  80d6f4:	288a703a 	and	r5,r5,r2
  80d6f8:	4025883a 	mov	r18,r8
  80d6fc:	003e8206 	br	80d108 <__alt_mem_onchip_mem+0xff805108>

0080d700 <__eqdf2>:
  80d700:	2804d53a 	srli	r2,r5,20
  80d704:	3806d53a 	srli	r3,r7,20
  80d708:	02000434 	movhi	r8,16
  80d70c:	423fffc4 	addi	r8,r8,-1
  80d710:	1081ffcc 	andi	r2,r2,2047
  80d714:	0281ffc4 	movi	r10,2047
  80d718:	2a12703a 	and	r9,r5,r8
  80d71c:	18c1ffcc 	andi	r3,r3,2047
  80d720:	3a10703a 	and	r8,r7,r8
  80d724:	280ad7fa 	srli	r5,r5,31
  80d728:	380ed7fa 	srli	r7,r7,31
  80d72c:	12801026 	beq	r2,r10,80d770 <__eqdf2+0x70>
  80d730:	0281ffc4 	movi	r10,2047
  80d734:	1a800a26 	beq	r3,r10,80d760 <__eqdf2+0x60>
  80d738:	10c00226 	beq	r2,r3,80d744 <__eqdf2+0x44>
  80d73c:	00800044 	movi	r2,1
  80d740:	f800283a 	ret
  80d744:	4a3ffd1e 	bne	r9,r8,80d73c <__alt_mem_onchip_mem+0xff80573c>
  80d748:	21bffc1e 	bne	r4,r6,80d73c <__alt_mem_onchip_mem+0xff80573c>
  80d74c:	29c00c26 	beq	r5,r7,80d780 <__eqdf2+0x80>
  80d750:	103ffa1e 	bne	r2,zero,80d73c <__alt_mem_onchip_mem+0xff80573c>
  80d754:	2244b03a 	or	r2,r4,r9
  80d758:	1004c03a 	cmpne	r2,r2,zero
  80d75c:	f800283a 	ret
  80d760:	3214b03a 	or	r10,r6,r8
  80d764:	503ff426 	beq	r10,zero,80d738 <__alt_mem_onchip_mem+0xff805738>
  80d768:	00800044 	movi	r2,1
  80d76c:	f800283a 	ret
  80d770:	2254b03a 	or	r10,r4,r9
  80d774:	503fee26 	beq	r10,zero,80d730 <__alt_mem_onchip_mem+0xff805730>
  80d778:	00800044 	movi	r2,1
  80d77c:	f800283a 	ret
  80d780:	0005883a 	mov	r2,zero
  80d784:	f800283a 	ret

0080d788 <__gedf2>:
  80d788:	2804d53a 	srli	r2,r5,20
  80d78c:	3806d53a 	srli	r3,r7,20
  80d790:	02000434 	movhi	r8,16
  80d794:	423fffc4 	addi	r8,r8,-1
  80d798:	1081ffcc 	andi	r2,r2,2047
  80d79c:	0241ffc4 	movi	r9,2047
  80d7a0:	2a14703a 	and	r10,r5,r8
  80d7a4:	18c1ffcc 	andi	r3,r3,2047
  80d7a8:	3a10703a 	and	r8,r7,r8
  80d7ac:	280ad7fa 	srli	r5,r5,31
  80d7b0:	380ed7fa 	srli	r7,r7,31
  80d7b4:	12401d26 	beq	r2,r9,80d82c <__gedf2+0xa4>
  80d7b8:	0241ffc4 	movi	r9,2047
  80d7bc:	1a401226 	beq	r3,r9,80d808 <__gedf2+0x80>
  80d7c0:	1000081e 	bne	r2,zero,80d7e4 <__gedf2+0x5c>
  80d7c4:	2296b03a 	or	r11,r4,r10
  80d7c8:	5813003a 	cmpeq	r9,r11,zero
  80d7cc:	1800091e 	bne	r3,zero,80d7f4 <__gedf2+0x6c>
  80d7d0:	3218b03a 	or	r12,r6,r8
  80d7d4:	6000071e 	bne	r12,zero,80d7f4 <__gedf2+0x6c>
  80d7d8:	0005883a 	mov	r2,zero
  80d7dc:	5800101e 	bne	r11,zero,80d820 <__gedf2+0x98>
  80d7e0:	f800283a 	ret
  80d7e4:	18000c1e 	bne	r3,zero,80d818 <__gedf2+0x90>
  80d7e8:	3212b03a 	or	r9,r6,r8
  80d7ec:	48000c26 	beq	r9,zero,80d820 <__gedf2+0x98>
  80d7f0:	0013883a 	mov	r9,zero
  80d7f4:	39c03fcc 	andi	r7,r7,255
  80d7f8:	48000826 	beq	r9,zero,80d81c <__gedf2+0x94>
  80d7fc:	38000926 	beq	r7,zero,80d824 <__gedf2+0x9c>
  80d800:	00800044 	movi	r2,1
  80d804:	f800283a 	ret
  80d808:	3212b03a 	or	r9,r6,r8
  80d80c:	483fec26 	beq	r9,zero,80d7c0 <__alt_mem_onchip_mem+0xff8057c0>
  80d810:	00bfff84 	movi	r2,-2
  80d814:	f800283a 	ret
  80d818:	39c03fcc 	andi	r7,r7,255
  80d81c:	29c00626 	beq	r5,r7,80d838 <__gedf2+0xb0>
  80d820:	283ff726 	beq	r5,zero,80d800 <__alt_mem_onchip_mem+0xff805800>
  80d824:	00bfffc4 	movi	r2,-1
  80d828:	f800283a 	ret
  80d82c:	2292b03a 	or	r9,r4,r10
  80d830:	483fe126 	beq	r9,zero,80d7b8 <__alt_mem_onchip_mem+0xff8057b8>
  80d834:	003ff606 	br	80d810 <__alt_mem_onchip_mem+0xff805810>
  80d838:	18bff916 	blt	r3,r2,80d820 <__alt_mem_onchip_mem+0xff805820>
  80d83c:	10c00316 	blt	r2,r3,80d84c <__gedf2+0xc4>
  80d840:	42bff736 	bltu	r8,r10,80d820 <__alt_mem_onchip_mem+0xff805820>
  80d844:	52000326 	beq	r10,r8,80d854 <__gedf2+0xcc>
  80d848:	5200042e 	bgeu	r10,r8,80d85c <__gedf2+0xd4>
  80d84c:	283fec1e 	bne	r5,zero,80d800 <__alt_mem_onchip_mem+0xff805800>
  80d850:	003ff406 	br	80d824 <__alt_mem_onchip_mem+0xff805824>
  80d854:	313ff236 	bltu	r6,r4,80d820 <__alt_mem_onchip_mem+0xff805820>
  80d858:	21bffc36 	bltu	r4,r6,80d84c <__alt_mem_onchip_mem+0xff80584c>
  80d85c:	0005883a 	mov	r2,zero
  80d860:	f800283a 	ret

0080d864 <__ledf2>:
  80d864:	2804d53a 	srli	r2,r5,20
  80d868:	3810d53a 	srli	r8,r7,20
  80d86c:	00c00434 	movhi	r3,16
  80d870:	18ffffc4 	addi	r3,r3,-1
  80d874:	1081ffcc 	andi	r2,r2,2047
  80d878:	0241ffc4 	movi	r9,2047
  80d87c:	28d4703a 	and	r10,r5,r3
  80d880:	4201ffcc 	andi	r8,r8,2047
  80d884:	38c6703a 	and	r3,r7,r3
  80d888:	280ad7fa 	srli	r5,r5,31
  80d88c:	380ed7fa 	srli	r7,r7,31
  80d890:	12401f26 	beq	r2,r9,80d910 <__ledf2+0xac>
  80d894:	0241ffc4 	movi	r9,2047
  80d898:	42401426 	beq	r8,r9,80d8ec <__ledf2+0x88>
  80d89c:	1000091e 	bne	r2,zero,80d8c4 <__ledf2+0x60>
  80d8a0:	2296b03a 	or	r11,r4,r10
  80d8a4:	5813003a 	cmpeq	r9,r11,zero
  80d8a8:	29403fcc 	andi	r5,r5,255
  80d8ac:	40000a1e 	bne	r8,zero,80d8d8 <__ledf2+0x74>
  80d8b0:	30d8b03a 	or	r12,r6,r3
  80d8b4:	6000081e 	bne	r12,zero,80d8d8 <__ledf2+0x74>
  80d8b8:	0005883a 	mov	r2,zero
  80d8bc:	5800111e 	bne	r11,zero,80d904 <__ledf2+0xa0>
  80d8c0:	f800283a 	ret
  80d8c4:	29403fcc 	andi	r5,r5,255
  80d8c8:	40000c1e 	bne	r8,zero,80d8fc <__ledf2+0x98>
  80d8cc:	30d2b03a 	or	r9,r6,r3
  80d8d0:	48000c26 	beq	r9,zero,80d904 <__ledf2+0xa0>
  80d8d4:	0013883a 	mov	r9,zero
  80d8d8:	39c03fcc 	andi	r7,r7,255
  80d8dc:	48000826 	beq	r9,zero,80d900 <__ledf2+0x9c>
  80d8e0:	38001126 	beq	r7,zero,80d928 <__ledf2+0xc4>
  80d8e4:	00800044 	movi	r2,1
  80d8e8:	f800283a 	ret
  80d8ec:	30d2b03a 	or	r9,r6,r3
  80d8f0:	483fea26 	beq	r9,zero,80d89c <__alt_mem_onchip_mem+0xff80589c>
  80d8f4:	00800084 	movi	r2,2
  80d8f8:	f800283a 	ret
  80d8fc:	39c03fcc 	andi	r7,r7,255
  80d900:	39400726 	beq	r7,r5,80d920 <__ledf2+0xbc>
  80d904:	2800081e 	bne	r5,zero,80d928 <__ledf2+0xc4>
  80d908:	00800044 	movi	r2,1
  80d90c:	f800283a 	ret
  80d910:	2292b03a 	or	r9,r4,r10
  80d914:	483fdf26 	beq	r9,zero,80d894 <__alt_mem_onchip_mem+0xff805894>
  80d918:	00800084 	movi	r2,2
  80d91c:	f800283a 	ret
  80d920:	4080030e 	bge	r8,r2,80d930 <__ledf2+0xcc>
  80d924:	383fef26 	beq	r7,zero,80d8e4 <__alt_mem_onchip_mem+0xff8058e4>
  80d928:	00bfffc4 	movi	r2,-1
  80d92c:	f800283a 	ret
  80d930:	123feb16 	blt	r2,r8,80d8e0 <__alt_mem_onchip_mem+0xff8058e0>
  80d934:	1abff336 	bltu	r3,r10,80d904 <__alt_mem_onchip_mem+0xff805904>
  80d938:	50c00326 	beq	r10,r3,80d948 <__ledf2+0xe4>
  80d93c:	50c0042e 	bgeu	r10,r3,80d950 <__ledf2+0xec>
  80d940:	283fe81e 	bne	r5,zero,80d8e4 <__alt_mem_onchip_mem+0xff8058e4>
  80d944:	003ff806 	br	80d928 <__alt_mem_onchip_mem+0xff805928>
  80d948:	313fee36 	bltu	r6,r4,80d904 <__alt_mem_onchip_mem+0xff805904>
  80d94c:	21bffc36 	bltu	r4,r6,80d940 <__alt_mem_onchip_mem+0xff805940>
  80d950:	0005883a 	mov	r2,zero
  80d954:	f800283a 	ret

0080d958 <__muldf3>:
  80d958:	defff304 	addi	sp,sp,-52
  80d95c:	2804d53a 	srli	r2,r5,20
  80d960:	dd800915 	stw	r22,36(sp)
  80d964:	282cd7fa 	srli	r22,r5,31
  80d968:	dc000315 	stw	r16,12(sp)
  80d96c:	04000434 	movhi	r16,16
  80d970:	dd400815 	stw	r21,32(sp)
  80d974:	dc800515 	stw	r18,20(sp)
  80d978:	843fffc4 	addi	r16,r16,-1
  80d97c:	dfc00c15 	stw	ra,48(sp)
  80d980:	df000b15 	stw	fp,44(sp)
  80d984:	ddc00a15 	stw	r23,40(sp)
  80d988:	dd000715 	stw	r20,28(sp)
  80d98c:	dcc00615 	stw	r19,24(sp)
  80d990:	dc400415 	stw	r17,16(sp)
  80d994:	1481ffcc 	andi	r18,r2,2047
  80d998:	2c20703a 	and	r16,r5,r16
  80d99c:	b02b883a 	mov	r21,r22
  80d9a0:	b2403fcc 	andi	r9,r22,255
  80d9a4:	90006026 	beq	r18,zero,80db28 <__muldf3+0x1d0>
  80d9a8:	0081ffc4 	movi	r2,2047
  80d9ac:	2029883a 	mov	r20,r4
  80d9b0:	90803626 	beq	r18,r2,80da8c <__muldf3+0x134>
  80d9b4:	80800434 	orhi	r2,r16,16
  80d9b8:	100490fa 	slli	r2,r2,3
  80d9bc:	2020d77a 	srli	r16,r4,29
  80d9c0:	202890fa 	slli	r20,r4,3
  80d9c4:	94bf0044 	addi	r18,r18,-1023
  80d9c8:	80a0b03a 	or	r16,r16,r2
  80d9cc:	0027883a 	mov	r19,zero
  80d9d0:	0039883a 	mov	fp,zero
  80d9d4:	3804d53a 	srli	r2,r7,20
  80d9d8:	382ed7fa 	srli	r23,r7,31
  80d9dc:	04400434 	movhi	r17,16
  80d9e0:	8c7fffc4 	addi	r17,r17,-1
  80d9e4:	1081ffcc 	andi	r2,r2,2047
  80d9e8:	3011883a 	mov	r8,r6
  80d9ec:	3c62703a 	and	r17,r7,r17
  80d9f0:	ba803fcc 	andi	r10,r23,255
  80d9f4:	10006d26 	beq	r2,zero,80dbac <__muldf3+0x254>
  80d9f8:	00c1ffc4 	movi	r3,2047
  80d9fc:	10c06526 	beq	r2,r3,80db94 <__muldf3+0x23c>
  80da00:	88c00434 	orhi	r3,r17,16
  80da04:	180690fa 	slli	r3,r3,3
  80da08:	3022d77a 	srli	r17,r6,29
  80da0c:	301090fa 	slli	r8,r6,3
  80da10:	10bf0044 	addi	r2,r2,-1023
  80da14:	88e2b03a 	or	r17,r17,r3
  80da18:	000b883a 	mov	r5,zero
  80da1c:	9085883a 	add	r2,r18,r2
  80da20:	2cc8b03a 	or	r4,r5,r19
  80da24:	00c003c4 	movi	r3,15
  80da28:	bdacf03a 	xor	r22,r23,r22
  80da2c:	12c00044 	addi	r11,r2,1
  80da30:	19009936 	bltu	r3,r4,80dc98 <__muldf3+0x340>
  80da34:	200890ba 	slli	r4,r4,2
  80da38:	00c02074 	movhi	r3,129
  80da3c:	18f69304 	addi	r3,r3,-9652
  80da40:	20c9883a 	add	r4,r4,r3
  80da44:	20c00017 	ldw	r3,0(r4)
  80da48:	1800683a 	jmp	r3
  80da4c:	0080dc98 	cmpnei	r2,zero,882
  80da50:	0080daac 	andhi	r2,zero,874
  80da54:	0080daac 	andhi	r2,zero,874
  80da58:	0080daa8 	cmpgeui	r2,zero,874
  80da5c:	0080dc74 	movhi	r2,881
  80da60:	0080dc74 	movhi	r2,881
  80da64:	0080dc5c 	xori	r2,zero,881
  80da68:	0080daa8 	cmpgeui	r2,zero,874
  80da6c:	0080dc74 	movhi	r2,881
  80da70:	0080dc5c 	xori	r2,zero,881
  80da74:	0080dc74 	movhi	r2,881
  80da78:	0080daa8 	cmpgeui	r2,zero,874
  80da7c:	0080dc84 	movi	r2,882
  80da80:	0080dc84 	movi	r2,882
  80da84:	0080dc84 	movi	r2,882
  80da88:	0080dea0 	cmpeqi	r2,zero,890
  80da8c:	2404b03a 	or	r2,r4,r16
  80da90:	10006f1e 	bne	r2,zero,80dc50 <__muldf3+0x2f8>
  80da94:	04c00204 	movi	r19,8
  80da98:	0021883a 	mov	r16,zero
  80da9c:	0029883a 	mov	r20,zero
  80daa0:	07000084 	movi	fp,2
  80daa4:	003fcb06 	br	80d9d4 <__alt_mem_onchip_mem+0xff8059d4>
  80daa8:	502d883a 	mov	r22,r10
  80daac:	00800084 	movi	r2,2
  80dab0:	28805726 	beq	r5,r2,80dc10 <__muldf3+0x2b8>
  80dab4:	008000c4 	movi	r2,3
  80dab8:	28816626 	beq	r5,r2,80e054 <__muldf3+0x6fc>
  80dabc:	00800044 	movi	r2,1
  80dac0:	2881411e 	bne	r5,r2,80dfc8 <__muldf3+0x670>
  80dac4:	b02b883a 	mov	r21,r22
  80dac8:	0005883a 	mov	r2,zero
  80dacc:	000b883a 	mov	r5,zero
  80dad0:	0029883a 	mov	r20,zero
  80dad4:	1004953a 	slli	r2,r2,20
  80dad8:	a8c03fcc 	andi	r3,r21,255
  80dadc:	04400434 	movhi	r17,16
  80dae0:	8c7fffc4 	addi	r17,r17,-1
  80dae4:	180697fa 	slli	r3,r3,31
  80dae8:	2c4a703a 	and	r5,r5,r17
  80daec:	288ab03a 	or	r5,r5,r2
  80daf0:	28c6b03a 	or	r3,r5,r3
  80daf4:	a005883a 	mov	r2,r20
  80daf8:	dfc00c17 	ldw	ra,48(sp)
  80dafc:	df000b17 	ldw	fp,44(sp)
  80db00:	ddc00a17 	ldw	r23,40(sp)
  80db04:	dd800917 	ldw	r22,36(sp)
  80db08:	dd400817 	ldw	r21,32(sp)
  80db0c:	dd000717 	ldw	r20,28(sp)
  80db10:	dcc00617 	ldw	r19,24(sp)
  80db14:	dc800517 	ldw	r18,20(sp)
  80db18:	dc400417 	ldw	r17,16(sp)
  80db1c:	dc000317 	ldw	r16,12(sp)
  80db20:	dec00d04 	addi	sp,sp,52
  80db24:	f800283a 	ret
  80db28:	2404b03a 	or	r2,r4,r16
  80db2c:	2027883a 	mov	r19,r4
  80db30:	10004226 	beq	r2,zero,80dc3c <__muldf3+0x2e4>
  80db34:	8000fc26 	beq	r16,zero,80df28 <__muldf3+0x5d0>
  80db38:	8009883a 	mov	r4,r16
  80db3c:	d9800215 	stw	r6,8(sp)
  80db40:	d9c00015 	stw	r7,0(sp)
  80db44:	da400115 	stw	r9,4(sp)
  80db48:	080eb700 	call	80eb70 <__clzsi2>
  80db4c:	d9800217 	ldw	r6,8(sp)
  80db50:	d9c00017 	ldw	r7,0(sp)
  80db54:	da400117 	ldw	r9,4(sp)
  80db58:	113ffd44 	addi	r4,r2,-11
  80db5c:	00c00704 	movi	r3,28
  80db60:	1900ed16 	blt	r3,r4,80df18 <__muldf3+0x5c0>
  80db64:	00c00744 	movi	r3,29
  80db68:	147ffe04 	addi	r17,r2,-8
  80db6c:	1907c83a 	sub	r3,r3,r4
  80db70:	8460983a 	sll	r16,r16,r17
  80db74:	98c6d83a 	srl	r3,r19,r3
  80db78:	9c68983a 	sll	r20,r19,r17
  80db7c:	1c20b03a 	or	r16,r3,r16
  80db80:	1080fcc4 	addi	r2,r2,1011
  80db84:	00a5c83a 	sub	r18,zero,r2
  80db88:	0027883a 	mov	r19,zero
  80db8c:	0039883a 	mov	fp,zero
  80db90:	003f9006 	br	80d9d4 <__alt_mem_onchip_mem+0xff8059d4>
  80db94:	3446b03a 	or	r3,r6,r17
  80db98:	1800261e 	bne	r3,zero,80dc34 <__muldf3+0x2dc>
  80db9c:	0023883a 	mov	r17,zero
  80dba0:	0011883a 	mov	r8,zero
  80dba4:	01400084 	movi	r5,2
  80dba8:	003f9c06 	br	80da1c <__alt_mem_onchip_mem+0xff805a1c>
  80dbac:	3446b03a 	or	r3,r6,r17
  80dbb0:	18001c26 	beq	r3,zero,80dc24 <__muldf3+0x2cc>
  80dbb4:	8800ce26 	beq	r17,zero,80def0 <__muldf3+0x598>
  80dbb8:	8809883a 	mov	r4,r17
  80dbbc:	d9800215 	stw	r6,8(sp)
  80dbc0:	da400115 	stw	r9,4(sp)
  80dbc4:	da800015 	stw	r10,0(sp)
  80dbc8:	080eb700 	call	80eb70 <__clzsi2>
  80dbcc:	d9800217 	ldw	r6,8(sp)
  80dbd0:	da400117 	ldw	r9,4(sp)
  80dbd4:	da800017 	ldw	r10,0(sp)
  80dbd8:	113ffd44 	addi	r4,r2,-11
  80dbdc:	00c00704 	movi	r3,28
  80dbe0:	1900bf16 	blt	r3,r4,80dee0 <__muldf3+0x588>
  80dbe4:	00c00744 	movi	r3,29
  80dbe8:	123ffe04 	addi	r8,r2,-8
  80dbec:	1907c83a 	sub	r3,r3,r4
  80dbf0:	8a22983a 	sll	r17,r17,r8
  80dbf4:	30c6d83a 	srl	r3,r6,r3
  80dbf8:	3210983a 	sll	r8,r6,r8
  80dbfc:	1c62b03a 	or	r17,r3,r17
  80dc00:	1080fcc4 	addi	r2,r2,1011
  80dc04:	0085c83a 	sub	r2,zero,r2
  80dc08:	000b883a 	mov	r5,zero
  80dc0c:	003f8306 	br	80da1c <__alt_mem_onchip_mem+0xff805a1c>
  80dc10:	b02b883a 	mov	r21,r22
  80dc14:	0081ffc4 	movi	r2,2047
  80dc18:	000b883a 	mov	r5,zero
  80dc1c:	0029883a 	mov	r20,zero
  80dc20:	003fac06 	br	80dad4 <__alt_mem_onchip_mem+0xff805ad4>
  80dc24:	0023883a 	mov	r17,zero
  80dc28:	0011883a 	mov	r8,zero
  80dc2c:	01400044 	movi	r5,1
  80dc30:	003f7a06 	br	80da1c <__alt_mem_onchip_mem+0xff805a1c>
  80dc34:	014000c4 	movi	r5,3
  80dc38:	003f7806 	br	80da1c <__alt_mem_onchip_mem+0xff805a1c>
  80dc3c:	04c00104 	movi	r19,4
  80dc40:	0021883a 	mov	r16,zero
  80dc44:	0029883a 	mov	r20,zero
  80dc48:	07000044 	movi	fp,1
  80dc4c:	003f6106 	br	80d9d4 <__alt_mem_onchip_mem+0xff8059d4>
  80dc50:	04c00304 	movi	r19,12
  80dc54:	070000c4 	movi	fp,3
  80dc58:	003f5e06 	br	80d9d4 <__alt_mem_onchip_mem+0xff8059d4>
  80dc5c:	01400434 	movhi	r5,16
  80dc60:	002b883a 	mov	r21,zero
  80dc64:	297fffc4 	addi	r5,r5,-1
  80dc68:	053fffc4 	movi	r20,-1
  80dc6c:	0081ffc4 	movi	r2,2047
  80dc70:	003f9806 	br	80dad4 <__alt_mem_onchip_mem+0xff805ad4>
  80dc74:	8023883a 	mov	r17,r16
  80dc78:	a011883a 	mov	r8,r20
  80dc7c:	e00b883a 	mov	r5,fp
  80dc80:	003f8a06 	br	80daac <__alt_mem_onchip_mem+0xff805aac>
  80dc84:	8023883a 	mov	r17,r16
  80dc88:	a011883a 	mov	r8,r20
  80dc8c:	482d883a 	mov	r22,r9
  80dc90:	e00b883a 	mov	r5,fp
  80dc94:	003f8506 	br	80daac <__alt_mem_onchip_mem+0xff805aac>
  80dc98:	a00ad43a 	srli	r5,r20,16
  80dc9c:	401ad43a 	srli	r13,r8,16
  80dca0:	a53fffcc 	andi	r20,r20,65535
  80dca4:	423fffcc 	andi	r8,r8,65535
  80dca8:	4519383a 	mul	r12,r8,r20
  80dcac:	4147383a 	mul	r3,r8,r5
  80dcb0:	6d09383a 	mul	r4,r13,r20
  80dcb4:	600cd43a 	srli	r6,r12,16
  80dcb8:	2b5d383a 	mul	r14,r5,r13
  80dcbc:	20c9883a 	add	r4,r4,r3
  80dcc0:	310d883a 	add	r6,r6,r4
  80dcc4:	30c0022e 	bgeu	r6,r3,80dcd0 <__muldf3+0x378>
  80dcc8:	00c00074 	movhi	r3,1
  80dccc:	70dd883a 	add	r14,r14,r3
  80dcd0:	8826d43a 	srli	r19,r17,16
  80dcd4:	8bffffcc 	andi	r15,r17,65535
  80dcd8:	7d23383a 	mul	r17,r15,r20
  80dcdc:	7949383a 	mul	r4,r15,r5
  80dce0:	9d29383a 	mul	r20,r19,r20
  80dce4:	8814d43a 	srli	r10,r17,16
  80dce8:	3012943a 	slli	r9,r6,16
  80dcec:	a129883a 	add	r20,r20,r4
  80dcf0:	633fffcc 	andi	r12,r12,65535
  80dcf4:	5515883a 	add	r10,r10,r20
  80dcf8:	3006d43a 	srli	r3,r6,16
  80dcfc:	4b13883a 	add	r9,r9,r12
  80dd00:	2ccb383a 	mul	r5,r5,r19
  80dd04:	5100022e 	bgeu	r10,r4,80dd10 <__muldf3+0x3b8>
  80dd08:	01000074 	movhi	r4,1
  80dd0c:	290b883a 	add	r5,r5,r4
  80dd10:	802ad43a 	srli	r21,r16,16
  80dd14:	843fffcc 	andi	r16,r16,65535
  80dd18:	440d383a 	mul	r6,r8,r16
  80dd1c:	4565383a 	mul	r18,r8,r21
  80dd20:	8349383a 	mul	r4,r16,r13
  80dd24:	500e943a 	slli	r7,r10,16
  80dd28:	3010d43a 	srli	r8,r6,16
  80dd2c:	5028d43a 	srli	r20,r10,16
  80dd30:	2489883a 	add	r4,r4,r18
  80dd34:	8abfffcc 	andi	r10,r17,65535
  80dd38:	3a95883a 	add	r10,r7,r10
  80dd3c:	4119883a 	add	r12,r8,r4
  80dd40:	a169883a 	add	r20,r20,r5
  80dd44:	1a87883a 	add	r3,r3,r10
  80dd48:	6d5b383a 	mul	r13,r13,r21
  80dd4c:	6480022e 	bgeu	r12,r18,80dd58 <__muldf3+0x400>
  80dd50:	01000074 	movhi	r4,1
  80dd54:	691b883a 	add	r13,r13,r4
  80dd58:	7c25383a 	mul	r18,r15,r16
  80dd5c:	7d4b383a 	mul	r5,r15,r21
  80dd60:	84cf383a 	mul	r7,r16,r19
  80dd64:	901ed43a 	srli	r15,r18,16
  80dd68:	6008d43a 	srli	r4,r12,16
  80dd6c:	6010943a 	slli	r8,r12,16
  80dd70:	394f883a 	add	r7,r7,r5
  80dd74:	333fffcc 	andi	r12,r6,65535
  80dd78:	79df883a 	add	r15,r15,r7
  80dd7c:	235b883a 	add	r13,r4,r13
  80dd80:	9d63383a 	mul	r17,r19,r21
  80dd84:	4309883a 	add	r4,r8,r12
  80dd88:	7940022e 	bgeu	r15,r5,80dd94 <__muldf3+0x43c>
  80dd8c:	01400074 	movhi	r5,1
  80dd90:	8963883a 	add	r17,r17,r5
  80dd94:	780a943a 	slli	r5,r15,16
  80dd98:	91bfffcc 	andi	r6,r18,65535
  80dd9c:	70c7883a 	add	r3,r14,r3
  80dda0:	298d883a 	add	r6,r5,r6
  80dda4:	1a8f803a 	cmpltu	r7,r3,r10
  80dda8:	350b883a 	add	r5,r6,r20
  80ddac:	20c7883a 	add	r3,r4,r3
  80ddb0:	3955883a 	add	r10,r7,r5
  80ddb4:	1909803a 	cmpltu	r4,r3,r4
  80ddb8:	6a91883a 	add	r8,r13,r10
  80ddbc:	780cd43a 	srli	r6,r15,16
  80ddc0:	2219883a 	add	r12,r4,r8
  80ddc4:	2d0b803a 	cmpltu	r5,r5,r20
  80ddc8:	51cf803a 	cmpltu	r7,r10,r7
  80ddcc:	29ceb03a 	or	r7,r5,r7
  80ddd0:	4351803a 	cmpltu	r8,r8,r13
  80ddd4:	610b803a 	cmpltu	r5,r12,r4
  80ddd8:	4148b03a 	or	r4,r8,r5
  80dddc:	398f883a 	add	r7,r7,r6
  80dde0:	3909883a 	add	r4,r7,r4
  80dde4:	1810927a 	slli	r8,r3,9
  80dde8:	2449883a 	add	r4,r4,r17
  80ddec:	2008927a 	slli	r4,r4,9
  80ddf0:	6022d5fa 	srli	r17,r12,23
  80ddf4:	1806d5fa 	srli	r3,r3,23
  80ddf8:	4252b03a 	or	r9,r8,r9
  80ddfc:	600a927a 	slli	r5,r12,9
  80de00:	4810c03a 	cmpne	r8,r9,zero
  80de04:	2462b03a 	or	r17,r4,r17
  80de08:	40c6b03a 	or	r3,r8,r3
  80de0c:	8900402c 	andhi	r4,r17,256
  80de10:	1950b03a 	or	r8,r3,r5
  80de14:	20000726 	beq	r4,zero,80de34 <__muldf3+0x4dc>
  80de18:	4006d07a 	srli	r3,r8,1
  80de1c:	880497fa 	slli	r2,r17,31
  80de20:	4200004c 	andi	r8,r8,1
  80de24:	8822d07a 	srli	r17,r17,1
  80de28:	1a10b03a 	or	r8,r3,r8
  80de2c:	1210b03a 	or	r8,r2,r8
  80de30:	5805883a 	mov	r2,r11
  80de34:	1140ffc4 	addi	r5,r2,1023
  80de38:	0140440e 	bge	zero,r5,80df4c <__muldf3+0x5f4>
  80de3c:	40c001cc 	andi	r3,r8,7
  80de40:	18000726 	beq	r3,zero,80de60 <__muldf3+0x508>
  80de44:	40c003cc 	andi	r3,r8,15
  80de48:	01000104 	movi	r4,4
  80de4c:	19000426 	beq	r3,r4,80de60 <__muldf3+0x508>
  80de50:	4107883a 	add	r3,r8,r4
  80de54:	1a11803a 	cmpltu	r8,r3,r8
  80de58:	8a23883a 	add	r17,r17,r8
  80de5c:	1811883a 	mov	r8,r3
  80de60:	88c0402c 	andhi	r3,r17,256
  80de64:	18000426 	beq	r3,zero,80de78 <__muldf3+0x520>
  80de68:	11410004 	addi	r5,r2,1024
  80de6c:	00bfc034 	movhi	r2,65280
  80de70:	10bfffc4 	addi	r2,r2,-1
  80de74:	88a2703a 	and	r17,r17,r2
  80de78:	0081ff84 	movi	r2,2046
  80de7c:	117f6416 	blt	r2,r5,80dc10 <__alt_mem_onchip_mem+0xff805c10>
  80de80:	8828977a 	slli	r20,r17,29
  80de84:	4010d0fa 	srli	r8,r8,3
  80de88:	8822927a 	slli	r17,r17,9
  80de8c:	2881ffcc 	andi	r2,r5,2047
  80de90:	a228b03a 	or	r20,r20,r8
  80de94:	880ad33a 	srli	r5,r17,12
  80de98:	b02b883a 	mov	r21,r22
  80de9c:	003f0d06 	br	80dad4 <__alt_mem_onchip_mem+0xff805ad4>
  80dea0:	8080022c 	andhi	r2,r16,8
  80dea4:	10000926 	beq	r2,zero,80decc <__muldf3+0x574>
  80dea8:	8880022c 	andhi	r2,r17,8
  80deac:	1000071e 	bne	r2,zero,80decc <__muldf3+0x574>
  80deb0:	00800434 	movhi	r2,16
  80deb4:	89400234 	orhi	r5,r17,8
  80deb8:	10bfffc4 	addi	r2,r2,-1
  80debc:	b82b883a 	mov	r21,r23
  80dec0:	288a703a 	and	r5,r5,r2
  80dec4:	4029883a 	mov	r20,r8
  80dec8:	003f6806 	br	80dc6c <__alt_mem_onchip_mem+0xff805c6c>
  80decc:	00800434 	movhi	r2,16
  80ded0:	81400234 	orhi	r5,r16,8
  80ded4:	10bfffc4 	addi	r2,r2,-1
  80ded8:	288a703a 	and	r5,r5,r2
  80dedc:	003f6306 	br	80dc6c <__alt_mem_onchip_mem+0xff805c6c>
  80dee0:	147ff604 	addi	r17,r2,-40
  80dee4:	3462983a 	sll	r17,r6,r17
  80dee8:	0011883a 	mov	r8,zero
  80deec:	003f4406 	br	80dc00 <__alt_mem_onchip_mem+0xff805c00>
  80def0:	3009883a 	mov	r4,r6
  80def4:	d9800215 	stw	r6,8(sp)
  80def8:	da400115 	stw	r9,4(sp)
  80defc:	da800015 	stw	r10,0(sp)
  80df00:	080eb700 	call	80eb70 <__clzsi2>
  80df04:	10800804 	addi	r2,r2,32
  80df08:	da800017 	ldw	r10,0(sp)
  80df0c:	da400117 	ldw	r9,4(sp)
  80df10:	d9800217 	ldw	r6,8(sp)
  80df14:	003f3006 	br	80dbd8 <__alt_mem_onchip_mem+0xff805bd8>
  80df18:	143ff604 	addi	r16,r2,-40
  80df1c:	9c20983a 	sll	r16,r19,r16
  80df20:	0029883a 	mov	r20,zero
  80df24:	003f1606 	br	80db80 <__alt_mem_onchip_mem+0xff805b80>
  80df28:	d9800215 	stw	r6,8(sp)
  80df2c:	d9c00015 	stw	r7,0(sp)
  80df30:	da400115 	stw	r9,4(sp)
  80df34:	080eb700 	call	80eb70 <__clzsi2>
  80df38:	10800804 	addi	r2,r2,32
  80df3c:	da400117 	ldw	r9,4(sp)
  80df40:	d9c00017 	ldw	r7,0(sp)
  80df44:	d9800217 	ldw	r6,8(sp)
  80df48:	003f0306 	br	80db58 <__alt_mem_onchip_mem+0xff805b58>
  80df4c:	00c00044 	movi	r3,1
  80df50:	1947c83a 	sub	r3,r3,r5
  80df54:	00800e04 	movi	r2,56
  80df58:	10feda16 	blt	r2,r3,80dac4 <__alt_mem_onchip_mem+0xff805ac4>
  80df5c:	008007c4 	movi	r2,31
  80df60:	10c01b16 	blt	r2,r3,80dfd0 <__muldf3+0x678>
  80df64:	00800804 	movi	r2,32
  80df68:	10c5c83a 	sub	r2,r2,r3
  80df6c:	888a983a 	sll	r5,r17,r2
  80df70:	40c8d83a 	srl	r4,r8,r3
  80df74:	4084983a 	sll	r2,r8,r2
  80df78:	88e2d83a 	srl	r17,r17,r3
  80df7c:	2906b03a 	or	r3,r5,r4
  80df80:	1004c03a 	cmpne	r2,r2,zero
  80df84:	1886b03a 	or	r3,r3,r2
  80df88:	188001cc 	andi	r2,r3,7
  80df8c:	10000726 	beq	r2,zero,80dfac <__muldf3+0x654>
  80df90:	188003cc 	andi	r2,r3,15
  80df94:	01000104 	movi	r4,4
  80df98:	11000426 	beq	r2,r4,80dfac <__muldf3+0x654>
  80df9c:	1805883a 	mov	r2,r3
  80dfa0:	10c00104 	addi	r3,r2,4
  80dfa4:	1885803a 	cmpltu	r2,r3,r2
  80dfa8:	88a3883a 	add	r17,r17,r2
  80dfac:	8880202c 	andhi	r2,r17,128
  80dfb0:	10001c26 	beq	r2,zero,80e024 <__muldf3+0x6cc>
  80dfb4:	b02b883a 	mov	r21,r22
  80dfb8:	00800044 	movi	r2,1
  80dfbc:	000b883a 	mov	r5,zero
  80dfc0:	0029883a 	mov	r20,zero
  80dfc4:	003ec306 	br	80dad4 <__alt_mem_onchip_mem+0xff805ad4>
  80dfc8:	5805883a 	mov	r2,r11
  80dfcc:	003f9906 	br	80de34 <__alt_mem_onchip_mem+0xff805e34>
  80dfd0:	00bff844 	movi	r2,-31
  80dfd4:	1145c83a 	sub	r2,r2,r5
  80dfd8:	8888d83a 	srl	r4,r17,r2
  80dfdc:	00800804 	movi	r2,32
  80dfe0:	18801a26 	beq	r3,r2,80e04c <__muldf3+0x6f4>
  80dfe4:	00801004 	movi	r2,64
  80dfe8:	10c5c83a 	sub	r2,r2,r3
  80dfec:	8884983a 	sll	r2,r17,r2
  80dff0:	1204b03a 	or	r2,r2,r8
  80dff4:	1004c03a 	cmpne	r2,r2,zero
  80dff8:	2084b03a 	or	r2,r4,r2
  80dffc:	144001cc 	andi	r17,r2,7
  80e000:	88000d1e 	bne	r17,zero,80e038 <__muldf3+0x6e0>
  80e004:	000b883a 	mov	r5,zero
  80e008:	1028d0fa 	srli	r20,r2,3
  80e00c:	b02b883a 	mov	r21,r22
  80e010:	0005883a 	mov	r2,zero
  80e014:	a468b03a 	or	r20,r20,r17
  80e018:	003eae06 	br	80dad4 <__alt_mem_onchip_mem+0xff805ad4>
  80e01c:	1007883a 	mov	r3,r2
  80e020:	0023883a 	mov	r17,zero
  80e024:	880a927a 	slli	r5,r17,9
  80e028:	1805883a 	mov	r2,r3
  80e02c:	8822977a 	slli	r17,r17,29
  80e030:	280ad33a 	srli	r5,r5,12
  80e034:	003ff406 	br	80e008 <__alt_mem_onchip_mem+0xff806008>
  80e038:	10c003cc 	andi	r3,r2,15
  80e03c:	01000104 	movi	r4,4
  80e040:	193ff626 	beq	r3,r4,80e01c <__alt_mem_onchip_mem+0xff80601c>
  80e044:	0023883a 	mov	r17,zero
  80e048:	003fd506 	br	80dfa0 <__alt_mem_onchip_mem+0xff805fa0>
  80e04c:	0005883a 	mov	r2,zero
  80e050:	003fe706 	br	80dff0 <__alt_mem_onchip_mem+0xff805ff0>
  80e054:	00800434 	movhi	r2,16
  80e058:	89400234 	orhi	r5,r17,8
  80e05c:	10bfffc4 	addi	r2,r2,-1
  80e060:	b02b883a 	mov	r21,r22
  80e064:	288a703a 	and	r5,r5,r2
  80e068:	4029883a 	mov	r20,r8
  80e06c:	003eff06 	br	80dc6c <__alt_mem_onchip_mem+0xff805c6c>

0080e070 <__subdf3>:
  80e070:	02000434 	movhi	r8,16
  80e074:	423fffc4 	addi	r8,r8,-1
  80e078:	defffb04 	addi	sp,sp,-20
  80e07c:	2a14703a 	and	r10,r5,r8
  80e080:	3812d53a 	srli	r9,r7,20
  80e084:	3a10703a 	and	r8,r7,r8
  80e088:	2006d77a 	srli	r3,r4,29
  80e08c:	3004d77a 	srli	r2,r6,29
  80e090:	dc000015 	stw	r16,0(sp)
  80e094:	501490fa 	slli	r10,r10,3
  80e098:	2820d53a 	srli	r16,r5,20
  80e09c:	401090fa 	slli	r8,r8,3
  80e0a0:	dc800215 	stw	r18,8(sp)
  80e0a4:	dc400115 	stw	r17,4(sp)
  80e0a8:	dfc00415 	stw	ra,16(sp)
  80e0ac:	202290fa 	slli	r17,r4,3
  80e0b0:	dcc00315 	stw	r19,12(sp)
  80e0b4:	4a41ffcc 	andi	r9,r9,2047
  80e0b8:	0101ffc4 	movi	r4,2047
  80e0bc:	2824d7fa 	srli	r18,r5,31
  80e0c0:	8401ffcc 	andi	r16,r16,2047
  80e0c4:	50c6b03a 	or	r3,r10,r3
  80e0c8:	380ed7fa 	srli	r7,r7,31
  80e0cc:	408ab03a 	or	r5,r8,r2
  80e0d0:	300c90fa 	slli	r6,r6,3
  80e0d4:	49009626 	beq	r9,r4,80e330 <__subdf3+0x2c0>
  80e0d8:	39c0005c 	xori	r7,r7,1
  80e0dc:	8245c83a 	sub	r2,r16,r9
  80e0e0:	3c807426 	beq	r7,r18,80e2b4 <__subdf3+0x244>
  80e0e4:	0080af0e 	bge	zero,r2,80e3a4 <__subdf3+0x334>
  80e0e8:	48002a1e 	bne	r9,zero,80e194 <__subdf3+0x124>
  80e0ec:	2988b03a 	or	r4,r5,r6
  80e0f0:	20009a1e 	bne	r4,zero,80e35c <__subdf3+0x2ec>
  80e0f4:	888001cc 	andi	r2,r17,7
  80e0f8:	10000726 	beq	r2,zero,80e118 <__subdf3+0xa8>
  80e0fc:	888003cc 	andi	r2,r17,15
  80e100:	01000104 	movi	r4,4
  80e104:	11000426 	beq	r2,r4,80e118 <__subdf3+0xa8>
  80e108:	890b883a 	add	r5,r17,r4
  80e10c:	2c63803a 	cmpltu	r17,r5,r17
  80e110:	1c47883a 	add	r3,r3,r17
  80e114:	2823883a 	mov	r17,r5
  80e118:	1880202c 	andhi	r2,r3,128
  80e11c:	10005926 	beq	r2,zero,80e284 <__subdf3+0x214>
  80e120:	84000044 	addi	r16,r16,1
  80e124:	0081ffc4 	movi	r2,2047
  80e128:	8080be26 	beq	r16,r2,80e424 <__subdf3+0x3b4>
  80e12c:	017fe034 	movhi	r5,65408
  80e130:	297fffc4 	addi	r5,r5,-1
  80e134:	1946703a 	and	r3,r3,r5
  80e138:	1804977a 	slli	r2,r3,29
  80e13c:	1806927a 	slli	r3,r3,9
  80e140:	8822d0fa 	srli	r17,r17,3
  80e144:	8401ffcc 	andi	r16,r16,2047
  80e148:	180ad33a 	srli	r5,r3,12
  80e14c:	9100004c 	andi	r4,r18,1
  80e150:	1444b03a 	or	r2,r2,r17
  80e154:	80c1ffcc 	andi	r3,r16,2047
  80e158:	1820953a 	slli	r16,r3,20
  80e15c:	20c03fcc 	andi	r3,r4,255
  80e160:	180897fa 	slli	r4,r3,31
  80e164:	00c00434 	movhi	r3,16
  80e168:	18ffffc4 	addi	r3,r3,-1
  80e16c:	28c6703a 	and	r3,r5,r3
  80e170:	1c06b03a 	or	r3,r3,r16
  80e174:	1906b03a 	or	r3,r3,r4
  80e178:	dfc00417 	ldw	ra,16(sp)
  80e17c:	dcc00317 	ldw	r19,12(sp)
  80e180:	dc800217 	ldw	r18,8(sp)
  80e184:	dc400117 	ldw	r17,4(sp)
  80e188:	dc000017 	ldw	r16,0(sp)
  80e18c:	dec00504 	addi	sp,sp,20
  80e190:	f800283a 	ret
  80e194:	0101ffc4 	movi	r4,2047
  80e198:	813fd626 	beq	r16,r4,80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e19c:	29402034 	orhi	r5,r5,128
  80e1a0:	01000e04 	movi	r4,56
  80e1a4:	2080a316 	blt	r4,r2,80e434 <__subdf3+0x3c4>
  80e1a8:	010007c4 	movi	r4,31
  80e1ac:	2080c616 	blt	r4,r2,80e4c8 <__subdf3+0x458>
  80e1b0:	01000804 	movi	r4,32
  80e1b4:	2089c83a 	sub	r4,r4,r2
  80e1b8:	2910983a 	sll	r8,r5,r4
  80e1bc:	308ed83a 	srl	r7,r6,r2
  80e1c0:	3108983a 	sll	r4,r6,r4
  80e1c4:	2884d83a 	srl	r2,r5,r2
  80e1c8:	41ccb03a 	or	r6,r8,r7
  80e1cc:	2008c03a 	cmpne	r4,r4,zero
  80e1d0:	310cb03a 	or	r6,r6,r4
  80e1d4:	898dc83a 	sub	r6,r17,r6
  80e1d8:	89a3803a 	cmpltu	r17,r17,r6
  80e1dc:	1887c83a 	sub	r3,r3,r2
  80e1e0:	1c47c83a 	sub	r3,r3,r17
  80e1e4:	3023883a 	mov	r17,r6
  80e1e8:	1880202c 	andhi	r2,r3,128
  80e1ec:	10002326 	beq	r2,zero,80e27c <__subdf3+0x20c>
  80e1f0:	04c02034 	movhi	r19,128
  80e1f4:	9cffffc4 	addi	r19,r19,-1
  80e1f8:	1ce6703a 	and	r19,r3,r19
  80e1fc:	98007a26 	beq	r19,zero,80e3e8 <__subdf3+0x378>
  80e200:	9809883a 	mov	r4,r19
  80e204:	080eb700 	call	80eb70 <__clzsi2>
  80e208:	113ffe04 	addi	r4,r2,-8
  80e20c:	00c007c4 	movi	r3,31
  80e210:	19007b16 	blt	r3,r4,80e400 <__subdf3+0x390>
  80e214:	00800804 	movi	r2,32
  80e218:	1105c83a 	sub	r2,r2,r4
  80e21c:	8884d83a 	srl	r2,r17,r2
  80e220:	9906983a 	sll	r3,r19,r4
  80e224:	8922983a 	sll	r17,r17,r4
  80e228:	10c4b03a 	or	r2,r2,r3
  80e22c:	24007816 	blt	r4,r16,80e410 <__subdf3+0x3a0>
  80e230:	2421c83a 	sub	r16,r4,r16
  80e234:	80c00044 	addi	r3,r16,1
  80e238:	010007c4 	movi	r4,31
  80e23c:	20c09516 	blt	r4,r3,80e494 <__subdf3+0x424>
  80e240:	01400804 	movi	r5,32
  80e244:	28cbc83a 	sub	r5,r5,r3
  80e248:	88c8d83a 	srl	r4,r17,r3
  80e24c:	8962983a 	sll	r17,r17,r5
  80e250:	114a983a 	sll	r5,r2,r5
  80e254:	10c6d83a 	srl	r3,r2,r3
  80e258:	8804c03a 	cmpne	r2,r17,zero
  80e25c:	290ab03a 	or	r5,r5,r4
  80e260:	28a2b03a 	or	r17,r5,r2
  80e264:	0021883a 	mov	r16,zero
  80e268:	003fa206 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e26c:	2090b03a 	or	r8,r4,r2
  80e270:	40018e26 	beq	r8,zero,80e8ac <__subdf3+0x83c>
  80e274:	1007883a 	mov	r3,r2
  80e278:	2023883a 	mov	r17,r4
  80e27c:	888001cc 	andi	r2,r17,7
  80e280:	103f9e1e 	bne	r2,zero,80e0fc <__alt_mem_onchip_mem+0xff8060fc>
  80e284:	1804977a 	slli	r2,r3,29
  80e288:	8822d0fa 	srli	r17,r17,3
  80e28c:	1810d0fa 	srli	r8,r3,3
  80e290:	9100004c 	andi	r4,r18,1
  80e294:	1444b03a 	or	r2,r2,r17
  80e298:	00c1ffc4 	movi	r3,2047
  80e29c:	80c02826 	beq	r16,r3,80e340 <__subdf3+0x2d0>
  80e2a0:	01400434 	movhi	r5,16
  80e2a4:	297fffc4 	addi	r5,r5,-1
  80e2a8:	80e0703a 	and	r16,r16,r3
  80e2ac:	414a703a 	and	r5,r8,r5
  80e2b0:	003fa806 	br	80e154 <__alt_mem_onchip_mem+0xff806154>
  80e2b4:	0080630e 	bge	zero,r2,80e444 <__subdf3+0x3d4>
  80e2b8:	48003026 	beq	r9,zero,80e37c <__subdf3+0x30c>
  80e2bc:	0101ffc4 	movi	r4,2047
  80e2c0:	813f8c26 	beq	r16,r4,80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e2c4:	29402034 	orhi	r5,r5,128
  80e2c8:	01000e04 	movi	r4,56
  80e2cc:	2080a90e 	bge	r4,r2,80e574 <__subdf3+0x504>
  80e2d0:	298cb03a 	or	r6,r5,r6
  80e2d4:	3012c03a 	cmpne	r9,r6,zero
  80e2d8:	0005883a 	mov	r2,zero
  80e2dc:	4c53883a 	add	r9,r9,r17
  80e2e0:	4c63803a 	cmpltu	r17,r9,r17
  80e2e4:	10c7883a 	add	r3,r2,r3
  80e2e8:	88c7883a 	add	r3,r17,r3
  80e2ec:	4823883a 	mov	r17,r9
  80e2f0:	1880202c 	andhi	r2,r3,128
  80e2f4:	1000d026 	beq	r2,zero,80e638 <__subdf3+0x5c8>
  80e2f8:	84000044 	addi	r16,r16,1
  80e2fc:	0081ffc4 	movi	r2,2047
  80e300:	8080fe26 	beq	r16,r2,80e6fc <__subdf3+0x68c>
  80e304:	00bfe034 	movhi	r2,65408
  80e308:	10bfffc4 	addi	r2,r2,-1
  80e30c:	1886703a 	and	r3,r3,r2
  80e310:	880ad07a 	srli	r5,r17,1
  80e314:	180497fa 	slli	r2,r3,31
  80e318:	8900004c 	andi	r4,r17,1
  80e31c:	2922b03a 	or	r17,r5,r4
  80e320:	1806d07a 	srli	r3,r3,1
  80e324:	1462b03a 	or	r17,r2,r17
  80e328:	3825883a 	mov	r18,r7
  80e32c:	003f7106 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e330:	2984b03a 	or	r2,r5,r6
  80e334:	103f6826 	beq	r2,zero,80e0d8 <__alt_mem_onchip_mem+0xff8060d8>
  80e338:	39c03fcc 	andi	r7,r7,255
  80e33c:	003f6706 	br	80e0dc <__alt_mem_onchip_mem+0xff8060dc>
  80e340:	4086b03a 	or	r3,r8,r2
  80e344:	18015226 	beq	r3,zero,80e890 <__subdf3+0x820>
  80e348:	00c00434 	movhi	r3,16
  80e34c:	41400234 	orhi	r5,r8,8
  80e350:	18ffffc4 	addi	r3,r3,-1
  80e354:	28ca703a 	and	r5,r5,r3
  80e358:	003f7e06 	br	80e154 <__alt_mem_onchip_mem+0xff806154>
  80e35c:	10bfffc4 	addi	r2,r2,-1
  80e360:	1000491e 	bne	r2,zero,80e488 <__subdf3+0x418>
  80e364:	898fc83a 	sub	r7,r17,r6
  80e368:	89e3803a 	cmpltu	r17,r17,r7
  80e36c:	1947c83a 	sub	r3,r3,r5
  80e370:	1c47c83a 	sub	r3,r3,r17
  80e374:	3823883a 	mov	r17,r7
  80e378:	003f9b06 	br	80e1e8 <__alt_mem_onchip_mem+0xff8061e8>
  80e37c:	2988b03a 	or	r4,r5,r6
  80e380:	203f5c26 	beq	r4,zero,80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e384:	10bfffc4 	addi	r2,r2,-1
  80e388:	1000931e 	bne	r2,zero,80e5d8 <__subdf3+0x568>
  80e38c:	898d883a 	add	r6,r17,r6
  80e390:	3463803a 	cmpltu	r17,r6,r17
  80e394:	1947883a 	add	r3,r3,r5
  80e398:	88c7883a 	add	r3,r17,r3
  80e39c:	3023883a 	mov	r17,r6
  80e3a0:	003fd306 	br	80e2f0 <__alt_mem_onchip_mem+0xff8062f0>
  80e3a4:	1000541e 	bne	r2,zero,80e4f8 <__subdf3+0x488>
  80e3a8:	80800044 	addi	r2,r16,1
  80e3ac:	1081ffcc 	andi	r2,r2,2047
  80e3b0:	01000044 	movi	r4,1
  80e3b4:	2080a20e 	bge	r4,r2,80e640 <__subdf3+0x5d0>
  80e3b8:	8989c83a 	sub	r4,r17,r6
  80e3bc:	8905803a 	cmpltu	r2,r17,r4
  80e3c0:	1967c83a 	sub	r19,r3,r5
  80e3c4:	98a7c83a 	sub	r19,r19,r2
  80e3c8:	9880202c 	andhi	r2,r19,128
  80e3cc:	10006326 	beq	r2,zero,80e55c <__subdf3+0x4ec>
  80e3d0:	3463c83a 	sub	r17,r6,r17
  80e3d4:	28c7c83a 	sub	r3,r5,r3
  80e3d8:	344d803a 	cmpltu	r6,r6,r17
  80e3dc:	19a7c83a 	sub	r19,r3,r6
  80e3e0:	3825883a 	mov	r18,r7
  80e3e4:	983f861e 	bne	r19,zero,80e200 <__alt_mem_onchip_mem+0xff806200>
  80e3e8:	8809883a 	mov	r4,r17
  80e3ec:	080eb700 	call	80eb70 <__clzsi2>
  80e3f0:	10800804 	addi	r2,r2,32
  80e3f4:	113ffe04 	addi	r4,r2,-8
  80e3f8:	00c007c4 	movi	r3,31
  80e3fc:	193f850e 	bge	r3,r4,80e214 <__alt_mem_onchip_mem+0xff806214>
  80e400:	10bff604 	addi	r2,r2,-40
  80e404:	8884983a 	sll	r2,r17,r2
  80e408:	0023883a 	mov	r17,zero
  80e40c:	243f880e 	bge	r4,r16,80e230 <__alt_mem_onchip_mem+0xff806230>
  80e410:	00ffe034 	movhi	r3,65408
  80e414:	18ffffc4 	addi	r3,r3,-1
  80e418:	8121c83a 	sub	r16,r16,r4
  80e41c:	10c6703a 	and	r3,r2,r3
  80e420:	003f3406 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e424:	9100004c 	andi	r4,r18,1
  80e428:	000b883a 	mov	r5,zero
  80e42c:	0005883a 	mov	r2,zero
  80e430:	003f4806 	br	80e154 <__alt_mem_onchip_mem+0xff806154>
  80e434:	298cb03a 	or	r6,r5,r6
  80e438:	300cc03a 	cmpne	r6,r6,zero
  80e43c:	0005883a 	mov	r2,zero
  80e440:	003f6406 	br	80e1d4 <__alt_mem_onchip_mem+0xff8061d4>
  80e444:	10009a1e 	bne	r2,zero,80e6b0 <__subdf3+0x640>
  80e448:	82400044 	addi	r9,r16,1
  80e44c:	4881ffcc 	andi	r2,r9,2047
  80e450:	02800044 	movi	r10,1
  80e454:	5080670e 	bge	r10,r2,80e5f4 <__subdf3+0x584>
  80e458:	0081ffc4 	movi	r2,2047
  80e45c:	4880af26 	beq	r9,r2,80e71c <__subdf3+0x6ac>
  80e460:	898d883a 	add	r6,r17,r6
  80e464:	1945883a 	add	r2,r3,r5
  80e468:	3447803a 	cmpltu	r3,r6,r17
  80e46c:	1887883a 	add	r3,r3,r2
  80e470:	182297fa 	slli	r17,r3,31
  80e474:	300cd07a 	srli	r6,r6,1
  80e478:	1806d07a 	srli	r3,r3,1
  80e47c:	4821883a 	mov	r16,r9
  80e480:	89a2b03a 	or	r17,r17,r6
  80e484:	003f1b06 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e488:	0101ffc4 	movi	r4,2047
  80e48c:	813f441e 	bne	r16,r4,80e1a0 <__alt_mem_onchip_mem+0xff8061a0>
  80e490:	003f1806 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e494:	843ff844 	addi	r16,r16,-31
  80e498:	01400804 	movi	r5,32
  80e49c:	1408d83a 	srl	r4,r2,r16
  80e4a0:	19405026 	beq	r3,r5,80e5e4 <__subdf3+0x574>
  80e4a4:	01401004 	movi	r5,64
  80e4a8:	28c7c83a 	sub	r3,r5,r3
  80e4ac:	10c4983a 	sll	r2,r2,r3
  80e4b0:	88a2b03a 	or	r17,r17,r2
  80e4b4:	8822c03a 	cmpne	r17,r17,zero
  80e4b8:	2462b03a 	or	r17,r4,r17
  80e4bc:	0007883a 	mov	r3,zero
  80e4c0:	0021883a 	mov	r16,zero
  80e4c4:	003f6d06 	br	80e27c <__alt_mem_onchip_mem+0xff80627c>
  80e4c8:	11fff804 	addi	r7,r2,-32
  80e4cc:	01000804 	movi	r4,32
  80e4d0:	29ced83a 	srl	r7,r5,r7
  80e4d4:	11004526 	beq	r2,r4,80e5ec <__subdf3+0x57c>
  80e4d8:	01001004 	movi	r4,64
  80e4dc:	2089c83a 	sub	r4,r4,r2
  80e4e0:	2904983a 	sll	r2,r5,r4
  80e4e4:	118cb03a 	or	r6,r2,r6
  80e4e8:	300cc03a 	cmpne	r6,r6,zero
  80e4ec:	398cb03a 	or	r6,r7,r6
  80e4f0:	0005883a 	mov	r2,zero
  80e4f4:	003f3706 	br	80e1d4 <__alt_mem_onchip_mem+0xff8061d4>
  80e4f8:	80002a26 	beq	r16,zero,80e5a4 <__subdf3+0x534>
  80e4fc:	0101ffc4 	movi	r4,2047
  80e500:	49006626 	beq	r9,r4,80e69c <__subdf3+0x62c>
  80e504:	0085c83a 	sub	r2,zero,r2
  80e508:	18c02034 	orhi	r3,r3,128
  80e50c:	01000e04 	movi	r4,56
  80e510:	20807e16 	blt	r4,r2,80e70c <__subdf3+0x69c>
  80e514:	010007c4 	movi	r4,31
  80e518:	2080e716 	blt	r4,r2,80e8b8 <__subdf3+0x848>
  80e51c:	01000804 	movi	r4,32
  80e520:	2089c83a 	sub	r4,r4,r2
  80e524:	1914983a 	sll	r10,r3,r4
  80e528:	8890d83a 	srl	r8,r17,r2
  80e52c:	8908983a 	sll	r4,r17,r4
  80e530:	1884d83a 	srl	r2,r3,r2
  80e534:	5222b03a 	or	r17,r10,r8
  80e538:	2006c03a 	cmpne	r3,r4,zero
  80e53c:	88e2b03a 	or	r17,r17,r3
  80e540:	3463c83a 	sub	r17,r6,r17
  80e544:	2885c83a 	sub	r2,r5,r2
  80e548:	344d803a 	cmpltu	r6,r6,r17
  80e54c:	1187c83a 	sub	r3,r2,r6
  80e550:	4821883a 	mov	r16,r9
  80e554:	3825883a 	mov	r18,r7
  80e558:	003f2306 	br	80e1e8 <__alt_mem_onchip_mem+0xff8061e8>
  80e55c:	24d0b03a 	or	r8,r4,r19
  80e560:	40001b1e 	bne	r8,zero,80e5d0 <__subdf3+0x560>
  80e564:	0005883a 	mov	r2,zero
  80e568:	0009883a 	mov	r4,zero
  80e56c:	0021883a 	mov	r16,zero
  80e570:	003f4906 	br	80e298 <__alt_mem_onchip_mem+0xff806298>
  80e574:	010007c4 	movi	r4,31
  80e578:	20803a16 	blt	r4,r2,80e664 <__subdf3+0x5f4>
  80e57c:	01000804 	movi	r4,32
  80e580:	2089c83a 	sub	r4,r4,r2
  80e584:	2912983a 	sll	r9,r5,r4
  80e588:	3090d83a 	srl	r8,r6,r2
  80e58c:	3108983a 	sll	r4,r6,r4
  80e590:	2884d83a 	srl	r2,r5,r2
  80e594:	4a12b03a 	or	r9,r9,r8
  80e598:	2008c03a 	cmpne	r4,r4,zero
  80e59c:	4912b03a 	or	r9,r9,r4
  80e5a0:	003f4e06 	br	80e2dc <__alt_mem_onchip_mem+0xff8062dc>
  80e5a4:	1c48b03a 	or	r4,r3,r17
  80e5a8:	20003c26 	beq	r4,zero,80e69c <__subdf3+0x62c>
  80e5ac:	0084303a 	nor	r2,zero,r2
  80e5b0:	1000381e 	bne	r2,zero,80e694 <__subdf3+0x624>
  80e5b4:	3463c83a 	sub	r17,r6,r17
  80e5b8:	28c5c83a 	sub	r2,r5,r3
  80e5bc:	344d803a 	cmpltu	r6,r6,r17
  80e5c0:	1187c83a 	sub	r3,r2,r6
  80e5c4:	4821883a 	mov	r16,r9
  80e5c8:	3825883a 	mov	r18,r7
  80e5cc:	003f0606 	br	80e1e8 <__alt_mem_onchip_mem+0xff8061e8>
  80e5d0:	2023883a 	mov	r17,r4
  80e5d4:	003f0906 	br	80e1fc <__alt_mem_onchip_mem+0xff8061fc>
  80e5d8:	0101ffc4 	movi	r4,2047
  80e5dc:	813f3a1e 	bne	r16,r4,80e2c8 <__alt_mem_onchip_mem+0xff8062c8>
  80e5e0:	003ec406 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e5e4:	0005883a 	mov	r2,zero
  80e5e8:	003fb106 	br	80e4b0 <__alt_mem_onchip_mem+0xff8064b0>
  80e5ec:	0005883a 	mov	r2,zero
  80e5f0:	003fbc06 	br	80e4e4 <__alt_mem_onchip_mem+0xff8064e4>
  80e5f4:	1c44b03a 	or	r2,r3,r17
  80e5f8:	80008e1e 	bne	r16,zero,80e834 <__subdf3+0x7c4>
  80e5fc:	1000c826 	beq	r2,zero,80e920 <__subdf3+0x8b0>
  80e600:	2984b03a 	or	r2,r5,r6
  80e604:	103ebb26 	beq	r2,zero,80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e608:	8989883a 	add	r4,r17,r6
  80e60c:	1945883a 	add	r2,r3,r5
  80e610:	2447803a 	cmpltu	r3,r4,r17
  80e614:	1887883a 	add	r3,r3,r2
  80e618:	1880202c 	andhi	r2,r3,128
  80e61c:	2023883a 	mov	r17,r4
  80e620:	103f1626 	beq	r2,zero,80e27c <__alt_mem_onchip_mem+0xff80627c>
  80e624:	00bfe034 	movhi	r2,65408
  80e628:	10bfffc4 	addi	r2,r2,-1
  80e62c:	5021883a 	mov	r16,r10
  80e630:	1886703a 	and	r3,r3,r2
  80e634:	003eaf06 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e638:	3825883a 	mov	r18,r7
  80e63c:	003f0f06 	br	80e27c <__alt_mem_onchip_mem+0xff80627c>
  80e640:	1c44b03a 	or	r2,r3,r17
  80e644:	8000251e 	bne	r16,zero,80e6dc <__subdf3+0x66c>
  80e648:	1000661e 	bne	r2,zero,80e7e4 <__subdf3+0x774>
  80e64c:	2990b03a 	or	r8,r5,r6
  80e650:	40009626 	beq	r8,zero,80e8ac <__subdf3+0x83c>
  80e654:	2807883a 	mov	r3,r5
  80e658:	3023883a 	mov	r17,r6
  80e65c:	3825883a 	mov	r18,r7
  80e660:	003ea406 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e664:	127ff804 	addi	r9,r2,-32
  80e668:	01000804 	movi	r4,32
  80e66c:	2a52d83a 	srl	r9,r5,r9
  80e670:	11008c26 	beq	r2,r4,80e8a4 <__subdf3+0x834>
  80e674:	01001004 	movi	r4,64
  80e678:	2085c83a 	sub	r2,r4,r2
  80e67c:	2884983a 	sll	r2,r5,r2
  80e680:	118cb03a 	or	r6,r2,r6
  80e684:	300cc03a 	cmpne	r6,r6,zero
  80e688:	4992b03a 	or	r9,r9,r6
  80e68c:	0005883a 	mov	r2,zero
  80e690:	003f1206 	br	80e2dc <__alt_mem_onchip_mem+0xff8062dc>
  80e694:	0101ffc4 	movi	r4,2047
  80e698:	493f9c1e 	bne	r9,r4,80e50c <__alt_mem_onchip_mem+0xff80650c>
  80e69c:	2807883a 	mov	r3,r5
  80e6a0:	3023883a 	mov	r17,r6
  80e6a4:	4821883a 	mov	r16,r9
  80e6a8:	3825883a 	mov	r18,r7
  80e6ac:	003e9106 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e6b0:	80001f1e 	bne	r16,zero,80e730 <__subdf3+0x6c0>
  80e6b4:	1c48b03a 	or	r4,r3,r17
  80e6b8:	20005a26 	beq	r4,zero,80e824 <__subdf3+0x7b4>
  80e6bc:	0084303a 	nor	r2,zero,r2
  80e6c0:	1000561e 	bne	r2,zero,80e81c <__subdf3+0x7ac>
  80e6c4:	89a3883a 	add	r17,r17,r6
  80e6c8:	1945883a 	add	r2,r3,r5
  80e6cc:	898d803a 	cmpltu	r6,r17,r6
  80e6d0:	3087883a 	add	r3,r6,r2
  80e6d4:	4821883a 	mov	r16,r9
  80e6d8:	003f0506 	br	80e2f0 <__alt_mem_onchip_mem+0xff8062f0>
  80e6dc:	10002b1e 	bne	r2,zero,80e78c <__subdf3+0x71c>
  80e6e0:	2984b03a 	or	r2,r5,r6
  80e6e4:	10008026 	beq	r2,zero,80e8e8 <__subdf3+0x878>
  80e6e8:	2807883a 	mov	r3,r5
  80e6ec:	3023883a 	mov	r17,r6
  80e6f0:	3825883a 	mov	r18,r7
  80e6f4:	0401ffc4 	movi	r16,2047
  80e6f8:	003e7e06 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e6fc:	3809883a 	mov	r4,r7
  80e700:	0011883a 	mov	r8,zero
  80e704:	0005883a 	mov	r2,zero
  80e708:	003ee306 	br	80e298 <__alt_mem_onchip_mem+0xff806298>
  80e70c:	1c62b03a 	or	r17,r3,r17
  80e710:	8822c03a 	cmpne	r17,r17,zero
  80e714:	0005883a 	mov	r2,zero
  80e718:	003f8906 	br	80e540 <__alt_mem_onchip_mem+0xff806540>
  80e71c:	3809883a 	mov	r4,r7
  80e720:	4821883a 	mov	r16,r9
  80e724:	0011883a 	mov	r8,zero
  80e728:	0005883a 	mov	r2,zero
  80e72c:	003eda06 	br	80e298 <__alt_mem_onchip_mem+0xff806298>
  80e730:	0101ffc4 	movi	r4,2047
  80e734:	49003b26 	beq	r9,r4,80e824 <__subdf3+0x7b4>
  80e738:	0085c83a 	sub	r2,zero,r2
  80e73c:	18c02034 	orhi	r3,r3,128
  80e740:	01000e04 	movi	r4,56
  80e744:	20806e16 	blt	r4,r2,80e900 <__subdf3+0x890>
  80e748:	010007c4 	movi	r4,31
  80e74c:	20807716 	blt	r4,r2,80e92c <__subdf3+0x8bc>
  80e750:	01000804 	movi	r4,32
  80e754:	2089c83a 	sub	r4,r4,r2
  80e758:	1914983a 	sll	r10,r3,r4
  80e75c:	8890d83a 	srl	r8,r17,r2
  80e760:	8908983a 	sll	r4,r17,r4
  80e764:	1884d83a 	srl	r2,r3,r2
  80e768:	5222b03a 	or	r17,r10,r8
  80e76c:	2006c03a 	cmpne	r3,r4,zero
  80e770:	88e2b03a 	or	r17,r17,r3
  80e774:	89a3883a 	add	r17,r17,r6
  80e778:	1145883a 	add	r2,r2,r5
  80e77c:	898d803a 	cmpltu	r6,r17,r6
  80e780:	3087883a 	add	r3,r6,r2
  80e784:	4821883a 	mov	r16,r9
  80e788:	003ed906 	br	80e2f0 <__alt_mem_onchip_mem+0xff8062f0>
  80e78c:	2984b03a 	or	r2,r5,r6
  80e790:	10004226 	beq	r2,zero,80e89c <__subdf3+0x82c>
  80e794:	1808d0fa 	srli	r4,r3,3
  80e798:	8822d0fa 	srli	r17,r17,3
  80e79c:	1806977a 	slli	r3,r3,29
  80e7a0:	2080022c 	andhi	r2,r4,8
  80e7a4:	1c62b03a 	or	r17,r3,r17
  80e7a8:	10000826 	beq	r2,zero,80e7cc <__subdf3+0x75c>
  80e7ac:	2812d0fa 	srli	r9,r5,3
  80e7b0:	4880022c 	andhi	r2,r9,8
  80e7b4:	1000051e 	bne	r2,zero,80e7cc <__subdf3+0x75c>
  80e7b8:	300cd0fa 	srli	r6,r6,3
  80e7bc:	2804977a 	slli	r2,r5,29
  80e7c0:	4809883a 	mov	r4,r9
  80e7c4:	3825883a 	mov	r18,r7
  80e7c8:	11a2b03a 	or	r17,r2,r6
  80e7cc:	8806d77a 	srli	r3,r17,29
  80e7d0:	200890fa 	slli	r4,r4,3
  80e7d4:	882290fa 	slli	r17,r17,3
  80e7d8:	0401ffc4 	movi	r16,2047
  80e7dc:	1906b03a 	or	r3,r3,r4
  80e7e0:	003e4406 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e7e4:	2984b03a 	or	r2,r5,r6
  80e7e8:	103e4226 	beq	r2,zero,80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e7ec:	8989c83a 	sub	r4,r17,r6
  80e7f0:	8911803a 	cmpltu	r8,r17,r4
  80e7f4:	1945c83a 	sub	r2,r3,r5
  80e7f8:	1205c83a 	sub	r2,r2,r8
  80e7fc:	1200202c 	andhi	r8,r2,128
  80e800:	403e9a26 	beq	r8,zero,80e26c <__alt_mem_onchip_mem+0xff80626c>
  80e804:	3463c83a 	sub	r17,r6,r17
  80e808:	28c5c83a 	sub	r2,r5,r3
  80e80c:	344d803a 	cmpltu	r6,r6,r17
  80e810:	1187c83a 	sub	r3,r2,r6
  80e814:	3825883a 	mov	r18,r7
  80e818:	003e3606 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e81c:	0101ffc4 	movi	r4,2047
  80e820:	493fc71e 	bne	r9,r4,80e740 <__alt_mem_onchip_mem+0xff806740>
  80e824:	2807883a 	mov	r3,r5
  80e828:	3023883a 	mov	r17,r6
  80e82c:	4821883a 	mov	r16,r9
  80e830:	003e3006 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e834:	10003626 	beq	r2,zero,80e910 <__subdf3+0x8a0>
  80e838:	2984b03a 	or	r2,r5,r6
  80e83c:	10001726 	beq	r2,zero,80e89c <__subdf3+0x82c>
  80e840:	1808d0fa 	srli	r4,r3,3
  80e844:	8822d0fa 	srli	r17,r17,3
  80e848:	1806977a 	slli	r3,r3,29
  80e84c:	2080022c 	andhi	r2,r4,8
  80e850:	1c62b03a 	or	r17,r3,r17
  80e854:	10000726 	beq	r2,zero,80e874 <__subdf3+0x804>
  80e858:	2812d0fa 	srli	r9,r5,3
  80e85c:	4880022c 	andhi	r2,r9,8
  80e860:	1000041e 	bne	r2,zero,80e874 <__subdf3+0x804>
  80e864:	300cd0fa 	srli	r6,r6,3
  80e868:	2804977a 	slli	r2,r5,29
  80e86c:	4809883a 	mov	r4,r9
  80e870:	11a2b03a 	or	r17,r2,r6
  80e874:	8806d77a 	srli	r3,r17,29
  80e878:	200890fa 	slli	r4,r4,3
  80e87c:	882290fa 	slli	r17,r17,3
  80e880:	3825883a 	mov	r18,r7
  80e884:	1906b03a 	or	r3,r3,r4
  80e888:	0401ffc4 	movi	r16,2047
  80e88c:	003e1906 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e890:	000b883a 	mov	r5,zero
  80e894:	0005883a 	mov	r2,zero
  80e898:	003e2e06 	br	80e154 <__alt_mem_onchip_mem+0xff806154>
  80e89c:	0401ffc4 	movi	r16,2047
  80e8a0:	003e1406 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e8a4:	0005883a 	mov	r2,zero
  80e8a8:	003f7506 	br	80e680 <__alt_mem_onchip_mem+0xff806680>
  80e8ac:	0005883a 	mov	r2,zero
  80e8b0:	0009883a 	mov	r4,zero
  80e8b4:	003e7806 	br	80e298 <__alt_mem_onchip_mem+0xff806298>
  80e8b8:	123ff804 	addi	r8,r2,-32
  80e8bc:	01000804 	movi	r4,32
  80e8c0:	1a10d83a 	srl	r8,r3,r8
  80e8c4:	11002526 	beq	r2,r4,80e95c <__subdf3+0x8ec>
  80e8c8:	01001004 	movi	r4,64
  80e8cc:	2085c83a 	sub	r2,r4,r2
  80e8d0:	1884983a 	sll	r2,r3,r2
  80e8d4:	1444b03a 	or	r2,r2,r17
  80e8d8:	1004c03a 	cmpne	r2,r2,zero
  80e8dc:	40a2b03a 	or	r17,r8,r2
  80e8e0:	0005883a 	mov	r2,zero
  80e8e4:	003f1606 	br	80e540 <__alt_mem_onchip_mem+0xff806540>
  80e8e8:	02000434 	movhi	r8,16
  80e8ec:	0009883a 	mov	r4,zero
  80e8f0:	423fffc4 	addi	r8,r8,-1
  80e8f4:	00bfffc4 	movi	r2,-1
  80e8f8:	0401ffc4 	movi	r16,2047
  80e8fc:	003e6606 	br	80e298 <__alt_mem_onchip_mem+0xff806298>
  80e900:	1c62b03a 	or	r17,r3,r17
  80e904:	8822c03a 	cmpne	r17,r17,zero
  80e908:	0005883a 	mov	r2,zero
  80e90c:	003f9906 	br	80e774 <__alt_mem_onchip_mem+0xff806774>
  80e910:	2807883a 	mov	r3,r5
  80e914:	3023883a 	mov	r17,r6
  80e918:	0401ffc4 	movi	r16,2047
  80e91c:	003df506 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e920:	2807883a 	mov	r3,r5
  80e924:	3023883a 	mov	r17,r6
  80e928:	003df206 	br	80e0f4 <__alt_mem_onchip_mem+0xff8060f4>
  80e92c:	123ff804 	addi	r8,r2,-32
  80e930:	01000804 	movi	r4,32
  80e934:	1a10d83a 	srl	r8,r3,r8
  80e938:	11000a26 	beq	r2,r4,80e964 <__subdf3+0x8f4>
  80e93c:	01001004 	movi	r4,64
  80e940:	2085c83a 	sub	r2,r4,r2
  80e944:	1884983a 	sll	r2,r3,r2
  80e948:	1444b03a 	or	r2,r2,r17
  80e94c:	1004c03a 	cmpne	r2,r2,zero
  80e950:	40a2b03a 	or	r17,r8,r2
  80e954:	0005883a 	mov	r2,zero
  80e958:	003f8606 	br	80e774 <__alt_mem_onchip_mem+0xff806774>
  80e95c:	0005883a 	mov	r2,zero
  80e960:	003fdc06 	br	80e8d4 <__alt_mem_onchip_mem+0xff8068d4>
  80e964:	0005883a 	mov	r2,zero
  80e968:	003ff706 	br	80e948 <__alt_mem_onchip_mem+0xff806948>

0080e96c <__fixdfsi>:
  80e96c:	280cd53a 	srli	r6,r5,20
  80e970:	00c00434 	movhi	r3,16
  80e974:	18ffffc4 	addi	r3,r3,-1
  80e978:	3181ffcc 	andi	r6,r6,2047
  80e97c:	01c0ff84 	movi	r7,1022
  80e980:	28c6703a 	and	r3,r5,r3
  80e984:	280ad7fa 	srli	r5,r5,31
  80e988:	3980120e 	bge	r7,r6,80e9d4 <__fixdfsi+0x68>
  80e98c:	00810744 	movi	r2,1053
  80e990:	11800c16 	blt	r2,r6,80e9c4 <__fixdfsi+0x58>
  80e994:	00810cc4 	movi	r2,1075
  80e998:	1185c83a 	sub	r2,r2,r6
  80e99c:	01c007c4 	movi	r7,31
  80e9a0:	18c00434 	orhi	r3,r3,16
  80e9a4:	38800d16 	blt	r7,r2,80e9dc <__fixdfsi+0x70>
  80e9a8:	31befb44 	addi	r6,r6,-1043
  80e9ac:	2084d83a 	srl	r2,r4,r2
  80e9b0:	1986983a 	sll	r3,r3,r6
  80e9b4:	1884b03a 	or	r2,r3,r2
  80e9b8:	28000726 	beq	r5,zero,80e9d8 <__fixdfsi+0x6c>
  80e9bc:	0085c83a 	sub	r2,zero,r2
  80e9c0:	f800283a 	ret
  80e9c4:	00a00034 	movhi	r2,32768
  80e9c8:	10bfffc4 	addi	r2,r2,-1
  80e9cc:	2885883a 	add	r2,r5,r2
  80e9d0:	f800283a 	ret
  80e9d4:	0005883a 	mov	r2,zero
  80e9d8:	f800283a 	ret
  80e9dc:	008104c4 	movi	r2,1043
  80e9e0:	1185c83a 	sub	r2,r2,r6
  80e9e4:	1884d83a 	srl	r2,r3,r2
  80e9e8:	003ff306 	br	80e9b8 <__alt_mem_onchip_mem+0xff8069b8>

0080e9ec <__floatsidf>:
  80e9ec:	defffd04 	addi	sp,sp,-12
  80e9f0:	dfc00215 	stw	ra,8(sp)
  80e9f4:	dc400115 	stw	r17,4(sp)
  80e9f8:	dc000015 	stw	r16,0(sp)
  80e9fc:	20002b26 	beq	r4,zero,80eaac <__floatsidf+0xc0>
  80ea00:	2023883a 	mov	r17,r4
  80ea04:	2020d7fa 	srli	r16,r4,31
  80ea08:	20002d16 	blt	r4,zero,80eac0 <__floatsidf+0xd4>
  80ea0c:	8809883a 	mov	r4,r17
  80ea10:	080eb700 	call	80eb70 <__clzsi2>
  80ea14:	01410784 	movi	r5,1054
  80ea18:	288bc83a 	sub	r5,r5,r2
  80ea1c:	01010cc4 	movi	r4,1075
  80ea20:	2149c83a 	sub	r4,r4,r5
  80ea24:	00c007c4 	movi	r3,31
  80ea28:	1900160e 	bge	r3,r4,80ea84 <__floatsidf+0x98>
  80ea2c:	00c104c4 	movi	r3,1043
  80ea30:	1947c83a 	sub	r3,r3,r5
  80ea34:	88c6983a 	sll	r3,r17,r3
  80ea38:	00800434 	movhi	r2,16
  80ea3c:	10bfffc4 	addi	r2,r2,-1
  80ea40:	1886703a 	and	r3,r3,r2
  80ea44:	2941ffcc 	andi	r5,r5,2047
  80ea48:	800d883a 	mov	r6,r16
  80ea4c:	0005883a 	mov	r2,zero
  80ea50:	280a953a 	slli	r5,r5,20
  80ea54:	31803fcc 	andi	r6,r6,255
  80ea58:	01000434 	movhi	r4,16
  80ea5c:	300c97fa 	slli	r6,r6,31
  80ea60:	213fffc4 	addi	r4,r4,-1
  80ea64:	1906703a 	and	r3,r3,r4
  80ea68:	1946b03a 	or	r3,r3,r5
  80ea6c:	1986b03a 	or	r3,r3,r6
  80ea70:	dfc00217 	ldw	ra,8(sp)
  80ea74:	dc400117 	ldw	r17,4(sp)
  80ea78:	dc000017 	ldw	r16,0(sp)
  80ea7c:	dec00304 	addi	sp,sp,12
  80ea80:	f800283a 	ret
  80ea84:	00c002c4 	movi	r3,11
  80ea88:	1887c83a 	sub	r3,r3,r2
  80ea8c:	88c6d83a 	srl	r3,r17,r3
  80ea90:	8904983a 	sll	r2,r17,r4
  80ea94:	01000434 	movhi	r4,16
  80ea98:	213fffc4 	addi	r4,r4,-1
  80ea9c:	2941ffcc 	andi	r5,r5,2047
  80eaa0:	1906703a 	and	r3,r3,r4
  80eaa4:	800d883a 	mov	r6,r16
  80eaa8:	003fe906 	br	80ea50 <__alt_mem_onchip_mem+0xff806a50>
  80eaac:	000d883a 	mov	r6,zero
  80eab0:	000b883a 	mov	r5,zero
  80eab4:	0007883a 	mov	r3,zero
  80eab8:	0005883a 	mov	r2,zero
  80eabc:	003fe406 	br	80ea50 <__alt_mem_onchip_mem+0xff806a50>
  80eac0:	0123c83a 	sub	r17,zero,r4
  80eac4:	003fd106 	br	80ea0c <__alt_mem_onchip_mem+0xff806a0c>

0080eac8 <__floatunsidf>:
  80eac8:	defffe04 	addi	sp,sp,-8
  80eacc:	dc000015 	stw	r16,0(sp)
  80ead0:	dfc00115 	stw	ra,4(sp)
  80ead4:	2021883a 	mov	r16,r4
  80ead8:	20002226 	beq	r4,zero,80eb64 <__floatunsidf+0x9c>
  80eadc:	080eb700 	call	80eb70 <__clzsi2>
  80eae0:	01010784 	movi	r4,1054
  80eae4:	2089c83a 	sub	r4,r4,r2
  80eae8:	01810cc4 	movi	r6,1075
  80eaec:	310dc83a 	sub	r6,r6,r4
  80eaf0:	00c007c4 	movi	r3,31
  80eaf4:	1980120e 	bge	r3,r6,80eb40 <__floatunsidf+0x78>
  80eaf8:	00c104c4 	movi	r3,1043
  80eafc:	1907c83a 	sub	r3,r3,r4
  80eb00:	80ca983a 	sll	r5,r16,r3
  80eb04:	00800434 	movhi	r2,16
  80eb08:	10bfffc4 	addi	r2,r2,-1
  80eb0c:	2101ffcc 	andi	r4,r4,2047
  80eb10:	0021883a 	mov	r16,zero
  80eb14:	288a703a 	and	r5,r5,r2
  80eb18:	2008953a 	slli	r4,r4,20
  80eb1c:	00c00434 	movhi	r3,16
  80eb20:	18ffffc4 	addi	r3,r3,-1
  80eb24:	28c6703a 	and	r3,r5,r3
  80eb28:	8005883a 	mov	r2,r16
  80eb2c:	1906b03a 	or	r3,r3,r4
  80eb30:	dfc00117 	ldw	ra,4(sp)
  80eb34:	dc000017 	ldw	r16,0(sp)
  80eb38:	dec00204 	addi	sp,sp,8
  80eb3c:	f800283a 	ret
  80eb40:	00c002c4 	movi	r3,11
  80eb44:	188bc83a 	sub	r5,r3,r2
  80eb48:	814ad83a 	srl	r5,r16,r5
  80eb4c:	00c00434 	movhi	r3,16
  80eb50:	18ffffc4 	addi	r3,r3,-1
  80eb54:	81a0983a 	sll	r16,r16,r6
  80eb58:	2101ffcc 	andi	r4,r4,2047
  80eb5c:	28ca703a 	and	r5,r5,r3
  80eb60:	003fed06 	br	80eb18 <__alt_mem_onchip_mem+0xff806b18>
  80eb64:	0009883a 	mov	r4,zero
  80eb68:	000b883a 	mov	r5,zero
  80eb6c:	003fea06 	br	80eb18 <__alt_mem_onchip_mem+0xff806b18>

0080eb70 <__clzsi2>:
  80eb70:	00bfffd4 	movui	r2,65535
  80eb74:	11000536 	bltu	r2,r4,80eb8c <__clzsi2+0x1c>
  80eb78:	00803fc4 	movi	r2,255
  80eb7c:	11000f36 	bltu	r2,r4,80ebbc <__clzsi2+0x4c>
  80eb80:	00800804 	movi	r2,32
  80eb84:	0007883a 	mov	r3,zero
  80eb88:	00000506 	br	80eba0 <__clzsi2+0x30>
  80eb8c:	00804034 	movhi	r2,256
  80eb90:	10bfffc4 	addi	r2,r2,-1
  80eb94:	11000c2e 	bgeu	r2,r4,80ebc8 <__clzsi2+0x58>
  80eb98:	00800204 	movi	r2,8
  80eb9c:	00c00604 	movi	r3,24
  80eba0:	20c8d83a 	srl	r4,r4,r3
  80eba4:	00c02074 	movhi	r3,129
  80eba8:	18ccff04 	addi	r3,r3,13308
  80ebac:	1909883a 	add	r4,r3,r4
  80ebb0:	20c00003 	ldbu	r3,0(r4)
  80ebb4:	10c5c83a 	sub	r2,r2,r3
  80ebb8:	f800283a 	ret
  80ebbc:	00800604 	movi	r2,24
  80ebc0:	00c00204 	movi	r3,8
  80ebc4:	003ff606 	br	80eba0 <__alt_mem_onchip_mem+0xff806ba0>
  80ebc8:	00800404 	movi	r2,16
  80ebcc:	1007883a 	mov	r3,r2
  80ebd0:	003ff306 	br	80eba0 <__alt_mem_onchip_mem+0xff806ba0>

0080ebd4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80ebd4:	defff504 	addi	sp,sp,-44
  80ebd8:	df000a15 	stw	fp,40(sp)
  80ebdc:	df000a04 	addi	fp,sp,40
  80ebe0:	e13ffc15 	stw	r4,-16(fp)
  80ebe4:	e17ffd15 	stw	r5,-12(fp)
  80ebe8:	e1bffe15 	stw	r6,-8(fp)
  80ebec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80ebf0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80ebf4:	d0a76c17 	ldw	r2,-25168(gp)
  
  if (alt_ticks_per_second ())
  80ebf8:	10003c26 	beq	r2,zero,80ecec <alt_alarm_start+0x118>
  {
    if (alarm)
  80ebfc:	e0bffc17 	ldw	r2,-16(fp)
  80ec00:	10003826 	beq	r2,zero,80ece4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80ec04:	e0bffc17 	ldw	r2,-16(fp)
  80ec08:	e0fffe17 	ldw	r3,-8(fp)
  80ec0c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80ec10:	e0bffc17 	ldw	r2,-16(fp)
  80ec14:	e0ffff17 	ldw	r3,-4(fp)
  80ec18:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ec1c:	0005303a 	rdctl	r2,status
  80ec20:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ec24:	e0fff917 	ldw	r3,-28(fp)
  80ec28:	00bfff84 	movi	r2,-2
  80ec2c:	1884703a 	and	r2,r3,r2
  80ec30:	1001703a 	wrctl	status,r2
  
  return context;
  80ec34:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80ec38:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80ec3c:	d0a76d17 	ldw	r2,-25164(gp)
      
      current_nticks = alt_nticks();
  80ec40:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80ec44:	e0fffd17 	ldw	r3,-12(fp)
  80ec48:	e0bff617 	ldw	r2,-40(fp)
  80ec4c:	1885883a 	add	r2,r3,r2
  80ec50:	10c00044 	addi	r3,r2,1
  80ec54:	e0bffc17 	ldw	r2,-16(fp)
  80ec58:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80ec5c:	e0bffc17 	ldw	r2,-16(fp)
  80ec60:	10c00217 	ldw	r3,8(r2)
  80ec64:	e0bff617 	ldw	r2,-40(fp)
  80ec68:	1880042e 	bgeu	r3,r2,80ec7c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80ec6c:	e0bffc17 	ldw	r2,-16(fp)
  80ec70:	00c00044 	movi	r3,1
  80ec74:	10c00405 	stb	r3,16(r2)
  80ec78:	00000206 	br	80ec84 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80ec7c:	e0bffc17 	ldw	r2,-16(fp)
  80ec80:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80ec84:	e0bffc17 	ldw	r2,-16(fp)
  80ec88:	d0e00f04 	addi	r3,gp,-32708
  80ec8c:	e0fffa15 	stw	r3,-24(fp)
  80ec90:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80ec94:	e0bffb17 	ldw	r2,-20(fp)
  80ec98:	e0fffa17 	ldw	r3,-24(fp)
  80ec9c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80eca0:	e0bffa17 	ldw	r2,-24(fp)
  80eca4:	10c00017 	ldw	r3,0(r2)
  80eca8:	e0bffb17 	ldw	r2,-20(fp)
  80ecac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80ecb0:	e0bffa17 	ldw	r2,-24(fp)
  80ecb4:	10800017 	ldw	r2,0(r2)
  80ecb8:	e0fffb17 	ldw	r3,-20(fp)
  80ecbc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80ecc0:	e0bffa17 	ldw	r2,-24(fp)
  80ecc4:	e0fffb17 	ldw	r3,-20(fp)
  80ecc8:	10c00015 	stw	r3,0(r2)
  80eccc:	e0bff817 	ldw	r2,-32(fp)
  80ecd0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ecd4:	e0bff717 	ldw	r2,-36(fp)
  80ecd8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80ecdc:	0005883a 	mov	r2,zero
  80ece0:	00000306 	br	80ecf0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80ece4:	00bffa84 	movi	r2,-22
  80ece8:	00000106 	br	80ecf0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80ecec:	00bfde84 	movi	r2,-134
  }
}
  80ecf0:	e037883a 	mov	sp,fp
  80ecf4:	df000017 	ldw	fp,0(sp)
  80ecf8:	dec00104 	addi	sp,sp,4
  80ecfc:	f800283a 	ret

0080ed00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ed00:	defffe04 	addi	sp,sp,-8
  80ed04:	dfc00115 	stw	ra,4(sp)
  80ed08:	df000015 	stw	fp,0(sp)
  80ed0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ed10:	d0a00c17 	ldw	r2,-32720(gp)
  80ed14:	10000326 	beq	r2,zero,80ed24 <alt_get_errno+0x24>
  80ed18:	d0a00c17 	ldw	r2,-32720(gp)
  80ed1c:	103ee83a 	callr	r2
  80ed20:	00000106 	br	80ed28 <alt_get_errno+0x28>
  80ed24:	d0a76104 	addi	r2,gp,-25212
}
  80ed28:	e037883a 	mov	sp,fp
  80ed2c:	dfc00117 	ldw	ra,4(sp)
  80ed30:	df000017 	ldw	fp,0(sp)
  80ed34:	dec00204 	addi	sp,sp,8
  80ed38:	f800283a 	ret

0080ed3c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80ed3c:	defffb04 	addi	sp,sp,-20
  80ed40:	dfc00415 	stw	ra,16(sp)
  80ed44:	df000315 	stw	fp,12(sp)
  80ed48:	df000304 	addi	fp,sp,12
  80ed4c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80ed50:	e0bfff17 	ldw	r2,-4(fp)
  80ed54:	10000616 	blt	r2,zero,80ed70 <close+0x34>
  80ed58:	e0bfff17 	ldw	r2,-4(fp)
  80ed5c:	10c00324 	muli	r3,r2,12
  80ed60:	00802074 	movhi	r2,129
  80ed64:	108f8904 	addi	r2,r2,15908
  80ed68:	1885883a 	add	r2,r3,r2
  80ed6c:	00000106 	br	80ed74 <close+0x38>
  80ed70:	0005883a 	mov	r2,zero
  80ed74:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80ed78:	e0bffd17 	ldw	r2,-12(fp)
  80ed7c:	10001926 	beq	r2,zero,80ede4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80ed80:	e0bffd17 	ldw	r2,-12(fp)
  80ed84:	10800017 	ldw	r2,0(r2)
  80ed88:	10800417 	ldw	r2,16(r2)
  80ed8c:	10000626 	beq	r2,zero,80eda8 <close+0x6c>
  80ed90:	e0bffd17 	ldw	r2,-12(fp)
  80ed94:	10800017 	ldw	r2,0(r2)
  80ed98:	10800417 	ldw	r2,16(r2)
  80ed9c:	e13ffd17 	ldw	r4,-12(fp)
  80eda0:	103ee83a 	callr	r2
  80eda4:	00000106 	br	80edac <close+0x70>
  80eda8:	0005883a 	mov	r2,zero
  80edac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80edb0:	e13fff17 	ldw	r4,-4(fp)
  80edb4:	080f7d00 	call	80f7d0 <alt_release_fd>
    if (rval < 0)
  80edb8:	e0bffe17 	ldw	r2,-8(fp)
  80edbc:	1000070e 	bge	r2,zero,80eddc <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80edc0:	080ed000 	call	80ed00 <alt_get_errno>
  80edc4:	1007883a 	mov	r3,r2
  80edc8:	e0bffe17 	ldw	r2,-8(fp)
  80edcc:	0085c83a 	sub	r2,zero,r2
  80edd0:	18800015 	stw	r2,0(r3)
      return -1;
  80edd4:	00bfffc4 	movi	r2,-1
  80edd8:	00000706 	br	80edf8 <close+0xbc>
    }
    return 0;
  80eddc:	0005883a 	mov	r2,zero
  80ede0:	00000506 	br	80edf8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ede4:	080ed000 	call	80ed00 <alt_get_errno>
  80ede8:	1007883a 	mov	r3,r2
  80edec:	00801444 	movi	r2,81
  80edf0:	18800015 	stw	r2,0(r3)
    return -1;
  80edf4:	00bfffc4 	movi	r2,-1
  }
}
  80edf8:	e037883a 	mov	sp,fp
  80edfc:	dfc00117 	ldw	ra,4(sp)
  80ee00:	df000017 	ldw	fp,0(sp)
  80ee04:	dec00204 	addi	sp,sp,8
  80ee08:	f800283a 	ret

0080ee0c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80ee0c:	defffc04 	addi	sp,sp,-16
  80ee10:	df000315 	stw	fp,12(sp)
  80ee14:	df000304 	addi	fp,sp,12
  80ee18:	e13ffd15 	stw	r4,-12(fp)
  80ee1c:	e17ffe15 	stw	r5,-8(fp)
  80ee20:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80ee24:	e0bfff17 	ldw	r2,-4(fp)
}
  80ee28:	e037883a 	mov	sp,fp
  80ee2c:	df000017 	ldw	fp,0(sp)
  80ee30:	dec00104 	addi	sp,sp,4
  80ee34:	f800283a 	ret

0080ee38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ee38:	defffe04 	addi	sp,sp,-8
  80ee3c:	dfc00115 	stw	ra,4(sp)
  80ee40:	df000015 	stw	fp,0(sp)
  80ee44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ee48:	d0a00c17 	ldw	r2,-32720(gp)
  80ee4c:	10000326 	beq	r2,zero,80ee5c <alt_get_errno+0x24>
  80ee50:	d0a00c17 	ldw	r2,-32720(gp)
  80ee54:	103ee83a 	callr	r2
  80ee58:	00000106 	br	80ee60 <alt_get_errno+0x28>
  80ee5c:	d0a76104 	addi	r2,gp,-25212
}
  80ee60:	e037883a 	mov	sp,fp
  80ee64:	dfc00117 	ldw	ra,4(sp)
  80ee68:	df000017 	ldw	fp,0(sp)
  80ee6c:	dec00204 	addi	sp,sp,8
  80ee70:	f800283a 	ret

0080ee74 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80ee74:	defffb04 	addi	sp,sp,-20
  80ee78:	dfc00415 	stw	ra,16(sp)
  80ee7c:	df000315 	stw	fp,12(sp)
  80ee80:	df000304 	addi	fp,sp,12
  80ee84:	e13ffe15 	stw	r4,-8(fp)
  80ee88:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ee8c:	e0bffe17 	ldw	r2,-8(fp)
  80ee90:	10000616 	blt	r2,zero,80eeac <fstat+0x38>
  80ee94:	e0bffe17 	ldw	r2,-8(fp)
  80ee98:	10c00324 	muli	r3,r2,12
  80ee9c:	00802074 	movhi	r2,129
  80eea0:	108f8904 	addi	r2,r2,15908
  80eea4:	1885883a 	add	r2,r3,r2
  80eea8:	00000106 	br	80eeb0 <fstat+0x3c>
  80eeac:	0005883a 	mov	r2,zero
  80eeb0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80eeb4:	e0bffd17 	ldw	r2,-12(fp)
  80eeb8:	10001026 	beq	r2,zero,80eefc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80eebc:	e0bffd17 	ldw	r2,-12(fp)
  80eec0:	10800017 	ldw	r2,0(r2)
  80eec4:	10800817 	ldw	r2,32(r2)
  80eec8:	10000726 	beq	r2,zero,80eee8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80eecc:	e0bffd17 	ldw	r2,-12(fp)
  80eed0:	10800017 	ldw	r2,0(r2)
  80eed4:	10800817 	ldw	r2,32(r2)
  80eed8:	e17fff17 	ldw	r5,-4(fp)
  80eedc:	e13ffd17 	ldw	r4,-12(fp)
  80eee0:	103ee83a 	callr	r2
  80eee4:	00000a06 	br	80ef10 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80eee8:	e0bfff17 	ldw	r2,-4(fp)
  80eeec:	00c80004 	movi	r3,8192
  80eef0:	10c00115 	stw	r3,4(r2)
      return 0;
  80eef4:	0005883a 	mov	r2,zero
  80eef8:	00000506 	br	80ef10 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80eefc:	080ee380 	call	80ee38 <alt_get_errno>
  80ef00:	1007883a 	mov	r3,r2
  80ef04:	00801444 	movi	r2,81
  80ef08:	18800015 	stw	r2,0(r3)
    return -1;
  80ef0c:	00bfffc4 	movi	r2,-1
  }
}
  80ef10:	e037883a 	mov	sp,fp
  80ef14:	dfc00117 	ldw	ra,4(sp)
  80ef18:	df000017 	ldw	fp,0(sp)
  80ef1c:	dec00204 	addi	sp,sp,8
  80ef20:	f800283a 	ret

0080ef24 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80ef24:	defff004 	addi	sp,sp,-64
  80ef28:	df000f15 	stw	fp,60(sp)
  80ef2c:	df000f04 	addi	fp,sp,60
  80ef30:	e13ffd15 	stw	r4,-12(fp)
  80ef34:	e17ffe15 	stw	r5,-8(fp)
  80ef38:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80ef3c:	00bffa84 	movi	r2,-22
  80ef40:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80ef44:	e0bffd17 	ldw	r2,-12(fp)
  80ef48:	10800828 	cmpgeui	r2,r2,32
  80ef4c:	1000501e 	bne	r2,zero,80f090 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ef50:	0005303a 	rdctl	r2,status
  80ef54:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ef58:	e0fff617 	ldw	r3,-40(fp)
  80ef5c:	00bfff84 	movi	r2,-2
  80ef60:	1884703a 	and	r2,r3,r2
  80ef64:	1001703a 	wrctl	status,r2
  
  return context;
  80ef68:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80ef6c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  80ef70:	00802074 	movhi	r2,129
  80ef74:	109bff04 	addi	r2,r2,28668
  80ef78:	e0fffd17 	ldw	r3,-12(fp)
  80ef7c:	180690fa 	slli	r3,r3,3
  80ef80:	10c5883a 	add	r2,r2,r3
  80ef84:	e0ffff17 	ldw	r3,-4(fp)
  80ef88:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80ef8c:	00802074 	movhi	r2,129
  80ef90:	109bff04 	addi	r2,r2,28668
  80ef94:	e0fffd17 	ldw	r3,-12(fp)
  80ef98:	180690fa 	slli	r3,r3,3
  80ef9c:	10c5883a 	add	r2,r2,r3
  80efa0:	10800104 	addi	r2,r2,4
  80efa4:	e0fffe17 	ldw	r3,-8(fp)
  80efa8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80efac:	e0bfff17 	ldw	r2,-4(fp)
  80efb0:	10001926 	beq	r2,zero,80f018 <alt_irq_register+0xf4>
  80efb4:	e0bffd17 	ldw	r2,-12(fp)
  80efb8:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80efbc:	0005303a 	rdctl	r2,status
  80efc0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80efc4:	e0fff717 	ldw	r3,-36(fp)
  80efc8:	00bfff84 	movi	r2,-2
  80efcc:	1884703a 	and	r2,r3,r2
  80efd0:	1001703a 	wrctl	status,r2
  
  return context;
  80efd4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80efd8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80efdc:	00c00044 	movi	r3,1
  80efe0:	e0bff217 	ldw	r2,-56(fp)
  80efe4:	1884983a 	sll	r2,r3,r2
  80efe8:	1007883a 	mov	r3,r2
  80efec:	d0a76817 	ldw	r2,-25184(gp)
  80eff0:	1884b03a 	or	r2,r3,r2
  80eff4:	d0a76815 	stw	r2,-25184(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80eff8:	d0a76817 	ldw	r2,-25184(gp)
  80effc:	100170fa 	wrctl	ienable,r2
  80f000:	e0bff817 	ldw	r2,-32(fp)
  80f004:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f008:	e0bff917 	ldw	r2,-28(fp)
  80f00c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80f010:	0005883a 	mov	r2,zero
  80f014:	00001906 	br	80f07c <alt_irq_register+0x158>
  80f018:	e0bffd17 	ldw	r2,-12(fp)
  80f01c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f020:	0005303a 	rdctl	r2,status
  80f024:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f028:	e0fffa17 	ldw	r3,-24(fp)
  80f02c:	00bfff84 	movi	r2,-2
  80f030:	1884703a 	and	r2,r3,r2
  80f034:	1001703a 	wrctl	status,r2
  
  return context;
  80f038:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80f03c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  80f040:	00c00044 	movi	r3,1
  80f044:	e0bff417 	ldw	r2,-48(fp)
  80f048:	1884983a 	sll	r2,r3,r2
  80f04c:	0084303a 	nor	r2,zero,r2
  80f050:	1007883a 	mov	r3,r2
  80f054:	d0a76817 	ldw	r2,-25184(gp)
  80f058:	1884703a 	and	r2,r3,r2
  80f05c:	d0a76815 	stw	r2,-25184(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80f060:	d0a76817 	ldw	r2,-25184(gp)
  80f064:	100170fa 	wrctl	ienable,r2
  80f068:	e0bffb17 	ldw	r2,-20(fp)
  80f06c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f070:	e0bffc17 	ldw	r2,-16(fp)
  80f074:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80f078:	0005883a 	mov	r2,zero
  80f07c:	e0bff115 	stw	r2,-60(fp)
  80f080:	e0bff317 	ldw	r2,-52(fp)
  80f084:	e0bff515 	stw	r2,-44(fp)
  80f088:	e0bff517 	ldw	r2,-44(fp)
  80f08c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80f090:	e0bff117 	ldw	r2,-60(fp)
}
  80f094:	e037883a 	mov	sp,fp
  80f098:	df000017 	ldw	fp,0(sp)
  80f09c:	dec00104 	addi	sp,sp,4
  80f0a0:	f800283a 	ret

0080f0a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f0a4:	defffe04 	addi	sp,sp,-8
  80f0a8:	dfc00115 	stw	ra,4(sp)
  80f0ac:	df000015 	stw	fp,0(sp)
  80f0b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f0b4:	d0a00c17 	ldw	r2,-32720(gp)
  80f0b8:	10000326 	beq	r2,zero,80f0c8 <alt_get_errno+0x24>
  80f0bc:	d0a00c17 	ldw	r2,-32720(gp)
  80f0c0:	103ee83a 	callr	r2
  80f0c4:	00000106 	br	80f0cc <alt_get_errno+0x28>
  80f0c8:	d0a76104 	addi	r2,gp,-25212
}
  80f0cc:	e037883a 	mov	sp,fp
  80f0d0:	dfc00117 	ldw	ra,4(sp)
  80f0d4:	df000017 	ldw	fp,0(sp)
  80f0d8:	dec00204 	addi	sp,sp,8
  80f0dc:	f800283a 	ret

0080f0e0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80f0e0:	deffed04 	addi	sp,sp,-76
  80f0e4:	dfc01215 	stw	ra,72(sp)
  80f0e8:	df001115 	stw	fp,68(sp)
  80f0ec:	df001104 	addi	fp,sp,68
  80f0f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f0f4:	e0bfff17 	ldw	r2,-4(fp)
  80f0f8:	10000616 	blt	r2,zero,80f114 <isatty+0x34>
  80f0fc:	e0bfff17 	ldw	r2,-4(fp)
  80f100:	10c00324 	muli	r3,r2,12
  80f104:	00802074 	movhi	r2,129
  80f108:	108f8904 	addi	r2,r2,15908
  80f10c:	1885883a 	add	r2,r3,r2
  80f110:	00000106 	br	80f118 <isatty+0x38>
  80f114:	0005883a 	mov	r2,zero
  80f118:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80f11c:	e0bfef17 	ldw	r2,-68(fp)
  80f120:	10000e26 	beq	r2,zero,80f15c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80f124:	e0bfef17 	ldw	r2,-68(fp)
  80f128:	10800017 	ldw	r2,0(r2)
  80f12c:	10800817 	ldw	r2,32(r2)
  80f130:	1000021e 	bne	r2,zero,80f13c <isatty+0x5c>
    {
      return 1;
  80f134:	00800044 	movi	r2,1
  80f138:	00000d06 	br	80f170 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80f13c:	e0bff004 	addi	r2,fp,-64
  80f140:	100b883a 	mov	r5,r2
  80f144:	e13fff17 	ldw	r4,-4(fp)
  80f148:	080ee740 	call	80ee74 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80f14c:	e0bff117 	ldw	r2,-60(fp)
  80f150:	10880020 	cmpeqi	r2,r2,8192
  80f154:	10803fcc 	andi	r2,r2,255
  80f158:	00000506 	br	80f170 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f15c:	080f0a40 	call	80f0a4 <alt_get_errno>
  80f160:	1007883a 	mov	r3,r2
  80f164:	00801444 	movi	r2,81
  80f168:	18800015 	stw	r2,0(r3)
    return 0;
  80f16c:	0005883a 	mov	r2,zero
  }
}
  80f170:	e037883a 	mov	sp,fp
  80f174:	dfc00117 	ldw	ra,4(sp)
  80f178:	df000017 	ldw	fp,0(sp)
  80f17c:	dec00204 	addi	sp,sp,8
  80f180:	f800283a 	ret

0080f184 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80f184:	defffc04 	addi	sp,sp,-16
  80f188:	df000315 	stw	fp,12(sp)
  80f18c:	df000304 	addi	fp,sp,12
  80f190:	e13ffd15 	stw	r4,-12(fp)
  80f194:	e17ffe15 	stw	r5,-8(fp)
  80f198:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80f19c:	e0fffe17 	ldw	r3,-8(fp)
  80f1a0:	e0bffd17 	ldw	r2,-12(fp)
  80f1a4:	18800c26 	beq	r3,r2,80f1d8 <alt_load_section+0x54>
  {
    while( to != end )
  80f1a8:	00000806 	br	80f1cc <alt_load_section+0x48>
    {
      *to++ = *from++;
  80f1ac:	e0bffe17 	ldw	r2,-8(fp)
  80f1b0:	10c00104 	addi	r3,r2,4
  80f1b4:	e0fffe15 	stw	r3,-8(fp)
  80f1b8:	e0fffd17 	ldw	r3,-12(fp)
  80f1bc:	19000104 	addi	r4,r3,4
  80f1c0:	e13ffd15 	stw	r4,-12(fp)
  80f1c4:	18c00017 	ldw	r3,0(r3)
  80f1c8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80f1cc:	e0fffe17 	ldw	r3,-8(fp)
  80f1d0:	e0bfff17 	ldw	r2,-4(fp)
  80f1d4:	18bff51e 	bne	r3,r2,80f1ac <__alt_mem_onchip_mem+0xff8071ac>
    {
      *to++ = *from++;
    }
  }
}
  80f1d8:	0001883a 	nop
  80f1dc:	e037883a 	mov	sp,fp
  80f1e0:	df000017 	ldw	fp,0(sp)
  80f1e4:	dec00104 	addi	sp,sp,4
  80f1e8:	f800283a 	ret

0080f1ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80f1ec:	defffe04 	addi	sp,sp,-8
  80f1f0:	dfc00115 	stw	ra,4(sp)
  80f1f4:	df000015 	stw	fp,0(sp)
  80f1f8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80f1fc:	01802074 	movhi	r6,129
  80f200:	31948c04 	addi	r6,r6,21040
  80f204:	01402074 	movhi	r5,129
  80f208:	294d5004 	addi	r5,r5,13632
  80f20c:	01002074 	movhi	r4,129
  80f210:	21148c04 	addi	r4,r4,21040
  80f214:	080f1840 	call	80f184 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80f218:	01802034 	movhi	r6,128
  80f21c:	31809104 	addi	r6,r6,580
  80f220:	01402034 	movhi	r5,128
  80f224:	29400804 	addi	r5,r5,32
  80f228:	01002034 	movhi	r4,128
  80f22c:	21000804 	addi	r4,r4,32
  80f230:	080f1840 	call	80f184 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80f234:	01802074 	movhi	r6,129
  80f238:	318d5004 	addi	r6,r6,13632
  80f23c:	01402074 	movhi	r5,129
  80f240:	294b9d04 	addi	r5,r5,11892
  80f244:	01002074 	movhi	r4,129
  80f248:	210b9d04 	addi	r4,r4,11892
  80f24c:	080f1840 	call	80f184 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80f250:	0811fd00 	call	811fd0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80f254:	08123f40 	call	8123f4 <alt_icache_flush_all>
}
  80f258:	0001883a 	nop
  80f25c:	e037883a 	mov	sp,fp
  80f260:	dfc00117 	ldw	ra,4(sp)
  80f264:	df000017 	ldw	fp,0(sp)
  80f268:	dec00204 	addi	sp,sp,8
  80f26c:	f800283a 	ret

0080f270 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f270:	defffe04 	addi	sp,sp,-8
  80f274:	dfc00115 	stw	ra,4(sp)
  80f278:	df000015 	stw	fp,0(sp)
  80f27c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f280:	d0a00c17 	ldw	r2,-32720(gp)
  80f284:	10000326 	beq	r2,zero,80f294 <alt_get_errno+0x24>
  80f288:	d0a00c17 	ldw	r2,-32720(gp)
  80f28c:	103ee83a 	callr	r2
  80f290:	00000106 	br	80f298 <alt_get_errno+0x28>
  80f294:	d0a76104 	addi	r2,gp,-25212
}
  80f298:	e037883a 	mov	sp,fp
  80f29c:	dfc00117 	ldw	ra,4(sp)
  80f2a0:	df000017 	ldw	fp,0(sp)
  80f2a4:	dec00204 	addi	sp,sp,8
  80f2a8:	f800283a 	ret

0080f2ac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80f2ac:	defff904 	addi	sp,sp,-28
  80f2b0:	dfc00615 	stw	ra,24(sp)
  80f2b4:	df000515 	stw	fp,20(sp)
  80f2b8:	df000504 	addi	fp,sp,20
  80f2bc:	e13ffd15 	stw	r4,-12(fp)
  80f2c0:	e17ffe15 	stw	r5,-8(fp)
  80f2c4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80f2c8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f2cc:	e0bffd17 	ldw	r2,-12(fp)
  80f2d0:	10000616 	blt	r2,zero,80f2ec <lseek+0x40>
  80f2d4:	e0bffd17 	ldw	r2,-12(fp)
  80f2d8:	10c00324 	muli	r3,r2,12
  80f2dc:	00802074 	movhi	r2,129
  80f2e0:	108f8904 	addi	r2,r2,15908
  80f2e4:	1885883a 	add	r2,r3,r2
  80f2e8:	00000106 	br	80f2f0 <lseek+0x44>
  80f2ec:	0005883a 	mov	r2,zero
  80f2f0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80f2f4:	e0bffc17 	ldw	r2,-16(fp)
  80f2f8:	10001026 	beq	r2,zero,80f33c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80f2fc:	e0bffc17 	ldw	r2,-16(fp)
  80f300:	10800017 	ldw	r2,0(r2)
  80f304:	10800717 	ldw	r2,28(r2)
  80f308:	10000926 	beq	r2,zero,80f330 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80f30c:	e0bffc17 	ldw	r2,-16(fp)
  80f310:	10800017 	ldw	r2,0(r2)
  80f314:	10800717 	ldw	r2,28(r2)
  80f318:	e1bfff17 	ldw	r6,-4(fp)
  80f31c:	e17ffe17 	ldw	r5,-8(fp)
  80f320:	e13ffc17 	ldw	r4,-16(fp)
  80f324:	103ee83a 	callr	r2
  80f328:	e0bffb15 	stw	r2,-20(fp)
  80f32c:	00000506 	br	80f344 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80f330:	00bfde84 	movi	r2,-134
  80f334:	e0bffb15 	stw	r2,-20(fp)
  80f338:	00000206 	br	80f344 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80f33c:	00bfebc4 	movi	r2,-81
  80f340:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80f344:	e0bffb17 	ldw	r2,-20(fp)
  80f348:	1000070e 	bge	r2,zero,80f368 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80f34c:	080f2700 	call	80f270 <alt_get_errno>
  80f350:	1007883a 	mov	r3,r2
  80f354:	e0bffb17 	ldw	r2,-20(fp)
  80f358:	0085c83a 	sub	r2,zero,r2
  80f35c:	18800015 	stw	r2,0(r3)
    rc = -1;
  80f360:	00bfffc4 	movi	r2,-1
  80f364:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80f368:	e0bffb17 	ldw	r2,-20(fp)
}
  80f36c:	e037883a 	mov	sp,fp
  80f370:	dfc00117 	ldw	ra,4(sp)
  80f374:	df000017 	ldw	fp,0(sp)
  80f378:	dec00204 	addi	sp,sp,8
  80f37c:	f800283a 	ret

0080f380 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80f380:	defffd04 	addi	sp,sp,-12
  80f384:	dfc00215 	stw	ra,8(sp)
  80f388:	df000115 	stw	fp,4(sp)
  80f38c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80f390:	0009883a 	mov	r4,zero
  80f394:	080fbf00 	call	80fbf0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80f398:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80f39c:	080fc280 	call	80fc28 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80f3a0:	01802074 	movhi	r6,129
  80f3a4:	318d4204 	addi	r6,r6,13576
  80f3a8:	01402074 	movhi	r5,129
  80f3ac:	294d4204 	addi	r5,r5,13576
  80f3b0:	01002074 	movhi	r4,129
  80f3b4:	210d4204 	addi	r4,r4,13576
  80f3b8:	081278c0 	call	81278c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80f3bc:	08120f80 	call	8120f8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80f3c0:	01002074 	movhi	r4,129
  80f3c4:	21085604 	addi	r4,r4,8536
  80f3c8:	0812ae00 	call	812ae0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80f3cc:	d0a76917 	ldw	r2,-25180(gp)
  80f3d0:	d0e76a17 	ldw	r3,-25176(gp)
  80f3d4:	d1276b17 	ldw	r4,-25172(gp)
  80f3d8:	200d883a 	mov	r6,r4
  80f3dc:	180b883a 	mov	r5,r3
  80f3e0:	1009883a 	mov	r4,r2
  80f3e4:	08011dc0 	call	8011dc <main>
  80f3e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80f3ec:	01000044 	movi	r4,1
  80f3f0:	080ed3c0 	call	80ed3c <close>
  exit (result);
  80f3f4:	e13fff17 	ldw	r4,-4(fp)
  80f3f8:	0812af40 	call	812af4 <exit>

0080f3fc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80f3fc:	defffe04 	addi	sp,sp,-8
  80f400:	df000115 	stw	fp,4(sp)
  80f404:	df000104 	addi	fp,sp,4
  80f408:	e13fff15 	stw	r4,-4(fp)
}
  80f40c:	0001883a 	nop
  80f410:	e037883a 	mov	sp,fp
  80f414:	df000017 	ldw	fp,0(sp)
  80f418:	dec00104 	addi	sp,sp,4
  80f41c:	f800283a 	ret

0080f420 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80f420:	defffe04 	addi	sp,sp,-8
  80f424:	df000115 	stw	fp,4(sp)
  80f428:	df000104 	addi	fp,sp,4
  80f42c:	e13fff15 	stw	r4,-4(fp)
}
  80f430:	0001883a 	nop
  80f434:	e037883a 	mov	sp,fp
  80f438:	df000017 	ldw	fp,0(sp)
  80f43c:	dec00104 	addi	sp,sp,4
  80f440:	f800283a 	ret

0080f444 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f444:	defffe04 	addi	sp,sp,-8
  80f448:	dfc00115 	stw	ra,4(sp)
  80f44c:	df000015 	stw	fp,0(sp)
  80f450:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f454:	d0a00c17 	ldw	r2,-32720(gp)
  80f458:	10000326 	beq	r2,zero,80f468 <alt_get_errno+0x24>
  80f45c:	d0a00c17 	ldw	r2,-32720(gp)
  80f460:	103ee83a 	callr	r2
  80f464:	00000106 	br	80f46c <alt_get_errno+0x28>
  80f468:	d0a76104 	addi	r2,gp,-25212
}
  80f46c:	e037883a 	mov	sp,fp
  80f470:	dfc00117 	ldw	ra,4(sp)
  80f474:	df000017 	ldw	fp,0(sp)
  80f478:	dec00204 	addi	sp,sp,8
  80f47c:	f800283a 	ret

0080f480 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80f480:	defffd04 	addi	sp,sp,-12
  80f484:	df000215 	stw	fp,8(sp)
  80f488:	df000204 	addi	fp,sp,8
  80f48c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80f490:	e0bfff17 	ldw	r2,-4(fp)
  80f494:	10800217 	ldw	r2,8(r2)
  80f498:	10d00034 	orhi	r3,r2,16384
  80f49c:	e0bfff17 	ldw	r2,-4(fp)
  80f4a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f4a4:	e03ffe15 	stw	zero,-8(fp)
  80f4a8:	00001d06 	br	80f520 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f4ac:	00802074 	movhi	r2,129
  80f4b0:	108f8904 	addi	r2,r2,15908
  80f4b4:	e0fffe17 	ldw	r3,-8(fp)
  80f4b8:	18c00324 	muli	r3,r3,12
  80f4bc:	10c5883a 	add	r2,r2,r3
  80f4c0:	10c00017 	ldw	r3,0(r2)
  80f4c4:	e0bfff17 	ldw	r2,-4(fp)
  80f4c8:	10800017 	ldw	r2,0(r2)
  80f4cc:	1880111e 	bne	r3,r2,80f514 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80f4d0:	00802074 	movhi	r2,129
  80f4d4:	108f8904 	addi	r2,r2,15908
  80f4d8:	e0fffe17 	ldw	r3,-8(fp)
  80f4dc:	18c00324 	muli	r3,r3,12
  80f4e0:	10c5883a 	add	r2,r2,r3
  80f4e4:	10800204 	addi	r2,r2,8
  80f4e8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f4ec:	1000090e 	bge	r2,zero,80f514 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80f4f0:	e0bffe17 	ldw	r2,-8(fp)
  80f4f4:	10c00324 	muli	r3,r2,12
  80f4f8:	00802074 	movhi	r2,129
  80f4fc:	108f8904 	addi	r2,r2,15908
  80f500:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80f504:	e0bfff17 	ldw	r2,-4(fp)
  80f508:	18800226 	beq	r3,r2,80f514 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80f50c:	00bffcc4 	movi	r2,-13
  80f510:	00000806 	br	80f534 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f514:	e0bffe17 	ldw	r2,-8(fp)
  80f518:	10800044 	addi	r2,r2,1
  80f51c:	e0bffe15 	stw	r2,-8(fp)
  80f520:	d0a00b17 	ldw	r2,-32724(gp)
  80f524:	1007883a 	mov	r3,r2
  80f528:	e0bffe17 	ldw	r2,-8(fp)
  80f52c:	18bfdf2e 	bgeu	r3,r2,80f4ac <__alt_mem_onchip_mem+0xff8074ac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80f530:	0005883a 	mov	r2,zero
}
  80f534:	e037883a 	mov	sp,fp
  80f538:	df000017 	ldw	fp,0(sp)
  80f53c:	dec00104 	addi	sp,sp,4
  80f540:	f800283a 	ret

0080f544 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80f544:	defff604 	addi	sp,sp,-40
  80f548:	dfc00915 	stw	ra,36(sp)
  80f54c:	df000815 	stw	fp,32(sp)
  80f550:	df000804 	addi	fp,sp,32
  80f554:	e13ffd15 	stw	r4,-12(fp)
  80f558:	e17ffe15 	stw	r5,-8(fp)
  80f55c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80f560:	00bfffc4 	movi	r2,-1
  80f564:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80f568:	00bffb44 	movi	r2,-19
  80f56c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80f570:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80f574:	d1600904 	addi	r5,gp,-32732
  80f578:	e13ffd17 	ldw	r4,-12(fp)
  80f57c:	08121b80 	call	8121b8 <alt_find_dev>
  80f580:	e0bff815 	stw	r2,-32(fp)
  80f584:	e0bff817 	ldw	r2,-32(fp)
  80f588:	1000051e 	bne	r2,zero,80f5a0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80f58c:	e13ffd17 	ldw	r4,-12(fp)
  80f590:	08122480 	call	812248 <alt_find_file>
  80f594:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80f598:	00800044 	movi	r2,1
  80f59c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80f5a0:	e0bff817 	ldw	r2,-32(fp)
  80f5a4:	10002926 	beq	r2,zero,80f64c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80f5a8:	e13ff817 	ldw	r4,-32(fp)
  80f5ac:	08123500 	call	812350 <alt_get_fd>
  80f5b0:	e0bff915 	stw	r2,-28(fp)
  80f5b4:	e0bff917 	ldw	r2,-28(fp)
  80f5b8:	1000030e 	bge	r2,zero,80f5c8 <open+0x84>
    {
      status = index;
  80f5bc:	e0bff917 	ldw	r2,-28(fp)
  80f5c0:	e0bffa15 	stw	r2,-24(fp)
  80f5c4:	00002306 	br	80f654 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80f5c8:	e0bff917 	ldw	r2,-28(fp)
  80f5cc:	10c00324 	muli	r3,r2,12
  80f5d0:	00802074 	movhi	r2,129
  80f5d4:	108f8904 	addi	r2,r2,15908
  80f5d8:	1885883a 	add	r2,r3,r2
  80f5dc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80f5e0:	e0fffe17 	ldw	r3,-8(fp)
  80f5e4:	00900034 	movhi	r2,16384
  80f5e8:	10bfffc4 	addi	r2,r2,-1
  80f5ec:	1886703a 	and	r3,r3,r2
  80f5f0:	e0bffc17 	ldw	r2,-16(fp)
  80f5f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80f5f8:	e0bffb17 	ldw	r2,-20(fp)
  80f5fc:	1000051e 	bne	r2,zero,80f614 <open+0xd0>
  80f600:	e13ffc17 	ldw	r4,-16(fp)
  80f604:	080f4800 	call	80f480 <alt_file_locked>
  80f608:	e0bffa15 	stw	r2,-24(fp)
  80f60c:	e0bffa17 	ldw	r2,-24(fp)
  80f610:	10001016 	blt	r2,zero,80f654 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80f614:	e0bff817 	ldw	r2,-32(fp)
  80f618:	10800317 	ldw	r2,12(r2)
  80f61c:	10000826 	beq	r2,zero,80f640 <open+0xfc>
  80f620:	e0bff817 	ldw	r2,-32(fp)
  80f624:	10800317 	ldw	r2,12(r2)
  80f628:	e1ffff17 	ldw	r7,-4(fp)
  80f62c:	e1bffe17 	ldw	r6,-8(fp)
  80f630:	e17ffd17 	ldw	r5,-12(fp)
  80f634:	e13ffc17 	ldw	r4,-16(fp)
  80f638:	103ee83a 	callr	r2
  80f63c:	00000106 	br	80f644 <open+0x100>
  80f640:	0005883a 	mov	r2,zero
  80f644:	e0bffa15 	stw	r2,-24(fp)
  80f648:	00000206 	br	80f654 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80f64c:	00bffb44 	movi	r2,-19
  80f650:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80f654:	e0bffa17 	ldw	r2,-24(fp)
  80f658:	1000090e 	bge	r2,zero,80f680 <open+0x13c>
  {
    alt_release_fd (index);  
  80f65c:	e13ff917 	ldw	r4,-28(fp)
  80f660:	080f7d00 	call	80f7d0 <alt_release_fd>
    ALT_ERRNO = -status;
  80f664:	080f4440 	call	80f444 <alt_get_errno>
  80f668:	1007883a 	mov	r3,r2
  80f66c:	e0bffa17 	ldw	r2,-24(fp)
  80f670:	0085c83a 	sub	r2,zero,r2
  80f674:	18800015 	stw	r2,0(r3)
    return -1;
  80f678:	00bfffc4 	movi	r2,-1
  80f67c:	00000106 	br	80f684 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80f680:	e0bff917 	ldw	r2,-28(fp)
}
  80f684:	e037883a 	mov	sp,fp
  80f688:	dfc00117 	ldw	ra,4(sp)
  80f68c:	df000017 	ldw	fp,0(sp)
  80f690:	dec00204 	addi	sp,sp,8
  80f694:	f800283a 	ret

0080f698 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f698:	defffe04 	addi	sp,sp,-8
  80f69c:	dfc00115 	stw	ra,4(sp)
  80f6a0:	df000015 	stw	fp,0(sp)
  80f6a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f6a8:	d0a00c17 	ldw	r2,-32720(gp)
  80f6ac:	10000326 	beq	r2,zero,80f6bc <alt_get_errno+0x24>
  80f6b0:	d0a00c17 	ldw	r2,-32720(gp)
  80f6b4:	103ee83a 	callr	r2
  80f6b8:	00000106 	br	80f6c0 <alt_get_errno+0x28>
  80f6bc:	d0a76104 	addi	r2,gp,-25212
}
  80f6c0:	e037883a 	mov	sp,fp
  80f6c4:	dfc00117 	ldw	ra,4(sp)
  80f6c8:	df000017 	ldw	fp,0(sp)
  80f6cc:	dec00204 	addi	sp,sp,8
  80f6d0:	f800283a 	ret

0080f6d4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80f6d4:	defff904 	addi	sp,sp,-28
  80f6d8:	dfc00615 	stw	ra,24(sp)
  80f6dc:	df000515 	stw	fp,20(sp)
  80f6e0:	df000504 	addi	fp,sp,20
  80f6e4:	e13ffd15 	stw	r4,-12(fp)
  80f6e8:	e17ffe15 	stw	r5,-8(fp)
  80f6ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f6f0:	e0bffd17 	ldw	r2,-12(fp)
  80f6f4:	10000616 	blt	r2,zero,80f710 <read+0x3c>
  80f6f8:	e0bffd17 	ldw	r2,-12(fp)
  80f6fc:	10c00324 	muli	r3,r2,12
  80f700:	00802074 	movhi	r2,129
  80f704:	108f8904 	addi	r2,r2,15908
  80f708:	1885883a 	add	r2,r3,r2
  80f70c:	00000106 	br	80f714 <read+0x40>
  80f710:	0005883a 	mov	r2,zero
  80f714:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80f718:	e0bffb17 	ldw	r2,-20(fp)
  80f71c:	10002226 	beq	r2,zero,80f7a8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f720:	e0bffb17 	ldw	r2,-20(fp)
  80f724:	10800217 	ldw	r2,8(r2)
  80f728:	108000cc 	andi	r2,r2,3
  80f72c:	10800060 	cmpeqi	r2,r2,1
  80f730:	1000181e 	bne	r2,zero,80f794 <read+0xc0>
        (fd->dev->read))
  80f734:	e0bffb17 	ldw	r2,-20(fp)
  80f738:	10800017 	ldw	r2,0(r2)
  80f73c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f740:	10001426 	beq	r2,zero,80f794 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80f744:	e0bffb17 	ldw	r2,-20(fp)
  80f748:	10800017 	ldw	r2,0(r2)
  80f74c:	10800517 	ldw	r2,20(r2)
  80f750:	e0ffff17 	ldw	r3,-4(fp)
  80f754:	180d883a 	mov	r6,r3
  80f758:	e17ffe17 	ldw	r5,-8(fp)
  80f75c:	e13ffb17 	ldw	r4,-20(fp)
  80f760:	103ee83a 	callr	r2
  80f764:	e0bffc15 	stw	r2,-16(fp)
  80f768:	e0bffc17 	ldw	r2,-16(fp)
  80f76c:	1000070e 	bge	r2,zero,80f78c <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80f770:	080f6980 	call	80f698 <alt_get_errno>
  80f774:	1007883a 	mov	r3,r2
  80f778:	e0bffc17 	ldw	r2,-16(fp)
  80f77c:	0085c83a 	sub	r2,zero,r2
  80f780:	18800015 	stw	r2,0(r3)
          return -1;
  80f784:	00bfffc4 	movi	r2,-1
  80f788:	00000c06 	br	80f7bc <read+0xe8>
        }
        return rval;
  80f78c:	e0bffc17 	ldw	r2,-16(fp)
  80f790:	00000a06 	br	80f7bc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80f794:	080f6980 	call	80f698 <alt_get_errno>
  80f798:	1007883a 	mov	r3,r2
  80f79c:	00800344 	movi	r2,13
  80f7a0:	18800015 	stw	r2,0(r3)
  80f7a4:	00000406 	br	80f7b8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80f7a8:	080f6980 	call	80f698 <alt_get_errno>
  80f7ac:	1007883a 	mov	r3,r2
  80f7b0:	00801444 	movi	r2,81
  80f7b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f7b8:	00bfffc4 	movi	r2,-1
}
  80f7bc:	e037883a 	mov	sp,fp
  80f7c0:	dfc00117 	ldw	ra,4(sp)
  80f7c4:	df000017 	ldw	fp,0(sp)
  80f7c8:	dec00204 	addi	sp,sp,8
  80f7cc:	f800283a 	ret

0080f7d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80f7d0:	defffe04 	addi	sp,sp,-8
  80f7d4:	df000115 	stw	fp,4(sp)
  80f7d8:	df000104 	addi	fp,sp,4
  80f7dc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80f7e0:	e0bfff17 	ldw	r2,-4(fp)
  80f7e4:	108000d0 	cmplti	r2,r2,3
  80f7e8:	10000d1e 	bne	r2,zero,80f820 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80f7ec:	00802074 	movhi	r2,129
  80f7f0:	108f8904 	addi	r2,r2,15908
  80f7f4:	e0ffff17 	ldw	r3,-4(fp)
  80f7f8:	18c00324 	muli	r3,r3,12
  80f7fc:	10c5883a 	add	r2,r2,r3
  80f800:	10800204 	addi	r2,r2,8
  80f804:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80f808:	00802074 	movhi	r2,129
  80f80c:	108f8904 	addi	r2,r2,15908
  80f810:	e0ffff17 	ldw	r3,-4(fp)
  80f814:	18c00324 	muli	r3,r3,12
  80f818:	10c5883a 	add	r2,r2,r3
  80f81c:	10000015 	stw	zero,0(r2)
  }
}
  80f820:	0001883a 	nop
  80f824:	e037883a 	mov	sp,fp
  80f828:	df000017 	ldw	fp,0(sp)
  80f82c:	dec00104 	addi	sp,sp,4
  80f830:	f800283a 	ret

0080f834 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80f834:	defff904 	addi	sp,sp,-28
  80f838:	df000615 	stw	fp,24(sp)
  80f83c:	df000604 	addi	fp,sp,24
  80f840:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f844:	0005303a 	rdctl	r2,status
  80f848:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f84c:	e0fffe17 	ldw	r3,-8(fp)
  80f850:	00bfff84 	movi	r2,-2
  80f854:	1884703a 	and	r2,r3,r2
  80f858:	1001703a 	wrctl	status,r2
  
  return context;
  80f85c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80f860:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80f864:	d0a00e17 	ldw	r2,-32712(gp)
  80f868:	10c000c4 	addi	r3,r2,3
  80f86c:	00bfff04 	movi	r2,-4
  80f870:	1884703a 	and	r2,r3,r2
  80f874:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80f878:	d0e00e17 	ldw	r3,-32712(gp)
  80f87c:	e0bfff17 	ldw	r2,-4(fp)
  80f880:	1887883a 	add	r3,r3,r2
  80f884:	00804034 	movhi	r2,256
  80f888:	10800004 	addi	r2,r2,0
  80f88c:	10c0062e 	bgeu	r2,r3,80f8a8 <sbrk+0x74>
  80f890:	e0bffb17 	ldw	r2,-20(fp)
  80f894:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f898:	e0bffa17 	ldw	r2,-24(fp)
  80f89c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80f8a0:	00bfffc4 	movi	r2,-1
  80f8a4:	00000b06 	br	80f8d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80f8a8:	d0a00e17 	ldw	r2,-32712(gp)
  80f8ac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80f8b0:	d0e00e17 	ldw	r3,-32712(gp)
  80f8b4:	e0bfff17 	ldw	r2,-4(fp)
  80f8b8:	1885883a 	add	r2,r3,r2
  80f8bc:	d0a00e15 	stw	r2,-32712(gp)
  80f8c0:	e0bffb17 	ldw	r2,-20(fp)
  80f8c4:	e0bffc15 	stw	r2,-16(fp)
  80f8c8:	e0bffc17 	ldw	r2,-16(fp)
  80f8cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80f8d0:	e0bffd17 	ldw	r2,-12(fp)
} 
  80f8d4:	e037883a 	mov	sp,fp
  80f8d8:	df000017 	ldw	fp,0(sp)
  80f8dc:	dec00104 	addi	sp,sp,4
  80f8e0:	f800283a 	ret

0080f8e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80f8e4:	defffa04 	addi	sp,sp,-24
  80f8e8:	df000515 	stw	fp,20(sp)
  80f8ec:	df000504 	addi	fp,sp,20
  80f8f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f8f4:	0005303a 	rdctl	r2,status
  80f8f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f8fc:	e0fffc17 	ldw	r3,-16(fp)
  80f900:	00bfff84 	movi	r2,-2
  80f904:	1884703a 	and	r2,r3,r2
  80f908:	1001703a 	wrctl	status,r2
  
  return context;
  80f90c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80f910:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80f914:	e0bfff17 	ldw	r2,-4(fp)
  80f918:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80f91c:	e0bffd17 	ldw	r2,-12(fp)
  80f920:	10800017 	ldw	r2,0(r2)
  80f924:	e0fffd17 	ldw	r3,-12(fp)
  80f928:	18c00117 	ldw	r3,4(r3)
  80f92c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80f930:	e0bffd17 	ldw	r2,-12(fp)
  80f934:	10800117 	ldw	r2,4(r2)
  80f938:	e0fffd17 	ldw	r3,-12(fp)
  80f93c:	18c00017 	ldw	r3,0(r3)
  80f940:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80f944:	e0bffd17 	ldw	r2,-12(fp)
  80f948:	e0fffd17 	ldw	r3,-12(fp)
  80f94c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80f950:	e0bffd17 	ldw	r2,-12(fp)
  80f954:	e0fffd17 	ldw	r3,-12(fp)
  80f958:	10c00015 	stw	r3,0(r2)
  80f95c:	e0bffb17 	ldw	r2,-20(fp)
  80f960:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f964:	e0bffe17 	ldw	r2,-8(fp)
  80f968:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80f96c:	0001883a 	nop
  80f970:	e037883a 	mov	sp,fp
  80f974:	df000017 	ldw	fp,0(sp)
  80f978:	dec00104 	addi	sp,sp,4
  80f97c:	f800283a 	ret

0080f980 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80f980:	defffb04 	addi	sp,sp,-20
  80f984:	dfc00415 	stw	ra,16(sp)
  80f988:	df000315 	stw	fp,12(sp)
  80f98c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80f990:	d0a00f17 	ldw	r2,-32708(gp)
  80f994:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80f998:	d0a76d17 	ldw	r2,-25164(gp)
  80f99c:	10800044 	addi	r2,r2,1
  80f9a0:	d0a76d15 	stw	r2,-25164(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80f9a4:	00002e06 	br	80fa60 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80f9a8:	e0bffd17 	ldw	r2,-12(fp)
  80f9ac:	10800017 	ldw	r2,0(r2)
  80f9b0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80f9b4:	e0bffd17 	ldw	r2,-12(fp)
  80f9b8:	10800403 	ldbu	r2,16(r2)
  80f9bc:	10803fcc 	andi	r2,r2,255
  80f9c0:	10000426 	beq	r2,zero,80f9d4 <alt_tick+0x54>
  80f9c4:	d0a76d17 	ldw	r2,-25164(gp)
  80f9c8:	1000021e 	bne	r2,zero,80f9d4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80f9cc:	e0bffd17 	ldw	r2,-12(fp)
  80f9d0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80f9d4:	e0bffd17 	ldw	r2,-12(fp)
  80f9d8:	10800217 	ldw	r2,8(r2)
  80f9dc:	d0e76d17 	ldw	r3,-25164(gp)
  80f9e0:	18801d36 	bltu	r3,r2,80fa58 <alt_tick+0xd8>
  80f9e4:	e0bffd17 	ldw	r2,-12(fp)
  80f9e8:	10800403 	ldbu	r2,16(r2)
  80f9ec:	10803fcc 	andi	r2,r2,255
  80f9f0:	1000191e 	bne	r2,zero,80fa58 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80f9f4:	e0bffd17 	ldw	r2,-12(fp)
  80f9f8:	10800317 	ldw	r2,12(r2)
  80f9fc:	e0fffd17 	ldw	r3,-12(fp)
  80fa00:	18c00517 	ldw	r3,20(r3)
  80fa04:	1809883a 	mov	r4,r3
  80fa08:	103ee83a 	callr	r2
  80fa0c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80fa10:	e0bfff17 	ldw	r2,-4(fp)
  80fa14:	1000031e 	bne	r2,zero,80fa24 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80fa18:	e13ffd17 	ldw	r4,-12(fp)
  80fa1c:	080f8e40 	call	80f8e4 <alt_alarm_stop>
  80fa20:	00000d06 	br	80fa58 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80fa24:	e0bffd17 	ldw	r2,-12(fp)
  80fa28:	10c00217 	ldw	r3,8(r2)
  80fa2c:	e0bfff17 	ldw	r2,-4(fp)
  80fa30:	1887883a 	add	r3,r3,r2
  80fa34:	e0bffd17 	ldw	r2,-12(fp)
  80fa38:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80fa3c:	e0bffd17 	ldw	r2,-12(fp)
  80fa40:	10c00217 	ldw	r3,8(r2)
  80fa44:	d0a76d17 	ldw	r2,-25164(gp)
  80fa48:	1880032e 	bgeu	r3,r2,80fa58 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80fa4c:	e0bffd17 	ldw	r2,-12(fp)
  80fa50:	00c00044 	movi	r3,1
  80fa54:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80fa58:	e0bffe17 	ldw	r2,-8(fp)
  80fa5c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80fa60:	e0fffd17 	ldw	r3,-12(fp)
  80fa64:	d0a00f04 	addi	r2,gp,-32708
  80fa68:	18bfcf1e 	bne	r3,r2,80f9a8 <__alt_mem_onchip_mem+0xff8079a8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80fa6c:	0001883a 	nop
}
  80fa70:	0001883a 	nop
  80fa74:	e037883a 	mov	sp,fp
  80fa78:	dfc00117 	ldw	ra,4(sp)
  80fa7c:	df000017 	ldw	fp,0(sp)
  80fa80:	dec00204 	addi	sp,sp,8
  80fa84:	f800283a 	ret

0080fa88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fa88:	defffe04 	addi	sp,sp,-8
  80fa8c:	dfc00115 	stw	ra,4(sp)
  80fa90:	df000015 	stw	fp,0(sp)
  80fa94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fa98:	d0a00c17 	ldw	r2,-32720(gp)
  80fa9c:	10000326 	beq	r2,zero,80faac <alt_get_errno+0x24>
  80faa0:	d0a00c17 	ldw	r2,-32720(gp)
  80faa4:	103ee83a 	callr	r2
  80faa8:	00000106 	br	80fab0 <alt_get_errno+0x28>
  80faac:	d0a76104 	addi	r2,gp,-25212
}
  80fab0:	e037883a 	mov	sp,fp
  80fab4:	dfc00117 	ldw	ra,4(sp)
  80fab8:	df000017 	ldw	fp,0(sp)
  80fabc:	dec00204 	addi	sp,sp,8
  80fac0:	f800283a 	ret

0080fac4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80fac4:	defff904 	addi	sp,sp,-28
  80fac8:	dfc00615 	stw	ra,24(sp)
  80facc:	df000515 	stw	fp,20(sp)
  80fad0:	df000504 	addi	fp,sp,20
  80fad4:	e13ffd15 	stw	r4,-12(fp)
  80fad8:	e17ffe15 	stw	r5,-8(fp)
  80fadc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fae0:	e0bffd17 	ldw	r2,-12(fp)
  80fae4:	10000616 	blt	r2,zero,80fb00 <write+0x3c>
  80fae8:	e0bffd17 	ldw	r2,-12(fp)
  80faec:	10c00324 	muli	r3,r2,12
  80faf0:	00802074 	movhi	r2,129
  80faf4:	108f8904 	addi	r2,r2,15908
  80faf8:	1885883a 	add	r2,r3,r2
  80fafc:	00000106 	br	80fb04 <write+0x40>
  80fb00:	0005883a 	mov	r2,zero
  80fb04:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80fb08:	e0bffb17 	ldw	r2,-20(fp)
  80fb0c:	10002126 	beq	r2,zero,80fb94 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80fb10:	e0bffb17 	ldw	r2,-20(fp)
  80fb14:	10800217 	ldw	r2,8(r2)
  80fb18:	108000cc 	andi	r2,r2,3
  80fb1c:	10001826 	beq	r2,zero,80fb80 <write+0xbc>
  80fb20:	e0bffb17 	ldw	r2,-20(fp)
  80fb24:	10800017 	ldw	r2,0(r2)
  80fb28:	10800617 	ldw	r2,24(r2)
  80fb2c:	10001426 	beq	r2,zero,80fb80 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80fb30:	e0bffb17 	ldw	r2,-20(fp)
  80fb34:	10800017 	ldw	r2,0(r2)
  80fb38:	10800617 	ldw	r2,24(r2)
  80fb3c:	e0ffff17 	ldw	r3,-4(fp)
  80fb40:	180d883a 	mov	r6,r3
  80fb44:	e17ffe17 	ldw	r5,-8(fp)
  80fb48:	e13ffb17 	ldw	r4,-20(fp)
  80fb4c:	103ee83a 	callr	r2
  80fb50:	e0bffc15 	stw	r2,-16(fp)
  80fb54:	e0bffc17 	ldw	r2,-16(fp)
  80fb58:	1000070e 	bge	r2,zero,80fb78 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80fb5c:	080fa880 	call	80fa88 <alt_get_errno>
  80fb60:	1007883a 	mov	r3,r2
  80fb64:	e0bffc17 	ldw	r2,-16(fp)
  80fb68:	0085c83a 	sub	r2,zero,r2
  80fb6c:	18800015 	stw	r2,0(r3)
        return -1;
  80fb70:	00bfffc4 	movi	r2,-1
  80fb74:	00000c06 	br	80fba8 <write+0xe4>
      }
      return rval;
  80fb78:	e0bffc17 	ldw	r2,-16(fp)
  80fb7c:	00000a06 	br	80fba8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80fb80:	080fa880 	call	80fa88 <alt_get_errno>
  80fb84:	1007883a 	mov	r3,r2
  80fb88:	00800344 	movi	r2,13
  80fb8c:	18800015 	stw	r2,0(r3)
  80fb90:	00000406 	br	80fba4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80fb94:	080fa880 	call	80fa88 <alt_get_errno>
  80fb98:	1007883a 	mov	r3,r2
  80fb9c:	00801444 	movi	r2,81
  80fba0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80fba4:	00bfffc4 	movi	r2,-1
}
  80fba8:	e037883a 	mov	sp,fp
  80fbac:	dfc00117 	ldw	ra,4(sp)
  80fbb0:	df000017 	ldw	fp,0(sp)
  80fbb4:	dec00204 	addi	sp,sp,8
  80fbb8:	f800283a 	ret

0080fbbc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80fbbc:	defffd04 	addi	sp,sp,-12
  80fbc0:	dfc00215 	stw	ra,8(sp)
  80fbc4:	df000115 	stw	fp,4(sp)
  80fbc8:	df000104 	addi	fp,sp,4
  80fbcc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80fbd0:	d1600904 	addi	r5,gp,-32732
  80fbd4:	e13fff17 	ldw	r4,-4(fp)
  80fbd8:	08120540 	call	812054 <alt_dev_llist_insert>
}
  80fbdc:	e037883a 	mov	sp,fp
  80fbe0:	dfc00117 	ldw	ra,4(sp)
  80fbe4:	df000017 	ldw	fp,0(sp)
  80fbe8:	dec00204 	addi	sp,sp,8
  80fbec:	f800283a 	ret

0080fbf0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80fbf0:	defffd04 	addi	sp,sp,-12
  80fbf4:	dfc00215 	stw	ra,8(sp)
  80fbf8:	df000115 	stw	fp,4(sp)
  80fbfc:	df000104 	addi	fp,sp,4
  80fc00:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80fc04:	08128380 	call	812838 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80fc08:	00800044 	movi	r2,1
  80fc0c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80fc10:	0001883a 	nop
  80fc14:	e037883a 	mov	sp,fp
  80fc18:	dfc00117 	ldw	ra,4(sp)
  80fc1c:	df000017 	ldw	fp,0(sp)
  80fc20:	dec00204 	addi	sp,sp,8
  80fc24:	f800283a 	ret

0080fc28 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80fc28:	defffe04 	addi	sp,sp,-8
  80fc2c:	dfc00115 	stw	ra,4(sp)
  80fc30:	df000015 	stw	fp,0(sp)
  80fc34:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80fc38:	01c0fa04 	movi	r7,1000
  80fc3c:	01800084 	movi	r6,2
  80fc40:	000b883a 	mov	r5,zero
  80fc44:	01004074 	movhi	r4,257
  80fc48:	21040004 	addi	r4,r4,4096
  80fc4c:	081167c0 	call	81167c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80fc50:	018000c4 	movi	r6,3
  80fc54:	000b883a 	mov	r5,zero
  80fc58:	01002074 	movhi	r4,129
  80fc5c:	210ff304 	addi	r4,r4,16332
  80fc60:	080fe240 	call	80fe24 <altera_avalon_jtag_uart_init>
  80fc64:	01002074 	movhi	r4,129
  80fc68:	210fe904 	addi	r4,r4,16292
  80fc6c:	080fbbc0 	call	80fbbc <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80fc70:	01002074 	movhi	r4,129
  80fc74:	21140b04 	addi	r4,r4,20524
  80fc78:	08114700 	call	811470 <altera_avalon_lcd_16207_init>
  80fc7c:	01002074 	movhi	r4,129
  80fc80:	21140104 	addi	r4,r4,20484
  80fc84:	080fbbc0 	call	80fbbc <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80fc88:	01800104 	movi	r6,4
  80fc8c:	000b883a 	mov	r5,zero
  80fc90:	01002074 	movhi	r4,129
  80fc94:	21145304 	addi	r4,r4,20812
  80fc98:	08118080 	call	811808 <altera_avalon_uart_init>
  80fc9c:	01002074 	movhi	r4,129
  80fca0:	21144904 	addi	r4,r4,20772
  80fca4:	080fbbc0 	call	80fbbc <alt_dev_reg>
}
  80fca8:	0001883a 	nop
  80fcac:	e037883a 	mov	sp,fp
  80fcb0:	dfc00117 	ldw	ra,4(sp)
  80fcb4:	df000017 	ldw	fp,0(sp)
  80fcb8:	dec00204 	addi	sp,sp,8
  80fcbc:	f800283a 	ret

0080fcc0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80fcc0:	defffa04 	addi	sp,sp,-24
  80fcc4:	dfc00515 	stw	ra,20(sp)
  80fcc8:	df000415 	stw	fp,16(sp)
  80fccc:	df000404 	addi	fp,sp,16
  80fcd0:	e13ffd15 	stw	r4,-12(fp)
  80fcd4:	e17ffe15 	stw	r5,-8(fp)
  80fcd8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80fcdc:	e0bffd17 	ldw	r2,-12(fp)
  80fce0:	10800017 	ldw	r2,0(r2)
  80fce4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80fce8:	e0bffc17 	ldw	r2,-16(fp)
  80fcec:	10c00a04 	addi	r3,r2,40
  80fcf0:	e0bffd17 	ldw	r2,-12(fp)
  80fcf4:	10800217 	ldw	r2,8(r2)
  80fcf8:	100f883a 	mov	r7,r2
  80fcfc:	e1bfff17 	ldw	r6,-4(fp)
  80fd00:	e17ffe17 	ldw	r5,-8(fp)
  80fd04:	1809883a 	mov	r4,r3
  80fd08:	08102e80 	call	8102e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80fd0c:	e037883a 	mov	sp,fp
  80fd10:	dfc00117 	ldw	ra,4(sp)
  80fd14:	df000017 	ldw	fp,0(sp)
  80fd18:	dec00204 	addi	sp,sp,8
  80fd1c:	f800283a 	ret

0080fd20 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80fd20:	defffa04 	addi	sp,sp,-24
  80fd24:	dfc00515 	stw	ra,20(sp)
  80fd28:	df000415 	stw	fp,16(sp)
  80fd2c:	df000404 	addi	fp,sp,16
  80fd30:	e13ffd15 	stw	r4,-12(fp)
  80fd34:	e17ffe15 	stw	r5,-8(fp)
  80fd38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80fd3c:	e0bffd17 	ldw	r2,-12(fp)
  80fd40:	10800017 	ldw	r2,0(r2)
  80fd44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80fd48:	e0bffc17 	ldw	r2,-16(fp)
  80fd4c:	10c00a04 	addi	r3,r2,40
  80fd50:	e0bffd17 	ldw	r2,-12(fp)
  80fd54:	10800217 	ldw	r2,8(r2)
  80fd58:	100f883a 	mov	r7,r2
  80fd5c:	e1bfff17 	ldw	r6,-4(fp)
  80fd60:	e17ffe17 	ldw	r5,-8(fp)
  80fd64:	1809883a 	mov	r4,r3
  80fd68:	08105040 	call	810504 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80fd6c:	e037883a 	mov	sp,fp
  80fd70:	dfc00117 	ldw	ra,4(sp)
  80fd74:	df000017 	ldw	fp,0(sp)
  80fd78:	dec00204 	addi	sp,sp,8
  80fd7c:	f800283a 	ret

0080fd80 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80fd80:	defffc04 	addi	sp,sp,-16
  80fd84:	dfc00315 	stw	ra,12(sp)
  80fd88:	df000215 	stw	fp,8(sp)
  80fd8c:	df000204 	addi	fp,sp,8
  80fd90:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80fd94:	e0bfff17 	ldw	r2,-4(fp)
  80fd98:	10800017 	ldw	r2,0(r2)
  80fd9c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80fda0:	e0bffe17 	ldw	r2,-8(fp)
  80fda4:	10c00a04 	addi	r3,r2,40
  80fda8:	e0bfff17 	ldw	r2,-4(fp)
  80fdac:	10800217 	ldw	r2,8(r2)
  80fdb0:	100b883a 	mov	r5,r2
  80fdb4:	1809883a 	mov	r4,r3
  80fdb8:	08101900 	call	810190 <altera_avalon_jtag_uart_close>
}
  80fdbc:	e037883a 	mov	sp,fp
  80fdc0:	dfc00117 	ldw	ra,4(sp)
  80fdc4:	df000017 	ldw	fp,0(sp)
  80fdc8:	dec00204 	addi	sp,sp,8
  80fdcc:	f800283a 	ret

0080fdd0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80fdd0:	defffa04 	addi	sp,sp,-24
  80fdd4:	dfc00515 	stw	ra,20(sp)
  80fdd8:	df000415 	stw	fp,16(sp)
  80fddc:	df000404 	addi	fp,sp,16
  80fde0:	e13ffd15 	stw	r4,-12(fp)
  80fde4:	e17ffe15 	stw	r5,-8(fp)
  80fde8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80fdec:	e0bffd17 	ldw	r2,-12(fp)
  80fdf0:	10800017 	ldw	r2,0(r2)
  80fdf4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80fdf8:	e0bffc17 	ldw	r2,-16(fp)
  80fdfc:	10800a04 	addi	r2,r2,40
  80fe00:	e1bfff17 	ldw	r6,-4(fp)
  80fe04:	e17ffe17 	ldw	r5,-8(fp)
  80fe08:	1009883a 	mov	r4,r2
  80fe0c:	08101f80 	call	8101f8 <altera_avalon_jtag_uart_ioctl>
}
  80fe10:	e037883a 	mov	sp,fp
  80fe14:	dfc00117 	ldw	ra,4(sp)
  80fe18:	df000017 	ldw	fp,0(sp)
  80fe1c:	dec00204 	addi	sp,sp,8
  80fe20:	f800283a 	ret

0080fe24 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80fe24:	defffa04 	addi	sp,sp,-24
  80fe28:	dfc00515 	stw	ra,20(sp)
  80fe2c:	df000415 	stw	fp,16(sp)
  80fe30:	df000404 	addi	fp,sp,16
  80fe34:	e13ffd15 	stw	r4,-12(fp)
  80fe38:	e17ffe15 	stw	r5,-8(fp)
  80fe3c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80fe40:	e0bffd17 	ldw	r2,-12(fp)
  80fe44:	00c00044 	movi	r3,1
  80fe48:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80fe4c:	e0bffd17 	ldw	r2,-12(fp)
  80fe50:	10800017 	ldw	r2,0(r2)
  80fe54:	10800104 	addi	r2,r2,4
  80fe58:	1007883a 	mov	r3,r2
  80fe5c:	e0bffd17 	ldw	r2,-12(fp)
  80fe60:	10800817 	ldw	r2,32(r2)
  80fe64:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80fe68:	e0bffe17 	ldw	r2,-8(fp)
  80fe6c:	e0ffff17 	ldw	r3,-4(fp)
  80fe70:	d8000015 	stw	zero,0(sp)
  80fe74:	e1fffd17 	ldw	r7,-12(fp)
  80fe78:	01802074 	movhi	r6,129
  80fe7c:	31bfb904 	addi	r6,r6,-284
  80fe80:	180b883a 	mov	r5,r3
  80fe84:	1009883a 	mov	r4,r2
  80fe88:	08124280 	call	812428 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80fe8c:	e0bffd17 	ldw	r2,-12(fp)
  80fe90:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80fe94:	e0bffd17 	ldw	r2,-12(fp)
  80fe98:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80fe9c:	d0e76c17 	ldw	r3,-25168(gp)
  80fea0:	e1fffd17 	ldw	r7,-12(fp)
  80fea4:	01802074 	movhi	r6,129
  80fea8:	31803c04 	addi	r6,r6,240
  80feac:	180b883a 	mov	r5,r3
  80feb0:	1009883a 	mov	r4,r2
  80feb4:	080ebd40 	call	80ebd4 <alt_alarm_start>
  80feb8:	1000040e 	bge	r2,zero,80fecc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80febc:	e0fffd17 	ldw	r3,-12(fp)
  80fec0:	00a00034 	movhi	r2,32768
  80fec4:	10bfffc4 	addi	r2,r2,-1
  80fec8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80fecc:	0001883a 	nop
  80fed0:	e037883a 	mov	sp,fp
  80fed4:	dfc00117 	ldw	ra,4(sp)
  80fed8:	df000017 	ldw	fp,0(sp)
  80fedc:	dec00204 	addi	sp,sp,8
  80fee0:	f800283a 	ret

0080fee4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80fee4:	defff804 	addi	sp,sp,-32
  80fee8:	df000715 	stw	fp,28(sp)
  80feec:	df000704 	addi	fp,sp,28
  80fef0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80fef4:	e0bfff17 	ldw	r2,-4(fp)
  80fef8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80fefc:	e0bffb17 	ldw	r2,-20(fp)
  80ff00:	10800017 	ldw	r2,0(r2)
  80ff04:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ff08:	e0bffc17 	ldw	r2,-16(fp)
  80ff0c:	10800104 	addi	r2,r2,4
  80ff10:	10800037 	ldwio	r2,0(r2)
  80ff14:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80ff18:	e0bffd17 	ldw	r2,-12(fp)
  80ff1c:	1080c00c 	andi	r2,r2,768
  80ff20:	10006d26 	beq	r2,zero,8100d8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80ff24:	e0bffd17 	ldw	r2,-12(fp)
  80ff28:	1080400c 	andi	r2,r2,256
  80ff2c:	10003526 	beq	r2,zero,810004 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80ff30:	00800074 	movhi	r2,1
  80ff34:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ff38:	e0bffb17 	ldw	r2,-20(fp)
  80ff3c:	10800a17 	ldw	r2,40(r2)
  80ff40:	10800044 	addi	r2,r2,1
  80ff44:	1081ffcc 	andi	r2,r2,2047
  80ff48:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80ff4c:	e0bffb17 	ldw	r2,-20(fp)
  80ff50:	10c00b17 	ldw	r3,44(r2)
  80ff54:	e0bffe17 	ldw	r2,-8(fp)
  80ff58:	18801526 	beq	r3,r2,80ffb0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80ff5c:	e0bffc17 	ldw	r2,-16(fp)
  80ff60:	10800037 	ldwio	r2,0(r2)
  80ff64:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80ff68:	e0bff917 	ldw	r2,-28(fp)
  80ff6c:	10a0000c 	andi	r2,r2,32768
  80ff70:	10001126 	beq	r2,zero,80ffb8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80ff74:	e0bffb17 	ldw	r2,-20(fp)
  80ff78:	10800a17 	ldw	r2,40(r2)
  80ff7c:	e0fff917 	ldw	r3,-28(fp)
  80ff80:	1809883a 	mov	r4,r3
  80ff84:	e0fffb17 	ldw	r3,-20(fp)
  80ff88:	1885883a 	add	r2,r3,r2
  80ff8c:	10800e04 	addi	r2,r2,56
  80ff90:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ff94:	e0bffb17 	ldw	r2,-20(fp)
  80ff98:	10800a17 	ldw	r2,40(r2)
  80ff9c:	10800044 	addi	r2,r2,1
  80ffa0:	10c1ffcc 	andi	r3,r2,2047
  80ffa4:	e0bffb17 	ldw	r2,-20(fp)
  80ffa8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80ffac:	003fe206 	br	80ff38 <__alt_mem_onchip_mem+0xff807f38>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80ffb0:	0001883a 	nop
  80ffb4:	00000106 	br	80ffbc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80ffb8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80ffbc:	e0bff917 	ldw	r2,-28(fp)
  80ffc0:	10bfffec 	andhi	r2,r2,65535
  80ffc4:	10000f26 	beq	r2,zero,810004 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ffc8:	e0bffb17 	ldw	r2,-20(fp)
  80ffcc:	10c00817 	ldw	r3,32(r2)
  80ffd0:	00bfff84 	movi	r2,-2
  80ffd4:	1886703a 	and	r3,r3,r2
  80ffd8:	e0bffb17 	ldw	r2,-20(fp)
  80ffdc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80ffe0:	e0bffc17 	ldw	r2,-16(fp)
  80ffe4:	10800104 	addi	r2,r2,4
  80ffe8:	1007883a 	mov	r3,r2
  80ffec:	e0bffb17 	ldw	r2,-20(fp)
  80fff0:	10800817 	ldw	r2,32(r2)
  80fff4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80fff8:	e0bffc17 	ldw	r2,-16(fp)
  80fffc:	10800104 	addi	r2,r2,4
  810000:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  810004:	e0bffd17 	ldw	r2,-12(fp)
  810008:	1080800c 	andi	r2,r2,512
  81000c:	103fbe26 	beq	r2,zero,80ff08 <__alt_mem_onchip_mem+0xff807f08>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  810010:	e0bffd17 	ldw	r2,-12(fp)
  810014:	1004d43a 	srli	r2,r2,16
  810018:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  81001c:	00001406 	br	810070 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  810020:	e0bffc17 	ldw	r2,-16(fp)
  810024:	e0fffb17 	ldw	r3,-20(fp)
  810028:	18c00d17 	ldw	r3,52(r3)
  81002c:	e13ffb17 	ldw	r4,-20(fp)
  810030:	20c7883a 	add	r3,r4,r3
  810034:	18c20e04 	addi	r3,r3,2104
  810038:	18c00003 	ldbu	r3,0(r3)
  81003c:	18c03fcc 	andi	r3,r3,255
  810040:	18c0201c 	xori	r3,r3,128
  810044:	18ffe004 	addi	r3,r3,-128
  810048:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81004c:	e0bffb17 	ldw	r2,-20(fp)
  810050:	10800d17 	ldw	r2,52(r2)
  810054:	10800044 	addi	r2,r2,1
  810058:	10c1ffcc 	andi	r3,r2,2047
  81005c:	e0bffb17 	ldw	r2,-20(fp)
  810060:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  810064:	e0bffa17 	ldw	r2,-24(fp)
  810068:	10bfffc4 	addi	r2,r2,-1
  81006c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  810070:	e0bffa17 	ldw	r2,-24(fp)
  810074:	10000526 	beq	r2,zero,81008c <altera_avalon_jtag_uart_irq+0x1a8>
  810078:	e0bffb17 	ldw	r2,-20(fp)
  81007c:	10c00d17 	ldw	r3,52(r2)
  810080:	e0bffb17 	ldw	r2,-20(fp)
  810084:	10800c17 	ldw	r2,48(r2)
  810088:	18bfe51e 	bne	r3,r2,810020 <__alt_mem_onchip_mem+0xff808020>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  81008c:	e0bffa17 	ldw	r2,-24(fp)
  810090:	103f9d26 	beq	r2,zero,80ff08 <__alt_mem_onchip_mem+0xff807f08>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810094:	e0bffb17 	ldw	r2,-20(fp)
  810098:	10c00817 	ldw	r3,32(r2)
  81009c:	00bfff44 	movi	r2,-3
  8100a0:	1886703a 	and	r3,r3,r2
  8100a4:	e0bffb17 	ldw	r2,-20(fp)
  8100a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8100ac:	e0bffb17 	ldw	r2,-20(fp)
  8100b0:	10800017 	ldw	r2,0(r2)
  8100b4:	10800104 	addi	r2,r2,4
  8100b8:	1007883a 	mov	r3,r2
  8100bc:	e0bffb17 	ldw	r2,-20(fp)
  8100c0:	10800817 	ldw	r2,32(r2)
  8100c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8100c8:	e0bffc17 	ldw	r2,-16(fp)
  8100cc:	10800104 	addi	r2,r2,4
  8100d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  8100d4:	003f8c06 	br	80ff08 <__alt_mem_onchip_mem+0xff807f08>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  8100d8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  8100dc:	0001883a 	nop
  8100e0:	e037883a 	mov	sp,fp
  8100e4:	df000017 	ldw	fp,0(sp)
  8100e8:	dec00104 	addi	sp,sp,4
  8100ec:	f800283a 	ret

008100f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8100f0:	defff804 	addi	sp,sp,-32
  8100f4:	df000715 	stw	fp,28(sp)
  8100f8:	df000704 	addi	fp,sp,28
  8100fc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  810100:	e0bffb17 	ldw	r2,-20(fp)
  810104:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  810108:	e0bff917 	ldw	r2,-28(fp)
  81010c:	10800017 	ldw	r2,0(r2)
  810110:	10800104 	addi	r2,r2,4
  810114:	10800037 	ldwio	r2,0(r2)
  810118:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  81011c:	e0bffa17 	ldw	r2,-24(fp)
  810120:	1081000c 	andi	r2,r2,1024
  810124:	10000b26 	beq	r2,zero,810154 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  810128:	e0bff917 	ldw	r2,-28(fp)
  81012c:	10800017 	ldw	r2,0(r2)
  810130:	10800104 	addi	r2,r2,4
  810134:	1007883a 	mov	r3,r2
  810138:	e0bff917 	ldw	r2,-28(fp)
  81013c:	10800817 	ldw	r2,32(r2)
  810140:	10810014 	ori	r2,r2,1024
  810144:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  810148:	e0bff917 	ldw	r2,-28(fp)
  81014c:	10000915 	stw	zero,36(r2)
  810150:	00000a06 	br	81017c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  810154:	e0bff917 	ldw	r2,-28(fp)
  810158:	10c00917 	ldw	r3,36(r2)
  81015c:	00a00034 	movhi	r2,32768
  810160:	10bfff04 	addi	r2,r2,-4
  810164:	10c00536 	bltu	r2,r3,81017c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  810168:	e0bff917 	ldw	r2,-28(fp)
  81016c:	10800917 	ldw	r2,36(r2)
  810170:	10c00044 	addi	r3,r2,1
  810174:	e0bff917 	ldw	r2,-28(fp)
  810178:	10c00915 	stw	r3,36(r2)
  81017c:	d0a76c17 	ldw	r2,-25168(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  810180:	e037883a 	mov	sp,fp
  810184:	df000017 	ldw	fp,0(sp)
  810188:	dec00104 	addi	sp,sp,4
  81018c:	f800283a 	ret

00810190 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  810190:	defffd04 	addi	sp,sp,-12
  810194:	df000215 	stw	fp,8(sp)
  810198:	df000204 	addi	fp,sp,8
  81019c:	e13ffe15 	stw	r4,-8(fp)
  8101a0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8101a4:	00000506 	br	8101bc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8101a8:	e0bfff17 	ldw	r2,-4(fp)
  8101ac:	1090000c 	andi	r2,r2,16384
  8101b0:	10000226 	beq	r2,zero,8101bc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8101b4:	00bffd44 	movi	r2,-11
  8101b8:	00000b06 	br	8101e8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8101bc:	e0bffe17 	ldw	r2,-8(fp)
  8101c0:	10c00d17 	ldw	r3,52(r2)
  8101c4:	e0bffe17 	ldw	r2,-8(fp)
  8101c8:	10800c17 	ldw	r2,48(r2)
  8101cc:	18800526 	beq	r3,r2,8101e4 <altera_avalon_jtag_uart_close+0x54>
  8101d0:	e0bffe17 	ldw	r2,-8(fp)
  8101d4:	10c00917 	ldw	r3,36(r2)
  8101d8:	e0bffe17 	ldw	r2,-8(fp)
  8101dc:	10800117 	ldw	r2,4(r2)
  8101e0:	18bff136 	bltu	r3,r2,8101a8 <__alt_mem_onchip_mem+0xff8081a8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8101e4:	0005883a 	mov	r2,zero
}
  8101e8:	e037883a 	mov	sp,fp
  8101ec:	df000017 	ldw	fp,0(sp)
  8101f0:	dec00104 	addi	sp,sp,4
  8101f4:	f800283a 	ret

008101f8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8101f8:	defffa04 	addi	sp,sp,-24
  8101fc:	df000515 	stw	fp,20(sp)
  810200:	df000504 	addi	fp,sp,20
  810204:	e13ffd15 	stw	r4,-12(fp)
  810208:	e17ffe15 	stw	r5,-8(fp)
  81020c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  810210:	00bff9c4 	movi	r2,-25
  810214:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  810218:	e0bffe17 	ldw	r2,-8(fp)
  81021c:	10da8060 	cmpeqi	r3,r2,27137
  810220:	1800031e 	bne	r3,zero,810230 <altera_avalon_jtag_uart_ioctl+0x38>
  810224:	109a80a0 	cmpeqi	r2,r2,27138
  810228:	1000181e 	bne	r2,zero,81028c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  81022c:	00002906 	br	8102d4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  810230:	e0bffd17 	ldw	r2,-12(fp)
  810234:	10c00117 	ldw	r3,4(r2)
  810238:	00a00034 	movhi	r2,32768
  81023c:	10bfffc4 	addi	r2,r2,-1
  810240:	18802126 	beq	r3,r2,8102c8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  810244:	e0bfff17 	ldw	r2,-4(fp)
  810248:	10800017 	ldw	r2,0(r2)
  81024c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  810250:	e0bffc17 	ldw	r2,-16(fp)
  810254:	10800090 	cmplti	r2,r2,2
  810258:	1000061e 	bne	r2,zero,810274 <altera_avalon_jtag_uart_ioctl+0x7c>
  81025c:	e0fffc17 	ldw	r3,-16(fp)
  810260:	00a00034 	movhi	r2,32768
  810264:	10bfffc4 	addi	r2,r2,-1
  810268:	18800226 	beq	r3,r2,810274 <altera_avalon_jtag_uart_ioctl+0x7c>
  81026c:	e0bffc17 	ldw	r2,-16(fp)
  810270:	00000206 	br	81027c <altera_avalon_jtag_uart_ioctl+0x84>
  810274:	00a00034 	movhi	r2,32768
  810278:	10bfff84 	addi	r2,r2,-2
  81027c:	e0fffd17 	ldw	r3,-12(fp)
  810280:	18800115 	stw	r2,4(r3)
      rc = 0;
  810284:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  810288:	00000f06 	br	8102c8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  81028c:	e0bffd17 	ldw	r2,-12(fp)
  810290:	10c00117 	ldw	r3,4(r2)
  810294:	00a00034 	movhi	r2,32768
  810298:	10bfffc4 	addi	r2,r2,-1
  81029c:	18800c26 	beq	r3,r2,8102d0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8102a0:	e0bffd17 	ldw	r2,-12(fp)
  8102a4:	10c00917 	ldw	r3,36(r2)
  8102a8:	e0bffd17 	ldw	r2,-12(fp)
  8102ac:	10800117 	ldw	r2,4(r2)
  8102b0:	1885803a 	cmpltu	r2,r3,r2
  8102b4:	10c03fcc 	andi	r3,r2,255
  8102b8:	e0bfff17 	ldw	r2,-4(fp)
  8102bc:	10c00015 	stw	r3,0(r2)
      rc = 0;
  8102c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8102c4:	00000206 	br	8102d0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  8102c8:	0001883a 	nop
  8102cc:	00000106 	br	8102d4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  8102d0:	0001883a 	nop

  default:
    break;
  }

  return rc;
  8102d4:	e0bffb17 	ldw	r2,-20(fp)
}
  8102d8:	e037883a 	mov	sp,fp
  8102dc:	df000017 	ldw	fp,0(sp)
  8102e0:	dec00104 	addi	sp,sp,4
  8102e4:	f800283a 	ret

008102e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8102e8:	defff304 	addi	sp,sp,-52
  8102ec:	dfc00c15 	stw	ra,48(sp)
  8102f0:	df000b15 	stw	fp,44(sp)
  8102f4:	df000b04 	addi	fp,sp,44
  8102f8:	e13ffc15 	stw	r4,-16(fp)
  8102fc:	e17ffd15 	stw	r5,-12(fp)
  810300:	e1bffe15 	stw	r6,-8(fp)
  810304:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  810308:	e0bffd17 	ldw	r2,-12(fp)
  81030c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  810310:	00004706 	br	810430 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  810314:	e0bffc17 	ldw	r2,-16(fp)
  810318:	10800a17 	ldw	r2,40(r2)
  81031c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  810320:	e0bffc17 	ldw	r2,-16(fp)
  810324:	10800b17 	ldw	r2,44(r2)
  810328:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  81032c:	e0fff717 	ldw	r3,-36(fp)
  810330:	e0bff817 	ldw	r2,-32(fp)
  810334:	18800536 	bltu	r3,r2,81034c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  810338:	e0fff717 	ldw	r3,-36(fp)
  81033c:	e0bff817 	ldw	r2,-32(fp)
  810340:	1885c83a 	sub	r2,r3,r2
  810344:	e0bff615 	stw	r2,-40(fp)
  810348:	00000406 	br	81035c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  81034c:	00c20004 	movi	r3,2048
  810350:	e0bff817 	ldw	r2,-32(fp)
  810354:	1885c83a 	sub	r2,r3,r2
  810358:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  81035c:	e0bff617 	ldw	r2,-40(fp)
  810360:	10001e26 	beq	r2,zero,8103dc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  810364:	e0fffe17 	ldw	r3,-8(fp)
  810368:	e0bff617 	ldw	r2,-40(fp)
  81036c:	1880022e 	bgeu	r3,r2,810378 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  810370:	e0bffe17 	ldw	r2,-8(fp)
  810374:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  810378:	e0bffc17 	ldw	r2,-16(fp)
  81037c:	10c00e04 	addi	r3,r2,56
  810380:	e0bff817 	ldw	r2,-32(fp)
  810384:	1885883a 	add	r2,r3,r2
  810388:	e1bff617 	ldw	r6,-40(fp)
  81038c:	100b883a 	mov	r5,r2
  810390:	e13ff517 	ldw	r4,-44(fp)
  810394:	08085740 	call	808574 <memcpy>
      ptr   += n;
  810398:	e0fff517 	ldw	r3,-44(fp)
  81039c:	e0bff617 	ldw	r2,-40(fp)
  8103a0:	1885883a 	add	r2,r3,r2
  8103a4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  8103a8:	e0fffe17 	ldw	r3,-8(fp)
  8103ac:	e0bff617 	ldw	r2,-40(fp)
  8103b0:	1885c83a 	sub	r2,r3,r2
  8103b4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8103b8:	e0fff817 	ldw	r3,-32(fp)
  8103bc:	e0bff617 	ldw	r2,-40(fp)
  8103c0:	1885883a 	add	r2,r3,r2
  8103c4:	10c1ffcc 	andi	r3,r2,2047
  8103c8:	e0bffc17 	ldw	r2,-16(fp)
  8103cc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8103d0:	e0bffe17 	ldw	r2,-8(fp)
  8103d4:	00bfcf16 	blt	zero,r2,810314 <__alt_mem_onchip_mem+0xff808314>
  8103d8:	00000106 	br	8103e0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  8103dc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  8103e0:	e0fff517 	ldw	r3,-44(fp)
  8103e4:	e0bffd17 	ldw	r2,-12(fp)
  8103e8:	1880141e 	bne	r3,r2,81043c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8103ec:	e0bfff17 	ldw	r2,-4(fp)
  8103f0:	1090000c 	andi	r2,r2,16384
  8103f4:	1000131e 	bne	r2,zero,810444 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8103f8:	0001883a 	nop
  8103fc:	e0bffc17 	ldw	r2,-16(fp)
  810400:	10c00a17 	ldw	r3,40(r2)
  810404:	e0bff717 	ldw	r2,-36(fp)
  810408:	1880051e 	bne	r3,r2,810420 <altera_avalon_jtag_uart_read+0x138>
  81040c:	e0bffc17 	ldw	r2,-16(fp)
  810410:	10c00917 	ldw	r3,36(r2)
  810414:	e0bffc17 	ldw	r2,-16(fp)
  810418:	10800117 	ldw	r2,4(r2)
  81041c:	18bff736 	bltu	r3,r2,8103fc <__alt_mem_onchip_mem+0xff8083fc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  810420:	e0bffc17 	ldw	r2,-16(fp)
  810424:	10c00a17 	ldw	r3,40(r2)
  810428:	e0bff717 	ldw	r2,-36(fp)
  81042c:	18800726 	beq	r3,r2,81044c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  810430:	e0bffe17 	ldw	r2,-8(fp)
  810434:	00bfb716 	blt	zero,r2,810314 <__alt_mem_onchip_mem+0xff808314>
  810438:	00000506 	br	810450 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  81043c:	0001883a 	nop
  810440:	00000306 	br	810450 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  810444:	0001883a 	nop
  810448:	00000106 	br	810450 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  81044c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  810450:	e0fff517 	ldw	r3,-44(fp)
  810454:	e0bffd17 	ldw	r2,-12(fp)
  810458:	18801826 	beq	r3,r2,8104bc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81045c:	0005303a 	rdctl	r2,status
  810460:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810464:	e0fffb17 	ldw	r3,-20(fp)
  810468:	00bfff84 	movi	r2,-2
  81046c:	1884703a 	and	r2,r3,r2
  810470:	1001703a 	wrctl	status,r2
  
  return context;
  810474:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  810478:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81047c:	e0bffc17 	ldw	r2,-16(fp)
  810480:	10800817 	ldw	r2,32(r2)
  810484:	10c00054 	ori	r3,r2,1
  810488:	e0bffc17 	ldw	r2,-16(fp)
  81048c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810490:	e0bffc17 	ldw	r2,-16(fp)
  810494:	10800017 	ldw	r2,0(r2)
  810498:	10800104 	addi	r2,r2,4
  81049c:	1007883a 	mov	r3,r2
  8104a0:	e0bffc17 	ldw	r2,-16(fp)
  8104a4:	10800817 	ldw	r2,32(r2)
  8104a8:	18800035 	stwio	r2,0(r3)
  8104ac:	e0bffa17 	ldw	r2,-24(fp)
  8104b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8104b4:	e0bff917 	ldw	r2,-28(fp)
  8104b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8104bc:	e0fff517 	ldw	r3,-44(fp)
  8104c0:	e0bffd17 	ldw	r2,-12(fp)
  8104c4:	18800426 	beq	r3,r2,8104d8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  8104c8:	e0fff517 	ldw	r3,-44(fp)
  8104cc:	e0bffd17 	ldw	r2,-12(fp)
  8104d0:	1885c83a 	sub	r2,r3,r2
  8104d4:	00000606 	br	8104f0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  8104d8:	e0bfff17 	ldw	r2,-4(fp)
  8104dc:	1090000c 	andi	r2,r2,16384
  8104e0:	10000226 	beq	r2,zero,8104ec <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8104e4:	00bffd44 	movi	r2,-11
  8104e8:	00000106 	br	8104f0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  8104ec:	00bffec4 	movi	r2,-5
}
  8104f0:	e037883a 	mov	sp,fp
  8104f4:	dfc00117 	ldw	ra,4(sp)
  8104f8:	df000017 	ldw	fp,0(sp)
  8104fc:	dec00204 	addi	sp,sp,8
  810500:	f800283a 	ret

00810504 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  810504:	defff304 	addi	sp,sp,-52
  810508:	dfc00c15 	stw	ra,48(sp)
  81050c:	df000b15 	stw	fp,44(sp)
  810510:	df000b04 	addi	fp,sp,44
  810514:	e13ffc15 	stw	r4,-16(fp)
  810518:	e17ffd15 	stw	r5,-12(fp)
  81051c:	e1bffe15 	stw	r6,-8(fp)
  810520:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  810524:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  810528:	e0bffd17 	ldw	r2,-12(fp)
  81052c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  810530:	00003706 	br	810610 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  810534:	e0bffc17 	ldw	r2,-16(fp)
  810538:	10800c17 	ldw	r2,48(r2)
  81053c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  810540:	e0bffc17 	ldw	r2,-16(fp)
  810544:	10800d17 	ldw	r2,52(r2)
  810548:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  81054c:	e0fff917 	ldw	r3,-28(fp)
  810550:	e0bff517 	ldw	r2,-44(fp)
  810554:	1880062e 	bgeu	r3,r2,810570 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  810558:	e0fff517 	ldw	r3,-44(fp)
  81055c:	e0bff917 	ldw	r2,-28(fp)
  810560:	1885c83a 	sub	r2,r3,r2
  810564:	10bfffc4 	addi	r2,r2,-1
  810568:	e0bff615 	stw	r2,-40(fp)
  81056c:	00000b06 	br	81059c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  810570:	e0bff517 	ldw	r2,-44(fp)
  810574:	10000526 	beq	r2,zero,81058c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  810578:	00c20004 	movi	r3,2048
  81057c:	e0bff917 	ldw	r2,-28(fp)
  810580:	1885c83a 	sub	r2,r3,r2
  810584:	e0bff615 	stw	r2,-40(fp)
  810588:	00000406 	br	81059c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  81058c:	00c1ffc4 	movi	r3,2047
  810590:	e0bff917 	ldw	r2,-28(fp)
  810594:	1885c83a 	sub	r2,r3,r2
  810598:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  81059c:	e0bff617 	ldw	r2,-40(fp)
  8105a0:	10001e26 	beq	r2,zero,81061c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  8105a4:	e0fffe17 	ldw	r3,-8(fp)
  8105a8:	e0bff617 	ldw	r2,-40(fp)
  8105ac:	1880022e 	bgeu	r3,r2,8105b8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  8105b0:	e0bffe17 	ldw	r2,-8(fp)
  8105b4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8105b8:	e0bffc17 	ldw	r2,-16(fp)
  8105bc:	10c20e04 	addi	r3,r2,2104
  8105c0:	e0bff917 	ldw	r2,-28(fp)
  8105c4:	1885883a 	add	r2,r3,r2
  8105c8:	e1bff617 	ldw	r6,-40(fp)
  8105cc:	e17ffd17 	ldw	r5,-12(fp)
  8105d0:	1009883a 	mov	r4,r2
  8105d4:	08085740 	call	808574 <memcpy>
      ptr   += n;
  8105d8:	e0fffd17 	ldw	r3,-12(fp)
  8105dc:	e0bff617 	ldw	r2,-40(fp)
  8105e0:	1885883a 	add	r2,r3,r2
  8105e4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  8105e8:	e0fffe17 	ldw	r3,-8(fp)
  8105ec:	e0bff617 	ldw	r2,-40(fp)
  8105f0:	1885c83a 	sub	r2,r3,r2
  8105f4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8105f8:	e0fff917 	ldw	r3,-28(fp)
  8105fc:	e0bff617 	ldw	r2,-40(fp)
  810600:	1885883a 	add	r2,r3,r2
  810604:	10c1ffcc 	andi	r3,r2,2047
  810608:	e0bffc17 	ldw	r2,-16(fp)
  81060c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  810610:	e0bffe17 	ldw	r2,-8(fp)
  810614:	00bfc716 	blt	zero,r2,810534 <__alt_mem_onchip_mem+0xff808534>
  810618:	00000106 	br	810620 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  81061c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810620:	0005303a 	rdctl	r2,status
  810624:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810628:	e0fffb17 	ldw	r3,-20(fp)
  81062c:	00bfff84 	movi	r2,-2
  810630:	1884703a 	and	r2,r3,r2
  810634:	1001703a 	wrctl	status,r2
  
  return context;
  810638:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  81063c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810640:	e0bffc17 	ldw	r2,-16(fp)
  810644:	10800817 	ldw	r2,32(r2)
  810648:	10c00094 	ori	r3,r2,2
  81064c:	e0bffc17 	ldw	r2,-16(fp)
  810650:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810654:	e0bffc17 	ldw	r2,-16(fp)
  810658:	10800017 	ldw	r2,0(r2)
  81065c:	10800104 	addi	r2,r2,4
  810660:	1007883a 	mov	r3,r2
  810664:	e0bffc17 	ldw	r2,-16(fp)
  810668:	10800817 	ldw	r2,32(r2)
  81066c:	18800035 	stwio	r2,0(r3)
  810670:	e0bffa17 	ldw	r2,-24(fp)
  810674:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810678:	e0bff817 	ldw	r2,-32(fp)
  81067c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  810680:	e0bffe17 	ldw	r2,-8(fp)
  810684:	0080100e 	bge	zero,r2,8106c8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  810688:	e0bfff17 	ldw	r2,-4(fp)
  81068c:	1090000c 	andi	r2,r2,16384
  810690:	1000101e 	bne	r2,zero,8106d4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  810694:	0001883a 	nop
  810698:	e0bffc17 	ldw	r2,-16(fp)
  81069c:	10c00d17 	ldw	r3,52(r2)
  8106a0:	e0bff517 	ldw	r2,-44(fp)
  8106a4:	1880051e 	bne	r3,r2,8106bc <altera_avalon_jtag_uart_write+0x1b8>
  8106a8:	e0bffc17 	ldw	r2,-16(fp)
  8106ac:	10c00917 	ldw	r3,36(r2)
  8106b0:	e0bffc17 	ldw	r2,-16(fp)
  8106b4:	10800117 	ldw	r2,4(r2)
  8106b8:	18bff736 	bltu	r3,r2,810698 <__alt_mem_onchip_mem+0xff808698>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  8106bc:	e0bffc17 	ldw	r2,-16(fp)
  8106c0:	10800917 	ldw	r2,36(r2)
  8106c4:	1000051e 	bne	r2,zero,8106dc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  8106c8:	e0bffe17 	ldw	r2,-8(fp)
  8106cc:	00bfd016 	blt	zero,r2,810610 <__alt_mem_onchip_mem+0xff808610>
  8106d0:	00000306 	br	8106e0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  8106d4:	0001883a 	nop
  8106d8:	00000106 	br	8106e0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  8106dc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8106e0:	e0fffd17 	ldw	r3,-12(fp)
  8106e4:	e0bff717 	ldw	r2,-36(fp)
  8106e8:	18800426 	beq	r3,r2,8106fc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  8106ec:	e0fffd17 	ldw	r3,-12(fp)
  8106f0:	e0bff717 	ldw	r2,-36(fp)
  8106f4:	1885c83a 	sub	r2,r3,r2
  8106f8:	00000606 	br	810714 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  8106fc:	e0bfff17 	ldw	r2,-4(fp)
  810700:	1090000c 	andi	r2,r2,16384
  810704:	10000226 	beq	r2,zero,810710 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  810708:	00bffd44 	movi	r2,-11
  81070c:	00000106 	br	810714 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  810710:	00bffec4 	movi	r2,-5
}
  810714:	e037883a 	mov	sp,fp
  810718:	dfc00117 	ldw	ra,4(sp)
  81071c:	df000017 	ldw	fp,0(sp)
  810720:	dec00204 	addi	sp,sp,8
  810724:	f800283a 	ret

00810728 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  810728:	defffa04 	addi	sp,sp,-24
  81072c:	dfc00515 	stw	ra,20(sp)
  810730:	df000415 	stw	fp,16(sp)
  810734:	df000404 	addi	fp,sp,16
  810738:	e13ffe15 	stw	r4,-8(fp)
  81073c:	2805883a 	mov	r2,r5
  810740:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  810744:	e0bffe17 	ldw	r2,-8(fp)
  810748:	10800017 	ldw	r2,0(r2)
  81074c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  810750:	008003f4 	movhi	r2,15
  810754:	10909004 	addi	r2,r2,16960
  810758:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  81075c:	e0bffe17 	ldw	r2,-8(fp)
  810760:	10800803 	ldbu	r2,32(r2)
  810764:	10803fcc 	andi	r2,r2,255
  810768:	1080201c 	xori	r2,r2,128
  81076c:	10bfe004 	addi	r2,r2,-128
  810770:	1000151e 	bne	r2,zero,8107c8 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810774:	00000906 	br	81079c <lcd_write_command+0x74>
    if (--i == 0)
  810778:	e0bffc17 	ldw	r2,-16(fp)
  81077c:	10bfffc4 	addi	r2,r2,-1
  810780:	e0bffc15 	stw	r2,-16(fp)
  810784:	e0bffc17 	ldw	r2,-16(fp)
  810788:	1000041e 	bne	r2,zero,81079c <lcd_write_command+0x74>
    {
      sp->broken = 1;
  81078c:	e0bffe17 	ldw	r2,-8(fp)
  810790:	00c00044 	movi	r3,1
  810794:	10c00805 	stb	r3,32(r2)
      return;
  810798:	00000c06 	br	8107cc <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81079c:	e0bffd17 	ldw	r2,-12(fp)
  8107a0:	10800104 	addi	r2,r2,4
  8107a4:	10800037 	ldwio	r2,0(r2)
  8107a8:	1080200c 	andi	r2,r2,128
  8107ac:	103ff21e 	bne	r2,zero,810778 <__alt_mem_onchip_mem+0xff808778>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8107b0:	01001904 	movi	r4,100
  8107b4:	08128080 	call	812808 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  8107b8:	e0bffd17 	ldw	r2,-12(fp)
  8107bc:	e0ffff03 	ldbu	r3,-4(fp)
  8107c0:	10c00035 	stwio	r3,0(r2)
  8107c4:	00000106 	br	8107cc <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8107c8:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  8107cc:	e037883a 	mov	sp,fp
  8107d0:	dfc00117 	ldw	ra,4(sp)
  8107d4:	df000017 	ldw	fp,0(sp)
  8107d8:	dec00204 	addi	sp,sp,8
  8107dc:	f800283a 	ret

008107e0 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8107e0:	defffa04 	addi	sp,sp,-24
  8107e4:	dfc00515 	stw	ra,20(sp)
  8107e8:	df000415 	stw	fp,16(sp)
  8107ec:	df000404 	addi	fp,sp,16
  8107f0:	e13ffe15 	stw	r4,-8(fp)
  8107f4:	2805883a 	mov	r2,r5
  8107f8:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8107fc:	e0bffe17 	ldw	r2,-8(fp)
  810800:	10800017 	ldw	r2,0(r2)
  810804:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  810808:	008003f4 	movhi	r2,15
  81080c:	10909004 	addi	r2,r2,16960
  810810:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  810814:	e0bffe17 	ldw	r2,-8(fp)
  810818:	10800803 	ldbu	r2,32(r2)
  81081c:	10803fcc 	andi	r2,r2,255
  810820:	1080201c 	xori	r2,r2,128
  810824:	10bfe004 	addi	r2,r2,-128
  810828:	10001d1e 	bne	r2,zero,8108a0 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81082c:	00000906 	br	810854 <lcd_write_data+0x74>
    if (--i == 0)
  810830:	e0bffc17 	ldw	r2,-16(fp)
  810834:	10bfffc4 	addi	r2,r2,-1
  810838:	e0bffc15 	stw	r2,-16(fp)
  81083c:	e0bffc17 	ldw	r2,-16(fp)
  810840:	1000041e 	bne	r2,zero,810854 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  810844:	e0bffe17 	ldw	r2,-8(fp)
  810848:	00c00044 	movi	r3,1
  81084c:	10c00805 	stb	r3,32(r2)
      return;
  810850:	00001406 	br	8108a4 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810854:	e0bffd17 	ldw	r2,-12(fp)
  810858:	10800104 	addi	r2,r2,4
  81085c:	10800037 	ldwio	r2,0(r2)
  810860:	1080200c 	andi	r2,r2,128
  810864:	103ff21e 	bne	r2,zero,810830 <__alt_mem_onchip_mem+0xff808830>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  810868:	01001904 	movi	r4,100
  81086c:	08128080 	call	812808 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  810870:	e0bffd17 	ldw	r2,-12(fp)
  810874:	10800204 	addi	r2,r2,8
  810878:	1007883a 	mov	r3,r2
  81087c:	e0bfff03 	ldbu	r2,-4(fp)
  810880:	18800035 	stwio	r2,0(r3)

  sp->address++;
  810884:	e0bffe17 	ldw	r2,-8(fp)
  810888:	108008c3 	ldbu	r2,35(r2)
  81088c:	10800044 	addi	r2,r2,1
  810890:	1007883a 	mov	r3,r2
  810894:	e0bffe17 	ldw	r2,-8(fp)
  810898:	10c008c5 	stb	r3,35(r2)
  81089c:	00000106 	br	8108a4 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8108a0:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  8108a4:	e037883a 	mov	sp,fp
  8108a8:	dfc00117 	ldw	ra,4(sp)
  8108ac:	df000017 	ldw	fp,0(sp)
  8108b0:	dec00204 	addi	sp,sp,8
  8108b4:	f800283a 	ret

008108b8 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  8108b8:	defffc04 	addi	sp,sp,-16
  8108bc:	dfc00315 	stw	ra,12(sp)
  8108c0:	df000215 	stw	fp,8(sp)
  8108c4:	df000204 	addi	fp,sp,8
  8108c8:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  8108cc:	01400044 	movi	r5,1
  8108d0:	e13fff17 	ldw	r4,-4(fp)
  8108d4:	08107280 	call	810728 <lcd_write_command>

  sp->x = 0;
  8108d8:	e0bfff17 	ldw	r2,-4(fp)
  8108dc:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8108e0:	e0bfff17 	ldw	r2,-4(fp)
  8108e4:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8108e8:	e0bfff17 	ldw	r2,-4(fp)
  8108ec:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8108f0:	e03ffe15 	stw	zero,-8(fp)
  8108f4:	00001b06 	br	810964 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8108f8:	e0bffe17 	ldw	r2,-8(fp)
  8108fc:	108018e4 	muli	r2,r2,99
  810900:	10801004 	addi	r2,r2,64
  810904:	e0ffff17 	ldw	r3,-4(fp)
  810908:	1885883a 	add	r2,r3,r2
  81090c:	01801444 	movi	r6,81
  810910:	01400804 	movi	r5,32
  810914:	1009883a 	mov	r4,r2
  810918:	0802d480 	call	802d48 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  81091c:	e0bffe17 	ldw	r2,-8(fp)
  810920:	108018e4 	muli	r2,r2,99
  810924:	10800c04 	addi	r2,r2,48
  810928:	e0ffff17 	ldw	r3,-4(fp)
  81092c:	1885883a 	add	r2,r3,r2
  810930:	01800404 	movi	r6,16
  810934:	01400804 	movi	r5,32
  810938:	1009883a 	mov	r4,r2
  81093c:	0802d480 	call	802d48 <memset>
    sp->line[y].width = 0;
  810940:	e0ffff17 	ldw	r3,-4(fp)
  810944:	e0bffe17 	ldw	r2,-8(fp)
  810948:	108018e4 	muli	r2,r2,99
  81094c:	1885883a 	add	r2,r3,r2
  810950:	10802444 	addi	r2,r2,145
  810954:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810958:	e0bffe17 	ldw	r2,-8(fp)
  81095c:	10800044 	addi	r2,r2,1
  810960:	e0bffe15 	stw	r2,-8(fp)
  810964:	e0bffe17 	ldw	r2,-8(fp)
  810968:	10800090 	cmplti	r2,r2,2
  81096c:	103fe21e 	bne	r2,zero,8108f8 <__alt_mem_onchip_mem+0xff8088f8>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  810970:	0001883a 	nop
  810974:	e037883a 	mov	sp,fp
  810978:	dfc00117 	ldw	ra,4(sp)
  81097c:	df000017 	ldw	fp,0(sp)
  810980:	dec00204 	addi	sp,sp,8
  810984:	f800283a 	ret

00810988 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  810988:	defff704 	addi	sp,sp,-36
  81098c:	dfc00815 	stw	ra,32(sp)
  810990:	df000715 	stw	fp,28(sp)
  810994:	df000704 	addi	fp,sp,28
  810998:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  81099c:	e0bfff17 	ldw	r2,-4(fp)
  8109a0:	10800943 	ldbu	r2,37(r2)
  8109a4:	10803fcc 	andi	r2,r2,255
  8109a8:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8109ac:	e03ff915 	stw	zero,-28(fp)
  8109b0:	00006706 	br	810b50 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  8109b4:	e0ffff17 	ldw	r3,-4(fp)
  8109b8:	e0bff917 	ldw	r2,-28(fp)
  8109bc:	108018e4 	muli	r2,r2,99
  8109c0:	1885883a 	add	r2,r3,r2
  8109c4:	10802444 	addi	r2,r2,145
  8109c8:	10800003 	ldbu	r2,0(r2)
  8109cc:	10803fcc 	andi	r2,r2,255
  8109d0:	1080201c 	xori	r2,r2,128
  8109d4:	10bfe004 	addi	r2,r2,-128
  8109d8:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8109dc:	e0ffff17 	ldw	r3,-4(fp)
  8109e0:	e0bff917 	ldw	r2,-28(fp)
  8109e4:	108018e4 	muli	r2,r2,99
  8109e8:	1885883a 	add	r2,r3,r2
  8109ec:	10802484 	addi	r2,r2,146
  8109f0:	10800003 	ldbu	r2,0(r2)
  8109f4:	10c03fcc 	andi	r3,r2,255
  8109f8:	e0bffc17 	ldw	r2,-16(fp)
  8109fc:	1885383a 	mul	r2,r3,r2
  810a00:	1005d23a 	srai	r2,r2,8
  810a04:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  810a08:	e0fffb17 	ldw	r3,-20(fp)
  810a0c:	e0bffd17 	ldw	r2,-12(fp)
  810a10:	18800116 	blt	r3,r2,810a18 <lcd_repaint_screen+0x90>
      offset = 0;
  810a14:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810a18:	e03ffa15 	stw	zero,-24(fp)
  810a1c:	00004606 	br	810b38 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  810a20:	e0fffa17 	ldw	r3,-24(fp)
  810a24:	e0bffb17 	ldw	r2,-20(fp)
  810a28:	1885883a 	add	r2,r3,r2
  810a2c:	e17ffd17 	ldw	r5,-12(fp)
  810a30:	1009883a 	mov	r4,r2
  810a34:	08014440 	call	801444 <__modsi3>
  810a38:	1009883a 	mov	r4,r2
  810a3c:	e0ffff17 	ldw	r3,-4(fp)
  810a40:	e0bff917 	ldw	r2,-28(fp)
  810a44:	108018e4 	muli	r2,r2,99
  810a48:	1885883a 	add	r2,r3,r2
  810a4c:	1105883a 	add	r2,r2,r4
  810a50:	10801004 	addi	r2,r2,64
  810a54:	10800003 	ldbu	r2,0(r2)
  810a58:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  810a5c:	e0ffff17 	ldw	r3,-4(fp)
  810a60:	e0bff917 	ldw	r2,-28(fp)
  810a64:	108018e4 	muli	r2,r2,99
  810a68:	1887883a 	add	r3,r3,r2
  810a6c:	e0bffa17 	ldw	r2,-24(fp)
  810a70:	1885883a 	add	r2,r3,r2
  810a74:	10800c04 	addi	r2,r2,48
  810a78:	10800003 	ldbu	r2,0(r2)
  810a7c:	10c03fcc 	andi	r3,r2,255
  810a80:	18c0201c 	xori	r3,r3,128
  810a84:	18ffe004 	addi	r3,r3,-128
  810a88:	e0bffe07 	ldb	r2,-8(fp)
  810a8c:	18802726 	beq	r3,r2,810b2c <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  810a90:	e0fff917 	ldw	r3,-28(fp)
  810a94:	d0a01104 	addi	r2,gp,-32700
  810a98:	1885883a 	add	r2,r3,r2
  810a9c:	10800003 	ldbu	r2,0(r2)
  810aa0:	1007883a 	mov	r3,r2
  810aa4:	e0bffa17 	ldw	r2,-24(fp)
  810aa8:	1885883a 	add	r2,r3,r2
  810aac:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  810ab0:	e0fffe43 	ldbu	r3,-7(fp)
  810ab4:	e0bfff17 	ldw	r2,-4(fp)
  810ab8:	108008c3 	ldbu	r2,35(r2)
  810abc:	10803fcc 	andi	r2,r2,255
  810ac0:	1080201c 	xori	r2,r2,128
  810ac4:	10bfe004 	addi	r2,r2,-128
  810ac8:	18800a26 	beq	r3,r2,810af4 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  810acc:	e0fffe43 	ldbu	r3,-7(fp)
  810ad0:	00bfe004 	movi	r2,-128
  810ad4:	1884b03a 	or	r2,r3,r2
  810ad8:	10803fcc 	andi	r2,r2,255
  810adc:	100b883a 	mov	r5,r2
  810ae0:	e13fff17 	ldw	r4,-4(fp)
  810ae4:	08107280 	call	810728 <lcd_write_command>
          sp->address = address;
  810ae8:	e0fffe43 	ldbu	r3,-7(fp)
  810aec:	e0bfff17 	ldw	r2,-4(fp)
  810af0:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  810af4:	e0bffe03 	ldbu	r2,-8(fp)
  810af8:	10803fcc 	andi	r2,r2,255
  810afc:	100b883a 	mov	r5,r2
  810b00:	e13fff17 	ldw	r4,-4(fp)
  810b04:	08107e00 	call	8107e0 <lcd_write_data>
        sp->line[y].visible[x] = c;
  810b08:	e0ffff17 	ldw	r3,-4(fp)
  810b0c:	e0bff917 	ldw	r2,-28(fp)
  810b10:	108018e4 	muli	r2,r2,99
  810b14:	1887883a 	add	r3,r3,r2
  810b18:	e0bffa17 	ldw	r2,-24(fp)
  810b1c:	1885883a 	add	r2,r3,r2
  810b20:	10800c04 	addi	r2,r2,48
  810b24:	e0fffe03 	ldbu	r3,-8(fp)
  810b28:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810b2c:	e0bffa17 	ldw	r2,-24(fp)
  810b30:	10800044 	addi	r2,r2,1
  810b34:	e0bffa15 	stw	r2,-24(fp)
  810b38:	e0bffa17 	ldw	r2,-24(fp)
  810b3c:	10800410 	cmplti	r2,r2,16
  810b40:	103fb71e 	bne	r2,zero,810a20 <__alt_mem_onchip_mem+0xff808a20>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810b44:	e0bff917 	ldw	r2,-28(fp)
  810b48:	10800044 	addi	r2,r2,1
  810b4c:	e0bff915 	stw	r2,-28(fp)
  810b50:	e0bff917 	ldw	r2,-28(fp)
  810b54:	10800090 	cmplti	r2,r2,2
  810b58:	103f961e 	bne	r2,zero,8109b4 <__alt_mem_onchip_mem+0xff8089b4>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  810b5c:	0001883a 	nop
  810b60:	e037883a 	mov	sp,fp
  810b64:	dfc00117 	ldw	ra,4(sp)
  810b68:	df000017 	ldw	fp,0(sp)
  810b6c:	dec00204 	addi	sp,sp,8
  810b70:	f800283a 	ret

00810b74 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  810b74:	defffc04 	addi	sp,sp,-16
  810b78:	dfc00315 	stw	ra,12(sp)
  810b7c:	df000215 	stw	fp,8(sp)
  810b80:	df000204 	addi	fp,sp,8
  810b84:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810b88:	e03ffe15 	stw	zero,-8(fp)
  810b8c:	00001d06 	br	810c04 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  810b90:	e0bffe17 	ldw	r2,-8(fp)
  810b94:	00800f16 	blt	zero,r2,810bd4 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  810b98:	e0bffe17 	ldw	r2,-8(fp)
  810b9c:	108018e4 	muli	r2,r2,99
  810ba0:	10801004 	addi	r2,r2,64
  810ba4:	e0ffff17 	ldw	r3,-4(fp)
  810ba8:	1889883a 	add	r4,r3,r2
  810bac:	e0bffe17 	ldw	r2,-8(fp)
  810bb0:	10800044 	addi	r2,r2,1
  810bb4:	108018e4 	muli	r2,r2,99
  810bb8:	10801004 	addi	r2,r2,64
  810bbc:	e0ffff17 	ldw	r3,-4(fp)
  810bc0:	1885883a 	add	r2,r3,r2
  810bc4:	01801404 	movi	r6,80
  810bc8:	100b883a 	mov	r5,r2
  810bcc:	08085740 	call	808574 <memcpy>
  810bd0:	00000906 	br	810bf8 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  810bd4:	e0bffe17 	ldw	r2,-8(fp)
  810bd8:	108018e4 	muli	r2,r2,99
  810bdc:	10801004 	addi	r2,r2,64
  810be0:	e0ffff17 	ldw	r3,-4(fp)
  810be4:	1885883a 	add	r2,r3,r2
  810be8:	01801404 	movi	r6,80
  810bec:	01400804 	movi	r5,32
  810bf0:	1009883a 	mov	r4,r2
  810bf4:	0802d480 	call	802d48 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810bf8:	e0bffe17 	ldw	r2,-8(fp)
  810bfc:	10800044 	addi	r2,r2,1
  810c00:	e0bffe15 	stw	r2,-8(fp)
  810c04:	e0bffe17 	ldw	r2,-8(fp)
  810c08:	10800090 	cmplti	r2,r2,2
  810c0c:	103fe01e 	bne	r2,zero,810b90 <__alt_mem_onchip_mem+0xff808b90>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  810c10:	e0bfff17 	ldw	r2,-4(fp)
  810c14:	10800883 	ldbu	r2,34(r2)
  810c18:	10bfffc4 	addi	r2,r2,-1
  810c1c:	1007883a 	mov	r3,r2
  810c20:	e0bfff17 	ldw	r2,-4(fp)
  810c24:	10c00885 	stb	r3,34(r2)
}
  810c28:	0001883a 	nop
  810c2c:	e037883a 	mov	sp,fp
  810c30:	dfc00117 	ldw	ra,4(sp)
  810c34:	df000017 	ldw	fp,0(sp)
  810c38:	dec00204 	addi	sp,sp,8
  810c3c:	f800283a 	ret

00810c40 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  810c40:	defff904 	addi	sp,sp,-28
  810c44:	dfc00615 	stw	ra,24(sp)
  810c48:	df000515 	stw	fp,20(sp)
  810c4c:	df000504 	addi	fp,sp,20
  810c50:	e13ffe15 	stw	r4,-8(fp)
  810c54:	2805883a 	mov	r2,r5
  810c58:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  810c5c:	e03ffb15 	stw	zero,-20(fp)
  810c60:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  810c64:	e0bffe17 	ldw	r2,-8(fp)
  810c68:	10800a03 	ldbu	r2,40(r2)
  810c6c:	10803fcc 	andi	r2,r2,255
  810c70:	1080201c 	xori	r2,r2,128
  810c74:	10bfe004 	addi	r2,r2,-128
  810c78:	108016d8 	cmpnei	r2,r2,91
  810c7c:	1000411e 	bne	r2,zero,810d84 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  810c80:	e0bffe17 	ldw	r2,-8(fp)
  810c84:	10800a04 	addi	r2,r2,40
  810c88:	10800044 	addi	r2,r2,1
  810c8c:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  810c90:	00000c06 	br	810cc4 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  810c94:	e0bffb17 	ldw	r2,-20(fp)
  810c98:	10c002a4 	muli	r3,r2,10
  810c9c:	e0bffd17 	ldw	r2,-12(fp)
  810ca0:	11000044 	addi	r4,r2,1
  810ca4:	e13ffd15 	stw	r4,-12(fp)
  810ca8:	10800003 	ldbu	r2,0(r2)
  810cac:	10803fcc 	andi	r2,r2,255
  810cb0:	1080201c 	xori	r2,r2,128
  810cb4:	10bfe004 	addi	r2,r2,-128
  810cb8:	10bff404 	addi	r2,r2,-48
  810cbc:	1885883a 	add	r2,r3,r2
  810cc0:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  810cc4:	d0e00417 	ldw	r3,-32752(gp)
  810cc8:	e0bffd17 	ldw	r2,-12(fp)
  810ccc:	10800003 	ldbu	r2,0(r2)
  810cd0:	10803fcc 	andi	r2,r2,255
  810cd4:	1080201c 	xori	r2,r2,128
  810cd8:	10bfe004 	addi	r2,r2,-128
  810cdc:	10800044 	addi	r2,r2,1
  810ce0:	1885883a 	add	r2,r3,r2
  810ce4:	10800003 	ldbu	r2,0(r2)
  810ce8:	10803fcc 	andi	r2,r2,255
  810cec:	1080010c 	andi	r2,r2,4
  810cf0:	103fe81e 	bne	r2,zero,810c94 <__alt_mem_onchip_mem+0xff808c94>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  810cf4:	e0bffd17 	ldw	r2,-12(fp)
  810cf8:	10800003 	ldbu	r2,0(r2)
  810cfc:	10803fcc 	andi	r2,r2,255
  810d00:	1080201c 	xori	r2,r2,128
  810d04:	10bfe004 	addi	r2,r2,-128
  810d08:	10800ed8 	cmpnei	r2,r2,59
  810d0c:	10001f1e 	bne	r2,zero,810d8c <lcd_handle_escape+0x14c>
    {
      ptr++;
  810d10:	e0bffd17 	ldw	r2,-12(fp)
  810d14:	10800044 	addi	r2,r2,1
  810d18:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  810d1c:	00000c06 	br	810d50 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  810d20:	e0bffc17 	ldw	r2,-16(fp)
  810d24:	10c002a4 	muli	r3,r2,10
  810d28:	e0bffd17 	ldw	r2,-12(fp)
  810d2c:	11000044 	addi	r4,r2,1
  810d30:	e13ffd15 	stw	r4,-12(fp)
  810d34:	10800003 	ldbu	r2,0(r2)
  810d38:	10803fcc 	andi	r2,r2,255
  810d3c:	1080201c 	xori	r2,r2,128
  810d40:	10bfe004 	addi	r2,r2,-128
  810d44:	10bff404 	addi	r2,r2,-48
  810d48:	1885883a 	add	r2,r3,r2
  810d4c:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  810d50:	d0e00417 	ldw	r3,-32752(gp)
  810d54:	e0bffd17 	ldw	r2,-12(fp)
  810d58:	10800003 	ldbu	r2,0(r2)
  810d5c:	10803fcc 	andi	r2,r2,255
  810d60:	1080201c 	xori	r2,r2,128
  810d64:	10bfe004 	addi	r2,r2,-128
  810d68:	10800044 	addi	r2,r2,1
  810d6c:	1885883a 	add	r2,r3,r2
  810d70:	10800003 	ldbu	r2,0(r2)
  810d74:	10803fcc 	andi	r2,r2,255
  810d78:	1080010c 	andi	r2,r2,4
  810d7c:	103fe81e 	bne	r2,zero,810d20 <__alt_mem_onchip_mem+0xff808d20>
  810d80:	00000206 	br	810d8c <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  810d84:	00bfffc4 	movi	r2,-1
  810d88:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  810d8c:	e0bfff07 	ldb	r2,-4(fp)
  810d90:	10c012a0 	cmpeqi	r3,r2,74
  810d94:	1800291e 	bne	r3,zero,810e3c <lcd_handle_escape+0x1fc>
  810d98:	10c012c8 	cmpgei	r3,r2,75
  810d9c:	1800031e 	bne	r3,zero,810dac <lcd_handle_escape+0x16c>
  810da0:	10801220 	cmpeqi	r2,r2,72
  810da4:	1000061e 	bne	r2,zero,810dc0 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  810da8:	00004a06 	br	810ed4 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  810dac:	10c012e0 	cmpeqi	r3,r2,75
  810db0:	1800281e 	bne	r3,zero,810e54 <lcd_handle_escape+0x214>
  810db4:	108019a0 	cmpeqi	r2,r2,102
  810db8:	1000011e 	bne	r2,zero,810dc0 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  810dbc:	00004506 	br	810ed4 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  810dc0:	e0bffc17 	ldw	r2,-16(fp)
  810dc4:	0080050e 	bge	zero,r2,810ddc <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  810dc8:	e0bffc17 	ldw	r2,-16(fp)
  810dcc:	10bfffc4 	addi	r2,r2,-1
  810dd0:	1007883a 	mov	r3,r2
  810dd4:	e0bffe17 	ldw	r2,-8(fp)
  810dd8:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  810ddc:	e0bffb17 	ldw	r2,-20(fp)
  810de0:	0080370e 	bge	zero,r2,810ec0 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  810de4:	e0bffb17 	ldw	r2,-20(fp)
  810de8:	10bfffc4 	addi	r2,r2,-1
  810dec:	1007883a 	mov	r3,r2
  810df0:	e0bffe17 	ldw	r2,-8(fp)
  810df4:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  810df8:	e0bffe17 	ldw	r2,-8(fp)
  810dfc:	10800883 	ldbu	r2,34(r2)
  810e00:	10803fcc 	andi	r2,r2,255
  810e04:	10800170 	cmpltui	r2,r2,5
  810e08:	1000061e 	bne	r2,zero,810e24 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  810e0c:	e0bffe17 	ldw	r2,-8(fp)
  810e10:	00c00104 	movi	r3,4
  810e14:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  810e18:	00000206 	br	810e24 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  810e1c:	e13ffe17 	ldw	r4,-8(fp)
  810e20:	0810b740 	call	810b74 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  810e24:	e0bffe17 	ldw	r2,-8(fp)
  810e28:	10800883 	ldbu	r2,34(r2)
  810e2c:	10803fcc 	andi	r2,r2,255
  810e30:	108000e8 	cmpgeui	r2,r2,3
  810e34:	103ff91e 	bne	r2,zero,810e1c <__alt_mem_onchip_mem+0xff808e1c>
        lcd_scroll_up(sp);
    }
    break;
  810e38:	00002106 	br	810ec0 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  810e3c:	e0bffb17 	ldw	r2,-20(fp)
  810e40:	10800098 	cmpnei	r2,r2,2
  810e44:	1000201e 	bne	r2,zero,810ec8 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  810e48:	e13ffe17 	ldw	r4,-8(fp)
  810e4c:	08108b80 	call	8108b8 <lcd_clear_screen>
    break;
  810e50:	00001d06 	br	810ec8 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  810e54:	e0bffb17 	ldw	r2,-20(fp)
  810e58:	00801d16 	blt	zero,r2,810ed0 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  810e5c:	e0bffe17 	ldw	r2,-8(fp)
  810e60:	10800843 	ldbu	r2,33(r2)
  810e64:	10803fcc 	andi	r2,r2,255
  810e68:	10801428 	cmpgeui	r2,r2,80
  810e6c:	1000181e 	bne	r2,zero,810ed0 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  810e70:	e0bffe17 	ldw	r2,-8(fp)
  810e74:	10800883 	ldbu	r2,34(r2)
  810e78:	10803fcc 	andi	r2,r2,255
  810e7c:	108018e4 	muli	r2,r2,99
  810e80:	10801004 	addi	r2,r2,64
  810e84:	e0fffe17 	ldw	r3,-8(fp)
  810e88:	1887883a 	add	r3,r3,r2
  810e8c:	e0bffe17 	ldw	r2,-8(fp)
  810e90:	10800843 	ldbu	r2,33(r2)
  810e94:	10803fcc 	andi	r2,r2,255
  810e98:	1889883a 	add	r4,r3,r2
  810e9c:	e0bffe17 	ldw	r2,-8(fp)
  810ea0:	10800843 	ldbu	r2,33(r2)
  810ea4:	10803fcc 	andi	r2,r2,255
  810ea8:	00c01404 	movi	r3,80
  810eac:	1885c83a 	sub	r2,r3,r2
  810eb0:	100d883a 	mov	r6,r2
  810eb4:	01400804 	movi	r5,32
  810eb8:	0802d480 	call	802d48 <memset>
    }
    break;
  810ebc:	00000406 	br	810ed0 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  810ec0:	0001883a 	nop
  810ec4:	00000306 	br	810ed4 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  810ec8:	0001883a 	nop
  810ecc:	00000106 	br	810ed4 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  810ed0:	0001883a 	nop
  }
}
  810ed4:	0001883a 	nop
  810ed8:	e037883a 	mov	sp,fp
  810edc:	dfc00117 	ldw	ra,4(sp)
  810ee0:	df000017 	ldw	fp,0(sp)
  810ee4:	dec00204 	addi	sp,sp,8
  810ee8:	f800283a 	ret

00810eec <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  810eec:	defff304 	addi	sp,sp,-52
  810ef0:	dfc00c15 	stw	ra,48(sp)
  810ef4:	df000b15 	stw	fp,44(sp)
  810ef8:	df000b04 	addi	fp,sp,44
  810efc:	e13ffc15 	stw	r4,-16(fp)
  810f00:	e17ffd15 	stw	r5,-12(fp)
  810f04:	e1bffe15 	stw	r6,-8(fp)
  810f08:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  810f0c:	e0bffe17 	ldw	r2,-8(fp)
  810f10:	e0fffd17 	ldw	r3,-12(fp)
  810f14:	1885883a 	add	r2,r3,r2
  810f18:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  810f1c:	e0bffc17 	ldw	r2,-16(fp)
  810f20:	00c00044 	movi	r3,1
  810f24:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  810f28:	00009906 	br	811190 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  810f2c:	e0bffd17 	ldw	r2,-12(fp)
  810f30:	10800003 	ldbu	r2,0(r2)
  810f34:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  810f38:	e0bffc17 	ldw	r2,-16(fp)
  810f3c:	10800903 	ldbu	r2,36(r2)
  810f40:	10803fcc 	andi	r2,r2,255
  810f44:	1080201c 	xori	r2,r2,128
  810f48:	10bfe004 	addi	r2,r2,-128
  810f4c:	10003716 	blt	r2,zero,81102c <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  810f50:	e0bffc17 	ldw	r2,-16(fp)
  810f54:	10800903 	ldbu	r2,36(r2)
  810f58:	10803fcc 	andi	r2,r2,255
  810f5c:	1080201c 	xori	r2,r2,128
  810f60:	10bfe004 	addi	r2,r2,-128
  810f64:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  810f68:	e0bffa17 	ldw	r2,-24(fp)
  810f6c:	1000031e 	bne	r2,zero,810f7c <altera_avalon_lcd_16207_write+0x90>
  810f70:	e0bff907 	ldb	r2,-28(fp)
  810f74:	108016d8 	cmpnei	r2,r2,91
  810f78:	10000d1e 	bne	r2,zero,810fb0 <altera_avalon_lcd_16207_write+0xc4>
  810f7c:	e0bffa17 	ldw	r2,-24(fp)
  810f80:	10001826 	beq	r2,zero,810fe4 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  810f84:	d0e00417 	ldw	r3,-32752(gp)
  810f88:	e0bff907 	ldb	r2,-28(fp)
  810f8c:	10800044 	addi	r2,r2,1
  810f90:	1885883a 	add	r2,r3,r2
  810f94:	10800003 	ldbu	r2,0(r2)
  810f98:	10803fcc 	andi	r2,r2,255
  810f9c:	1080010c 	andi	r2,r2,4
  810fa0:	1000101e 	bne	r2,zero,810fe4 <altera_avalon_lcd_16207_write+0xf8>
  810fa4:	e0bff907 	ldb	r2,-28(fp)
  810fa8:	10800ee0 	cmpeqi	r2,r2,59
  810fac:	10000d1e 	bne	r2,zero,810fe4 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  810fb0:	e0fffc17 	ldw	r3,-16(fp)
  810fb4:	e0bffa17 	ldw	r2,-24(fp)
  810fb8:	1885883a 	add	r2,r3,r2
  810fbc:	10800a04 	addi	r2,r2,40
  810fc0:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  810fc4:	e0bff907 	ldb	r2,-28(fp)
  810fc8:	100b883a 	mov	r5,r2
  810fcc:	e13ffc17 	ldw	r4,-16(fp)
  810fd0:	0810c400 	call	810c40 <lcd_handle_escape>

        sp->esccount = -1;
  810fd4:	e0bffc17 	ldw	r2,-16(fp)
  810fd8:	00ffffc4 	movi	r3,-1
  810fdc:	10c00905 	stb	r3,36(r2)
  810fe0:	00006806 	br	811184 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  810fe4:	e0bffc17 	ldw	r2,-16(fp)
  810fe8:	10800903 	ldbu	r2,36(r2)
  810fec:	10803fcc 	andi	r2,r2,255
  810ff0:	108001e8 	cmpgeui	r2,r2,7
  810ff4:	1000631e 	bne	r2,zero,811184 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  810ff8:	e0fffc17 	ldw	r3,-16(fp)
  810ffc:	e0bffa17 	ldw	r2,-24(fp)
  811000:	1885883a 	add	r2,r3,r2
  811004:	10800a04 	addi	r2,r2,40
  811008:	e0fff903 	ldbu	r3,-28(fp)
  81100c:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  811010:	e0bffc17 	ldw	r2,-16(fp)
  811014:	10800903 	ldbu	r2,36(r2)
  811018:	10800044 	addi	r2,r2,1
  81101c:	1007883a 	mov	r3,r2
  811020:	e0bffc17 	ldw	r2,-16(fp)
  811024:	10c00905 	stb	r3,36(r2)
  811028:	00005606 	br	811184 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  81102c:	e0bff907 	ldb	r2,-28(fp)
  811030:	108006d8 	cmpnei	r2,r2,27
  811034:	1000031e 	bne	r2,zero,811044 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  811038:	e0bffc17 	ldw	r2,-16(fp)
  81103c:	10000905 	stb	zero,36(r2)
  811040:	00005006 	br	811184 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  811044:	e0bff907 	ldb	r2,-28(fp)
  811048:	10800358 	cmpnei	r2,r2,13
  81104c:	1000031e 	bne	r2,zero,81105c <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  811050:	e0bffc17 	ldw	r2,-16(fp)
  811054:	10000845 	stb	zero,33(r2)
  811058:	00004a06 	br	811184 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  81105c:	e0bff907 	ldb	r2,-28(fp)
  811060:	10800298 	cmpnei	r2,r2,10
  811064:	1000101e 	bne	r2,zero,8110a8 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  811068:	e0bffc17 	ldw	r2,-16(fp)
  81106c:	10000845 	stb	zero,33(r2)
      sp->y++;
  811070:	e0bffc17 	ldw	r2,-16(fp)
  811074:	10800883 	ldbu	r2,34(r2)
  811078:	10800044 	addi	r2,r2,1
  81107c:	1007883a 	mov	r3,r2
  811080:	e0bffc17 	ldw	r2,-16(fp)
  811084:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  811088:	e0bffc17 	ldw	r2,-16(fp)
  81108c:	10800883 	ldbu	r2,34(r2)
  811090:	10803fcc 	andi	r2,r2,255
  811094:	108000f0 	cmpltui	r2,r2,3
  811098:	10003a1e 	bne	r2,zero,811184 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  81109c:	e13ffc17 	ldw	r4,-16(fp)
  8110a0:	0810b740 	call	810b74 <lcd_scroll_up>
  8110a4:	00003706 	br	811184 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  8110a8:	e0bff907 	ldb	r2,-28(fp)
  8110ac:	10800218 	cmpnei	r2,r2,8
  8110b0:	10000b1e 	bne	r2,zero,8110e0 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  8110b4:	e0bffc17 	ldw	r2,-16(fp)
  8110b8:	10800843 	ldbu	r2,33(r2)
  8110bc:	10803fcc 	andi	r2,r2,255
  8110c0:	10003026 	beq	r2,zero,811184 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  8110c4:	e0bffc17 	ldw	r2,-16(fp)
  8110c8:	10800843 	ldbu	r2,33(r2)
  8110cc:	10bfffc4 	addi	r2,r2,-1
  8110d0:	1007883a 	mov	r3,r2
  8110d4:	e0bffc17 	ldw	r2,-16(fp)
  8110d8:	10c00845 	stb	r3,33(r2)
  8110dc:	00002906 	br	811184 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  8110e0:	d0e00417 	ldw	r3,-32752(gp)
  8110e4:	e0bff907 	ldb	r2,-28(fp)
  8110e8:	10800044 	addi	r2,r2,1
  8110ec:	1885883a 	add	r2,r3,r2
  8110f0:	10800003 	ldbu	r2,0(r2)
  8110f4:	10803fcc 	andi	r2,r2,255
  8110f8:	1080201c 	xori	r2,r2,128
  8110fc:	10bfe004 	addi	r2,r2,-128
  811100:	108025cc 	andi	r2,r2,151
  811104:	10001f26 	beq	r2,zero,811184 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  811108:	e0bffc17 	ldw	r2,-16(fp)
  81110c:	10800883 	ldbu	r2,34(r2)
  811110:	10803fcc 	andi	r2,r2,255
  811114:	108000b0 	cmpltui	r2,r2,2
  811118:	1000021e 	bne	r2,zero,811124 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  81111c:	e13ffc17 	ldw	r4,-16(fp)
  811120:	0810b740 	call	810b74 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  811124:	e0bffc17 	ldw	r2,-16(fp)
  811128:	10800843 	ldbu	r2,33(r2)
  81112c:	10803fcc 	andi	r2,r2,255
  811130:	10801428 	cmpgeui	r2,r2,80
  811134:	10000d1e 	bne	r2,zero,81116c <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  811138:	e0bffc17 	ldw	r2,-16(fp)
  81113c:	10800883 	ldbu	r2,34(r2)
  811140:	10c03fcc 	andi	r3,r2,255
  811144:	e0bffc17 	ldw	r2,-16(fp)
  811148:	10800843 	ldbu	r2,33(r2)
  81114c:	10803fcc 	andi	r2,r2,255
  811150:	e13ffc17 	ldw	r4,-16(fp)
  811154:	18c018e4 	muli	r3,r3,99
  811158:	20c7883a 	add	r3,r4,r3
  81115c:	1885883a 	add	r2,r3,r2
  811160:	10801004 	addi	r2,r2,64
  811164:	e0fff903 	ldbu	r3,-28(fp)
  811168:	10c00005 	stb	r3,0(r2)

      sp->x++;
  81116c:	e0bffc17 	ldw	r2,-16(fp)
  811170:	10800843 	ldbu	r2,33(r2)
  811174:	10800044 	addi	r2,r2,1
  811178:	1007883a 	mov	r3,r2
  81117c:	e0bffc17 	ldw	r2,-16(fp)
  811180:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  811184:	e0bffd17 	ldw	r2,-12(fp)
  811188:	10800044 	addi	r2,r2,1
  81118c:	e0bffd15 	stw	r2,-12(fp)
  811190:	e0fffd17 	ldw	r3,-12(fp)
  811194:	e0bff817 	ldw	r2,-32(fp)
  811198:	18bf6436 	bltu	r3,r2,810f2c <__alt_mem_onchip_mem+0xff808f2c>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  81119c:	00800404 	movi	r2,16
  8111a0:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8111a4:	e03ff515 	stw	zero,-44(fp)
  8111a8:	00003706 	br	811288 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8111ac:	00801404 	movi	r2,80
  8111b0:	e0bff715 	stw	r2,-36(fp)
  8111b4:	00001106 	br	8111fc <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  8111b8:	e0bff717 	ldw	r2,-36(fp)
  8111bc:	10bfffc4 	addi	r2,r2,-1
  8111c0:	e13ffc17 	ldw	r4,-16(fp)
  8111c4:	e0fff517 	ldw	r3,-44(fp)
  8111c8:	18c018e4 	muli	r3,r3,99
  8111cc:	20c7883a 	add	r3,r4,r3
  8111d0:	1885883a 	add	r2,r3,r2
  8111d4:	10801004 	addi	r2,r2,64
  8111d8:	10800003 	ldbu	r2,0(r2)
  8111dc:	10803fcc 	andi	r2,r2,255
  8111e0:	1080201c 	xori	r2,r2,128
  8111e4:	10bfe004 	addi	r2,r2,-128
  8111e8:	10800820 	cmpeqi	r2,r2,32
  8111ec:	10000626 	beq	r2,zero,811208 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8111f0:	e0bff717 	ldw	r2,-36(fp)
  8111f4:	10bfffc4 	addi	r2,r2,-1
  8111f8:	e0bff715 	stw	r2,-36(fp)
  8111fc:	e0bff717 	ldw	r2,-36(fp)
  811200:	00bfed16 	blt	zero,r2,8111b8 <__alt_mem_onchip_mem+0xff8091b8>
  811204:	00000106 	br	81120c <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  811208:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  81120c:	e0bff717 	ldw	r2,-36(fp)
  811210:	10800448 	cmpgei	r2,r2,17
  811214:	1000031e 	bne	r2,zero,811224 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  811218:	00800404 	movi	r2,16
  81121c:	e0bff715 	stw	r2,-36(fp)
  811220:	00000306 	br	811230 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  811224:	e0bff717 	ldw	r2,-36(fp)
  811228:	10800044 	addi	r2,r2,1
  81122c:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  811230:	e0bff717 	ldw	r2,-36(fp)
  811234:	1009883a 	mov	r4,r2
  811238:	e0fffc17 	ldw	r3,-16(fp)
  81123c:	e0bff517 	ldw	r2,-44(fp)
  811240:	108018e4 	muli	r2,r2,99
  811244:	1885883a 	add	r2,r3,r2
  811248:	10802444 	addi	r2,r2,145
  81124c:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  811250:	e0fff617 	ldw	r3,-40(fp)
  811254:	e0bff717 	ldw	r2,-36(fp)
  811258:	1880020e 	bge	r3,r2,811264 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  81125c:	e0bff717 	ldw	r2,-36(fp)
  811260:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  811264:	e0fffc17 	ldw	r3,-16(fp)
  811268:	e0bff517 	ldw	r2,-44(fp)
  81126c:	108018e4 	muli	r2,r2,99
  811270:	1885883a 	add	r2,r3,r2
  811274:	10802484 	addi	r2,r2,146
  811278:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81127c:	e0bff517 	ldw	r2,-44(fp)
  811280:	10800044 	addi	r2,r2,1
  811284:	e0bff515 	stw	r2,-44(fp)
  811288:	e0bff517 	ldw	r2,-44(fp)
  81128c:	10800090 	cmplti	r2,r2,2
  811290:	103fc61e 	bne	r2,zero,8111ac <__alt_mem_onchip_mem+0xff8091ac>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  811294:	e0bff617 	ldw	r2,-40(fp)
  811298:	10800448 	cmpgei	r2,r2,17
  81129c:	1000031e 	bne	r2,zero,8112ac <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  8112a0:	e0bffc17 	ldw	r2,-16(fp)
  8112a4:	10000985 	stb	zero,38(r2)
  8112a8:	00002e06 	br	811364 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  8112ac:	e0bff617 	ldw	r2,-40(fp)
  8112b0:	1085883a 	add	r2,r2,r2
  8112b4:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  8112b8:	e0bff617 	ldw	r2,-40(fp)
  8112bc:	1007883a 	mov	r3,r2
  8112c0:	e0bffc17 	ldw	r2,-16(fp)
  8112c4:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8112c8:	e03ff515 	stw	zero,-44(fp)
  8112cc:	00002206 	br	811358 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  8112d0:	e0fffc17 	ldw	r3,-16(fp)
  8112d4:	e0bff517 	ldw	r2,-44(fp)
  8112d8:	108018e4 	muli	r2,r2,99
  8112dc:	1885883a 	add	r2,r3,r2
  8112e0:	10802444 	addi	r2,r2,145
  8112e4:	10800003 	ldbu	r2,0(r2)
  8112e8:	10803fcc 	andi	r2,r2,255
  8112ec:	1080201c 	xori	r2,r2,128
  8112f0:	10bfe004 	addi	r2,r2,-128
  8112f4:	10800450 	cmplti	r2,r2,17
  8112f8:	1000141e 	bne	r2,zero,81134c <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  8112fc:	e0fffc17 	ldw	r3,-16(fp)
  811300:	e0bff517 	ldw	r2,-44(fp)
  811304:	108018e4 	muli	r2,r2,99
  811308:	1885883a 	add	r2,r3,r2
  81130c:	10802444 	addi	r2,r2,145
  811310:	10800003 	ldbu	r2,0(r2)
  811314:	10803fcc 	andi	r2,r2,255
  811318:	1080201c 	xori	r2,r2,128
  81131c:	10bfe004 	addi	r2,r2,-128
  811320:	1004923a 	slli	r2,r2,8
  811324:	e17ff617 	ldw	r5,-40(fp)
  811328:	1009883a 	mov	r4,r2
  81132c:	08013c00 	call	8013c0 <__divsi3>
  811330:	1009883a 	mov	r4,r2
  811334:	e0fffc17 	ldw	r3,-16(fp)
  811338:	e0bff517 	ldw	r2,-44(fp)
  81133c:	108018e4 	muli	r2,r2,99
  811340:	1885883a 	add	r2,r3,r2
  811344:	10802484 	addi	r2,r2,146
  811348:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81134c:	e0bff517 	ldw	r2,-44(fp)
  811350:	10800044 	addi	r2,r2,1
  811354:	e0bff515 	stw	r2,-44(fp)
  811358:	e0bff517 	ldw	r2,-44(fp)
  81135c:	10800090 	cmplti	r2,r2,2
  811360:	103fdb1e 	bne	r2,zero,8112d0 <__alt_mem_onchip_mem+0xff8092d0>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  811364:	e0bffc17 	ldw	r2,-16(fp)
  811368:	10800943 	ldbu	r2,37(r2)
  81136c:	10803fcc 	andi	r2,r2,255
  811370:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  811374:	e13ffc17 	ldw	r4,-16(fp)
  811378:	08109880 	call	810988 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  81137c:	e0bffc17 	ldw	r2,-16(fp)
  811380:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  811384:	e0bffc17 	ldw	r2,-16(fp)
  811388:	10800943 	ldbu	r2,37(r2)
  81138c:	10c03fcc 	andi	r3,r2,255
  811390:	e0bffb17 	ldw	r2,-20(fp)
  811394:	18800426 	beq	r3,r2,8113a8 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  811398:	e0bffc17 	ldw	r2,-16(fp)
  81139c:	00c00044 	movi	r3,1
  8113a0:	10c009c5 	stb	r3,39(r2)
  }
  8113a4:	003fef06 	br	811364 <__alt_mem_onchip_mem+0xff809364>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  8113a8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  8113ac:	e0bffe17 	ldw	r2,-8(fp)
}
  8113b0:	e037883a 	mov	sp,fp
  8113b4:	dfc00117 	ldw	ra,4(sp)
  8113b8:	df000017 	ldw	fp,0(sp)
  8113bc:	dec00204 	addi	sp,sp,8
  8113c0:	f800283a 	ret

008113c4 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  8113c4:	defffc04 	addi	sp,sp,-16
  8113c8:	dfc00315 	stw	ra,12(sp)
  8113cc:	df000215 	stw	fp,8(sp)
  8113d0:	df000204 	addi	fp,sp,8
  8113d4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  8113d8:	e0bfff17 	ldw	r2,-4(fp)
  8113dc:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  8113e0:	e0bffe17 	ldw	r2,-8(fp)
  8113e4:	10800943 	ldbu	r2,37(r2)
  8113e8:	10803fcc 	andi	r2,r2,255
  8113ec:	10c00044 	addi	r3,r2,1
  8113f0:	e0bffe17 	ldw	r2,-8(fp)
  8113f4:	10800983 	ldbu	r2,38(r2)
  8113f8:	10803fcc 	andi	r2,r2,255
  8113fc:	18800316 	blt	r3,r2,81140c <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  811400:	e0bffe17 	ldw	r2,-8(fp)
  811404:	10000945 	stb	zero,37(r2)
  811408:	00000606 	br	811424 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  81140c:	e0bffe17 	ldw	r2,-8(fp)
  811410:	10800943 	ldbu	r2,37(r2)
  811414:	10800044 	addi	r2,r2,1
  811418:	1007883a 	mov	r3,r2
  81141c:	e0bffe17 	ldw	r2,-8(fp)
  811420:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  811424:	e0bffe17 	ldw	r2,-8(fp)
  811428:	10800983 	ldbu	r2,38(r2)
  81142c:	10803fcc 	andi	r2,r2,255
  811430:	10000826 	beq	r2,zero,811454 <alt_lcd_16207_timeout+0x90>
  811434:	e0bffe17 	ldw	r2,-8(fp)
  811438:	108009c3 	ldbu	r2,39(r2)
  81143c:	10803fcc 	andi	r2,r2,255
  811440:	1080201c 	xori	r2,r2,128
  811444:	10bfe004 	addi	r2,r2,-128
  811448:	1000021e 	bne	r2,zero,811454 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  81144c:	e13ffe17 	ldw	r4,-8(fp)
  811450:	08109880 	call	810988 <lcd_repaint_screen>

  return sp->period;
  811454:	e0bffe17 	ldw	r2,-8(fp)
  811458:	10800717 	ldw	r2,28(r2)
}
  81145c:	e037883a 	mov	sp,fp
  811460:	dfc00117 	ldw	ra,4(sp)
  811464:	df000017 	ldw	fp,0(sp)
  811468:	dec00204 	addi	sp,sp,8
  81146c:	f800283a 	ret

00811470 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  811470:	defffc04 	addi	sp,sp,-16
  811474:	dfc00315 	stw	ra,12(sp)
  811478:	df000215 	stw	fp,8(sp)
  81147c:	df000204 	addi	fp,sp,8
  811480:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  811484:	e0bfff17 	ldw	r2,-4(fp)
  811488:	10800017 	ldw	r2,0(r2)
  81148c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  811490:	e0bfff17 	ldw	r2,-4(fp)
  811494:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  811498:	010ea604 	movi	r4,15000
  81149c:	08128080 	call	812808 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8114a0:	e0bffe17 	ldw	r2,-8(fp)
  8114a4:	00c00c04 	movi	r3,48
  8114a8:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  8114ac:	01040104 	movi	r4,4100
  8114b0:	08128080 	call	812808 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8114b4:	e0bffe17 	ldw	r2,-8(fp)
  8114b8:	00c00c04 	movi	r3,48
  8114bc:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  8114c0:	0100fa04 	movi	r4,1000
  8114c4:	08128080 	call	812808 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8114c8:	e0bffe17 	ldw	r2,-8(fp)
  8114cc:	00c00c04 	movi	r3,48
  8114d0:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  8114d4:	01400e04 	movi	r5,56
  8114d8:	e13fff17 	ldw	r4,-4(fp)
  8114dc:	08107280 	call	810728 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  8114e0:	01400204 	movi	r5,8
  8114e4:	e13fff17 	ldw	r4,-4(fp)
  8114e8:	08107280 	call	810728 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  8114ec:	e13fff17 	ldw	r4,-4(fp)
  8114f0:	08108b80 	call	8108b8 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8114f4:	01400184 	movi	r5,6
  8114f8:	e13fff17 	ldw	r4,-4(fp)
  8114fc:	08107280 	call	810728 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  811500:	01400304 	movi	r5,12
  811504:	e13fff17 	ldw	r4,-4(fp)
  811508:	08107280 	call	810728 <lcd_write_command>

  sp->esccount = -1;
  81150c:	e0bfff17 	ldw	r2,-4(fp)
  811510:	00ffffc4 	movi	r3,-1
  811514:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  811518:	e0bfff17 	ldw	r2,-4(fp)
  81151c:	10800a04 	addi	r2,r2,40
  811520:	01800204 	movi	r6,8
  811524:	000b883a 	mov	r5,zero
  811528:	1009883a 	mov	r4,r2
  81152c:	0802d480 	call	802d48 <memset>

  sp->scrollpos = 0;
  811530:	e0bfff17 	ldw	r2,-4(fp)
  811534:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  811538:	e0bfff17 	ldw	r2,-4(fp)
  81153c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  811540:	e0bfff17 	ldw	r2,-4(fp)
  811544:	100009c5 	stb	zero,39(r2)
  811548:	d0a76c17 	ldw	r2,-25168(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  81154c:	01400284 	movi	r5,10
  811550:	1009883a 	mov	r4,r2
  811554:	08014b80 	call	8014b8 <__udivsi3>
  811558:	1007883a 	mov	r3,r2
  81155c:	e0bfff17 	ldw	r2,-4(fp)
  811560:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  811564:	e0bfff17 	ldw	r2,-4(fp)
  811568:	10c00104 	addi	r3,r2,4
  81156c:	e0bfff17 	ldw	r2,-4(fp)
  811570:	10800717 	ldw	r2,28(r2)
  811574:	e1ffff17 	ldw	r7,-4(fp)
  811578:	01802074 	movhi	r6,129
  81157c:	3184f104 	addi	r6,r6,5060
  811580:	100b883a 	mov	r5,r2
  811584:	1809883a 	mov	r4,r3
  811588:	080ebd40 	call	80ebd4 <alt_alarm_start>
}
  81158c:	0001883a 	nop
  811590:	e037883a 	mov	sp,fp
  811594:	dfc00117 	ldw	ra,4(sp)
  811598:	df000017 	ldw	fp,0(sp)
  81159c:	dec00204 	addi	sp,sp,8
  8115a0:	f800283a 	ret

008115a4 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8115a4:	defffa04 	addi	sp,sp,-24
  8115a8:	dfc00515 	stw	ra,20(sp)
  8115ac:	df000415 	stw	fp,16(sp)
  8115b0:	df000404 	addi	fp,sp,16
  8115b4:	e13ffd15 	stw	r4,-12(fp)
  8115b8:	e17ffe15 	stw	r5,-8(fp)
  8115bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  8115c0:	e0bffd17 	ldw	r2,-12(fp)
  8115c4:	10800017 	ldw	r2,0(r2)
  8115c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8115cc:	e0bffc17 	ldw	r2,-16(fp)
  8115d0:	10c00a04 	addi	r3,r2,40
  8115d4:	e0bffd17 	ldw	r2,-12(fp)
  8115d8:	10800217 	ldw	r2,8(r2)
  8115dc:	100f883a 	mov	r7,r2
  8115e0:	e1bfff17 	ldw	r6,-4(fp)
  8115e4:	e17ffe17 	ldw	r5,-8(fp)
  8115e8:	1809883a 	mov	r4,r3
  8115ec:	0810eec0 	call	810eec <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8115f0:	e037883a 	mov	sp,fp
  8115f4:	dfc00117 	ldw	ra,4(sp)
  8115f8:	df000017 	ldw	fp,0(sp)
  8115fc:	dec00204 	addi	sp,sp,8
  811600:	f800283a 	ret

00811604 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  811604:	defffa04 	addi	sp,sp,-24
  811608:	dfc00515 	stw	ra,20(sp)
  81160c:	df000415 	stw	fp,16(sp)
  811610:	df000404 	addi	fp,sp,16
  811614:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  811618:	0007883a 	mov	r3,zero
  81161c:	e0bfff17 	ldw	r2,-4(fp)
  811620:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  811624:	e0bfff17 	ldw	r2,-4(fp)
  811628:	10800104 	addi	r2,r2,4
  81162c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811630:	0005303a 	rdctl	r2,status
  811634:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811638:	e0fffd17 	ldw	r3,-12(fp)
  81163c:	00bfff84 	movi	r2,-2
  811640:	1884703a 	and	r2,r3,r2
  811644:	1001703a 	wrctl	status,r2
  
  return context;
  811648:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81164c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  811650:	080f9800 	call	80f980 <alt_tick>
  811654:	e0bffc17 	ldw	r2,-16(fp)
  811658:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81165c:	e0bffe17 	ldw	r2,-8(fp)
  811660:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  811664:	0001883a 	nop
  811668:	e037883a 	mov	sp,fp
  81166c:	dfc00117 	ldw	ra,4(sp)
  811670:	df000017 	ldw	fp,0(sp)
  811674:	dec00204 	addi	sp,sp,8
  811678:	f800283a 	ret

0081167c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81167c:	defff804 	addi	sp,sp,-32
  811680:	dfc00715 	stw	ra,28(sp)
  811684:	df000615 	stw	fp,24(sp)
  811688:	df000604 	addi	fp,sp,24
  81168c:	e13ffc15 	stw	r4,-16(fp)
  811690:	e17ffd15 	stw	r5,-12(fp)
  811694:	e1bffe15 	stw	r6,-8(fp)
  811698:	e1ffff15 	stw	r7,-4(fp)
  81169c:	e0bfff17 	ldw	r2,-4(fp)
  8116a0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8116a4:	d0a76c17 	ldw	r2,-25168(gp)
  8116a8:	1000021e 	bne	r2,zero,8116b4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  8116ac:	e0bffb17 	ldw	r2,-20(fp)
  8116b0:	d0a76c15 	stw	r2,-25168(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8116b4:	e0bffc17 	ldw	r2,-16(fp)
  8116b8:	10800104 	addi	r2,r2,4
  8116bc:	00c001c4 	movi	r3,7
  8116c0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8116c4:	d8000015 	stw	zero,0(sp)
  8116c8:	e1fffc17 	ldw	r7,-16(fp)
  8116cc:	01802074 	movhi	r6,129
  8116d0:	31858104 	addi	r6,r6,5636
  8116d4:	e17ffe17 	ldw	r5,-8(fp)
  8116d8:	e13ffd17 	ldw	r4,-12(fp)
  8116dc:	08124280 	call	812428 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8116e0:	0001883a 	nop
  8116e4:	e037883a 	mov	sp,fp
  8116e8:	dfc00117 	ldw	ra,4(sp)
  8116ec:	df000017 	ldw	fp,0(sp)
  8116f0:	dec00204 	addi	sp,sp,8
  8116f4:	f800283a 	ret

008116f8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8116f8:	defffa04 	addi	sp,sp,-24
  8116fc:	dfc00515 	stw	ra,20(sp)
  811700:	df000415 	stw	fp,16(sp)
  811704:	df000404 	addi	fp,sp,16
  811708:	e13ffd15 	stw	r4,-12(fp)
  81170c:	e17ffe15 	stw	r5,-8(fp)
  811710:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  811714:	e0bffd17 	ldw	r2,-12(fp)
  811718:	10800017 	ldw	r2,0(r2)
  81171c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  811720:	e0bffc17 	ldw	r2,-16(fp)
  811724:	10c00a04 	addi	r3,r2,40
  811728:	e0bffd17 	ldw	r2,-12(fp)
  81172c:	10800217 	ldw	r2,8(r2)
  811730:	100f883a 	mov	r7,r2
  811734:	e1bfff17 	ldw	r6,-4(fp)
  811738:	e17ffe17 	ldw	r5,-8(fp)
  81173c:	1809883a 	mov	r4,r3
  811740:	0811c0c0 	call	811c0c <altera_avalon_uart_read>
      fd->fd_flags);
}
  811744:	e037883a 	mov	sp,fp
  811748:	dfc00117 	ldw	ra,4(sp)
  81174c:	df000017 	ldw	fp,0(sp)
  811750:	dec00204 	addi	sp,sp,8
  811754:	f800283a 	ret

00811758 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811758:	defffa04 	addi	sp,sp,-24
  81175c:	dfc00515 	stw	ra,20(sp)
  811760:	df000415 	stw	fp,16(sp)
  811764:	df000404 	addi	fp,sp,16
  811768:	e13ffd15 	stw	r4,-12(fp)
  81176c:	e17ffe15 	stw	r5,-8(fp)
  811770:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  811774:	e0bffd17 	ldw	r2,-12(fp)
  811778:	10800017 	ldw	r2,0(r2)
  81177c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  811780:	e0bffc17 	ldw	r2,-16(fp)
  811784:	10c00a04 	addi	r3,r2,40
  811788:	e0bffd17 	ldw	r2,-12(fp)
  81178c:	10800217 	ldw	r2,8(r2)
  811790:	100f883a 	mov	r7,r2
  811794:	e1bfff17 	ldw	r6,-4(fp)
  811798:	e17ffe17 	ldw	r5,-8(fp)
  81179c:	1809883a 	mov	r4,r3
  8117a0:	0811e240 	call	811e24 <altera_avalon_uart_write>
      fd->fd_flags);
}
  8117a4:	e037883a 	mov	sp,fp
  8117a8:	dfc00117 	ldw	ra,4(sp)
  8117ac:	df000017 	ldw	fp,0(sp)
  8117b0:	dec00204 	addi	sp,sp,8
  8117b4:	f800283a 	ret

008117b8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8117b8:	defffc04 	addi	sp,sp,-16
  8117bc:	dfc00315 	stw	ra,12(sp)
  8117c0:	df000215 	stw	fp,8(sp)
  8117c4:	df000204 	addi	fp,sp,8
  8117c8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8117cc:	e0bfff17 	ldw	r2,-4(fp)
  8117d0:	10800017 	ldw	r2,0(r2)
  8117d4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8117d8:	e0bffe17 	ldw	r2,-8(fp)
  8117dc:	10c00a04 	addi	r3,r2,40
  8117e0:	e0bfff17 	ldw	r2,-4(fp)
  8117e4:	10800217 	ldw	r2,8(r2)
  8117e8:	100b883a 	mov	r5,r2
  8117ec:	1809883a 	mov	r4,r3
  8117f0:	0811b7c0 	call	811b7c <altera_avalon_uart_close>
}
  8117f4:	e037883a 	mov	sp,fp
  8117f8:	dfc00117 	ldw	ra,4(sp)
  8117fc:	df000017 	ldw	fp,0(sp)
  811800:	dec00204 	addi	sp,sp,8
  811804:	f800283a 	ret

00811808 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  811808:	defff804 	addi	sp,sp,-32
  81180c:	dfc00715 	stw	ra,28(sp)
  811810:	df000615 	stw	fp,24(sp)
  811814:	df000604 	addi	fp,sp,24
  811818:	e13ffd15 	stw	r4,-12(fp)
  81181c:	e17ffe15 	stw	r5,-8(fp)
  811820:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  811824:	e0bffd17 	ldw	r2,-12(fp)
  811828:	10800017 	ldw	r2,0(r2)
  81182c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  811830:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  811834:	1000041e 	bne	r2,zero,811848 <altera_avalon_uart_init+0x40>
  811838:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  81183c:	1000021e 	bne	r2,zero,811848 <altera_avalon_uart_init+0x40>
  811840:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  811844:	10000226 	beq	r2,zero,811850 <altera_avalon_uart_init+0x48>
  811848:	00800044 	movi	r2,1
  81184c:	00000106 	br	811854 <altera_avalon_uart_init+0x4c>
  811850:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  811854:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  811858:	e0bffc17 	ldw	r2,-16(fp)
  81185c:	10000f1e 	bne	r2,zero,81189c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  811860:	e0bffd17 	ldw	r2,-12(fp)
  811864:	00c32004 	movi	r3,3200
  811868:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  81186c:	e0bffb17 	ldw	r2,-20(fp)
  811870:	10800304 	addi	r2,r2,12
  811874:	e0fffd17 	ldw	r3,-12(fp)
  811878:	18c00117 	ldw	r3,4(r3)
  81187c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  811880:	d8000015 	stw	zero,0(sp)
  811884:	e1fffd17 	ldw	r7,-12(fp)
  811888:	01802074 	movhi	r6,129
  81188c:	31862d04 	addi	r6,r6,6324
  811890:	e17fff17 	ldw	r5,-4(fp)
  811894:	e13ffe17 	ldw	r4,-8(fp)
  811898:	08124280 	call	812428 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  81189c:	0001883a 	nop
  8118a0:	e037883a 	mov	sp,fp
  8118a4:	dfc00117 	ldw	ra,4(sp)
  8118a8:	df000017 	ldw	fp,0(sp)
  8118ac:	dec00204 	addi	sp,sp,8
  8118b0:	f800283a 	ret

008118b4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8118b4:	defffa04 	addi	sp,sp,-24
  8118b8:	dfc00515 	stw	ra,20(sp)
  8118bc:	df000415 	stw	fp,16(sp)
  8118c0:	df000404 	addi	fp,sp,16
  8118c4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8118c8:	e0bfff17 	ldw	r2,-4(fp)
  8118cc:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  8118d0:	e0bffc17 	ldw	r2,-16(fp)
  8118d4:	10800017 	ldw	r2,0(r2)
  8118d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8118dc:	e0bffd17 	ldw	r2,-12(fp)
  8118e0:	10800204 	addi	r2,r2,8
  8118e4:	10800037 	ldwio	r2,0(r2)
  8118e8:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8118ec:	e0bffd17 	ldw	r2,-12(fp)
  8118f0:	10800204 	addi	r2,r2,8
  8118f4:	0007883a 	mov	r3,zero
  8118f8:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8118fc:	e0bffd17 	ldw	r2,-12(fp)
  811900:	10800204 	addi	r2,r2,8
  811904:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  811908:	e0bffe17 	ldw	r2,-8(fp)
  81190c:	1080200c 	andi	r2,r2,128
  811910:	10000326 	beq	r2,zero,811920 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  811914:	e17ffe17 	ldw	r5,-8(fp)
  811918:	e13ffc17 	ldw	r4,-16(fp)
  81191c:	08119500 	call	811950 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  811920:	e0bffe17 	ldw	r2,-8(fp)
  811924:	1081100c 	andi	r2,r2,1088
  811928:	10000326 	beq	r2,zero,811938 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  81192c:	e17ffe17 	ldw	r5,-8(fp)
  811930:	e13ffc17 	ldw	r4,-16(fp)
  811934:	0811a340 	call	811a34 <altera_avalon_uart_txirq>
  }
  

}
  811938:	0001883a 	nop
  81193c:	e037883a 	mov	sp,fp
  811940:	dfc00117 	ldw	ra,4(sp)
  811944:	df000017 	ldw	fp,0(sp)
  811948:	dec00204 	addi	sp,sp,8
  81194c:	f800283a 	ret

00811950 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  811950:	defffc04 	addi	sp,sp,-16
  811954:	df000315 	stw	fp,12(sp)
  811958:	df000304 	addi	fp,sp,12
  81195c:	e13ffe15 	stw	r4,-8(fp)
  811960:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  811964:	e0bfff17 	ldw	r2,-4(fp)
  811968:	108000cc 	andi	r2,r2,3
  81196c:	10002c1e 	bne	r2,zero,811a20 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  811970:	e0bffe17 	ldw	r2,-8(fp)
  811974:	10800317 	ldw	r2,12(r2)
  811978:	e0bffe17 	ldw	r2,-8(fp)
  81197c:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  811980:	e0bffe17 	ldw	r2,-8(fp)
  811984:	10800317 	ldw	r2,12(r2)
  811988:	10800044 	addi	r2,r2,1
  81198c:	10800fcc 	andi	r2,r2,63
  811990:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  811994:	e0bffe17 	ldw	r2,-8(fp)
  811998:	10800317 	ldw	r2,12(r2)
  81199c:	e0fffe17 	ldw	r3,-8(fp)
  8119a0:	18c00017 	ldw	r3,0(r3)
  8119a4:	18c00037 	ldwio	r3,0(r3)
  8119a8:	1809883a 	mov	r4,r3
  8119ac:	e0fffe17 	ldw	r3,-8(fp)
  8119b0:	1885883a 	add	r2,r3,r2
  8119b4:	10800704 	addi	r2,r2,28
  8119b8:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  8119bc:	e0bffe17 	ldw	r2,-8(fp)
  8119c0:	e0fffd17 	ldw	r3,-12(fp)
  8119c4:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8119c8:	e0bffe17 	ldw	r2,-8(fp)
  8119cc:	10800317 	ldw	r2,12(r2)
  8119d0:	10800044 	addi	r2,r2,1
  8119d4:	10800fcc 	andi	r2,r2,63
  8119d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8119dc:	e0bffe17 	ldw	r2,-8(fp)
  8119e0:	10c00217 	ldw	r3,8(r2)
  8119e4:	e0bffd17 	ldw	r2,-12(fp)
  8119e8:	18800e1e 	bne	r3,r2,811a24 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8119ec:	e0bffe17 	ldw	r2,-8(fp)
  8119f0:	10c00117 	ldw	r3,4(r2)
  8119f4:	00bfdfc4 	movi	r2,-129
  8119f8:	1886703a 	and	r3,r3,r2
  8119fc:	e0bffe17 	ldw	r2,-8(fp)
  811a00:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  811a04:	e0bffe17 	ldw	r2,-8(fp)
  811a08:	10800017 	ldw	r2,0(r2)
  811a0c:	10800304 	addi	r2,r2,12
  811a10:	e0fffe17 	ldw	r3,-8(fp)
  811a14:	18c00117 	ldw	r3,4(r3)
  811a18:	10c00035 	stwio	r3,0(r2)
  811a1c:	00000106 	br	811a24 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  811a20:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  811a24:	e037883a 	mov	sp,fp
  811a28:	df000017 	ldw	fp,0(sp)
  811a2c:	dec00104 	addi	sp,sp,4
  811a30:	f800283a 	ret

00811a34 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  811a34:	defffb04 	addi	sp,sp,-20
  811a38:	df000415 	stw	fp,16(sp)
  811a3c:	df000404 	addi	fp,sp,16
  811a40:	e13ffc15 	stw	r4,-16(fp)
  811a44:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  811a48:	e0bffc17 	ldw	r2,-16(fp)
  811a4c:	10c00417 	ldw	r3,16(r2)
  811a50:	e0bffc17 	ldw	r2,-16(fp)
  811a54:	10800517 	ldw	r2,20(r2)
  811a58:	18803226 	beq	r3,r2,811b24 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  811a5c:	e0bffc17 	ldw	r2,-16(fp)
  811a60:	10800617 	ldw	r2,24(r2)
  811a64:	1080008c 	andi	r2,r2,2
  811a68:	10000326 	beq	r2,zero,811a78 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  811a6c:	e0bffd17 	ldw	r2,-12(fp)
  811a70:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  811a74:	10001d26 	beq	r2,zero,811aec <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  811a78:	e0bffc17 	ldw	r2,-16(fp)
  811a7c:	10800417 	ldw	r2,16(r2)
  811a80:	e0bffc17 	ldw	r2,-16(fp)
  811a84:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  811a88:	e0bffc17 	ldw	r2,-16(fp)
  811a8c:	10800017 	ldw	r2,0(r2)
  811a90:	10800104 	addi	r2,r2,4
  811a94:	e0fffc17 	ldw	r3,-16(fp)
  811a98:	18c00417 	ldw	r3,16(r3)
  811a9c:	e13ffc17 	ldw	r4,-16(fp)
  811aa0:	20c7883a 	add	r3,r4,r3
  811aa4:	18c01704 	addi	r3,r3,92
  811aa8:	18c00003 	ldbu	r3,0(r3)
  811aac:	18c03fcc 	andi	r3,r3,255
  811ab0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  811ab4:	e0bffc17 	ldw	r2,-16(fp)
  811ab8:	10800417 	ldw	r2,16(r2)
  811abc:	10800044 	addi	r2,r2,1
  811ac0:	e0fffc17 	ldw	r3,-16(fp)
  811ac4:	18800415 	stw	r2,16(r3)
  811ac8:	10c00fcc 	andi	r3,r2,63
  811acc:	e0bffc17 	ldw	r2,-16(fp)
  811ad0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  811ad4:	e0bffc17 	ldw	r2,-16(fp)
  811ad8:	10800117 	ldw	r2,4(r2)
  811adc:	10c01014 	ori	r3,r2,64
  811ae0:	e0bffc17 	ldw	r2,-16(fp)
  811ae4:	10c00115 	stw	r3,4(r2)
  811ae8:	00000e06 	br	811b24 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  811aec:	e0bffc17 	ldw	r2,-16(fp)
  811af0:	10800017 	ldw	r2,0(r2)
  811af4:	10800204 	addi	r2,r2,8
  811af8:	10800037 	ldwio	r2,0(r2)
  811afc:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  811b00:	e0bffd17 	ldw	r2,-12(fp)
  811b04:	1082000c 	andi	r2,r2,2048
  811b08:	1000061e 	bne	r2,zero,811b24 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  811b0c:	e0bffc17 	ldw	r2,-16(fp)
  811b10:	10c00117 	ldw	r3,4(r2)
  811b14:	00bfefc4 	movi	r2,-65
  811b18:	1886703a 	and	r3,r3,r2
  811b1c:	e0bffc17 	ldw	r2,-16(fp)
  811b20:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  811b24:	e0bffc17 	ldw	r2,-16(fp)
  811b28:	10c00417 	ldw	r3,16(r2)
  811b2c:	e0bffc17 	ldw	r2,-16(fp)
  811b30:	10800517 	ldw	r2,20(r2)
  811b34:	1880061e 	bne	r3,r2,811b50 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  811b38:	e0bffc17 	ldw	r2,-16(fp)
  811b3c:	10c00117 	ldw	r3,4(r2)
  811b40:	00beefc4 	movi	r2,-1089
  811b44:	1886703a 	and	r3,r3,r2
  811b48:	e0bffc17 	ldw	r2,-16(fp)
  811b4c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811b50:	e0bffc17 	ldw	r2,-16(fp)
  811b54:	10800017 	ldw	r2,0(r2)
  811b58:	10800304 	addi	r2,r2,12
  811b5c:	e0fffc17 	ldw	r3,-16(fp)
  811b60:	18c00117 	ldw	r3,4(r3)
  811b64:	10c00035 	stwio	r3,0(r2)
}
  811b68:	0001883a 	nop
  811b6c:	e037883a 	mov	sp,fp
  811b70:	df000017 	ldw	fp,0(sp)
  811b74:	dec00104 	addi	sp,sp,4
  811b78:	f800283a 	ret

00811b7c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  811b7c:	defffd04 	addi	sp,sp,-12
  811b80:	df000215 	stw	fp,8(sp)
  811b84:	df000204 	addi	fp,sp,8
  811b88:	e13ffe15 	stw	r4,-8(fp)
  811b8c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  811b90:	00000506 	br	811ba8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  811b94:	e0bfff17 	ldw	r2,-4(fp)
  811b98:	1090000c 	andi	r2,r2,16384
  811b9c:	10000226 	beq	r2,zero,811ba8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  811ba0:	00bffd44 	movi	r2,-11
  811ba4:	00000606 	br	811bc0 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  811ba8:	e0bffe17 	ldw	r2,-8(fp)
  811bac:	10c00417 	ldw	r3,16(r2)
  811bb0:	e0bffe17 	ldw	r2,-8(fp)
  811bb4:	10800517 	ldw	r2,20(r2)
  811bb8:	18bff61e 	bne	r3,r2,811b94 <__alt_mem_onchip_mem+0xff809b94>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811bbc:	0005883a 	mov	r2,zero
}
  811bc0:	e037883a 	mov	sp,fp
  811bc4:	df000017 	ldw	fp,0(sp)
  811bc8:	dec00104 	addi	sp,sp,4
  811bcc:	f800283a 	ret

00811bd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811bd0:	defffe04 	addi	sp,sp,-8
  811bd4:	dfc00115 	stw	ra,4(sp)
  811bd8:	df000015 	stw	fp,0(sp)
  811bdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811be0:	d0a00c17 	ldw	r2,-32720(gp)
  811be4:	10000326 	beq	r2,zero,811bf4 <alt_get_errno+0x24>
  811be8:	d0a00c17 	ldw	r2,-32720(gp)
  811bec:	103ee83a 	callr	r2
  811bf0:	00000106 	br	811bf8 <alt_get_errno+0x28>
  811bf4:	d0a76104 	addi	r2,gp,-25212
}
  811bf8:	e037883a 	mov	sp,fp
  811bfc:	dfc00117 	ldw	ra,4(sp)
  811c00:	df000017 	ldw	fp,0(sp)
  811c04:	dec00204 	addi	sp,sp,8
  811c08:	f800283a 	ret

00811c0c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  811c0c:	defff204 	addi	sp,sp,-56
  811c10:	dfc00d15 	stw	ra,52(sp)
  811c14:	df000c15 	stw	fp,48(sp)
  811c18:	df000c04 	addi	fp,sp,48
  811c1c:	e13ffc15 	stw	r4,-16(fp)
  811c20:	e17ffd15 	stw	r5,-12(fp)
  811c24:	e1bffe15 	stw	r6,-8(fp)
  811c28:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  811c2c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  811c30:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  811c34:	e0bfff17 	ldw	r2,-4(fp)
  811c38:	1090000c 	andi	r2,r2,16384
  811c3c:	1005003a 	cmpeq	r2,r2,zero
  811c40:	10803fcc 	andi	r2,r2,255
  811c44:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  811c48:	00001306 	br	811c98 <altera_avalon_uart_read+0x8c>
    {
      count++;
  811c4c:	e0bff517 	ldw	r2,-44(fp)
  811c50:	10800044 	addi	r2,r2,1
  811c54:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  811c58:	e0bffd17 	ldw	r2,-12(fp)
  811c5c:	10c00044 	addi	r3,r2,1
  811c60:	e0fffd15 	stw	r3,-12(fp)
  811c64:	e0fffc17 	ldw	r3,-16(fp)
  811c68:	18c00217 	ldw	r3,8(r3)
  811c6c:	e13ffc17 	ldw	r4,-16(fp)
  811c70:	20c7883a 	add	r3,r4,r3
  811c74:	18c00704 	addi	r3,r3,28
  811c78:	18c00003 	ldbu	r3,0(r3)
  811c7c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  811c80:	e0bffc17 	ldw	r2,-16(fp)
  811c84:	10800217 	ldw	r2,8(r2)
  811c88:	10800044 	addi	r2,r2,1
  811c8c:	10c00fcc 	andi	r3,r2,63
  811c90:	e0bffc17 	ldw	r2,-16(fp)
  811c94:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  811c98:	e0fff517 	ldw	r3,-44(fp)
  811c9c:	e0bffe17 	ldw	r2,-8(fp)
  811ca0:	1880050e 	bge	r3,r2,811cb8 <altera_avalon_uart_read+0xac>
  811ca4:	e0bffc17 	ldw	r2,-16(fp)
  811ca8:	10c00217 	ldw	r3,8(r2)
  811cac:	e0bffc17 	ldw	r2,-16(fp)
  811cb0:	10800317 	ldw	r2,12(r2)
  811cb4:	18bfe51e 	bne	r3,r2,811c4c <__alt_mem_onchip_mem+0xff809c4c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  811cb8:	e0bff517 	ldw	r2,-44(fp)
  811cbc:	1000251e 	bne	r2,zero,811d54 <altera_avalon_uart_read+0x148>
  811cc0:	e0bffc17 	ldw	r2,-16(fp)
  811cc4:	10c00217 	ldw	r3,8(r2)
  811cc8:	e0bffc17 	ldw	r2,-16(fp)
  811ccc:	10800317 	ldw	r2,12(r2)
  811cd0:	1880201e 	bne	r3,r2,811d54 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  811cd4:	e0bff617 	ldw	r2,-40(fp)
  811cd8:	1000071e 	bne	r2,zero,811cf8 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  811cdc:	0811bd00 	call	811bd0 <alt_get_errno>
  811ce0:	1007883a 	mov	r3,r2
  811ce4:	008002c4 	movi	r2,11
  811ce8:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  811cec:	00800044 	movi	r2,1
  811cf0:	e0bff405 	stb	r2,-48(fp)
        break;
  811cf4:	00001b06 	br	811d64 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811cf8:	0005303a 	rdctl	r2,status
  811cfc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811d00:	e0fff917 	ldw	r3,-28(fp)
  811d04:	00bfff84 	movi	r2,-2
  811d08:	1884703a 	and	r2,r3,r2
  811d0c:	1001703a 	wrctl	status,r2
  
  return context;
  811d10:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  811d14:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811d18:	e0bffc17 	ldw	r2,-16(fp)
  811d1c:	10800117 	ldw	r2,4(r2)
  811d20:	10c02014 	ori	r3,r2,128
  811d24:	e0bffc17 	ldw	r2,-16(fp)
  811d28:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811d2c:	e0bffc17 	ldw	r2,-16(fp)
  811d30:	10800017 	ldw	r2,0(r2)
  811d34:	10800304 	addi	r2,r2,12
  811d38:	e0fffc17 	ldw	r3,-16(fp)
  811d3c:	18c00117 	ldw	r3,4(r3)
  811d40:	10c00035 	stwio	r3,0(r2)
  811d44:	e0bff817 	ldw	r2,-32(fp)
  811d48:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811d4c:	e0bffa17 	ldw	r2,-24(fp)
  811d50:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  811d54:	e0bff517 	ldw	r2,-44(fp)
  811d58:	1000021e 	bne	r2,zero,811d64 <altera_avalon_uart_read+0x158>
  811d5c:	e0bffe17 	ldw	r2,-8(fp)
  811d60:	103fcd1e 	bne	r2,zero,811c98 <__alt_mem_onchip_mem+0xff809c98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811d64:	0005303a 	rdctl	r2,status
  811d68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811d6c:	e0fffb17 	ldw	r3,-20(fp)
  811d70:	00bfff84 	movi	r2,-2
  811d74:	1884703a 	and	r2,r3,r2
  811d78:	1001703a 	wrctl	status,r2
  
  return context;
  811d7c:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  811d80:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811d84:	e0bffc17 	ldw	r2,-16(fp)
  811d88:	10800117 	ldw	r2,4(r2)
  811d8c:	10c02014 	ori	r3,r2,128
  811d90:	e0bffc17 	ldw	r2,-16(fp)
  811d94:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811d98:	e0bffc17 	ldw	r2,-16(fp)
  811d9c:	10800017 	ldw	r2,0(r2)
  811da0:	10800304 	addi	r2,r2,12
  811da4:	e0fffc17 	ldw	r3,-16(fp)
  811da8:	18c00117 	ldw	r3,4(r3)
  811dac:	10c00035 	stwio	r3,0(r2)
  811db0:	e0bff817 	ldw	r2,-32(fp)
  811db4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811db8:	e0bff717 	ldw	r2,-36(fp)
  811dbc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  811dc0:	e0bff403 	ldbu	r2,-48(fp)
  811dc4:	10000226 	beq	r2,zero,811dd0 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  811dc8:	00bffd44 	movi	r2,-11
  811dcc:	00000106 	br	811dd4 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  811dd0:	e0bff517 	ldw	r2,-44(fp)
  }
}
  811dd4:	e037883a 	mov	sp,fp
  811dd8:	dfc00117 	ldw	ra,4(sp)
  811ddc:	df000017 	ldw	fp,0(sp)
  811de0:	dec00204 	addi	sp,sp,8
  811de4:	f800283a 	ret

00811de8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811de8:	defffe04 	addi	sp,sp,-8
  811dec:	dfc00115 	stw	ra,4(sp)
  811df0:	df000015 	stw	fp,0(sp)
  811df4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811df8:	d0a00c17 	ldw	r2,-32720(gp)
  811dfc:	10000326 	beq	r2,zero,811e0c <alt_get_errno+0x24>
  811e00:	d0a00c17 	ldw	r2,-32720(gp)
  811e04:	103ee83a 	callr	r2
  811e08:	00000106 	br	811e10 <alt_get_errno+0x28>
  811e0c:	d0a76104 	addi	r2,gp,-25212
}
  811e10:	e037883a 	mov	sp,fp
  811e14:	dfc00117 	ldw	ra,4(sp)
  811e18:	df000017 	ldw	fp,0(sp)
  811e1c:	dec00204 	addi	sp,sp,8
  811e20:	f800283a 	ret

00811e24 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  811e24:	defff204 	addi	sp,sp,-56
  811e28:	dfc00d15 	stw	ra,52(sp)
  811e2c:	df000c15 	stw	fp,48(sp)
  811e30:	df000c04 	addi	fp,sp,48
  811e34:	e13ffc15 	stw	r4,-16(fp)
  811e38:	e17ffd15 	stw	r5,-12(fp)
  811e3c:	e1bffe15 	stw	r6,-8(fp)
  811e40:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  811e44:	e0bffe17 	ldw	r2,-8(fp)
  811e48:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  811e4c:	e0bfff17 	ldw	r2,-4(fp)
  811e50:	1090000c 	andi	r2,r2,16384
  811e54:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  811e58:	00003c06 	br	811f4c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  811e5c:	e0bffc17 	ldw	r2,-16(fp)
  811e60:	10800517 	ldw	r2,20(r2)
  811e64:	10800044 	addi	r2,r2,1
  811e68:	10800fcc 	andi	r2,r2,63
  811e6c:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  811e70:	e0bffc17 	ldw	r2,-16(fp)
  811e74:	10c00417 	ldw	r3,16(r2)
  811e78:	e0bff717 	ldw	r2,-36(fp)
  811e7c:	1880221e 	bne	r3,r2,811f08 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  811e80:	e0bff517 	ldw	r2,-44(fp)
  811e84:	10000526 	beq	r2,zero,811e9c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  811e88:	0811de80 	call	811de8 <alt_get_errno>
  811e8c:	1007883a 	mov	r3,r2
  811e90:	008002c4 	movi	r2,11
  811e94:	18800015 	stw	r2,0(r3)
        break;
  811e98:	00002e06 	br	811f54 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811e9c:	0005303a 	rdctl	r2,status
  811ea0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811ea4:	e0fff917 	ldw	r3,-28(fp)
  811ea8:	00bfff84 	movi	r2,-2
  811eac:	1884703a 	and	r2,r3,r2
  811eb0:	1001703a 	wrctl	status,r2
  
  return context;
  811eb4:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  811eb8:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  811ebc:	e0bffc17 	ldw	r2,-16(fp)
  811ec0:	10800117 	ldw	r2,4(r2)
  811ec4:	10c11014 	ori	r3,r2,1088
  811ec8:	e0bffc17 	ldw	r2,-16(fp)
  811ecc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811ed0:	e0bffc17 	ldw	r2,-16(fp)
  811ed4:	10800017 	ldw	r2,0(r2)
  811ed8:	10800304 	addi	r2,r2,12
  811edc:	e0fffc17 	ldw	r3,-16(fp)
  811ee0:	18c00117 	ldw	r3,4(r3)
  811ee4:	10c00035 	stwio	r3,0(r2)
  811ee8:	e0bff817 	ldw	r2,-32(fp)
  811eec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811ef0:	e0bff617 	ldw	r2,-40(fp)
  811ef4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  811ef8:	e0bffc17 	ldw	r2,-16(fp)
  811efc:	10c00417 	ldw	r3,16(r2)
  811f00:	e0bff717 	ldw	r2,-36(fp)
  811f04:	18bffc26 	beq	r3,r2,811ef8 <__alt_mem_onchip_mem+0xff809ef8>
      }
    }

    count--;
  811f08:	e0bff417 	ldw	r2,-48(fp)
  811f0c:	10bfffc4 	addi	r2,r2,-1
  811f10:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  811f14:	e0bffc17 	ldw	r2,-16(fp)
  811f18:	10c00517 	ldw	r3,20(r2)
  811f1c:	e0bffd17 	ldw	r2,-12(fp)
  811f20:	11000044 	addi	r4,r2,1
  811f24:	e13ffd15 	stw	r4,-12(fp)
  811f28:	10800003 	ldbu	r2,0(r2)
  811f2c:	1009883a 	mov	r4,r2
  811f30:	e0bffc17 	ldw	r2,-16(fp)
  811f34:	10c5883a 	add	r2,r2,r3
  811f38:	10801704 	addi	r2,r2,92
  811f3c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  811f40:	e0bffc17 	ldw	r2,-16(fp)
  811f44:	e0fff717 	ldw	r3,-36(fp)
  811f48:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  811f4c:	e0bff417 	ldw	r2,-48(fp)
  811f50:	103fc21e 	bne	r2,zero,811e5c <__alt_mem_onchip_mem+0xff809e5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811f54:	0005303a 	rdctl	r2,status
  811f58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811f5c:	e0fffb17 	ldw	r3,-20(fp)
  811f60:	00bfff84 	movi	r2,-2
  811f64:	1884703a 	and	r2,r3,r2
  811f68:	1001703a 	wrctl	status,r2
  
  return context;
  811f6c:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  811f70:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  811f74:	e0bffc17 	ldw	r2,-16(fp)
  811f78:	10800117 	ldw	r2,4(r2)
  811f7c:	10c11014 	ori	r3,r2,1088
  811f80:	e0bffc17 	ldw	r2,-16(fp)
  811f84:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811f88:	e0bffc17 	ldw	r2,-16(fp)
  811f8c:	10800017 	ldw	r2,0(r2)
  811f90:	10800304 	addi	r2,r2,12
  811f94:	e0fffc17 	ldw	r3,-16(fp)
  811f98:	18c00117 	ldw	r3,4(r3)
  811f9c:	10c00035 	stwio	r3,0(r2)
  811fa0:	e0bff817 	ldw	r2,-32(fp)
  811fa4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811fa8:	e0bffa17 	ldw	r2,-24(fp)
  811fac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  811fb0:	e0fffe17 	ldw	r3,-8(fp)
  811fb4:	e0bff417 	ldw	r2,-48(fp)
  811fb8:	1885c83a 	sub	r2,r3,r2
}
  811fbc:	e037883a 	mov	sp,fp
  811fc0:	dfc00117 	ldw	ra,4(sp)
  811fc4:	df000017 	ldw	fp,0(sp)
  811fc8:	dec00204 	addi	sp,sp,8
  811fcc:	f800283a 	ret

00811fd0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  811fd0:	defffe04 	addi	sp,sp,-8
  811fd4:	df000115 	stw	fp,4(sp)
  811fd8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  811fdc:	e03fff15 	stw	zero,-4(fp)
  811fe0:	00000506 	br	811ff8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  811fe4:	e0bfff17 	ldw	r2,-4(fp)
  811fe8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  811fec:	e0bfff17 	ldw	r2,-4(fp)
  811ff0:	10800804 	addi	r2,r2,32
  811ff4:	e0bfff15 	stw	r2,-4(fp)
  811ff8:	e0bfff17 	ldw	r2,-4(fp)
  811ffc:	10820030 	cmpltui	r2,r2,2048
  812000:	103ff81e 	bne	r2,zero,811fe4 <__alt_mem_onchip_mem+0xff809fe4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  812004:	0001883a 	nop
  812008:	e037883a 	mov	sp,fp
  81200c:	df000017 	ldw	fp,0(sp)
  812010:	dec00104 	addi	sp,sp,4
  812014:	f800283a 	ret

00812018 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812018:	defffe04 	addi	sp,sp,-8
  81201c:	dfc00115 	stw	ra,4(sp)
  812020:	df000015 	stw	fp,0(sp)
  812024:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812028:	d0a00c17 	ldw	r2,-32720(gp)
  81202c:	10000326 	beq	r2,zero,81203c <alt_get_errno+0x24>
  812030:	d0a00c17 	ldw	r2,-32720(gp)
  812034:	103ee83a 	callr	r2
  812038:	00000106 	br	812040 <alt_get_errno+0x28>
  81203c:	d0a76104 	addi	r2,gp,-25212
}
  812040:	e037883a 	mov	sp,fp
  812044:	dfc00117 	ldw	ra,4(sp)
  812048:	df000017 	ldw	fp,0(sp)
  81204c:	dec00204 	addi	sp,sp,8
  812050:	f800283a 	ret

00812054 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  812054:	defffa04 	addi	sp,sp,-24
  812058:	dfc00515 	stw	ra,20(sp)
  81205c:	df000415 	stw	fp,16(sp)
  812060:	df000404 	addi	fp,sp,16
  812064:	e13ffe15 	stw	r4,-8(fp)
  812068:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81206c:	e0bffe17 	ldw	r2,-8(fp)
  812070:	10000326 	beq	r2,zero,812080 <alt_dev_llist_insert+0x2c>
  812074:	e0bffe17 	ldw	r2,-8(fp)
  812078:	10800217 	ldw	r2,8(r2)
  81207c:	1000061e 	bne	r2,zero,812098 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  812080:	08120180 	call	812018 <alt_get_errno>
  812084:	1007883a 	mov	r3,r2
  812088:	00800584 	movi	r2,22
  81208c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  812090:	00bffa84 	movi	r2,-22
  812094:	00001306 	br	8120e4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  812098:	e0bffe17 	ldw	r2,-8(fp)
  81209c:	e0ffff17 	ldw	r3,-4(fp)
  8120a0:	e0fffc15 	stw	r3,-16(fp)
  8120a4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8120a8:	e0bffd17 	ldw	r2,-12(fp)
  8120ac:	e0fffc17 	ldw	r3,-16(fp)
  8120b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8120b4:	e0bffc17 	ldw	r2,-16(fp)
  8120b8:	10c00017 	ldw	r3,0(r2)
  8120bc:	e0bffd17 	ldw	r2,-12(fp)
  8120c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8120c4:	e0bffc17 	ldw	r2,-16(fp)
  8120c8:	10800017 	ldw	r2,0(r2)
  8120cc:	e0fffd17 	ldw	r3,-12(fp)
  8120d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8120d4:	e0bffc17 	ldw	r2,-16(fp)
  8120d8:	e0fffd17 	ldw	r3,-12(fp)
  8120dc:	10c00015 	stw	r3,0(r2)

  return 0;  
  8120e0:	0005883a 	mov	r2,zero
}
  8120e4:	e037883a 	mov	sp,fp
  8120e8:	dfc00117 	ldw	ra,4(sp)
  8120ec:	df000017 	ldw	fp,0(sp)
  8120f0:	dec00204 	addi	sp,sp,8
  8120f4:	f800283a 	ret

008120f8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8120f8:	defffd04 	addi	sp,sp,-12
  8120fc:	dfc00215 	stw	ra,8(sp)
  812100:	df000115 	stw	fp,4(sp)
  812104:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812108:	00802074 	movhi	r2,129
  81210c:	108b9c04 	addi	r2,r2,11888
  812110:	e0bfff15 	stw	r2,-4(fp)
  812114:	00000606 	br	812130 <_do_ctors+0x38>
        (*ctor) (); 
  812118:	e0bfff17 	ldw	r2,-4(fp)
  81211c:	10800017 	ldw	r2,0(r2)
  812120:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812124:	e0bfff17 	ldw	r2,-4(fp)
  812128:	10bfff04 	addi	r2,r2,-4
  81212c:	e0bfff15 	stw	r2,-4(fp)
  812130:	e0ffff17 	ldw	r3,-4(fp)
  812134:	00802074 	movhi	r2,129
  812138:	108b9d04 	addi	r2,r2,11892
  81213c:	18bff62e 	bgeu	r3,r2,812118 <__alt_mem_onchip_mem+0xff80a118>
        (*ctor) (); 
}
  812140:	0001883a 	nop
  812144:	e037883a 	mov	sp,fp
  812148:	dfc00117 	ldw	ra,4(sp)
  81214c:	df000017 	ldw	fp,0(sp)
  812150:	dec00204 	addi	sp,sp,8
  812154:	f800283a 	ret

00812158 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  812158:	defffd04 	addi	sp,sp,-12
  81215c:	dfc00215 	stw	ra,8(sp)
  812160:	df000115 	stw	fp,4(sp)
  812164:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812168:	00802074 	movhi	r2,129
  81216c:	108b9c04 	addi	r2,r2,11888
  812170:	e0bfff15 	stw	r2,-4(fp)
  812174:	00000606 	br	812190 <_do_dtors+0x38>
        (*dtor) (); 
  812178:	e0bfff17 	ldw	r2,-4(fp)
  81217c:	10800017 	ldw	r2,0(r2)
  812180:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812184:	e0bfff17 	ldw	r2,-4(fp)
  812188:	10bfff04 	addi	r2,r2,-4
  81218c:	e0bfff15 	stw	r2,-4(fp)
  812190:	e0ffff17 	ldw	r3,-4(fp)
  812194:	00802074 	movhi	r2,129
  812198:	108b9d04 	addi	r2,r2,11892
  81219c:	18bff62e 	bgeu	r3,r2,812178 <__alt_mem_onchip_mem+0xff80a178>
        (*dtor) (); 
}
  8121a0:	0001883a 	nop
  8121a4:	e037883a 	mov	sp,fp
  8121a8:	dfc00117 	ldw	ra,4(sp)
  8121ac:	df000017 	ldw	fp,0(sp)
  8121b0:	dec00204 	addi	sp,sp,8
  8121b4:	f800283a 	ret

008121b8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8121b8:	defffa04 	addi	sp,sp,-24
  8121bc:	dfc00515 	stw	ra,20(sp)
  8121c0:	df000415 	stw	fp,16(sp)
  8121c4:	df000404 	addi	fp,sp,16
  8121c8:	e13ffe15 	stw	r4,-8(fp)
  8121cc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8121d0:	e0bfff17 	ldw	r2,-4(fp)
  8121d4:	10800017 	ldw	r2,0(r2)
  8121d8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8121dc:	e13ffe17 	ldw	r4,-8(fp)
  8121e0:	0809f280 	call	809f28 <strlen>
  8121e4:	10800044 	addi	r2,r2,1
  8121e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8121ec:	00000d06 	br	812224 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8121f0:	e0bffc17 	ldw	r2,-16(fp)
  8121f4:	10800217 	ldw	r2,8(r2)
  8121f8:	e0fffd17 	ldw	r3,-12(fp)
  8121fc:	180d883a 	mov	r6,r3
  812200:	e17ffe17 	ldw	r5,-8(fp)
  812204:	1009883a 	mov	r4,r2
  812208:	0812b2c0 	call	812b2c <memcmp>
  81220c:	1000021e 	bne	r2,zero,812218 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  812210:	e0bffc17 	ldw	r2,-16(fp)
  812214:	00000706 	br	812234 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  812218:	e0bffc17 	ldw	r2,-16(fp)
  81221c:	10800017 	ldw	r2,0(r2)
  812220:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812224:	e0fffc17 	ldw	r3,-16(fp)
  812228:	e0bfff17 	ldw	r2,-4(fp)
  81222c:	18bff01e 	bne	r3,r2,8121f0 <__alt_mem_onchip_mem+0xff80a1f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  812230:	0005883a 	mov	r2,zero
}
  812234:	e037883a 	mov	sp,fp
  812238:	dfc00117 	ldw	ra,4(sp)
  81223c:	df000017 	ldw	fp,0(sp)
  812240:	dec00204 	addi	sp,sp,8
  812244:	f800283a 	ret

00812248 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  812248:	defffb04 	addi	sp,sp,-20
  81224c:	dfc00415 	stw	ra,16(sp)
  812250:	df000315 	stw	fp,12(sp)
  812254:	df000304 	addi	fp,sp,12
  812258:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81225c:	d0a00717 	ldw	r2,-32740(gp)
  812260:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  812264:	00003106 	br	81232c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  812268:	e0bffd17 	ldw	r2,-12(fp)
  81226c:	10800217 	ldw	r2,8(r2)
  812270:	1009883a 	mov	r4,r2
  812274:	0809f280 	call	809f28 <strlen>
  812278:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  81227c:	e0bffd17 	ldw	r2,-12(fp)
  812280:	10c00217 	ldw	r3,8(r2)
  812284:	e0bffe17 	ldw	r2,-8(fp)
  812288:	10bfffc4 	addi	r2,r2,-1
  81228c:	1885883a 	add	r2,r3,r2
  812290:	10800003 	ldbu	r2,0(r2)
  812294:	10803fcc 	andi	r2,r2,255
  812298:	1080201c 	xori	r2,r2,128
  81229c:	10bfe004 	addi	r2,r2,-128
  8122a0:	10800bd8 	cmpnei	r2,r2,47
  8122a4:	1000031e 	bne	r2,zero,8122b4 <alt_find_file+0x6c>
    {
      len -= 1;
  8122a8:	e0bffe17 	ldw	r2,-8(fp)
  8122ac:	10bfffc4 	addi	r2,r2,-1
  8122b0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8122b4:	e0bffe17 	ldw	r2,-8(fp)
  8122b8:	e0ffff17 	ldw	r3,-4(fp)
  8122bc:	1885883a 	add	r2,r3,r2
  8122c0:	10800003 	ldbu	r2,0(r2)
  8122c4:	10803fcc 	andi	r2,r2,255
  8122c8:	1080201c 	xori	r2,r2,128
  8122cc:	10bfe004 	addi	r2,r2,-128
  8122d0:	10800be0 	cmpeqi	r2,r2,47
  8122d4:	1000081e 	bne	r2,zero,8122f8 <alt_find_file+0xb0>
  8122d8:	e0bffe17 	ldw	r2,-8(fp)
  8122dc:	e0ffff17 	ldw	r3,-4(fp)
  8122e0:	1885883a 	add	r2,r3,r2
  8122e4:	10800003 	ldbu	r2,0(r2)
  8122e8:	10803fcc 	andi	r2,r2,255
  8122ec:	1080201c 	xori	r2,r2,128
  8122f0:	10bfe004 	addi	r2,r2,-128
  8122f4:	10000a1e 	bne	r2,zero,812320 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8122f8:	e0bffd17 	ldw	r2,-12(fp)
  8122fc:	10800217 	ldw	r2,8(r2)
  812300:	e0fffe17 	ldw	r3,-8(fp)
  812304:	180d883a 	mov	r6,r3
  812308:	e17fff17 	ldw	r5,-4(fp)
  81230c:	1009883a 	mov	r4,r2
  812310:	0812b2c0 	call	812b2c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  812314:	1000021e 	bne	r2,zero,812320 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  812318:	e0bffd17 	ldw	r2,-12(fp)
  81231c:	00000706 	br	81233c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  812320:	e0bffd17 	ldw	r2,-12(fp)
  812324:	10800017 	ldw	r2,0(r2)
  812328:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81232c:	e0fffd17 	ldw	r3,-12(fp)
  812330:	d0a00704 	addi	r2,gp,-32740
  812334:	18bfcc1e 	bne	r3,r2,812268 <__alt_mem_onchip_mem+0xff80a268>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  812338:	0005883a 	mov	r2,zero
}
  81233c:	e037883a 	mov	sp,fp
  812340:	dfc00117 	ldw	ra,4(sp)
  812344:	df000017 	ldw	fp,0(sp)
  812348:	dec00204 	addi	sp,sp,8
  81234c:	f800283a 	ret

00812350 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  812350:	defffc04 	addi	sp,sp,-16
  812354:	df000315 	stw	fp,12(sp)
  812358:	df000304 	addi	fp,sp,12
  81235c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  812360:	00bffa04 	movi	r2,-24
  812364:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  812368:	e03ffd15 	stw	zero,-12(fp)
  81236c:	00001906 	br	8123d4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  812370:	00802074 	movhi	r2,129
  812374:	108f8904 	addi	r2,r2,15908
  812378:	e0fffd17 	ldw	r3,-12(fp)
  81237c:	18c00324 	muli	r3,r3,12
  812380:	10c5883a 	add	r2,r2,r3
  812384:	10800017 	ldw	r2,0(r2)
  812388:	10000f1e 	bne	r2,zero,8123c8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  81238c:	00802074 	movhi	r2,129
  812390:	108f8904 	addi	r2,r2,15908
  812394:	e0fffd17 	ldw	r3,-12(fp)
  812398:	18c00324 	muli	r3,r3,12
  81239c:	10c5883a 	add	r2,r2,r3
  8123a0:	e0ffff17 	ldw	r3,-4(fp)
  8123a4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8123a8:	d0e00b17 	ldw	r3,-32724(gp)
  8123ac:	e0bffd17 	ldw	r2,-12(fp)
  8123b0:	1880020e 	bge	r3,r2,8123bc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  8123b4:	e0bffd17 	ldw	r2,-12(fp)
  8123b8:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
  8123bc:	e0bffd17 	ldw	r2,-12(fp)
  8123c0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  8123c4:	00000606 	br	8123e0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8123c8:	e0bffd17 	ldw	r2,-12(fp)
  8123cc:	10800044 	addi	r2,r2,1
  8123d0:	e0bffd15 	stw	r2,-12(fp)
  8123d4:	e0bffd17 	ldw	r2,-12(fp)
  8123d8:	10800810 	cmplti	r2,r2,32
  8123dc:	103fe41e 	bne	r2,zero,812370 <__alt_mem_onchip_mem+0xff80a370>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8123e0:	e0bffe17 	ldw	r2,-8(fp)
}
  8123e4:	e037883a 	mov	sp,fp
  8123e8:	df000017 	ldw	fp,0(sp)
  8123ec:	dec00104 	addi	sp,sp,4
  8123f0:	f800283a 	ret

008123f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8123f4:	defffe04 	addi	sp,sp,-8
  8123f8:	dfc00115 	stw	ra,4(sp)
  8123fc:	df000015 	stw	fp,0(sp)
  812400:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  812404:	01440004 	movi	r5,4096
  812408:	0009883a 	mov	r4,zero
  81240c:	08129b40 	call	8129b4 <alt_icache_flush>
#endif
}
  812410:	0001883a 	nop
  812414:	e037883a 	mov	sp,fp
  812418:	dfc00117 	ldw	ra,4(sp)
  81241c:	df000017 	ldw	fp,0(sp)
  812420:	dec00204 	addi	sp,sp,8
  812424:	f800283a 	ret

00812428 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  812428:	defff904 	addi	sp,sp,-28
  81242c:	dfc00615 	stw	ra,24(sp)
  812430:	df000515 	stw	fp,20(sp)
  812434:	df000504 	addi	fp,sp,20
  812438:	e13ffc15 	stw	r4,-16(fp)
  81243c:	e17ffd15 	stw	r5,-12(fp)
  812440:	e1bffe15 	stw	r6,-8(fp)
  812444:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  812448:	e0800217 	ldw	r2,8(fp)
  81244c:	d8800015 	stw	r2,0(sp)
  812450:	e1ffff17 	ldw	r7,-4(fp)
  812454:	e1bffe17 	ldw	r6,-8(fp)
  812458:	e17ffd17 	ldw	r5,-12(fp)
  81245c:	e13ffc17 	ldw	r4,-16(fp)
  812460:	08125d80 	call	8125d8 <alt_iic_isr_register>
}  
  812464:	e037883a 	mov	sp,fp
  812468:	dfc00117 	ldw	ra,4(sp)
  81246c:	df000017 	ldw	fp,0(sp)
  812470:	dec00204 	addi	sp,sp,8
  812474:	f800283a 	ret

00812478 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  812478:	defff904 	addi	sp,sp,-28
  81247c:	df000615 	stw	fp,24(sp)
  812480:	df000604 	addi	fp,sp,24
  812484:	e13ffe15 	stw	r4,-8(fp)
  812488:	e17fff15 	stw	r5,-4(fp)
  81248c:	e0bfff17 	ldw	r2,-4(fp)
  812490:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812494:	0005303a 	rdctl	r2,status
  812498:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81249c:	e0fffb17 	ldw	r3,-20(fp)
  8124a0:	00bfff84 	movi	r2,-2
  8124a4:	1884703a 	and	r2,r3,r2
  8124a8:	1001703a 	wrctl	status,r2
  
  return context;
  8124ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8124b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  8124b4:	00c00044 	movi	r3,1
  8124b8:	e0bffa17 	ldw	r2,-24(fp)
  8124bc:	1884983a 	sll	r2,r3,r2
  8124c0:	1007883a 	mov	r3,r2
  8124c4:	d0a76817 	ldw	r2,-25184(gp)
  8124c8:	1884b03a 	or	r2,r3,r2
  8124cc:	d0a76815 	stw	r2,-25184(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8124d0:	d0a76817 	ldw	r2,-25184(gp)
  8124d4:	100170fa 	wrctl	ienable,r2
  8124d8:	e0bffc17 	ldw	r2,-16(fp)
  8124dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8124e0:	e0bffd17 	ldw	r2,-12(fp)
  8124e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8124e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  8124ec:	0001883a 	nop
}
  8124f0:	e037883a 	mov	sp,fp
  8124f4:	df000017 	ldw	fp,0(sp)
  8124f8:	dec00104 	addi	sp,sp,4
  8124fc:	f800283a 	ret

00812500 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  812500:	defff904 	addi	sp,sp,-28
  812504:	df000615 	stw	fp,24(sp)
  812508:	df000604 	addi	fp,sp,24
  81250c:	e13ffe15 	stw	r4,-8(fp)
  812510:	e17fff15 	stw	r5,-4(fp)
  812514:	e0bfff17 	ldw	r2,-4(fp)
  812518:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81251c:	0005303a 	rdctl	r2,status
  812520:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812524:	e0fffb17 	ldw	r3,-20(fp)
  812528:	00bfff84 	movi	r2,-2
  81252c:	1884703a 	and	r2,r3,r2
  812530:	1001703a 	wrctl	status,r2
  
  return context;
  812534:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  812538:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  81253c:	00c00044 	movi	r3,1
  812540:	e0bffa17 	ldw	r2,-24(fp)
  812544:	1884983a 	sll	r2,r3,r2
  812548:	0084303a 	nor	r2,zero,r2
  81254c:	1007883a 	mov	r3,r2
  812550:	d0a76817 	ldw	r2,-25184(gp)
  812554:	1884703a 	and	r2,r3,r2
  812558:	d0a76815 	stw	r2,-25184(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81255c:	d0a76817 	ldw	r2,-25184(gp)
  812560:	100170fa 	wrctl	ienable,r2
  812564:	e0bffc17 	ldw	r2,-16(fp)
  812568:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81256c:	e0bffd17 	ldw	r2,-12(fp)
  812570:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  812574:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  812578:	0001883a 	nop
}
  81257c:	e037883a 	mov	sp,fp
  812580:	df000017 	ldw	fp,0(sp)
  812584:	dec00104 	addi	sp,sp,4
  812588:	f800283a 	ret

0081258c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  81258c:	defffc04 	addi	sp,sp,-16
  812590:	df000315 	stw	fp,12(sp)
  812594:	df000304 	addi	fp,sp,12
  812598:	e13ffe15 	stw	r4,-8(fp)
  81259c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8125a0:	000530fa 	rdctl	r2,ienable
  8125a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8125a8:	00c00044 	movi	r3,1
  8125ac:	e0bfff17 	ldw	r2,-4(fp)
  8125b0:	1884983a 	sll	r2,r3,r2
  8125b4:	1007883a 	mov	r3,r2
  8125b8:	e0bffd17 	ldw	r2,-12(fp)
  8125bc:	1884703a 	and	r2,r3,r2
  8125c0:	1004c03a 	cmpne	r2,r2,zero
  8125c4:	10803fcc 	andi	r2,r2,255
}
  8125c8:	e037883a 	mov	sp,fp
  8125cc:	df000017 	ldw	fp,0(sp)
  8125d0:	dec00104 	addi	sp,sp,4
  8125d4:	f800283a 	ret

008125d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8125d8:	defff504 	addi	sp,sp,-44
  8125dc:	dfc00a15 	stw	ra,40(sp)
  8125e0:	df000915 	stw	fp,36(sp)
  8125e4:	df000904 	addi	fp,sp,36
  8125e8:	e13ffc15 	stw	r4,-16(fp)
  8125ec:	e17ffd15 	stw	r5,-12(fp)
  8125f0:	e1bffe15 	stw	r6,-8(fp)
  8125f4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  8125f8:	00bffa84 	movi	r2,-22
  8125fc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  812600:	e0bffd17 	ldw	r2,-12(fp)
  812604:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  812608:	e0bff817 	ldw	r2,-32(fp)
  81260c:	10800808 	cmpgei	r2,r2,32
  812610:	1000271e 	bne	r2,zero,8126b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812614:	0005303a 	rdctl	r2,status
  812618:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81261c:	e0fffb17 	ldw	r3,-20(fp)
  812620:	00bfff84 	movi	r2,-2
  812624:	1884703a 	and	r2,r3,r2
  812628:	1001703a 	wrctl	status,r2
  
  return context;
  81262c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  812630:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  812634:	00802074 	movhi	r2,129
  812638:	109bff04 	addi	r2,r2,28668
  81263c:	e0fff817 	ldw	r3,-32(fp)
  812640:	180690fa 	slli	r3,r3,3
  812644:	10c5883a 	add	r2,r2,r3
  812648:	e0fffe17 	ldw	r3,-8(fp)
  81264c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  812650:	00802074 	movhi	r2,129
  812654:	109bff04 	addi	r2,r2,28668
  812658:	e0fff817 	ldw	r3,-32(fp)
  81265c:	180690fa 	slli	r3,r3,3
  812660:	10c5883a 	add	r2,r2,r3
  812664:	10800104 	addi	r2,r2,4
  812668:	e0ffff17 	ldw	r3,-4(fp)
  81266c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  812670:	e0bffe17 	ldw	r2,-8(fp)
  812674:	10000526 	beq	r2,zero,81268c <alt_iic_isr_register+0xb4>
  812678:	e0bff817 	ldw	r2,-32(fp)
  81267c:	100b883a 	mov	r5,r2
  812680:	e13ffc17 	ldw	r4,-16(fp)
  812684:	08124780 	call	812478 <alt_ic_irq_enable>
  812688:	00000406 	br	81269c <alt_iic_isr_register+0xc4>
  81268c:	e0bff817 	ldw	r2,-32(fp)
  812690:	100b883a 	mov	r5,r2
  812694:	e13ffc17 	ldw	r4,-16(fp)
  812698:	08125000 	call	812500 <alt_ic_irq_disable>
  81269c:	e0bff715 	stw	r2,-36(fp)
  8126a0:	e0bffa17 	ldw	r2,-24(fp)
  8126a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8126a8:	e0bff917 	ldw	r2,-28(fp)
  8126ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8126b0:	e0bff717 	ldw	r2,-36(fp)
}
  8126b4:	e037883a 	mov	sp,fp
  8126b8:	dfc00117 	ldw	ra,4(sp)
  8126bc:	df000017 	ldw	fp,0(sp)
  8126c0:	dec00204 	addi	sp,sp,8
  8126c4:	f800283a 	ret

008126c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8126c8:	defff904 	addi	sp,sp,-28
  8126cc:	dfc00615 	stw	ra,24(sp)
  8126d0:	df000515 	stw	fp,20(sp)
  8126d4:	df000504 	addi	fp,sp,20
  8126d8:	e13ffc15 	stw	r4,-16(fp)
  8126dc:	e17ffd15 	stw	r5,-12(fp)
  8126e0:	e1bffe15 	stw	r6,-8(fp)
  8126e4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8126e8:	e1bfff17 	ldw	r6,-4(fp)
  8126ec:	e17ffe17 	ldw	r5,-8(fp)
  8126f0:	e13ffd17 	ldw	r4,-12(fp)
  8126f4:	080f5440 	call	80f544 <open>
  8126f8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8126fc:	e0bffb17 	ldw	r2,-20(fp)
  812700:	10001c16 	blt	r2,zero,812774 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  812704:	00802074 	movhi	r2,129
  812708:	108f8904 	addi	r2,r2,15908
  81270c:	e0fffb17 	ldw	r3,-20(fp)
  812710:	18c00324 	muli	r3,r3,12
  812714:	10c5883a 	add	r2,r2,r3
  812718:	10c00017 	ldw	r3,0(r2)
  81271c:	e0bffc17 	ldw	r2,-16(fp)
  812720:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  812724:	00802074 	movhi	r2,129
  812728:	108f8904 	addi	r2,r2,15908
  81272c:	e0fffb17 	ldw	r3,-20(fp)
  812730:	18c00324 	muli	r3,r3,12
  812734:	10c5883a 	add	r2,r2,r3
  812738:	10800104 	addi	r2,r2,4
  81273c:	10c00017 	ldw	r3,0(r2)
  812740:	e0bffc17 	ldw	r2,-16(fp)
  812744:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  812748:	00802074 	movhi	r2,129
  81274c:	108f8904 	addi	r2,r2,15908
  812750:	e0fffb17 	ldw	r3,-20(fp)
  812754:	18c00324 	muli	r3,r3,12
  812758:	10c5883a 	add	r2,r2,r3
  81275c:	10800204 	addi	r2,r2,8
  812760:	10c00017 	ldw	r3,0(r2)
  812764:	e0bffc17 	ldw	r2,-16(fp)
  812768:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81276c:	e13ffb17 	ldw	r4,-20(fp)
  812770:	080f7d00 	call	80f7d0 <alt_release_fd>
  }
} 
  812774:	0001883a 	nop
  812778:	e037883a 	mov	sp,fp
  81277c:	dfc00117 	ldw	ra,4(sp)
  812780:	df000017 	ldw	fp,0(sp)
  812784:	dec00204 	addi	sp,sp,8
  812788:	f800283a 	ret

0081278c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81278c:	defffb04 	addi	sp,sp,-20
  812790:	dfc00415 	stw	ra,16(sp)
  812794:	df000315 	stw	fp,12(sp)
  812798:	df000304 	addi	fp,sp,12
  81279c:	e13ffd15 	stw	r4,-12(fp)
  8127a0:	e17ffe15 	stw	r5,-8(fp)
  8127a4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8127a8:	01c07fc4 	movi	r7,511
  8127ac:	01800044 	movi	r6,1
  8127b0:	e17ffd17 	ldw	r5,-12(fp)
  8127b4:	01002074 	movhi	r4,129
  8127b8:	210f8c04 	addi	r4,r4,15920
  8127bc:	08126c80 	call	8126c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8127c0:	01c07fc4 	movi	r7,511
  8127c4:	000d883a 	mov	r6,zero
  8127c8:	e17ffe17 	ldw	r5,-8(fp)
  8127cc:	01002074 	movhi	r4,129
  8127d0:	210f8904 	addi	r4,r4,15908
  8127d4:	08126c80 	call	8126c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8127d8:	01c07fc4 	movi	r7,511
  8127dc:	01800044 	movi	r6,1
  8127e0:	e17fff17 	ldw	r5,-4(fp)
  8127e4:	01002074 	movhi	r4,129
  8127e8:	210f8f04 	addi	r4,r4,15932
  8127ec:	08126c80 	call	8126c8 <alt_open_fd>
}  
  8127f0:	0001883a 	nop
  8127f4:	e037883a 	mov	sp,fp
  8127f8:	dfc00117 	ldw	ra,4(sp)
  8127fc:	df000017 	ldw	fp,0(sp)
  812800:	dec00204 	addi	sp,sp,8
  812804:	f800283a 	ret

00812808 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  812808:	defffd04 	addi	sp,sp,-12
  81280c:	dfc00215 	stw	ra,8(sp)
  812810:	df000115 	stw	fp,4(sp)
  812814:	df000104 	addi	fp,sp,4
  812818:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  81281c:	e13fff17 	ldw	r4,-4(fp)
  812820:	081285c0 	call	81285c <alt_busy_sleep>
}
  812824:	e037883a 	mov	sp,fp
  812828:	dfc00117 	ldw	ra,4(sp)
  81282c:	df000017 	ldw	fp,0(sp)
  812830:	dec00204 	addi	sp,sp,8
  812834:	f800283a 	ret

00812838 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  812838:	deffff04 	addi	sp,sp,-4
  81283c:	df000015 	stw	fp,0(sp)
  812840:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  812844:	000170fa 	wrctl	ienable,zero
}
  812848:	0001883a 	nop
  81284c:	e037883a 	mov	sp,fp
  812850:	df000017 	ldw	fp,0(sp)
  812854:	dec00104 	addi	sp,sp,4
  812858:	f800283a 	ret

0081285c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81285c:	defffa04 	addi	sp,sp,-24
  812860:	dfc00515 	stw	ra,20(sp)
  812864:	df000415 	stw	fp,16(sp)
  812868:	df000404 	addi	fp,sp,16
  81286c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  812870:	008000c4 	movi	r2,3
  812874:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  812878:	e0fffd17 	ldw	r3,-12(fp)
  81287c:	008003f4 	movhi	r2,15
  812880:	10909004 	addi	r2,r2,16960
  812884:	1885383a 	mul	r2,r3,r2
  812888:	100b883a 	mov	r5,r2
  81288c:	0100bef4 	movhi	r4,763
  812890:	213c2004 	addi	r4,r4,-3968
  812894:	08014b80 	call	8014b8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  812898:	100b883a 	mov	r5,r2
  81289c:	01200034 	movhi	r4,32768
  8128a0:	213fffc4 	addi	r4,r4,-1
  8128a4:	08014b80 	call	8014b8 <__udivsi3>
  8128a8:	100b883a 	mov	r5,r2
  8128ac:	e13fff17 	ldw	r4,-4(fp)
  8128b0:	08014b80 	call	8014b8 <__udivsi3>
  8128b4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8128b8:	e0bffe17 	ldw	r2,-8(fp)
  8128bc:	10002a26 	beq	r2,zero,812968 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  8128c0:	e03ffc15 	stw	zero,-16(fp)
  8128c4:	00001706 	br	812924 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8128c8:	00a00034 	movhi	r2,32768
  8128cc:	10bfffc4 	addi	r2,r2,-1
  8128d0:	10bfffc4 	addi	r2,r2,-1
  8128d4:	103ffe1e 	bne	r2,zero,8128d0 <__alt_mem_onchip_mem+0xff80a8d0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  8128d8:	e0fffd17 	ldw	r3,-12(fp)
  8128dc:	008003f4 	movhi	r2,15
  8128e0:	10909004 	addi	r2,r2,16960
  8128e4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8128e8:	100b883a 	mov	r5,r2
  8128ec:	0100bef4 	movhi	r4,763
  8128f0:	213c2004 	addi	r4,r4,-3968
  8128f4:	08014b80 	call	8014b8 <__udivsi3>
  8128f8:	100b883a 	mov	r5,r2
  8128fc:	01200034 	movhi	r4,32768
  812900:	213fffc4 	addi	r4,r4,-1
  812904:	08014b80 	call	8014b8 <__udivsi3>
  812908:	1007883a 	mov	r3,r2
  81290c:	e0bfff17 	ldw	r2,-4(fp)
  812910:	10c5c83a 	sub	r2,r2,r3
  812914:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  812918:	e0bffc17 	ldw	r2,-16(fp)
  81291c:	10800044 	addi	r2,r2,1
  812920:	e0bffc15 	stw	r2,-16(fp)
  812924:	e0fffc17 	ldw	r3,-16(fp)
  812928:	e0bffe17 	ldw	r2,-8(fp)
  81292c:	18bfe616 	blt	r3,r2,8128c8 <__alt_mem_onchip_mem+0xff80a8c8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  812930:	e0fffd17 	ldw	r3,-12(fp)
  812934:	008003f4 	movhi	r2,15
  812938:	10909004 	addi	r2,r2,16960
  81293c:	1885383a 	mul	r2,r3,r2
  812940:	100b883a 	mov	r5,r2
  812944:	0100bef4 	movhi	r4,763
  812948:	213c2004 	addi	r4,r4,-3968
  81294c:	08014b80 	call	8014b8 <__udivsi3>
  812950:	1007883a 	mov	r3,r2
  812954:	e0bfff17 	ldw	r2,-4(fp)
  812958:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81295c:	10bfffc4 	addi	r2,r2,-1
  812960:	103ffe1e 	bne	r2,zero,81295c <__alt_mem_onchip_mem+0xff80a95c>
  812964:	00000d06 	br	81299c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  812968:	e0fffd17 	ldw	r3,-12(fp)
  81296c:	008003f4 	movhi	r2,15
  812970:	10909004 	addi	r2,r2,16960
  812974:	1885383a 	mul	r2,r3,r2
  812978:	100b883a 	mov	r5,r2
  81297c:	0100bef4 	movhi	r4,763
  812980:	213c2004 	addi	r4,r4,-3968
  812984:	08014b80 	call	8014b8 <__udivsi3>
  812988:	1007883a 	mov	r3,r2
  81298c:	e0bfff17 	ldw	r2,-4(fp)
  812990:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  812994:	10bfffc4 	addi	r2,r2,-1
  812998:	00bffe16 	blt	zero,r2,812994 <__alt_mem_onchip_mem+0xff80a994>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81299c:	0005883a 	mov	r2,zero
}
  8129a0:	e037883a 	mov	sp,fp
  8129a4:	dfc00117 	ldw	ra,4(sp)
  8129a8:	df000017 	ldw	fp,0(sp)
  8129ac:	dec00204 	addi	sp,sp,8
  8129b0:	f800283a 	ret

008129b4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8129b4:	defffb04 	addi	sp,sp,-20
  8129b8:	df000415 	stw	fp,16(sp)
  8129bc:	df000404 	addi	fp,sp,16
  8129c0:	e13ffe15 	stw	r4,-8(fp)
  8129c4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8129c8:	e0bfff17 	ldw	r2,-4(fp)
  8129cc:	10840070 	cmpltui	r2,r2,4097
  8129d0:	1000021e 	bne	r2,zero,8129dc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8129d4:	00840004 	movi	r2,4096
  8129d8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8129dc:	e0fffe17 	ldw	r3,-8(fp)
  8129e0:	e0bfff17 	ldw	r2,-4(fp)
  8129e4:	1885883a 	add	r2,r3,r2
  8129e8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8129ec:	e0bffe17 	ldw	r2,-8(fp)
  8129f0:	e0bffc15 	stw	r2,-16(fp)
  8129f4:	00000506 	br	812a0c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8129f8:	e0bffc17 	ldw	r2,-16(fp)
  8129fc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  812a00:	e0bffc17 	ldw	r2,-16(fp)
  812a04:	10800804 	addi	r2,r2,32
  812a08:	e0bffc15 	stw	r2,-16(fp)
  812a0c:	e0fffc17 	ldw	r3,-16(fp)
  812a10:	e0bffd17 	ldw	r2,-12(fp)
  812a14:	18bff836 	bltu	r3,r2,8129f8 <__alt_mem_onchip_mem+0xff80a9f8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  812a18:	e0bffe17 	ldw	r2,-8(fp)
  812a1c:	108007cc 	andi	r2,r2,31
  812a20:	10000226 	beq	r2,zero,812a2c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  812a24:	e0bffc17 	ldw	r2,-16(fp)
  812a28:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  812a2c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  812a30:	0001883a 	nop
  812a34:	e037883a 	mov	sp,fp
  812a38:	df000017 	ldw	fp,0(sp)
  812a3c:	dec00104 	addi	sp,sp,4
  812a40:	f800283a 	ret

00812a44 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  812a44:	defffe04 	addi	sp,sp,-8
  812a48:	df000115 	stw	fp,4(sp)
  812a4c:	df000104 	addi	fp,sp,4
  812a50:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  812a54:	e0bfff17 	ldw	r2,-4(fp)
  812a58:	10bffe84 	addi	r2,r2,-6
  812a5c:	10c00428 	cmpgeui	r3,r2,16
  812a60:	18001a1e 	bne	r3,zero,812acc <alt_exception_cause_generated_bad_addr+0x88>
  812a64:	100690ba 	slli	r3,r2,2
  812a68:	00802074 	movhi	r2,129
  812a6c:	108a9f04 	addi	r2,r2,10876
  812a70:	1885883a 	add	r2,r3,r2
  812a74:	10800017 	ldw	r2,0(r2)
  812a78:	1000683a 	jmp	r2
  812a7c:	00812abc 	xorhi	r2,zero,1194
  812a80:	00812abc 	xorhi	r2,zero,1194
  812a84:	00812acc 	andi	r2,zero,1195
  812a88:	00812acc 	andi	r2,zero,1195
  812a8c:	00812acc 	andi	r2,zero,1195
  812a90:	00812abc 	xorhi	r2,zero,1194
  812a94:	00812ac4 	movi	r2,1195
  812a98:	00812acc 	andi	r2,zero,1195
  812a9c:	00812abc 	xorhi	r2,zero,1194
  812aa0:	00812abc 	xorhi	r2,zero,1194
  812aa4:	00812acc 	andi	r2,zero,1195
  812aa8:	00812abc 	xorhi	r2,zero,1194
  812aac:	00812ac4 	movi	r2,1195
  812ab0:	00812acc 	andi	r2,zero,1195
  812ab4:	00812acc 	andi	r2,zero,1195
  812ab8:	00812abc 	xorhi	r2,zero,1194
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  812abc:	00800044 	movi	r2,1
  812ac0:	00000306 	br	812ad0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  812ac4:	0005883a 	mov	r2,zero
  812ac8:	00000106 	br	812ad0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  812acc:	0005883a 	mov	r2,zero
  }
}
  812ad0:	e037883a 	mov	sp,fp
  812ad4:	df000017 	ldw	fp,0(sp)
  812ad8:	dec00104 	addi	sp,sp,4
  812adc:	f800283a 	ret

00812ae0 <atexit>:
  812ae0:	200b883a 	mov	r5,r4
  812ae4:	000f883a 	mov	r7,zero
  812ae8:	000d883a 	mov	r6,zero
  812aec:	0009883a 	mov	r4,zero
  812af0:	0812ba81 	jmpi	812ba8 <__register_exitproc>

00812af4 <exit>:
  812af4:	defffe04 	addi	sp,sp,-8
  812af8:	000b883a 	mov	r5,zero
  812afc:	dc000015 	stw	r16,0(sp)
  812b00:	dfc00115 	stw	ra,4(sp)
  812b04:	2021883a 	mov	r16,r4
  812b08:	0812cc00 	call	812cc0 <__call_exitprocs>
  812b0c:	00802074 	movhi	r2,129
  812b10:	10947a04 	addi	r2,r2,20968
  812b14:	11000017 	ldw	r4,0(r2)
  812b18:	20800f17 	ldw	r2,60(r4)
  812b1c:	10000126 	beq	r2,zero,812b24 <exit+0x30>
  812b20:	103ee83a 	callr	r2
  812b24:	8009883a 	mov	r4,r16
  812b28:	0812e400 	call	812e40 <_exit>

00812b2c <memcmp>:
  812b2c:	01c000c4 	movi	r7,3
  812b30:	3980192e 	bgeu	r7,r6,812b98 <memcmp+0x6c>
  812b34:	2144b03a 	or	r2,r4,r5
  812b38:	11c4703a 	and	r2,r2,r7
  812b3c:	10000f26 	beq	r2,zero,812b7c <memcmp+0x50>
  812b40:	20800003 	ldbu	r2,0(r4)
  812b44:	28c00003 	ldbu	r3,0(r5)
  812b48:	10c0151e 	bne	r2,r3,812ba0 <memcmp+0x74>
  812b4c:	31bfff84 	addi	r6,r6,-2
  812b50:	01ffffc4 	movi	r7,-1
  812b54:	00000406 	br	812b68 <memcmp+0x3c>
  812b58:	20800003 	ldbu	r2,0(r4)
  812b5c:	28c00003 	ldbu	r3,0(r5)
  812b60:	31bfffc4 	addi	r6,r6,-1
  812b64:	10c00e1e 	bne	r2,r3,812ba0 <memcmp+0x74>
  812b68:	21000044 	addi	r4,r4,1
  812b6c:	29400044 	addi	r5,r5,1
  812b70:	31fff91e 	bne	r6,r7,812b58 <__alt_mem_onchip_mem+0xff80ab58>
  812b74:	0005883a 	mov	r2,zero
  812b78:	f800283a 	ret
  812b7c:	20c00017 	ldw	r3,0(r4)
  812b80:	28800017 	ldw	r2,0(r5)
  812b84:	18bfee1e 	bne	r3,r2,812b40 <__alt_mem_onchip_mem+0xff80ab40>
  812b88:	31bfff04 	addi	r6,r6,-4
  812b8c:	21000104 	addi	r4,r4,4
  812b90:	29400104 	addi	r5,r5,4
  812b94:	39bff936 	bltu	r7,r6,812b7c <__alt_mem_onchip_mem+0xff80ab7c>
  812b98:	303fe91e 	bne	r6,zero,812b40 <__alt_mem_onchip_mem+0xff80ab40>
  812b9c:	003ff506 	br	812b74 <__alt_mem_onchip_mem+0xff80ab74>
  812ba0:	10c5c83a 	sub	r2,r2,r3
  812ba4:	f800283a 	ret

00812ba8 <__register_exitproc>:
  812ba8:	defffa04 	addi	sp,sp,-24
  812bac:	dc000315 	stw	r16,12(sp)
  812bb0:	04002074 	movhi	r16,129
  812bb4:	84147a04 	addi	r16,r16,20968
  812bb8:	80c00017 	ldw	r3,0(r16)
  812bbc:	dc400415 	stw	r17,16(sp)
  812bc0:	dfc00515 	stw	ra,20(sp)
  812bc4:	18805217 	ldw	r2,328(r3)
  812bc8:	2023883a 	mov	r17,r4
  812bcc:	10003726 	beq	r2,zero,812cac <__register_exitproc+0x104>
  812bd0:	10c00117 	ldw	r3,4(r2)
  812bd4:	010007c4 	movi	r4,31
  812bd8:	20c00e16 	blt	r4,r3,812c14 <__register_exitproc+0x6c>
  812bdc:	1a000044 	addi	r8,r3,1
  812be0:	8800221e 	bne	r17,zero,812c6c <__register_exitproc+0xc4>
  812be4:	18c00084 	addi	r3,r3,2
  812be8:	18c7883a 	add	r3,r3,r3
  812bec:	18c7883a 	add	r3,r3,r3
  812bf0:	12000115 	stw	r8,4(r2)
  812bf4:	10c7883a 	add	r3,r2,r3
  812bf8:	19400015 	stw	r5,0(r3)
  812bfc:	0005883a 	mov	r2,zero
  812c00:	dfc00517 	ldw	ra,20(sp)
  812c04:	dc400417 	ldw	r17,16(sp)
  812c08:	dc000317 	ldw	r16,12(sp)
  812c0c:	dec00604 	addi	sp,sp,24
  812c10:	f800283a 	ret
  812c14:	00800034 	movhi	r2,0
  812c18:	10800004 	addi	r2,r2,0
  812c1c:	10002626 	beq	r2,zero,812cb8 <__register_exitproc+0x110>
  812c20:	01006404 	movi	r4,400
  812c24:	d9400015 	stw	r5,0(sp)
  812c28:	d9800115 	stw	r6,4(sp)
  812c2c:	d9c00215 	stw	r7,8(sp)
  812c30:	00000000 	call	0 <__reset-0x800000>
  812c34:	d9400017 	ldw	r5,0(sp)
  812c38:	d9800117 	ldw	r6,4(sp)
  812c3c:	d9c00217 	ldw	r7,8(sp)
  812c40:	10001d26 	beq	r2,zero,812cb8 <__register_exitproc+0x110>
  812c44:	81000017 	ldw	r4,0(r16)
  812c48:	10000115 	stw	zero,4(r2)
  812c4c:	02000044 	movi	r8,1
  812c50:	22405217 	ldw	r9,328(r4)
  812c54:	0007883a 	mov	r3,zero
  812c58:	12400015 	stw	r9,0(r2)
  812c5c:	20805215 	stw	r2,328(r4)
  812c60:	10006215 	stw	zero,392(r2)
  812c64:	10006315 	stw	zero,396(r2)
  812c68:	883fde26 	beq	r17,zero,812be4 <__alt_mem_onchip_mem+0xff80abe4>
  812c6c:	18c9883a 	add	r4,r3,r3
  812c70:	2109883a 	add	r4,r4,r4
  812c74:	1109883a 	add	r4,r2,r4
  812c78:	21802215 	stw	r6,136(r4)
  812c7c:	01800044 	movi	r6,1
  812c80:	12406217 	ldw	r9,392(r2)
  812c84:	30cc983a 	sll	r6,r6,r3
  812c88:	4992b03a 	or	r9,r9,r6
  812c8c:	12406215 	stw	r9,392(r2)
  812c90:	21c04215 	stw	r7,264(r4)
  812c94:	01000084 	movi	r4,2
  812c98:	893fd21e 	bne	r17,r4,812be4 <__alt_mem_onchip_mem+0xff80abe4>
  812c9c:	11006317 	ldw	r4,396(r2)
  812ca0:	218cb03a 	or	r6,r4,r6
  812ca4:	11806315 	stw	r6,396(r2)
  812ca8:	003fce06 	br	812be4 <__alt_mem_onchip_mem+0xff80abe4>
  812cac:	18805304 	addi	r2,r3,332
  812cb0:	18805215 	stw	r2,328(r3)
  812cb4:	003fc606 	br	812bd0 <__alt_mem_onchip_mem+0xff80abd0>
  812cb8:	00bfffc4 	movi	r2,-1
  812cbc:	003fd006 	br	812c00 <__alt_mem_onchip_mem+0xff80ac00>

00812cc0 <__call_exitprocs>:
  812cc0:	defff504 	addi	sp,sp,-44
  812cc4:	df000915 	stw	fp,36(sp)
  812cc8:	dd400615 	stw	r21,24(sp)
  812ccc:	dc800315 	stw	r18,12(sp)
  812cd0:	dfc00a15 	stw	ra,40(sp)
  812cd4:	ddc00815 	stw	r23,32(sp)
  812cd8:	dd800715 	stw	r22,28(sp)
  812cdc:	dd000515 	stw	r20,20(sp)
  812ce0:	dcc00415 	stw	r19,16(sp)
  812ce4:	dc400215 	stw	r17,8(sp)
  812ce8:	dc000115 	stw	r16,4(sp)
  812cec:	d9000015 	stw	r4,0(sp)
  812cf0:	2839883a 	mov	fp,r5
  812cf4:	04800044 	movi	r18,1
  812cf8:	057fffc4 	movi	r21,-1
  812cfc:	00802074 	movhi	r2,129
  812d00:	10947a04 	addi	r2,r2,20968
  812d04:	12000017 	ldw	r8,0(r2)
  812d08:	45005217 	ldw	r20,328(r8)
  812d0c:	44c05204 	addi	r19,r8,328
  812d10:	a0001c26 	beq	r20,zero,812d84 <__call_exitprocs+0xc4>
  812d14:	a0800117 	ldw	r2,4(r20)
  812d18:	15ffffc4 	addi	r23,r2,-1
  812d1c:	b8000d16 	blt	r23,zero,812d54 <__call_exitprocs+0x94>
  812d20:	14000044 	addi	r16,r2,1
  812d24:	8421883a 	add	r16,r16,r16
  812d28:	8421883a 	add	r16,r16,r16
  812d2c:	84402004 	addi	r17,r16,128
  812d30:	a463883a 	add	r17,r20,r17
  812d34:	a421883a 	add	r16,r20,r16
  812d38:	e0001e26 	beq	fp,zero,812db4 <__call_exitprocs+0xf4>
  812d3c:	80804017 	ldw	r2,256(r16)
  812d40:	e0801c26 	beq	fp,r2,812db4 <__call_exitprocs+0xf4>
  812d44:	bdffffc4 	addi	r23,r23,-1
  812d48:	843fff04 	addi	r16,r16,-4
  812d4c:	8c7fff04 	addi	r17,r17,-4
  812d50:	bd7ff91e 	bne	r23,r21,812d38 <__alt_mem_onchip_mem+0xff80ad38>
  812d54:	00800034 	movhi	r2,0
  812d58:	10800004 	addi	r2,r2,0
  812d5c:	10000926 	beq	r2,zero,812d84 <__call_exitprocs+0xc4>
  812d60:	a0800117 	ldw	r2,4(r20)
  812d64:	1000301e 	bne	r2,zero,812e28 <__call_exitprocs+0x168>
  812d68:	a0800017 	ldw	r2,0(r20)
  812d6c:	10003226 	beq	r2,zero,812e38 <__call_exitprocs+0x178>
  812d70:	a009883a 	mov	r4,r20
  812d74:	98800015 	stw	r2,0(r19)
  812d78:	00000000 	call	0 <__reset-0x800000>
  812d7c:	9d000017 	ldw	r20,0(r19)
  812d80:	a03fe41e 	bne	r20,zero,812d14 <__alt_mem_onchip_mem+0xff80ad14>
  812d84:	dfc00a17 	ldw	ra,40(sp)
  812d88:	df000917 	ldw	fp,36(sp)
  812d8c:	ddc00817 	ldw	r23,32(sp)
  812d90:	dd800717 	ldw	r22,28(sp)
  812d94:	dd400617 	ldw	r21,24(sp)
  812d98:	dd000517 	ldw	r20,20(sp)
  812d9c:	dcc00417 	ldw	r19,16(sp)
  812da0:	dc800317 	ldw	r18,12(sp)
  812da4:	dc400217 	ldw	r17,8(sp)
  812da8:	dc000117 	ldw	r16,4(sp)
  812dac:	dec00b04 	addi	sp,sp,44
  812db0:	f800283a 	ret
  812db4:	a0800117 	ldw	r2,4(r20)
  812db8:	80c00017 	ldw	r3,0(r16)
  812dbc:	10bfffc4 	addi	r2,r2,-1
  812dc0:	15c01426 	beq	r2,r23,812e14 <__call_exitprocs+0x154>
  812dc4:	80000015 	stw	zero,0(r16)
  812dc8:	183fde26 	beq	r3,zero,812d44 <__alt_mem_onchip_mem+0xff80ad44>
  812dcc:	95c8983a 	sll	r4,r18,r23
  812dd0:	a0806217 	ldw	r2,392(r20)
  812dd4:	a5800117 	ldw	r22,4(r20)
  812dd8:	2084703a 	and	r2,r4,r2
  812ddc:	10000b26 	beq	r2,zero,812e0c <__call_exitprocs+0x14c>
  812de0:	a0806317 	ldw	r2,396(r20)
  812de4:	2088703a 	and	r4,r4,r2
  812de8:	20000c1e 	bne	r4,zero,812e1c <__call_exitprocs+0x15c>
  812dec:	89400017 	ldw	r5,0(r17)
  812df0:	d9000017 	ldw	r4,0(sp)
  812df4:	183ee83a 	callr	r3
  812df8:	a0800117 	ldw	r2,4(r20)
  812dfc:	15bfbf1e 	bne	r2,r22,812cfc <__alt_mem_onchip_mem+0xff80acfc>
  812e00:	98800017 	ldw	r2,0(r19)
  812e04:	153fcf26 	beq	r2,r20,812d44 <__alt_mem_onchip_mem+0xff80ad44>
  812e08:	003fbc06 	br	812cfc <__alt_mem_onchip_mem+0xff80acfc>
  812e0c:	183ee83a 	callr	r3
  812e10:	003ff906 	br	812df8 <__alt_mem_onchip_mem+0xff80adf8>
  812e14:	a5c00115 	stw	r23,4(r20)
  812e18:	003feb06 	br	812dc8 <__alt_mem_onchip_mem+0xff80adc8>
  812e1c:	89000017 	ldw	r4,0(r17)
  812e20:	183ee83a 	callr	r3
  812e24:	003ff406 	br	812df8 <__alt_mem_onchip_mem+0xff80adf8>
  812e28:	a0800017 	ldw	r2,0(r20)
  812e2c:	a027883a 	mov	r19,r20
  812e30:	1029883a 	mov	r20,r2
  812e34:	003fb606 	br	812d10 <__alt_mem_onchip_mem+0xff80ad10>
  812e38:	0005883a 	mov	r2,zero
  812e3c:	003ffb06 	br	812e2c <__alt_mem_onchip_mem+0xff80ae2c>

00812e40 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  812e40:	defffd04 	addi	sp,sp,-12
  812e44:	df000215 	stw	fp,8(sp)
  812e48:	df000204 	addi	fp,sp,8
  812e4c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  812e50:	0001883a 	nop
  812e54:	e0bfff17 	ldw	r2,-4(fp)
  812e58:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  812e5c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  812e60:	10000226 	beq	r2,zero,812e6c <_exit+0x2c>
    ALT_SIM_FAIL();
  812e64:	002af070 	cmpltui	zero,zero,43969
  812e68:	00000106 	br	812e70 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  812e6c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  812e70:	003fff06 	br	812e70 <__alt_mem_onchip_mem+0xff80ae70>
