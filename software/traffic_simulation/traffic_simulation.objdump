
traffic_simulation.elf:     file format elf32-littlenios2
traffic_simulation.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00012370 memsz 0x00012370 flags r-x
    LOAD off    0x00013390 vaddr 0x00812390 paddr 0x00814068 align 2**12
         filesz 0x00001cd8 memsz 0x00001cd8 flags rw-
    LOAD off    0x00015d40 vaddr 0x00815d40 paddr 0x00815d40 align 2**12
         filesz 0x00000000 memsz 0x000001a8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011b5c  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005f0  00811da0  00811da0  00012da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cd8  00812390  00814068  00013390  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a8  00815d40  00815d40  00015d40  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00815ee8  00815ee8  00015068  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  00015068  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015068  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010d0  00000000  00000000  00015090  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00029dee  00000000  00000000  00016160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000aad6  00000000  00000000  0003ff4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d0b0  00000000  00000000  0004aa24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000027ec  00000000  00000000  00057ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000417b  00000000  00000000  0005a2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001823c  00000000  00000000  0005e43b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00076678  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019a0  00000000  00000000  000766d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007bac2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007bac5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007bac8  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007bac9  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0007baca  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0007bad3  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0007badc  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000004  00000000  00000000  0007bae5  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000050  00000000  00000000  0007bae9  2**0
                  CONTENTS, READONLY
 27 .jdi          00003538  00000000  00000000  0007bb39  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000675c3  00000000  00000000  0007f071  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00811da0 l    d  .rodata	00000000 .rodata
00812390 l    d  .rwdata	00000000 .rwdata
00815d40 l    d  .bss	00000000 .bss
00815ee8 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../traffic_simulation_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
00812390 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00801bd0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00811e4a l     O .rodata	00000010 zeroes.4404
008041fc l     F .text	000000bc __sbprintf
00811e5a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
008044c0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00805ff0 l     F .text	00000008 __fp_unlock
00806004 l     F .text	0000019c __sinit.part.1
008061a0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00812bdc l     O .rwdata	00000020 lc_ctype_charset
00812bbc l     O .rwdata	00000020 lc_message_charset
00812bfc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00811e88 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00808adc l     F .text	000000fc __sprint_r.part.0
00811fbc l     O .rodata	00000010 blanks.4348
00811fac l     O .rodata	00000010 zeroes.4349
0080a068 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080dc2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080dd38 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080dd64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080dfd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080e0b0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080e19c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080e370 l     F .text	0000003c alt_get_errno
0080e3ac l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0080e5c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00814054 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080e9b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080eae8 l     F .text	00000034 alt_dev_reg
00812ddc l     O .rwdata	00001060 jtag_uart
00813e3c l     O .rwdata	00000120 lcd
00813f5c l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080ee10 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080f01c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00814060 l     O .rwdata	00000004 colstart
0080f654 l     F .text	000000b8 lcd_write_command
0080f70c l     F .text	000000d8 lcd_write_data
0080f7e4 l     F .text	000000d0 lcd_clear_screen
0080f8b4 l     F .text	000001ec lcd_repaint_screen
0080faa0 l     F .text	000000cc lcd_scroll_up
0080fb6c l     F .text	000002ac lcd_handle_escape
008102f0 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00810530 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008107e0 l     F .text	0000009c altera_avalon_uart_irq
0081087c l     F .text	000000e4 altera_avalon_uart_rxirq
00810960 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00810afc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00810d14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00810f44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008115f4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0081220f l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00815da4 g     O .bss	00000004 alt_instruction_exception_handler
00808250 g     F .text	00000074 _mprec_log10
008003d4 g     F .text	0000006c lcd_set_mode
0080833c g     F .text	0000008c __any_on
00806eb4 g     F .text	00000054 _isatty_r
00811e94 g     O .rodata	00000028 __mprec_tinytens
0080e2ac g     F .text	0000007c alt_main
00801afc g     F .text	000000c0 _puts_r
00815de8 g     O .bss	00000100 alt_irq
00806fe4 g     F .text	00000060 _lseek_r
00814068 g       *ABS*	00000000 __flash_rwdata_start
00806390 g     F .text	000000ac __sflags
0080c62c g     F .text	00000088 .hidden __eqdf2
00815ee8 g       *ABS*	00000000 __alt_heap_start
0080a64c g     F .text	0000009c _wcrtomb_r
00801eec g     F .text	0000005c __sseek
00806340 g     F .text	00000010 __sinit
0080a4f4 g     F .text	00000140 __swbuf_r
00815d48 g     O .bss	00000004 lcd
00806f08 g     F .text	0000007c _setlocale_r
008061a8 g     F .text	00000068 __sfmoreglue
0080e34c g     F .text	00000024 __malloc_unlock
00807270 g     F .text	0000015c memmove
00806328 g     F .text	00000018 _cleanup
008073cc g     F .text	000000a8 _Balloc
00815dd0 g     O .bss	00000018 timer
0080c6b4 g     F .text	000000dc .hidden __gtdf2
00811764 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00815d44 g     O .bss	00000004 buttonValue
00800020 g       *ABS*	00000000 __flash_exceptions_start
00800f50 g     F .text	0000005c _fstat_r
00815d70 g     O .bss	00000004 errno
00801e68 g     F .text	00000008 __seofread
00815d94 g     O .bss	00000004 alt_argv
0081c020 g       *ABS*	00000000 _gp
00811734 g     F .text	00000030 usleep
00800354 g     F .text	00000040 tlc_timer_isr
00812c5c g     O .rwdata	00000180 alt_fd_list
008110e4 g     F .text	00000090 alt_find_dev
00807128 g     F .text	00000148 memcpy
00800394 g     F .text	00000020 camera_timer_isr
00805ff8 g     F .text	0000000c _cleanup_r
0080d918 g     F .text	000000dc .hidden __floatsidf
008116b8 g     F .text	0000007c alt_io_redirect
0080c790 g     F .text	000000f4 .hidden __ltdf2
00815d4c g     O .bss	00000004 pedNS
00811da0 g       *ABS*	00000000 __DTOR_END__
00801bbc g     F .text	00000014 puts
00811970 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080898c g     F .text	00000074 __fpclassifyd
008081ac g     F .text	000000a4 __ratio
0080a04c g     F .text	0000001c __vfiprintf_internal
008006e0 g     F .text	000000f8 pedestrian_tlc
0080f214 g     F .text	0000021c altera_avalon_jtag_uart_read
0080b3dc g     F .text	00000064 .hidden __udivsi3
0080e00c g     F .text	000000a4 isatty
00811ee4 g     O .rodata	000000c8 __mprec_tens
00806f84 g     F .text	0000000c __locale_charset
008118e0 g     F .text	00000090 alt_icache_flush
00815d7c g     O .bss	00000004 __malloc_top_pad
00814030 g     O .rwdata	00000004 __mb_cur_max
00806fb4 g     F .text	0000000c _localeconv_r
008077d8 g     F .text	0000003c __i2b
00806870 g     F .text	000004bc __sfvwrite_r
00801dc0 g     F .text	00000054 _sbrk_r
008006a0 g     F .text	00000020 configurable_tlc
008083c8 g     F .text	00000060 _read_r
00814048 g     O .rwdata	00000004 alt_max_fd
0080a1e8 g     F .text	000000f0 _fclose_r
00805fc0 g     F .text	00000030 fflush
008007d8 g     F .text	00000020 handle_vehicle_button
00815d78 g     O .bss	00000004 __malloc_max_sbrked_mem
0080de50 g     F .text	00000180 alt_irq_register
0080b498 g     F .text	000008ac .hidden __adddf3
00807f54 g     F .text	0000010c __b2d
0080adac g     F .text	00000538 .hidden __umoddi3
0080e1d8 g     F .text	000000d4 lseek
00814020 g     O .rwdata	00000004 _global_impure_ptr
00808428 g     F .text	00000564 _realloc_r
00815ee8 g       *ABS*	00000000 __bss_end
00811504 g     F .text	000000f0 alt_iic_isr_register
0080e8ac g     F .text	00000108 alt_tick
0080a834 g     F .text	00000578 .hidden __udivdi3
0080a450 g     F .text	00000024 _fputwc_r
00811ebc g     O .rodata	00000028 __mprec_bigtens
008075bc g     F .text	00000104 __s2b
0080d9f4 g     F .text	000000a8 .hidden __floatunsidf
00807c94 g     F .text	00000060 __mcmp
00810734 g     F .text	000000ac altera_avalon_uart_init
00806360 g     F .text	00000018 __fp_lock_all
008114b8 g     F .text	0000004c alt_ic_irq_enabled
0080e810 g     F .text	0000009c alt_alarm_stop
008006c0 g     F .text	00000020 camera_tlc
00815d8c g     O .bss	00000004 alt_irq_active
00800af0 g     F .text	00000444 _fseeko_r
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00812c34 g     O .rwdata	00000028 alt_dev_null
00810efc g     F .text	00000048 alt_dcache_flush_all
008076c0 g     F .text	00000068 __hi0bits
0080d898 g     F .text	00000080 .hidden __fixdfsi
00814068 g       *ABS*	00000000 __ram_rwdata_end
00814040 g     O .rwdata	00000008 alt_dev_list
0080e9f0 g     F .text	000000f8 write
00812390 g       *ABS*	00000000 __ram_rodata_end
0080dda0 g     F .text	000000b0 fstat
00800aac g     F .text	00000024 fprintf
0080c790 g     F .text	000000f4 .hidden __ledf2
00815d40 g     O .bss	00000004 LEDs
00807a0c g     F .text	00000140 __pow5mult
00808bf0 g     F .text	0000145c ___vfiprintf_internal_r
00815d88 g     O .bss	00000004 __nlocale_changed
0080b440 g     F .text	00000058 .hidden __umodsi3
00815ee8 g       *ABS*	00000000 end
0080fe18 g     F .text	000004d8 altera_avalon_lcd_16207_write
00800f34 g     F .text	0000001c fseeko
00815d50 g     O .bss	00000004 mode
00810d50 g     F .text	000001ac altera_avalon_uart_write
00800ad4 g     F .text	0000001c fseek
0080ed50 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00811da0 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008105a8 g     F .text	0000007c alt_avalon_timer_sc_init
00810684 g     F .text	00000060 altera_avalon_uart_write_fd
0080da9c g     F .text	00000064 .hidden __clzsi2
008106e4 g     F .text	00000050 altera_avalon_uart_close_fd
0080f430 g     F .text	00000224 altera_avalon_jtag_uart_write
00806350 g     F .text	00000004 __sfp_lock_acquire
00807044 g     F .text	000000e4 memchr
00801fe8 g     F .text	000021f8 ___vfprintf_internal_r
00806560 g     F .text	00000310 _free_r
00806f90 g     F .text	00000010 __locale_mb_cur_max
00811bec g     F .text	00000180 __call_exitprocs
00815d84 g     O .bss	00000004 __mlocale_changed
00814028 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00815d9c g     O .bss	00000004 _alt_tick_rate
00807b4c g     F .text	00000148 __lshift
00815d54 g     O .bss	00000004 next_traffic
00815da0 g     O .bss	00000004 _alt_nticks
0080e600 g     F .text	000000fc read
0080eb54 g     F .text	00000098 alt_sys_init
00815d58 g     O .bss	00000004 traffic
00801a9c g     F .text	00000060 _open_r
00811ad4 g     F .text	00000118 __register_exitproc
00807814 g     F .text	000001f8 __multiply
0080f0bc g     F .text	00000068 altera_avalon_jtag_uart_close
00812390 g       *ABS*	00000000 __ram_rwdata_start
00811da0 g       *ABS*	00000000 __ram_rodata_start
00815da8 g     O .bss	00000028 __malloc_current_mallinfo
00808060 g     F .text	0000014c __d2b
0080ebec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0081127c g     F .text	000000a4 alt_get_fd
00811788 g     F .text	00000158 alt_busy_sleep
0080446c g     F .text	00000054 _close_r
00811a58 g     F .text	0000007c memcmp
0080ecac g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00815ee8 g       *ABS*	00000000 __alt_stack_base
0080ecfc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00804318 g     F .text	00000154 __swsetup_r
0080bd44 g     F .text	000008e8 .hidden __divdf3
00806210 g     F .text	00000118 __sfp
008082c4 g     F .text	00000078 __copybits
008127b4 g     O .rwdata	00000408 __malloc_av_
0080635c g     F .text	00000004 __sinit_lock_release
0080c884 g     F .text	00000718 .hidden __muldf3
00801e14 g     F .text	00000054 __sread
00811174 g     F .text	00000108 alt_find_file
00810f80 g     F .text	000000a4 alt_dev_llist_insert
0080e328 g     F .text	00000024 __malloc_lock
00800a84 g     F .text	00000028 _fprintf_r
0080e760 g     F .text	000000b0 sbrk
00805f64 g     F .text	0000005c _fflush_r
0080a124 g     F .text	000000c4 _calloc_r
00800a6c g     F .text	00000018 fopen
00815d40 g       *ABS*	00000000 __bss_start
00801974 g     F .text	00000128 memset
008007f8 g     F .text	00000180 main
00815d98 g     O .bss	00000004 alt_envp
00815d74 g     O .bss	00000004 __malloc_max_total_mem
0080ec4c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080a634 g     F .text	00000018 __swbuf
0081039c g     F .text	00000134 altera_avalon_lcd_16207_init
00801f48 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080a2d8 g     F .text	00000014 fclose
008046c0 g     F .text	00001688 _dtoa_r
00801168 g     F .text	0000080c _malloc_r
0080a7a8 g     F .text	00000030 __ascii_wctomb
0081404c g     O .rwdata	00000004 alt_errno
008003b4 g     F .text	00000020 NSEW_ped_isr
00806d2c g     F .text	000000c4 _fwalk
0080b2e4 g     F .text	00000084 .hidden __divsi3
0080643c g     F .text	00000124 _malloc_trim_r
00811da0 g       *ABS*	00000000 __CTOR_END__
00808a00 g     F .text	000000dc strcmp
00811da0 g       *ABS*	00000000 __flash_rodata_start
00811da0 g       *ABS*	00000000 __DTOR_LIST__
0080c62c g     F .text	00000088 .hidden __nedf2
0080eb1c g     F .text	00000038 alt_irq_init
0080e6fc g     F .text	00000064 alt_release_fd
00811fcc g     O .rodata	00000100 .hidden __clz_tab
00815d80 g     O .bss	00000004 _PathLocale
00811a0c g     F .text	00000014 atexit
008042b8 g     F .text	00000060 _write_r
00806fc0 g     F .text	00000018 setlocale
00815d5c g     O .bss	00000004 timeCountMain
00814024 g     O .rwdata	00000004 _impure_ptr
00815d90 g     O .bss	00000004 alt_argc
00805d48 g     F .text	0000021c __sflush_r
00811084 g     F .text	00000060 _do_dtors
00806fac g     F .text	00000008 __locale_cjk_lang
00800ad0 g     F .text	00000004 _fseek_r
00800440 g     F .text	00000020 timeout_data_handler
00801bec g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00807ef0 g     F .text	00000064 __ulp
00806378 g     F .text	00000018 __fp_unlock_all
008104d0 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00814038 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00806fd8 g     F .text	0000000c localeconv
00811354 g     F .text	00000050 alt_ic_isr_register
00814068 g       *ABS*	00000000 _edata
00815d60 g     O .bss	00000004 previousMode
00810624 g     F .text	00000060 altera_avalon_uart_read_fd
00815ee8 g       *ABS*	00000000 _end
0080a2ec g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080f124 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0081142c g     F .text	0000008c alt_ic_irq_disable
00801e70 g     F .text	0000007c __swrite
0081402c g     O .rwdata	00000004 __malloc_trim_threshold
00806fa0 g     F .text	0000000c __locale_msgcharset
00811a20 g     F .text	00000038 exit
00806df0 g     F .text	000000c4 _fwalk_reent
00807cf4 g     F .text	000001fc __mdiff
00800460 g     F .text	00000240 simple_tlc
0080b368 g     F .text	00000074 .hidden __modsi3
00814064 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00806354 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0081210e g     O .rodata	00000101 _ctype_
00810aa8 g     F .text	00000054 altera_avalon_uart_close
00800978 g     F .text	000000f4 _fopen_r
00811d6c g     F .text	00000034 _exit
0080db00 g     F .text	0000012c alt_alarm_start
00800fac g     F .text	000001bc __smakebuf_r
00815d64 g     O .bss	00000004 pedWE
00801f50 g     F .text	00000098 strlen
0080e470 g     F .text	00000154 open
0080c6b4 g     F .text	000000dc .hidden __gedf2
00814034 g     O .rwdata	00000004 __wctomb
00808bd8 g     F .text	00000018 __sprint_r
00811320 g     F .text	00000034 alt_icache_flush_all
00814050 g     O .rwdata	00000004 alt_priority_mask
00815d68 g     O .bss	00000004 timerContext
008113a4 g     F .text	00000088 alt_ic_irq_enable
008041e0 g     F .text	0000001c __vfprintf_internal
00810b38 g     F .text	000001dc altera_avalon_uart_read
0080a7d8 g     F .text	0000005c _wctomb_r
0080cf9c g     F .text	000008fc .hidden __subdf3
00807728 g     F .text	000000b0 __lo0bits
00814058 g     O .rwdata	00000008 alt_alarm_list
00811024 g     F .text	00000060 _do_ctors
00815d6c g     O .bss	00000004 context_going_to_be_passed
0080a6e8 g     F .text	000000c0 wcrtomb
0080dc68 g     F .text	000000d0 close
00800290 g     F .text	000000c4 init_buttons_pio
0080e118 g     F .text	00000084 alt_load
0080a474 g     F .text	00000080 fputwc
00806358 g     F .text	00000004 __sinit_lock_acquire
0080749c g     F .text	00000120 __multadd
00807474 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	10977a04 	addi	r2,r2,24040
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10977a04 	addi	r2,r2,24040
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a76117 	ldw	r2,-25212(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a76117 	ldw	r2,-25212(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6b00814 	ori	gp,gp,49184
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10975014 	ori	r2,r2,23872

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18d7ba14 	ori	r3,r3,24296

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080e1180 	call	80e118 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080e2ac0 	call	80e2ac <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <init_buttons_pio>:
/*
 * Initialisers
 */
//Initializes the interrupts for the NS and EW pedestrian buttons

void init_buttons_pio(void* context, alt_u32 id){
  800290:	defffb04 	addi	sp,sp,-20
  800294:	dfc00415 	stw	ra,16(sp)
  800298:	df000315 	stw	fp,12(sp)
  80029c:	df000304 	addi	fp,sp,12
  8002a0:	e13ffe15 	stw	r4,-8(fp)
  8002a4:	e17fff15 	stw	r5,-4(fp)
	int* temp = (int*) context; // need to cast the context first before using it
  8002a8:	e0bffe17 	ldw	r2,-8(fp)
  8002ac:	e0bffd15 	stw	r2,-12(fp)
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  8002b0:	00804074 	movhi	r2,257
  8002b4:	10842704 	addi	r2,r2,4252
  8002b8:	10c00037 	ldwio	r3,0(r2)
  8002bc:	e0bffd17 	ldw	r2,-12(fp)
  8002c0:	10c00015 	stw	r3,0(r2)

	// Clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  8002c4:	0007883a 	mov	r3,zero
  8002c8:	00804074 	movhi	r2,257
  8002cc:	10842704 	addi	r2,r2,4252
  8002d0:	10c00035 	stwio	r3,0(r2)

	//Allows button 1 and 0 to be click simultaneously
	if ((*temp) == 1 && traffic != RG)
  8002d4:	e0bffd17 	ldw	r2,-12(fp)
  8002d8:	10800017 	ldw	r2,0(r2)
  8002dc:	10800058 	cmpnei	r2,r2,1
  8002e0:	1000081e 	bne	r2,zero,800304 <init_buttons_pio+0x74>
  8002e4:	d0a74e17 	ldw	r2,-25288(gp)
  8002e8:	10800060 	cmpeqi	r2,r2,1
  8002ec:	1000051e 	bne	r2,zero,800304 <init_buttons_pio+0x74>
	{
		pedNS = pressed;
  8002f0:	00800044 	movi	r2,1
  8002f4:	d0a74b15 	stw	r2,-25300(gp)
		printf("Button0 has been pressed!\n");
  8002f8:	01002074 	movhi	r4,129
  8002fc:	21076804 	addi	r4,r4,7584
  800300:	0801bbc0 	call	801bbc <puts>
	}
	if ((*temp) == 2 && traffic != GR)
  800304:	e0bffd17 	ldw	r2,-12(fp)
  800308:	10800017 	ldw	r2,0(r2)
  80030c:	10800098 	cmpnei	r2,r2,2
  800310:	1000081e 	bne	r2,zero,800334 <init_buttons_pio+0xa4>
  800314:	d0a74e17 	ldw	r2,-25288(gp)
  800318:	108000e0 	cmpeqi	r2,r2,3
  80031c:	1000051e 	bne	r2,zero,800334 <init_buttons_pio+0xa4>
	{
		pedWE = pressed;
  800320:	00800044 	movi	r2,1
  800324:	d0a75115 	stw	r2,-25276(gp)
		printf("Button1 has been pressed!\n");
  800328:	01002074 	movhi	r4,129
  80032c:	21076f04 	addi	r4,r4,7612
  800330:	0801bbc0 	call	801bbc <puts>
	}



	(*temp) = 0;
  800334:	e0bffd17 	ldw	r2,-12(fp)
  800338:	10000015 	stw	zero,0(r2)
}
  80033c:	0001883a 	nop
  800340:	e037883a 	mov	sp,fp
  800344:	dfc00117 	ldw	ra,4(sp)
  800348:	df000017 	ldw	fp,0(sp)
  80034c:	dec00204 	addi	sp,sp,8
  800350:	f800283a 	ret

00800354 <tlc_timer_isr>:

/*
 * Interrupts
 */
//handler for the traffic light timer interrupt
alt_u32 tlc_timer_isr(void* context){
  800354:	defffd04 	addi	sp,sp,-12
  800358:	df000215 	stw	fp,8(sp)
  80035c:	df000204 	addi	fp,sp,8
  800360:	e13fff15 	stw	r4,-4(fp)
	int *timeCount = (int*) context;
  800364:	e0bfff17 	ldw	r2,-4(fp)
  800368:	e0bffe15 	stw	r2,-8(fp)
	(*timeCount)++;
  80036c:	e0bffe17 	ldw	r2,-8(fp)
  800370:	10800017 	ldw	r2,0(r2)
  800374:	10c00044 	addi	r3,r2,1
  800378:	e0bffe17 	ldw	r2,-8(fp)
  80037c:	10c00015 	stw	r3,0(r2)
	//printf("time:%d\n", *timeCount);
	return 100;
  800380:	00801904 	movi	r2,100
}
  800384:	e037883a 	mov	sp,fp
  800388:	df000017 	ldw	fp,0(sp)
  80038c:	dec00104 	addi	sp,sp,4
  800390:	f800283a 	ret

00800394 <camera_timer_isr>:

//handler for the red light camera timer interrupt
void camera_timer_isr(){
  800394:	deffff04 	addi	sp,sp,-4
  800398:	df000015 	stw	fp,0(sp)
  80039c:	d839883a 	mov	fp,sp

}
  8003a0:	0001883a 	nop
  8003a4:	e037883a 	mov	sp,fp
  8003a8:	df000017 	ldw	fp,0(sp)
  8003ac:	dec00104 	addi	sp,sp,4
  8003b0:	f800283a 	ret

008003b4 <NSEW_ped_isr>:

//handles the NS and EW pedestrian button interrupts
void NSEW_ped_isr(){
  8003b4:	deffff04 	addi	sp,sp,-4
  8003b8:	df000015 	stw	fp,0(sp)
  8003bc:	d839883a 	mov	fp,sp

}
  8003c0:	0001883a 	nop
  8003c4:	e037883a 	mov	sp,fp
  8003c8:	df000017 	ldw	fp,0(sp)
  8003cc:	dec00104 	addi	sp,sp,4
  8003d0:	f800283a 	ret

008003d4 <lcd_set_mode>:

/*
 * Setters
 */
//write the current mode to the LCD
void lcd_set_mode(){
  8003d4:	defffe04 	addi	sp,sp,-8
  8003d8:	dfc00115 	stw	ra,4(sp)
  8003dc:	df000015 	stw	fp,0(sp)
  8003e0:	d839883a 	mov	fp,sp
	if(lcd != NULL){
  8003e4:	d0a74a17 	ldw	r2,-25304(gp)
  8003e8:	10000f26 	beq	r2,zero,800428 <lcd_set_mode+0x54>
		fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  8003ec:	d0a74a17 	ldw	r2,-25304(gp)
  8003f0:	01c02074 	movhi	r7,129
  8003f4:	39c77604 	addi	r7,r7,7640
  8003f8:	018006c4 	movi	r6,27
  8003fc:	01402074 	movhi	r5,129
  800400:	29477704 	addi	r5,r5,7644
  800404:	1009883a 	mov	r4,r2
  800408:	0800aac0 	call	800aac <fprintf>
		fprintf(lcd, "MODE: %d\n", mode);
  80040c:	d0a74a17 	ldw	r2,-25304(gp)
  800410:	d0e74c17 	ldw	r3,-25296(gp)
  800414:	180d883a 	mov	r6,r3
  800418:	01402074 	movhi	r5,129
  80041c:	29477904 	addi	r5,r5,7652
  800420:	1009883a 	mov	r4,r2
  800424:	0800aac0 	call	800aac <fprintf>
	}
}
  800428:	0001883a 	nop
  80042c:	e037883a 	mov	sp,fp
  800430:	dfc00117 	ldw	ra,4(sp)
  800434:	df000017 	ldw	fp,0(sp)
  800438:	dec00204 	addi	sp,sp,8
  80043c:	f800283a 	ret

00800440 <timeout_data_handler>:

//parses the configuration string and updates the timeouts
void timeout_data_handler(){
  800440:	deffff04 	addi	sp,sp,-4
  800444:	df000015 	stw	fp,0(sp)
  800448:	d839883a 	mov	fp,sp

}
  80044c:	0001883a 	nop
  800450:	e037883a 	mov	sp,fp
  800454:	df000017 	ldw	fp,0(sp)
  800458:	dec00104 	addi	sp,sp,4
  80045c:	f800283a 	ret

00800460 <simple_tlc>:

/*
 * Implementers
 */
//implements the simple traffic light controller
void simple_tlc(){
  800460:	defffe04 	addi	sp,sp,-8
  800464:	dfc00115 	stw	ra,4(sp)
  800468:	df000015 	stw	fp,0(sp)
  80046c:	d839883a 	mov	fp,sp
	switch(traffic){
  800470:	d0a74e17 	ldw	r2,-25288(gp)
  800474:	10c00168 	cmpgeui	r3,r2,5
  800478:	1800831e 	bne	r3,zero,800688 <simple_tlc+0x228>
  80047c:	100690ba 	slli	r3,r2,2
  800480:	00802034 	movhi	r2,128
  800484:	10812504 	addi	r2,r2,1172
  800488:	1885883a 	add	r2,r3,r2
  80048c:	10800017 	ldw	r2,0(r2)
  800490:	1000683a 	jmp	r2
  800494:	008004a8 	cmpgeui	r2,zero,18
  800498:	0080050c 	andi	r2,zero,20
  80049c:	0080056c 	andhi	r2,zero,21
  8004a0:	008005b8 	rdprs	r2,zero,22
  8004a4:	00800618 	cmpnei	r2,zero,24
		case RR:
			// Set green leds
			//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100);
			LEDs = TWE_R + TNS_R;
  8004a8:	00800904 	movi	r2,36
  8004ac:	d0a74815 	stw	r2,-25312(gp)

			if(timeCountMain >= 5){
  8004b0:	d0a74f17 	ldw	r2,-25284(gp)
  8004b4:	10800150 	cmplti	r2,r2,5
  8004b8:	10006a1e 	bne	r2,zero,800664 <simple_tlc+0x204>
				// next traffic decides whether to go RG or GR
				if(next_traffic == NS){
  8004bc:	d0a74d17 	ldw	r2,-25292(gp)
  8004c0:	1000031e 	bne	r2,zero,8004d0 <simple_tlc+0x70>
					traffic = RG;
  8004c4:	00800044 	movi	r2,1
  8004c8:	d0a74e15 	stw	r2,-25288(gp)
  8004cc:	00000206 	br	8004d8 <simple_tlc+0x78>
				}else{
					traffic = GR;
  8004d0:	008000c4 	movi	r2,3
  8004d4:	d0a74e15 	stw	r2,-25288(gp)
				}
				alt_alarm_stop(&timer);
  8004d8:	01002074 	movhi	r4,129
  8004dc:	21177404 	addi	r4,r4,24016
  8004e0:	080e8100 	call	80e810 <alt_alarm_stop>
				timeCountMain = 0;
  8004e4:	d0274f15 	stw	zero,-25284(gp)
				// start the timer, with timeout of 0.5 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  8004e8:	d0a75217 	ldw	r2,-25272(gp)
  8004ec:	100f883a 	mov	r7,r2
  8004f0:	01802034 	movhi	r6,128
  8004f4:	3180d504 	addi	r6,r6,852
  8004f8:	01401904 	movi	r5,100
  8004fc:	01002074 	movhi	r4,129
  800500:	21177404 	addi	r4,r4,24016
  800504:	080db000 	call	80db00 <alt_alarm_start>
			}

			break;
  800508:	00005606 	br	800664 <simple_tlc+0x204>

		case RG:
			// Set green leds
			//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100001);
			LEDs = TWE_R + TNS_G;
  80050c:	00800844 	movi	r2,33
  800510:	d0a74815 	stw	r2,-25312(gp)

			// Set next traffic not to re-do RG
			if(next_traffic == NS){
  800514:	d0a74d17 	ldw	r2,-25292(gp)
  800518:	1000021e 	bne	r2,zero,800524 <simple_tlc+0xc4>
				next_traffic = WE;
  80051c:	00800044 	movi	r2,1
  800520:	d0a74d15 	stw	r2,-25292(gp)
			}

			if(timeCountMain >= 60){
  800524:	d0a74f17 	ldw	r2,-25284(gp)
  800528:	10800f10 	cmplti	r2,r2,60
  80052c:	10004f1e 	bne	r2,zero,80066c <simple_tlc+0x20c>
				traffic = RY;
  800530:	00800084 	movi	r2,2
  800534:	d0a74e15 	stw	r2,-25288(gp)

				alt_alarm_stop(&timer);
  800538:	01002074 	movhi	r4,129
  80053c:	21177404 	addi	r4,r4,24016
  800540:	080e8100 	call	80e810 <alt_alarm_stop>
				timeCountMain = 0;
  800544:	d0274f15 	stw	zero,-25284(gp)
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800548:	d0a75217 	ldw	r2,-25272(gp)
  80054c:	100f883a 	mov	r7,r2
  800550:	01802034 	movhi	r6,128
  800554:	3180d504 	addi	r6,r6,852
  800558:	01401904 	movi	r5,100
  80055c:	01002074 	movhi	r4,129
  800560:	21177404 	addi	r4,r4,24016
  800564:	080db000 	call	80db00 <alt_alarm_start>
			}
			break;
  800568:	00004006 	br	80066c <simple_tlc+0x20c>
		case RY:
			// Set green leds
			//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100010);
			LEDs = TWE_R + TNS_Y;
  80056c:	00800884 	movi	r2,34
  800570:	d0a74815 	stw	r2,-25312(gp)

			if(timeCountMain >= 20){
  800574:	d0a74f17 	ldw	r2,-25284(gp)
  800578:	10800510 	cmplti	r2,r2,20
  80057c:	10003d1e 	bne	r2,zero,800674 <simple_tlc+0x214>
				traffic = RR;
  800580:	d0274e15 	stw	zero,-25288(gp)

				alt_alarm_stop(&timer);
  800584:	01002074 	movhi	r4,129
  800588:	21177404 	addi	r4,r4,24016
  80058c:	080e8100 	call	80e810 <alt_alarm_stop>
				timeCountMain = 0;
  800590:	d0274f15 	stw	zero,-25284(gp)
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800594:	d0a75217 	ldw	r2,-25272(gp)
  800598:	100f883a 	mov	r7,r2
  80059c:	01802034 	movhi	r6,128
  8005a0:	3180d504 	addi	r6,r6,852
  8005a4:	01401904 	movi	r5,100
  8005a8:	01002074 	movhi	r4,129
  8005ac:	21177404 	addi	r4,r4,24016
  8005b0:	080db000 	call	80db00 <alt_alarm_start>
			}
			break;
  8005b4:	00002f06 	br	800674 <simple_tlc+0x214>
		case GR:
			// Set green leds
			//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00001100);
			LEDs = TWE_G + TNS_R;
  8005b8:	00800304 	movi	r2,12
  8005bc:	d0a74815 	stw	r2,-25312(gp)

			// Set next traffic not to re-do GR
			if(next_traffic == WE){
  8005c0:	d0a74d17 	ldw	r2,-25292(gp)
  8005c4:	10800058 	cmpnei	r2,r2,1
  8005c8:	1000011e 	bne	r2,zero,8005d0 <simple_tlc+0x170>
				next_traffic = NS;
  8005cc:	d0274d15 	stw	zero,-25292(gp)
			}
			if(timeCountMain >= 60){
  8005d0:	d0a74f17 	ldw	r2,-25284(gp)
  8005d4:	10800f10 	cmplti	r2,r2,60
  8005d8:	1000281e 	bne	r2,zero,80067c <simple_tlc+0x21c>
				traffic = YR;
  8005dc:	00800104 	movi	r2,4
  8005e0:	d0a74e15 	stw	r2,-25288(gp)

				alt_alarm_stop(&timer);
  8005e4:	01002074 	movhi	r4,129
  8005e8:	21177404 	addi	r4,r4,24016
  8005ec:	080e8100 	call	80e810 <alt_alarm_stop>
				timeCountMain = 0;
  8005f0:	d0274f15 	stw	zero,-25284(gp)
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  8005f4:	d0a75217 	ldw	r2,-25272(gp)
  8005f8:	100f883a 	mov	r7,r2
  8005fc:	01802034 	movhi	r6,128
  800600:	3180d504 	addi	r6,r6,852
  800604:	01401904 	movi	r5,100
  800608:	01002074 	movhi	r4,129
  80060c:	21177404 	addi	r4,r4,24016
  800610:	080db000 	call	80db00 <alt_alarm_start>
			}
			break;
  800614:	00001906 	br	80067c <simple_tlc+0x21c>
		case YR:
			// Set green leds
			//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00010100);
			LEDs = TWE_Y + TNS_R;
  800618:	00800504 	movi	r2,20
  80061c:	d0a74815 	stw	r2,-25312(gp)

			if(timeCountMain >= 20){
  800620:	d0a74f17 	ldw	r2,-25284(gp)
  800624:	10800510 	cmplti	r2,r2,20
  800628:	1000161e 	bne	r2,zero,800684 <simple_tlc+0x224>
				traffic = RR;
  80062c:	d0274e15 	stw	zero,-25288(gp)

				alt_alarm_stop(&timer);
  800630:	01002074 	movhi	r4,129
  800634:	21177404 	addi	r4,r4,24016
  800638:	080e8100 	call	80e810 <alt_alarm_stop>
				timeCountMain = 0;
  80063c:	d0274f15 	stw	zero,-25284(gp)
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  800640:	d0a75217 	ldw	r2,-25272(gp)
  800644:	100f883a 	mov	r7,r2
  800648:	01802034 	movhi	r6,128
  80064c:	3180d504 	addi	r6,r6,852
  800650:	01401904 	movi	r5,100
  800654:	01002074 	movhi	r4,129
  800658:	21177404 	addi	r4,r4,24016
  80065c:	080db000 	call	80db00 <alt_alarm_start>
			}
			break;
  800660:	00000806 	br	800684 <simple_tlc+0x224>
				timeCountMain = 0;
				// start the timer, with timeout of 0.5 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}

			break;
  800664:	0001883a 	nop
  800668:	00000706 	br	800688 <simple_tlc+0x228>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  80066c:	0001883a 	nop
  800670:	00000506 	br	800688 <simple_tlc+0x228>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800674:	0001883a 	nop
  800678:	00000306 	br	800688 <simple_tlc+0x228>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  80067c:	0001883a 	nop
  800680:	00000106 	br	800688 <simple_tlc+0x228>
				alt_alarm_stop(&timer);
				timeCountMain = 0;
				// start the timer, with timeout of 6 seconds
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;
  800684:	0001883a 	nop
	}
}
  800688:	0001883a 	nop
  80068c:	e037883a 	mov	sp,fp
  800690:	dfc00117 	ldw	ra,4(sp)
  800694:	df000017 	ldw	fp,0(sp)
  800698:	dec00204 	addi	sp,sp,8
  80069c:	f800283a 	ret

008006a0 <configurable_tlc>:

//implements the configurable traffic light controller
void configurable_tlc(){
  8006a0:	deffff04 	addi	sp,sp,-4
  8006a4:	df000015 	stw	fp,0(sp)
  8006a8:	d839883a 	mov	fp,sp

}
  8006ac:	0001883a 	nop
  8006b0:	e037883a 	mov	sp,fp
  8006b4:	df000017 	ldw	fp,0(sp)
  8006b8:	dec00104 	addi	sp,sp,4
  8006bc:	f800283a 	ret

008006c0 <camera_tlc>:

//implements the traffic light controller with integrated camera
void camera_tlc(){
  8006c0:	deffff04 	addi	sp,sp,-4
  8006c4:	df000015 	stw	fp,0(sp)
  8006c8:	d839883a 	mov	fp,sp

}
  8006cc:	0001883a 	nop
  8006d0:	e037883a 	mov	sp,fp
  8006d4:	df000017 	ldw	fp,0(sp)
  8006d8:	dec00104 	addi	sp,sp,4
  8006dc:	f800283a 	ret

008006e0 <pedestrian_tlc>:

//implements the pedestrian traffic light controller
void pedestrian_tlc(){
  8006e0:	deffff04 	addi	sp,sp,-4
  8006e4:	df000015 	stw	fp,0(sp)
  8006e8:	d839883a 	mov	fp,sp
	switch(traffic){
  8006ec:	d0a74e17 	ldw	r2,-25288(gp)
  8006f0:	10c000a0 	cmpeqi	r3,r2,2
  8006f4:	1800161e 	bne	r3,zero,800750 <pedestrian_tlc+0x70>
  8006f8:	10c000e8 	cmpgeui	r3,r2,3
  8006fc:	1800031e 	bne	r3,zero,80070c <pedestrian_tlc+0x2c>
  800700:	10800060 	cmpeqi	r2,r2,1
  800704:	1000061e 	bne	r2,zero,800720 <pedestrian_tlc+0x40>
			if(pedWE == running){
				pedWE = idle;
			}
			break;
		default:
			break;
  800708:	00002e06 	br	8007c4 <pedestrian_tlc+0xe4>

}

//implements the pedestrian traffic light controller
void pedestrian_tlc(){
	switch(traffic){
  80070c:	10c000e0 	cmpeqi	r3,r2,3
  800710:	1800141e 	bne	r3,zero,800764 <pedestrian_tlc+0x84>
  800714:	10800120 	cmpeqi	r2,r2,4
  800718:	10001e1e 	bne	r2,zero,800794 <pedestrian_tlc+0xb4>
			if(pedWE == running){
				pedWE = idle;
			}
			break;
		default:
			break;
  80071c:	00002906 	br	8007c4 <pedestrian_tlc+0xe4>

//implements the pedestrian traffic light controller
void pedestrian_tlc(){
	switch(traffic){
		case RG:
			if(pedNS == pressed){
  800720:	d0a74b17 	ldw	r2,-25300(gp)
  800724:	10800058 	cmpnei	r2,r2,1
  800728:	1000021e 	bne	r2,zero,800734 <pedestrian_tlc+0x54>
				pedNS = running;
  80072c:	00800084 	movi	r2,2
  800730:	d0a74b15 	stw	r2,-25300(gp)
			}
			if(pedNS == running){
  800734:	d0a74b17 	ldw	r2,-25300(gp)
  800738:	10800098 	cmpnei	r2,r2,2
  80073c:	10001a1e 	bne	r2,zero,8007a8 <pedestrian_tlc+0xc8>
				LEDs = LEDs + PNS_G;
  800740:	d0a74817 	ldw	r2,-25312(gp)
  800744:	10801004 	addi	r2,r2,64
  800748:	d0a74815 	stw	r2,-25312(gp)
			}
			break;
  80074c:	00001606 	br	8007a8 <pedestrian_tlc+0xc8>
		case RY:
			if(pedNS == running){
  800750:	d0a74b17 	ldw	r2,-25300(gp)
  800754:	10800098 	cmpnei	r2,r2,2
  800758:	1000151e 	bne	r2,zero,8007b0 <pedestrian_tlc+0xd0>
				pedNS = idle;
  80075c:	d0274b15 	stw	zero,-25300(gp)
			}
			break;
  800760:	00001306 	br	8007b0 <pedestrian_tlc+0xd0>
		case GR:
			if(pedWE == pressed){
  800764:	d0a75117 	ldw	r2,-25276(gp)
  800768:	10800058 	cmpnei	r2,r2,1
  80076c:	1000021e 	bne	r2,zero,800778 <pedestrian_tlc+0x98>
				pedWE = running;
  800770:	00800084 	movi	r2,2
  800774:	d0a75115 	stw	r2,-25276(gp)
			}
			if(pedWE == running){
  800778:	d0a75117 	ldw	r2,-25276(gp)
  80077c:	10800098 	cmpnei	r2,r2,2
  800780:	10000d1e 	bne	r2,zero,8007b8 <pedestrian_tlc+0xd8>
				LEDs = LEDs + PWE_G;
  800784:	d0a74817 	ldw	r2,-25312(gp)
  800788:	10802004 	addi	r2,r2,128
  80078c:	d0a74815 	stw	r2,-25312(gp)
			}
			break;
  800790:	00000906 	br	8007b8 <pedestrian_tlc+0xd8>
		case YR:
			if(pedWE == running){
  800794:	d0a75117 	ldw	r2,-25276(gp)
  800798:	10800098 	cmpnei	r2,r2,2
  80079c:	1000081e 	bne	r2,zero,8007c0 <pedestrian_tlc+0xe0>
				pedWE = idle;
  8007a0:	d0275115 	stw	zero,-25276(gp)
			}
			break;
  8007a4:	00000606 	br	8007c0 <pedestrian_tlc+0xe0>
				pedNS = running;
			}
			if(pedNS == running){
				LEDs = LEDs + PNS_G;
			}
			break;
  8007a8:	0001883a 	nop
  8007ac:	00000506 	br	8007c4 <pedestrian_tlc+0xe4>
		case RY:
			if(pedNS == running){
				pedNS = idle;
			}
			break;
  8007b0:	0001883a 	nop
  8007b4:	00000306 	br	8007c4 <pedestrian_tlc+0xe4>
				pedWE = running;
			}
			if(pedWE == running){
				LEDs = LEDs + PWE_G;
			}
			break;
  8007b8:	0001883a 	nop
  8007bc:	00000106 	br	8007c4 <pedestrian_tlc+0xe4>
		case YR:
			if(pedWE == running){
				pedWE = idle;
			}
			break;
  8007c0:	0001883a 	nop
				alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
			}
			break;

	}*/
}
  8007c4:	0001883a 	nop
  8007c8:	e037883a 	mov	sp,fp
  8007cc:	df000017 	ldw	fp,0(sp)
  8007d0:	dec00104 	addi	sp,sp,4
  8007d4:	f800283a 	ret

008007d8 <handle_vehicle_button>:

//simulates the entry and exit of vehicles at the intersection
void handle_vehicle_button(){
  8007d8:	deffff04 	addi	sp,sp,-4
  8007dc:	df000015 	stw	fp,0(sp)
  8007e0:	d839883a 	mov	fp,sp

}
  8007e4:	0001883a 	nop
  8007e8:	e037883a 	mov	sp,fp
  8007ec:	df000017 	ldw	fp,0(sp)
  8007f0:	dec00104 	addi	sp,sp,4
  8007f4:	f800283a 	ret

008007f8 <main>:

int main() {
  8007f8:	defffe04 	addi	sp,sp,-8
  8007fc:	dfc00115 	stw	ra,4(sp)
  800800:	df000015 	stw	fp,0(sp)
  800804:	d839883a 	mov	fp,sp
	// Initialise
	pedNS = idle;
  800808:	d0274b15 	stw	zero,-25300(gp)
	pedWE = idle;
  80080c:	d0275115 	stw	zero,-25276(gp)
	traffic = RR;
  800810:	d0274e15 	stw	zero,-25288(gp)
	next_traffic = NS;
  800814:	d0274d15 	stw	zero,-25292(gp)

	/*
	 * Make sure only the 2 switches on the right will change the mode of the simulation.
	 * +1 will make sure mode is {1,2,3,4}.
	 */
	mode = (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) % 4) + 1;
  800818:	00804074 	movhi	r2,257
  80081c:	10842804 	addi	r2,r2,4256
  800820:	10c00037 	ldwio	r3,0(r2)
  800824:	00a00034 	movhi	r2,32768
  800828:	108000c4 	addi	r2,r2,3
  80082c:	1884703a 	and	r2,r3,r2
  800830:	1000040e 	bge	r2,zero,800844 <main+0x4c>
  800834:	10bfffc4 	addi	r2,r2,-1
  800838:	00ffff04 	movi	r3,-4
  80083c:	10c4b03a 	or	r2,r2,r3
  800840:	10800044 	addi	r2,r2,1
  800844:	10800044 	addi	r2,r2,1
  800848:	d0a74c15 	stw	r2,-25296(gp)

	lcd = fopen(LCD_NAME, "w");
  80084c:	01402074 	movhi	r5,129
  800850:	29477c04 	addi	r5,r5,7664
  800854:	01002074 	movhi	r4,129
  800858:	21077d04 	addi	r4,r4,7668
  80085c:	0800a6c0 	call	800a6c <fopen>
  800860:	d0a74a15 	stw	r2,-25304(gp)

	/*
	 * Buttons Interrupt Setup
	 */
	context_going_to_be_passed = (void*) &buttonValue;
  800864:	d0a74904 	addi	r2,gp,-25308
  800868:	d0a75315 	stw	r2,-25268(gp)
	// clears the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  80086c:	0007883a 	mov	r3,zero
  800870:	00804074 	movhi	r2,257
  800874:	10842704 	addi	r2,r2,4252
  800878:	10c00035 	stwio	r3,0(r2)
	// enable interrupts for all buttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);
  80087c:	00c001c4 	movi	r3,7
  800880:	00804074 	movhi	r2,257
  800884:	10842604 	addi	r2,r2,4248
  800888:	10c00035 	stwio	r3,0(r2)
	// register the ISR
	alt_irq_register(KEYS_IRQ,context_going_to_be_passed,init_buttons_pio);
  80088c:	d0a75317 	ldw	r2,-25268(gp)
  800890:	01802034 	movhi	r6,128
  800894:	3180a404 	addi	r6,r6,656
  800898:	100b883a 	mov	r5,r2
  80089c:	0009883a 	mov	r4,zero
  8008a0:	080de500 	call	80de50 <alt_irq_register>
	 * Timer interrupt Setup
	 */


	// start the timer, with timeout of 100 milli-seconds
	timeCountMain = 0;
  8008a4:	d0274f15 	stw	zero,-25284(gp)
	timerContext = (void*) &timeCountMain;
  8008a8:	d0a74f04 	addi	r2,gp,-25284
  8008ac:	d0a75215 	stw	r2,-25272(gp)
	alt_alarm_start(&timer, 100, tlc_timer_isr, timerContext);
  8008b0:	d0a75217 	ldw	r2,-25272(gp)
  8008b4:	100f883a 	mov	r7,r2
  8008b8:	01802034 	movhi	r6,128
  8008bc:	3180d504 	addi	r6,r6,852
  8008c0:	01401904 	movi	r5,100
  8008c4:	01002074 	movhi	r4,129
  8008c8:	21177404 	addi	r4,r4,24016
  8008cc:	080db000 	call	80db00 <alt_alarm_start>
		/*
		 * This function gets the switches setup and prints the value of mode on LCD.
		 * LCD re-print only happens when the mode has changed.
		 * The mode can only change in the condition that traffic state is on RR.
		 */
		if(traffic == RR){
  8008d0:	d0a74e17 	ldw	r2,-25288(gp)
  8008d4:	1000151e 	bne	r2,zero,80092c <main+0x134>
			mode = (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) % 4) + 1;
  8008d8:	00804074 	movhi	r2,257
  8008dc:	10842804 	addi	r2,r2,4256
  8008e0:	10c00037 	ldwio	r3,0(r2)
  8008e4:	00a00034 	movhi	r2,32768
  8008e8:	108000c4 	addi	r2,r2,3
  8008ec:	1884703a 	and	r2,r3,r2
  8008f0:	1000040e 	bge	r2,zero,800904 <main+0x10c>
  8008f4:	10bfffc4 	addi	r2,r2,-1
  8008f8:	00ffff04 	movi	r3,-4
  8008fc:	10c4b03a 	or	r2,r2,r3
  800900:	10800044 	addi	r2,r2,1
  800904:	10800044 	addi	r2,r2,1
  800908:	d0a74c15 	stw	r2,-25296(gp)
			if(mode != previousMode){
  80090c:	d0e74c17 	ldw	r3,-25296(gp)
  800910:	d0a75017 	ldw	r2,-25280(gp)
  800914:	18800326 	beq	r3,r2,800924 <main+0x12c>
				lcd_set_mode(mode);
  800918:	d0a74c17 	ldw	r2,-25296(gp)
  80091c:	1009883a 	mov	r4,r2
  800920:	08003d40 	call	8003d4 <lcd_set_mode>
			}
			previousMode = mode;
  800924:	d0a74c17 	ldw	r2,-25296(gp)
  800928:	d0a75015 	stw	r2,-25280(gp)

		/*
		 * Different modes
		 */
		// If mode is not 3 because modes 1, 2 and 4 uses simple_tlc
		if(mode != 3){
  80092c:	d0a74c17 	ldw	r2,-25296(gp)
  800930:	108000e0 	cmpeqi	r2,r2,3
  800934:	1000061e 	bne	r2,zero,800950 <main+0x158>
			simple_tlc();
  800938:	08004600 	call	800460 <simple_tlc>

			//Only mode one does not utilise pedestrian crossing
			if(mode != 1){
  80093c:	d0a74c17 	ldw	r2,-25296(gp)
  800940:	10800060 	cmpeqi	r2,r2,1
  800944:	1000031e 	bne	r2,zero,800954 <main+0x15c>
				pedestrian_tlc();
  800948:	08006e00 	call	8006e0 <pedestrian_tlc>
  80094c:	00000106 	br	800954 <main+0x15c>
			}
		}else{
			configurable_tlc();
  800950:	08006a00 	call	8006a0 <configurable_tlc>
		}
		if(mode == 4){
  800954:	d0a74c17 	ldw	r2,-25296(gp)
  800958:	10800118 	cmpnei	r2,r2,4
  80095c:	1000011e 	bne	r2,zero,800964 <main+0x16c>
			camera_tlc();
  800960:	08006c00 	call	8006c0 <camera_tlc>
		}

		//Turns on LEDs based on TLC
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, LEDs);
  800964:	d0e74817 	ldw	r3,-25312(gp)
  800968:	00804074 	movhi	r2,257
  80096c:	10842004 	addi	r2,r2,4224
  800970:	10c00035 	stwio	r3,0(r2)

	}
  800974:	003fd606 	br	8008d0 <__alt_mem_onchip_mem+0xff7f88d0>

00800978 <_fopen_r>:
  800978:	defffa04 	addi	sp,sp,-24
  80097c:	3005883a 	mov	r2,r6
  800980:	dcc00415 	stw	r19,16(sp)
  800984:	d80d883a 	mov	r6,sp
  800988:	2827883a 	mov	r19,r5
  80098c:	100b883a 	mov	r5,r2
  800990:	dc800315 	stw	r18,12(sp)
  800994:	dfc00515 	stw	ra,20(sp)
  800998:	dc400215 	stw	r17,8(sp)
  80099c:	dc000115 	stw	r16,4(sp)
  8009a0:	2025883a 	mov	r18,r4
  8009a4:	08063900 	call	806390 <__sflags>
  8009a8:	10002726 	beq	r2,zero,800a48 <_fopen_r+0xd0>
  8009ac:	9009883a 	mov	r4,r18
  8009b0:	1023883a 	mov	r17,r2
  8009b4:	08062100 	call	806210 <__sfp>
  8009b8:	1021883a 	mov	r16,r2
  8009bc:	10002226 	beq	r2,zero,800a48 <_fopen_r+0xd0>
  8009c0:	d9800017 	ldw	r6,0(sp)
  8009c4:	01c06d84 	movi	r7,438
  8009c8:	980b883a 	mov	r5,r19
  8009cc:	9009883a 	mov	r4,r18
  8009d0:	0801a9c0 	call	801a9c <_open_r>
  8009d4:	10001916 	blt	r2,zero,800a3c <_fopen_r+0xc4>
  8009d8:	8080038d 	sth	r2,14(r16)
  8009dc:	00802034 	movhi	r2,128
  8009e0:	10878504 	addi	r2,r2,7700
  8009e4:	80800815 	stw	r2,32(r16)
  8009e8:	00802034 	movhi	r2,128
  8009ec:	10879c04 	addi	r2,r2,7792
  8009f0:	80800915 	stw	r2,36(r16)
  8009f4:	00802034 	movhi	r2,128
  8009f8:	1087bb04 	addi	r2,r2,7916
  8009fc:	80800a15 	stw	r2,40(r16)
  800a00:	00802034 	movhi	r2,128
  800a04:	1087d204 	addi	r2,r2,8008
  800a08:	8440030d 	sth	r17,12(r16)
  800a0c:	84000715 	stw	r16,28(r16)
  800a10:	80800b15 	stw	r2,44(r16)
  800a14:	8c40400c 	andi	r17,r17,256
  800a18:	88000d1e 	bne	r17,zero,800a50 <_fopen_r+0xd8>
  800a1c:	8005883a 	mov	r2,r16
  800a20:	dfc00517 	ldw	ra,20(sp)
  800a24:	dcc00417 	ldw	r19,16(sp)
  800a28:	dc800317 	ldw	r18,12(sp)
  800a2c:	dc400217 	ldw	r17,8(sp)
  800a30:	dc000117 	ldw	r16,4(sp)
  800a34:	dec00604 	addi	sp,sp,24
  800a38:	f800283a 	ret
  800a3c:	08063500 	call	806350 <__sfp_lock_acquire>
  800a40:	8000030d 	sth	zero,12(r16)
  800a44:	08063540 	call	806354 <__sfp_lock_release>
  800a48:	0005883a 	mov	r2,zero
  800a4c:	003ff406 	br	800a20 <__alt_mem_onchip_mem+0xff7f8a20>
  800a50:	01c00084 	movi	r7,2
  800a54:	000d883a 	mov	r6,zero
  800a58:	800b883a 	mov	r5,r16
  800a5c:	9009883a 	mov	r4,r18
  800a60:	0800ad00 	call	800ad0 <_fseek_r>
  800a64:	8005883a 	mov	r2,r16
  800a68:	003fed06 	br	800a20 <__alt_mem_onchip_mem+0xff7f8a20>

00800a6c <fopen>:
  800a6c:	00802074 	movhi	r2,129
  800a70:	10900904 	addi	r2,r2,16420
  800a74:	280d883a 	mov	r6,r5
  800a78:	200b883a 	mov	r5,r4
  800a7c:	11000017 	ldw	r4,0(r2)
  800a80:	08009781 	jmpi	800978 <_fopen_r>

00800a84 <_fprintf_r>:
  800a84:	defffe04 	addi	sp,sp,-8
  800a88:	2809883a 	mov	r4,r5
  800a8c:	300b883a 	mov	r5,r6
  800a90:	dfc00015 	stw	ra,0(sp)
  800a94:	d9c00115 	stw	r7,4(sp)
  800a98:	d9800104 	addi	r6,sp,4
  800a9c:	08041e00 	call	8041e0 <__vfprintf_internal>
  800aa0:	dfc00017 	ldw	ra,0(sp)
  800aa4:	dec00204 	addi	sp,sp,8
  800aa8:	f800283a 	ret

00800aac <fprintf>:
  800aac:	defffd04 	addi	sp,sp,-12
  800ab0:	dfc00015 	stw	ra,0(sp)
  800ab4:	d9800115 	stw	r6,4(sp)
  800ab8:	d9c00215 	stw	r7,8(sp)
  800abc:	d9800104 	addi	r6,sp,4
  800ac0:	08041e00 	call	8041e0 <__vfprintf_internal>
  800ac4:	dfc00017 	ldw	ra,0(sp)
  800ac8:	dec00304 	addi	sp,sp,12
  800acc:	f800283a 	ret

00800ad0 <_fseek_r>:
  800ad0:	0800af01 	jmpi	800af0 <_fseeko_r>

00800ad4 <fseek>:
  800ad4:	00802074 	movhi	r2,129
  800ad8:	10900904 	addi	r2,r2,16420
  800adc:	300f883a 	mov	r7,r6
  800ae0:	280d883a 	mov	r6,r5
  800ae4:	200b883a 	mov	r5,r4
  800ae8:	11000017 	ldw	r4,0(r2)
  800aec:	0800af01 	jmpi	800af0 <_fseeko_r>

00800af0 <_fseeko_r>:
  800af0:	deffe804 	addi	sp,sp,-96
  800af4:	dd401415 	stw	r21,80(sp)
  800af8:	dc801115 	stw	r18,68(sp)
  800afc:	dc401015 	stw	r17,64(sp)
  800b00:	dc000f15 	stw	r16,60(sp)
  800b04:	dfc01715 	stw	ra,92(sp)
  800b08:	ddc01615 	stw	r23,88(sp)
  800b0c:	dd801515 	stw	r22,84(sp)
  800b10:	dd001315 	stw	r20,76(sp)
  800b14:	dcc01215 	stw	r19,72(sp)
  800b18:	2023883a 	mov	r17,r4
  800b1c:	2821883a 	mov	r16,r5
  800b20:	302b883a 	mov	r21,r6
  800b24:	3825883a 	mov	r18,r7
  800b28:	20000226 	beq	r4,zero,800b34 <_fseeko_r+0x44>
  800b2c:	20800e17 	ldw	r2,56(r4)
  800b30:	10005a26 	beq	r2,zero,800c9c <_fseeko_r+0x1ac>
  800b34:	8080030b 	ldhu	r2,12(r16)
  800b38:	00c04204 	movi	r3,264
  800b3c:	1080420c 	andi	r2,r2,264
  800b40:	10c05b26 	beq	r2,r3,800cb0 <_fseeko_r+0x1c0>
  800b44:	85000a17 	ldw	r20,40(r16)
  800b48:	a000f626 	beq	r20,zero,800f24 <_fseeko_r+0x434>
  800b4c:	00800044 	movi	r2,1
  800b50:	90803e26 	beq	r18,r2,800c4c <_fseeko_r+0x15c>
  800b54:	00800084 	movi	r2,2
  800b58:	90801026 	beq	r18,r2,800b9c <_fseeko_r+0xac>
  800b5c:	90000f26 	beq	r18,zero,800b9c <_fseeko_r+0xac>
  800b60:	00800584 	movi	r2,22
  800b64:	88800015 	stw	r2,0(r17)
  800b68:	04ffffc4 	movi	r19,-1
  800b6c:	9805883a 	mov	r2,r19
  800b70:	dfc01717 	ldw	ra,92(sp)
  800b74:	ddc01617 	ldw	r23,88(sp)
  800b78:	dd801517 	ldw	r22,84(sp)
  800b7c:	dd401417 	ldw	r21,80(sp)
  800b80:	dd001317 	ldw	r20,76(sp)
  800b84:	dcc01217 	ldw	r19,72(sp)
  800b88:	dc801117 	ldw	r18,68(sp)
  800b8c:	dc401017 	ldw	r17,64(sp)
  800b90:	dc000f17 	ldw	r16,60(sp)
  800b94:	dec01804 	addi	sp,sp,96
  800b98:	f800283a 	ret
  800b9c:	80800417 	ldw	r2,16(r16)
  800ba0:	002f883a 	mov	r23,zero
  800ba4:	0027883a 	mov	r19,zero
  800ba8:	1000cb26 	beq	r2,zero,800ed8 <_fseeko_r+0x3e8>
  800bac:	8080030b 	ldhu	r2,12(r16)
  800bb0:	10c2068c 	andi	r3,r2,2074
  800bb4:	1800071e 	bne	r3,zero,800bd4 <_fseeko_r+0xe4>
  800bb8:	10c1000c 	andi	r3,r2,1024
  800bbc:	1800451e 	bne	r3,zero,800cd4 <_fseeko_r+0x1e4>
  800bc0:	00c02034 	movhi	r3,128
  800bc4:	18c7bb04 	addi	r3,r3,7916
  800bc8:	a0c0b726 	beq	r20,r3,800ea8 <_fseeko_r+0x3b8>
  800bcc:	10820014 	ori	r2,r2,2048
  800bd0:	8080030d 	sth	r2,12(r16)
  800bd4:	800b883a 	mov	r5,r16
  800bd8:	8809883a 	mov	r4,r17
  800bdc:	0805f640 	call	805f64 <_fflush_r>
  800be0:	1027883a 	mov	r19,r2
  800be4:	103fe01e 	bne	r2,zero,800b68 <__alt_mem_onchip_mem+0xff7f8b68>
  800be8:	81400717 	ldw	r5,28(r16)
  800bec:	900f883a 	mov	r7,r18
  800bf0:	a80d883a 	mov	r6,r21
  800bf4:	8809883a 	mov	r4,r17
  800bf8:	a03ee83a 	callr	r20
  800bfc:	00ffffc4 	movi	r3,-1
  800c00:	10ffd926 	beq	r2,r3,800b68 <__alt_mem_onchip_mem+0xff7f8b68>
  800c04:	81400c17 	ldw	r5,48(r16)
  800c08:	28000526 	beq	r5,zero,800c20 <_fseeko_r+0x130>
  800c0c:	80801004 	addi	r2,r16,64
  800c10:	28800226 	beq	r5,r2,800c1c <_fseeko_r+0x12c>
  800c14:	8809883a 	mov	r4,r17
  800c18:	08065600 	call	806560 <_free_r>
  800c1c:	80000c15 	stw	zero,48(r16)
  800c20:	8080030b 	ldhu	r2,12(r16)
  800c24:	80c00417 	ldw	r3,16(r16)
  800c28:	80000115 	stw	zero,4(r16)
  800c2c:	10bdf7cc 	andi	r2,r2,63455
  800c30:	80c00015 	stw	r3,0(r16)
  800c34:	8080030d 	sth	r2,12(r16)
  800c38:	01800204 	movi	r6,8
  800c3c:	000b883a 	mov	r5,zero
  800c40:	81001704 	addi	r4,r16,92
  800c44:	08019740 	call	801974 <memset>
  800c48:	003fc806 	br	800b6c <__alt_mem_onchip_mem+0xff7f8b6c>
  800c4c:	800b883a 	mov	r5,r16
  800c50:	8809883a 	mov	r4,r17
  800c54:	0805f640 	call	805f64 <_fflush_r>
  800c58:	8080030b 	ldhu	r2,12(r16)
  800c5c:	10c4000c 	andi	r3,r2,4096
  800c60:	18008726 	beq	r3,zero,800e80 <_fseeko_r+0x390>
  800c64:	84c01417 	ldw	r19,80(r16)
  800c68:	10c0010c 	andi	r3,r2,4
  800c6c:	1800431e 	bne	r3,zero,800d7c <_fseeko_r+0x28c>
  800c70:	1080020c 	andi	r2,r2,8
  800c74:	10008026 	beq	r2,zero,800e78 <_fseeko_r+0x388>
  800c78:	80c00017 	ldw	r3,0(r16)
  800c7c:	80800417 	ldw	r2,16(r16)
  800c80:	18000226 	beq	r3,zero,800c8c <_fseeko_r+0x19c>
  800c84:	1887c83a 	sub	r3,r3,r2
  800c88:	98e7883a 	add	r19,r19,r3
  800c8c:	aceb883a 	add	r21,r21,r19
  800c90:	05c00044 	movi	r23,1
  800c94:	0025883a 	mov	r18,zero
  800c98:	003fc306 	br	800ba8 <__alt_mem_onchip_mem+0xff7f8ba8>
  800c9c:	08063400 	call	806340 <__sinit>
  800ca0:	8080030b 	ldhu	r2,12(r16)
  800ca4:	00c04204 	movi	r3,264
  800ca8:	1080420c 	andi	r2,r2,264
  800cac:	10ffa51e 	bne	r2,r3,800b44 <__alt_mem_onchip_mem+0xff7f8b44>
  800cb0:	800b883a 	mov	r5,r16
  800cb4:	8809883a 	mov	r4,r17
  800cb8:	0805f640 	call	805f64 <_fflush_r>
  800cbc:	003fa106 	br	800b44 <__alt_mem_onchip_mem+0xff7f8b44>
  800cc0:	8080030b 	ldhu	r2,12(r16)
  800cc4:	00c10004 	movi	r3,1024
  800cc8:	80c01315 	stw	r3,76(r16)
  800ccc:	10c4b03a 	or	r2,r2,r3
  800cd0:	8080030d 	sth	r2,12(r16)
  800cd4:	9000311e 	bne	r18,zero,800d9c <_fseeko_r+0x2ac>
  800cd8:	a82d883a 	mov	r22,r21
  800cdc:	b800371e 	bne	r23,zero,800dbc <_fseeko_r+0x2cc>
  800ce0:	8080030b 	ldhu	r2,12(r16)
  800ce4:	1084000c 	andi	r2,r2,4096
  800ce8:	10007f26 	beq	r2,zero,800ee8 <_fseeko_r+0x3f8>
  800cec:	80801417 	ldw	r2,80(r16)
  800cf0:	81800117 	ldw	r6,4(r16)
  800cf4:	81400c17 	ldw	r5,48(r16)
  800cf8:	11a7c83a 	sub	r19,r2,r6
  800cfc:	28008226 	beq	r5,zero,800f08 <_fseeko_r+0x418>
  800d00:	81c00f17 	ldw	r7,60(r16)
  800d04:	99e7c83a 	sub	r19,r19,r7
  800d08:	81000e17 	ldw	r4,56(r16)
  800d0c:	80800417 	ldw	r2,16(r16)
  800d10:	99a7883a 	add	r19,r19,r6
  800d14:	2087c83a 	sub	r3,r4,r2
  800d18:	98e7c83a 	sub	r19,r19,r3
  800d1c:	38c7883a 	add	r3,r7,r3
  800d20:	b4c02b16 	blt	r22,r19,800dd0 <_fseeko_r+0x2e0>
  800d24:	98c9883a 	add	r4,r19,r3
  800d28:	b100292e 	bgeu	r22,r4,800dd0 <_fseeko_r+0x2e0>
  800d2c:	b4e7c83a 	sub	r19,r22,r19
  800d30:	14c5883a 	add	r2,r2,r19
  800d34:	1ce7c83a 	sub	r19,r3,r19
  800d38:	80800015 	stw	r2,0(r16)
  800d3c:	84c00115 	stw	r19,4(r16)
  800d40:	28000526 	beq	r5,zero,800d58 <_fseeko_r+0x268>
  800d44:	80801004 	addi	r2,r16,64
  800d48:	28800226 	beq	r5,r2,800d54 <_fseeko_r+0x264>
  800d4c:	8809883a 	mov	r4,r17
  800d50:	08065600 	call	806560 <_free_r>
  800d54:	80000c15 	stw	zero,48(r16)
  800d58:	8080030b 	ldhu	r2,12(r16)
  800d5c:	01800204 	movi	r6,8
  800d60:	000b883a 	mov	r5,zero
  800d64:	10bff7cc 	andi	r2,r2,65503
  800d68:	8080030d 	sth	r2,12(r16)
  800d6c:	81001704 	addi	r4,r16,92
  800d70:	08019740 	call	801974 <memset>
  800d74:	0027883a 	mov	r19,zero
  800d78:	003f7c06 	br	800b6c <__alt_mem_onchip_mem+0xff7f8b6c>
  800d7c:	80c00117 	ldw	r3,4(r16)
  800d80:	80800c17 	ldw	r2,48(r16)
  800d84:	98e7c83a 	sub	r19,r19,r3
  800d88:	10003b26 	beq	r2,zero,800e78 <_fseeko_r+0x388>
  800d8c:	80c00f17 	ldw	r3,60(r16)
  800d90:	80800417 	ldw	r2,16(r16)
  800d94:	98e7c83a 	sub	r19,r19,r3
  800d98:	003fbc06 	br	800c8c <__alt_mem_onchip_mem+0xff7f8c8c>
  800d9c:	8140038f 	ldh	r5,14(r16)
  800da0:	d80d883a 	mov	r6,sp
  800da4:	8809883a 	mov	r4,r17
  800da8:	0800f500 	call	800f50 <_fstat_r>
  800dac:	103f891e 	bne	r2,zero,800bd4 <__alt_mem_onchip_mem+0xff7f8bd4>
  800db0:	dd800417 	ldw	r22,16(sp)
  800db4:	adad883a 	add	r22,r21,r22
  800db8:	b83fc926 	beq	r23,zero,800ce0 <__alt_mem_onchip_mem+0xff7f8ce0>
  800dbc:	81400c17 	ldw	r5,48(r16)
  800dc0:	81800117 	ldw	r6,4(r16)
  800dc4:	28005026 	beq	r5,zero,800f08 <_fseeko_r+0x418>
  800dc8:	81c00f17 	ldw	r7,60(r16)
  800dcc:	003fce06 	br	800d08 <__alt_mem_onchip_mem+0xff7f8d08>
  800dd0:	84c01317 	ldw	r19,76(r16)
  800dd4:	81400717 	ldw	r5,28(r16)
  800dd8:	000f883a 	mov	r7,zero
  800ddc:	04e7c83a 	sub	r19,zero,r19
  800de0:	9da6703a 	and	r19,r19,r22
  800de4:	980d883a 	mov	r6,r19
  800de8:	8809883a 	mov	r4,r17
  800dec:	a03ee83a 	callr	r20
  800df0:	00ffffc4 	movi	r3,-1
  800df4:	10ff7726 	beq	r2,r3,800bd4 <__alt_mem_onchip_mem+0xff7f8bd4>
  800df8:	80800417 	ldw	r2,16(r16)
  800dfc:	81400c17 	ldw	r5,48(r16)
  800e00:	80000115 	stw	zero,4(r16)
  800e04:	80800015 	stw	r2,0(r16)
  800e08:	28000526 	beq	r5,zero,800e20 <_fseeko_r+0x330>
  800e0c:	80801004 	addi	r2,r16,64
  800e10:	28800226 	beq	r5,r2,800e1c <_fseeko_r+0x32c>
  800e14:	8809883a 	mov	r4,r17
  800e18:	08065600 	call	806560 <_free_r>
  800e1c:	80000c15 	stw	zero,48(r16)
  800e20:	8080030b 	ldhu	r2,12(r16)
  800e24:	b4e7c83a 	sub	r19,r22,r19
  800e28:	10bff7cc 	andi	r2,r2,65503
  800e2c:	8080030d 	sth	r2,12(r16)
  800e30:	98000b26 	beq	r19,zero,800e60 <_fseeko_r+0x370>
  800e34:	800b883a 	mov	r5,r16
  800e38:	8809883a 	mov	r4,r17
  800e3c:	0801bec0 	call	801bec <__srefill_r>
  800e40:	103f641e 	bne	r2,zero,800bd4 <__alt_mem_onchip_mem+0xff7f8bd4>
  800e44:	80800117 	ldw	r2,4(r16)
  800e48:	14ff6236 	bltu	r2,r19,800bd4 <__alt_mem_onchip_mem+0xff7f8bd4>
  800e4c:	80c00017 	ldw	r3,0(r16)
  800e50:	14c5c83a 	sub	r2,r2,r19
  800e54:	80800115 	stw	r2,4(r16)
  800e58:	1ce7883a 	add	r19,r3,r19
  800e5c:	84c00015 	stw	r19,0(r16)
  800e60:	01800204 	movi	r6,8
  800e64:	000b883a 	mov	r5,zero
  800e68:	81001704 	addi	r4,r16,92
  800e6c:	08019740 	call	801974 <memset>
  800e70:	0027883a 	mov	r19,zero
  800e74:	003f3d06 	br	800b6c <__alt_mem_onchip_mem+0xff7f8b6c>
  800e78:	80800417 	ldw	r2,16(r16)
  800e7c:	003f8306 	br	800c8c <__alt_mem_onchip_mem+0xff7f8c8c>
  800e80:	81400717 	ldw	r5,28(r16)
  800e84:	900f883a 	mov	r7,r18
  800e88:	000d883a 	mov	r6,zero
  800e8c:	8809883a 	mov	r4,r17
  800e90:	a03ee83a 	callr	r20
  800e94:	1027883a 	mov	r19,r2
  800e98:	00bfffc4 	movi	r2,-1
  800e9c:	98bf3226 	beq	r19,r2,800b68 <__alt_mem_onchip_mem+0xff7f8b68>
  800ea0:	8080030b 	ldhu	r2,12(r16)
  800ea4:	003f7006 	br	800c68 <__alt_mem_onchip_mem+0xff7f8c68>
  800ea8:	8140038f 	ldh	r5,14(r16)
  800eac:	283f4716 	blt	r5,zero,800bcc <__alt_mem_onchip_mem+0xff7f8bcc>
  800eb0:	d80d883a 	mov	r6,sp
  800eb4:	8809883a 	mov	r4,r17
  800eb8:	0800f500 	call	800f50 <_fstat_r>
  800ebc:	1000041e 	bne	r2,zero,800ed0 <_fseeko_r+0x3e0>
  800ec0:	d8800117 	ldw	r2,4(sp)
  800ec4:	00e00014 	movui	r3,32768
  800ec8:	10bc000c 	andi	r2,r2,61440
  800ecc:	10ff7c26 	beq	r2,r3,800cc0 <__alt_mem_onchip_mem+0xff7f8cc0>
  800ed0:	8080030b 	ldhu	r2,12(r16)
  800ed4:	003f3d06 	br	800bcc <__alt_mem_onchip_mem+0xff7f8bcc>
  800ed8:	800b883a 	mov	r5,r16
  800edc:	8809883a 	mov	r4,r17
  800ee0:	0800fac0 	call	800fac <__smakebuf_r>
  800ee4:	003f3106 	br	800bac <__alt_mem_onchip_mem+0xff7f8bac>
  800ee8:	81400717 	ldw	r5,28(r16)
  800eec:	01c00044 	movi	r7,1
  800ef0:	000d883a 	mov	r6,zero
  800ef4:	8809883a 	mov	r4,r17
  800ef8:	a03ee83a 	callr	r20
  800efc:	00ffffc4 	movi	r3,-1
  800f00:	10ff7b1e 	bne	r2,r3,800cf0 <__alt_mem_onchip_mem+0xff7f8cf0>
  800f04:	003f3306 	br	800bd4 <__alt_mem_onchip_mem+0xff7f8bd4>
  800f08:	80c00017 	ldw	r3,0(r16)
  800f0c:	80800417 	ldw	r2,16(r16)
  800f10:	000b883a 	mov	r5,zero
  800f14:	1887c83a 	sub	r3,r3,r2
  800f18:	98e7c83a 	sub	r19,r19,r3
  800f1c:	30c7883a 	add	r3,r6,r3
  800f20:	003f7f06 	br	800d20 <__alt_mem_onchip_mem+0xff7f8d20>
  800f24:	00800744 	movi	r2,29
  800f28:	88800015 	stw	r2,0(r17)
  800f2c:	04ffffc4 	movi	r19,-1
  800f30:	003f0e06 	br	800b6c <__alt_mem_onchip_mem+0xff7f8b6c>

00800f34 <fseeko>:
  800f34:	00802074 	movhi	r2,129
  800f38:	10900904 	addi	r2,r2,16420
  800f3c:	300f883a 	mov	r7,r6
  800f40:	280d883a 	mov	r6,r5
  800f44:	200b883a 	mov	r5,r4
  800f48:	11000017 	ldw	r4,0(r2)
  800f4c:	0800af01 	jmpi	800af0 <_fseeko_r>

00800f50 <_fstat_r>:
  800f50:	defffd04 	addi	sp,sp,-12
  800f54:	2805883a 	mov	r2,r5
  800f58:	dc000015 	stw	r16,0(sp)
  800f5c:	04002074 	movhi	r16,129
  800f60:	dc400115 	stw	r17,4(sp)
  800f64:	84175c04 	addi	r16,r16,23920
  800f68:	2023883a 	mov	r17,r4
  800f6c:	300b883a 	mov	r5,r6
  800f70:	1009883a 	mov	r4,r2
  800f74:	dfc00215 	stw	ra,8(sp)
  800f78:	80000015 	stw	zero,0(r16)
  800f7c:	080dda00 	call	80dda0 <fstat>
  800f80:	00ffffc4 	movi	r3,-1
  800f84:	10c00526 	beq	r2,r3,800f9c <_fstat_r+0x4c>
  800f88:	dfc00217 	ldw	ra,8(sp)
  800f8c:	dc400117 	ldw	r17,4(sp)
  800f90:	dc000017 	ldw	r16,0(sp)
  800f94:	dec00304 	addi	sp,sp,12
  800f98:	f800283a 	ret
  800f9c:	80c00017 	ldw	r3,0(r16)
  800fa0:	183ff926 	beq	r3,zero,800f88 <__alt_mem_onchip_mem+0xff7f8f88>
  800fa4:	88c00015 	stw	r3,0(r17)
  800fa8:	003ff706 	br	800f88 <__alt_mem_onchip_mem+0xff7f8f88>

00800fac <__smakebuf_r>:
  800fac:	2880030b 	ldhu	r2,12(r5)
  800fb0:	10c0008c 	andi	r3,r2,2
  800fb4:	1800411e 	bne	r3,zero,8010bc <__smakebuf_r+0x110>
  800fb8:	deffec04 	addi	sp,sp,-80
  800fbc:	dc000f15 	stw	r16,60(sp)
  800fc0:	2821883a 	mov	r16,r5
  800fc4:	2940038f 	ldh	r5,14(r5)
  800fc8:	dc401015 	stw	r17,64(sp)
  800fcc:	dfc01315 	stw	ra,76(sp)
  800fd0:	dcc01215 	stw	r19,72(sp)
  800fd4:	dc801115 	stw	r18,68(sp)
  800fd8:	2023883a 	mov	r17,r4
  800fdc:	28001c16 	blt	r5,zero,801050 <__smakebuf_r+0xa4>
  800fe0:	d80d883a 	mov	r6,sp
  800fe4:	0800f500 	call	800f50 <_fstat_r>
  800fe8:	10001816 	blt	r2,zero,80104c <__smakebuf_r+0xa0>
  800fec:	d8800117 	ldw	r2,4(sp)
  800ff0:	00e00014 	movui	r3,32768
  800ff4:	10bc000c 	andi	r2,r2,61440
  800ff8:	14c80020 	cmpeqi	r19,r2,8192
  800ffc:	10c03726 	beq	r2,r3,8010dc <__smakebuf_r+0x130>
  801000:	80c0030b 	ldhu	r3,12(r16)
  801004:	18c20014 	ori	r3,r3,2048
  801008:	80c0030d 	sth	r3,12(r16)
  80100c:	00c80004 	movi	r3,8192
  801010:	10c0521e 	bne	r2,r3,80115c <__smakebuf_r+0x1b0>
  801014:	8140038f 	ldh	r5,14(r16)
  801018:	8809883a 	mov	r4,r17
  80101c:	0806eb40 	call	806eb4 <_isatty_r>
  801020:	10004c26 	beq	r2,zero,801154 <__smakebuf_r+0x1a8>
  801024:	8080030b 	ldhu	r2,12(r16)
  801028:	80c010c4 	addi	r3,r16,67
  80102c:	80c00015 	stw	r3,0(r16)
  801030:	10800054 	ori	r2,r2,1
  801034:	8080030d 	sth	r2,12(r16)
  801038:	00800044 	movi	r2,1
  80103c:	80c00415 	stw	r3,16(r16)
  801040:	80800515 	stw	r2,20(r16)
  801044:	04810004 	movi	r18,1024
  801048:	00000706 	br	801068 <__smakebuf_r+0xbc>
  80104c:	8080030b 	ldhu	r2,12(r16)
  801050:	10c0200c 	andi	r3,r2,128
  801054:	18001f1e 	bne	r3,zero,8010d4 <__smakebuf_r+0x128>
  801058:	04810004 	movi	r18,1024
  80105c:	10820014 	ori	r2,r2,2048
  801060:	8080030d 	sth	r2,12(r16)
  801064:	0027883a 	mov	r19,zero
  801068:	900b883a 	mov	r5,r18
  80106c:	8809883a 	mov	r4,r17
  801070:	08011680 	call	801168 <_malloc_r>
  801074:	10002c26 	beq	r2,zero,801128 <__smakebuf_r+0x17c>
  801078:	80c0030b 	ldhu	r3,12(r16)
  80107c:	01002034 	movhi	r4,128
  801080:	2117fe04 	addi	r4,r4,24568
  801084:	89000f15 	stw	r4,60(r17)
  801088:	18c02014 	ori	r3,r3,128
  80108c:	80c0030d 	sth	r3,12(r16)
  801090:	80800015 	stw	r2,0(r16)
  801094:	80800415 	stw	r2,16(r16)
  801098:	84800515 	stw	r18,20(r16)
  80109c:	98001a1e 	bne	r19,zero,801108 <__smakebuf_r+0x15c>
  8010a0:	dfc01317 	ldw	ra,76(sp)
  8010a4:	dcc01217 	ldw	r19,72(sp)
  8010a8:	dc801117 	ldw	r18,68(sp)
  8010ac:	dc401017 	ldw	r17,64(sp)
  8010b0:	dc000f17 	ldw	r16,60(sp)
  8010b4:	dec01404 	addi	sp,sp,80
  8010b8:	f800283a 	ret
  8010bc:	288010c4 	addi	r2,r5,67
  8010c0:	28800015 	stw	r2,0(r5)
  8010c4:	28800415 	stw	r2,16(r5)
  8010c8:	00800044 	movi	r2,1
  8010cc:	28800515 	stw	r2,20(r5)
  8010d0:	f800283a 	ret
  8010d4:	04801004 	movi	r18,64
  8010d8:	003fe006 	br	80105c <__alt_mem_onchip_mem+0xff7f905c>
  8010dc:	81000a17 	ldw	r4,40(r16)
  8010e0:	00c02034 	movhi	r3,128
  8010e4:	18c7bb04 	addi	r3,r3,7916
  8010e8:	20ffc51e 	bne	r4,r3,801000 <__alt_mem_onchip_mem+0xff7f9000>
  8010ec:	8080030b 	ldhu	r2,12(r16)
  8010f0:	04810004 	movi	r18,1024
  8010f4:	84801315 	stw	r18,76(r16)
  8010f8:	1484b03a 	or	r2,r2,r18
  8010fc:	8080030d 	sth	r2,12(r16)
  801100:	0027883a 	mov	r19,zero
  801104:	003fd806 	br	801068 <__alt_mem_onchip_mem+0xff7f9068>
  801108:	8140038f 	ldh	r5,14(r16)
  80110c:	8809883a 	mov	r4,r17
  801110:	0806eb40 	call	806eb4 <_isatty_r>
  801114:	103fe226 	beq	r2,zero,8010a0 <__alt_mem_onchip_mem+0xff7f90a0>
  801118:	8080030b 	ldhu	r2,12(r16)
  80111c:	10800054 	ori	r2,r2,1
  801120:	8080030d 	sth	r2,12(r16)
  801124:	003fde06 	br	8010a0 <__alt_mem_onchip_mem+0xff7f90a0>
  801128:	8080030b 	ldhu	r2,12(r16)
  80112c:	10c0800c 	andi	r3,r2,512
  801130:	183fdb1e 	bne	r3,zero,8010a0 <__alt_mem_onchip_mem+0xff7f90a0>
  801134:	10800094 	ori	r2,r2,2
  801138:	80c010c4 	addi	r3,r16,67
  80113c:	8080030d 	sth	r2,12(r16)
  801140:	00800044 	movi	r2,1
  801144:	80c00015 	stw	r3,0(r16)
  801148:	80c00415 	stw	r3,16(r16)
  80114c:	80800515 	stw	r2,20(r16)
  801150:	003fd306 	br	8010a0 <__alt_mem_onchip_mem+0xff7f90a0>
  801154:	04810004 	movi	r18,1024
  801158:	003fc306 	br	801068 <__alt_mem_onchip_mem+0xff7f9068>
  80115c:	0027883a 	mov	r19,zero
  801160:	04810004 	movi	r18,1024
  801164:	003fc006 	br	801068 <__alt_mem_onchip_mem+0xff7f9068>

00801168 <_malloc_r>:
  801168:	defff504 	addi	sp,sp,-44
  80116c:	dc800315 	stw	r18,12(sp)
  801170:	dfc00a15 	stw	ra,40(sp)
  801174:	df000915 	stw	fp,36(sp)
  801178:	ddc00815 	stw	r23,32(sp)
  80117c:	dd800715 	stw	r22,28(sp)
  801180:	dd400615 	stw	r21,24(sp)
  801184:	dd000515 	stw	r20,20(sp)
  801188:	dcc00415 	stw	r19,16(sp)
  80118c:	dc400215 	stw	r17,8(sp)
  801190:	dc000115 	stw	r16,4(sp)
  801194:	288002c4 	addi	r2,r5,11
  801198:	00c00584 	movi	r3,22
  80119c:	2025883a 	mov	r18,r4
  8011a0:	18807f2e 	bgeu	r3,r2,8013a0 <_malloc_r+0x238>
  8011a4:	047ffe04 	movi	r17,-8
  8011a8:	1462703a 	and	r17,r2,r17
  8011ac:	8800a316 	blt	r17,zero,80143c <_malloc_r+0x2d4>
  8011b0:	8940a236 	bltu	r17,r5,80143c <_malloc_r+0x2d4>
  8011b4:	080e3280 	call	80e328 <__malloc_lock>
  8011b8:	00807dc4 	movi	r2,503
  8011bc:	1441e92e 	bgeu	r2,r17,801964 <_malloc_r+0x7fc>
  8011c0:	8804d27a 	srli	r2,r17,9
  8011c4:	1000a126 	beq	r2,zero,80144c <_malloc_r+0x2e4>
  8011c8:	00c00104 	movi	r3,4
  8011cc:	18811e36 	bltu	r3,r2,801648 <_malloc_r+0x4e0>
  8011d0:	8804d1ba 	srli	r2,r17,6
  8011d4:	12000e44 	addi	r8,r2,57
  8011d8:	11c00e04 	addi	r7,r2,56
  8011dc:	4209883a 	add	r4,r8,r8
  8011e0:	04c02074 	movhi	r19,129
  8011e4:	2109883a 	add	r4,r4,r4
  8011e8:	9cc9ed04 	addi	r19,r19,10164
  8011ec:	2109883a 	add	r4,r4,r4
  8011f0:	9909883a 	add	r4,r19,r4
  8011f4:	24000117 	ldw	r16,4(r4)
  8011f8:	213ffe04 	addi	r4,r4,-8
  8011fc:	24009726 	beq	r4,r16,80145c <_malloc_r+0x2f4>
  801200:	80800117 	ldw	r2,4(r16)
  801204:	01bfff04 	movi	r6,-4
  801208:	014003c4 	movi	r5,15
  80120c:	1184703a 	and	r2,r2,r6
  801210:	1447c83a 	sub	r3,r2,r17
  801214:	28c00716 	blt	r5,r3,801234 <_malloc_r+0xcc>
  801218:	1800920e 	bge	r3,zero,801464 <_malloc_r+0x2fc>
  80121c:	84000317 	ldw	r16,12(r16)
  801220:	24008e26 	beq	r4,r16,80145c <_malloc_r+0x2f4>
  801224:	80800117 	ldw	r2,4(r16)
  801228:	1184703a 	and	r2,r2,r6
  80122c:	1447c83a 	sub	r3,r2,r17
  801230:	28fff90e 	bge	r5,r3,801218 <__alt_mem_onchip_mem+0xff7f9218>
  801234:	3809883a 	mov	r4,r7
  801238:	01802074 	movhi	r6,129
  80123c:	9c000417 	ldw	r16,16(r19)
  801240:	3189ed04 	addi	r6,r6,10164
  801244:	32000204 	addi	r8,r6,8
  801248:	82013426 	beq	r16,r8,80171c <_malloc_r+0x5b4>
  80124c:	80c00117 	ldw	r3,4(r16)
  801250:	00bfff04 	movi	r2,-4
  801254:	188e703a 	and	r7,r3,r2
  801258:	3c45c83a 	sub	r2,r7,r17
  80125c:	00c003c4 	movi	r3,15
  801260:	18811f16 	blt	r3,r2,8016e0 <_malloc_r+0x578>
  801264:	32000515 	stw	r8,20(r6)
  801268:	32000415 	stw	r8,16(r6)
  80126c:	10007f0e 	bge	r2,zero,80146c <_malloc_r+0x304>
  801270:	00807fc4 	movi	r2,511
  801274:	11c0fd36 	bltu	r2,r7,80166c <_malloc_r+0x504>
  801278:	3806d0fa 	srli	r3,r7,3
  80127c:	01c00044 	movi	r7,1
  801280:	30800117 	ldw	r2,4(r6)
  801284:	19400044 	addi	r5,r3,1
  801288:	294b883a 	add	r5,r5,r5
  80128c:	1807d0ba 	srai	r3,r3,2
  801290:	294b883a 	add	r5,r5,r5
  801294:	294b883a 	add	r5,r5,r5
  801298:	298b883a 	add	r5,r5,r6
  80129c:	38c6983a 	sll	r3,r7,r3
  8012a0:	29c00017 	ldw	r7,0(r5)
  8012a4:	2a7ffe04 	addi	r9,r5,-8
  8012a8:	1886b03a 	or	r3,r3,r2
  8012ac:	82400315 	stw	r9,12(r16)
  8012b0:	81c00215 	stw	r7,8(r16)
  8012b4:	30c00115 	stw	r3,4(r6)
  8012b8:	2c000015 	stw	r16,0(r5)
  8012bc:	3c000315 	stw	r16,12(r7)
  8012c0:	2005d0ba 	srai	r2,r4,2
  8012c4:	01400044 	movi	r5,1
  8012c8:	288a983a 	sll	r5,r5,r2
  8012cc:	19406f36 	bltu	r3,r5,80148c <_malloc_r+0x324>
  8012d0:	28c4703a 	and	r2,r5,r3
  8012d4:	10000a1e 	bne	r2,zero,801300 <_malloc_r+0x198>
  8012d8:	00bfff04 	movi	r2,-4
  8012dc:	294b883a 	add	r5,r5,r5
  8012e0:	2088703a 	and	r4,r4,r2
  8012e4:	28c4703a 	and	r2,r5,r3
  8012e8:	21000104 	addi	r4,r4,4
  8012ec:	1000041e 	bne	r2,zero,801300 <_malloc_r+0x198>
  8012f0:	294b883a 	add	r5,r5,r5
  8012f4:	28c4703a 	and	r2,r5,r3
  8012f8:	21000104 	addi	r4,r4,4
  8012fc:	103ffc26 	beq	r2,zero,8012f0 <__alt_mem_onchip_mem+0xff7f92f0>
  801300:	02bfff04 	movi	r10,-4
  801304:	024003c4 	movi	r9,15
  801308:	21800044 	addi	r6,r4,1
  80130c:	318d883a 	add	r6,r6,r6
  801310:	318d883a 	add	r6,r6,r6
  801314:	318d883a 	add	r6,r6,r6
  801318:	998d883a 	add	r6,r19,r6
  80131c:	333ffe04 	addi	r12,r6,-8
  801320:	2017883a 	mov	r11,r4
  801324:	31800104 	addi	r6,r6,4
  801328:	34000017 	ldw	r16,0(r6)
  80132c:	31fffd04 	addi	r7,r6,-12
  801330:	81c0041e 	bne	r16,r7,801344 <_malloc_r+0x1dc>
  801334:	0000fb06 	br	801724 <_malloc_r+0x5bc>
  801338:	1801030e 	bge	r3,zero,801748 <_malloc_r+0x5e0>
  80133c:	84000317 	ldw	r16,12(r16)
  801340:	81c0f826 	beq	r16,r7,801724 <_malloc_r+0x5bc>
  801344:	80800117 	ldw	r2,4(r16)
  801348:	1284703a 	and	r2,r2,r10
  80134c:	1447c83a 	sub	r3,r2,r17
  801350:	48fff90e 	bge	r9,r3,801338 <__alt_mem_onchip_mem+0xff7f9338>
  801354:	80800317 	ldw	r2,12(r16)
  801358:	81000217 	ldw	r4,8(r16)
  80135c:	89400054 	ori	r5,r17,1
  801360:	81400115 	stw	r5,4(r16)
  801364:	20800315 	stw	r2,12(r4)
  801368:	11000215 	stw	r4,8(r2)
  80136c:	8463883a 	add	r17,r16,r17
  801370:	9c400515 	stw	r17,20(r19)
  801374:	9c400415 	stw	r17,16(r19)
  801378:	18800054 	ori	r2,r3,1
  80137c:	88800115 	stw	r2,4(r17)
  801380:	8a000315 	stw	r8,12(r17)
  801384:	8a000215 	stw	r8,8(r17)
  801388:	88e3883a 	add	r17,r17,r3
  80138c:	88c00015 	stw	r3,0(r17)
  801390:	9009883a 	mov	r4,r18
  801394:	080e34c0 	call	80e34c <__malloc_unlock>
  801398:	80800204 	addi	r2,r16,8
  80139c:	00001b06 	br	80140c <_malloc_r+0x2a4>
  8013a0:	04400404 	movi	r17,16
  8013a4:	89402536 	bltu	r17,r5,80143c <_malloc_r+0x2d4>
  8013a8:	080e3280 	call	80e328 <__malloc_lock>
  8013ac:	00800184 	movi	r2,6
  8013b0:	01000084 	movi	r4,2
  8013b4:	04c02074 	movhi	r19,129
  8013b8:	1085883a 	add	r2,r2,r2
  8013bc:	9cc9ed04 	addi	r19,r19,10164
  8013c0:	1085883a 	add	r2,r2,r2
  8013c4:	9885883a 	add	r2,r19,r2
  8013c8:	14000117 	ldw	r16,4(r2)
  8013cc:	10fffe04 	addi	r3,r2,-8
  8013d0:	80c0d926 	beq	r16,r3,801738 <_malloc_r+0x5d0>
  8013d4:	80c00117 	ldw	r3,4(r16)
  8013d8:	81000317 	ldw	r4,12(r16)
  8013dc:	00bfff04 	movi	r2,-4
  8013e0:	1884703a 	and	r2,r3,r2
  8013e4:	81400217 	ldw	r5,8(r16)
  8013e8:	8085883a 	add	r2,r16,r2
  8013ec:	10c00117 	ldw	r3,4(r2)
  8013f0:	29000315 	stw	r4,12(r5)
  8013f4:	21400215 	stw	r5,8(r4)
  8013f8:	18c00054 	ori	r3,r3,1
  8013fc:	10c00115 	stw	r3,4(r2)
  801400:	9009883a 	mov	r4,r18
  801404:	080e34c0 	call	80e34c <__malloc_unlock>
  801408:	80800204 	addi	r2,r16,8
  80140c:	dfc00a17 	ldw	ra,40(sp)
  801410:	df000917 	ldw	fp,36(sp)
  801414:	ddc00817 	ldw	r23,32(sp)
  801418:	dd800717 	ldw	r22,28(sp)
  80141c:	dd400617 	ldw	r21,24(sp)
  801420:	dd000517 	ldw	r20,20(sp)
  801424:	dcc00417 	ldw	r19,16(sp)
  801428:	dc800317 	ldw	r18,12(sp)
  80142c:	dc400217 	ldw	r17,8(sp)
  801430:	dc000117 	ldw	r16,4(sp)
  801434:	dec00b04 	addi	sp,sp,44
  801438:	f800283a 	ret
  80143c:	00800304 	movi	r2,12
  801440:	90800015 	stw	r2,0(r18)
  801444:	0005883a 	mov	r2,zero
  801448:	003ff006 	br	80140c <__alt_mem_onchip_mem+0xff7f940c>
  80144c:	01002004 	movi	r4,128
  801450:	02001004 	movi	r8,64
  801454:	01c00fc4 	movi	r7,63
  801458:	003f6106 	br	8011e0 <__alt_mem_onchip_mem+0xff7f91e0>
  80145c:	4009883a 	mov	r4,r8
  801460:	003f7506 	br	801238 <__alt_mem_onchip_mem+0xff7f9238>
  801464:	81000317 	ldw	r4,12(r16)
  801468:	003fde06 	br	8013e4 <__alt_mem_onchip_mem+0xff7f93e4>
  80146c:	81c5883a 	add	r2,r16,r7
  801470:	11400117 	ldw	r5,4(r2)
  801474:	9009883a 	mov	r4,r18
  801478:	29400054 	ori	r5,r5,1
  80147c:	11400115 	stw	r5,4(r2)
  801480:	080e34c0 	call	80e34c <__malloc_unlock>
  801484:	80800204 	addi	r2,r16,8
  801488:	003fe006 	br	80140c <__alt_mem_onchip_mem+0xff7f940c>
  80148c:	9c000217 	ldw	r16,8(r19)
  801490:	00bfff04 	movi	r2,-4
  801494:	85800117 	ldw	r22,4(r16)
  801498:	b0ac703a 	and	r22,r22,r2
  80149c:	b4400336 	bltu	r22,r17,8014ac <_malloc_r+0x344>
  8014a0:	b445c83a 	sub	r2,r22,r17
  8014a4:	00c003c4 	movi	r3,15
  8014a8:	18805d16 	blt	r3,r2,801620 <_malloc_r+0x4b8>
  8014ac:	05c02074 	movhi	r23,129
  8014b0:	00802074 	movhi	r2,129
  8014b4:	10975f04 	addi	r2,r2,23932
  8014b8:	bdd00a04 	addi	r23,r23,16424
  8014bc:	15400017 	ldw	r21,0(r2)
  8014c0:	b8c00017 	ldw	r3,0(r23)
  8014c4:	00bfffc4 	movi	r2,-1
  8014c8:	858d883a 	add	r6,r16,r22
  8014cc:	8d6b883a 	add	r21,r17,r21
  8014d0:	1880ea26 	beq	r3,r2,80187c <_malloc_r+0x714>
  8014d4:	ad4403c4 	addi	r21,r21,4111
  8014d8:	00bc0004 	movi	r2,-4096
  8014dc:	a8aa703a 	and	r21,r21,r2
  8014e0:	a80b883a 	mov	r5,r21
  8014e4:	9009883a 	mov	r4,r18
  8014e8:	d9800015 	stw	r6,0(sp)
  8014ec:	0801dc00 	call	801dc0 <_sbrk_r>
  8014f0:	1029883a 	mov	r20,r2
  8014f4:	00bfffc4 	movi	r2,-1
  8014f8:	d9800017 	ldw	r6,0(sp)
  8014fc:	a080e826 	beq	r20,r2,8018a0 <_malloc_r+0x738>
  801500:	a180a636 	bltu	r20,r6,80179c <_malloc_r+0x634>
  801504:	07002074 	movhi	fp,129
  801508:	e7176a04 	addi	fp,fp,23976
  80150c:	e0800017 	ldw	r2,0(fp)
  801510:	a887883a 	add	r3,r21,r2
  801514:	e0c00015 	stw	r3,0(fp)
  801518:	3500e626 	beq	r6,r20,8018b4 <_malloc_r+0x74c>
  80151c:	b9000017 	ldw	r4,0(r23)
  801520:	00bfffc4 	movi	r2,-1
  801524:	2080ee26 	beq	r4,r2,8018e0 <_malloc_r+0x778>
  801528:	a185c83a 	sub	r2,r20,r6
  80152c:	10c5883a 	add	r2,r2,r3
  801530:	e0800015 	stw	r2,0(fp)
  801534:	a0c001cc 	andi	r3,r20,7
  801538:	1800bc26 	beq	r3,zero,80182c <_malloc_r+0x6c4>
  80153c:	a0e9c83a 	sub	r20,r20,r3
  801540:	00840204 	movi	r2,4104
  801544:	a5000204 	addi	r20,r20,8
  801548:	10c7c83a 	sub	r3,r2,r3
  80154c:	a545883a 	add	r2,r20,r21
  801550:	1083ffcc 	andi	r2,r2,4095
  801554:	18abc83a 	sub	r21,r3,r2
  801558:	a80b883a 	mov	r5,r21
  80155c:	9009883a 	mov	r4,r18
  801560:	0801dc00 	call	801dc0 <_sbrk_r>
  801564:	00ffffc4 	movi	r3,-1
  801568:	10c0e126 	beq	r2,r3,8018f0 <_malloc_r+0x788>
  80156c:	1505c83a 	sub	r2,r2,r20
  801570:	1545883a 	add	r2,r2,r21
  801574:	10800054 	ori	r2,r2,1
  801578:	e0c00017 	ldw	r3,0(fp)
  80157c:	9d000215 	stw	r20,8(r19)
  801580:	a0800115 	stw	r2,4(r20)
  801584:	a8c7883a 	add	r3,r21,r3
  801588:	e0c00015 	stw	r3,0(fp)
  80158c:	84c00e26 	beq	r16,r19,8015c8 <_malloc_r+0x460>
  801590:	018003c4 	movi	r6,15
  801594:	3580a72e 	bgeu	r6,r22,801834 <_malloc_r+0x6cc>
  801598:	81400117 	ldw	r5,4(r16)
  80159c:	013ffe04 	movi	r4,-8
  8015a0:	b0bffd04 	addi	r2,r22,-12
  8015a4:	1104703a 	and	r2,r2,r4
  8015a8:	2900004c 	andi	r4,r5,1
  8015ac:	2088b03a 	or	r4,r4,r2
  8015b0:	81000115 	stw	r4,4(r16)
  8015b4:	01400144 	movi	r5,5
  8015b8:	8089883a 	add	r4,r16,r2
  8015bc:	21400115 	stw	r5,4(r4)
  8015c0:	21400215 	stw	r5,8(r4)
  8015c4:	3080cd36 	bltu	r6,r2,8018fc <_malloc_r+0x794>
  8015c8:	00802074 	movhi	r2,129
  8015cc:	10975e04 	addi	r2,r2,23928
  8015d0:	11000017 	ldw	r4,0(r2)
  8015d4:	20c0012e 	bgeu	r4,r3,8015dc <_malloc_r+0x474>
  8015d8:	10c00015 	stw	r3,0(r2)
  8015dc:	00802074 	movhi	r2,129
  8015e0:	10975d04 	addi	r2,r2,23924
  8015e4:	11000017 	ldw	r4,0(r2)
  8015e8:	9c000217 	ldw	r16,8(r19)
  8015ec:	20c0012e 	bgeu	r4,r3,8015f4 <_malloc_r+0x48c>
  8015f0:	10c00015 	stw	r3,0(r2)
  8015f4:	80c00117 	ldw	r3,4(r16)
  8015f8:	00bfff04 	movi	r2,-4
  8015fc:	1886703a 	and	r3,r3,r2
  801600:	1c45c83a 	sub	r2,r3,r17
  801604:	1c400236 	bltu	r3,r17,801610 <_malloc_r+0x4a8>
  801608:	00c003c4 	movi	r3,15
  80160c:	18800416 	blt	r3,r2,801620 <_malloc_r+0x4b8>
  801610:	9009883a 	mov	r4,r18
  801614:	080e34c0 	call	80e34c <__malloc_unlock>
  801618:	0005883a 	mov	r2,zero
  80161c:	003f7b06 	br	80140c <__alt_mem_onchip_mem+0xff7f940c>
  801620:	88c00054 	ori	r3,r17,1
  801624:	80c00115 	stw	r3,4(r16)
  801628:	8463883a 	add	r17,r16,r17
  80162c:	10800054 	ori	r2,r2,1
  801630:	9c400215 	stw	r17,8(r19)
  801634:	88800115 	stw	r2,4(r17)
  801638:	9009883a 	mov	r4,r18
  80163c:	080e34c0 	call	80e34c <__malloc_unlock>
  801640:	80800204 	addi	r2,r16,8
  801644:	003f7106 	br	80140c <__alt_mem_onchip_mem+0xff7f940c>
  801648:	00c00504 	movi	r3,20
  80164c:	18804a2e 	bgeu	r3,r2,801778 <_malloc_r+0x610>
  801650:	00c01504 	movi	r3,84
  801654:	18806e36 	bltu	r3,r2,801810 <_malloc_r+0x6a8>
  801658:	8804d33a 	srli	r2,r17,12
  80165c:	12001bc4 	addi	r8,r2,111
  801660:	11c01b84 	addi	r7,r2,110
  801664:	4209883a 	add	r4,r8,r8
  801668:	003edd06 	br	8011e0 <__alt_mem_onchip_mem+0xff7f91e0>
  80166c:	3804d27a 	srli	r2,r7,9
  801670:	00c00104 	movi	r3,4
  801674:	1880442e 	bgeu	r3,r2,801788 <_malloc_r+0x620>
  801678:	00c00504 	movi	r3,20
  80167c:	18808136 	bltu	r3,r2,801884 <_malloc_r+0x71c>
  801680:	11401704 	addi	r5,r2,92
  801684:	10c016c4 	addi	r3,r2,91
  801688:	294b883a 	add	r5,r5,r5
  80168c:	294b883a 	add	r5,r5,r5
  801690:	294b883a 	add	r5,r5,r5
  801694:	994b883a 	add	r5,r19,r5
  801698:	28800017 	ldw	r2,0(r5)
  80169c:	01802074 	movhi	r6,129
  8016a0:	297ffe04 	addi	r5,r5,-8
  8016a4:	3189ed04 	addi	r6,r6,10164
  8016a8:	28806526 	beq	r5,r2,801840 <_malloc_r+0x6d8>
  8016ac:	01bfff04 	movi	r6,-4
  8016b0:	10c00117 	ldw	r3,4(r2)
  8016b4:	1986703a 	and	r3,r3,r6
  8016b8:	38c0022e 	bgeu	r7,r3,8016c4 <_malloc_r+0x55c>
  8016bc:	10800217 	ldw	r2,8(r2)
  8016c0:	28bffb1e 	bne	r5,r2,8016b0 <__alt_mem_onchip_mem+0xff7f96b0>
  8016c4:	11400317 	ldw	r5,12(r2)
  8016c8:	98c00117 	ldw	r3,4(r19)
  8016cc:	81400315 	stw	r5,12(r16)
  8016d0:	80800215 	stw	r2,8(r16)
  8016d4:	2c000215 	stw	r16,8(r5)
  8016d8:	14000315 	stw	r16,12(r2)
  8016dc:	003ef806 	br	8012c0 <__alt_mem_onchip_mem+0xff7f92c0>
  8016e0:	88c00054 	ori	r3,r17,1
  8016e4:	80c00115 	stw	r3,4(r16)
  8016e8:	8463883a 	add	r17,r16,r17
  8016ec:	34400515 	stw	r17,20(r6)
  8016f0:	34400415 	stw	r17,16(r6)
  8016f4:	10c00054 	ori	r3,r2,1
  8016f8:	8a000315 	stw	r8,12(r17)
  8016fc:	8a000215 	stw	r8,8(r17)
  801700:	88c00115 	stw	r3,4(r17)
  801704:	88a3883a 	add	r17,r17,r2
  801708:	88800015 	stw	r2,0(r17)
  80170c:	9009883a 	mov	r4,r18
  801710:	080e34c0 	call	80e34c <__malloc_unlock>
  801714:	80800204 	addi	r2,r16,8
  801718:	003f3c06 	br	80140c <__alt_mem_onchip_mem+0xff7f940c>
  80171c:	30c00117 	ldw	r3,4(r6)
  801720:	003ee706 	br	8012c0 <__alt_mem_onchip_mem+0xff7f92c0>
  801724:	5ac00044 	addi	r11,r11,1
  801728:	588000cc 	andi	r2,r11,3
  80172c:	31800204 	addi	r6,r6,8
  801730:	103efd1e 	bne	r2,zero,801328 <__alt_mem_onchip_mem+0xff7f9328>
  801734:	00002406 	br	8017c8 <_malloc_r+0x660>
  801738:	14000317 	ldw	r16,12(r2)
  80173c:	143f251e 	bne	r2,r16,8013d4 <__alt_mem_onchip_mem+0xff7f93d4>
  801740:	21000084 	addi	r4,r4,2
  801744:	003ebc06 	br	801238 <__alt_mem_onchip_mem+0xff7f9238>
  801748:	8085883a 	add	r2,r16,r2
  80174c:	10c00117 	ldw	r3,4(r2)
  801750:	81000317 	ldw	r4,12(r16)
  801754:	81400217 	ldw	r5,8(r16)
  801758:	18c00054 	ori	r3,r3,1
  80175c:	10c00115 	stw	r3,4(r2)
  801760:	29000315 	stw	r4,12(r5)
  801764:	21400215 	stw	r5,8(r4)
  801768:	9009883a 	mov	r4,r18
  80176c:	080e34c0 	call	80e34c <__malloc_unlock>
  801770:	80800204 	addi	r2,r16,8
  801774:	003f2506 	br	80140c <__alt_mem_onchip_mem+0xff7f940c>
  801778:	12001704 	addi	r8,r2,92
  80177c:	11c016c4 	addi	r7,r2,91
  801780:	4209883a 	add	r4,r8,r8
  801784:	003e9606 	br	8011e0 <__alt_mem_onchip_mem+0xff7f91e0>
  801788:	3804d1ba 	srli	r2,r7,6
  80178c:	11400e44 	addi	r5,r2,57
  801790:	10c00e04 	addi	r3,r2,56
  801794:	294b883a 	add	r5,r5,r5
  801798:	003fbc06 	br	80168c <__alt_mem_onchip_mem+0xff7f968c>
  80179c:	84ff5926 	beq	r16,r19,801504 <__alt_mem_onchip_mem+0xff7f9504>
  8017a0:	00802074 	movhi	r2,129
  8017a4:	1089ed04 	addi	r2,r2,10164
  8017a8:	14000217 	ldw	r16,8(r2)
  8017ac:	00bfff04 	movi	r2,-4
  8017b0:	80c00117 	ldw	r3,4(r16)
  8017b4:	1886703a 	and	r3,r3,r2
  8017b8:	003f9106 	br	801600 <__alt_mem_onchip_mem+0xff7f9600>
  8017bc:	60800217 	ldw	r2,8(r12)
  8017c0:	213fffc4 	addi	r4,r4,-1
  8017c4:	1300651e 	bne	r2,r12,80195c <_malloc_r+0x7f4>
  8017c8:	208000cc 	andi	r2,r4,3
  8017cc:	633ffe04 	addi	r12,r12,-8
  8017d0:	103ffa1e 	bne	r2,zero,8017bc <__alt_mem_onchip_mem+0xff7f97bc>
  8017d4:	98800117 	ldw	r2,4(r19)
  8017d8:	0146303a 	nor	r3,zero,r5
  8017dc:	1884703a 	and	r2,r3,r2
  8017e0:	98800115 	stw	r2,4(r19)
  8017e4:	294b883a 	add	r5,r5,r5
  8017e8:	117f2836 	bltu	r2,r5,80148c <__alt_mem_onchip_mem+0xff7f948c>
  8017ec:	283f2726 	beq	r5,zero,80148c <__alt_mem_onchip_mem+0xff7f948c>
  8017f0:	2886703a 	and	r3,r5,r2
  8017f4:	5809883a 	mov	r4,r11
  8017f8:	183ec31e 	bne	r3,zero,801308 <__alt_mem_onchip_mem+0xff7f9308>
  8017fc:	294b883a 	add	r5,r5,r5
  801800:	2886703a 	and	r3,r5,r2
  801804:	21000104 	addi	r4,r4,4
  801808:	183ffc26 	beq	r3,zero,8017fc <__alt_mem_onchip_mem+0xff7f97fc>
  80180c:	003ebe06 	br	801308 <__alt_mem_onchip_mem+0xff7f9308>
  801810:	00c05504 	movi	r3,340
  801814:	18801236 	bltu	r3,r2,801860 <_malloc_r+0x6f8>
  801818:	8804d3fa 	srli	r2,r17,15
  80181c:	12001e04 	addi	r8,r2,120
  801820:	11c01dc4 	addi	r7,r2,119
  801824:	4209883a 	add	r4,r8,r8
  801828:	003e6d06 	br	8011e0 <__alt_mem_onchip_mem+0xff7f91e0>
  80182c:	00c40004 	movi	r3,4096
  801830:	003f4606 	br	80154c <__alt_mem_onchip_mem+0xff7f954c>
  801834:	00800044 	movi	r2,1
  801838:	a0800115 	stw	r2,4(r20)
  80183c:	003f7406 	br	801610 <__alt_mem_onchip_mem+0xff7f9610>
  801840:	1805d0ba 	srai	r2,r3,2
  801844:	01c00044 	movi	r7,1
  801848:	30c00117 	ldw	r3,4(r6)
  80184c:	388e983a 	sll	r7,r7,r2
  801850:	2805883a 	mov	r2,r5
  801854:	38c6b03a 	or	r3,r7,r3
  801858:	30c00115 	stw	r3,4(r6)
  80185c:	003f9b06 	br	8016cc <__alt_mem_onchip_mem+0xff7f96cc>
  801860:	00c15504 	movi	r3,1364
  801864:	18801a36 	bltu	r3,r2,8018d0 <_malloc_r+0x768>
  801868:	8804d4ba 	srli	r2,r17,18
  80186c:	12001f44 	addi	r8,r2,125
  801870:	11c01f04 	addi	r7,r2,124
  801874:	4209883a 	add	r4,r8,r8
  801878:	003e5906 	br	8011e0 <__alt_mem_onchip_mem+0xff7f91e0>
  80187c:	ad400404 	addi	r21,r21,16
  801880:	003f1706 	br	8014e0 <__alt_mem_onchip_mem+0xff7f94e0>
  801884:	00c01504 	movi	r3,84
  801888:	18802336 	bltu	r3,r2,801918 <_malloc_r+0x7b0>
  80188c:	3804d33a 	srli	r2,r7,12
  801890:	11401bc4 	addi	r5,r2,111
  801894:	10c01b84 	addi	r3,r2,110
  801898:	294b883a 	add	r5,r5,r5
  80189c:	003f7b06 	br	80168c <__alt_mem_onchip_mem+0xff7f968c>
  8018a0:	9c000217 	ldw	r16,8(r19)
  8018a4:	00bfff04 	movi	r2,-4
  8018a8:	80c00117 	ldw	r3,4(r16)
  8018ac:	1886703a 	and	r3,r3,r2
  8018b0:	003f5306 	br	801600 <__alt_mem_onchip_mem+0xff7f9600>
  8018b4:	3083ffcc 	andi	r2,r6,4095
  8018b8:	103f181e 	bne	r2,zero,80151c <__alt_mem_onchip_mem+0xff7f951c>
  8018bc:	99000217 	ldw	r4,8(r19)
  8018c0:	b545883a 	add	r2,r22,r21
  8018c4:	10800054 	ori	r2,r2,1
  8018c8:	20800115 	stw	r2,4(r4)
  8018cc:	003f3e06 	br	8015c8 <__alt_mem_onchip_mem+0xff7f95c8>
  8018d0:	01003f84 	movi	r4,254
  8018d4:	02001fc4 	movi	r8,127
  8018d8:	01c01f84 	movi	r7,126
  8018dc:	003e4006 	br	8011e0 <__alt_mem_onchip_mem+0xff7f91e0>
  8018e0:	00802074 	movhi	r2,129
  8018e4:	10900a04 	addi	r2,r2,16424
  8018e8:	15000015 	stw	r20,0(r2)
  8018ec:	003f1106 	br	801534 <__alt_mem_onchip_mem+0xff7f9534>
  8018f0:	00800044 	movi	r2,1
  8018f4:	002b883a 	mov	r21,zero
  8018f8:	003f1f06 	br	801578 <__alt_mem_onchip_mem+0xff7f9578>
  8018fc:	81400204 	addi	r5,r16,8
  801900:	9009883a 	mov	r4,r18
  801904:	08065600 	call	806560 <_free_r>
  801908:	00802074 	movhi	r2,129
  80190c:	10976a04 	addi	r2,r2,23976
  801910:	10c00017 	ldw	r3,0(r2)
  801914:	003f2c06 	br	8015c8 <__alt_mem_onchip_mem+0xff7f95c8>
  801918:	00c05504 	movi	r3,340
  80191c:	18800536 	bltu	r3,r2,801934 <_malloc_r+0x7cc>
  801920:	3804d3fa 	srli	r2,r7,15
  801924:	11401e04 	addi	r5,r2,120
  801928:	10c01dc4 	addi	r3,r2,119
  80192c:	294b883a 	add	r5,r5,r5
  801930:	003f5606 	br	80168c <__alt_mem_onchip_mem+0xff7f968c>
  801934:	00c15504 	movi	r3,1364
  801938:	18800536 	bltu	r3,r2,801950 <_malloc_r+0x7e8>
  80193c:	3804d4ba 	srli	r2,r7,18
  801940:	11401f44 	addi	r5,r2,125
  801944:	10c01f04 	addi	r3,r2,124
  801948:	294b883a 	add	r5,r5,r5
  80194c:	003f4f06 	br	80168c <__alt_mem_onchip_mem+0xff7f968c>
  801950:	01403f84 	movi	r5,254
  801954:	00c01f84 	movi	r3,126
  801958:	003f4c06 	br	80168c <__alt_mem_onchip_mem+0xff7f968c>
  80195c:	98800117 	ldw	r2,4(r19)
  801960:	003fa006 	br	8017e4 <__alt_mem_onchip_mem+0xff7f97e4>
  801964:	8808d0fa 	srli	r4,r17,3
  801968:	20800044 	addi	r2,r4,1
  80196c:	1085883a 	add	r2,r2,r2
  801970:	003e9006 	br	8013b4 <__alt_mem_onchip_mem+0xff7f93b4>

00801974 <memset>:
  801974:	20c000cc 	andi	r3,r4,3
  801978:	2005883a 	mov	r2,r4
  80197c:	18004426 	beq	r3,zero,801a90 <memset+0x11c>
  801980:	31ffffc4 	addi	r7,r6,-1
  801984:	30004026 	beq	r6,zero,801a88 <memset+0x114>
  801988:	2813883a 	mov	r9,r5
  80198c:	200d883a 	mov	r6,r4
  801990:	2007883a 	mov	r3,r4
  801994:	00000406 	br	8019a8 <memset+0x34>
  801998:	3a3fffc4 	addi	r8,r7,-1
  80199c:	31800044 	addi	r6,r6,1
  8019a0:	38003926 	beq	r7,zero,801a88 <memset+0x114>
  8019a4:	400f883a 	mov	r7,r8
  8019a8:	18c00044 	addi	r3,r3,1
  8019ac:	32400005 	stb	r9,0(r6)
  8019b0:	1a0000cc 	andi	r8,r3,3
  8019b4:	403ff81e 	bne	r8,zero,801998 <__alt_mem_onchip_mem+0xff7f9998>
  8019b8:	010000c4 	movi	r4,3
  8019bc:	21c02d2e 	bgeu	r4,r7,801a74 <memset+0x100>
  8019c0:	29003fcc 	andi	r4,r5,255
  8019c4:	200c923a 	slli	r6,r4,8
  8019c8:	3108b03a 	or	r4,r6,r4
  8019cc:	200c943a 	slli	r6,r4,16
  8019d0:	218cb03a 	or	r6,r4,r6
  8019d4:	010003c4 	movi	r4,15
  8019d8:	21c0182e 	bgeu	r4,r7,801a3c <memset+0xc8>
  8019dc:	3b3ffc04 	addi	r12,r7,-16
  8019e0:	6018d13a 	srli	r12,r12,4
  8019e4:	1a000104 	addi	r8,r3,4
  8019e8:	1ac00204 	addi	r11,r3,8
  8019ec:	6008913a 	slli	r4,r12,4
  8019f0:	1a800304 	addi	r10,r3,12
  8019f4:	1813883a 	mov	r9,r3
  8019f8:	21000504 	addi	r4,r4,20
  8019fc:	1909883a 	add	r4,r3,r4
  801a00:	49800015 	stw	r6,0(r9)
  801a04:	41800015 	stw	r6,0(r8)
  801a08:	59800015 	stw	r6,0(r11)
  801a0c:	51800015 	stw	r6,0(r10)
  801a10:	42000404 	addi	r8,r8,16
  801a14:	4a400404 	addi	r9,r9,16
  801a18:	5ac00404 	addi	r11,r11,16
  801a1c:	52800404 	addi	r10,r10,16
  801a20:	413ff71e 	bne	r8,r4,801a00 <__alt_mem_onchip_mem+0xff7f9a00>
  801a24:	63000044 	addi	r12,r12,1
  801a28:	6018913a 	slli	r12,r12,4
  801a2c:	39c003cc 	andi	r7,r7,15
  801a30:	010000c4 	movi	r4,3
  801a34:	1b07883a 	add	r3,r3,r12
  801a38:	21c00e2e 	bgeu	r4,r7,801a74 <memset+0x100>
  801a3c:	1813883a 	mov	r9,r3
  801a40:	3811883a 	mov	r8,r7
  801a44:	010000c4 	movi	r4,3
  801a48:	49800015 	stw	r6,0(r9)
  801a4c:	423fff04 	addi	r8,r8,-4
  801a50:	4a400104 	addi	r9,r9,4
  801a54:	223ffc36 	bltu	r4,r8,801a48 <__alt_mem_onchip_mem+0xff7f9a48>
  801a58:	393fff04 	addi	r4,r7,-4
  801a5c:	2008d0ba 	srli	r4,r4,2
  801a60:	39c000cc 	andi	r7,r7,3
  801a64:	21000044 	addi	r4,r4,1
  801a68:	2109883a 	add	r4,r4,r4
  801a6c:	2109883a 	add	r4,r4,r4
  801a70:	1907883a 	add	r3,r3,r4
  801a74:	38000526 	beq	r7,zero,801a8c <memset+0x118>
  801a78:	19cf883a 	add	r7,r3,r7
  801a7c:	19400005 	stb	r5,0(r3)
  801a80:	18c00044 	addi	r3,r3,1
  801a84:	38fffd1e 	bne	r7,r3,801a7c <__alt_mem_onchip_mem+0xff7f9a7c>
  801a88:	f800283a 	ret
  801a8c:	f800283a 	ret
  801a90:	2007883a 	mov	r3,r4
  801a94:	300f883a 	mov	r7,r6
  801a98:	003fc706 	br	8019b8 <__alt_mem_onchip_mem+0xff7f99b8>

00801a9c <_open_r>:
  801a9c:	defffd04 	addi	sp,sp,-12
  801aa0:	2805883a 	mov	r2,r5
  801aa4:	dc000015 	stw	r16,0(sp)
  801aa8:	04002074 	movhi	r16,129
  801aac:	dc400115 	stw	r17,4(sp)
  801ab0:	300b883a 	mov	r5,r6
  801ab4:	84175c04 	addi	r16,r16,23920
  801ab8:	2023883a 	mov	r17,r4
  801abc:	380d883a 	mov	r6,r7
  801ac0:	1009883a 	mov	r4,r2
  801ac4:	dfc00215 	stw	ra,8(sp)
  801ac8:	80000015 	stw	zero,0(r16)
  801acc:	080e4700 	call	80e470 <open>
  801ad0:	00ffffc4 	movi	r3,-1
  801ad4:	10c00526 	beq	r2,r3,801aec <_open_r+0x50>
  801ad8:	dfc00217 	ldw	ra,8(sp)
  801adc:	dc400117 	ldw	r17,4(sp)
  801ae0:	dc000017 	ldw	r16,0(sp)
  801ae4:	dec00304 	addi	sp,sp,12
  801ae8:	f800283a 	ret
  801aec:	80c00017 	ldw	r3,0(r16)
  801af0:	183ff926 	beq	r3,zero,801ad8 <__alt_mem_onchip_mem+0xff7f9ad8>
  801af4:	88c00015 	stw	r3,0(r17)
  801af8:	003ff706 	br	801ad8 <__alt_mem_onchip_mem+0xff7f9ad8>

00801afc <_puts_r>:
  801afc:	defff604 	addi	sp,sp,-40
  801b00:	dc000715 	stw	r16,28(sp)
  801b04:	2021883a 	mov	r16,r4
  801b08:	2809883a 	mov	r4,r5
  801b0c:	dc400815 	stw	r17,32(sp)
  801b10:	dfc00915 	stw	ra,36(sp)
  801b14:	2823883a 	mov	r17,r5
  801b18:	0801f500 	call	801f50 <strlen>
  801b1c:	10c00044 	addi	r3,r2,1
  801b20:	d8800115 	stw	r2,4(sp)
  801b24:	00802074 	movhi	r2,129
  801b28:	10878104 	addi	r2,r2,7684
  801b2c:	d8800215 	stw	r2,8(sp)
  801b30:	00800044 	movi	r2,1
  801b34:	d8800315 	stw	r2,12(sp)
  801b38:	00800084 	movi	r2,2
  801b3c:	dc400015 	stw	r17,0(sp)
  801b40:	d8c00615 	stw	r3,24(sp)
  801b44:	dec00415 	stw	sp,16(sp)
  801b48:	d8800515 	stw	r2,20(sp)
  801b4c:	80000226 	beq	r16,zero,801b58 <_puts_r+0x5c>
  801b50:	80800e17 	ldw	r2,56(r16)
  801b54:	10001426 	beq	r2,zero,801ba8 <_puts_r+0xac>
  801b58:	81400217 	ldw	r5,8(r16)
  801b5c:	2880030b 	ldhu	r2,12(r5)
  801b60:	10c8000c 	andi	r3,r2,8192
  801b64:	1800061e 	bne	r3,zero,801b80 <_puts_r+0x84>
  801b68:	29001917 	ldw	r4,100(r5)
  801b6c:	00f7ffc4 	movi	r3,-8193
  801b70:	10880014 	ori	r2,r2,8192
  801b74:	20c6703a 	and	r3,r4,r3
  801b78:	2880030d 	sth	r2,12(r5)
  801b7c:	28c01915 	stw	r3,100(r5)
  801b80:	d9800404 	addi	r6,sp,16
  801b84:	8009883a 	mov	r4,r16
  801b88:	08068700 	call	806870 <__sfvwrite_r>
  801b8c:	1000091e 	bne	r2,zero,801bb4 <_puts_r+0xb8>
  801b90:	00800284 	movi	r2,10
  801b94:	dfc00917 	ldw	ra,36(sp)
  801b98:	dc400817 	ldw	r17,32(sp)
  801b9c:	dc000717 	ldw	r16,28(sp)
  801ba0:	dec00a04 	addi	sp,sp,40
  801ba4:	f800283a 	ret
  801ba8:	8009883a 	mov	r4,r16
  801bac:	08063400 	call	806340 <__sinit>
  801bb0:	003fe906 	br	801b58 <__alt_mem_onchip_mem+0xff7f9b58>
  801bb4:	00bfffc4 	movi	r2,-1
  801bb8:	003ff606 	br	801b94 <__alt_mem_onchip_mem+0xff7f9b94>

00801bbc <puts>:
  801bbc:	00802074 	movhi	r2,129
  801bc0:	10900904 	addi	r2,r2,16420
  801bc4:	200b883a 	mov	r5,r4
  801bc8:	11000017 	ldw	r4,0(r2)
  801bcc:	0801afc1 	jmpi	801afc <_puts_r>

00801bd0 <lflush>:
  801bd0:	2080030b 	ldhu	r2,12(r4)
  801bd4:	00c00244 	movi	r3,9
  801bd8:	1080024c 	andi	r2,r2,9
  801bdc:	10c00226 	beq	r2,r3,801be8 <lflush+0x18>
  801be0:	0005883a 	mov	r2,zero
  801be4:	f800283a 	ret
  801be8:	0805fc01 	jmpi	805fc0 <fflush>

00801bec <__srefill_r>:
  801bec:	defffc04 	addi	sp,sp,-16
  801bf0:	dc400115 	stw	r17,4(sp)
  801bf4:	dc000015 	stw	r16,0(sp)
  801bf8:	dfc00315 	stw	ra,12(sp)
  801bfc:	dc800215 	stw	r18,8(sp)
  801c00:	2023883a 	mov	r17,r4
  801c04:	2821883a 	mov	r16,r5
  801c08:	20000226 	beq	r4,zero,801c14 <__srefill_r+0x28>
  801c0c:	20800e17 	ldw	r2,56(r4)
  801c10:	10003c26 	beq	r2,zero,801d04 <__srefill_r+0x118>
  801c14:	80c0030b 	ldhu	r3,12(r16)
  801c18:	1908000c 	andi	r4,r3,8192
  801c1c:	1805883a 	mov	r2,r3
  801c20:	2000071e 	bne	r4,zero,801c40 <__srefill_r+0x54>
  801c24:	81001917 	ldw	r4,100(r16)
  801c28:	18880014 	ori	r2,r3,8192
  801c2c:	00f7ffc4 	movi	r3,-8193
  801c30:	20c8703a 	and	r4,r4,r3
  801c34:	8080030d 	sth	r2,12(r16)
  801c38:	1007883a 	mov	r3,r2
  801c3c:	81001915 	stw	r4,100(r16)
  801c40:	80000115 	stw	zero,4(r16)
  801c44:	1100080c 	andi	r4,r2,32
  801c48:	2000571e 	bne	r4,zero,801da8 <__srefill_r+0x1bc>
  801c4c:	1100010c 	andi	r4,r2,4
  801c50:	20001f26 	beq	r4,zero,801cd0 <__srefill_r+0xe4>
  801c54:	81400c17 	ldw	r5,48(r16)
  801c58:	28000826 	beq	r5,zero,801c7c <__srefill_r+0x90>
  801c5c:	80801004 	addi	r2,r16,64
  801c60:	28800226 	beq	r5,r2,801c6c <__srefill_r+0x80>
  801c64:	8809883a 	mov	r4,r17
  801c68:	08065600 	call	806560 <_free_r>
  801c6c:	80800f17 	ldw	r2,60(r16)
  801c70:	80000c15 	stw	zero,48(r16)
  801c74:	80800115 	stw	r2,4(r16)
  801c78:	1000391e 	bne	r2,zero,801d60 <__srefill_r+0x174>
  801c7c:	80800417 	ldw	r2,16(r16)
  801c80:	10004b26 	beq	r2,zero,801db0 <__srefill_r+0x1c4>
  801c84:	8480030b 	ldhu	r18,12(r16)
  801c88:	908000cc 	andi	r2,r18,3
  801c8c:	10001f1e 	bne	r2,zero,801d0c <__srefill_r+0x120>
  801c90:	81800417 	ldw	r6,16(r16)
  801c94:	80800817 	ldw	r2,32(r16)
  801c98:	81c00517 	ldw	r7,20(r16)
  801c9c:	81400717 	ldw	r5,28(r16)
  801ca0:	81800015 	stw	r6,0(r16)
  801ca4:	8809883a 	mov	r4,r17
  801ca8:	103ee83a 	callr	r2
  801cac:	80800115 	stw	r2,4(r16)
  801cb0:	00800e0e 	bge	zero,r2,801cec <__srefill_r+0x100>
  801cb4:	0005883a 	mov	r2,zero
  801cb8:	dfc00317 	ldw	ra,12(sp)
  801cbc:	dc800217 	ldw	r18,8(sp)
  801cc0:	dc400117 	ldw	r17,4(sp)
  801cc4:	dc000017 	ldw	r16,0(sp)
  801cc8:	dec00404 	addi	sp,sp,16
  801ccc:	f800283a 	ret
  801cd0:	1100040c 	andi	r4,r2,16
  801cd4:	20003026 	beq	r4,zero,801d98 <__srefill_r+0x1ac>
  801cd8:	1080020c 	andi	r2,r2,8
  801cdc:	1000241e 	bne	r2,zero,801d70 <__srefill_r+0x184>
  801ce0:	18c00114 	ori	r3,r3,4
  801ce4:	80c0030d 	sth	r3,12(r16)
  801ce8:	003fe406 	br	801c7c <__alt_mem_onchip_mem+0xff7f9c7c>
  801cec:	80c0030b 	ldhu	r3,12(r16)
  801cf0:	1000161e 	bne	r2,zero,801d4c <__srefill_r+0x160>
  801cf4:	18c00814 	ori	r3,r3,32
  801cf8:	00bfffc4 	movi	r2,-1
  801cfc:	80c0030d 	sth	r3,12(r16)
  801d00:	003fed06 	br	801cb8 <__alt_mem_onchip_mem+0xff7f9cb8>
  801d04:	08063400 	call	806340 <__sinit>
  801d08:	003fc206 	br	801c14 <__alt_mem_onchip_mem+0xff7f9c14>
  801d0c:	00802074 	movhi	r2,129
  801d10:	10900804 	addi	r2,r2,16416
  801d14:	11000017 	ldw	r4,0(r2)
  801d18:	01402034 	movhi	r5,128
  801d1c:	00800044 	movi	r2,1
  801d20:	2946f404 	addi	r5,r5,7120
  801d24:	8080030d 	sth	r2,12(r16)
  801d28:	0806d2c0 	call	806d2c <_fwalk>
  801d2c:	00800244 	movi	r2,9
  801d30:	8480030d 	sth	r18,12(r16)
  801d34:	9480024c 	andi	r18,r18,9
  801d38:	90bfd51e 	bne	r18,r2,801c90 <__alt_mem_onchip_mem+0xff7f9c90>
  801d3c:	800b883a 	mov	r5,r16
  801d40:	8809883a 	mov	r4,r17
  801d44:	0805d480 	call	805d48 <__sflush_r>
  801d48:	003fd106 	br	801c90 <__alt_mem_onchip_mem+0xff7f9c90>
  801d4c:	18c01014 	ori	r3,r3,64
  801d50:	80000115 	stw	zero,4(r16)
  801d54:	00bfffc4 	movi	r2,-1
  801d58:	80c0030d 	sth	r3,12(r16)
  801d5c:	003fd606 	br	801cb8 <__alt_mem_onchip_mem+0xff7f9cb8>
  801d60:	80c00e17 	ldw	r3,56(r16)
  801d64:	0005883a 	mov	r2,zero
  801d68:	80c00015 	stw	r3,0(r16)
  801d6c:	003fd206 	br	801cb8 <__alt_mem_onchip_mem+0xff7f9cb8>
  801d70:	800b883a 	mov	r5,r16
  801d74:	8809883a 	mov	r4,r17
  801d78:	0805f640 	call	805f64 <_fflush_r>
  801d7c:	10000a1e 	bne	r2,zero,801da8 <__srefill_r+0x1bc>
  801d80:	8080030b 	ldhu	r2,12(r16)
  801d84:	00fffdc4 	movi	r3,-9
  801d88:	80000215 	stw	zero,8(r16)
  801d8c:	1886703a 	and	r3,r3,r2
  801d90:	80000615 	stw	zero,24(r16)
  801d94:	003fd206 	br	801ce0 <__alt_mem_onchip_mem+0xff7f9ce0>
  801d98:	00800244 	movi	r2,9
  801d9c:	88800015 	stw	r2,0(r17)
  801da0:	18c01014 	ori	r3,r3,64
  801da4:	80c0030d 	sth	r3,12(r16)
  801da8:	00bfffc4 	movi	r2,-1
  801dac:	003fc206 	br	801cb8 <__alt_mem_onchip_mem+0xff7f9cb8>
  801db0:	800b883a 	mov	r5,r16
  801db4:	8809883a 	mov	r4,r17
  801db8:	0800fac0 	call	800fac <__smakebuf_r>
  801dbc:	003fb106 	br	801c84 <__alt_mem_onchip_mem+0xff7f9c84>

00801dc0 <_sbrk_r>:
  801dc0:	defffd04 	addi	sp,sp,-12
  801dc4:	dc000015 	stw	r16,0(sp)
  801dc8:	04002074 	movhi	r16,129
  801dcc:	dc400115 	stw	r17,4(sp)
  801dd0:	84175c04 	addi	r16,r16,23920
  801dd4:	2023883a 	mov	r17,r4
  801dd8:	2809883a 	mov	r4,r5
  801ddc:	dfc00215 	stw	ra,8(sp)
  801de0:	80000015 	stw	zero,0(r16)
  801de4:	080e7600 	call	80e760 <sbrk>
  801de8:	00ffffc4 	movi	r3,-1
  801dec:	10c00526 	beq	r2,r3,801e04 <_sbrk_r+0x44>
  801df0:	dfc00217 	ldw	ra,8(sp)
  801df4:	dc400117 	ldw	r17,4(sp)
  801df8:	dc000017 	ldw	r16,0(sp)
  801dfc:	dec00304 	addi	sp,sp,12
  801e00:	f800283a 	ret
  801e04:	80c00017 	ldw	r3,0(r16)
  801e08:	183ff926 	beq	r3,zero,801df0 <__alt_mem_onchip_mem+0xff7f9df0>
  801e0c:	88c00015 	stw	r3,0(r17)
  801e10:	003ff706 	br	801df0 <__alt_mem_onchip_mem+0xff7f9df0>

00801e14 <__sread>:
  801e14:	defffe04 	addi	sp,sp,-8
  801e18:	dc000015 	stw	r16,0(sp)
  801e1c:	2821883a 	mov	r16,r5
  801e20:	2940038f 	ldh	r5,14(r5)
  801e24:	dfc00115 	stw	ra,4(sp)
  801e28:	08083c80 	call	8083c8 <_read_r>
  801e2c:	10000716 	blt	r2,zero,801e4c <__sread+0x38>
  801e30:	80c01417 	ldw	r3,80(r16)
  801e34:	1887883a 	add	r3,r3,r2
  801e38:	80c01415 	stw	r3,80(r16)
  801e3c:	dfc00117 	ldw	ra,4(sp)
  801e40:	dc000017 	ldw	r16,0(sp)
  801e44:	dec00204 	addi	sp,sp,8
  801e48:	f800283a 	ret
  801e4c:	80c0030b 	ldhu	r3,12(r16)
  801e50:	18fbffcc 	andi	r3,r3,61439
  801e54:	80c0030d 	sth	r3,12(r16)
  801e58:	dfc00117 	ldw	ra,4(sp)
  801e5c:	dc000017 	ldw	r16,0(sp)
  801e60:	dec00204 	addi	sp,sp,8
  801e64:	f800283a 	ret

00801e68 <__seofread>:
  801e68:	0005883a 	mov	r2,zero
  801e6c:	f800283a 	ret

00801e70 <__swrite>:
  801e70:	2880030b 	ldhu	r2,12(r5)
  801e74:	defffb04 	addi	sp,sp,-20
  801e78:	dcc00315 	stw	r19,12(sp)
  801e7c:	dc800215 	stw	r18,8(sp)
  801e80:	dc400115 	stw	r17,4(sp)
  801e84:	dc000015 	stw	r16,0(sp)
  801e88:	dfc00415 	stw	ra,16(sp)
  801e8c:	10c0400c 	andi	r3,r2,256
  801e90:	2821883a 	mov	r16,r5
  801e94:	2023883a 	mov	r17,r4
  801e98:	3025883a 	mov	r18,r6
  801e9c:	3827883a 	mov	r19,r7
  801ea0:	18000526 	beq	r3,zero,801eb8 <__swrite+0x48>
  801ea4:	2940038f 	ldh	r5,14(r5)
  801ea8:	01c00084 	movi	r7,2
  801eac:	000d883a 	mov	r6,zero
  801eb0:	0806fe40 	call	806fe4 <_lseek_r>
  801eb4:	8080030b 	ldhu	r2,12(r16)
  801eb8:	8140038f 	ldh	r5,14(r16)
  801ebc:	10bbffcc 	andi	r2,r2,61439
  801ec0:	980f883a 	mov	r7,r19
  801ec4:	900d883a 	mov	r6,r18
  801ec8:	8809883a 	mov	r4,r17
  801ecc:	8080030d 	sth	r2,12(r16)
  801ed0:	dfc00417 	ldw	ra,16(sp)
  801ed4:	dcc00317 	ldw	r19,12(sp)
  801ed8:	dc800217 	ldw	r18,8(sp)
  801edc:	dc400117 	ldw	r17,4(sp)
  801ee0:	dc000017 	ldw	r16,0(sp)
  801ee4:	dec00504 	addi	sp,sp,20
  801ee8:	08042b81 	jmpi	8042b8 <_write_r>

00801eec <__sseek>:
  801eec:	defffe04 	addi	sp,sp,-8
  801ef0:	dc000015 	stw	r16,0(sp)
  801ef4:	2821883a 	mov	r16,r5
  801ef8:	2940038f 	ldh	r5,14(r5)
  801efc:	dfc00115 	stw	ra,4(sp)
  801f00:	0806fe40 	call	806fe4 <_lseek_r>
  801f04:	00ffffc4 	movi	r3,-1
  801f08:	10c00826 	beq	r2,r3,801f2c <__sseek+0x40>
  801f0c:	80c0030b 	ldhu	r3,12(r16)
  801f10:	80801415 	stw	r2,80(r16)
  801f14:	18c40014 	ori	r3,r3,4096
  801f18:	80c0030d 	sth	r3,12(r16)
  801f1c:	dfc00117 	ldw	ra,4(sp)
  801f20:	dc000017 	ldw	r16,0(sp)
  801f24:	dec00204 	addi	sp,sp,8
  801f28:	f800283a 	ret
  801f2c:	80c0030b 	ldhu	r3,12(r16)
  801f30:	18fbffcc 	andi	r3,r3,61439
  801f34:	80c0030d 	sth	r3,12(r16)
  801f38:	dfc00117 	ldw	ra,4(sp)
  801f3c:	dc000017 	ldw	r16,0(sp)
  801f40:	dec00204 	addi	sp,sp,8
  801f44:	f800283a 	ret

00801f48 <__sclose>:
  801f48:	2940038f 	ldh	r5,14(r5)
  801f4c:	080446c1 	jmpi	80446c <_close_r>

00801f50 <strlen>:
  801f50:	208000cc 	andi	r2,r4,3
  801f54:	10002026 	beq	r2,zero,801fd8 <strlen+0x88>
  801f58:	20800007 	ldb	r2,0(r4)
  801f5c:	10002026 	beq	r2,zero,801fe0 <strlen+0x90>
  801f60:	2005883a 	mov	r2,r4
  801f64:	00000206 	br	801f70 <strlen+0x20>
  801f68:	10c00007 	ldb	r3,0(r2)
  801f6c:	18001826 	beq	r3,zero,801fd0 <strlen+0x80>
  801f70:	10800044 	addi	r2,r2,1
  801f74:	10c000cc 	andi	r3,r2,3
  801f78:	183ffb1e 	bne	r3,zero,801f68 <__alt_mem_onchip_mem+0xff7f9f68>
  801f7c:	10c00017 	ldw	r3,0(r2)
  801f80:	01ffbff4 	movhi	r7,65279
  801f84:	39ffbfc4 	addi	r7,r7,-257
  801f88:	00ca303a 	nor	r5,zero,r3
  801f8c:	01a02074 	movhi	r6,32897
  801f90:	19c7883a 	add	r3,r3,r7
  801f94:	31a02004 	addi	r6,r6,-32640
  801f98:	1946703a 	and	r3,r3,r5
  801f9c:	1986703a 	and	r3,r3,r6
  801fa0:	1800091e 	bne	r3,zero,801fc8 <strlen+0x78>
  801fa4:	10800104 	addi	r2,r2,4
  801fa8:	10c00017 	ldw	r3,0(r2)
  801fac:	19cb883a 	add	r5,r3,r7
  801fb0:	00c6303a 	nor	r3,zero,r3
  801fb4:	28c6703a 	and	r3,r5,r3
  801fb8:	1986703a 	and	r3,r3,r6
  801fbc:	183ff926 	beq	r3,zero,801fa4 <__alt_mem_onchip_mem+0xff7f9fa4>
  801fc0:	00000106 	br	801fc8 <strlen+0x78>
  801fc4:	10800044 	addi	r2,r2,1
  801fc8:	10c00007 	ldb	r3,0(r2)
  801fcc:	183ffd1e 	bne	r3,zero,801fc4 <__alt_mem_onchip_mem+0xff7f9fc4>
  801fd0:	1105c83a 	sub	r2,r2,r4
  801fd4:	f800283a 	ret
  801fd8:	2005883a 	mov	r2,r4
  801fdc:	003fe706 	br	801f7c <__alt_mem_onchip_mem+0xff7f9f7c>
  801fe0:	0005883a 	mov	r2,zero
  801fe4:	f800283a 	ret

00801fe8 <___vfprintf_internal_r>:
  801fe8:	deffb804 	addi	sp,sp,-288
  801fec:	dfc04715 	stw	ra,284(sp)
  801ff0:	ddc04515 	stw	r23,276(sp)
  801ff4:	dd404315 	stw	r21,268(sp)
  801ff8:	d9002c15 	stw	r4,176(sp)
  801ffc:	282f883a 	mov	r23,r5
  802000:	302b883a 	mov	r21,r6
  802004:	d9c02d15 	stw	r7,180(sp)
  802008:	df004615 	stw	fp,280(sp)
  80200c:	dd804415 	stw	r22,272(sp)
  802010:	dd004215 	stw	r20,264(sp)
  802014:	dcc04115 	stw	r19,260(sp)
  802018:	dc804015 	stw	r18,256(sp)
  80201c:	dc403f15 	stw	r17,252(sp)
  802020:	dc003e15 	stw	r16,248(sp)
  802024:	0806fb40 	call	806fb4 <_localeconv_r>
  802028:	10800017 	ldw	r2,0(r2)
  80202c:	1009883a 	mov	r4,r2
  802030:	d8803415 	stw	r2,208(sp)
  802034:	0801f500 	call	801f50 <strlen>
  802038:	d8803715 	stw	r2,220(sp)
  80203c:	d8802c17 	ldw	r2,176(sp)
  802040:	10000226 	beq	r2,zero,80204c <___vfprintf_internal_r+0x64>
  802044:	10800e17 	ldw	r2,56(r2)
  802048:	1000f926 	beq	r2,zero,802430 <___vfprintf_internal_r+0x448>
  80204c:	b880030b 	ldhu	r2,12(r23)
  802050:	10c8000c 	andi	r3,r2,8192
  802054:	1800061e 	bne	r3,zero,802070 <___vfprintf_internal_r+0x88>
  802058:	b9001917 	ldw	r4,100(r23)
  80205c:	00f7ffc4 	movi	r3,-8193
  802060:	10880014 	ori	r2,r2,8192
  802064:	20c6703a 	and	r3,r4,r3
  802068:	b880030d 	sth	r2,12(r23)
  80206c:	b8c01915 	stw	r3,100(r23)
  802070:	10c0020c 	andi	r3,r2,8
  802074:	1800c126 	beq	r3,zero,80237c <___vfprintf_internal_r+0x394>
  802078:	b8c00417 	ldw	r3,16(r23)
  80207c:	1800bf26 	beq	r3,zero,80237c <___vfprintf_internal_r+0x394>
  802080:	1080068c 	andi	r2,r2,26
  802084:	00c00284 	movi	r3,10
  802088:	10c0c426 	beq	r2,r3,80239c <___vfprintf_internal_r+0x3b4>
  80208c:	d8c00404 	addi	r3,sp,16
  802090:	05002074 	movhi	r20,129
  802094:	d9001e04 	addi	r4,sp,120
  802098:	a5079284 	addi	r20,r20,7754
  80209c:	d8c01e15 	stw	r3,120(sp)
  8020a0:	d8002015 	stw	zero,128(sp)
  8020a4:	d8001f15 	stw	zero,124(sp)
  8020a8:	d8003315 	stw	zero,204(sp)
  8020ac:	d8003615 	stw	zero,216(sp)
  8020b0:	d8003815 	stw	zero,224(sp)
  8020b4:	1811883a 	mov	r8,r3
  8020b8:	d8003915 	stw	zero,228(sp)
  8020bc:	d8003a15 	stw	zero,232(sp)
  8020c0:	d8002f15 	stw	zero,188(sp)
  8020c4:	d9002815 	stw	r4,160(sp)
  8020c8:	a8800007 	ldb	r2,0(r21)
  8020cc:	10027b26 	beq	r2,zero,802abc <___vfprintf_internal_r+0xad4>
  8020d0:	00c00944 	movi	r3,37
  8020d4:	a821883a 	mov	r16,r21
  8020d8:	10c0021e 	bne	r2,r3,8020e4 <___vfprintf_internal_r+0xfc>
  8020dc:	00001406 	br	802130 <___vfprintf_internal_r+0x148>
  8020e0:	10c00326 	beq	r2,r3,8020f0 <___vfprintf_internal_r+0x108>
  8020e4:	84000044 	addi	r16,r16,1
  8020e8:	80800007 	ldb	r2,0(r16)
  8020ec:	103ffc1e 	bne	r2,zero,8020e0 <__alt_mem_onchip_mem+0xff7fa0e0>
  8020f0:	8563c83a 	sub	r17,r16,r21
  8020f4:	88000e26 	beq	r17,zero,802130 <___vfprintf_internal_r+0x148>
  8020f8:	d8c02017 	ldw	r3,128(sp)
  8020fc:	d8801f17 	ldw	r2,124(sp)
  802100:	45400015 	stw	r21,0(r8)
  802104:	1c47883a 	add	r3,r3,r17
  802108:	10800044 	addi	r2,r2,1
  80210c:	d8c02015 	stw	r3,128(sp)
  802110:	44400115 	stw	r17,4(r8)
  802114:	d8801f15 	stw	r2,124(sp)
  802118:	00c001c4 	movi	r3,7
  80211c:	1880a716 	blt	r3,r2,8023bc <___vfprintf_internal_r+0x3d4>
  802120:	42000204 	addi	r8,r8,8
  802124:	d9402f17 	ldw	r5,188(sp)
  802128:	2c4b883a 	add	r5,r5,r17
  80212c:	d9402f15 	stw	r5,188(sp)
  802130:	80800007 	ldb	r2,0(r16)
  802134:	1000a826 	beq	r2,zero,8023d8 <___vfprintf_internal_r+0x3f0>
  802138:	84400047 	ldb	r17,1(r16)
  80213c:	00bfffc4 	movi	r2,-1
  802140:	85400044 	addi	r21,r16,1
  802144:	d8002785 	stb	zero,158(sp)
  802148:	0007883a 	mov	r3,zero
  80214c:	000f883a 	mov	r7,zero
  802150:	d8802915 	stw	r2,164(sp)
  802154:	d8003115 	stw	zero,196(sp)
  802158:	0025883a 	mov	r18,zero
  80215c:	01401604 	movi	r5,88
  802160:	01800244 	movi	r6,9
  802164:	02800a84 	movi	r10,42
  802168:	02401b04 	movi	r9,108
  80216c:	ad400044 	addi	r21,r21,1
  802170:	88bff804 	addi	r2,r17,-32
  802174:	28830436 	bltu	r5,r2,802d88 <___vfprintf_internal_r+0xda0>
  802178:	100490ba 	slli	r2,r2,2
  80217c:	01002034 	movhi	r4,128
  802180:	21086404 	addi	r4,r4,8592
  802184:	1105883a 	add	r2,r2,r4
  802188:	10800017 	ldw	r2,0(r2)
  80218c:	1000683a 	jmp	r2
  802190:	00802ca8 	cmpgeui	r2,zero,178
  802194:	00802d88 	cmpgei	r2,zero,182
  802198:	00802d88 	cmpgei	r2,zero,182
  80219c:	00802cc8 	cmpgei	r2,zero,179
  8021a0:	00802d88 	cmpgei	r2,zero,182
  8021a4:	00802d88 	cmpgei	r2,zero,182
  8021a8:	00802d88 	cmpgei	r2,zero,182
  8021ac:	00802d88 	cmpgei	r2,zero,182
  8021b0:	00802d88 	cmpgei	r2,zero,182
  8021b4:	00802d88 	cmpgei	r2,zero,182
  8021b8:	0080243c 	xorhi	r2,zero,144
  8021bc:	00802be4 	muli	r2,zero,175
  8021c0:	00802d88 	cmpgei	r2,zero,182
  8021c4:	00802304 	movi	r2,140
  8021c8:	00802464 	muli	r2,zero,145
  8021cc:	00802d88 	cmpgei	r2,zero,182
  8021d0:	008024a4 	muli	r2,zero,146
  8021d4:	008024b0 	cmpltui	r2,zero,146
  8021d8:	008024b0 	cmpltui	r2,zero,146
  8021dc:	008024b0 	cmpltui	r2,zero,146
  8021e0:	008024b0 	cmpltui	r2,zero,146
  8021e4:	008024b0 	cmpltui	r2,zero,146
  8021e8:	008024b0 	cmpltui	r2,zero,146
  8021ec:	008024b0 	cmpltui	r2,zero,146
  8021f0:	008024b0 	cmpltui	r2,zero,146
  8021f4:	008024b0 	cmpltui	r2,zero,146
  8021f8:	00802d88 	cmpgei	r2,zero,182
  8021fc:	00802d88 	cmpgei	r2,zero,182
  802200:	00802d88 	cmpgei	r2,zero,182
  802204:	00802d88 	cmpgei	r2,zero,182
  802208:	00802d88 	cmpgei	r2,zero,182
  80220c:	00802d88 	cmpgei	r2,zero,182
  802210:	00802d88 	cmpgei	r2,zero,182
  802214:	00802d88 	cmpgei	r2,zero,182
  802218:	00802d88 	cmpgei	r2,zero,182
  80221c:	00802d88 	cmpgei	r2,zero,182
  802220:	008024e4 	muli	r2,zero,147
  802224:	008025a0 	cmpeqi	r2,zero,150
  802228:	00802d88 	cmpgei	r2,zero,182
  80222c:	008025a0 	cmpeqi	r2,zero,150
  802230:	00802d88 	cmpgei	r2,zero,182
  802234:	00802d88 	cmpgei	r2,zero,182
  802238:	00802d88 	cmpgei	r2,zero,182
  80223c:	00802d88 	cmpgei	r2,zero,182
  802240:	00802640 	call	80264 <__reset-0x77fd9c>
  802244:	00802d88 	cmpgei	r2,zero,182
  802248:	00802d88 	cmpgei	r2,zero,182
  80224c:	0080264c 	andi	r2,zero,153
  802250:	00802d88 	cmpgei	r2,zero,182
  802254:	00802d88 	cmpgei	r2,zero,182
  802258:	00802d88 	cmpgei	r2,zero,182
  80225c:	00802d88 	cmpgei	r2,zero,182
  802260:	00802d88 	cmpgei	r2,zero,182
  802264:	00802ac4 	movi	r2,171
  802268:	00802d88 	cmpgei	r2,zero,182
  80226c:	00802d88 	cmpgei	r2,zero,182
  802270:	00802b24 	muli	r2,zero,172
  802274:	00802d88 	cmpgei	r2,zero,182
  802278:	00802d88 	cmpgei	r2,zero,182
  80227c:	00802d88 	cmpgei	r2,zero,182
  802280:	00802d88 	cmpgei	r2,zero,182
  802284:	00802d88 	cmpgei	r2,zero,182
  802288:	00802d88 	cmpgei	r2,zero,182
  80228c:	00802d88 	cmpgei	r2,zero,182
  802290:	00802d88 	cmpgei	r2,zero,182
  802294:	00802d88 	cmpgei	r2,zero,182
  802298:	00802d88 	cmpgei	r2,zero,182
  80229c:	00802d34 	movhi	r2,180
  8022a0:	00802cd4 	movui	r2,179
  8022a4:	008025a0 	cmpeqi	r2,zero,150
  8022a8:	008025a0 	cmpeqi	r2,zero,150
  8022ac:	008025a0 	cmpeqi	r2,zero,150
  8022b0:	00802ce4 	muli	r2,zero,179
  8022b4:	00802cd4 	movui	r2,179
  8022b8:	00802d88 	cmpgei	r2,zero,182
  8022bc:	00802d88 	cmpgei	r2,zero,182
  8022c0:	00802cf0 	cmpltui	r2,zero,179
  8022c4:	00802d88 	cmpgei	r2,zero,182
  8022c8:	00802d00 	call	802d0 <__reset-0x77fd30>
  8022cc:	00802bd4 	movui	r2,175
  8022d0:	00802310 	cmplti	r2,zero,140
  8022d4:	00802bf4 	movhi	r2,175
  8022d8:	00802d88 	cmpgei	r2,zero,182
  8022dc:	00802c00 	call	802c0 <__reset-0x77fd40>
  8022e0:	00802d88 	cmpgei	r2,zero,182
  8022e4:	00802c5c 	xori	r2,zero,177
  8022e8:	00802d88 	cmpgei	r2,zero,182
  8022ec:	00802d88 	cmpgei	r2,zero,182
  8022f0:	00802c6c 	andhi	r2,zero,177
  8022f4:	d9003117 	ldw	r4,196(sp)
  8022f8:	d8802d15 	stw	r2,180(sp)
  8022fc:	0109c83a 	sub	r4,zero,r4
  802300:	d9003115 	stw	r4,196(sp)
  802304:	94800114 	ori	r18,r18,4
  802308:	ac400007 	ldb	r17,0(r21)
  80230c:	003f9706 	br	80216c <__alt_mem_onchip_mem+0xff7fa16c>
  802310:	00800c04 	movi	r2,48
  802314:	d9002d17 	ldw	r4,180(sp)
  802318:	d9402917 	ldw	r5,164(sp)
  80231c:	d8802705 	stb	r2,156(sp)
  802320:	00801e04 	movi	r2,120
  802324:	d8802745 	stb	r2,157(sp)
  802328:	d8002785 	stb	zero,158(sp)
  80232c:	20c00104 	addi	r3,r4,4
  802330:	24c00017 	ldw	r19,0(r4)
  802334:	002d883a 	mov	r22,zero
  802338:	90800094 	ori	r2,r18,2
  80233c:	28029a16 	blt	r5,zero,802da8 <___vfprintf_internal_r+0xdc0>
  802340:	00bfdfc4 	movi	r2,-129
  802344:	90a4703a 	and	r18,r18,r2
  802348:	d8c02d15 	stw	r3,180(sp)
  80234c:	94800094 	ori	r18,r18,2
  802350:	9802871e 	bne	r19,zero,802d70 <___vfprintf_internal_r+0xd88>
  802354:	00802074 	movhi	r2,129
  802358:	10878b04 	addi	r2,r2,7724
  80235c:	d8803915 	stw	r2,228(sp)
  802360:	04401e04 	movi	r17,120
  802364:	d8802917 	ldw	r2,164(sp)
  802368:	0039883a 	mov	fp,zero
  80236c:	1001e926 	beq	r2,zero,802b14 <___vfprintf_internal_r+0xb2c>
  802370:	0027883a 	mov	r19,zero
  802374:	002d883a 	mov	r22,zero
  802378:	00020506 	br	802b90 <___vfprintf_internal_r+0xba8>
  80237c:	d9002c17 	ldw	r4,176(sp)
  802380:	b80b883a 	mov	r5,r23
  802384:	08043180 	call	804318 <__swsetup_r>
  802388:	1005ac1e 	bne	r2,zero,803a3c <___vfprintf_internal_r+0x1a54>
  80238c:	b880030b 	ldhu	r2,12(r23)
  802390:	00c00284 	movi	r3,10
  802394:	1080068c 	andi	r2,r2,26
  802398:	10ff3c1e 	bne	r2,r3,80208c <__alt_mem_onchip_mem+0xff7fa08c>
  80239c:	b880038f 	ldh	r2,14(r23)
  8023a0:	103f3a16 	blt	r2,zero,80208c <__alt_mem_onchip_mem+0xff7fa08c>
  8023a4:	d9c02d17 	ldw	r7,180(sp)
  8023a8:	d9002c17 	ldw	r4,176(sp)
  8023ac:	a80d883a 	mov	r6,r21
  8023b0:	b80b883a 	mov	r5,r23
  8023b4:	08041fc0 	call	8041fc <__sbprintf>
  8023b8:	00001106 	br	802400 <___vfprintf_internal_r+0x418>
  8023bc:	d9002c17 	ldw	r4,176(sp)
  8023c0:	d9801e04 	addi	r6,sp,120
  8023c4:	b80b883a 	mov	r5,r23
  8023c8:	0808bd80 	call	808bd8 <__sprint_r>
  8023cc:	1000081e 	bne	r2,zero,8023f0 <___vfprintf_internal_r+0x408>
  8023d0:	da000404 	addi	r8,sp,16
  8023d4:	003f5306 	br	802124 <__alt_mem_onchip_mem+0xff7fa124>
  8023d8:	d8802017 	ldw	r2,128(sp)
  8023dc:	10000426 	beq	r2,zero,8023f0 <___vfprintf_internal_r+0x408>
  8023e0:	d9002c17 	ldw	r4,176(sp)
  8023e4:	d9801e04 	addi	r6,sp,120
  8023e8:	b80b883a 	mov	r5,r23
  8023ec:	0808bd80 	call	808bd8 <__sprint_r>
  8023f0:	b880030b 	ldhu	r2,12(r23)
  8023f4:	1080100c 	andi	r2,r2,64
  8023f8:	1005901e 	bne	r2,zero,803a3c <___vfprintf_internal_r+0x1a54>
  8023fc:	d8802f17 	ldw	r2,188(sp)
  802400:	dfc04717 	ldw	ra,284(sp)
  802404:	df004617 	ldw	fp,280(sp)
  802408:	ddc04517 	ldw	r23,276(sp)
  80240c:	dd804417 	ldw	r22,272(sp)
  802410:	dd404317 	ldw	r21,268(sp)
  802414:	dd004217 	ldw	r20,264(sp)
  802418:	dcc04117 	ldw	r19,260(sp)
  80241c:	dc804017 	ldw	r18,256(sp)
  802420:	dc403f17 	ldw	r17,252(sp)
  802424:	dc003e17 	ldw	r16,248(sp)
  802428:	dec04804 	addi	sp,sp,288
  80242c:	f800283a 	ret
  802430:	d9002c17 	ldw	r4,176(sp)
  802434:	08063400 	call	806340 <__sinit>
  802438:	003f0406 	br	80204c <__alt_mem_onchip_mem+0xff7fa04c>
  80243c:	d8802d17 	ldw	r2,180(sp)
  802440:	d9002d17 	ldw	r4,180(sp)
  802444:	10800017 	ldw	r2,0(r2)
  802448:	d8803115 	stw	r2,196(sp)
  80244c:	20800104 	addi	r2,r4,4
  802450:	d9003117 	ldw	r4,196(sp)
  802454:	203fa716 	blt	r4,zero,8022f4 <__alt_mem_onchip_mem+0xff7fa2f4>
  802458:	d8802d15 	stw	r2,180(sp)
  80245c:	ac400007 	ldb	r17,0(r21)
  802460:	003f4206 	br	80216c <__alt_mem_onchip_mem+0xff7fa16c>
  802464:	ac400007 	ldb	r17,0(r21)
  802468:	aac00044 	addi	r11,r21,1
  80246c:	8a872826 	beq	r17,r10,804110 <___vfprintf_internal_r+0x2128>
  802470:	88bff404 	addi	r2,r17,-48
  802474:	0009883a 	mov	r4,zero
  802478:	30867d36 	bltu	r6,r2,803e70 <___vfprintf_internal_r+0x1e88>
  80247c:	5c400007 	ldb	r17,0(r11)
  802480:	210002a4 	muli	r4,r4,10
  802484:	5d400044 	addi	r21,r11,1
  802488:	a817883a 	mov	r11,r21
  80248c:	2089883a 	add	r4,r4,r2
  802490:	88bff404 	addi	r2,r17,-48
  802494:	30bff92e 	bgeu	r6,r2,80247c <__alt_mem_onchip_mem+0xff7fa47c>
  802498:	2005c916 	blt	r4,zero,803bc0 <___vfprintf_internal_r+0x1bd8>
  80249c:	d9002915 	stw	r4,164(sp)
  8024a0:	003f3306 	br	802170 <__alt_mem_onchip_mem+0xff7fa170>
  8024a4:	94802014 	ori	r18,r18,128
  8024a8:	ac400007 	ldb	r17,0(r21)
  8024ac:	003f2f06 	br	80216c <__alt_mem_onchip_mem+0xff7fa16c>
  8024b0:	a809883a 	mov	r4,r21
  8024b4:	d8003115 	stw	zero,196(sp)
  8024b8:	88bff404 	addi	r2,r17,-48
  8024bc:	0017883a 	mov	r11,zero
  8024c0:	24400007 	ldb	r17,0(r4)
  8024c4:	5ac002a4 	muli	r11,r11,10
  8024c8:	ad400044 	addi	r21,r21,1
  8024cc:	a809883a 	mov	r4,r21
  8024d0:	12d7883a 	add	r11,r2,r11
  8024d4:	88bff404 	addi	r2,r17,-48
  8024d8:	30bff92e 	bgeu	r6,r2,8024c0 <__alt_mem_onchip_mem+0xff7fa4c0>
  8024dc:	dac03115 	stw	r11,196(sp)
  8024e0:	003f2306 	br	802170 <__alt_mem_onchip_mem+0xff7fa170>
  8024e4:	18c03fcc 	andi	r3,r3,255
  8024e8:	18072b1e 	bne	r3,zero,804198 <___vfprintf_internal_r+0x21b0>
  8024ec:	94800414 	ori	r18,r18,16
  8024f0:	9080080c 	andi	r2,r18,32
  8024f4:	10037b26 	beq	r2,zero,8032e4 <___vfprintf_internal_r+0x12fc>
  8024f8:	d9402d17 	ldw	r5,180(sp)
  8024fc:	28800117 	ldw	r2,4(r5)
  802500:	2cc00017 	ldw	r19,0(r5)
  802504:	29400204 	addi	r5,r5,8
  802508:	d9402d15 	stw	r5,180(sp)
  80250c:	102d883a 	mov	r22,r2
  802510:	10044b16 	blt	r2,zero,803640 <___vfprintf_internal_r+0x1658>
  802514:	d9402917 	ldw	r5,164(sp)
  802518:	df002783 	ldbu	fp,158(sp)
  80251c:	2803bc16 	blt	r5,zero,803410 <___vfprintf_internal_r+0x1428>
  802520:	00ffdfc4 	movi	r3,-129
  802524:	9d84b03a 	or	r2,r19,r22
  802528:	90e4703a 	and	r18,r18,r3
  80252c:	10017726 	beq	r2,zero,802b0c <___vfprintf_internal_r+0xb24>
  802530:	b0038326 	beq	r22,zero,803340 <___vfprintf_internal_r+0x1358>
  802534:	dc402a15 	stw	r17,168(sp)
  802538:	dc001e04 	addi	r16,sp,120
  80253c:	b023883a 	mov	r17,r22
  802540:	402d883a 	mov	r22,r8
  802544:	9809883a 	mov	r4,r19
  802548:	880b883a 	mov	r5,r17
  80254c:	01800284 	movi	r6,10
  802550:	000f883a 	mov	r7,zero
  802554:	080adac0 	call	80adac <__umoddi3>
  802558:	10800c04 	addi	r2,r2,48
  80255c:	843fffc4 	addi	r16,r16,-1
  802560:	9809883a 	mov	r4,r19
  802564:	880b883a 	mov	r5,r17
  802568:	80800005 	stb	r2,0(r16)
  80256c:	01800284 	movi	r6,10
  802570:	000f883a 	mov	r7,zero
  802574:	080a8340 	call	80a834 <__udivdi3>
  802578:	1027883a 	mov	r19,r2
  80257c:	10c4b03a 	or	r2,r2,r3
  802580:	1823883a 	mov	r17,r3
  802584:	103fef1e 	bne	r2,zero,802544 <__alt_mem_onchip_mem+0xff7fa544>
  802588:	d8c02817 	ldw	r3,160(sp)
  80258c:	dc402a17 	ldw	r17,168(sp)
  802590:	b011883a 	mov	r8,r22
  802594:	1c07c83a 	sub	r3,r3,r16
  802598:	d8c02e15 	stw	r3,184(sp)
  80259c:	00005906 	br	802704 <___vfprintf_internal_r+0x71c>
  8025a0:	18c03fcc 	andi	r3,r3,255
  8025a4:	1806fa1e 	bne	r3,zero,804190 <___vfprintf_internal_r+0x21a8>
  8025a8:	9080020c 	andi	r2,r18,8
  8025ac:	10048a26 	beq	r2,zero,8037d8 <___vfprintf_internal_r+0x17f0>
  8025b0:	d8c02d17 	ldw	r3,180(sp)
  8025b4:	d9002d17 	ldw	r4,180(sp)
  8025b8:	d9402d17 	ldw	r5,180(sp)
  8025bc:	18c00017 	ldw	r3,0(r3)
  8025c0:	21000117 	ldw	r4,4(r4)
  8025c4:	29400204 	addi	r5,r5,8
  8025c8:	d8c03615 	stw	r3,216(sp)
  8025cc:	d9003815 	stw	r4,224(sp)
  8025d0:	d9402d15 	stw	r5,180(sp)
  8025d4:	d9003617 	ldw	r4,216(sp)
  8025d8:	d9403817 	ldw	r5,224(sp)
  8025dc:	da003d15 	stw	r8,244(sp)
  8025e0:	04000044 	movi	r16,1
  8025e4:	080898c0 	call	80898c <__fpclassifyd>
  8025e8:	da003d17 	ldw	r8,244(sp)
  8025ec:	14041f1e 	bne	r2,r16,80366c <___vfprintf_internal_r+0x1684>
  8025f0:	d9003617 	ldw	r4,216(sp)
  8025f4:	d9403817 	ldw	r5,224(sp)
  8025f8:	000d883a 	mov	r6,zero
  8025fc:	000f883a 	mov	r7,zero
  802600:	080c7900 	call	80c790 <__ledf2>
  802604:	da003d17 	ldw	r8,244(sp)
  802608:	1005be16 	blt	r2,zero,803d04 <___vfprintf_internal_r+0x1d1c>
  80260c:	df002783 	ldbu	fp,158(sp)
  802610:	008011c4 	movi	r2,71
  802614:	1445330e 	bge	r2,r17,803ae4 <___vfprintf_internal_r+0x1afc>
  802618:	04002074 	movhi	r16,129
  80261c:	84078304 	addi	r16,r16,7692
  802620:	00c000c4 	movi	r3,3
  802624:	00bfdfc4 	movi	r2,-129
  802628:	d8c02a15 	stw	r3,168(sp)
  80262c:	90a4703a 	and	r18,r18,r2
  802630:	d8c02e15 	stw	r3,184(sp)
  802634:	d8002915 	stw	zero,164(sp)
  802638:	d8003215 	stw	zero,200(sp)
  80263c:	00003706 	br	80271c <___vfprintf_internal_r+0x734>
  802640:	94800214 	ori	r18,r18,8
  802644:	ac400007 	ldb	r17,0(r21)
  802648:	003ec806 	br	80216c <__alt_mem_onchip_mem+0xff7fa16c>
  80264c:	18c03fcc 	andi	r3,r3,255
  802650:	1806db1e 	bne	r3,zero,8041c0 <___vfprintf_internal_r+0x21d8>
  802654:	94800414 	ori	r18,r18,16
  802658:	9080080c 	andi	r2,r18,32
  80265c:	1002d826 	beq	r2,zero,8031c0 <___vfprintf_internal_r+0x11d8>
  802660:	d9402d17 	ldw	r5,180(sp)
  802664:	d8c02917 	ldw	r3,164(sp)
  802668:	d8002785 	stb	zero,158(sp)
  80266c:	28800204 	addi	r2,r5,8
  802670:	2cc00017 	ldw	r19,0(r5)
  802674:	2d800117 	ldw	r22,4(r5)
  802678:	18048f16 	blt	r3,zero,8038b8 <___vfprintf_internal_r+0x18d0>
  80267c:	013fdfc4 	movi	r4,-129
  802680:	9d86b03a 	or	r3,r19,r22
  802684:	d8802d15 	stw	r2,180(sp)
  802688:	9124703a 	and	r18,r18,r4
  80268c:	1802d91e 	bne	r3,zero,8031f4 <___vfprintf_internal_r+0x120c>
  802690:	d8c02917 	ldw	r3,164(sp)
  802694:	0039883a 	mov	fp,zero
  802698:	1805c326 	beq	r3,zero,803da8 <___vfprintf_internal_r+0x1dc0>
  80269c:	0027883a 	mov	r19,zero
  8026a0:	002d883a 	mov	r22,zero
  8026a4:	dc001e04 	addi	r16,sp,120
  8026a8:	9806d0fa 	srli	r3,r19,3
  8026ac:	b008977a 	slli	r4,r22,29
  8026b0:	b02cd0fa 	srli	r22,r22,3
  8026b4:	9cc001cc 	andi	r19,r19,7
  8026b8:	98800c04 	addi	r2,r19,48
  8026bc:	843fffc4 	addi	r16,r16,-1
  8026c0:	20e6b03a 	or	r19,r4,r3
  8026c4:	80800005 	stb	r2,0(r16)
  8026c8:	9d86b03a 	or	r3,r19,r22
  8026cc:	183ff61e 	bne	r3,zero,8026a8 <__alt_mem_onchip_mem+0xff7fa6a8>
  8026d0:	90c0004c 	andi	r3,r18,1
  8026d4:	18013b26 	beq	r3,zero,802bc4 <___vfprintf_internal_r+0xbdc>
  8026d8:	10803fcc 	andi	r2,r2,255
  8026dc:	1080201c 	xori	r2,r2,128
  8026e0:	10bfe004 	addi	r2,r2,-128
  8026e4:	00c00c04 	movi	r3,48
  8026e8:	10c13626 	beq	r2,r3,802bc4 <___vfprintf_internal_r+0xbdc>
  8026ec:	80ffffc5 	stb	r3,-1(r16)
  8026f0:	d8c02817 	ldw	r3,160(sp)
  8026f4:	80bfffc4 	addi	r2,r16,-1
  8026f8:	1021883a 	mov	r16,r2
  8026fc:	1887c83a 	sub	r3,r3,r2
  802700:	d8c02e15 	stw	r3,184(sp)
  802704:	d8802e17 	ldw	r2,184(sp)
  802708:	d9002917 	ldw	r4,164(sp)
  80270c:	1100010e 	bge	r2,r4,802714 <___vfprintf_internal_r+0x72c>
  802710:	2005883a 	mov	r2,r4
  802714:	d8802a15 	stw	r2,168(sp)
  802718:	d8003215 	stw	zero,200(sp)
  80271c:	e7003fcc 	andi	fp,fp,255
  802720:	e700201c 	xori	fp,fp,128
  802724:	e73fe004 	addi	fp,fp,-128
  802728:	e0000326 	beq	fp,zero,802738 <___vfprintf_internal_r+0x750>
  80272c:	d8c02a17 	ldw	r3,168(sp)
  802730:	18c00044 	addi	r3,r3,1
  802734:	d8c02a15 	stw	r3,168(sp)
  802738:	90c0008c 	andi	r3,r18,2
  80273c:	d8c02b15 	stw	r3,172(sp)
  802740:	18000326 	beq	r3,zero,802750 <___vfprintf_internal_r+0x768>
  802744:	d8c02a17 	ldw	r3,168(sp)
  802748:	18c00084 	addi	r3,r3,2
  80274c:	d8c02a15 	stw	r3,168(sp)
  802750:	90c0210c 	andi	r3,r18,132
  802754:	d8c03015 	stw	r3,192(sp)
  802758:	1801a31e 	bne	r3,zero,802de8 <___vfprintf_internal_r+0xe00>
  80275c:	d9003117 	ldw	r4,196(sp)
  802760:	d8c02a17 	ldw	r3,168(sp)
  802764:	20e7c83a 	sub	r19,r4,r3
  802768:	04c19f0e 	bge	zero,r19,802de8 <___vfprintf_internal_r+0xe00>
  80276c:	02400404 	movi	r9,16
  802770:	d8c02017 	ldw	r3,128(sp)
  802774:	d8801f17 	ldw	r2,124(sp)
  802778:	4cc50d0e 	bge	r9,r19,803bb0 <___vfprintf_internal_r+0x1bc8>
  80277c:	01402074 	movhi	r5,129
  802780:	29479684 	addi	r5,r5,7770
  802784:	dc403b15 	stw	r17,236(sp)
  802788:	d9403515 	stw	r5,212(sp)
  80278c:	9823883a 	mov	r17,r19
  802790:	482d883a 	mov	r22,r9
  802794:	9027883a 	mov	r19,r18
  802798:	070001c4 	movi	fp,7
  80279c:	8025883a 	mov	r18,r16
  8027a0:	dc002c17 	ldw	r16,176(sp)
  8027a4:	00000306 	br	8027b4 <___vfprintf_internal_r+0x7cc>
  8027a8:	8c7ffc04 	addi	r17,r17,-16
  8027ac:	42000204 	addi	r8,r8,8
  8027b0:	b440130e 	bge	r22,r17,802800 <___vfprintf_internal_r+0x818>
  8027b4:	01002074 	movhi	r4,129
  8027b8:	18c00404 	addi	r3,r3,16
  8027bc:	10800044 	addi	r2,r2,1
  8027c0:	21079684 	addi	r4,r4,7770
  8027c4:	41000015 	stw	r4,0(r8)
  8027c8:	45800115 	stw	r22,4(r8)
  8027cc:	d8c02015 	stw	r3,128(sp)
  8027d0:	d8801f15 	stw	r2,124(sp)
  8027d4:	e0bff40e 	bge	fp,r2,8027a8 <__alt_mem_onchip_mem+0xff7fa7a8>
  8027d8:	d9801e04 	addi	r6,sp,120
  8027dc:	b80b883a 	mov	r5,r23
  8027e0:	8009883a 	mov	r4,r16
  8027e4:	0808bd80 	call	808bd8 <__sprint_r>
  8027e8:	103f011e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  8027ec:	8c7ffc04 	addi	r17,r17,-16
  8027f0:	d8c02017 	ldw	r3,128(sp)
  8027f4:	d8801f17 	ldw	r2,124(sp)
  8027f8:	da000404 	addi	r8,sp,16
  8027fc:	b47fed16 	blt	r22,r17,8027b4 <__alt_mem_onchip_mem+0xff7fa7b4>
  802800:	9021883a 	mov	r16,r18
  802804:	9825883a 	mov	r18,r19
  802808:	8827883a 	mov	r19,r17
  80280c:	dc403b17 	ldw	r17,236(sp)
  802810:	d9403517 	ldw	r5,212(sp)
  802814:	98c7883a 	add	r3,r19,r3
  802818:	10800044 	addi	r2,r2,1
  80281c:	41400015 	stw	r5,0(r8)
  802820:	44c00115 	stw	r19,4(r8)
  802824:	d8c02015 	stw	r3,128(sp)
  802828:	d8801f15 	stw	r2,124(sp)
  80282c:	010001c4 	movi	r4,7
  802830:	2082a316 	blt	r4,r2,8032c0 <___vfprintf_internal_r+0x12d8>
  802834:	df002787 	ldb	fp,158(sp)
  802838:	42000204 	addi	r8,r8,8
  80283c:	e0000c26 	beq	fp,zero,802870 <___vfprintf_internal_r+0x888>
  802840:	d8801f17 	ldw	r2,124(sp)
  802844:	d9002784 	addi	r4,sp,158
  802848:	18c00044 	addi	r3,r3,1
  80284c:	10800044 	addi	r2,r2,1
  802850:	41000015 	stw	r4,0(r8)
  802854:	01000044 	movi	r4,1
  802858:	41000115 	stw	r4,4(r8)
  80285c:	d8c02015 	stw	r3,128(sp)
  802860:	d8801f15 	stw	r2,124(sp)
  802864:	010001c4 	movi	r4,7
  802868:	20823c16 	blt	r4,r2,80315c <___vfprintf_internal_r+0x1174>
  80286c:	42000204 	addi	r8,r8,8
  802870:	d8802b17 	ldw	r2,172(sp)
  802874:	10000c26 	beq	r2,zero,8028a8 <___vfprintf_internal_r+0x8c0>
  802878:	d8801f17 	ldw	r2,124(sp)
  80287c:	d9002704 	addi	r4,sp,156
  802880:	18c00084 	addi	r3,r3,2
  802884:	10800044 	addi	r2,r2,1
  802888:	41000015 	stw	r4,0(r8)
  80288c:	01000084 	movi	r4,2
  802890:	41000115 	stw	r4,4(r8)
  802894:	d8c02015 	stw	r3,128(sp)
  802898:	d8801f15 	stw	r2,124(sp)
  80289c:	010001c4 	movi	r4,7
  8028a0:	20823616 	blt	r4,r2,80317c <___vfprintf_internal_r+0x1194>
  8028a4:	42000204 	addi	r8,r8,8
  8028a8:	d9003017 	ldw	r4,192(sp)
  8028ac:	00802004 	movi	r2,128
  8028b0:	20819926 	beq	r4,r2,802f18 <___vfprintf_internal_r+0xf30>
  8028b4:	d9402917 	ldw	r5,164(sp)
  8028b8:	d8802e17 	ldw	r2,184(sp)
  8028bc:	28adc83a 	sub	r22,r5,r2
  8028c0:	0580310e 	bge	zero,r22,802988 <___vfprintf_internal_r+0x9a0>
  8028c4:	07000404 	movi	fp,16
  8028c8:	d8801f17 	ldw	r2,124(sp)
  8028cc:	e584140e 	bge	fp,r22,803920 <___vfprintf_internal_r+0x1938>
  8028d0:	01402074 	movhi	r5,129
  8028d4:	29479284 	addi	r5,r5,7754
  8028d8:	dc402915 	stw	r17,164(sp)
  8028dc:	d9402b15 	stw	r5,172(sp)
  8028e0:	b023883a 	mov	r17,r22
  8028e4:	04c001c4 	movi	r19,7
  8028e8:	a82d883a 	mov	r22,r21
  8028ec:	902b883a 	mov	r21,r18
  8028f0:	8025883a 	mov	r18,r16
  8028f4:	dc002c17 	ldw	r16,176(sp)
  8028f8:	00000306 	br	802908 <___vfprintf_internal_r+0x920>
  8028fc:	8c7ffc04 	addi	r17,r17,-16
  802900:	42000204 	addi	r8,r8,8
  802904:	e440110e 	bge	fp,r17,80294c <___vfprintf_internal_r+0x964>
  802908:	18c00404 	addi	r3,r3,16
  80290c:	10800044 	addi	r2,r2,1
  802910:	45000015 	stw	r20,0(r8)
  802914:	47000115 	stw	fp,4(r8)
  802918:	d8c02015 	stw	r3,128(sp)
  80291c:	d8801f15 	stw	r2,124(sp)
  802920:	98bff60e 	bge	r19,r2,8028fc <__alt_mem_onchip_mem+0xff7fa8fc>
  802924:	d9801e04 	addi	r6,sp,120
  802928:	b80b883a 	mov	r5,r23
  80292c:	8009883a 	mov	r4,r16
  802930:	0808bd80 	call	808bd8 <__sprint_r>
  802934:	103eae1e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  802938:	8c7ffc04 	addi	r17,r17,-16
  80293c:	d8c02017 	ldw	r3,128(sp)
  802940:	d8801f17 	ldw	r2,124(sp)
  802944:	da000404 	addi	r8,sp,16
  802948:	e47fef16 	blt	fp,r17,802908 <__alt_mem_onchip_mem+0xff7fa908>
  80294c:	9021883a 	mov	r16,r18
  802950:	a825883a 	mov	r18,r21
  802954:	b02b883a 	mov	r21,r22
  802958:	882d883a 	mov	r22,r17
  80295c:	dc402917 	ldw	r17,164(sp)
  802960:	d9002b17 	ldw	r4,172(sp)
  802964:	1d87883a 	add	r3,r3,r22
  802968:	10800044 	addi	r2,r2,1
  80296c:	41000015 	stw	r4,0(r8)
  802970:	45800115 	stw	r22,4(r8)
  802974:	d8c02015 	stw	r3,128(sp)
  802978:	d8801f15 	stw	r2,124(sp)
  80297c:	010001c4 	movi	r4,7
  802980:	2081ee16 	blt	r4,r2,80313c <___vfprintf_internal_r+0x1154>
  802984:	42000204 	addi	r8,r8,8
  802988:	9080400c 	andi	r2,r18,256
  80298c:	1001181e 	bne	r2,zero,802df0 <___vfprintf_internal_r+0xe08>
  802990:	d9402e17 	ldw	r5,184(sp)
  802994:	d8801f17 	ldw	r2,124(sp)
  802998:	44000015 	stw	r16,0(r8)
  80299c:	1947883a 	add	r3,r3,r5
  8029a0:	10800044 	addi	r2,r2,1
  8029a4:	41400115 	stw	r5,4(r8)
  8029a8:	d8c02015 	stw	r3,128(sp)
  8029ac:	d8801f15 	stw	r2,124(sp)
  8029b0:	010001c4 	movi	r4,7
  8029b4:	2081d316 	blt	r4,r2,803104 <___vfprintf_internal_r+0x111c>
  8029b8:	42000204 	addi	r8,r8,8
  8029bc:	9480010c 	andi	r18,r18,4
  8029c0:	90003226 	beq	r18,zero,802a8c <___vfprintf_internal_r+0xaa4>
  8029c4:	d9403117 	ldw	r5,196(sp)
  8029c8:	d8802a17 	ldw	r2,168(sp)
  8029cc:	28a1c83a 	sub	r16,r5,r2
  8029d0:	04002e0e 	bge	zero,r16,802a8c <___vfprintf_internal_r+0xaa4>
  8029d4:	04400404 	movi	r17,16
  8029d8:	d8801f17 	ldw	r2,124(sp)
  8029dc:	8c04a20e 	bge	r17,r16,803c68 <___vfprintf_internal_r+0x1c80>
  8029e0:	01402074 	movhi	r5,129
  8029e4:	29479684 	addi	r5,r5,7770
  8029e8:	d9403515 	stw	r5,212(sp)
  8029ec:	048001c4 	movi	r18,7
  8029f0:	dcc02c17 	ldw	r19,176(sp)
  8029f4:	00000306 	br	802a04 <___vfprintf_internal_r+0xa1c>
  8029f8:	843ffc04 	addi	r16,r16,-16
  8029fc:	42000204 	addi	r8,r8,8
  802a00:	8c00130e 	bge	r17,r16,802a50 <___vfprintf_internal_r+0xa68>
  802a04:	01002074 	movhi	r4,129
  802a08:	18c00404 	addi	r3,r3,16
  802a0c:	10800044 	addi	r2,r2,1
  802a10:	21079684 	addi	r4,r4,7770
  802a14:	41000015 	stw	r4,0(r8)
  802a18:	44400115 	stw	r17,4(r8)
  802a1c:	d8c02015 	stw	r3,128(sp)
  802a20:	d8801f15 	stw	r2,124(sp)
  802a24:	90bff40e 	bge	r18,r2,8029f8 <__alt_mem_onchip_mem+0xff7fa9f8>
  802a28:	d9801e04 	addi	r6,sp,120
  802a2c:	b80b883a 	mov	r5,r23
  802a30:	9809883a 	mov	r4,r19
  802a34:	0808bd80 	call	808bd8 <__sprint_r>
  802a38:	103e6d1e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  802a3c:	843ffc04 	addi	r16,r16,-16
  802a40:	d8c02017 	ldw	r3,128(sp)
  802a44:	d8801f17 	ldw	r2,124(sp)
  802a48:	da000404 	addi	r8,sp,16
  802a4c:	8c3fed16 	blt	r17,r16,802a04 <__alt_mem_onchip_mem+0xff7faa04>
  802a50:	d9403517 	ldw	r5,212(sp)
  802a54:	1c07883a 	add	r3,r3,r16
  802a58:	10800044 	addi	r2,r2,1
  802a5c:	41400015 	stw	r5,0(r8)
  802a60:	44000115 	stw	r16,4(r8)
  802a64:	d8c02015 	stw	r3,128(sp)
  802a68:	d8801f15 	stw	r2,124(sp)
  802a6c:	010001c4 	movi	r4,7
  802a70:	2080060e 	bge	r4,r2,802a8c <___vfprintf_internal_r+0xaa4>
  802a74:	d9002c17 	ldw	r4,176(sp)
  802a78:	d9801e04 	addi	r6,sp,120
  802a7c:	b80b883a 	mov	r5,r23
  802a80:	0808bd80 	call	808bd8 <__sprint_r>
  802a84:	103e5a1e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  802a88:	d8c02017 	ldw	r3,128(sp)
  802a8c:	d8803117 	ldw	r2,196(sp)
  802a90:	d9002a17 	ldw	r4,168(sp)
  802a94:	1100010e 	bge	r2,r4,802a9c <___vfprintf_internal_r+0xab4>
  802a98:	2005883a 	mov	r2,r4
  802a9c:	d9402f17 	ldw	r5,188(sp)
  802aa0:	288b883a 	add	r5,r5,r2
  802aa4:	d9402f15 	stw	r5,188(sp)
  802aa8:	18019e1e 	bne	r3,zero,803124 <___vfprintf_internal_r+0x113c>
  802aac:	a8800007 	ldb	r2,0(r21)
  802ab0:	d8001f15 	stw	zero,124(sp)
  802ab4:	da000404 	addi	r8,sp,16
  802ab8:	103d851e 	bne	r2,zero,8020d0 <__alt_mem_onchip_mem+0xff7fa0d0>
  802abc:	a821883a 	mov	r16,r21
  802ac0:	003d9b06 	br	802130 <__alt_mem_onchip_mem+0xff7fa130>
  802ac4:	18c03fcc 	andi	r3,r3,255
  802ac8:	1805c11e 	bne	r3,zero,8041d0 <___vfprintf_internal_r+0x21e8>
  802acc:	94800414 	ori	r18,r18,16
  802ad0:	9080080c 	andi	r2,r18,32
  802ad4:	10020c26 	beq	r2,zero,803308 <___vfprintf_internal_r+0x1320>
  802ad8:	d8802d17 	ldw	r2,180(sp)
  802adc:	d9002917 	ldw	r4,164(sp)
  802ae0:	d8002785 	stb	zero,158(sp)
  802ae4:	10c00204 	addi	r3,r2,8
  802ae8:	14c00017 	ldw	r19,0(r2)
  802aec:	15800117 	ldw	r22,4(r2)
  802af0:	20040f16 	blt	r4,zero,803b30 <___vfprintf_internal_r+0x1b48>
  802af4:	013fdfc4 	movi	r4,-129
  802af8:	9d84b03a 	or	r2,r19,r22
  802afc:	d8c02d15 	stw	r3,180(sp)
  802b00:	9124703a 	and	r18,r18,r4
  802b04:	0039883a 	mov	fp,zero
  802b08:	103e891e 	bne	r2,zero,802530 <__alt_mem_onchip_mem+0xff7fa530>
  802b0c:	d9002917 	ldw	r4,164(sp)
  802b10:	2002c11e 	bne	r4,zero,803618 <___vfprintf_internal_r+0x1630>
  802b14:	d8002915 	stw	zero,164(sp)
  802b18:	d8002e15 	stw	zero,184(sp)
  802b1c:	dc001e04 	addi	r16,sp,120
  802b20:	003ef806 	br	802704 <__alt_mem_onchip_mem+0xff7fa704>
  802b24:	18c03fcc 	andi	r3,r3,255
  802b28:	18059d1e 	bne	r3,zero,8041a0 <___vfprintf_internal_r+0x21b8>
  802b2c:	01402074 	movhi	r5,129
  802b30:	29478604 	addi	r5,r5,7704
  802b34:	d9403915 	stw	r5,228(sp)
  802b38:	9080080c 	andi	r2,r18,32
  802b3c:	10005226 	beq	r2,zero,802c88 <___vfprintf_internal_r+0xca0>
  802b40:	d8802d17 	ldw	r2,180(sp)
  802b44:	14c00017 	ldw	r19,0(r2)
  802b48:	15800117 	ldw	r22,4(r2)
  802b4c:	10800204 	addi	r2,r2,8
  802b50:	d8802d15 	stw	r2,180(sp)
  802b54:	9080004c 	andi	r2,r18,1
  802b58:	10019026 	beq	r2,zero,80319c <___vfprintf_internal_r+0x11b4>
  802b5c:	9d84b03a 	or	r2,r19,r22
  802b60:	10036926 	beq	r2,zero,803908 <___vfprintf_internal_r+0x1920>
  802b64:	d8c02917 	ldw	r3,164(sp)
  802b68:	00800c04 	movi	r2,48
  802b6c:	d8802705 	stb	r2,156(sp)
  802b70:	dc402745 	stb	r17,157(sp)
  802b74:	d8002785 	stb	zero,158(sp)
  802b78:	90800094 	ori	r2,r18,2
  802b7c:	18045d16 	blt	r3,zero,803cf4 <___vfprintf_internal_r+0x1d0c>
  802b80:	00bfdfc4 	movi	r2,-129
  802b84:	90a4703a 	and	r18,r18,r2
  802b88:	94800094 	ori	r18,r18,2
  802b8c:	0039883a 	mov	fp,zero
  802b90:	d9003917 	ldw	r4,228(sp)
  802b94:	dc001e04 	addi	r16,sp,120
  802b98:	988003cc 	andi	r2,r19,15
  802b9c:	b006973a 	slli	r3,r22,28
  802ba0:	2085883a 	add	r2,r4,r2
  802ba4:	9826d13a 	srli	r19,r19,4
  802ba8:	10800003 	ldbu	r2,0(r2)
  802bac:	b02cd13a 	srli	r22,r22,4
  802bb0:	843fffc4 	addi	r16,r16,-1
  802bb4:	1ce6b03a 	or	r19,r3,r19
  802bb8:	80800005 	stb	r2,0(r16)
  802bbc:	9d84b03a 	or	r2,r19,r22
  802bc0:	103ff51e 	bne	r2,zero,802b98 <__alt_mem_onchip_mem+0xff7fab98>
  802bc4:	d8c02817 	ldw	r3,160(sp)
  802bc8:	1c07c83a 	sub	r3,r3,r16
  802bcc:	d8c02e15 	stw	r3,184(sp)
  802bd0:	003ecc06 	br	802704 <__alt_mem_onchip_mem+0xff7fa704>
  802bd4:	18c03fcc 	andi	r3,r3,255
  802bd8:	183e9f26 	beq	r3,zero,802658 <__alt_mem_onchip_mem+0xff7fa658>
  802bdc:	d9c02785 	stb	r7,158(sp)
  802be0:	003e9d06 	br	802658 <__alt_mem_onchip_mem+0xff7fa658>
  802be4:	00c00044 	movi	r3,1
  802be8:	01c00ac4 	movi	r7,43
  802bec:	ac400007 	ldb	r17,0(r21)
  802bf0:	003d5e06 	br	80216c <__alt_mem_onchip_mem+0xff7fa16c>
  802bf4:	94800814 	ori	r18,r18,32
  802bf8:	ac400007 	ldb	r17,0(r21)
  802bfc:	003d5b06 	br	80216c <__alt_mem_onchip_mem+0xff7fa16c>
  802c00:	d8c02d17 	ldw	r3,180(sp)
  802c04:	d8002785 	stb	zero,158(sp)
  802c08:	1c000017 	ldw	r16,0(r3)
  802c0c:	1cc00104 	addi	r19,r3,4
  802c10:	80041926 	beq	r16,zero,803c78 <___vfprintf_internal_r+0x1c90>
  802c14:	d9002917 	ldw	r4,164(sp)
  802c18:	2003d016 	blt	r4,zero,803b5c <___vfprintf_internal_r+0x1b74>
  802c1c:	200d883a 	mov	r6,r4
  802c20:	000b883a 	mov	r5,zero
  802c24:	8009883a 	mov	r4,r16
  802c28:	da003d15 	stw	r8,244(sp)
  802c2c:	08070440 	call	807044 <memchr>
  802c30:	da003d17 	ldw	r8,244(sp)
  802c34:	10045426 	beq	r2,zero,803d88 <___vfprintf_internal_r+0x1da0>
  802c38:	1405c83a 	sub	r2,r2,r16
  802c3c:	d8802e15 	stw	r2,184(sp)
  802c40:	1003cc16 	blt	r2,zero,803b74 <___vfprintf_internal_r+0x1b8c>
  802c44:	df002783 	ldbu	fp,158(sp)
  802c48:	d8802a15 	stw	r2,168(sp)
  802c4c:	dcc02d15 	stw	r19,180(sp)
  802c50:	d8002915 	stw	zero,164(sp)
  802c54:	d8003215 	stw	zero,200(sp)
  802c58:	003eb006 	br	80271c <__alt_mem_onchip_mem+0xff7fa71c>
  802c5c:	18c03fcc 	andi	r3,r3,255
  802c60:	183f9b26 	beq	r3,zero,802ad0 <__alt_mem_onchip_mem+0xff7faad0>
  802c64:	d9c02785 	stb	r7,158(sp)
  802c68:	003f9906 	br	802ad0 <__alt_mem_onchip_mem+0xff7faad0>
  802c6c:	18c03fcc 	andi	r3,r3,255
  802c70:	1805551e 	bne	r3,zero,8041c8 <___vfprintf_internal_r+0x21e0>
  802c74:	01402074 	movhi	r5,129
  802c78:	29478b04 	addi	r5,r5,7724
  802c7c:	d9403915 	stw	r5,228(sp)
  802c80:	9080080c 	andi	r2,r18,32
  802c84:	103fae1e 	bne	r2,zero,802b40 <__alt_mem_onchip_mem+0xff7fab40>
  802c88:	9080040c 	andi	r2,r18,16
  802c8c:	1002de26 	beq	r2,zero,803808 <___vfprintf_internal_r+0x1820>
  802c90:	d8c02d17 	ldw	r3,180(sp)
  802c94:	002d883a 	mov	r22,zero
  802c98:	1cc00017 	ldw	r19,0(r3)
  802c9c:	18c00104 	addi	r3,r3,4
  802ca0:	d8c02d15 	stw	r3,180(sp)
  802ca4:	003fab06 	br	802b54 <__alt_mem_onchip_mem+0xff7fab54>
  802ca8:	38803fcc 	andi	r2,r7,255
  802cac:	1080201c 	xori	r2,r2,128
  802cb0:	10bfe004 	addi	r2,r2,-128
  802cb4:	1002d21e 	bne	r2,zero,803800 <___vfprintf_internal_r+0x1818>
  802cb8:	00c00044 	movi	r3,1
  802cbc:	01c00804 	movi	r7,32
  802cc0:	ac400007 	ldb	r17,0(r21)
  802cc4:	003d2906 	br	80216c <__alt_mem_onchip_mem+0xff7fa16c>
  802cc8:	94800054 	ori	r18,r18,1
  802ccc:	ac400007 	ldb	r17,0(r21)
  802cd0:	003d2606 	br	80216c <__alt_mem_onchip_mem+0xff7fa16c>
  802cd4:	18c03fcc 	andi	r3,r3,255
  802cd8:	183e0526 	beq	r3,zero,8024f0 <__alt_mem_onchip_mem+0xff7fa4f0>
  802cdc:	d9c02785 	stb	r7,158(sp)
  802ce0:	003e0306 	br	8024f0 <__alt_mem_onchip_mem+0xff7fa4f0>
  802ce4:	94801014 	ori	r18,r18,64
  802ce8:	ac400007 	ldb	r17,0(r21)
  802cec:	003d1f06 	br	80216c <__alt_mem_onchip_mem+0xff7fa16c>
  802cf0:	ac400007 	ldb	r17,0(r21)
  802cf4:	8a438726 	beq	r17,r9,803b14 <___vfprintf_internal_r+0x1b2c>
  802cf8:	94800414 	ori	r18,r18,16
  802cfc:	003d1b06 	br	80216c <__alt_mem_onchip_mem+0xff7fa16c>
  802d00:	18c03fcc 	andi	r3,r3,255
  802d04:	1805341e 	bne	r3,zero,8041d8 <___vfprintf_internal_r+0x21f0>
  802d08:	9080080c 	andi	r2,r18,32
  802d0c:	1002cd26 	beq	r2,zero,803844 <___vfprintf_internal_r+0x185c>
  802d10:	d9402d17 	ldw	r5,180(sp)
  802d14:	d9002f17 	ldw	r4,188(sp)
  802d18:	28800017 	ldw	r2,0(r5)
  802d1c:	2007d7fa 	srai	r3,r4,31
  802d20:	29400104 	addi	r5,r5,4
  802d24:	d9402d15 	stw	r5,180(sp)
  802d28:	11000015 	stw	r4,0(r2)
  802d2c:	10c00115 	stw	r3,4(r2)
  802d30:	003ce506 	br	8020c8 <__alt_mem_onchip_mem+0xff7fa0c8>
  802d34:	d8c02d17 	ldw	r3,180(sp)
  802d38:	d9002d17 	ldw	r4,180(sp)
  802d3c:	d8002785 	stb	zero,158(sp)
  802d40:	18800017 	ldw	r2,0(r3)
  802d44:	21000104 	addi	r4,r4,4
  802d48:	00c00044 	movi	r3,1
  802d4c:	d8c02a15 	stw	r3,168(sp)
  802d50:	d8801405 	stb	r2,80(sp)
  802d54:	d9002d15 	stw	r4,180(sp)
  802d58:	d8c02e15 	stw	r3,184(sp)
  802d5c:	d8002915 	stw	zero,164(sp)
  802d60:	d8003215 	stw	zero,200(sp)
  802d64:	dc001404 	addi	r16,sp,80
  802d68:	0039883a 	mov	fp,zero
  802d6c:	003e7206 	br	802738 <__alt_mem_onchip_mem+0xff7fa738>
  802d70:	01002074 	movhi	r4,129
  802d74:	21078b04 	addi	r4,r4,7724
  802d78:	0039883a 	mov	fp,zero
  802d7c:	d9003915 	stw	r4,228(sp)
  802d80:	04401e04 	movi	r17,120
  802d84:	003f8206 	br	802b90 <__alt_mem_onchip_mem+0xff7fab90>
  802d88:	18c03fcc 	andi	r3,r3,255
  802d8c:	1805061e 	bne	r3,zero,8041a8 <___vfprintf_internal_r+0x21c0>
  802d90:	883d9126 	beq	r17,zero,8023d8 <__alt_mem_onchip_mem+0xff7fa3d8>
  802d94:	00c00044 	movi	r3,1
  802d98:	d8c02a15 	stw	r3,168(sp)
  802d9c:	dc401405 	stb	r17,80(sp)
  802da0:	d8002785 	stb	zero,158(sp)
  802da4:	003fec06 	br	802d58 <__alt_mem_onchip_mem+0xff7fad58>
  802da8:	01402074 	movhi	r5,129
  802dac:	29478b04 	addi	r5,r5,7724
  802db0:	d9403915 	stw	r5,228(sp)
  802db4:	d8c02d15 	stw	r3,180(sp)
  802db8:	1025883a 	mov	r18,r2
  802dbc:	04401e04 	movi	r17,120
  802dc0:	9d84b03a 	or	r2,r19,r22
  802dc4:	1000fc1e 	bne	r2,zero,8031b8 <___vfprintf_internal_r+0x11d0>
  802dc8:	0039883a 	mov	fp,zero
  802dcc:	00800084 	movi	r2,2
  802dd0:	10803fcc 	andi	r2,r2,255
  802dd4:	00c00044 	movi	r3,1
  802dd8:	10c20f26 	beq	r2,r3,803618 <___vfprintf_internal_r+0x1630>
  802ddc:	00c00084 	movi	r3,2
  802de0:	10fd6326 	beq	r2,r3,802370 <__alt_mem_onchip_mem+0xff7fa370>
  802de4:	003e2d06 	br	80269c <__alt_mem_onchip_mem+0xff7fa69c>
  802de8:	d8c02017 	ldw	r3,128(sp)
  802dec:	003e9306 	br	80283c <__alt_mem_onchip_mem+0xff7fa83c>
  802df0:	00801944 	movi	r2,101
  802df4:	14407e0e 	bge	r2,r17,802ff0 <___vfprintf_internal_r+0x1008>
  802df8:	d9003617 	ldw	r4,216(sp)
  802dfc:	d9403817 	ldw	r5,224(sp)
  802e00:	000d883a 	mov	r6,zero
  802e04:	000f883a 	mov	r7,zero
  802e08:	d8c03c15 	stw	r3,240(sp)
  802e0c:	da003d15 	stw	r8,244(sp)
  802e10:	080c62c0 	call	80c62c <__eqdf2>
  802e14:	d8c03c17 	ldw	r3,240(sp)
  802e18:	da003d17 	ldw	r8,244(sp)
  802e1c:	1000f71e 	bne	r2,zero,8031fc <___vfprintf_internal_r+0x1214>
  802e20:	d8801f17 	ldw	r2,124(sp)
  802e24:	01002074 	movhi	r4,129
  802e28:	21079204 	addi	r4,r4,7752
  802e2c:	18c00044 	addi	r3,r3,1
  802e30:	10800044 	addi	r2,r2,1
  802e34:	41000015 	stw	r4,0(r8)
  802e38:	01000044 	movi	r4,1
  802e3c:	41000115 	stw	r4,4(r8)
  802e40:	d8c02015 	stw	r3,128(sp)
  802e44:	d8801f15 	stw	r2,124(sp)
  802e48:	010001c4 	movi	r4,7
  802e4c:	2082b816 	blt	r4,r2,803930 <___vfprintf_internal_r+0x1948>
  802e50:	42000204 	addi	r8,r8,8
  802e54:	d8802617 	ldw	r2,152(sp)
  802e58:	d9403317 	ldw	r5,204(sp)
  802e5c:	11400216 	blt	r2,r5,802e68 <___vfprintf_internal_r+0xe80>
  802e60:	9080004c 	andi	r2,r18,1
  802e64:	103ed526 	beq	r2,zero,8029bc <__alt_mem_onchip_mem+0xff7fa9bc>
  802e68:	d8803717 	ldw	r2,220(sp)
  802e6c:	d9003417 	ldw	r4,208(sp)
  802e70:	d9403717 	ldw	r5,220(sp)
  802e74:	1887883a 	add	r3,r3,r2
  802e78:	d8801f17 	ldw	r2,124(sp)
  802e7c:	41000015 	stw	r4,0(r8)
  802e80:	41400115 	stw	r5,4(r8)
  802e84:	10800044 	addi	r2,r2,1
  802e88:	d8c02015 	stw	r3,128(sp)
  802e8c:	d8801f15 	stw	r2,124(sp)
  802e90:	010001c4 	movi	r4,7
  802e94:	20832916 	blt	r4,r2,803b3c <___vfprintf_internal_r+0x1b54>
  802e98:	42000204 	addi	r8,r8,8
  802e9c:	d8803317 	ldw	r2,204(sp)
  802ea0:	143fffc4 	addi	r16,r2,-1
  802ea4:	043ec50e 	bge	zero,r16,8029bc <__alt_mem_onchip_mem+0xff7fa9bc>
  802ea8:	04400404 	movi	r17,16
  802eac:	d8801f17 	ldw	r2,124(sp)
  802eb0:	8c00880e 	bge	r17,r16,8030d4 <___vfprintf_internal_r+0x10ec>
  802eb4:	01402074 	movhi	r5,129
  802eb8:	29479284 	addi	r5,r5,7754
  802ebc:	d9402b15 	stw	r5,172(sp)
  802ec0:	058001c4 	movi	r22,7
  802ec4:	dcc02c17 	ldw	r19,176(sp)
  802ec8:	00000306 	br	802ed8 <___vfprintf_internal_r+0xef0>
  802ecc:	42000204 	addi	r8,r8,8
  802ed0:	843ffc04 	addi	r16,r16,-16
  802ed4:	8c00820e 	bge	r17,r16,8030e0 <___vfprintf_internal_r+0x10f8>
  802ed8:	18c00404 	addi	r3,r3,16
  802edc:	10800044 	addi	r2,r2,1
  802ee0:	45000015 	stw	r20,0(r8)
  802ee4:	44400115 	stw	r17,4(r8)
  802ee8:	d8c02015 	stw	r3,128(sp)
  802eec:	d8801f15 	stw	r2,124(sp)
  802ef0:	b0bff60e 	bge	r22,r2,802ecc <__alt_mem_onchip_mem+0xff7faecc>
  802ef4:	d9801e04 	addi	r6,sp,120
  802ef8:	b80b883a 	mov	r5,r23
  802efc:	9809883a 	mov	r4,r19
  802f00:	0808bd80 	call	808bd8 <__sprint_r>
  802f04:	103d3a1e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  802f08:	d8c02017 	ldw	r3,128(sp)
  802f0c:	d8801f17 	ldw	r2,124(sp)
  802f10:	da000404 	addi	r8,sp,16
  802f14:	003fee06 	br	802ed0 <__alt_mem_onchip_mem+0xff7faed0>
  802f18:	d9403117 	ldw	r5,196(sp)
  802f1c:	d8802a17 	ldw	r2,168(sp)
  802f20:	28adc83a 	sub	r22,r5,r2
  802f24:	05be630e 	bge	zero,r22,8028b4 <__alt_mem_onchip_mem+0xff7fa8b4>
  802f28:	07000404 	movi	fp,16
  802f2c:	d8801f17 	ldw	r2,124(sp)
  802f30:	e5838f0e 	bge	fp,r22,803d70 <___vfprintf_internal_r+0x1d88>
  802f34:	01402074 	movhi	r5,129
  802f38:	29479284 	addi	r5,r5,7754
  802f3c:	dc403015 	stw	r17,192(sp)
  802f40:	d9402b15 	stw	r5,172(sp)
  802f44:	b023883a 	mov	r17,r22
  802f48:	04c001c4 	movi	r19,7
  802f4c:	a82d883a 	mov	r22,r21
  802f50:	902b883a 	mov	r21,r18
  802f54:	8025883a 	mov	r18,r16
  802f58:	dc002c17 	ldw	r16,176(sp)
  802f5c:	00000306 	br	802f6c <___vfprintf_internal_r+0xf84>
  802f60:	8c7ffc04 	addi	r17,r17,-16
  802f64:	42000204 	addi	r8,r8,8
  802f68:	e440110e 	bge	fp,r17,802fb0 <___vfprintf_internal_r+0xfc8>
  802f6c:	18c00404 	addi	r3,r3,16
  802f70:	10800044 	addi	r2,r2,1
  802f74:	45000015 	stw	r20,0(r8)
  802f78:	47000115 	stw	fp,4(r8)
  802f7c:	d8c02015 	stw	r3,128(sp)
  802f80:	d8801f15 	stw	r2,124(sp)
  802f84:	98bff60e 	bge	r19,r2,802f60 <__alt_mem_onchip_mem+0xff7faf60>
  802f88:	d9801e04 	addi	r6,sp,120
  802f8c:	b80b883a 	mov	r5,r23
  802f90:	8009883a 	mov	r4,r16
  802f94:	0808bd80 	call	808bd8 <__sprint_r>
  802f98:	103d151e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  802f9c:	8c7ffc04 	addi	r17,r17,-16
  802fa0:	d8c02017 	ldw	r3,128(sp)
  802fa4:	d8801f17 	ldw	r2,124(sp)
  802fa8:	da000404 	addi	r8,sp,16
  802fac:	e47fef16 	blt	fp,r17,802f6c <__alt_mem_onchip_mem+0xff7faf6c>
  802fb0:	9021883a 	mov	r16,r18
  802fb4:	a825883a 	mov	r18,r21
  802fb8:	b02b883a 	mov	r21,r22
  802fbc:	882d883a 	mov	r22,r17
  802fc0:	dc403017 	ldw	r17,192(sp)
  802fc4:	d9002b17 	ldw	r4,172(sp)
  802fc8:	1d87883a 	add	r3,r3,r22
  802fcc:	10800044 	addi	r2,r2,1
  802fd0:	41000015 	stw	r4,0(r8)
  802fd4:	45800115 	stw	r22,4(r8)
  802fd8:	d8c02015 	stw	r3,128(sp)
  802fdc:	d8801f15 	stw	r2,124(sp)
  802fe0:	010001c4 	movi	r4,7
  802fe4:	20818e16 	blt	r4,r2,803620 <___vfprintf_internal_r+0x1638>
  802fe8:	42000204 	addi	r8,r8,8
  802fec:	003e3106 	br	8028b4 <__alt_mem_onchip_mem+0xff7fa8b4>
  802ff0:	d9403317 	ldw	r5,204(sp)
  802ff4:	00800044 	movi	r2,1
  802ff8:	18c00044 	addi	r3,r3,1
  802ffc:	1141530e 	bge	r2,r5,80354c <___vfprintf_internal_r+0x1564>
  803000:	dc401f17 	ldw	r17,124(sp)
  803004:	00800044 	movi	r2,1
  803008:	40800115 	stw	r2,4(r8)
  80300c:	8c400044 	addi	r17,r17,1
  803010:	44000015 	stw	r16,0(r8)
  803014:	d8c02015 	stw	r3,128(sp)
  803018:	dc401f15 	stw	r17,124(sp)
  80301c:	008001c4 	movi	r2,7
  803020:	14416b16 	blt	r2,r17,8035d0 <___vfprintf_internal_r+0x15e8>
  803024:	42000204 	addi	r8,r8,8
  803028:	d8803717 	ldw	r2,220(sp)
  80302c:	d9003417 	ldw	r4,208(sp)
  803030:	8c400044 	addi	r17,r17,1
  803034:	10c7883a 	add	r3,r2,r3
  803038:	40800115 	stw	r2,4(r8)
  80303c:	41000015 	stw	r4,0(r8)
  803040:	d8c02015 	stw	r3,128(sp)
  803044:	dc401f15 	stw	r17,124(sp)
  803048:	008001c4 	movi	r2,7
  80304c:	14416916 	blt	r2,r17,8035f4 <___vfprintf_internal_r+0x160c>
  803050:	45800204 	addi	r22,r8,8
  803054:	d9003617 	ldw	r4,216(sp)
  803058:	d9403817 	ldw	r5,224(sp)
  80305c:	000d883a 	mov	r6,zero
  803060:	000f883a 	mov	r7,zero
  803064:	d8c03c15 	stw	r3,240(sp)
  803068:	080c62c0 	call	80c62c <__eqdf2>
  80306c:	d8c03c17 	ldw	r3,240(sp)
  803070:	1000bc26 	beq	r2,zero,803364 <___vfprintf_internal_r+0x137c>
  803074:	d9403317 	ldw	r5,204(sp)
  803078:	84000044 	addi	r16,r16,1
  80307c:	8c400044 	addi	r17,r17,1
  803080:	28bfffc4 	addi	r2,r5,-1
  803084:	1887883a 	add	r3,r3,r2
  803088:	b0800115 	stw	r2,4(r22)
  80308c:	b4000015 	stw	r16,0(r22)
  803090:	d8c02015 	stw	r3,128(sp)
  803094:	dc401f15 	stw	r17,124(sp)
  803098:	008001c4 	movi	r2,7
  80309c:	14414316 	blt	r2,r17,8035ac <___vfprintf_internal_r+0x15c4>
  8030a0:	b5800204 	addi	r22,r22,8
  8030a4:	d9003a17 	ldw	r4,232(sp)
  8030a8:	df0022c4 	addi	fp,sp,139
  8030ac:	8c400044 	addi	r17,r17,1
  8030b0:	20c7883a 	add	r3,r4,r3
  8030b4:	b7000015 	stw	fp,0(r22)
  8030b8:	b1000115 	stw	r4,4(r22)
  8030bc:	d8c02015 	stw	r3,128(sp)
  8030c0:	dc401f15 	stw	r17,124(sp)
  8030c4:	008001c4 	movi	r2,7
  8030c8:	14400e16 	blt	r2,r17,803104 <___vfprintf_internal_r+0x111c>
  8030cc:	b2000204 	addi	r8,r22,8
  8030d0:	003e3a06 	br	8029bc <__alt_mem_onchip_mem+0xff7fa9bc>
  8030d4:	01002074 	movhi	r4,129
  8030d8:	21079284 	addi	r4,r4,7754
  8030dc:	d9002b15 	stw	r4,172(sp)
  8030e0:	d9002b17 	ldw	r4,172(sp)
  8030e4:	1c07883a 	add	r3,r3,r16
  8030e8:	44000115 	stw	r16,4(r8)
  8030ec:	41000015 	stw	r4,0(r8)
  8030f0:	10800044 	addi	r2,r2,1
  8030f4:	d8c02015 	stw	r3,128(sp)
  8030f8:	d8801f15 	stw	r2,124(sp)
  8030fc:	010001c4 	movi	r4,7
  803100:	20be2d0e 	bge	r4,r2,8029b8 <__alt_mem_onchip_mem+0xff7fa9b8>
  803104:	d9002c17 	ldw	r4,176(sp)
  803108:	d9801e04 	addi	r6,sp,120
  80310c:	b80b883a 	mov	r5,r23
  803110:	0808bd80 	call	808bd8 <__sprint_r>
  803114:	103cb61e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  803118:	d8c02017 	ldw	r3,128(sp)
  80311c:	da000404 	addi	r8,sp,16
  803120:	003e2606 	br	8029bc <__alt_mem_onchip_mem+0xff7fa9bc>
  803124:	d9002c17 	ldw	r4,176(sp)
  803128:	d9801e04 	addi	r6,sp,120
  80312c:	b80b883a 	mov	r5,r23
  803130:	0808bd80 	call	808bd8 <__sprint_r>
  803134:	103e5d26 	beq	r2,zero,802aac <__alt_mem_onchip_mem+0xff7faaac>
  803138:	003cad06 	br	8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  80313c:	d9002c17 	ldw	r4,176(sp)
  803140:	d9801e04 	addi	r6,sp,120
  803144:	b80b883a 	mov	r5,r23
  803148:	0808bd80 	call	808bd8 <__sprint_r>
  80314c:	103ca81e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  803150:	d8c02017 	ldw	r3,128(sp)
  803154:	da000404 	addi	r8,sp,16
  803158:	003e0b06 	br	802988 <__alt_mem_onchip_mem+0xff7fa988>
  80315c:	d9002c17 	ldw	r4,176(sp)
  803160:	d9801e04 	addi	r6,sp,120
  803164:	b80b883a 	mov	r5,r23
  803168:	0808bd80 	call	808bd8 <__sprint_r>
  80316c:	103ca01e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  803170:	d8c02017 	ldw	r3,128(sp)
  803174:	da000404 	addi	r8,sp,16
  803178:	003dbd06 	br	802870 <__alt_mem_onchip_mem+0xff7fa870>
  80317c:	d9002c17 	ldw	r4,176(sp)
  803180:	d9801e04 	addi	r6,sp,120
  803184:	b80b883a 	mov	r5,r23
  803188:	0808bd80 	call	808bd8 <__sprint_r>
  80318c:	103c981e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  803190:	d8c02017 	ldw	r3,128(sp)
  803194:	da000404 	addi	r8,sp,16
  803198:	003dc306 	br	8028a8 <__alt_mem_onchip_mem+0xff7fa8a8>
  80319c:	d8802917 	ldw	r2,164(sp)
  8031a0:	d8002785 	stb	zero,158(sp)
  8031a4:	103f0616 	blt	r2,zero,802dc0 <__alt_mem_onchip_mem+0xff7fadc0>
  8031a8:	00ffdfc4 	movi	r3,-129
  8031ac:	9d84b03a 	or	r2,r19,r22
  8031b0:	90e4703a 	and	r18,r18,r3
  8031b4:	103c6b26 	beq	r2,zero,802364 <__alt_mem_onchip_mem+0xff7fa364>
  8031b8:	0039883a 	mov	fp,zero
  8031bc:	003e7406 	br	802b90 <__alt_mem_onchip_mem+0xff7fab90>
  8031c0:	9080040c 	andi	r2,r18,16
  8031c4:	1001b326 	beq	r2,zero,803894 <___vfprintf_internal_r+0x18ac>
  8031c8:	d9002d17 	ldw	r4,180(sp)
  8031cc:	d9402917 	ldw	r5,164(sp)
  8031d0:	d8002785 	stb	zero,158(sp)
  8031d4:	20800104 	addi	r2,r4,4
  8031d8:	24c00017 	ldw	r19,0(r4)
  8031dc:	002d883a 	mov	r22,zero
  8031e0:	2801b516 	blt	r5,zero,8038b8 <___vfprintf_internal_r+0x18d0>
  8031e4:	00ffdfc4 	movi	r3,-129
  8031e8:	d8802d15 	stw	r2,180(sp)
  8031ec:	90e4703a 	and	r18,r18,r3
  8031f0:	983d2726 	beq	r19,zero,802690 <__alt_mem_onchip_mem+0xff7fa690>
  8031f4:	0039883a 	mov	fp,zero
  8031f8:	003d2a06 	br	8026a4 <__alt_mem_onchip_mem+0xff7fa6a4>
  8031fc:	dc402617 	ldw	r17,152(sp)
  803200:	0441d30e 	bge	zero,r17,803950 <___vfprintf_internal_r+0x1968>
  803204:	dc403217 	ldw	r17,200(sp)
  803208:	d8803317 	ldw	r2,204(sp)
  80320c:	1440010e 	bge	r2,r17,803214 <___vfprintf_internal_r+0x122c>
  803210:	1023883a 	mov	r17,r2
  803214:	04400a0e 	bge	zero,r17,803240 <___vfprintf_internal_r+0x1258>
  803218:	d8801f17 	ldw	r2,124(sp)
  80321c:	1c47883a 	add	r3,r3,r17
  803220:	44000015 	stw	r16,0(r8)
  803224:	10800044 	addi	r2,r2,1
  803228:	44400115 	stw	r17,4(r8)
  80322c:	d8c02015 	stw	r3,128(sp)
  803230:	d8801f15 	stw	r2,124(sp)
  803234:	010001c4 	movi	r4,7
  803238:	20826516 	blt	r4,r2,803bd0 <___vfprintf_internal_r+0x1be8>
  80323c:	42000204 	addi	r8,r8,8
  803240:	88026116 	blt	r17,zero,803bc8 <___vfprintf_internal_r+0x1be0>
  803244:	d9003217 	ldw	r4,200(sp)
  803248:	2463c83a 	sub	r17,r4,r17
  80324c:	04407b0e 	bge	zero,r17,80343c <___vfprintf_internal_r+0x1454>
  803250:	05800404 	movi	r22,16
  803254:	d8801f17 	ldw	r2,124(sp)
  803258:	b4419d0e 	bge	r22,r17,8038d0 <___vfprintf_internal_r+0x18e8>
  80325c:	01002074 	movhi	r4,129
  803260:	21079284 	addi	r4,r4,7754
  803264:	d9002b15 	stw	r4,172(sp)
  803268:	070001c4 	movi	fp,7
  80326c:	dcc02c17 	ldw	r19,176(sp)
  803270:	00000306 	br	803280 <___vfprintf_internal_r+0x1298>
  803274:	42000204 	addi	r8,r8,8
  803278:	8c7ffc04 	addi	r17,r17,-16
  80327c:	b441970e 	bge	r22,r17,8038dc <___vfprintf_internal_r+0x18f4>
  803280:	18c00404 	addi	r3,r3,16
  803284:	10800044 	addi	r2,r2,1
  803288:	45000015 	stw	r20,0(r8)
  80328c:	45800115 	stw	r22,4(r8)
  803290:	d8c02015 	stw	r3,128(sp)
  803294:	d8801f15 	stw	r2,124(sp)
  803298:	e0bff60e 	bge	fp,r2,803274 <__alt_mem_onchip_mem+0xff7fb274>
  80329c:	d9801e04 	addi	r6,sp,120
  8032a0:	b80b883a 	mov	r5,r23
  8032a4:	9809883a 	mov	r4,r19
  8032a8:	0808bd80 	call	808bd8 <__sprint_r>
  8032ac:	103c501e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  8032b0:	d8c02017 	ldw	r3,128(sp)
  8032b4:	d8801f17 	ldw	r2,124(sp)
  8032b8:	da000404 	addi	r8,sp,16
  8032bc:	003fee06 	br	803278 <__alt_mem_onchip_mem+0xff7fb278>
  8032c0:	d9002c17 	ldw	r4,176(sp)
  8032c4:	d9801e04 	addi	r6,sp,120
  8032c8:	b80b883a 	mov	r5,r23
  8032cc:	0808bd80 	call	808bd8 <__sprint_r>
  8032d0:	103c471e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  8032d4:	d8c02017 	ldw	r3,128(sp)
  8032d8:	df002787 	ldb	fp,158(sp)
  8032dc:	da000404 	addi	r8,sp,16
  8032e0:	003d5606 	br	80283c <__alt_mem_onchip_mem+0xff7fa83c>
  8032e4:	9080040c 	andi	r2,r18,16
  8032e8:	10016126 	beq	r2,zero,803870 <___vfprintf_internal_r+0x1888>
  8032ec:	d8802d17 	ldw	r2,180(sp)
  8032f0:	14c00017 	ldw	r19,0(r2)
  8032f4:	10800104 	addi	r2,r2,4
  8032f8:	d8802d15 	stw	r2,180(sp)
  8032fc:	982dd7fa 	srai	r22,r19,31
  803300:	b005883a 	mov	r2,r22
  803304:	003c8206 	br	802510 <__alt_mem_onchip_mem+0xff7fa510>
  803308:	9080040c 	andi	r2,r18,16
  80330c:	10003526 	beq	r2,zero,8033e4 <___vfprintf_internal_r+0x13fc>
  803310:	d9402d17 	ldw	r5,180(sp)
  803314:	d8c02917 	ldw	r3,164(sp)
  803318:	d8002785 	stb	zero,158(sp)
  80331c:	28800104 	addi	r2,r5,4
  803320:	2cc00017 	ldw	r19,0(r5)
  803324:	002d883a 	mov	r22,zero
  803328:	18003716 	blt	r3,zero,803408 <___vfprintf_internal_r+0x1420>
  80332c:	00ffdfc4 	movi	r3,-129
  803330:	d8802d15 	stw	r2,180(sp)
  803334:	90e4703a 	and	r18,r18,r3
  803338:	0039883a 	mov	fp,zero
  80333c:	983df326 	beq	r19,zero,802b0c <__alt_mem_onchip_mem+0xff7fab0c>
  803340:	00800244 	movi	r2,9
  803344:	14fc7b36 	bltu	r2,r19,802534 <__alt_mem_onchip_mem+0xff7fa534>
  803348:	d8c02817 	ldw	r3,160(sp)
  80334c:	dc001dc4 	addi	r16,sp,119
  803350:	9cc00c04 	addi	r19,r19,48
  803354:	1c07c83a 	sub	r3,r3,r16
  803358:	dcc01dc5 	stb	r19,119(sp)
  80335c:	d8c02e15 	stw	r3,184(sp)
  803360:	003ce806 	br	802704 <__alt_mem_onchip_mem+0xff7fa704>
  803364:	d8803317 	ldw	r2,204(sp)
  803368:	143fffc4 	addi	r16,r2,-1
  80336c:	043f4d0e 	bge	zero,r16,8030a4 <__alt_mem_onchip_mem+0xff7fb0a4>
  803370:	07000404 	movi	fp,16
  803374:	e400810e 	bge	fp,r16,80357c <___vfprintf_internal_r+0x1594>
  803378:	01402074 	movhi	r5,129
  80337c:	29479284 	addi	r5,r5,7754
  803380:	d9402b15 	stw	r5,172(sp)
  803384:	01c001c4 	movi	r7,7
  803388:	dcc02c17 	ldw	r19,176(sp)
  80338c:	00000306 	br	80339c <___vfprintf_internal_r+0x13b4>
  803390:	b5800204 	addi	r22,r22,8
  803394:	843ffc04 	addi	r16,r16,-16
  803398:	e4007b0e 	bge	fp,r16,803588 <___vfprintf_internal_r+0x15a0>
  80339c:	18c00404 	addi	r3,r3,16
  8033a0:	8c400044 	addi	r17,r17,1
  8033a4:	b5000015 	stw	r20,0(r22)
  8033a8:	b7000115 	stw	fp,4(r22)
  8033ac:	d8c02015 	stw	r3,128(sp)
  8033b0:	dc401f15 	stw	r17,124(sp)
  8033b4:	3c7ff60e 	bge	r7,r17,803390 <__alt_mem_onchip_mem+0xff7fb390>
  8033b8:	d9801e04 	addi	r6,sp,120
  8033bc:	b80b883a 	mov	r5,r23
  8033c0:	9809883a 	mov	r4,r19
  8033c4:	d9c03c15 	stw	r7,240(sp)
  8033c8:	0808bd80 	call	808bd8 <__sprint_r>
  8033cc:	d9c03c17 	ldw	r7,240(sp)
  8033d0:	103c071e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  8033d4:	d8c02017 	ldw	r3,128(sp)
  8033d8:	dc401f17 	ldw	r17,124(sp)
  8033dc:	dd800404 	addi	r22,sp,16
  8033e0:	003fec06 	br	803394 <__alt_mem_onchip_mem+0xff7fb394>
  8033e4:	9080100c 	andi	r2,r18,64
  8033e8:	d8002785 	stb	zero,158(sp)
  8033ec:	10010e26 	beq	r2,zero,803828 <___vfprintf_internal_r+0x1840>
  8033f0:	d9002d17 	ldw	r4,180(sp)
  8033f4:	d9402917 	ldw	r5,164(sp)
  8033f8:	002d883a 	mov	r22,zero
  8033fc:	20800104 	addi	r2,r4,4
  803400:	24c0000b 	ldhu	r19,0(r4)
  803404:	283fc90e 	bge	r5,zero,80332c <__alt_mem_onchip_mem+0xff7fb32c>
  803408:	d8802d15 	stw	r2,180(sp)
  80340c:	0039883a 	mov	fp,zero
  803410:	9d84b03a 	or	r2,r19,r22
  803414:	103c461e 	bne	r2,zero,802530 <__alt_mem_onchip_mem+0xff7fa530>
  803418:	00800044 	movi	r2,1
  80341c:	003e6c06 	br	802dd0 <__alt_mem_onchip_mem+0xff7fadd0>
  803420:	d9002c17 	ldw	r4,176(sp)
  803424:	d9801e04 	addi	r6,sp,120
  803428:	b80b883a 	mov	r5,r23
  80342c:	0808bd80 	call	808bd8 <__sprint_r>
  803430:	103bef1e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  803434:	d8c02017 	ldw	r3,128(sp)
  803438:	da000404 	addi	r8,sp,16
  80343c:	d9003217 	ldw	r4,200(sp)
  803440:	d8802617 	ldw	r2,152(sp)
  803444:	d9403317 	ldw	r5,204(sp)
  803448:	8123883a 	add	r17,r16,r4
  80344c:	11400216 	blt	r2,r5,803458 <___vfprintf_internal_r+0x1470>
  803450:	9100004c 	andi	r4,r18,1
  803454:	20000d26 	beq	r4,zero,80348c <___vfprintf_internal_r+0x14a4>
  803458:	d9003717 	ldw	r4,220(sp)
  80345c:	d9403417 	ldw	r5,208(sp)
  803460:	1907883a 	add	r3,r3,r4
  803464:	d9001f17 	ldw	r4,124(sp)
  803468:	41400015 	stw	r5,0(r8)
  80346c:	d9403717 	ldw	r5,220(sp)
  803470:	21000044 	addi	r4,r4,1
  803474:	d8c02015 	stw	r3,128(sp)
  803478:	41400115 	stw	r5,4(r8)
  80347c:	d9001f15 	stw	r4,124(sp)
  803480:	014001c4 	movi	r5,7
  803484:	2901e816 	blt	r5,r4,803c28 <___vfprintf_internal_r+0x1c40>
  803488:	42000204 	addi	r8,r8,8
  80348c:	d9003317 	ldw	r4,204(sp)
  803490:	8121883a 	add	r16,r16,r4
  803494:	2085c83a 	sub	r2,r4,r2
  803498:	8461c83a 	sub	r16,r16,r17
  80349c:	1400010e 	bge	r2,r16,8034a4 <___vfprintf_internal_r+0x14bc>
  8034a0:	1021883a 	mov	r16,r2
  8034a4:	04000a0e 	bge	zero,r16,8034d0 <___vfprintf_internal_r+0x14e8>
  8034a8:	d9001f17 	ldw	r4,124(sp)
  8034ac:	1c07883a 	add	r3,r3,r16
  8034b0:	44400015 	stw	r17,0(r8)
  8034b4:	21000044 	addi	r4,r4,1
  8034b8:	44000115 	stw	r16,4(r8)
  8034bc:	d8c02015 	stw	r3,128(sp)
  8034c0:	d9001f15 	stw	r4,124(sp)
  8034c4:	014001c4 	movi	r5,7
  8034c8:	2901fb16 	blt	r5,r4,803cb8 <___vfprintf_internal_r+0x1cd0>
  8034cc:	42000204 	addi	r8,r8,8
  8034d0:	8001f716 	blt	r16,zero,803cb0 <___vfprintf_internal_r+0x1cc8>
  8034d4:	1421c83a 	sub	r16,r2,r16
  8034d8:	043d380e 	bge	zero,r16,8029bc <__alt_mem_onchip_mem+0xff7fa9bc>
  8034dc:	04400404 	movi	r17,16
  8034e0:	d8801f17 	ldw	r2,124(sp)
  8034e4:	8c3efb0e 	bge	r17,r16,8030d4 <__alt_mem_onchip_mem+0xff7fb0d4>
  8034e8:	01402074 	movhi	r5,129
  8034ec:	29479284 	addi	r5,r5,7754
  8034f0:	d9402b15 	stw	r5,172(sp)
  8034f4:	058001c4 	movi	r22,7
  8034f8:	dcc02c17 	ldw	r19,176(sp)
  8034fc:	00000306 	br	80350c <___vfprintf_internal_r+0x1524>
  803500:	42000204 	addi	r8,r8,8
  803504:	843ffc04 	addi	r16,r16,-16
  803508:	8c3ef50e 	bge	r17,r16,8030e0 <__alt_mem_onchip_mem+0xff7fb0e0>
  80350c:	18c00404 	addi	r3,r3,16
  803510:	10800044 	addi	r2,r2,1
  803514:	45000015 	stw	r20,0(r8)
  803518:	44400115 	stw	r17,4(r8)
  80351c:	d8c02015 	stw	r3,128(sp)
  803520:	d8801f15 	stw	r2,124(sp)
  803524:	b0bff60e 	bge	r22,r2,803500 <__alt_mem_onchip_mem+0xff7fb500>
  803528:	d9801e04 	addi	r6,sp,120
  80352c:	b80b883a 	mov	r5,r23
  803530:	9809883a 	mov	r4,r19
  803534:	0808bd80 	call	808bd8 <__sprint_r>
  803538:	103bad1e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  80353c:	d8c02017 	ldw	r3,128(sp)
  803540:	d8801f17 	ldw	r2,124(sp)
  803544:	da000404 	addi	r8,sp,16
  803548:	003fee06 	br	803504 <__alt_mem_onchip_mem+0xff7fb504>
  80354c:	9088703a 	and	r4,r18,r2
  803550:	203eab1e 	bne	r4,zero,803000 <__alt_mem_onchip_mem+0xff7fb000>
  803554:	dc401f17 	ldw	r17,124(sp)
  803558:	40800115 	stw	r2,4(r8)
  80355c:	44000015 	stw	r16,0(r8)
  803560:	8c400044 	addi	r17,r17,1
  803564:	d8c02015 	stw	r3,128(sp)
  803568:	dc401f15 	stw	r17,124(sp)
  80356c:	008001c4 	movi	r2,7
  803570:	14400e16 	blt	r2,r17,8035ac <___vfprintf_internal_r+0x15c4>
  803574:	45800204 	addi	r22,r8,8
  803578:	003eca06 	br	8030a4 <__alt_mem_onchip_mem+0xff7fb0a4>
  80357c:	01002074 	movhi	r4,129
  803580:	21079284 	addi	r4,r4,7754
  803584:	d9002b15 	stw	r4,172(sp)
  803588:	d8802b17 	ldw	r2,172(sp)
  80358c:	1c07883a 	add	r3,r3,r16
  803590:	8c400044 	addi	r17,r17,1
  803594:	b0800015 	stw	r2,0(r22)
  803598:	b4000115 	stw	r16,4(r22)
  80359c:	d8c02015 	stw	r3,128(sp)
  8035a0:	dc401f15 	stw	r17,124(sp)
  8035a4:	008001c4 	movi	r2,7
  8035a8:	147ebd0e 	bge	r2,r17,8030a0 <__alt_mem_onchip_mem+0xff7fb0a0>
  8035ac:	d9002c17 	ldw	r4,176(sp)
  8035b0:	d9801e04 	addi	r6,sp,120
  8035b4:	b80b883a 	mov	r5,r23
  8035b8:	0808bd80 	call	808bd8 <__sprint_r>
  8035bc:	103b8c1e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  8035c0:	d8c02017 	ldw	r3,128(sp)
  8035c4:	dc401f17 	ldw	r17,124(sp)
  8035c8:	dd800404 	addi	r22,sp,16
  8035cc:	003eb506 	br	8030a4 <__alt_mem_onchip_mem+0xff7fb0a4>
  8035d0:	d9002c17 	ldw	r4,176(sp)
  8035d4:	d9801e04 	addi	r6,sp,120
  8035d8:	b80b883a 	mov	r5,r23
  8035dc:	0808bd80 	call	808bd8 <__sprint_r>
  8035e0:	103b831e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  8035e4:	d8c02017 	ldw	r3,128(sp)
  8035e8:	dc401f17 	ldw	r17,124(sp)
  8035ec:	da000404 	addi	r8,sp,16
  8035f0:	003e8d06 	br	803028 <__alt_mem_onchip_mem+0xff7fb028>
  8035f4:	d9002c17 	ldw	r4,176(sp)
  8035f8:	d9801e04 	addi	r6,sp,120
  8035fc:	b80b883a 	mov	r5,r23
  803600:	0808bd80 	call	808bd8 <__sprint_r>
  803604:	103b7a1e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  803608:	d8c02017 	ldw	r3,128(sp)
  80360c:	dc401f17 	ldw	r17,124(sp)
  803610:	dd800404 	addi	r22,sp,16
  803614:	003e8f06 	br	803054 <__alt_mem_onchip_mem+0xff7fb054>
  803618:	0027883a 	mov	r19,zero
  80361c:	003f4a06 	br	803348 <__alt_mem_onchip_mem+0xff7fb348>
  803620:	d9002c17 	ldw	r4,176(sp)
  803624:	d9801e04 	addi	r6,sp,120
  803628:	b80b883a 	mov	r5,r23
  80362c:	0808bd80 	call	808bd8 <__sprint_r>
  803630:	103b6f1e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  803634:	d8c02017 	ldw	r3,128(sp)
  803638:	da000404 	addi	r8,sp,16
  80363c:	003c9d06 	br	8028b4 <__alt_mem_onchip_mem+0xff7fa8b4>
  803640:	04e7c83a 	sub	r19,zero,r19
  803644:	9804c03a 	cmpne	r2,r19,zero
  803648:	05adc83a 	sub	r22,zero,r22
  80364c:	b0adc83a 	sub	r22,r22,r2
  803650:	d8802917 	ldw	r2,164(sp)
  803654:	07000b44 	movi	fp,45
  803658:	df002785 	stb	fp,158(sp)
  80365c:	10017b16 	blt	r2,zero,803c4c <___vfprintf_internal_r+0x1c64>
  803660:	00bfdfc4 	movi	r2,-129
  803664:	90a4703a 	and	r18,r18,r2
  803668:	003bb106 	br	802530 <__alt_mem_onchip_mem+0xff7fa530>
  80366c:	d9003617 	ldw	r4,216(sp)
  803670:	d9403817 	ldw	r5,224(sp)
  803674:	da003d15 	stw	r8,244(sp)
  803678:	080898c0 	call	80898c <__fpclassifyd>
  80367c:	da003d17 	ldw	r8,244(sp)
  803680:	1000f026 	beq	r2,zero,803a44 <___vfprintf_internal_r+0x1a5c>
  803684:	d9002917 	ldw	r4,164(sp)
  803688:	05bff7c4 	movi	r22,-33
  80368c:	00bfffc4 	movi	r2,-1
  803690:	8dac703a 	and	r22,r17,r22
  803694:	20820026 	beq	r4,r2,803e98 <___vfprintf_internal_r+0x1eb0>
  803698:	008011c4 	movi	r2,71
  80369c:	b081f726 	beq	r22,r2,803e7c <___vfprintf_internal_r+0x1e94>
  8036a0:	d9003817 	ldw	r4,224(sp)
  8036a4:	90c04014 	ori	r3,r18,256
  8036a8:	d8c02b15 	stw	r3,172(sp)
  8036ac:	20021516 	blt	r4,zero,803f04 <___vfprintf_internal_r+0x1f1c>
  8036b0:	dcc03817 	ldw	r19,224(sp)
  8036b4:	d8002a05 	stb	zero,168(sp)
  8036b8:	00801984 	movi	r2,102
  8036bc:	8881f926 	beq	r17,r2,803ea4 <___vfprintf_internal_r+0x1ebc>
  8036c0:	00801184 	movi	r2,70
  8036c4:	88821c26 	beq	r17,r2,803f38 <___vfprintf_internal_r+0x1f50>
  8036c8:	00801144 	movi	r2,69
  8036cc:	b081ef26 	beq	r22,r2,803e8c <___vfprintf_internal_r+0x1ea4>
  8036d0:	d8c02917 	ldw	r3,164(sp)
  8036d4:	d8802104 	addi	r2,sp,132
  8036d8:	d8800315 	stw	r2,12(sp)
  8036dc:	d9403617 	ldw	r5,216(sp)
  8036e0:	d8802504 	addi	r2,sp,148
  8036e4:	d9002c17 	ldw	r4,176(sp)
  8036e8:	d8800215 	stw	r2,8(sp)
  8036ec:	d8802604 	addi	r2,sp,152
  8036f0:	d8c00015 	stw	r3,0(sp)
  8036f4:	d8800115 	stw	r2,4(sp)
  8036f8:	01c00084 	movi	r7,2
  8036fc:	980d883a 	mov	r6,r19
  803700:	d8c03c15 	stw	r3,240(sp)
  803704:	da003d15 	stw	r8,244(sp)
  803708:	08046c00 	call	8046c0 <_dtoa_r>
  80370c:	1021883a 	mov	r16,r2
  803710:	008019c4 	movi	r2,103
  803714:	d8c03c17 	ldw	r3,240(sp)
  803718:	da003d17 	ldw	r8,244(sp)
  80371c:	88817126 	beq	r17,r2,803ce4 <___vfprintf_internal_r+0x1cfc>
  803720:	008011c4 	movi	r2,71
  803724:	88829226 	beq	r17,r2,804170 <___vfprintf_internal_r+0x2188>
  803728:	80f9883a 	add	fp,r16,r3
  80372c:	d9003617 	ldw	r4,216(sp)
  803730:	000d883a 	mov	r6,zero
  803734:	000f883a 	mov	r7,zero
  803738:	980b883a 	mov	r5,r19
  80373c:	da003d15 	stw	r8,244(sp)
  803740:	080c62c0 	call	80c62c <__eqdf2>
  803744:	da003d17 	ldw	r8,244(sp)
  803748:	10018d26 	beq	r2,zero,803d80 <___vfprintf_internal_r+0x1d98>
  80374c:	d8802117 	ldw	r2,132(sp)
  803750:	1700062e 	bgeu	r2,fp,80376c <___vfprintf_internal_r+0x1784>
  803754:	01000c04 	movi	r4,48
  803758:	10c00044 	addi	r3,r2,1
  80375c:	d8c02115 	stw	r3,132(sp)
  803760:	11000005 	stb	r4,0(r2)
  803764:	d8802117 	ldw	r2,132(sp)
  803768:	173ffb36 	bltu	r2,fp,803758 <__alt_mem_onchip_mem+0xff7fb758>
  80376c:	1405c83a 	sub	r2,r2,r16
  803770:	d8803315 	stw	r2,204(sp)
  803774:	008011c4 	movi	r2,71
  803778:	b0817626 	beq	r22,r2,803d54 <___vfprintf_internal_r+0x1d6c>
  80377c:	00801944 	movi	r2,101
  803780:	1442810e 	bge	r2,r17,804188 <___vfprintf_internal_r+0x21a0>
  803784:	d8c02617 	ldw	r3,152(sp)
  803788:	00801984 	movi	r2,102
  80378c:	d8c03215 	stw	r3,200(sp)
  803790:	8881fe26 	beq	r17,r2,803f8c <___vfprintf_internal_r+0x1fa4>
  803794:	d8c03217 	ldw	r3,200(sp)
  803798:	d9003317 	ldw	r4,204(sp)
  80379c:	1901dd16 	blt	r3,r4,803f14 <___vfprintf_internal_r+0x1f2c>
  8037a0:	9480004c 	andi	r18,r18,1
  8037a4:	90022b1e 	bne	r18,zero,804054 <___vfprintf_internal_r+0x206c>
  8037a8:	1805883a 	mov	r2,r3
  8037ac:	18028016 	blt	r3,zero,8041b0 <___vfprintf_internal_r+0x21c8>
  8037b0:	d8c03217 	ldw	r3,200(sp)
  8037b4:	044019c4 	movi	r17,103
  8037b8:	d8c02e15 	stw	r3,184(sp)
  8037bc:	df002a07 	ldb	fp,168(sp)
  8037c0:	e001531e 	bne	fp,zero,803d10 <___vfprintf_internal_r+0x1d28>
  8037c4:	df002783 	ldbu	fp,158(sp)
  8037c8:	d8802a15 	stw	r2,168(sp)
  8037cc:	dc802b17 	ldw	r18,172(sp)
  8037d0:	d8002915 	stw	zero,164(sp)
  8037d4:	003bd106 	br	80271c <__alt_mem_onchip_mem+0xff7fa71c>
  8037d8:	d8802d17 	ldw	r2,180(sp)
  8037dc:	d8c02d17 	ldw	r3,180(sp)
  8037e0:	d9002d17 	ldw	r4,180(sp)
  8037e4:	10800017 	ldw	r2,0(r2)
  8037e8:	18c00117 	ldw	r3,4(r3)
  8037ec:	21000204 	addi	r4,r4,8
  8037f0:	d8803615 	stw	r2,216(sp)
  8037f4:	d8c03815 	stw	r3,224(sp)
  8037f8:	d9002d15 	stw	r4,180(sp)
  8037fc:	003b7506 	br	8025d4 <__alt_mem_onchip_mem+0xff7fa5d4>
  803800:	ac400007 	ldb	r17,0(r21)
  803804:	003a5906 	br	80216c <__alt_mem_onchip_mem+0xff7fa16c>
  803808:	9080100c 	andi	r2,r18,64
  80380c:	1000a826 	beq	r2,zero,803ab0 <___vfprintf_internal_r+0x1ac8>
  803810:	d9002d17 	ldw	r4,180(sp)
  803814:	002d883a 	mov	r22,zero
  803818:	24c0000b 	ldhu	r19,0(r4)
  80381c:	21000104 	addi	r4,r4,4
  803820:	d9002d15 	stw	r4,180(sp)
  803824:	003ccb06 	br	802b54 <__alt_mem_onchip_mem+0xff7fab54>
  803828:	d8c02d17 	ldw	r3,180(sp)
  80382c:	d9002917 	ldw	r4,164(sp)
  803830:	002d883a 	mov	r22,zero
  803834:	18800104 	addi	r2,r3,4
  803838:	1cc00017 	ldw	r19,0(r3)
  80383c:	203ebb0e 	bge	r4,zero,80332c <__alt_mem_onchip_mem+0xff7fb32c>
  803840:	003ef106 	br	803408 <__alt_mem_onchip_mem+0xff7fb408>
  803844:	9080040c 	andi	r2,r18,16
  803848:	1000921e 	bne	r2,zero,803a94 <___vfprintf_internal_r+0x1aac>
  80384c:	9480100c 	andi	r18,r18,64
  803850:	90013926 	beq	r18,zero,803d38 <___vfprintf_internal_r+0x1d50>
  803854:	d9002d17 	ldw	r4,180(sp)
  803858:	d9402f17 	ldw	r5,188(sp)
  80385c:	20800017 	ldw	r2,0(r4)
  803860:	21000104 	addi	r4,r4,4
  803864:	d9002d15 	stw	r4,180(sp)
  803868:	1140000d 	sth	r5,0(r2)
  80386c:	003a1606 	br	8020c8 <__alt_mem_onchip_mem+0xff7fa0c8>
  803870:	9080100c 	andi	r2,r18,64
  803874:	10008026 	beq	r2,zero,803a78 <___vfprintf_internal_r+0x1a90>
  803878:	d8c02d17 	ldw	r3,180(sp)
  80387c:	1cc0000f 	ldh	r19,0(r3)
  803880:	18c00104 	addi	r3,r3,4
  803884:	d8c02d15 	stw	r3,180(sp)
  803888:	982dd7fa 	srai	r22,r19,31
  80388c:	b005883a 	mov	r2,r22
  803890:	003b1f06 	br	802510 <__alt_mem_onchip_mem+0xff7fa510>
  803894:	9080100c 	andi	r2,r18,64
  803898:	d8002785 	stb	zero,158(sp)
  80389c:	10008a1e 	bne	r2,zero,803ac8 <___vfprintf_internal_r+0x1ae0>
  8038a0:	d9402d17 	ldw	r5,180(sp)
  8038a4:	d8c02917 	ldw	r3,164(sp)
  8038a8:	002d883a 	mov	r22,zero
  8038ac:	28800104 	addi	r2,r5,4
  8038b0:	2cc00017 	ldw	r19,0(r5)
  8038b4:	183e4b0e 	bge	r3,zero,8031e4 <__alt_mem_onchip_mem+0xff7fb1e4>
  8038b8:	9d86b03a 	or	r3,r19,r22
  8038bc:	d8802d15 	stw	r2,180(sp)
  8038c0:	183e4c1e 	bne	r3,zero,8031f4 <__alt_mem_onchip_mem+0xff7fb1f4>
  8038c4:	0039883a 	mov	fp,zero
  8038c8:	0005883a 	mov	r2,zero
  8038cc:	003d4006 	br	802dd0 <__alt_mem_onchip_mem+0xff7fadd0>
  8038d0:	01402074 	movhi	r5,129
  8038d4:	29479284 	addi	r5,r5,7754
  8038d8:	d9402b15 	stw	r5,172(sp)
  8038dc:	d9402b17 	ldw	r5,172(sp)
  8038e0:	1c47883a 	add	r3,r3,r17
  8038e4:	10800044 	addi	r2,r2,1
  8038e8:	41400015 	stw	r5,0(r8)
  8038ec:	44400115 	stw	r17,4(r8)
  8038f0:	d8c02015 	stw	r3,128(sp)
  8038f4:	d8801f15 	stw	r2,124(sp)
  8038f8:	010001c4 	movi	r4,7
  8038fc:	20bec816 	blt	r4,r2,803420 <__alt_mem_onchip_mem+0xff7fb420>
  803900:	42000204 	addi	r8,r8,8
  803904:	003ecd06 	br	80343c <__alt_mem_onchip_mem+0xff7fb43c>
  803908:	d9002917 	ldw	r4,164(sp)
  80390c:	d8002785 	stb	zero,158(sp)
  803910:	203d2d16 	blt	r4,zero,802dc8 <__alt_mem_onchip_mem+0xff7fadc8>
  803914:	00bfdfc4 	movi	r2,-129
  803918:	90a4703a 	and	r18,r18,r2
  80391c:	003a9106 	br	802364 <__alt_mem_onchip_mem+0xff7fa364>
  803920:	01002074 	movhi	r4,129
  803924:	21079284 	addi	r4,r4,7754
  803928:	d9002b15 	stw	r4,172(sp)
  80392c:	003c0c06 	br	802960 <__alt_mem_onchip_mem+0xff7fa960>
  803930:	d9002c17 	ldw	r4,176(sp)
  803934:	d9801e04 	addi	r6,sp,120
  803938:	b80b883a 	mov	r5,r23
  80393c:	0808bd80 	call	808bd8 <__sprint_r>
  803940:	103aab1e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  803944:	d8c02017 	ldw	r3,128(sp)
  803948:	da000404 	addi	r8,sp,16
  80394c:	003d4106 	br	802e54 <__alt_mem_onchip_mem+0xff7fae54>
  803950:	d8801f17 	ldw	r2,124(sp)
  803954:	01402074 	movhi	r5,129
  803958:	01000044 	movi	r4,1
  80395c:	18c00044 	addi	r3,r3,1
  803960:	10800044 	addi	r2,r2,1
  803964:	29479204 	addi	r5,r5,7752
  803968:	41000115 	stw	r4,4(r8)
  80396c:	41400015 	stw	r5,0(r8)
  803970:	d8c02015 	stw	r3,128(sp)
  803974:	d8801f15 	stw	r2,124(sp)
  803978:	010001c4 	movi	r4,7
  80397c:	20805c16 	blt	r4,r2,803af0 <___vfprintf_internal_r+0x1b08>
  803980:	42000204 	addi	r8,r8,8
  803984:	8800041e 	bne	r17,zero,803998 <___vfprintf_internal_r+0x19b0>
  803988:	d8803317 	ldw	r2,204(sp)
  80398c:	1000021e 	bne	r2,zero,803998 <___vfprintf_internal_r+0x19b0>
  803990:	9080004c 	andi	r2,r18,1
  803994:	103c0926 	beq	r2,zero,8029bc <__alt_mem_onchip_mem+0xff7fa9bc>
  803998:	d9003717 	ldw	r4,220(sp)
  80399c:	d8801f17 	ldw	r2,124(sp)
  8039a0:	d9403417 	ldw	r5,208(sp)
  8039a4:	20c7883a 	add	r3,r4,r3
  8039a8:	10800044 	addi	r2,r2,1
  8039ac:	41000115 	stw	r4,4(r8)
  8039b0:	41400015 	stw	r5,0(r8)
  8039b4:	d8c02015 	stw	r3,128(sp)
  8039b8:	d8801f15 	stw	r2,124(sp)
  8039bc:	010001c4 	movi	r4,7
  8039c0:	20812116 	blt	r4,r2,803e48 <___vfprintf_internal_r+0x1e60>
  8039c4:	42000204 	addi	r8,r8,8
  8039c8:	0463c83a 	sub	r17,zero,r17
  8039cc:	0440730e 	bge	zero,r17,803b9c <___vfprintf_internal_r+0x1bb4>
  8039d0:	05800404 	movi	r22,16
  8039d4:	b440860e 	bge	r22,r17,803bf0 <___vfprintf_internal_r+0x1c08>
  8039d8:	01402074 	movhi	r5,129
  8039dc:	29479284 	addi	r5,r5,7754
  8039e0:	d9402b15 	stw	r5,172(sp)
  8039e4:	070001c4 	movi	fp,7
  8039e8:	dcc02c17 	ldw	r19,176(sp)
  8039ec:	00000306 	br	8039fc <___vfprintf_internal_r+0x1a14>
  8039f0:	42000204 	addi	r8,r8,8
  8039f4:	8c7ffc04 	addi	r17,r17,-16
  8039f8:	b440800e 	bge	r22,r17,803bfc <___vfprintf_internal_r+0x1c14>
  8039fc:	18c00404 	addi	r3,r3,16
  803a00:	10800044 	addi	r2,r2,1
  803a04:	45000015 	stw	r20,0(r8)
  803a08:	45800115 	stw	r22,4(r8)
  803a0c:	d8c02015 	stw	r3,128(sp)
  803a10:	d8801f15 	stw	r2,124(sp)
  803a14:	e0bff60e 	bge	fp,r2,8039f0 <__alt_mem_onchip_mem+0xff7fb9f0>
  803a18:	d9801e04 	addi	r6,sp,120
  803a1c:	b80b883a 	mov	r5,r23
  803a20:	9809883a 	mov	r4,r19
  803a24:	0808bd80 	call	808bd8 <__sprint_r>
  803a28:	103a711e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  803a2c:	d8c02017 	ldw	r3,128(sp)
  803a30:	d8801f17 	ldw	r2,124(sp)
  803a34:	da000404 	addi	r8,sp,16
  803a38:	003fee06 	br	8039f4 <__alt_mem_onchip_mem+0xff7fb9f4>
  803a3c:	00bfffc4 	movi	r2,-1
  803a40:	003a6f06 	br	802400 <__alt_mem_onchip_mem+0xff7fa400>
  803a44:	008011c4 	movi	r2,71
  803a48:	1440b816 	blt	r2,r17,803d2c <___vfprintf_internal_r+0x1d44>
  803a4c:	04002074 	movhi	r16,129
  803a50:	84078404 	addi	r16,r16,7696
  803a54:	00c000c4 	movi	r3,3
  803a58:	00bfdfc4 	movi	r2,-129
  803a5c:	d8c02a15 	stw	r3,168(sp)
  803a60:	90a4703a 	and	r18,r18,r2
  803a64:	df002783 	ldbu	fp,158(sp)
  803a68:	d8c02e15 	stw	r3,184(sp)
  803a6c:	d8002915 	stw	zero,164(sp)
  803a70:	d8003215 	stw	zero,200(sp)
  803a74:	003b2906 	br	80271c <__alt_mem_onchip_mem+0xff7fa71c>
  803a78:	d9002d17 	ldw	r4,180(sp)
  803a7c:	24c00017 	ldw	r19,0(r4)
  803a80:	21000104 	addi	r4,r4,4
  803a84:	d9002d15 	stw	r4,180(sp)
  803a88:	982dd7fa 	srai	r22,r19,31
  803a8c:	b005883a 	mov	r2,r22
  803a90:	003a9f06 	br	802510 <__alt_mem_onchip_mem+0xff7fa510>
  803a94:	d9402d17 	ldw	r5,180(sp)
  803a98:	d8c02f17 	ldw	r3,188(sp)
  803a9c:	28800017 	ldw	r2,0(r5)
  803aa0:	29400104 	addi	r5,r5,4
  803aa4:	d9402d15 	stw	r5,180(sp)
  803aa8:	10c00015 	stw	r3,0(r2)
  803aac:	00398606 	br	8020c8 <__alt_mem_onchip_mem+0xff7fa0c8>
  803ab0:	d9402d17 	ldw	r5,180(sp)
  803ab4:	002d883a 	mov	r22,zero
  803ab8:	2cc00017 	ldw	r19,0(r5)
  803abc:	29400104 	addi	r5,r5,4
  803ac0:	d9402d15 	stw	r5,180(sp)
  803ac4:	003c2306 	br	802b54 <__alt_mem_onchip_mem+0xff7fab54>
  803ac8:	d8c02d17 	ldw	r3,180(sp)
  803acc:	d9002917 	ldw	r4,164(sp)
  803ad0:	002d883a 	mov	r22,zero
  803ad4:	18800104 	addi	r2,r3,4
  803ad8:	1cc0000b 	ldhu	r19,0(r3)
  803adc:	203dc10e 	bge	r4,zero,8031e4 <__alt_mem_onchip_mem+0xff7fb1e4>
  803ae0:	003f7506 	br	8038b8 <__alt_mem_onchip_mem+0xff7fb8b8>
  803ae4:	04002074 	movhi	r16,129
  803ae8:	84078204 	addi	r16,r16,7688
  803aec:	003acc06 	br	802620 <__alt_mem_onchip_mem+0xff7fa620>
  803af0:	d9002c17 	ldw	r4,176(sp)
  803af4:	d9801e04 	addi	r6,sp,120
  803af8:	b80b883a 	mov	r5,r23
  803afc:	0808bd80 	call	808bd8 <__sprint_r>
  803b00:	103a3b1e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  803b04:	dc402617 	ldw	r17,152(sp)
  803b08:	d8c02017 	ldw	r3,128(sp)
  803b0c:	da000404 	addi	r8,sp,16
  803b10:	003f9c06 	br	803984 <__alt_mem_onchip_mem+0xff7fb984>
  803b14:	ac400043 	ldbu	r17,1(r21)
  803b18:	94800814 	ori	r18,r18,32
  803b1c:	ad400044 	addi	r21,r21,1
  803b20:	8c403fcc 	andi	r17,r17,255
  803b24:	8c40201c 	xori	r17,r17,128
  803b28:	8c7fe004 	addi	r17,r17,-128
  803b2c:	00398f06 	br	80216c <__alt_mem_onchip_mem+0xff7fa16c>
  803b30:	d8c02d15 	stw	r3,180(sp)
  803b34:	0039883a 	mov	fp,zero
  803b38:	003e3506 	br	803410 <__alt_mem_onchip_mem+0xff7fb410>
  803b3c:	d9002c17 	ldw	r4,176(sp)
  803b40:	d9801e04 	addi	r6,sp,120
  803b44:	b80b883a 	mov	r5,r23
  803b48:	0808bd80 	call	808bd8 <__sprint_r>
  803b4c:	103a281e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  803b50:	d8c02017 	ldw	r3,128(sp)
  803b54:	da000404 	addi	r8,sp,16
  803b58:	003cd006 	br	802e9c <__alt_mem_onchip_mem+0xff7fae9c>
  803b5c:	8009883a 	mov	r4,r16
  803b60:	da003d15 	stw	r8,244(sp)
  803b64:	0801f500 	call	801f50 <strlen>
  803b68:	d8802e15 	stw	r2,184(sp)
  803b6c:	da003d17 	ldw	r8,244(sp)
  803b70:	103c340e 	bge	r2,zero,802c44 <__alt_mem_onchip_mem+0xff7fac44>
  803b74:	0005883a 	mov	r2,zero
  803b78:	003c3206 	br	802c44 <__alt_mem_onchip_mem+0xff7fac44>
  803b7c:	d9002c17 	ldw	r4,176(sp)
  803b80:	d9801e04 	addi	r6,sp,120
  803b84:	b80b883a 	mov	r5,r23
  803b88:	0808bd80 	call	808bd8 <__sprint_r>
  803b8c:	103a181e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  803b90:	d8c02017 	ldw	r3,128(sp)
  803b94:	d8801f17 	ldw	r2,124(sp)
  803b98:	da000404 	addi	r8,sp,16
  803b9c:	d9403317 	ldw	r5,204(sp)
  803ba0:	10800044 	addi	r2,r2,1
  803ba4:	44000015 	stw	r16,0(r8)
  803ba8:	28c7883a 	add	r3,r5,r3
  803bac:	003b7d06 	br	8029a4 <__alt_mem_onchip_mem+0xff7fa9a4>
  803bb0:	01002074 	movhi	r4,129
  803bb4:	21079684 	addi	r4,r4,7770
  803bb8:	d9003515 	stw	r4,212(sp)
  803bbc:	003b1406 	br	802810 <__alt_mem_onchip_mem+0xff7fa810>
  803bc0:	013fffc4 	movi	r4,-1
  803bc4:	003a3506 	br	80249c <__alt_mem_onchip_mem+0xff7fa49c>
  803bc8:	0023883a 	mov	r17,zero
  803bcc:	003d9d06 	br	803244 <__alt_mem_onchip_mem+0xff7fb244>
  803bd0:	d9002c17 	ldw	r4,176(sp)
  803bd4:	d9801e04 	addi	r6,sp,120
  803bd8:	b80b883a 	mov	r5,r23
  803bdc:	0808bd80 	call	808bd8 <__sprint_r>
  803be0:	103a031e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  803be4:	d8c02017 	ldw	r3,128(sp)
  803be8:	da000404 	addi	r8,sp,16
  803bec:	003d9406 	br	803240 <__alt_mem_onchip_mem+0xff7fb240>
  803bf0:	01002074 	movhi	r4,129
  803bf4:	21079284 	addi	r4,r4,7754
  803bf8:	d9002b15 	stw	r4,172(sp)
  803bfc:	d9002b17 	ldw	r4,172(sp)
  803c00:	1c47883a 	add	r3,r3,r17
  803c04:	10800044 	addi	r2,r2,1
  803c08:	41000015 	stw	r4,0(r8)
  803c0c:	44400115 	stw	r17,4(r8)
  803c10:	d8c02015 	stw	r3,128(sp)
  803c14:	d8801f15 	stw	r2,124(sp)
  803c18:	010001c4 	movi	r4,7
  803c1c:	20bfd716 	blt	r4,r2,803b7c <__alt_mem_onchip_mem+0xff7fbb7c>
  803c20:	42000204 	addi	r8,r8,8
  803c24:	003fdd06 	br	803b9c <__alt_mem_onchip_mem+0xff7fbb9c>
  803c28:	d9002c17 	ldw	r4,176(sp)
  803c2c:	d9801e04 	addi	r6,sp,120
  803c30:	b80b883a 	mov	r5,r23
  803c34:	0808bd80 	call	808bd8 <__sprint_r>
  803c38:	1039ed1e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  803c3c:	d8802617 	ldw	r2,152(sp)
  803c40:	d8c02017 	ldw	r3,128(sp)
  803c44:	da000404 	addi	r8,sp,16
  803c48:	003e1006 	br	80348c <__alt_mem_onchip_mem+0xff7fb48c>
  803c4c:	00800044 	movi	r2,1
  803c50:	10803fcc 	andi	r2,r2,255
  803c54:	00c00044 	movi	r3,1
  803c58:	10fa3526 	beq	r2,r3,802530 <__alt_mem_onchip_mem+0xff7fa530>
  803c5c:	00c00084 	movi	r3,2
  803c60:	10fbcb26 	beq	r2,r3,802b90 <__alt_mem_onchip_mem+0xff7fab90>
  803c64:	003a8f06 	br	8026a4 <__alt_mem_onchip_mem+0xff7fa6a4>
  803c68:	01002074 	movhi	r4,129
  803c6c:	21079684 	addi	r4,r4,7770
  803c70:	d9003515 	stw	r4,212(sp)
  803c74:	003b7606 	br	802a50 <__alt_mem_onchip_mem+0xff7faa50>
  803c78:	d8802917 	ldw	r2,164(sp)
  803c7c:	00c00184 	movi	r3,6
  803c80:	1880012e 	bgeu	r3,r2,803c88 <___vfprintf_internal_r+0x1ca0>
  803c84:	1805883a 	mov	r2,r3
  803c88:	d8802e15 	stw	r2,184(sp)
  803c8c:	1000ef16 	blt	r2,zero,80404c <___vfprintf_internal_r+0x2064>
  803c90:	04002074 	movhi	r16,129
  803c94:	d8802a15 	stw	r2,168(sp)
  803c98:	dcc02d15 	stw	r19,180(sp)
  803c9c:	d8002915 	stw	zero,164(sp)
  803ca0:	d8003215 	stw	zero,200(sp)
  803ca4:	84079004 	addi	r16,r16,7744
  803ca8:	0039883a 	mov	fp,zero
  803cac:	003aa206 	br	802738 <__alt_mem_onchip_mem+0xff7fa738>
  803cb0:	0021883a 	mov	r16,zero
  803cb4:	003e0706 	br	8034d4 <__alt_mem_onchip_mem+0xff7fb4d4>
  803cb8:	d9002c17 	ldw	r4,176(sp)
  803cbc:	d9801e04 	addi	r6,sp,120
  803cc0:	b80b883a 	mov	r5,r23
  803cc4:	0808bd80 	call	808bd8 <__sprint_r>
  803cc8:	1039c91e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  803ccc:	d8802617 	ldw	r2,152(sp)
  803cd0:	d9403317 	ldw	r5,204(sp)
  803cd4:	d8c02017 	ldw	r3,128(sp)
  803cd8:	da000404 	addi	r8,sp,16
  803cdc:	2885c83a 	sub	r2,r5,r2
  803ce0:	003dfb06 	br	8034d0 <__alt_mem_onchip_mem+0xff7fb4d0>
  803ce4:	9080004c 	andi	r2,r18,1
  803ce8:	103e8f1e 	bne	r2,zero,803728 <__alt_mem_onchip_mem+0xff7fb728>
  803cec:	d8802117 	ldw	r2,132(sp)
  803cf0:	003e9e06 	br	80376c <__alt_mem_onchip_mem+0xff7fb76c>
  803cf4:	1025883a 	mov	r18,r2
  803cf8:	0039883a 	mov	fp,zero
  803cfc:	00800084 	movi	r2,2
  803d00:	003fd306 	br	803c50 <__alt_mem_onchip_mem+0xff7fbc50>
  803d04:	07000b44 	movi	fp,45
  803d08:	df002785 	stb	fp,158(sp)
  803d0c:	003a4006 	br	802610 <__alt_mem_onchip_mem+0xff7fa610>
  803d10:	00c00b44 	movi	r3,45
  803d14:	d8c02785 	stb	r3,158(sp)
  803d18:	d8802a15 	stw	r2,168(sp)
  803d1c:	dc802b17 	ldw	r18,172(sp)
  803d20:	d8002915 	stw	zero,164(sp)
  803d24:	07000b44 	movi	fp,45
  803d28:	003a8006 	br	80272c <__alt_mem_onchip_mem+0xff7fa72c>
  803d2c:	04002074 	movhi	r16,129
  803d30:	84078504 	addi	r16,r16,7700
  803d34:	003f4706 	br	803a54 <__alt_mem_onchip_mem+0xff7fba54>
  803d38:	d8c02d17 	ldw	r3,180(sp)
  803d3c:	d9002f17 	ldw	r4,188(sp)
  803d40:	18800017 	ldw	r2,0(r3)
  803d44:	18c00104 	addi	r3,r3,4
  803d48:	d8c02d15 	stw	r3,180(sp)
  803d4c:	11000015 	stw	r4,0(r2)
  803d50:	0038dd06 	br	8020c8 <__alt_mem_onchip_mem+0xff7fa0c8>
  803d54:	dd802617 	ldw	r22,152(sp)
  803d58:	00bfff44 	movi	r2,-3
  803d5c:	b0801c16 	blt	r22,r2,803dd0 <___vfprintf_internal_r+0x1de8>
  803d60:	d9402917 	ldw	r5,164(sp)
  803d64:	2d801a16 	blt	r5,r22,803dd0 <___vfprintf_internal_r+0x1de8>
  803d68:	dd803215 	stw	r22,200(sp)
  803d6c:	003e8906 	br	803794 <__alt_mem_onchip_mem+0xff7fb794>
  803d70:	01002074 	movhi	r4,129
  803d74:	21079284 	addi	r4,r4,7754
  803d78:	d9002b15 	stw	r4,172(sp)
  803d7c:	003c9106 	br	802fc4 <__alt_mem_onchip_mem+0xff7fafc4>
  803d80:	e005883a 	mov	r2,fp
  803d84:	003e7906 	br	80376c <__alt_mem_onchip_mem+0xff7fb76c>
  803d88:	d9402917 	ldw	r5,164(sp)
  803d8c:	df002783 	ldbu	fp,158(sp)
  803d90:	dcc02d15 	stw	r19,180(sp)
  803d94:	d9402a15 	stw	r5,168(sp)
  803d98:	d9402e15 	stw	r5,184(sp)
  803d9c:	d8002915 	stw	zero,164(sp)
  803da0:	d8003215 	stw	zero,200(sp)
  803da4:	003a5d06 	br	80271c <__alt_mem_onchip_mem+0xff7fa71c>
  803da8:	9080004c 	andi	r2,r18,1
  803dac:	0039883a 	mov	fp,zero
  803db0:	10000426 	beq	r2,zero,803dc4 <___vfprintf_internal_r+0x1ddc>
  803db4:	00800c04 	movi	r2,48
  803db8:	dc001dc4 	addi	r16,sp,119
  803dbc:	d8801dc5 	stb	r2,119(sp)
  803dc0:	003b8006 	br	802bc4 <__alt_mem_onchip_mem+0xff7fabc4>
  803dc4:	d8002e15 	stw	zero,184(sp)
  803dc8:	dc001e04 	addi	r16,sp,120
  803dcc:	003a4d06 	br	802704 <__alt_mem_onchip_mem+0xff7fa704>
  803dd0:	8c7fff84 	addi	r17,r17,-2
  803dd4:	b5bfffc4 	addi	r22,r22,-1
  803dd8:	dd802615 	stw	r22,152(sp)
  803ddc:	dc4022c5 	stb	r17,139(sp)
  803de0:	b000bf16 	blt	r22,zero,8040e0 <___vfprintf_internal_r+0x20f8>
  803de4:	00800ac4 	movi	r2,43
  803de8:	d8802305 	stb	r2,140(sp)
  803dec:	00800244 	movi	r2,9
  803df0:	15807016 	blt	r2,r22,803fb4 <___vfprintf_internal_r+0x1fcc>
  803df4:	00800c04 	movi	r2,48
  803df8:	b5800c04 	addi	r22,r22,48
  803dfc:	d8802345 	stb	r2,141(sp)
  803e00:	dd802385 	stb	r22,142(sp)
  803e04:	d88023c4 	addi	r2,sp,143
  803e08:	df0022c4 	addi	fp,sp,139
  803e0c:	d8c03317 	ldw	r3,204(sp)
  803e10:	1739c83a 	sub	fp,r2,fp
  803e14:	d9003317 	ldw	r4,204(sp)
  803e18:	e0c7883a 	add	r3,fp,r3
  803e1c:	df003a15 	stw	fp,232(sp)
  803e20:	d8c02e15 	stw	r3,184(sp)
  803e24:	00800044 	movi	r2,1
  803e28:	1100b30e 	bge	r2,r4,8040f8 <___vfprintf_internal_r+0x2110>
  803e2c:	d8c02e17 	ldw	r3,184(sp)
  803e30:	18c00044 	addi	r3,r3,1
  803e34:	d8c02e15 	stw	r3,184(sp)
  803e38:	1805883a 	mov	r2,r3
  803e3c:	1800ac16 	blt	r3,zero,8040f0 <___vfprintf_internal_r+0x2108>
  803e40:	d8003215 	stw	zero,200(sp)
  803e44:	003e5d06 	br	8037bc <__alt_mem_onchip_mem+0xff7fb7bc>
  803e48:	d9002c17 	ldw	r4,176(sp)
  803e4c:	d9801e04 	addi	r6,sp,120
  803e50:	b80b883a 	mov	r5,r23
  803e54:	0808bd80 	call	808bd8 <__sprint_r>
  803e58:	1039651e 	bne	r2,zero,8023f0 <__alt_mem_onchip_mem+0xff7fa3f0>
  803e5c:	dc402617 	ldw	r17,152(sp)
  803e60:	d8c02017 	ldw	r3,128(sp)
  803e64:	d8801f17 	ldw	r2,124(sp)
  803e68:	da000404 	addi	r8,sp,16
  803e6c:	003ed606 	br	8039c8 <__alt_mem_onchip_mem+0xff7fb9c8>
  803e70:	582b883a 	mov	r21,r11
  803e74:	d8002915 	stw	zero,164(sp)
  803e78:	0038bd06 	br	802170 <__alt_mem_onchip_mem+0xff7fa170>
  803e7c:	d8802917 	ldw	r2,164(sp)
  803e80:	103e071e 	bne	r2,zero,8036a0 <__alt_mem_onchip_mem+0xff7fb6a0>
  803e84:	dc002915 	stw	r16,164(sp)
  803e88:	003e0506 	br	8036a0 <__alt_mem_onchip_mem+0xff7fb6a0>
  803e8c:	d9002917 	ldw	r4,164(sp)
  803e90:	20c00044 	addi	r3,r4,1
  803e94:	003e0f06 	br	8036d4 <__alt_mem_onchip_mem+0xff7fb6d4>
  803e98:	01400184 	movi	r5,6
  803e9c:	d9402915 	stw	r5,164(sp)
  803ea0:	003dff06 	br	8036a0 <__alt_mem_onchip_mem+0xff7fb6a0>
  803ea4:	d8802104 	addi	r2,sp,132
  803ea8:	d8800315 	stw	r2,12(sp)
  803eac:	d8802504 	addi	r2,sp,148
  803eb0:	d8800215 	stw	r2,8(sp)
  803eb4:	d8802604 	addi	r2,sp,152
  803eb8:	d8800115 	stw	r2,4(sp)
  803ebc:	d8802917 	ldw	r2,164(sp)
  803ec0:	d9403617 	ldw	r5,216(sp)
  803ec4:	d9002c17 	ldw	r4,176(sp)
  803ec8:	d8800015 	stw	r2,0(sp)
  803ecc:	01c000c4 	movi	r7,3
  803ed0:	980d883a 	mov	r6,r19
  803ed4:	da003d15 	stw	r8,244(sp)
  803ed8:	08046c00 	call	8046c0 <_dtoa_r>
  803edc:	d8c02917 	ldw	r3,164(sp)
  803ee0:	da003d17 	ldw	r8,244(sp)
  803ee4:	1021883a 	mov	r16,r2
  803ee8:	10f9883a 	add	fp,r2,r3
  803eec:	81000007 	ldb	r4,0(r16)
  803ef0:	00800c04 	movi	r2,48
  803ef4:	20805e26 	beq	r4,r2,804070 <___vfprintf_internal_r+0x2088>
  803ef8:	d8c02617 	ldw	r3,152(sp)
  803efc:	e0f9883a 	add	fp,fp,r3
  803f00:	003e0a06 	br	80372c <__alt_mem_onchip_mem+0xff7fb72c>
  803f04:	00c00b44 	movi	r3,45
  803f08:	24e0003c 	xorhi	r19,r4,32768
  803f0c:	d8c02a05 	stb	r3,168(sp)
  803f10:	003de906 	br	8036b8 <__alt_mem_onchip_mem+0xff7fb6b8>
  803f14:	d8c03217 	ldw	r3,200(sp)
  803f18:	00c07a0e 	bge	zero,r3,804104 <___vfprintf_internal_r+0x211c>
  803f1c:	00800044 	movi	r2,1
  803f20:	d9003317 	ldw	r4,204(sp)
  803f24:	1105883a 	add	r2,r2,r4
  803f28:	d8802e15 	stw	r2,184(sp)
  803f2c:	10004e16 	blt	r2,zero,804068 <___vfprintf_internal_r+0x2080>
  803f30:	044019c4 	movi	r17,103
  803f34:	003e2106 	br	8037bc <__alt_mem_onchip_mem+0xff7fb7bc>
  803f38:	d9002917 	ldw	r4,164(sp)
  803f3c:	d8802104 	addi	r2,sp,132
  803f40:	d8800315 	stw	r2,12(sp)
  803f44:	d9000015 	stw	r4,0(sp)
  803f48:	d8802504 	addi	r2,sp,148
  803f4c:	d9403617 	ldw	r5,216(sp)
  803f50:	d9002c17 	ldw	r4,176(sp)
  803f54:	d8800215 	stw	r2,8(sp)
  803f58:	d8802604 	addi	r2,sp,152
  803f5c:	d8800115 	stw	r2,4(sp)
  803f60:	01c000c4 	movi	r7,3
  803f64:	980d883a 	mov	r6,r19
  803f68:	da003d15 	stw	r8,244(sp)
  803f6c:	08046c00 	call	8046c0 <_dtoa_r>
  803f70:	d8c02917 	ldw	r3,164(sp)
  803f74:	da003d17 	ldw	r8,244(sp)
  803f78:	1021883a 	mov	r16,r2
  803f7c:	00801184 	movi	r2,70
  803f80:	80f9883a 	add	fp,r16,r3
  803f84:	88bfd926 	beq	r17,r2,803eec <__alt_mem_onchip_mem+0xff7fbeec>
  803f88:	003de806 	br	80372c <__alt_mem_onchip_mem+0xff7fb72c>
  803f8c:	d9002917 	ldw	r4,164(sp)
  803f90:	00c04d0e 	bge	zero,r3,8040c8 <___vfprintf_internal_r+0x20e0>
  803f94:	2000441e 	bne	r4,zero,8040a8 <___vfprintf_internal_r+0x20c0>
  803f98:	9480004c 	andi	r18,r18,1
  803f9c:	9000421e 	bne	r18,zero,8040a8 <___vfprintf_internal_r+0x20c0>
  803fa0:	1805883a 	mov	r2,r3
  803fa4:	18007016 	blt	r3,zero,804168 <___vfprintf_internal_r+0x2180>
  803fa8:	d8c03217 	ldw	r3,200(sp)
  803fac:	d8c02e15 	stw	r3,184(sp)
  803fb0:	003e0206 	br	8037bc <__alt_mem_onchip_mem+0xff7fb7bc>
  803fb4:	df0022c4 	addi	fp,sp,139
  803fb8:	dc002915 	stw	r16,164(sp)
  803fbc:	4027883a 	mov	r19,r8
  803fc0:	e021883a 	mov	r16,fp
  803fc4:	b009883a 	mov	r4,r22
  803fc8:	01400284 	movi	r5,10
  803fcc:	080b3680 	call	80b368 <__modsi3>
  803fd0:	10800c04 	addi	r2,r2,48
  803fd4:	843fffc4 	addi	r16,r16,-1
  803fd8:	b009883a 	mov	r4,r22
  803fdc:	01400284 	movi	r5,10
  803fe0:	80800005 	stb	r2,0(r16)
  803fe4:	080b2e40 	call	80b2e4 <__divsi3>
  803fe8:	102d883a 	mov	r22,r2
  803fec:	00800244 	movi	r2,9
  803ff0:	15bff416 	blt	r2,r22,803fc4 <__alt_mem_onchip_mem+0xff7fbfc4>
  803ff4:	9811883a 	mov	r8,r19
  803ff8:	b0800c04 	addi	r2,r22,48
  803ffc:	8027883a 	mov	r19,r16
  804000:	997fffc4 	addi	r5,r19,-1
  804004:	98bfffc5 	stb	r2,-1(r19)
  804008:	dc002917 	ldw	r16,164(sp)
  80400c:	2f006a2e 	bgeu	r5,fp,8041b8 <___vfprintf_internal_r+0x21d0>
  804010:	d9c02384 	addi	r7,sp,142
  804014:	3ccfc83a 	sub	r7,r7,r19
  804018:	d9002344 	addi	r4,sp,141
  80401c:	e1cf883a 	add	r7,fp,r7
  804020:	00000106 	br	804028 <___vfprintf_internal_r+0x2040>
  804024:	28800003 	ldbu	r2,0(r5)
  804028:	20800005 	stb	r2,0(r4)
  80402c:	21000044 	addi	r4,r4,1
  804030:	29400044 	addi	r5,r5,1
  804034:	393ffb1e 	bne	r7,r4,804024 <__alt_mem_onchip_mem+0xff7fc024>
  804038:	d8802304 	addi	r2,sp,140
  80403c:	14c5c83a 	sub	r2,r2,r19
  804040:	d8c02344 	addi	r3,sp,141
  804044:	1885883a 	add	r2,r3,r2
  804048:	003f7006 	br	803e0c <__alt_mem_onchip_mem+0xff7fbe0c>
  80404c:	0005883a 	mov	r2,zero
  804050:	003f0f06 	br	803c90 <__alt_mem_onchip_mem+0xff7fbc90>
  804054:	d8c03217 	ldw	r3,200(sp)
  804058:	18c00044 	addi	r3,r3,1
  80405c:	d8c02e15 	stw	r3,184(sp)
  804060:	1805883a 	mov	r2,r3
  804064:	183fb20e 	bge	r3,zero,803f30 <__alt_mem_onchip_mem+0xff7fbf30>
  804068:	0005883a 	mov	r2,zero
  80406c:	003fb006 	br	803f30 <__alt_mem_onchip_mem+0xff7fbf30>
  804070:	d9003617 	ldw	r4,216(sp)
  804074:	000d883a 	mov	r6,zero
  804078:	000f883a 	mov	r7,zero
  80407c:	980b883a 	mov	r5,r19
  804080:	d8c03c15 	stw	r3,240(sp)
  804084:	da003d15 	stw	r8,244(sp)
  804088:	080c62c0 	call	80c62c <__eqdf2>
  80408c:	d8c03c17 	ldw	r3,240(sp)
  804090:	da003d17 	ldw	r8,244(sp)
  804094:	103f9826 	beq	r2,zero,803ef8 <__alt_mem_onchip_mem+0xff7fbef8>
  804098:	00800044 	movi	r2,1
  80409c:	10c7c83a 	sub	r3,r2,r3
  8040a0:	d8c02615 	stw	r3,152(sp)
  8040a4:	003f9506 	br	803efc <__alt_mem_onchip_mem+0xff7fbefc>
  8040a8:	d9002917 	ldw	r4,164(sp)
  8040ac:	d8c03217 	ldw	r3,200(sp)
  8040b0:	20800044 	addi	r2,r4,1
  8040b4:	1885883a 	add	r2,r3,r2
  8040b8:	d8802e15 	stw	r2,184(sp)
  8040bc:	103dbf0e 	bge	r2,zero,8037bc <__alt_mem_onchip_mem+0xff7fb7bc>
  8040c0:	0005883a 	mov	r2,zero
  8040c4:	003dbd06 	br	8037bc <__alt_mem_onchip_mem+0xff7fb7bc>
  8040c8:	2000211e 	bne	r4,zero,804150 <___vfprintf_internal_r+0x2168>
  8040cc:	9480004c 	andi	r18,r18,1
  8040d0:	90001f1e 	bne	r18,zero,804150 <___vfprintf_internal_r+0x2168>
  8040d4:	00800044 	movi	r2,1
  8040d8:	d8802e15 	stw	r2,184(sp)
  8040dc:	003db706 	br	8037bc <__alt_mem_onchip_mem+0xff7fb7bc>
  8040e0:	00800b44 	movi	r2,45
  8040e4:	05adc83a 	sub	r22,zero,r22
  8040e8:	d8802305 	stb	r2,140(sp)
  8040ec:	003f3f06 	br	803dec <__alt_mem_onchip_mem+0xff7fbdec>
  8040f0:	0005883a 	mov	r2,zero
  8040f4:	003f5206 	br	803e40 <__alt_mem_onchip_mem+0xff7fbe40>
  8040f8:	90a4703a 	and	r18,r18,r2
  8040fc:	903f4e26 	beq	r18,zero,803e38 <__alt_mem_onchip_mem+0xff7fbe38>
  804100:	003f4a06 	br	803e2c <__alt_mem_onchip_mem+0xff7fbe2c>
  804104:	00800084 	movi	r2,2
  804108:	10c5c83a 	sub	r2,r2,r3
  80410c:	003f8406 	br	803f20 <__alt_mem_onchip_mem+0xff7fbf20>
  804110:	d8802d17 	ldw	r2,180(sp)
  804114:	d9002d17 	ldw	r4,180(sp)
  804118:	ac400043 	ldbu	r17,1(r21)
  80411c:	10800017 	ldw	r2,0(r2)
  804120:	582b883a 	mov	r21,r11
  804124:	d8802915 	stw	r2,164(sp)
  804128:	20800104 	addi	r2,r4,4
  80412c:	d9002917 	ldw	r4,164(sp)
  804130:	d8802d15 	stw	r2,180(sp)
  804134:	203e7a0e 	bge	r4,zero,803b20 <__alt_mem_onchip_mem+0xff7fbb20>
  804138:	8c403fcc 	andi	r17,r17,255
  80413c:	00bfffc4 	movi	r2,-1
  804140:	8c40201c 	xori	r17,r17,128
  804144:	d8802915 	stw	r2,164(sp)
  804148:	8c7fe004 	addi	r17,r17,-128
  80414c:	00380706 	br	80216c <__alt_mem_onchip_mem+0xff7fa16c>
  804150:	d8c02917 	ldw	r3,164(sp)
  804154:	18c00084 	addi	r3,r3,2
  804158:	d8c02e15 	stw	r3,184(sp)
  80415c:	1805883a 	mov	r2,r3
  804160:	183d960e 	bge	r3,zero,8037bc <__alt_mem_onchip_mem+0xff7fb7bc>
  804164:	003fd606 	br	8040c0 <__alt_mem_onchip_mem+0xff7fc0c0>
  804168:	0005883a 	mov	r2,zero
  80416c:	003f8e06 	br	803fa8 <__alt_mem_onchip_mem+0xff7fbfa8>
  804170:	9080004c 	andi	r2,r18,1
  804174:	103f811e 	bne	r2,zero,803f7c <__alt_mem_onchip_mem+0xff7fbf7c>
  804178:	d8802117 	ldw	r2,132(sp)
  80417c:	1405c83a 	sub	r2,r2,r16
  804180:	d8803315 	stw	r2,204(sp)
  804184:	b47ef326 	beq	r22,r17,803d54 <__alt_mem_onchip_mem+0xff7fbd54>
  804188:	dd802617 	ldw	r22,152(sp)
  80418c:	003f1106 	br	803dd4 <__alt_mem_onchip_mem+0xff7fbdd4>
  804190:	d9c02785 	stb	r7,158(sp)
  804194:	00390406 	br	8025a8 <__alt_mem_onchip_mem+0xff7fa5a8>
  804198:	d9c02785 	stb	r7,158(sp)
  80419c:	0038d306 	br	8024ec <__alt_mem_onchip_mem+0xff7fa4ec>
  8041a0:	d9c02785 	stb	r7,158(sp)
  8041a4:	003a6106 	br	802b2c <__alt_mem_onchip_mem+0xff7fab2c>
  8041a8:	d9c02785 	stb	r7,158(sp)
  8041ac:	003af806 	br	802d90 <__alt_mem_onchip_mem+0xff7fad90>
  8041b0:	0005883a 	mov	r2,zero
  8041b4:	003d7e06 	br	8037b0 <__alt_mem_onchip_mem+0xff7fb7b0>
  8041b8:	d8802344 	addi	r2,sp,141
  8041bc:	003f1306 	br	803e0c <__alt_mem_onchip_mem+0xff7fbe0c>
  8041c0:	d9c02785 	stb	r7,158(sp)
  8041c4:	00392306 	br	802654 <__alt_mem_onchip_mem+0xff7fa654>
  8041c8:	d9c02785 	stb	r7,158(sp)
  8041cc:	003aa906 	br	802c74 <__alt_mem_onchip_mem+0xff7fac74>
  8041d0:	d9c02785 	stb	r7,158(sp)
  8041d4:	003a3d06 	br	802acc <__alt_mem_onchip_mem+0xff7faacc>
  8041d8:	d9c02785 	stb	r7,158(sp)
  8041dc:	003aca06 	br	802d08 <__alt_mem_onchip_mem+0xff7fad08>

008041e0 <__vfprintf_internal>:
  8041e0:	00802074 	movhi	r2,129
  8041e4:	10900904 	addi	r2,r2,16420
  8041e8:	300f883a 	mov	r7,r6
  8041ec:	280d883a 	mov	r6,r5
  8041f0:	200b883a 	mov	r5,r4
  8041f4:	11000017 	ldw	r4,0(r2)
  8041f8:	0801fe81 	jmpi	801fe8 <___vfprintf_internal_r>

008041fc <__sbprintf>:
  8041fc:	2880030b 	ldhu	r2,12(r5)
  804200:	2ac01917 	ldw	r11,100(r5)
  804204:	2a80038b 	ldhu	r10,14(r5)
  804208:	2a400717 	ldw	r9,28(r5)
  80420c:	2a000917 	ldw	r8,36(r5)
  804210:	defee204 	addi	sp,sp,-1144
  804214:	00c10004 	movi	r3,1024
  804218:	dc011a15 	stw	r16,1128(sp)
  80421c:	10bfff4c 	andi	r2,r2,65533
  804220:	2821883a 	mov	r16,r5
  804224:	d8cb883a 	add	r5,sp,r3
  804228:	dc811c15 	stw	r18,1136(sp)
  80422c:	dc411b15 	stw	r17,1132(sp)
  804230:	dfc11d15 	stw	ra,1140(sp)
  804234:	2025883a 	mov	r18,r4
  804238:	d881030d 	sth	r2,1036(sp)
  80423c:	dac11915 	stw	r11,1124(sp)
  804240:	da81038d 	sth	r10,1038(sp)
  804244:	da410715 	stw	r9,1052(sp)
  804248:	da010915 	stw	r8,1060(sp)
  80424c:	dec10015 	stw	sp,1024(sp)
  804250:	dec10415 	stw	sp,1040(sp)
  804254:	d8c10215 	stw	r3,1032(sp)
  804258:	d8c10515 	stw	r3,1044(sp)
  80425c:	d8010615 	stw	zero,1048(sp)
  804260:	0801fe80 	call	801fe8 <___vfprintf_internal_r>
  804264:	1023883a 	mov	r17,r2
  804268:	10000416 	blt	r2,zero,80427c <__sbprintf+0x80>
  80426c:	d9410004 	addi	r5,sp,1024
  804270:	9009883a 	mov	r4,r18
  804274:	0805f640 	call	805f64 <_fflush_r>
  804278:	10000d1e 	bne	r2,zero,8042b0 <__sbprintf+0xb4>
  80427c:	d881030b 	ldhu	r2,1036(sp)
  804280:	1080100c 	andi	r2,r2,64
  804284:	10000326 	beq	r2,zero,804294 <__sbprintf+0x98>
  804288:	8080030b 	ldhu	r2,12(r16)
  80428c:	10801014 	ori	r2,r2,64
  804290:	8080030d 	sth	r2,12(r16)
  804294:	8805883a 	mov	r2,r17
  804298:	dfc11d17 	ldw	ra,1140(sp)
  80429c:	dc811c17 	ldw	r18,1136(sp)
  8042a0:	dc411b17 	ldw	r17,1132(sp)
  8042a4:	dc011a17 	ldw	r16,1128(sp)
  8042a8:	dec11e04 	addi	sp,sp,1144
  8042ac:	f800283a 	ret
  8042b0:	047fffc4 	movi	r17,-1
  8042b4:	003ff106 	br	80427c <__alt_mem_onchip_mem+0xff7fc27c>

008042b8 <_write_r>:
  8042b8:	defffd04 	addi	sp,sp,-12
  8042bc:	2805883a 	mov	r2,r5
  8042c0:	dc000015 	stw	r16,0(sp)
  8042c4:	04002074 	movhi	r16,129
  8042c8:	dc400115 	stw	r17,4(sp)
  8042cc:	300b883a 	mov	r5,r6
  8042d0:	84175c04 	addi	r16,r16,23920
  8042d4:	2023883a 	mov	r17,r4
  8042d8:	380d883a 	mov	r6,r7
  8042dc:	1009883a 	mov	r4,r2
  8042e0:	dfc00215 	stw	ra,8(sp)
  8042e4:	80000015 	stw	zero,0(r16)
  8042e8:	080e9f00 	call	80e9f0 <write>
  8042ec:	00ffffc4 	movi	r3,-1
  8042f0:	10c00526 	beq	r2,r3,804308 <_write_r+0x50>
  8042f4:	dfc00217 	ldw	ra,8(sp)
  8042f8:	dc400117 	ldw	r17,4(sp)
  8042fc:	dc000017 	ldw	r16,0(sp)
  804300:	dec00304 	addi	sp,sp,12
  804304:	f800283a 	ret
  804308:	80c00017 	ldw	r3,0(r16)
  80430c:	183ff926 	beq	r3,zero,8042f4 <__alt_mem_onchip_mem+0xff7fc2f4>
  804310:	88c00015 	stw	r3,0(r17)
  804314:	003ff706 	br	8042f4 <__alt_mem_onchip_mem+0xff7fc2f4>

00804318 <__swsetup_r>:
  804318:	00802074 	movhi	r2,129
  80431c:	defffd04 	addi	sp,sp,-12
  804320:	10900904 	addi	r2,r2,16420
  804324:	dc400115 	stw	r17,4(sp)
  804328:	2023883a 	mov	r17,r4
  80432c:	11000017 	ldw	r4,0(r2)
  804330:	dc000015 	stw	r16,0(sp)
  804334:	dfc00215 	stw	ra,8(sp)
  804338:	2821883a 	mov	r16,r5
  80433c:	20000226 	beq	r4,zero,804348 <__swsetup_r+0x30>
  804340:	20800e17 	ldw	r2,56(r4)
  804344:	10003126 	beq	r2,zero,80440c <__swsetup_r+0xf4>
  804348:	8080030b 	ldhu	r2,12(r16)
  80434c:	10c0020c 	andi	r3,r2,8
  804350:	1009883a 	mov	r4,r2
  804354:	18000f26 	beq	r3,zero,804394 <__swsetup_r+0x7c>
  804358:	80c00417 	ldw	r3,16(r16)
  80435c:	18001526 	beq	r3,zero,8043b4 <__swsetup_r+0x9c>
  804360:	1100004c 	andi	r4,r2,1
  804364:	20001c1e 	bne	r4,zero,8043d8 <__swsetup_r+0xc0>
  804368:	1080008c 	andi	r2,r2,2
  80436c:	1000291e 	bne	r2,zero,804414 <__swsetup_r+0xfc>
  804370:	80800517 	ldw	r2,20(r16)
  804374:	80800215 	stw	r2,8(r16)
  804378:	18001c26 	beq	r3,zero,8043ec <__swsetup_r+0xd4>
  80437c:	0005883a 	mov	r2,zero
  804380:	dfc00217 	ldw	ra,8(sp)
  804384:	dc400117 	ldw	r17,4(sp)
  804388:	dc000017 	ldw	r16,0(sp)
  80438c:	dec00304 	addi	sp,sp,12
  804390:	f800283a 	ret
  804394:	2080040c 	andi	r2,r4,16
  804398:	10002e26 	beq	r2,zero,804454 <__swsetup_r+0x13c>
  80439c:	2080010c 	andi	r2,r4,4
  8043a0:	10001e1e 	bne	r2,zero,80441c <__swsetup_r+0x104>
  8043a4:	80c00417 	ldw	r3,16(r16)
  8043a8:	20800214 	ori	r2,r4,8
  8043ac:	8080030d 	sth	r2,12(r16)
  8043b0:	183feb1e 	bne	r3,zero,804360 <__alt_mem_onchip_mem+0xff7fc360>
  8043b4:	1100a00c 	andi	r4,r2,640
  8043b8:	01408004 	movi	r5,512
  8043bc:	217fe826 	beq	r4,r5,804360 <__alt_mem_onchip_mem+0xff7fc360>
  8043c0:	800b883a 	mov	r5,r16
  8043c4:	8809883a 	mov	r4,r17
  8043c8:	0800fac0 	call	800fac <__smakebuf_r>
  8043cc:	8080030b 	ldhu	r2,12(r16)
  8043d0:	80c00417 	ldw	r3,16(r16)
  8043d4:	003fe206 	br	804360 <__alt_mem_onchip_mem+0xff7fc360>
  8043d8:	80800517 	ldw	r2,20(r16)
  8043dc:	80000215 	stw	zero,8(r16)
  8043e0:	0085c83a 	sub	r2,zero,r2
  8043e4:	80800615 	stw	r2,24(r16)
  8043e8:	183fe41e 	bne	r3,zero,80437c <__alt_mem_onchip_mem+0xff7fc37c>
  8043ec:	80c0030b 	ldhu	r3,12(r16)
  8043f0:	0005883a 	mov	r2,zero
  8043f4:	1900200c 	andi	r4,r3,128
  8043f8:	203fe126 	beq	r4,zero,804380 <__alt_mem_onchip_mem+0xff7fc380>
  8043fc:	18c01014 	ori	r3,r3,64
  804400:	80c0030d 	sth	r3,12(r16)
  804404:	00bfffc4 	movi	r2,-1
  804408:	003fdd06 	br	804380 <__alt_mem_onchip_mem+0xff7fc380>
  80440c:	08063400 	call	806340 <__sinit>
  804410:	003fcd06 	br	804348 <__alt_mem_onchip_mem+0xff7fc348>
  804414:	0005883a 	mov	r2,zero
  804418:	003fd606 	br	804374 <__alt_mem_onchip_mem+0xff7fc374>
  80441c:	81400c17 	ldw	r5,48(r16)
  804420:	28000626 	beq	r5,zero,80443c <__swsetup_r+0x124>
  804424:	80801004 	addi	r2,r16,64
  804428:	28800326 	beq	r5,r2,804438 <__swsetup_r+0x120>
  80442c:	8809883a 	mov	r4,r17
  804430:	08065600 	call	806560 <_free_r>
  804434:	8100030b 	ldhu	r4,12(r16)
  804438:	80000c15 	stw	zero,48(r16)
  80443c:	80c00417 	ldw	r3,16(r16)
  804440:	00bff6c4 	movi	r2,-37
  804444:	1108703a 	and	r4,r2,r4
  804448:	80000115 	stw	zero,4(r16)
  80444c:	80c00015 	stw	r3,0(r16)
  804450:	003fd506 	br	8043a8 <__alt_mem_onchip_mem+0xff7fc3a8>
  804454:	00800244 	movi	r2,9
  804458:	88800015 	stw	r2,0(r17)
  80445c:	20801014 	ori	r2,r4,64
  804460:	8080030d 	sth	r2,12(r16)
  804464:	00bfffc4 	movi	r2,-1
  804468:	003fc506 	br	804380 <__alt_mem_onchip_mem+0xff7fc380>

0080446c <_close_r>:
  80446c:	defffd04 	addi	sp,sp,-12
  804470:	dc000015 	stw	r16,0(sp)
  804474:	04002074 	movhi	r16,129
  804478:	dc400115 	stw	r17,4(sp)
  80447c:	84175c04 	addi	r16,r16,23920
  804480:	2023883a 	mov	r17,r4
  804484:	2809883a 	mov	r4,r5
  804488:	dfc00215 	stw	ra,8(sp)
  80448c:	80000015 	stw	zero,0(r16)
  804490:	080dc680 	call	80dc68 <close>
  804494:	00ffffc4 	movi	r3,-1
  804498:	10c00526 	beq	r2,r3,8044b0 <_close_r+0x44>
  80449c:	dfc00217 	ldw	ra,8(sp)
  8044a0:	dc400117 	ldw	r17,4(sp)
  8044a4:	dc000017 	ldw	r16,0(sp)
  8044a8:	dec00304 	addi	sp,sp,12
  8044ac:	f800283a 	ret
  8044b0:	80c00017 	ldw	r3,0(r16)
  8044b4:	183ff926 	beq	r3,zero,80449c <__alt_mem_onchip_mem+0xff7fc49c>
  8044b8:	88c00015 	stw	r3,0(r17)
  8044bc:	003ff706 	br	80449c <__alt_mem_onchip_mem+0xff7fc49c>

008044c0 <quorem>:
  8044c0:	defff704 	addi	sp,sp,-36
  8044c4:	dc800215 	stw	r18,8(sp)
  8044c8:	20800417 	ldw	r2,16(r4)
  8044cc:	2c800417 	ldw	r18,16(r5)
  8044d0:	dfc00815 	stw	ra,32(sp)
  8044d4:	ddc00715 	stw	r23,28(sp)
  8044d8:	dd800615 	stw	r22,24(sp)
  8044dc:	dd400515 	stw	r21,20(sp)
  8044e0:	dd000415 	stw	r20,16(sp)
  8044e4:	dcc00315 	stw	r19,12(sp)
  8044e8:	dc400115 	stw	r17,4(sp)
  8044ec:	dc000015 	stw	r16,0(sp)
  8044f0:	14807116 	blt	r2,r18,8046b8 <quorem+0x1f8>
  8044f4:	94bfffc4 	addi	r18,r18,-1
  8044f8:	94ad883a 	add	r22,r18,r18
  8044fc:	b5ad883a 	add	r22,r22,r22
  804500:	2c400504 	addi	r17,r5,20
  804504:	8da9883a 	add	r20,r17,r22
  804508:	25400504 	addi	r21,r4,20
  80450c:	282f883a 	mov	r23,r5
  804510:	adad883a 	add	r22,r21,r22
  804514:	a1400017 	ldw	r5,0(r20)
  804518:	2021883a 	mov	r16,r4
  80451c:	b1000017 	ldw	r4,0(r22)
  804520:	29400044 	addi	r5,r5,1
  804524:	080b3dc0 	call	80b3dc <__udivsi3>
  804528:	1027883a 	mov	r19,r2
  80452c:	10002c26 	beq	r2,zero,8045e0 <quorem+0x120>
  804530:	a813883a 	mov	r9,r21
  804534:	880b883a 	mov	r5,r17
  804538:	0009883a 	mov	r4,zero
  80453c:	000d883a 	mov	r6,zero
  804540:	2a000017 	ldw	r8,0(r5)
  804544:	49c00017 	ldw	r7,0(r9)
  804548:	29400104 	addi	r5,r5,4
  80454c:	40bfffcc 	andi	r2,r8,65535
  804550:	14c5383a 	mul	r2,r2,r19
  804554:	4010d43a 	srli	r8,r8,16
  804558:	38ffffcc 	andi	r3,r7,65535
  80455c:	1105883a 	add	r2,r2,r4
  804560:	1008d43a 	srli	r4,r2,16
  804564:	44d1383a 	mul	r8,r8,r19
  804568:	198d883a 	add	r6,r3,r6
  80456c:	10ffffcc 	andi	r3,r2,65535
  804570:	30c7c83a 	sub	r3,r6,r3
  804574:	380ed43a 	srli	r7,r7,16
  804578:	4105883a 	add	r2,r8,r4
  80457c:	180dd43a 	srai	r6,r3,16
  804580:	113fffcc 	andi	r4,r2,65535
  804584:	390fc83a 	sub	r7,r7,r4
  804588:	398d883a 	add	r6,r7,r6
  80458c:	300e943a 	slli	r7,r6,16
  804590:	18ffffcc 	andi	r3,r3,65535
  804594:	1008d43a 	srli	r4,r2,16
  804598:	38ceb03a 	or	r7,r7,r3
  80459c:	49c00015 	stw	r7,0(r9)
  8045a0:	300dd43a 	srai	r6,r6,16
  8045a4:	4a400104 	addi	r9,r9,4
  8045a8:	a17fe52e 	bgeu	r20,r5,804540 <__alt_mem_onchip_mem+0xff7fc540>
  8045ac:	b0800017 	ldw	r2,0(r22)
  8045b0:	10000b1e 	bne	r2,zero,8045e0 <quorem+0x120>
  8045b4:	b0bfff04 	addi	r2,r22,-4
  8045b8:	a880082e 	bgeu	r21,r2,8045dc <quorem+0x11c>
  8045bc:	b0ffff17 	ldw	r3,-4(r22)
  8045c0:	18000326 	beq	r3,zero,8045d0 <quorem+0x110>
  8045c4:	00000506 	br	8045dc <quorem+0x11c>
  8045c8:	10c00017 	ldw	r3,0(r2)
  8045cc:	1800031e 	bne	r3,zero,8045dc <quorem+0x11c>
  8045d0:	10bfff04 	addi	r2,r2,-4
  8045d4:	94bfffc4 	addi	r18,r18,-1
  8045d8:	a8bffb36 	bltu	r21,r2,8045c8 <__alt_mem_onchip_mem+0xff7fc5c8>
  8045dc:	84800415 	stw	r18,16(r16)
  8045e0:	b80b883a 	mov	r5,r23
  8045e4:	8009883a 	mov	r4,r16
  8045e8:	0807c940 	call	807c94 <__mcmp>
  8045ec:	10002616 	blt	r2,zero,804688 <quorem+0x1c8>
  8045f0:	9cc00044 	addi	r19,r19,1
  8045f4:	a805883a 	mov	r2,r21
  8045f8:	000b883a 	mov	r5,zero
  8045fc:	11000017 	ldw	r4,0(r2)
  804600:	89800017 	ldw	r6,0(r17)
  804604:	10800104 	addi	r2,r2,4
  804608:	20ffffcc 	andi	r3,r4,65535
  80460c:	194b883a 	add	r5,r3,r5
  804610:	30ffffcc 	andi	r3,r6,65535
  804614:	28c7c83a 	sub	r3,r5,r3
  804618:	300cd43a 	srli	r6,r6,16
  80461c:	2008d43a 	srli	r4,r4,16
  804620:	180bd43a 	srai	r5,r3,16
  804624:	18ffffcc 	andi	r3,r3,65535
  804628:	2189c83a 	sub	r4,r4,r6
  80462c:	2149883a 	add	r4,r4,r5
  804630:	200c943a 	slli	r6,r4,16
  804634:	8c400104 	addi	r17,r17,4
  804638:	200bd43a 	srai	r5,r4,16
  80463c:	30c6b03a 	or	r3,r6,r3
  804640:	10ffff15 	stw	r3,-4(r2)
  804644:	a47fed2e 	bgeu	r20,r17,8045fc <__alt_mem_onchip_mem+0xff7fc5fc>
  804648:	9485883a 	add	r2,r18,r18
  80464c:	1085883a 	add	r2,r2,r2
  804650:	a887883a 	add	r3,r21,r2
  804654:	18800017 	ldw	r2,0(r3)
  804658:	10000b1e 	bne	r2,zero,804688 <quorem+0x1c8>
  80465c:	18bfff04 	addi	r2,r3,-4
  804660:	a880082e 	bgeu	r21,r2,804684 <quorem+0x1c4>
  804664:	18ffff17 	ldw	r3,-4(r3)
  804668:	18000326 	beq	r3,zero,804678 <quorem+0x1b8>
  80466c:	00000506 	br	804684 <quorem+0x1c4>
  804670:	10c00017 	ldw	r3,0(r2)
  804674:	1800031e 	bne	r3,zero,804684 <quorem+0x1c4>
  804678:	10bfff04 	addi	r2,r2,-4
  80467c:	94bfffc4 	addi	r18,r18,-1
  804680:	a8bffb36 	bltu	r21,r2,804670 <__alt_mem_onchip_mem+0xff7fc670>
  804684:	84800415 	stw	r18,16(r16)
  804688:	9805883a 	mov	r2,r19
  80468c:	dfc00817 	ldw	ra,32(sp)
  804690:	ddc00717 	ldw	r23,28(sp)
  804694:	dd800617 	ldw	r22,24(sp)
  804698:	dd400517 	ldw	r21,20(sp)
  80469c:	dd000417 	ldw	r20,16(sp)
  8046a0:	dcc00317 	ldw	r19,12(sp)
  8046a4:	dc800217 	ldw	r18,8(sp)
  8046a8:	dc400117 	ldw	r17,4(sp)
  8046ac:	dc000017 	ldw	r16,0(sp)
  8046b0:	dec00904 	addi	sp,sp,36
  8046b4:	f800283a 	ret
  8046b8:	0005883a 	mov	r2,zero
  8046bc:	003ff306 	br	80468c <__alt_mem_onchip_mem+0xff7fc68c>

008046c0 <_dtoa_r>:
  8046c0:	20801017 	ldw	r2,64(r4)
  8046c4:	deffde04 	addi	sp,sp,-136
  8046c8:	df002015 	stw	fp,128(sp)
  8046cc:	dcc01b15 	stw	r19,108(sp)
  8046d0:	dc801a15 	stw	r18,104(sp)
  8046d4:	dc401915 	stw	r17,100(sp)
  8046d8:	dc001815 	stw	r16,96(sp)
  8046dc:	dfc02115 	stw	ra,132(sp)
  8046e0:	ddc01f15 	stw	r23,124(sp)
  8046e4:	dd801e15 	stw	r22,120(sp)
  8046e8:	dd401d15 	stw	r21,116(sp)
  8046ec:	dd001c15 	stw	r20,112(sp)
  8046f0:	d9c00315 	stw	r7,12(sp)
  8046f4:	2039883a 	mov	fp,r4
  8046f8:	3023883a 	mov	r17,r6
  8046fc:	2825883a 	mov	r18,r5
  804700:	dc002417 	ldw	r16,144(sp)
  804704:	3027883a 	mov	r19,r6
  804708:	10000826 	beq	r2,zero,80472c <_dtoa_r+0x6c>
  80470c:	21801117 	ldw	r6,68(r4)
  804710:	00c00044 	movi	r3,1
  804714:	100b883a 	mov	r5,r2
  804718:	1986983a 	sll	r3,r3,r6
  80471c:	11800115 	stw	r6,4(r2)
  804720:	10c00215 	stw	r3,8(r2)
  804724:	08074740 	call	807474 <_Bfree>
  804728:	e0001015 	stw	zero,64(fp)
  80472c:	88002e16 	blt	r17,zero,8047e8 <_dtoa_r+0x128>
  804730:	80000015 	stw	zero,0(r16)
  804734:	889ffc2c 	andhi	r2,r17,32752
  804738:	00dffc34 	movhi	r3,32752
  80473c:	10c01c26 	beq	r2,r3,8047b0 <_dtoa_r+0xf0>
  804740:	000d883a 	mov	r6,zero
  804744:	000f883a 	mov	r7,zero
  804748:	9009883a 	mov	r4,r18
  80474c:	980b883a 	mov	r5,r19
  804750:	080c62c0 	call	80c62c <__eqdf2>
  804754:	10002b1e 	bne	r2,zero,804804 <_dtoa_r+0x144>
  804758:	d9c02317 	ldw	r7,140(sp)
  80475c:	00800044 	movi	r2,1
  804760:	38800015 	stw	r2,0(r7)
  804764:	d8802517 	ldw	r2,148(sp)
  804768:	10019e26 	beq	r2,zero,804de4 <_dtoa_r+0x724>
  80476c:	d8c02517 	ldw	r3,148(sp)
  804770:	00802074 	movhi	r2,129
  804774:	10879244 	addi	r2,r2,7753
  804778:	18800015 	stw	r2,0(r3)
  80477c:	10bfffc4 	addi	r2,r2,-1
  804780:	dfc02117 	ldw	ra,132(sp)
  804784:	df002017 	ldw	fp,128(sp)
  804788:	ddc01f17 	ldw	r23,124(sp)
  80478c:	dd801e17 	ldw	r22,120(sp)
  804790:	dd401d17 	ldw	r21,116(sp)
  804794:	dd001c17 	ldw	r20,112(sp)
  804798:	dcc01b17 	ldw	r19,108(sp)
  80479c:	dc801a17 	ldw	r18,104(sp)
  8047a0:	dc401917 	ldw	r17,100(sp)
  8047a4:	dc001817 	ldw	r16,96(sp)
  8047a8:	dec02204 	addi	sp,sp,136
  8047ac:	f800283a 	ret
  8047b0:	d8c02317 	ldw	r3,140(sp)
  8047b4:	0089c3c4 	movi	r2,9999
  8047b8:	18800015 	stw	r2,0(r3)
  8047bc:	90017726 	beq	r18,zero,804d9c <_dtoa_r+0x6dc>
  8047c0:	00802074 	movhi	r2,129
  8047c4:	10879e04 	addi	r2,r2,7800
  8047c8:	d9002517 	ldw	r4,148(sp)
  8047cc:	203fec26 	beq	r4,zero,804780 <__alt_mem_onchip_mem+0xff7fc780>
  8047d0:	10c000c7 	ldb	r3,3(r2)
  8047d4:	1801781e 	bne	r3,zero,804db8 <_dtoa_r+0x6f8>
  8047d8:	10c000c4 	addi	r3,r2,3
  8047dc:	d9802517 	ldw	r6,148(sp)
  8047e0:	30c00015 	stw	r3,0(r6)
  8047e4:	003fe606 	br	804780 <__alt_mem_onchip_mem+0xff7fc780>
  8047e8:	04e00034 	movhi	r19,32768
  8047ec:	9cffffc4 	addi	r19,r19,-1
  8047f0:	00800044 	movi	r2,1
  8047f4:	8ce6703a 	and	r19,r17,r19
  8047f8:	80800015 	stw	r2,0(r16)
  8047fc:	9823883a 	mov	r17,r19
  804800:	003fcc06 	br	804734 <__alt_mem_onchip_mem+0xff7fc734>
  804804:	d8800204 	addi	r2,sp,8
  804808:	d8800015 	stw	r2,0(sp)
  80480c:	d9c00104 	addi	r7,sp,4
  804810:	900b883a 	mov	r5,r18
  804814:	980d883a 	mov	r6,r19
  804818:	e009883a 	mov	r4,fp
  80481c:	8820d53a 	srli	r16,r17,20
  804820:	08080600 	call	808060 <__d2b>
  804824:	d8800915 	stw	r2,36(sp)
  804828:	8001651e 	bne	r16,zero,804dc0 <_dtoa_r+0x700>
  80482c:	dd800217 	ldw	r22,8(sp)
  804830:	dc000117 	ldw	r16,4(sp)
  804834:	00800804 	movi	r2,32
  804838:	b421883a 	add	r16,r22,r16
  80483c:	80c10c84 	addi	r3,r16,1074
  804840:	10c2d10e 	bge	r2,r3,805388 <_dtoa_r+0xcc8>
  804844:	00801004 	movi	r2,64
  804848:	81010484 	addi	r4,r16,1042
  80484c:	10c7c83a 	sub	r3,r2,r3
  804850:	9108d83a 	srl	r4,r18,r4
  804854:	88e2983a 	sll	r17,r17,r3
  804858:	2448b03a 	or	r4,r4,r17
  80485c:	080d9f40 	call	80d9f4 <__floatunsidf>
  804860:	017f8434 	movhi	r5,65040
  804864:	01800044 	movi	r6,1
  804868:	1009883a 	mov	r4,r2
  80486c:	194b883a 	add	r5,r3,r5
  804870:	843fffc4 	addi	r16,r16,-1
  804874:	d9801115 	stw	r6,68(sp)
  804878:	000d883a 	mov	r6,zero
  80487c:	01cffe34 	movhi	r7,16376
  804880:	080cf9c0 	call	80cf9c <__subdf3>
  804884:	0198dbf4 	movhi	r6,25455
  804888:	01cff4f4 	movhi	r7,16339
  80488c:	3190d844 	addi	r6,r6,17249
  804890:	39e1e9c4 	addi	r7,r7,-30809
  804894:	1009883a 	mov	r4,r2
  804898:	180b883a 	mov	r5,r3
  80489c:	080c8840 	call	80c884 <__muldf3>
  8048a0:	01a2d874 	movhi	r6,35681
  8048a4:	01cff1f4 	movhi	r7,16327
  8048a8:	31b22cc4 	addi	r6,r6,-14157
  8048ac:	39e28a04 	addi	r7,r7,-30168
  8048b0:	180b883a 	mov	r5,r3
  8048b4:	1009883a 	mov	r4,r2
  8048b8:	080b4980 	call	80b498 <__adddf3>
  8048bc:	8009883a 	mov	r4,r16
  8048c0:	1029883a 	mov	r20,r2
  8048c4:	1823883a 	mov	r17,r3
  8048c8:	080d9180 	call	80d918 <__floatsidf>
  8048cc:	019427f4 	movhi	r6,20639
  8048d0:	01cff4f4 	movhi	r7,16339
  8048d4:	319e7ec4 	addi	r6,r6,31227
  8048d8:	39d104c4 	addi	r7,r7,17427
  8048dc:	1009883a 	mov	r4,r2
  8048e0:	180b883a 	mov	r5,r3
  8048e4:	080c8840 	call	80c884 <__muldf3>
  8048e8:	100d883a 	mov	r6,r2
  8048ec:	180f883a 	mov	r7,r3
  8048f0:	a009883a 	mov	r4,r20
  8048f4:	880b883a 	mov	r5,r17
  8048f8:	080b4980 	call	80b498 <__adddf3>
  8048fc:	1009883a 	mov	r4,r2
  804900:	180b883a 	mov	r5,r3
  804904:	1029883a 	mov	r20,r2
  804908:	1823883a 	mov	r17,r3
  80490c:	080d8980 	call	80d898 <__fixdfsi>
  804910:	000d883a 	mov	r6,zero
  804914:	000f883a 	mov	r7,zero
  804918:	a009883a 	mov	r4,r20
  80491c:	880b883a 	mov	r5,r17
  804920:	d8800515 	stw	r2,20(sp)
  804924:	080c7900 	call	80c790 <__ledf2>
  804928:	10028716 	blt	r2,zero,805348 <_dtoa_r+0xc88>
  80492c:	d8c00517 	ldw	r3,20(sp)
  804930:	00800584 	movi	r2,22
  804934:	10c27536 	bltu	r2,r3,80530c <_dtoa_r+0xc4c>
  804938:	180490fa 	slli	r2,r3,3
  80493c:	00c02074 	movhi	r3,129
  804940:	18c7b904 	addi	r3,r3,7908
  804944:	1885883a 	add	r2,r3,r2
  804948:	11000017 	ldw	r4,0(r2)
  80494c:	11400117 	ldw	r5,4(r2)
  804950:	900d883a 	mov	r6,r18
  804954:	980f883a 	mov	r7,r19
  804958:	080c6b40 	call	80c6b4 <__gedf2>
  80495c:	00828d0e 	bge	zero,r2,805394 <_dtoa_r+0xcd4>
  804960:	d9000517 	ldw	r4,20(sp)
  804964:	d8000e15 	stw	zero,56(sp)
  804968:	213fffc4 	addi	r4,r4,-1
  80496c:	d9000515 	stw	r4,20(sp)
  804970:	b42dc83a 	sub	r22,r22,r16
  804974:	b5bfffc4 	addi	r22,r22,-1
  804978:	b0026f16 	blt	r22,zero,805338 <_dtoa_r+0xc78>
  80497c:	d8000815 	stw	zero,32(sp)
  804980:	d9c00517 	ldw	r7,20(sp)
  804984:	38026416 	blt	r7,zero,805318 <_dtoa_r+0xc58>
  804988:	b1ed883a 	add	r22,r22,r7
  80498c:	d9c00d15 	stw	r7,52(sp)
  804990:	d8000a15 	stw	zero,40(sp)
  804994:	d9800317 	ldw	r6,12(sp)
  804998:	00800244 	movi	r2,9
  80499c:	11811436 	bltu	r2,r6,804df0 <_dtoa_r+0x730>
  8049a0:	00800144 	movi	r2,5
  8049a4:	1184e10e 	bge	r2,r6,805d2c <_dtoa_r+0x166c>
  8049a8:	31bfff04 	addi	r6,r6,-4
  8049ac:	d9800315 	stw	r6,12(sp)
  8049b0:	0023883a 	mov	r17,zero
  8049b4:	d9800317 	ldw	r6,12(sp)
  8049b8:	008000c4 	movi	r2,3
  8049bc:	30836726 	beq	r6,r2,80575c <_dtoa_r+0x109c>
  8049c0:	1183410e 	bge	r2,r6,8056c8 <_dtoa_r+0x1008>
  8049c4:	d9c00317 	ldw	r7,12(sp)
  8049c8:	00800104 	movi	r2,4
  8049cc:	38827c26 	beq	r7,r2,8053c0 <_dtoa_r+0xd00>
  8049d0:	00800144 	movi	r2,5
  8049d4:	3884c41e 	bne	r7,r2,805ce8 <_dtoa_r+0x1628>
  8049d8:	00800044 	movi	r2,1
  8049dc:	d8800b15 	stw	r2,44(sp)
  8049e0:	d8c00517 	ldw	r3,20(sp)
  8049e4:	d9002217 	ldw	r4,136(sp)
  8049e8:	1907883a 	add	r3,r3,r4
  8049ec:	19800044 	addi	r6,r3,1
  8049f0:	d8c00c15 	stw	r3,48(sp)
  8049f4:	d9800615 	stw	r6,24(sp)
  8049f8:	0183a40e 	bge	zero,r6,80588c <_dtoa_r+0x11cc>
  8049fc:	d9800617 	ldw	r6,24(sp)
  804a00:	3021883a 	mov	r16,r6
  804a04:	e0001115 	stw	zero,68(fp)
  804a08:	008005c4 	movi	r2,23
  804a0c:	1184c92e 	bgeu	r2,r6,805d34 <_dtoa_r+0x1674>
  804a10:	00c00044 	movi	r3,1
  804a14:	00800104 	movi	r2,4
  804a18:	1085883a 	add	r2,r2,r2
  804a1c:	11000504 	addi	r4,r2,20
  804a20:	180b883a 	mov	r5,r3
  804a24:	18c00044 	addi	r3,r3,1
  804a28:	313ffb2e 	bgeu	r6,r4,804a18 <__alt_mem_onchip_mem+0xff7fca18>
  804a2c:	e1401115 	stw	r5,68(fp)
  804a30:	e009883a 	mov	r4,fp
  804a34:	08073cc0 	call	8073cc <_Balloc>
  804a38:	d8800715 	stw	r2,28(sp)
  804a3c:	e0801015 	stw	r2,64(fp)
  804a40:	00800384 	movi	r2,14
  804a44:	1400f736 	bltu	r2,r16,804e24 <_dtoa_r+0x764>
  804a48:	8800f626 	beq	r17,zero,804e24 <_dtoa_r+0x764>
  804a4c:	d9c00517 	ldw	r7,20(sp)
  804a50:	01c39a0e 	bge	zero,r7,8058bc <_dtoa_r+0x11fc>
  804a54:	388003cc 	andi	r2,r7,15
  804a58:	100490fa 	slli	r2,r2,3
  804a5c:	382bd13a 	srai	r21,r7,4
  804a60:	00c02074 	movhi	r3,129
  804a64:	18c7b904 	addi	r3,r3,7908
  804a68:	1885883a 	add	r2,r3,r2
  804a6c:	a8c0040c 	andi	r3,r21,16
  804a70:	12400017 	ldw	r9,0(r2)
  804a74:	12000117 	ldw	r8,4(r2)
  804a78:	18037926 	beq	r3,zero,805860 <_dtoa_r+0x11a0>
  804a7c:	00802074 	movhi	r2,129
  804a80:	1087af04 	addi	r2,r2,7868
  804a84:	11800817 	ldw	r6,32(r2)
  804a88:	11c00917 	ldw	r7,36(r2)
  804a8c:	9009883a 	mov	r4,r18
  804a90:	980b883a 	mov	r5,r19
  804a94:	da001715 	stw	r8,92(sp)
  804a98:	da401615 	stw	r9,88(sp)
  804a9c:	080bd440 	call	80bd44 <__divdf3>
  804aa0:	da001717 	ldw	r8,92(sp)
  804aa4:	da401617 	ldw	r9,88(sp)
  804aa8:	ad4003cc 	andi	r21,r21,15
  804aac:	040000c4 	movi	r16,3
  804ab0:	1023883a 	mov	r17,r2
  804ab4:	1829883a 	mov	r20,r3
  804ab8:	a8001126 	beq	r21,zero,804b00 <_dtoa_r+0x440>
  804abc:	05c02074 	movhi	r23,129
  804ac0:	bdc7af04 	addi	r23,r23,7868
  804ac4:	4805883a 	mov	r2,r9
  804ac8:	4007883a 	mov	r3,r8
  804acc:	a980004c 	andi	r6,r21,1
  804ad0:	1009883a 	mov	r4,r2
  804ad4:	a82bd07a 	srai	r21,r21,1
  804ad8:	180b883a 	mov	r5,r3
  804adc:	30000426 	beq	r6,zero,804af0 <_dtoa_r+0x430>
  804ae0:	b9800017 	ldw	r6,0(r23)
  804ae4:	b9c00117 	ldw	r7,4(r23)
  804ae8:	84000044 	addi	r16,r16,1
  804aec:	080c8840 	call	80c884 <__muldf3>
  804af0:	bdc00204 	addi	r23,r23,8
  804af4:	a83ff51e 	bne	r21,zero,804acc <__alt_mem_onchip_mem+0xff7fcacc>
  804af8:	1013883a 	mov	r9,r2
  804afc:	1811883a 	mov	r8,r3
  804b00:	480d883a 	mov	r6,r9
  804b04:	400f883a 	mov	r7,r8
  804b08:	8809883a 	mov	r4,r17
  804b0c:	a00b883a 	mov	r5,r20
  804b10:	080bd440 	call	80bd44 <__divdf3>
  804b14:	d8800f15 	stw	r2,60(sp)
  804b18:	d8c01015 	stw	r3,64(sp)
  804b1c:	d8c00e17 	ldw	r3,56(sp)
  804b20:	18000626 	beq	r3,zero,804b3c <_dtoa_r+0x47c>
  804b24:	d9000f17 	ldw	r4,60(sp)
  804b28:	d9401017 	ldw	r5,64(sp)
  804b2c:	000d883a 	mov	r6,zero
  804b30:	01cffc34 	movhi	r7,16368
  804b34:	080c7900 	call	80c790 <__ledf2>
  804b38:	10040b16 	blt	r2,zero,805b68 <_dtoa_r+0x14a8>
  804b3c:	8009883a 	mov	r4,r16
  804b40:	080d9180 	call	80d918 <__floatsidf>
  804b44:	d9800f17 	ldw	r6,60(sp)
  804b48:	d9c01017 	ldw	r7,64(sp)
  804b4c:	1009883a 	mov	r4,r2
  804b50:	180b883a 	mov	r5,r3
  804b54:	080c8840 	call	80c884 <__muldf3>
  804b58:	000d883a 	mov	r6,zero
  804b5c:	01d00734 	movhi	r7,16412
  804b60:	1009883a 	mov	r4,r2
  804b64:	180b883a 	mov	r5,r3
  804b68:	080b4980 	call	80b498 <__adddf3>
  804b6c:	1021883a 	mov	r16,r2
  804b70:	d8800617 	ldw	r2,24(sp)
  804b74:	047f3034 	movhi	r17,64704
  804b78:	1c63883a 	add	r17,r3,r17
  804b7c:	10031826 	beq	r2,zero,8057e0 <_dtoa_r+0x1120>
  804b80:	d8c00517 	ldw	r3,20(sp)
  804b84:	db000617 	ldw	r12,24(sp)
  804b88:	d8c01315 	stw	r3,76(sp)
  804b8c:	d9000b17 	ldw	r4,44(sp)
  804b90:	20038f26 	beq	r4,zero,8059d0 <_dtoa_r+0x1310>
  804b94:	60bfffc4 	addi	r2,r12,-1
  804b98:	100490fa 	slli	r2,r2,3
  804b9c:	00c02074 	movhi	r3,129
  804ba0:	18c7b904 	addi	r3,r3,7908
  804ba4:	1885883a 	add	r2,r3,r2
  804ba8:	11800017 	ldw	r6,0(r2)
  804bac:	11c00117 	ldw	r7,4(r2)
  804bb0:	d8800717 	ldw	r2,28(sp)
  804bb4:	0009883a 	mov	r4,zero
  804bb8:	014ff834 	movhi	r5,16352
  804bbc:	db001615 	stw	r12,88(sp)
  804bc0:	15c00044 	addi	r23,r2,1
  804bc4:	080bd440 	call	80bd44 <__divdf3>
  804bc8:	800d883a 	mov	r6,r16
  804bcc:	880f883a 	mov	r7,r17
  804bd0:	1009883a 	mov	r4,r2
  804bd4:	180b883a 	mov	r5,r3
  804bd8:	080cf9c0 	call	80cf9c <__subdf3>
  804bdc:	d9401017 	ldw	r5,64(sp)
  804be0:	d9000f17 	ldw	r4,60(sp)
  804be4:	102b883a 	mov	r21,r2
  804be8:	d8c01215 	stw	r3,72(sp)
  804bec:	080d8980 	call	80d898 <__fixdfsi>
  804bf0:	1009883a 	mov	r4,r2
  804bf4:	1029883a 	mov	r20,r2
  804bf8:	080d9180 	call	80d918 <__floatsidf>
  804bfc:	d9000f17 	ldw	r4,60(sp)
  804c00:	d9401017 	ldw	r5,64(sp)
  804c04:	100d883a 	mov	r6,r2
  804c08:	180f883a 	mov	r7,r3
  804c0c:	080cf9c0 	call	80cf9c <__subdf3>
  804c10:	1823883a 	mov	r17,r3
  804c14:	d8c00717 	ldw	r3,28(sp)
  804c18:	d9401217 	ldw	r5,72(sp)
  804c1c:	a2000c04 	addi	r8,r20,48
  804c20:	1021883a 	mov	r16,r2
  804c24:	1a000005 	stb	r8,0(r3)
  804c28:	800d883a 	mov	r6,r16
  804c2c:	880f883a 	mov	r7,r17
  804c30:	a809883a 	mov	r4,r21
  804c34:	4029883a 	mov	r20,r8
  804c38:	080c6b40 	call	80c6b4 <__gedf2>
  804c3c:	00841d16 	blt	zero,r2,805cb4 <_dtoa_r+0x15f4>
  804c40:	800d883a 	mov	r6,r16
  804c44:	880f883a 	mov	r7,r17
  804c48:	0009883a 	mov	r4,zero
  804c4c:	014ffc34 	movhi	r5,16368
  804c50:	080cf9c0 	call	80cf9c <__subdf3>
  804c54:	d9401217 	ldw	r5,72(sp)
  804c58:	100d883a 	mov	r6,r2
  804c5c:	180f883a 	mov	r7,r3
  804c60:	a809883a 	mov	r4,r21
  804c64:	080c6b40 	call	80c6b4 <__gedf2>
  804c68:	db001617 	ldw	r12,88(sp)
  804c6c:	00840e16 	blt	zero,r2,805ca8 <_dtoa_r+0x15e8>
  804c70:	00800044 	movi	r2,1
  804c74:	13006b0e 	bge	r2,r12,804e24 <_dtoa_r+0x764>
  804c78:	d9000717 	ldw	r4,28(sp)
  804c7c:	dd800f15 	stw	r22,60(sp)
  804c80:	dcc01015 	stw	r19,64(sp)
  804c84:	2319883a 	add	r12,r4,r12
  804c88:	dcc01217 	ldw	r19,72(sp)
  804c8c:	602d883a 	mov	r22,r12
  804c90:	dc801215 	stw	r18,72(sp)
  804c94:	b825883a 	mov	r18,r23
  804c98:	00000906 	br	804cc0 <_dtoa_r+0x600>
  804c9c:	080cf9c0 	call	80cf9c <__subdf3>
  804ca0:	a80d883a 	mov	r6,r21
  804ca4:	980f883a 	mov	r7,r19
  804ca8:	1009883a 	mov	r4,r2
  804cac:	180b883a 	mov	r5,r3
  804cb0:	080c7900 	call	80c790 <__ledf2>
  804cb4:	1003e816 	blt	r2,zero,805c58 <_dtoa_r+0x1598>
  804cb8:	b825883a 	mov	r18,r23
  804cbc:	bd83e926 	beq	r23,r22,805c64 <_dtoa_r+0x15a4>
  804cc0:	a809883a 	mov	r4,r21
  804cc4:	980b883a 	mov	r5,r19
  804cc8:	000d883a 	mov	r6,zero
  804ccc:	01d00934 	movhi	r7,16420
  804cd0:	080c8840 	call	80c884 <__muldf3>
  804cd4:	000d883a 	mov	r6,zero
  804cd8:	01d00934 	movhi	r7,16420
  804cdc:	8009883a 	mov	r4,r16
  804ce0:	880b883a 	mov	r5,r17
  804ce4:	102b883a 	mov	r21,r2
  804ce8:	1827883a 	mov	r19,r3
  804cec:	080c8840 	call	80c884 <__muldf3>
  804cf0:	180b883a 	mov	r5,r3
  804cf4:	1009883a 	mov	r4,r2
  804cf8:	1821883a 	mov	r16,r3
  804cfc:	1023883a 	mov	r17,r2
  804d00:	080d8980 	call	80d898 <__fixdfsi>
  804d04:	1009883a 	mov	r4,r2
  804d08:	1029883a 	mov	r20,r2
  804d0c:	080d9180 	call	80d918 <__floatsidf>
  804d10:	8809883a 	mov	r4,r17
  804d14:	800b883a 	mov	r5,r16
  804d18:	100d883a 	mov	r6,r2
  804d1c:	180f883a 	mov	r7,r3
  804d20:	080cf9c0 	call	80cf9c <__subdf3>
  804d24:	a5000c04 	addi	r20,r20,48
  804d28:	a80d883a 	mov	r6,r21
  804d2c:	980f883a 	mov	r7,r19
  804d30:	1009883a 	mov	r4,r2
  804d34:	180b883a 	mov	r5,r3
  804d38:	95000005 	stb	r20,0(r18)
  804d3c:	1021883a 	mov	r16,r2
  804d40:	1823883a 	mov	r17,r3
  804d44:	080c7900 	call	80c790 <__ledf2>
  804d48:	bdc00044 	addi	r23,r23,1
  804d4c:	800d883a 	mov	r6,r16
  804d50:	880f883a 	mov	r7,r17
  804d54:	0009883a 	mov	r4,zero
  804d58:	014ffc34 	movhi	r5,16368
  804d5c:	103fcf0e 	bge	r2,zero,804c9c <__alt_mem_onchip_mem+0xff7fcc9c>
  804d60:	d8c01317 	ldw	r3,76(sp)
  804d64:	d8c00515 	stw	r3,20(sp)
  804d68:	d9400917 	ldw	r5,36(sp)
  804d6c:	e009883a 	mov	r4,fp
  804d70:	08074740 	call	807474 <_Bfree>
  804d74:	d9000517 	ldw	r4,20(sp)
  804d78:	d9802317 	ldw	r6,140(sp)
  804d7c:	d9c02517 	ldw	r7,148(sp)
  804d80:	b8000005 	stb	zero,0(r23)
  804d84:	20800044 	addi	r2,r4,1
  804d88:	30800015 	stw	r2,0(r6)
  804d8c:	3802aa26 	beq	r7,zero,805838 <_dtoa_r+0x1178>
  804d90:	3dc00015 	stw	r23,0(r7)
  804d94:	d8800717 	ldw	r2,28(sp)
  804d98:	003e7906 	br	804780 <__alt_mem_onchip_mem+0xff7fc780>
  804d9c:	00800434 	movhi	r2,16
  804da0:	10bfffc4 	addi	r2,r2,-1
  804da4:	88a2703a 	and	r17,r17,r2
  804da8:	883e851e 	bne	r17,zero,8047c0 <__alt_mem_onchip_mem+0xff7fc7c0>
  804dac:	00802074 	movhi	r2,129
  804db0:	10879b04 	addi	r2,r2,7788
  804db4:	003e8406 	br	8047c8 <__alt_mem_onchip_mem+0xff7fc7c8>
  804db8:	10c00204 	addi	r3,r2,8
  804dbc:	003e8706 	br	8047dc <__alt_mem_onchip_mem+0xff7fc7dc>
  804dc0:	01400434 	movhi	r5,16
  804dc4:	297fffc4 	addi	r5,r5,-1
  804dc8:	994a703a 	and	r5,r19,r5
  804dcc:	9009883a 	mov	r4,r18
  804dd0:	843f0044 	addi	r16,r16,-1023
  804dd4:	294ffc34 	orhi	r5,r5,16368
  804dd8:	dd800217 	ldw	r22,8(sp)
  804ddc:	d8001115 	stw	zero,68(sp)
  804de0:	003ea506 	br	804878 <__alt_mem_onchip_mem+0xff7fc878>
  804de4:	00802074 	movhi	r2,129
  804de8:	10879204 	addi	r2,r2,7752
  804dec:	003e6406 	br	804780 <__alt_mem_onchip_mem+0xff7fc780>
  804df0:	e0001115 	stw	zero,68(fp)
  804df4:	000b883a 	mov	r5,zero
  804df8:	e009883a 	mov	r4,fp
  804dfc:	08073cc0 	call	8073cc <_Balloc>
  804e00:	01bfffc4 	movi	r6,-1
  804e04:	01c00044 	movi	r7,1
  804e08:	d8800715 	stw	r2,28(sp)
  804e0c:	d9800c15 	stw	r6,48(sp)
  804e10:	e0801015 	stw	r2,64(fp)
  804e14:	d8000315 	stw	zero,12(sp)
  804e18:	d9c00b15 	stw	r7,44(sp)
  804e1c:	d9800615 	stw	r6,24(sp)
  804e20:	d8002215 	stw	zero,136(sp)
  804e24:	d8800117 	ldw	r2,4(sp)
  804e28:	10008916 	blt	r2,zero,805050 <_dtoa_r+0x990>
  804e2c:	d9000517 	ldw	r4,20(sp)
  804e30:	00c00384 	movi	r3,14
  804e34:	19008616 	blt	r3,r4,805050 <_dtoa_r+0x990>
  804e38:	200490fa 	slli	r2,r4,3
  804e3c:	00c02074 	movhi	r3,129
  804e40:	d9802217 	ldw	r6,136(sp)
  804e44:	18c7b904 	addi	r3,r3,7908
  804e48:	1885883a 	add	r2,r3,r2
  804e4c:	14000017 	ldw	r16,0(r2)
  804e50:	14400117 	ldw	r17,4(r2)
  804e54:	30016316 	blt	r6,zero,8053e4 <_dtoa_r+0xd24>
  804e58:	800d883a 	mov	r6,r16
  804e5c:	880f883a 	mov	r7,r17
  804e60:	9009883a 	mov	r4,r18
  804e64:	980b883a 	mov	r5,r19
  804e68:	080bd440 	call	80bd44 <__divdf3>
  804e6c:	180b883a 	mov	r5,r3
  804e70:	1009883a 	mov	r4,r2
  804e74:	080d8980 	call	80d898 <__fixdfsi>
  804e78:	1009883a 	mov	r4,r2
  804e7c:	102b883a 	mov	r21,r2
  804e80:	080d9180 	call	80d918 <__floatsidf>
  804e84:	800d883a 	mov	r6,r16
  804e88:	880f883a 	mov	r7,r17
  804e8c:	1009883a 	mov	r4,r2
  804e90:	180b883a 	mov	r5,r3
  804e94:	080c8840 	call	80c884 <__muldf3>
  804e98:	100d883a 	mov	r6,r2
  804e9c:	180f883a 	mov	r7,r3
  804ea0:	9009883a 	mov	r4,r18
  804ea4:	980b883a 	mov	r5,r19
  804ea8:	080cf9c0 	call	80cf9c <__subdf3>
  804eac:	d9c00717 	ldw	r7,28(sp)
  804eb0:	1009883a 	mov	r4,r2
  804eb4:	a8800c04 	addi	r2,r21,48
  804eb8:	38800005 	stb	r2,0(r7)
  804ebc:	3dc00044 	addi	r23,r7,1
  804ec0:	d9c00617 	ldw	r7,24(sp)
  804ec4:	01800044 	movi	r6,1
  804ec8:	180b883a 	mov	r5,r3
  804ecc:	2005883a 	mov	r2,r4
  804ed0:	39803826 	beq	r7,r6,804fb4 <_dtoa_r+0x8f4>
  804ed4:	000d883a 	mov	r6,zero
  804ed8:	01d00934 	movhi	r7,16420
  804edc:	080c8840 	call	80c884 <__muldf3>
  804ee0:	000d883a 	mov	r6,zero
  804ee4:	000f883a 	mov	r7,zero
  804ee8:	1009883a 	mov	r4,r2
  804eec:	180b883a 	mov	r5,r3
  804ef0:	1025883a 	mov	r18,r2
  804ef4:	1827883a 	mov	r19,r3
  804ef8:	080c62c0 	call	80c62c <__eqdf2>
  804efc:	103f9a26 	beq	r2,zero,804d68 <__alt_mem_onchip_mem+0xff7fcd68>
  804f00:	d9c00617 	ldw	r7,24(sp)
  804f04:	d8c00717 	ldw	r3,28(sp)
  804f08:	b829883a 	mov	r20,r23
  804f0c:	38bfffc4 	addi	r2,r7,-1
  804f10:	18ad883a 	add	r22,r3,r2
  804f14:	00000a06 	br	804f40 <_dtoa_r+0x880>
  804f18:	080c8840 	call	80c884 <__muldf3>
  804f1c:	000d883a 	mov	r6,zero
  804f20:	000f883a 	mov	r7,zero
  804f24:	1009883a 	mov	r4,r2
  804f28:	180b883a 	mov	r5,r3
  804f2c:	1025883a 	mov	r18,r2
  804f30:	1827883a 	mov	r19,r3
  804f34:	b829883a 	mov	r20,r23
  804f38:	080c62c0 	call	80c62c <__eqdf2>
  804f3c:	103f8a26 	beq	r2,zero,804d68 <__alt_mem_onchip_mem+0xff7fcd68>
  804f40:	800d883a 	mov	r6,r16
  804f44:	880f883a 	mov	r7,r17
  804f48:	9009883a 	mov	r4,r18
  804f4c:	980b883a 	mov	r5,r19
  804f50:	080bd440 	call	80bd44 <__divdf3>
  804f54:	180b883a 	mov	r5,r3
  804f58:	1009883a 	mov	r4,r2
  804f5c:	080d8980 	call	80d898 <__fixdfsi>
  804f60:	1009883a 	mov	r4,r2
  804f64:	102b883a 	mov	r21,r2
  804f68:	080d9180 	call	80d918 <__floatsidf>
  804f6c:	800d883a 	mov	r6,r16
  804f70:	880f883a 	mov	r7,r17
  804f74:	1009883a 	mov	r4,r2
  804f78:	180b883a 	mov	r5,r3
  804f7c:	080c8840 	call	80c884 <__muldf3>
  804f80:	100d883a 	mov	r6,r2
  804f84:	180f883a 	mov	r7,r3
  804f88:	9009883a 	mov	r4,r18
  804f8c:	980b883a 	mov	r5,r19
  804f90:	080cf9c0 	call	80cf9c <__subdf3>
  804f94:	aa000c04 	addi	r8,r21,48
  804f98:	a2000005 	stb	r8,0(r20)
  804f9c:	000d883a 	mov	r6,zero
  804fa0:	01d00934 	movhi	r7,16420
  804fa4:	1009883a 	mov	r4,r2
  804fa8:	180b883a 	mov	r5,r3
  804fac:	a5c00044 	addi	r23,r20,1
  804fb0:	b53fd91e 	bne	r22,r20,804f18 <__alt_mem_onchip_mem+0xff7fcf18>
  804fb4:	100d883a 	mov	r6,r2
  804fb8:	180f883a 	mov	r7,r3
  804fbc:	1009883a 	mov	r4,r2
  804fc0:	180b883a 	mov	r5,r3
  804fc4:	080b4980 	call	80b498 <__adddf3>
  804fc8:	100d883a 	mov	r6,r2
  804fcc:	180f883a 	mov	r7,r3
  804fd0:	8009883a 	mov	r4,r16
  804fd4:	880b883a 	mov	r5,r17
  804fd8:	1027883a 	mov	r19,r2
  804fdc:	1825883a 	mov	r18,r3
  804fe0:	080c7900 	call	80c790 <__ledf2>
  804fe4:	10000816 	blt	r2,zero,805008 <_dtoa_r+0x948>
  804fe8:	980d883a 	mov	r6,r19
  804fec:	900f883a 	mov	r7,r18
  804ff0:	8009883a 	mov	r4,r16
  804ff4:	880b883a 	mov	r5,r17
  804ff8:	080c62c0 	call	80c62c <__eqdf2>
  804ffc:	103f5a1e 	bne	r2,zero,804d68 <__alt_mem_onchip_mem+0xff7fcd68>
  805000:	ad40004c 	andi	r21,r21,1
  805004:	a83f5826 	beq	r21,zero,804d68 <__alt_mem_onchip_mem+0xff7fcd68>
  805008:	bd3fffc3 	ldbu	r20,-1(r23)
  80500c:	b8bfffc4 	addi	r2,r23,-1
  805010:	1007883a 	mov	r3,r2
  805014:	01400e44 	movi	r5,57
  805018:	d9800717 	ldw	r6,28(sp)
  80501c:	00000506 	br	805034 <_dtoa_r+0x974>
  805020:	18ffffc4 	addi	r3,r3,-1
  805024:	11824726 	beq	r2,r6,805944 <_dtoa_r+0x1284>
  805028:	1d000003 	ldbu	r20,0(r3)
  80502c:	102f883a 	mov	r23,r2
  805030:	10bfffc4 	addi	r2,r2,-1
  805034:	a1003fcc 	andi	r4,r20,255
  805038:	2100201c 	xori	r4,r4,128
  80503c:	213fe004 	addi	r4,r4,-128
  805040:	217ff726 	beq	r4,r5,805020 <__alt_mem_onchip_mem+0xff7fd020>
  805044:	a2000044 	addi	r8,r20,1
  805048:	12000005 	stb	r8,0(r2)
  80504c:	003f4606 	br	804d68 <__alt_mem_onchip_mem+0xff7fcd68>
  805050:	d9000b17 	ldw	r4,44(sp)
  805054:	2000c826 	beq	r4,zero,805378 <_dtoa_r+0xcb8>
  805058:	d9800317 	ldw	r6,12(sp)
  80505c:	00c00044 	movi	r3,1
  805060:	1980f90e 	bge	r3,r6,805448 <_dtoa_r+0xd88>
  805064:	d8800617 	ldw	r2,24(sp)
  805068:	d8c00a17 	ldw	r3,40(sp)
  80506c:	157fffc4 	addi	r21,r2,-1
  805070:	1d41f316 	blt	r3,r21,805840 <_dtoa_r+0x1180>
  805074:	1d6bc83a 	sub	r21,r3,r21
  805078:	d9c00617 	ldw	r7,24(sp)
  80507c:	3802aa16 	blt	r7,zero,805b28 <_dtoa_r+0x1468>
  805080:	dd000817 	ldw	r20,32(sp)
  805084:	d8800617 	ldw	r2,24(sp)
  805088:	d8c00817 	ldw	r3,32(sp)
  80508c:	01400044 	movi	r5,1
  805090:	e009883a 	mov	r4,fp
  805094:	1887883a 	add	r3,r3,r2
  805098:	d8c00815 	stw	r3,32(sp)
  80509c:	b0ad883a 	add	r22,r22,r2
  8050a0:	08077d80 	call	8077d8 <__i2b>
  8050a4:	1023883a 	mov	r17,r2
  8050a8:	a0000826 	beq	r20,zero,8050cc <_dtoa_r+0xa0c>
  8050ac:	0580070e 	bge	zero,r22,8050cc <_dtoa_r+0xa0c>
  8050b0:	a005883a 	mov	r2,r20
  8050b4:	b500b916 	blt	r22,r20,80539c <_dtoa_r+0xcdc>
  8050b8:	d9000817 	ldw	r4,32(sp)
  8050bc:	a0a9c83a 	sub	r20,r20,r2
  8050c0:	b0adc83a 	sub	r22,r22,r2
  8050c4:	2089c83a 	sub	r4,r4,r2
  8050c8:	d9000815 	stw	r4,32(sp)
  8050cc:	d9800a17 	ldw	r6,40(sp)
  8050d0:	0181810e 	bge	zero,r6,8056d8 <_dtoa_r+0x1018>
  8050d4:	d9c00b17 	ldw	r7,44(sp)
  8050d8:	3800b326 	beq	r7,zero,8053a8 <_dtoa_r+0xce8>
  8050dc:	a800b226 	beq	r21,zero,8053a8 <_dtoa_r+0xce8>
  8050e0:	880b883a 	mov	r5,r17
  8050e4:	a80d883a 	mov	r6,r21
  8050e8:	e009883a 	mov	r4,fp
  8050ec:	0807a0c0 	call	807a0c <__pow5mult>
  8050f0:	d9800917 	ldw	r6,36(sp)
  8050f4:	100b883a 	mov	r5,r2
  8050f8:	e009883a 	mov	r4,fp
  8050fc:	1023883a 	mov	r17,r2
  805100:	08078140 	call	807814 <__multiply>
  805104:	1021883a 	mov	r16,r2
  805108:	d8800a17 	ldw	r2,40(sp)
  80510c:	d9400917 	ldw	r5,36(sp)
  805110:	e009883a 	mov	r4,fp
  805114:	1545c83a 	sub	r2,r2,r21
  805118:	d8800a15 	stw	r2,40(sp)
  80511c:	08074740 	call	807474 <_Bfree>
  805120:	d8c00a17 	ldw	r3,40(sp)
  805124:	18009f1e 	bne	r3,zero,8053a4 <_dtoa_r+0xce4>
  805128:	05c00044 	movi	r23,1
  80512c:	e009883a 	mov	r4,fp
  805130:	b80b883a 	mov	r5,r23
  805134:	08077d80 	call	8077d8 <__i2b>
  805138:	d9000d17 	ldw	r4,52(sp)
  80513c:	102b883a 	mov	r21,r2
  805140:	2000ce26 	beq	r4,zero,80547c <_dtoa_r+0xdbc>
  805144:	200d883a 	mov	r6,r4
  805148:	100b883a 	mov	r5,r2
  80514c:	e009883a 	mov	r4,fp
  805150:	0807a0c0 	call	807a0c <__pow5mult>
  805154:	d9800317 	ldw	r6,12(sp)
  805158:	102b883a 	mov	r21,r2
  80515c:	b981810e 	bge	r23,r6,805764 <_dtoa_r+0x10a4>
  805160:	0027883a 	mov	r19,zero
  805164:	a8800417 	ldw	r2,16(r21)
  805168:	05c00804 	movi	r23,32
  80516c:	10800104 	addi	r2,r2,4
  805170:	1085883a 	add	r2,r2,r2
  805174:	1085883a 	add	r2,r2,r2
  805178:	a885883a 	add	r2,r21,r2
  80517c:	11000017 	ldw	r4,0(r2)
  805180:	08076c00 	call	8076c0 <__hi0bits>
  805184:	b885c83a 	sub	r2,r23,r2
  805188:	1585883a 	add	r2,r2,r22
  80518c:	108007cc 	andi	r2,r2,31
  805190:	1000b326 	beq	r2,zero,805460 <_dtoa_r+0xda0>
  805194:	00c00804 	movi	r3,32
  805198:	1887c83a 	sub	r3,r3,r2
  80519c:	01000104 	movi	r4,4
  8051a0:	20c2cd0e 	bge	r4,r3,805cd8 <_dtoa_r+0x1618>
  8051a4:	00c00704 	movi	r3,28
  8051a8:	1885c83a 	sub	r2,r3,r2
  8051ac:	d8c00817 	ldw	r3,32(sp)
  8051b0:	a0a9883a 	add	r20,r20,r2
  8051b4:	b0ad883a 	add	r22,r22,r2
  8051b8:	1887883a 	add	r3,r3,r2
  8051bc:	d8c00815 	stw	r3,32(sp)
  8051c0:	d9800817 	ldw	r6,32(sp)
  8051c4:	0180040e 	bge	zero,r6,8051d8 <_dtoa_r+0xb18>
  8051c8:	800b883a 	mov	r5,r16
  8051cc:	e009883a 	mov	r4,fp
  8051d0:	0807b4c0 	call	807b4c <__lshift>
  8051d4:	1021883a 	mov	r16,r2
  8051d8:	0580050e 	bge	zero,r22,8051f0 <_dtoa_r+0xb30>
  8051dc:	a80b883a 	mov	r5,r21
  8051e0:	b00d883a 	mov	r6,r22
  8051e4:	e009883a 	mov	r4,fp
  8051e8:	0807b4c0 	call	807b4c <__lshift>
  8051ec:	102b883a 	mov	r21,r2
  8051f0:	d9c00e17 	ldw	r7,56(sp)
  8051f4:	3801211e 	bne	r7,zero,80567c <_dtoa_r+0xfbc>
  8051f8:	d9800617 	ldw	r6,24(sp)
  8051fc:	0181380e 	bge	zero,r6,8056e0 <_dtoa_r+0x1020>
  805200:	d8c00b17 	ldw	r3,44(sp)
  805204:	1800ab1e 	bne	r3,zero,8054b4 <_dtoa_r+0xdf4>
  805208:	dc800717 	ldw	r18,28(sp)
  80520c:	dcc00617 	ldw	r19,24(sp)
  805210:	9029883a 	mov	r20,r18
  805214:	00000206 	br	805220 <_dtoa_r+0xb60>
  805218:	080749c0 	call	80749c <__multadd>
  80521c:	1021883a 	mov	r16,r2
  805220:	a80b883a 	mov	r5,r21
  805224:	8009883a 	mov	r4,r16
  805228:	08044c00 	call	8044c0 <quorem>
  80522c:	10800c04 	addi	r2,r2,48
  805230:	90800005 	stb	r2,0(r18)
  805234:	94800044 	addi	r18,r18,1
  805238:	9507c83a 	sub	r3,r18,r20
  80523c:	000f883a 	mov	r7,zero
  805240:	01800284 	movi	r6,10
  805244:	800b883a 	mov	r5,r16
  805248:	e009883a 	mov	r4,fp
  80524c:	1cfff216 	blt	r3,r19,805218 <__alt_mem_onchip_mem+0xff7fd218>
  805250:	1011883a 	mov	r8,r2
  805254:	d8800617 	ldw	r2,24(sp)
  805258:	0082370e 	bge	zero,r2,805b38 <_dtoa_r+0x1478>
  80525c:	d9000717 	ldw	r4,28(sp)
  805260:	0025883a 	mov	r18,zero
  805264:	20af883a 	add	r23,r4,r2
  805268:	01800044 	movi	r6,1
  80526c:	800b883a 	mov	r5,r16
  805270:	e009883a 	mov	r4,fp
  805274:	da001715 	stw	r8,92(sp)
  805278:	0807b4c0 	call	807b4c <__lshift>
  80527c:	a80b883a 	mov	r5,r21
  805280:	1009883a 	mov	r4,r2
  805284:	d8800915 	stw	r2,36(sp)
  805288:	0807c940 	call	807c94 <__mcmp>
  80528c:	da001717 	ldw	r8,92(sp)
  805290:	0081800e 	bge	zero,r2,805894 <_dtoa_r+0x11d4>
  805294:	b93fffc3 	ldbu	r4,-1(r23)
  805298:	b8bfffc4 	addi	r2,r23,-1
  80529c:	1007883a 	mov	r3,r2
  8052a0:	01800e44 	movi	r6,57
  8052a4:	d9c00717 	ldw	r7,28(sp)
  8052a8:	00000506 	br	8052c0 <_dtoa_r+0xc00>
  8052ac:	18ffffc4 	addi	r3,r3,-1
  8052b0:	11c12326 	beq	r2,r7,805740 <_dtoa_r+0x1080>
  8052b4:	19000003 	ldbu	r4,0(r3)
  8052b8:	102f883a 	mov	r23,r2
  8052bc:	10bfffc4 	addi	r2,r2,-1
  8052c0:	21403fcc 	andi	r5,r4,255
  8052c4:	2940201c 	xori	r5,r5,128
  8052c8:	297fe004 	addi	r5,r5,-128
  8052cc:	29bff726 	beq	r5,r6,8052ac <__alt_mem_onchip_mem+0xff7fd2ac>
  8052d0:	21000044 	addi	r4,r4,1
  8052d4:	11000005 	stb	r4,0(r2)
  8052d8:	a80b883a 	mov	r5,r21
  8052dc:	e009883a 	mov	r4,fp
  8052e0:	08074740 	call	807474 <_Bfree>
  8052e4:	883ea026 	beq	r17,zero,804d68 <__alt_mem_onchip_mem+0xff7fcd68>
  8052e8:	90000426 	beq	r18,zero,8052fc <_dtoa_r+0xc3c>
  8052ec:	94400326 	beq	r18,r17,8052fc <_dtoa_r+0xc3c>
  8052f0:	900b883a 	mov	r5,r18
  8052f4:	e009883a 	mov	r4,fp
  8052f8:	08074740 	call	807474 <_Bfree>
  8052fc:	880b883a 	mov	r5,r17
  805300:	e009883a 	mov	r4,fp
  805304:	08074740 	call	807474 <_Bfree>
  805308:	003e9706 	br	804d68 <__alt_mem_onchip_mem+0xff7fcd68>
  80530c:	01800044 	movi	r6,1
  805310:	d9800e15 	stw	r6,56(sp)
  805314:	003d9606 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  805318:	d8800817 	ldw	r2,32(sp)
  80531c:	d8c00517 	ldw	r3,20(sp)
  805320:	d8000d15 	stw	zero,52(sp)
  805324:	10c5c83a 	sub	r2,r2,r3
  805328:	00c9c83a 	sub	r4,zero,r3
  80532c:	d8800815 	stw	r2,32(sp)
  805330:	d9000a15 	stw	r4,40(sp)
  805334:	003d9706 	br	804994 <__alt_mem_onchip_mem+0xff7fc994>
  805338:	05adc83a 	sub	r22,zero,r22
  80533c:	dd800815 	stw	r22,32(sp)
  805340:	002d883a 	mov	r22,zero
  805344:	003d8e06 	br	804980 <__alt_mem_onchip_mem+0xff7fc980>
  805348:	d9000517 	ldw	r4,20(sp)
  80534c:	080d9180 	call	80d918 <__floatsidf>
  805350:	100d883a 	mov	r6,r2
  805354:	180f883a 	mov	r7,r3
  805358:	a009883a 	mov	r4,r20
  80535c:	880b883a 	mov	r5,r17
  805360:	080c62c0 	call	80c62c <__eqdf2>
  805364:	103d7126 	beq	r2,zero,80492c <__alt_mem_onchip_mem+0xff7fc92c>
  805368:	d9c00517 	ldw	r7,20(sp)
  80536c:	39ffffc4 	addi	r7,r7,-1
  805370:	d9c00515 	stw	r7,20(sp)
  805374:	003d6d06 	br	80492c <__alt_mem_onchip_mem+0xff7fc92c>
  805378:	dd400a17 	ldw	r21,40(sp)
  80537c:	dd000817 	ldw	r20,32(sp)
  805380:	0023883a 	mov	r17,zero
  805384:	003f4806 	br	8050a8 <__alt_mem_onchip_mem+0xff7fd0a8>
  805388:	10e3c83a 	sub	r17,r2,r3
  80538c:	9448983a 	sll	r4,r18,r17
  805390:	003d3206 	br	80485c <__alt_mem_onchip_mem+0xff7fc85c>
  805394:	d8000e15 	stw	zero,56(sp)
  805398:	003d7506 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  80539c:	b005883a 	mov	r2,r22
  8053a0:	003f4506 	br	8050b8 <__alt_mem_onchip_mem+0xff7fd0b8>
  8053a4:	dc000915 	stw	r16,36(sp)
  8053a8:	d9800a17 	ldw	r6,40(sp)
  8053ac:	d9400917 	ldw	r5,36(sp)
  8053b0:	e009883a 	mov	r4,fp
  8053b4:	0807a0c0 	call	807a0c <__pow5mult>
  8053b8:	1021883a 	mov	r16,r2
  8053bc:	003f5a06 	br	805128 <__alt_mem_onchip_mem+0xff7fd128>
  8053c0:	01c00044 	movi	r7,1
  8053c4:	d9c00b15 	stw	r7,44(sp)
  8053c8:	d8802217 	ldw	r2,136(sp)
  8053cc:	0081280e 	bge	zero,r2,805870 <_dtoa_r+0x11b0>
  8053d0:	100d883a 	mov	r6,r2
  8053d4:	1021883a 	mov	r16,r2
  8053d8:	d8800c15 	stw	r2,48(sp)
  8053dc:	d8800615 	stw	r2,24(sp)
  8053e0:	003d8806 	br	804a04 <__alt_mem_onchip_mem+0xff7fca04>
  8053e4:	d8800617 	ldw	r2,24(sp)
  8053e8:	00be9b16 	blt	zero,r2,804e58 <__alt_mem_onchip_mem+0xff7fce58>
  8053ec:	10010f1e 	bne	r2,zero,80582c <_dtoa_r+0x116c>
  8053f0:	880b883a 	mov	r5,r17
  8053f4:	000d883a 	mov	r6,zero
  8053f8:	01d00534 	movhi	r7,16404
  8053fc:	8009883a 	mov	r4,r16
  805400:	080c8840 	call	80c884 <__muldf3>
  805404:	900d883a 	mov	r6,r18
  805408:	980f883a 	mov	r7,r19
  80540c:	1009883a 	mov	r4,r2
  805410:	180b883a 	mov	r5,r3
  805414:	080c6b40 	call	80c6b4 <__gedf2>
  805418:	002b883a 	mov	r21,zero
  80541c:	0023883a 	mov	r17,zero
  805420:	1000bf16 	blt	r2,zero,805720 <_dtoa_r+0x1060>
  805424:	d9802217 	ldw	r6,136(sp)
  805428:	ddc00717 	ldw	r23,28(sp)
  80542c:	018c303a 	nor	r6,zero,r6
  805430:	d9800515 	stw	r6,20(sp)
  805434:	a80b883a 	mov	r5,r21
  805438:	e009883a 	mov	r4,fp
  80543c:	08074740 	call	807474 <_Bfree>
  805440:	883e4926 	beq	r17,zero,804d68 <__alt_mem_onchip_mem+0xff7fcd68>
  805444:	003fad06 	br	8052fc <__alt_mem_onchip_mem+0xff7fd2fc>
  805448:	d9c01117 	ldw	r7,68(sp)
  80544c:	3801bc26 	beq	r7,zero,805b40 <_dtoa_r+0x1480>
  805450:	10810cc4 	addi	r2,r2,1075
  805454:	dd400a17 	ldw	r21,40(sp)
  805458:	dd000817 	ldw	r20,32(sp)
  80545c:	003f0a06 	br	805088 <__alt_mem_onchip_mem+0xff7fd088>
  805460:	00800704 	movi	r2,28
  805464:	d9000817 	ldw	r4,32(sp)
  805468:	a0a9883a 	add	r20,r20,r2
  80546c:	b0ad883a 	add	r22,r22,r2
  805470:	2089883a 	add	r4,r4,r2
  805474:	d9000815 	stw	r4,32(sp)
  805478:	003f5106 	br	8051c0 <__alt_mem_onchip_mem+0xff7fd1c0>
  80547c:	d8c00317 	ldw	r3,12(sp)
  805480:	b8c1fc0e 	bge	r23,r3,805c74 <_dtoa_r+0x15b4>
  805484:	0027883a 	mov	r19,zero
  805488:	b805883a 	mov	r2,r23
  80548c:	003f3e06 	br	805188 <__alt_mem_onchip_mem+0xff7fd188>
  805490:	880b883a 	mov	r5,r17
  805494:	e009883a 	mov	r4,fp
  805498:	000f883a 	mov	r7,zero
  80549c:	01800284 	movi	r6,10
  8054a0:	080749c0 	call	80749c <__multadd>
  8054a4:	d9000c17 	ldw	r4,48(sp)
  8054a8:	1023883a 	mov	r17,r2
  8054ac:	0102040e 	bge	zero,r4,805cc0 <_dtoa_r+0x1600>
  8054b0:	d9000615 	stw	r4,24(sp)
  8054b4:	0500050e 	bge	zero,r20,8054cc <_dtoa_r+0xe0c>
  8054b8:	880b883a 	mov	r5,r17
  8054bc:	a00d883a 	mov	r6,r20
  8054c0:	e009883a 	mov	r4,fp
  8054c4:	0807b4c0 	call	807b4c <__lshift>
  8054c8:	1023883a 	mov	r17,r2
  8054cc:	9801241e 	bne	r19,zero,805960 <_dtoa_r+0x12a0>
  8054d0:	8829883a 	mov	r20,r17
  8054d4:	d9000617 	ldw	r4,24(sp)
  8054d8:	dcc00717 	ldw	r19,28(sp)
  8054dc:	9480004c 	andi	r18,r18,1
  8054e0:	20bfffc4 	addi	r2,r4,-1
  8054e4:	9885883a 	add	r2,r19,r2
  8054e8:	d8800415 	stw	r2,16(sp)
  8054ec:	dc800615 	stw	r18,24(sp)
  8054f0:	a80b883a 	mov	r5,r21
  8054f4:	8009883a 	mov	r4,r16
  8054f8:	08044c00 	call	8044c0 <quorem>
  8054fc:	880b883a 	mov	r5,r17
  805500:	8009883a 	mov	r4,r16
  805504:	102f883a 	mov	r23,r2
  805508:	0807c940 	call	807c94 <__mcmp>
  80550c:	a80b883a 	mov	r5,r21
  805510:	a00d883a 	mov	r6,r20
  805514:	e009883a 	mov	r4,fp
  805518:	102d883a 	mov	r22,r2
  80551c:	0807cf40 	call	807cf4 <__mdiff>
  805520:	1007883a 	mov	r3,r2
  805524:	10800317 	ldw	r2,12(r2)
  805528:	bc800c04 	addi	r18,r23,48
  80552c:	180b883a 	mov	r5,r3
  805530:	10004e1e 	bne	r2,zero,80566c <_dtoa_r+0xfac>
  805534:	8009883a 	mov	r4,r16
  805538:	d8c01615 	stw	r3,88(sp)
  80553c:	0807c940 	call	807c94 <__mcmp>
  805540:	d8c01617 	ldw	r3,88(sp)
  805544:	e009883a 	mov	r4,fp
  805548:	d8801615 	stw	r2,88(sp)
  80554c:	180b883a 	mov	r5,r3
  805550:	08074740 	call	807474 <_Bfree>
  805554:	d8801617 	ldw	r2,88(sp)
  805558:	1000041e 	bne	r2,zero,80556c <_dtoa_r+0xeac>
  80555c:	d9800317 	ldw	r6,12(sp)
  805560:	3000021e 	bne	r6,zero,80556c <_dtoa_r+0xeac>
  805564:	d8c00617 	ldw	r3,24(sp)
  805568:	18003726 	beq	r3,zero,805648 <_dtoa_r+0xf88>
  80556c:	b0002016 	blt	r22,zero,8055f0 <_dtoa_r+0xf30>
  805570:	b000041e 	bne	r22,zero,805584 <_dtoa_r+0xec4>
  805574:	d9000317 	ldw	r4,12(sp)
  805578:	2000021e 	bne	r4,zero,805584 <_dtoa_r+0xec4>
  80557c:	d8c00617 	ldw	r3,24(sp)
  805580:	18001b26 	beq	r3,zero,8055f0 <_dtoa_r+0xf30>
  805584:	00810716 	blt	zero,r2,8059a4 <_dtoa_r+0x12e4>
  805588:	d8c00417 	ldw	r3,16(sp)
  80558c:	9d800044 	addi	r22,r19,1
  805590:	9c800005 	stb	r18,0(r19)
  805594:	b02f883a 	mov	r23,r22
  805598:	98c10626 	beq	r19,r3,8059b4 <_dtoa_r+0x12f4>
  80559c:	800b883a 	mov	r5,r16
  8055a0:	000f883a 	mov	r7,zero
  8055a4:	01800284 	movi	r6,10
  8055a8:	e009883a 	mov	r4,fp
  8055ac:	080749c0 	call	80749c <__multadd>
  8055b0:	1021883a 	mov	r16,r2
  8055b4:	000f883a 	mov	r7,zero
  8055b8:	01800284 	movi	r6,10
  8055bc:	880b883a 	mov	r5,r17
  8055c0:	e009883a 	mov	r4,fp
  8055c4:	8d002526 	beq	r17,r20,80565c <_dtoa_r+0xf9c>
  8055c8:	080749c0 	call	80749c <__multadd>
  8055cc:	a00b883a 	mov	r5,r20
  8055d0:	000f883a 	mov	r7,zero
  8055d4:	01800284 	movi	r6,10
  8055d8:	e009883a 	mov	r4,fp
  8055dc:	1023883a 	mov	r17,r2
  8055e0:	080749c0 	call	80749c <__multadd>
  8055e4:	1029883a 	mov	r20,r2
  8055e8:	b027883a 	mov	r19,r22
  8055ec:	003fc006 	br	8054f0 <__alt_mem_onchip_mem+0xff7fd4f0>
  8055f0:	9011883a 	mov	r8,r18
  8055f4:	00800e0e 	bge	zero,r2,805630 <_dtoa_r+0xf70>
  8055f8:	800b883a 	mov	r5,r16
  8055fc:	01800044 	movi	r6,1
  805600:	e009883a 	mov	r4,fp
  805604:	da001715 	stw	r8,92(sp)
  805608:	0807b4c0 	call	807b4c <__lshift>
  80560c:	a80b883a 	mov	r5,r21
  805610:	1009883a 	mov	r4,r2
  805614:	1021883a 	mov	r16,r2
  805618:	0807c940 	call	807c94 <__mcmp>
  80561c:	da001717 	ldw	r8,92(sp)
  805620:	0081960e 	bge	zero,r2,805c7c <_dtoa_r+0x15bc>
  805624:	00800e44 	movi	r2,57
  805628:	40817026 	beq	r8,r2,805bec <_dtoa_r+0x152c>
  80562c:	ba000c44 	addi	r8,r23,49
  805630:	8825883a 	mov	r18,r17
  805634:	9dc00044 	addi	r23,r19,1
  805638:	9a000005 	stb	r8,0(r19)
  80563c:	a023883a 	mov	r17,r20
  805640:	dc000915 	stw	r16,36(sp)
  805644:	003f2406 	br	8052d8 <__alt_mem_onchip_mem+0xff7fd2d8>
  805648:	00800e44 	movi	r2,57
  80564c:	9011883a 	mov	r8,r18
  805650:	90816626 	beq	r18,r2,805bec <_dtoa_r+0x152c>
  805654:	05bff516 	blt	zero,r22,80562c <__alt_mem_onchip_mem+0xff7fd62c>
  805658:	003ff506 	br	805630 <__alt_mem_onchip_mem+0xff7fd630>
  80565c:	080749c0 	call	80749c <__multadd>
  805660:	1023883a 	mov	r17,r2
  805664:	1029883a 	mov	r20,r2
  805668:	003fdf06 	br	8055e8 <__alt_mem_onchip_mem+0xff7fd5e8>
  80566c:	e009883a 	mov	r4,fp
  805670:	08074740 	call	807474 <_Bfree>
  805674:	00800044 	movi	r2,1
  805678:	003fbc06 	br	80556c <__alt_mem_onchip_mem+0xff7fd56c>
  80567c:	a80b883a 	mov	r5,r21
  805680:	8009883a 	mov	r4,r16
  805684:	0807c940 	call	807c94 <__mcmp>
  805688:	103edb0e 	bge	r2,zero,8051f8 <__alt_mem_onchip_mem+0xff7fd1f8>
  80568c:	800b883a 	mov	r5,r16
  805690:	000f883a 	mov	r7,zero
  805694:	01800284 	movi	r6,10
  805698:	e009883a 	mov	r4,fp
  80569c:	080749c0 	call	80749c <__multadd>
  8056a0:	1021883a 	mov	r16,r2
  8056a4:	d8800517 	ldw	r2,20(sp)
  8056a8:	d8c00b17 	ldw	r3,44(sp)
  8056ac:	10bfffc4 	addi	r2,r2,-1
  8056b0:	d8800515 	stw	r2,20(sp)
  8056b4:	183f761e 	bne	r3,zero,805490 <__alt_mem_onchip_mem+0xff7fd490>
  8056b8:	d9000c17 	ldw	r4,48(sp)
  8056bc:	0101730e 	bge	zero,r4,805c8c <_dtoa_r+0x15cc>
  8056c0:	d9000615 	stw	r4,24(sp)
  8056c4:	003ed006 	br	805208 <__alt_mem_onchip_mem+0xff7fd208>
  8056c8:	00800084 	movi	r2,2
  8056cc:	3081861e 	bne	r6,r2,805ce8 <_dtoa_r+0x1628>
  8056d0:	d8000b15 	stw	zero,44(sp)
  8056d4:	003f3c06 	br	8053c8 <__alt_mem_onchip_mem+0xff7fd3c8>
  8056d8:	dc000917 	ldw	r16,36(sp)
  8056dc:	003e9206 	br	805128 <__alt_mem_onchip_mem+0xff7fd128>
  8056e0:	d9c00317 	ldw	r7,12(sp)
  8056e4:	00800084 	movi	r2,2
  8056e8:	11fec50e 	bge	r2,r7,805200 <__alt_mem_onchip_mem+0xff7fd200>
  8056ec:	d9000617 	ldw	r4,24(sp)
  8056f0:	20013c1e 	bne	r4,zero,805be4 <_dtoa_r+0x1524>
  8056f4:	a80b883a 	mov	r5,r21
  8056f8:	000f883a 	mov	r7,zero
  8056fc:	01800144 	movi	r6,5
  805700:	e009883a 	mov	r4,fp
  805704:	080749c0 	call	80749c <__multadd>
  805708:	100b883a 	mov	r5,r2
  80570c:	8009883a 	mov	r4,r16
  805710:	102b883a 	mov	r21,r2
  805714:	0807c940 	call	807c94 <__mcmp>
  805718:	dc000915 	stw	r16,36(sp)
  80571c:	00bf410e 	bge	zero,r2,805424 <__alt_mem_onchip_mem+0xff7fd424>
  805720:	d9c00717 	ldw	r7,28(sp)
  805724:	00800c44 	movi	r2,49
  805728:	38800005 	stb	r2,0(r7)
  80572c:	d8800517 	ldw	r2,20(sp)
  805730:	3dc00044 	addi	r23,r7,1
  805734:	10800044 	addi	r2,r2,1
  805738:	d8800515 	stw	r2,20(sp)
  80573c:	003f3d06 	br	805434 <__alt_mem_onchip_mem+0xff7fd434>
  805740:	d9800517 	ldw	r6,20(sp)
  805744:	d9c00717 	ldw	r7,28(sp)
  805748:	00800c44 	movi	r2,49
  80574c:	31800044 	addi	r6,r6,1
  805750:	d9800515 	stw	r6,20(sp)
  805754:	38800005 	stb	r2,0(r7)
  805758:	003edf06 	br	8052d8 <__alt_mem_onchip_mem+0xff7fd2d8>
  80575c:	d8000b15 	stw	zero,44(sp)
  805760:	003c9f06 	br	8049e0 <__alt_mem_onchip_mem+0xff7fc9e0>
  805764:	903e7e1e 	bne	r18,zero,805160 <__alt_mem_onchip_mem+0xff7fd160>
  805768:	00800434 	movhi	r2,16
  80576c:	10bfffc4 	addi	r2,r2,-1
  805770:	9884703a 	and	r2,r19,r2
  805774:	1000ea1e 	bne	r2,zero,805b20 <_dtoa_r+0x1460>
  805778:	9cdffc2c 	andhi	r19,r19,32752
  80577c:	9800e826 	beq	r19,zero,805b20 <_dtoa_r+0x1460>
  805780:	d9c00817 	ldw	r7,32(sp)
  805784:	b5800044 	addi	r22,r22,1
  805788:	04c00044 	movi	r19,1
  80578c:	39c00044 	addi	r7,r7,1
  805790:	d9c00815 	stw	r7,32(sp)
  805794:	d8800d17 	ldw	r2,52(sp)
  805798:	103e721e 	bne	r2,zero,805164 <__alt_mem_onchip_mem+0xff7fd164>
  80579c:	00800044 	movi	r2,1
  8057a0:	003e7906 	br	805188 <__alt_mem_onchip_mem+0xff7fd188>
  8057a4:	8009883a 	mov	r4,r16
  8057a8:	080d9180 	call	80d918 <__floatsidf>
  8057ac:	d9800f17 	ldw	r6,60(sp)
  8057b0:	d9c01017 	ldw	r7,64(sp)
  8057b4:	1009883a 	mov	r4,r2
  8057b8:	180b883a 	mov	r5,r3
  8057bc:	080c8840 	call	80c884 <__muldf3>
  8057c0:	000d883a 	mov	r6,zero
  8057c4:	01d00734 	movhi	r7,16412
  8057c8:	1009883a 	mov	r4,r2
  8057cc:	180b883a 	mov	r5,r3
  8057d0:	080b4980 	call	80b498 <__adddf3>
  8057d4:	047f3034 	movhi	r17,64704
  8057d8:	1021883a 	mov	r16,r2
  8057dc:	1c63883a 	add	r17,r3,r17
  8057e0:	d9000f17 	ldw	r4,60(sp)
  8057e4:	d9401017 	ldw	r5,64(sp)
  8057e8:	000d883a 	mov	r6,zero
  8057ec:	01d00534 	movhi	r7,16404
  8057f0:	080cf9c0 	call	80cf9c <__subdf3>
  8057f4:	800d883a 	mov	r6,r16
  8057f8:	880f883a 	mov	r7,r17
  8057fc:	1009883a 	mov	r4,r2
  805800:	180b883a 	mov	r5,r3
  805804:	102b883a 	mov	r21,r2
  805808:	1829883a 	mov	r20,r3
  80580c:	080c6b40 	call	80c6b4 <__gedf2>
  805810:	00806c16 	blt	zero,r2,8059c4 <_dtoa_r+0x1304>
  805814:	89e0003c 	xorhi	r7,r17,32768
  805818:	800d883a 	mov	r6,r16
  80581c:	a809883a 	mov	r4,r21
  805820:	a00b883a 	mov	r5,r20
  805824:	080c7900 	call	80c790 <__ledf2>
  805828:	103d7e0e 	bge	r2,zero,804e24 <__alt_mem_onchip_mem+0xff7fce24>
  80582c:	002b883a 	mov	r21,zero
  805830:	0023883a 	mov	r17,zero
  805834:	003efb06 	br	805424 <__alt_mem_onchip_mem+0xff7fd424>
  805838:	d8800717 	ldw	r2,28(sp)
  80583c:	003bd006 	br	804780 <__alt_mem_onchip_mem+0xff7fc780>
  805840:	d9000a17 	ldw	r4,40(sp)
  805844:	d9800d17 	ldw	r6,52(sp)
  805848:	dd400a15 	stw	r21,40(sp)
  80584c:	a905c83a 	sub	r2,r21,r4
  805850:	308d883a 	add	r6,r6,r2
  805854:	d9800d15 	stw	r6,52(sp)
  805858:	002b883a 	mov	r21,zero
  80585c:	003e0606 	br	805078 <__alt_mem_onchip_mem+0xff7fd078>
  805860:	9023883a 	mov	r17,r18
  805864:	9829883a 	mov	r20,r19
  805868:	04000084 	movi	r16,2
  80586c:	003c9206 	br	804ab8 <__alt_mem_onchip_mem+0xff7fcab8>
  805870:	04000044 	movi	r16,1
  805874:	dc000c15 	stw	r16,48(sp)
  805878:	dc000615 	stw	r16,24(sp)
  80587c:	dc002215 	stw	r16,136(sp)
  805880:	e0001115 	stw	zero,68(fp)
  805884:	000b883a 	mov	r5,zero
  805888:	003c6906 	br	804a30 <__alt_mem_onchip_mem+0xff7fca30>
  80588c:	3021883a 	mov	r16,r6
  805890:	003ffb06 	br	805880 <__alt_mem_onchip_mem+0xff7fd880>
  805894:	1000021e 	bne	r2,zero,8058a0 <_dtoa_r+0x11e0>
  805898:	4200004c 	andi	r8,r8,1
  80589c:	403e7d1e 	bne	r8,zero,805294 <__alt_mem_onchip_mem+0xff7fd294>
  8058a0:	01000c04 	movi	r4,48
  8058a4:	00000106 	br	8058ac <_dtoa_r+0x11ec>
  8058a8:	102f883a 	mov	r23,r2
  8058ac:	b8bfffc4 	addi	r2,r23,-1
  8058b0:	10c00007 	ldb	r3,0(r2)
  8058b4:	193ffc26 	beq	r3,r4,8058a8 <__alt_mem_onchip_mem+0xff7fd8a8>
  8058b8:	003e8706 	br	8052d8 <__alt_mem_onchip_mem+0xff7fd2d8>
  8058bc:	d8800517 	ldw	r2,20(sp)
  8058c0:	00a3c83a 	sub	r17,zero,r2
  8058c4:	8800a426 	beq	r17,zero,805b58 <_dtoa_r+0x1498>
  8058c8:	888003cc 	andi	r2,r17,15
  8058cc:	100490fa 	slli	r2,r2,3
  8058d0:	00c02074 	movhi	r3,129
  8058d4:	18c7b904 	addi	r3,r3,7908
  8058d8:	1885883a 	add	r2,r3,r2
  8058dc:	11800017 	ldw	r6,0(r2)
  8058e0:	11c00117 	ldw	r7,4(r2)
  8058e4:	9009883a 	mov	r4,r18
  8058e8:	980b883a 	mov	r5,r19
  8058ec:	8823d13a 	srai	r17,r17,4
  8058f0:	080c8840 	call	80c884 <__muldf3>
  8058f4:	d8800f15 	stw	r2,60(sp)
  8058f8:	d8c01015 	stw	r3,64(sp)
  8058fc:	8800e826 	beq	r17,zero,805ca0 <_dtoa_r+0x15e0>
  805900:	05002074 	movhi	r20,129
  805904:	a507af04 	addi	r20,r20,7868
  805908:	04000084 	movi	r16,2
  80590c:	8980004c 	andi	r6,r17,1
  805910:	1009883a 	mov	r4,r2
  805914:	8823d07a 	srai	r17,r17,1
  805918:	180b883a 	mov	r5,r3
  80591c:	30000426 	beq	r6,zero,805930 <_dtoa_r+0x1270>
  805920:	a1800017 	ldw	r6,0(r20)
  805924:	a1c00117 	ldw	r7,4(r20)
  805928:	84000044 	addi	r16,r16,1
  80592c:	080c8840 	call	80c884 <__muldf3>
  805930:	a5000204 	addi	r20,r20,8
  805934:	883ff51e 	bne	r17,zero,80590c <__alt_mem_onchip_mem+0xff7fd90c>
  805938:	d8800f15 	stw	r2,60(sp)
  80593c:	d8c01015 	stw	r3,64(sp)
  805940:	003c7606 	br	804b1c <__alt_mem_onchip_mem+0xff7fcb1c>
  805944:	00c00c04 	movi	r3,48
  805948:	10c00005 	stb	r3,0(r2)
  80594c:	d8c00517 	ldw	r3,20(sp)
  805950:	bd3fffc3 	ldbu	r20,-1(r23)
  805954:	18c00044 	addi	r3,r3,1
  805958:	d8c00515 	stw	r3,20(sp)
  80595c:	003db906 	br	805044 <__alt_mem_onchip_mem+0xff7fd044>
  805960:	89400117 	ldw	r5,4(r17)
  805964:	e009883a 	mov	r4,fp
  805968:	08073cc0 	call	8073cc <_Balloc>
  80596c:	89800417 	ldw	r6,16(r17)
  805970:	89400304 	addi	r5,r17,12
  805974:	11000304 	addi	r4,r2,12
  805978:	31800084 	addi	r6,r6,2
  80597c:	318d883a 	add	r6,r6,r6
  805980:	318d883a 	add	r6,r6,r6
  805984:	1027883a 	mov	r19,r2
  805988:	08071280 	call	807128 <memcpy>
  80598c:	01800044 	movi	r6,1
  805990:	980b883a 	mov	r5,r19
  805994:	e009883a 	mov	r4,fp
  805998:	0807b4c0 	call	807b4c <__lshift>
  80599c:	1029883a 	mov	r20,r2
  8059a0:	003ecc06 	br	8054d4 <__alt_mem_onchip_mem+0xff7fd4d4>
  8059a4:	00800e44 	movi	r2,57
  8059a8:	90809026 	beq	r18,r2,805bec <_dtoa_r+0x152c>
  8059ac:	92000044 	addi	r8,r18,1
  8059b0:	003f1f06 	br	805630 <__alt_mem_onchip_mem+0xff7fd630>
  8059b4:	9011883a 	mov	r8,r18
  8059b8:	8825883a 	mov	r18,r17
  8059bc:	a023883a 	mov	r17,r20
  8059c0:	003e2906 	br	805268 <__alt_mem_onchip_mem+0xff7fd268>
  8059c4:	002b883a 	mov	r21,zero
  8059c8:	0023883a 	mov	r17,zero
  8059cc:	003f5406 	br	805720 <__alt_mem_onchip_mem+0xff7fd720>
  8059d0:	61bfffc4 	addi	r6,r12,-1
  8059d4:	300490fa 	slli	r2,r6,3
  8059d8:	00c02074 	movhi	r3,129
  8059dc:	18c7b904 	addi	r3,r3,7908
  8059e0:	1885883a 	add	r2,r3,r2
  8059e4:	11000017 	ldw	r4,0(r2)
  8059e8:	11400117 	ldw	r5,4(r2)
  8059ec:	d8800717 	ldw	r2,28(sp)
  8059f0:	880f883a 	mov	r7,r17
  8059f4:	d9801215 	stw	r6,72(sp)
  8059f8:	800d883a 	mov	r6,r16
  8059fc:	db001615 	stw	r12,88(sp)
  805a00:	15c00044 	addi	r23,r2,1
  805a04:	080c8840 	call	80c884 <__muldf3>
  805a08:	d9401017 	ldw	r5,64(sp)
  805a0c:	d9000f17 	ldw	r4,60(sp)
  805a10:	d8c01515 	stw	r3,84(sp)
  805a14:	d8801415 	stw	r2,80(sp)
  805a18:	080d8980 	call	80d898 <__fixdfsi>
  805a1c:	1009883a 	mov	r4,r2
  805a20:	1021883a 	mov	r16,r2
  805a24:	080d9180 	call	80d918 <__floatsidf>
  805a28:	d9000f17 	ldw	r4,60(sp)
  805a2c:	d9401017 	ldw	r5,64(sp)
  805a30:	100d883a 	mov	r6,r2
  805a34:	180f883a 	mov	r7,r3
  805a38:	080cf9c0 	call	80cf9c <__subdf3>
  805a3c:	1829883a 	mov	r20,r3
  805a40:	d8c00717 	ldw	r3,28(sp)
  805a44:	84000c04 	addi	r16,r16,48
  805a48:	1023883a 	mov	r17,r2
  805a4c:	1c000005 	stb	r16,0(r3)
  805a50:	db001617 	ldw	r12,88(sp)
  805a54:	00800044 	movi	r2,1
  805a58:	60802226 	beq	r12,r2,805ae4 <_dtoa_r+0x1424>
  805a5c:	d9c00717 	ldw	r7,28(sp)
  805a60:	8805883a 	mov	r2,r17
  805a64:	b82b883a 	mov	r21,r23
  805a68:	3b19883a 	add	r12,r7,r12
  805a6c:	6023883a 	mov	r17,r12
  805a70:	a007883a 	mov	r3,r20
  805a74:	dc800f15 	stw	r18,60(sp)
  805a78:	000d883a 	mov	r6,zero
  805a7c:	01d00934 	movhi	r7,16420
  805a80:	1009883a 	mov	r4,r2
  805a84:	180b883a 	mov	r5,r3
  805a88:	080c8840 	call	80c884 <__muldf3>
  805a8c:	180b883a 	mov	r5,r3
  805a90:	1009883a 	mov	r4,r2
  805a94:	1829883a 	mov	r20,r3
  805a98:	1025883a 	mov	r18,r2
  805a9c:	080d8980 	call	80d898 <__fixdfsi>
  805aa0:	1009883a 	mov	r4,r2
  805aa4:	1021883a 	mov	r16,r2
  805aa8:	080d9180 	call	80d918 <__floatsidf>
  805aac:	100d883a 	mov	r6,r2
  805ab0:	180f883a 	mov	r7,r3
  805ab4:	9009883a 	mov	r4,r18
  805ab8:	a00b883a 	mov	r5,r20
  805abc:	84000c04 	addi	r16,r16,48
  805ac0:	080cf9c0 	call	80cf9c <__subdf3>
  805ac4:	ad400044 	addi	r21,r21,1
  805ac8:	ac3fffc5 	stb	r16,-1(r21)
  805acc:	ac7fea1e 	bne	r21,r17,805a78 <__alt_mem_onchip_mem+0xff7fda78>
  805ad0:	1023883a 	mov	r17,r2
  805ad4:	d8801217 	ldw	r2,72(sp)
  805ad8:	dc800f17 	ldw	r18,60(sp)
  805adc:	1829883a 	mov	r20,r3
  805ae0:	b8af883a 	add	r23,r23,r2
  805ae4:	d9001417 	ldw	r4,80(sp)
  805ae8:	d9401517 	ldw	r5,84(sp)
  805aec:	000d883a 	mov	r6,zero
  805af0:	01cff834 	movhi	r7,16352
  805af4:	080b4980 	call	80b498 <__adddf3>
  805af8:	880d883a 	mov	r6,r17
  805afc:	a00f883a 	mov	r7,r20
  805b00:	1009883a 	mov	r4,r2
  805b04:	180b883a 	mov	r5,r3
  805b08:	080c7900 	call	80c790 <__ledf2>
  805b0c:	10003e0e 	bge	r2,zero,805c08 <_dtoa_r+0x1548>
  805b10:	d9001317 	ldw	r4,76(sp)
  805b14:	bd3fffc3 	ldbu	r20,-1(r23)
  805b18:	d9000515 	stw	r4,20(sp)
  805b1c:	003d3b06 	br	80500c <__alt_mem_onchip_mem+0xff7fd00c>
  805b20:	0027883a 	mov	r19,zero
  805b24:	003f1b06 	br	805794 <__alt_mem_onchip_mem+0xff7fd794>
  805b28:	d8800817 	ldw	r2,32(sp)
  805b2c:	11e9c83a 	sub	r20,r2,r7
  805b30:	0005883a 	mov	r2,zero
  805b34:	003d5406 	br	805088 <__alt_mem_onchip_mem+0xff7fd088>
  805b38:	00800044 	movi	r2,1
  805b3c:	003dc706 	br	80525c <__alt_mem_onchip_mem+0xff7fd25c>
  805b40:	d8c00217 	ldw	r3,8(sp)
  805b44:	00800d84 	movi	r2,54
  805b48:	dd400a17 	ldw	r21,40(sp)
  805b4c:	10c5c83a 	sub	r2,r2,r3
  805b50:	dd000817 	ldw	r20,32(sp)
  805b54:	003d4c06 	br	805088 <__alt_mem_onchip_mem+0xff7fd088>
  805b58:	dc800f15 	stw	r18,60(sp)
  805b5c:	dcc01015 	stw	r19,64(sp)
  805b60:	04000084 	movi	r16,2
  805b64:	003bed06 	br	804b1c <__alt_mem_onchip_mem+0xff7fcb1c>
  805b68:	d9000617 	ldw	r4,24(sp)
  805b6c:	203f0d26 	beq	r4,zero,8057a4 <__alt_mem_onchip_mem+0xff7fd7a4>
  805b70:	d9800c17 	ldw	r6,48(sp)
  805b74:	01bcab0e 	bge	zero,r6,804e24 <__alt_mem_onchip_mem+0xff7fce24>
  805b78:	d9401017 	ldw	r5,64(sp)
  805b7c:	d9000f17 	ldw	r4,60(sp)
  805b80:	000d883a 	mov	r6,zero
  805b84:	01d00934 	movhi	r7,16420
  805b88:	080c8840 	call	80c884 <__muldf3>
  805b8c:	81000044 	addi	r4,r16,1
  805b90:	d8800f15 	stw	r2,60(sp)
  805b94:	d8c01015 	stw	r3,64(sp)
  805b98:	080d9180 	call	80d918 <__floatsidf>
  805b9c:	d9800f17 	ldw	r6,60(sp)
  805ba0:	d9c01017 	ldw	r7,64(sp)
  805ba4:	1009883a 	mov	r4,r2
  805ba8:	180b883a 	mov	r5,r3
  805bac:	080c8840 	call	80c884 <__muldf3>
  805bb0:	01d00734 	movhi	r7,16412
  805bb4:	000d883a 	mov	r6,zero
  805bb8:	1009883a 	mov	r4,r2
  805bbc:	180b883a 	mov	r5,r3
  805bc0:	080b4980 	call	80b498 <__adddf3>
  805bc4:	d9c00517 	ldw	r7,20(sp)
  805bc8:	047f3034 	movhi	r17,64704
  805bcc:	1021883a 	mov	r16,r2
  805bd0:	39ffffc4 	addi	r7,r7,-1
  805bd4:	d9c01315 	stw	r7,76(sp)
  805bd8:	1c63883a 	add	r17,r3,r17
  805bdc:	db000c17 	ldw	r12,48(sp)
  805be0:	003bea06 	br	804b8c <__alt_mem_onchip_mem+0xff7fcb8c>
  805be4:	dc000915 	stw	r16,36(sp)
  805be8:	003e0e06 	br	805424 <__alt_mem_onchip_mem+0xff7fd424>
  805bec:	01000e44 	movi	r4,57
  805bf0:	8825883a 	mov	r18,r17
  805bf4:	9dc00044 	addi	r23,r19,1
  805bf8:	99000005 	stb	r4,0(r19)
  805bfc:	a023883a 	mov	r17,r20
  805c00:	dc000915 	stw	r16,36(sp)
  805c04:	003da406 	br	805298 <__alt_mem_onchip_mem+0xff7fd298>
  805c08:	d9801417 	ldw	r6,80(sp)
  805c0c:	d9c01517 	ldw	r7,84(sp)
  805c10:	0009883a 	mov	r4,zero
  805c14:	014ff834 	movhi	r5,16352
  805c18:	080cf9c0 	call	80cf9c <__subdf3>
  805c1c:	880d883a 	mov	r6,r17
  805c20:	a00f883a 	mov	r7,r20
  805c24:	1009883a 	mov	r4,r2
  805c28:	180b883a 	mov	r5,r3
  805c2c:	080c6b40 	call	80c6b4 <__gedf2>
  805c30:	00bc7c0e 	bge	zero,r2,804e24 <__alt_mem_onchip_mem+0xff7fce24>
  805c34:	01000c04 	movi	r4,48
  805c38:	00000106 	br	805c40 <_dtoa_r+0x1580>
  805c3c:	102f883a 	mov	r23,r2
  805c40:	b8bfffc4 	addi	r2,r23,-1
  805c44:	10c00007 	ldb	r3,0(r2)
  805c48:	193ffc26 	beq	r3,r4,805c3c <__alt_mem_onchip_mem+0xff7fdc3c>
  805c4c:	d9801317 	ldw	r6,76(sp)
  805c50:	d9800515 	stw	r6,20(sp)
  805c54:	003c4406 	br	804d68 <__alt_mem_onchip_mem+0xff7fcd68>
  805c58:	d9801317 	ldw	r6,76(sp)
  805c5c:	d9800515 	stw	r6,20(sp)
  805c60:	003cea06 	br	80500c <__alt_mem_onchip_mem+0xff7fd00c>
  805c64:	dd800f17 	ldw	r22,60(sp)
  805c68:	dcc01017 	ldw	r19,64(sp)
  805c6c:	dc801217 	ldw	r18,72(sp)
  805c70:	003c6c06 	br	804e24 <__alt_mem_onchip_mem+0xff7fce24>
  805c74:	903e031e 	bne	r18,zero,805484 <__alt_mem_onchip_mem+0xff7fd484>
  805c78:	003ebb06 	br	805768 <__alt_mem_onchip_mem+0xff7fd768>
  805c7c:	103e6c1e 	bne	r2,zero,805630 <__alt_mem_onchip_mem+0xff7fd630>
  805c80:	4080004c 	andi	r2,r8,1
  805c84:	103e6a26 	beq	r2,zero,805630 <__alt_mem_onchip_mem+0xff7fd630>
  805c88:	003e6606 	br	805624 <__alt_mem_onchip_mem+0xff7fd624>
  805c8c:	d8c00317 	ldw	r3,12(sp)
  805c90:	00800084 	movi	r2,2
  805c94:	10c02916 	blt	r2,r3,805d3c <_dtoa_r+0x167c>
  805c98:	d9000c17 	ldw	r4,48(sp)
  805c9c:	003e8806 	br	8056c0 <__alt_mem_onchip_mem+0xff7fd6c0>
  805ca0:	04000084 	movi	r16,2
  805ca4:	003b9d06 	br	804b1c <__alt_mem_onchip_mem+0xff7fcb1c>
  805ca8:	d9001317 	ldw	r4,76(sp)
  805cac:	d9000515 	stw	r4,20(sp)
  805cb0:	003cd606 	br	80500c <__alt_mem_onchip_mem+0xff7fd00c>
  805cb4:	d8801317 	ldw	r2,76(sp)
  805cb8:	d8800515 	stw	r2,20(sp)
  805cbc:	003c2a06 	br	804d68 <__alt_mem_onchip_mem+0xff7fcd68>
  805cc0:	d9800317 	ldw	r6,12(sp)
  805cc4:	00800084 	movi	r2,2
  805cc8:	11801516 	blt	r2,r6,805d20 <_dtoa_r+0x1660>
  805ccc:	d9c00c17 	ldw	r7,48(sp)
  805cd0:	d9c00615 	stw	r7,24(sp)
  805cd4:	003df706 	br	8054b4 <__alt_mem_onchip_mem+0xff7fd4b4>
  805cd8:	193d3926 	beq	r3,r4,8051c0 <__alt_mem_onchip_mem+0xff7fd1c0>
  805cdc:	00c00f04 	movi	r3,60
  805ce0:	1885c83a 	sub	r2,r3,r2
  805ce4:	003ddf06 	br	805464 <__alt_mem_onchip_mem+0xff7fd464>
  805ce8:	e009883a 	mov	r4,fp
  805cec:	e0001115 	stw	zero,68(fp)
  805cf0:	000b883a 	mov	r5,zero
  805cf4:	08073cc0 	call	8073cc <_Balloc>
  805cf8:	d8800715 	stw	r2,28(sp)
  805cfc:	d8c00717 	ldw	r3,28(sp)
  805d00:	00bfffc4 	movi	r2,-1
  805d04:	01000044 	movi	r4,1
  805d08:	d8800c15 	stw	r2,48(sp)
  805d0c:	e0c01015 	stw	r3,64(fp)
  805d10:	d9000b15 	stw	r4,44(sp)
  805d14:	d8800615 	stw	r2,24(sp)
  805d18:	d8002215 	stw	zero,136(sp)
  805d1c:	003c4106 	br	804e24 <__alt_mem_onchip_mem+0xff7fce24>
  805d20:	d8c00c17 	ldw	r3,48(sp)
  805d24:	d8c00615 	stw	r3,24(sp)
  805d28:	003e7006 	br	8056ec <__alt_mem_onchip_mem+0xff7fd6ec>
  805d2c:	04400044 	movi	r17,1
  805d30:	003b2006 	br	8049b4 <__alt_mem_onchip_mem+0xff7fc9b4>
  805d34:	000b883a 	mov	r5,zero
  805d38:	003b3d06 	br	804a30 <__alt_mem_onchip_mem+0xff7fca30>
  805d3c:	d8800c17 	ldw	r2,48(sp)
  805d40:	d8800615 	stw	r2,24(sp)
  805d44:	003e6906 	br	8056ec <__alt_mem_onchip_mem+0xff7fd6ec>

00805d48 <__sflush_r>:
  805d48:	2880030b 	ldhu	r2,12(r5)
  805d4c:	defffb04 	addi	sp,sp,-20
  805d50:	dcc00315 	stw	r19,12(sp)
  805d54:	dc400115 	stw	r17,4(sp)
  805d58:	dfc00415 	stw	ra,16(sp)
  805d5c:	dc800215 	stw	r18,8(sp)
  805d60:	dc000015 	stw	r16,0(sp)
  805d64:	10c0020c 	andi	r3,r2,8
  805d68:	2823883a 	mov	r17,r5
  805d6c:	2027883a 	mov	r19,r4
  805d70:	1800311e 	bne	r3,zero,805e38 <__sflush_r+0xf0>
  805d74:	28c00117 	ldw	r3,4(r5)
  805d78:	10820014 	ori	r2,r2,2048
  805d7c:	2880030d 	sth	r2,12(r5)
  805d80:	00c04b0e 	bge	zero,r3,805eb0 <__sflush_r+0x168>
  805d84:	8a000a17 	ldw	r8,40(r17)
  805d88:	40002326 	beq	r8,zero,805e18 <__sflush_r+0xd0>
  805d8c:	9c000017 	ldw	r16,0(r19)
  805d90:	10c4000c 	andi	r3,r2,4096
  805d94:	98000015 	stw	zero,0(r19)
  805d98:	18004826 	beq	r3,zero,805ebc <__sflush_r+0x174>
  805d9c:	89801417 	ldw	r6,80(r17)
  805da0:	10c0010c 	andi	r3,r2,4
  805da4:	18000626 	beq	r3,zero,805dc0 <__sflush_r+0x78>
  805da8:	88c00117 	ldw	r3,4(r17)
  805dac:	88800c17 	ldw	r2,48(r17)
  805db0:	30cdc83a 	sub	r6,r6,r3
  805db4:	10000226 	beq	r2,zero,805dc0 <__sflush_r+0x78>
  805db8:	88800f17 	ldw	r2,60(r17)
  805dbc:	308dc83a 	sub	r6,r6,r2
  805dc0:	89400717 	ldw	r5,28(r17)
  805dc4:	000f883a 	mov	r7,zero
  805dc8:	9809883a 	mov	r4,r19
  805dcc:	403ee83a 	callr	r8
  805dd0:	00ffffc4 	movi	r3,-1
  805dd4:	10c04426 	beq	r2,r3,805ee8 <__sflush_r+0x1a0>
  805dd8:	88c0030b 	ldhu	r3,12(r17)
  805ddc:	89000417 	ldw	r4,16(r17)
  805de0:	88000115 	stw	zero,4(r17)
  805de4:	197dffcc 	andi	r5,r3,63487
  805de8:	8940030d 	sth	r5,12(r17)
  805dec:	89000015 	stw	r4,0(r17)
  805df0:	18c4000c 	andi	r3,r3,4096
  805df4:	18002c1e 	bne	r3,zero,805ea8 <__sflush_r+0x160>
  805df8:	89400c17 	ldw	r5,48(r17)
  805dfc:	9c000015 	stw	r16,0(r19)
  805e00:	28000526 	beq	r5,zero,805e18 <__sflush_r+0xd0>
  805e04:	88801004 	addi	r2,r17,64
  805e08:	28800226 	beq	r5,r2,805e14 <__sflush_r+0xcc>
  805e0c:	9809883a 	mov	r4,r19
  805e10:	08065600 	call	806560 <_free_r>
  805e14:	88000c15 	stw	zero,48(r17)
  805e18:	0005883a 	mov	r2,zero
  805e1c:	dfc00417 	ldw	ra,16(sp)
  805e20:	dcc00317 	ldw	r19,12(sp)
  805e24:	dc800217 	ldw	r18,8(sp)
  805e28:	dc400117 	ldw	r17,4(sp)
  805e2c:	dc000017 	ldw	r16,0(sp)
  805e30:	dec00504 	addi	sp,sp,20
  805e34:	f800283a 	ret
  805e38:	2c800417 	ldw	r18,16(r5)
  805e3c:	903ff626 	beq	r18,zero,805e18 <__alt_mem_onchip_mem+0xff7fde18>
  805e40:	2c000017 	ldw	r16,0(r5)
  805e44:	108000cc 	andi	r2,r2,3
  805e48:	2c800015 	stw	r18,0(r5)
  805e4c:	84a1c83a 	sub	r16,r16,r18
  805e50:	1000131e 	bne	r2,zero,805ea0 <__sflush_r+0x158>
  805e54:	28800517 	ldw	r2,20(r5)
  805e58:	88800215 	stw	r2,8(r17)
  805e5c:	04000316 	blt	zero,r16,805e6c <__sflush_r+0x124>
  805e60:	003fed06 	br	805e18 <__alt_mem_onchip_mem+0xff7fde18>
  805e64:	90a5883a 	add	r18,r18,r2
  805e68:	043feb0e 	bge	zero,r16,805e18 <__alt_mem_onchip_mem+0xff7fde18>
  805e6c:	88800917 	ldw	r2,36(r17)
  805e70:	89400717 	ldw	r5,28(r17)
  805e74:	800f883a 	mov	r7,r16
  805e78:	900d883a 	mov	r6,r18
  805e7c:	9809883a 	mov	r4,r19
  805e80:	103ee83a 	callr	r2
  805e84:	80a1c83a 	sub	r16,r16,r2
  805e88:	00bff616 	blt	zero,r2,805e64 <__alt_mem_onchip_mem+0xff7fde64>
  805e8c:	88c0030b 	ldhu	r3,12(r17)
  805e90:	00bfffc4 	movi	r2,-1
  805e94:	18c01014 	ori	r3,r3,64
  805e98:	88c0030d 	sth	r3,12(r17)
  805e9c:	003fdf06 	br	805e1c <__alt_mem_onchip_mem+0xff7fde1c>
  805ea0:	0005883a 	mov	r2,zero
  805ea4:	003fec06 	br	805e58 <__alt_mem_onchip_mem+0xff7fde58>
  805ea8:	88801415 	stw	r2,80(r17)
  805eac:	003fd206 	br	805df8 <__alt_mem_onchip_mem+0xff7fddf8>
  805eb0:	28c00f17 	ldw	r3,60(r5)
  805eb4:	00ffb316 	blt	zero,r3,805d84 <__alt_mem_onchip_mem+0xff7fdd84>
  805eb8:	003fd706 	br	805e18 <__alt_mem_onchip_mem+0xff7fde18>
  805ebc:	89400717 	ldw	r5,28(r17)
  805ec0:	000d883a 	mov	r6,zero
  805ec4:	01c00044 	movi	r7,1
  805ec8:	9809883a 	mov	r4,r19
  805ecc:	403ee83a 	callr	r8
  805ed0:	100d883a 	mov	r6,r2
  805ed4:	00bfffc4 	movi	r2,-1
  805ed8:	30801426 	beq	r6,r2,805f2c <__sflush_r+0x1e4>
  805edc:	8880030b 	ldhu	r2,12(r17)
  805ee0:	8a000a17 	ldw	r8,40(r17)
  805ee4:	003fae06 	br	805da0 <__alt_mem_onchip_mem+0xff7fdda0>
  805ee8:	98c00017 	ldw	r3,0(r19)
  805eec:	183fba26 	beq	r3,zero,805dd8 <__alt_mem_onchip_mem+0xff7fddd8>
  805ef0:	01000744 	movi	r4,29
  805ef4:	19000626 	beq	r3,r4,805f10 <__sflush_r+0x1c8>
  805ef8:	01000584 	movi	r4,22
  805efc:	19000426 	beq	r3,r4,805f10 <__sflush_r+0x1c8>
  805f00:	88c0030b 	ldhu	r3,12(r17)
  805f04:	18c01014 	ori	r3,r3,64
  805f08:	88c0030d 	sth	r3,12(r17)
  805f0c:	003fc306 	br	805e1c <__alt_mem_onchip_mem+0xff7fde1c>
  805f10:	8880030b 	ldhu	r2,12(r17)
  805f14:	88c00417 	ldw	r3,16(r17)
  805f18:	88000115 	stw	zero,4(r17)
  805f1c:	10bdffcc 	andi	r2,r2,63487
  805f20:	8880030d 	sth	r2,12(r17)
  805f24:	88c00015 	stw	r3,0(r17)
  805f28:	003fb306 	br	805df8 <__alt_mem_onchip_mem+0xff7fddf8>
  805f2c:	98800017 	ldw	r2,0(r19)
  805f30:	103fea26 	beq	r2,zero,805edc <__alt_mem_onchip_mem+0xff7fdedc>
  805f34:	00c00744 	movi	r3,29
  805f38:	10c00226 	beq	r2,r3,805f44 <__sflush_r+0x1fc>
  805f3c:	00c00584 	movi	r3,22
  805f40:	10c0031e 	bne	r2,r3,805f50 <__sflush_r+0x208>
  805f44:	9c000015 	stw	r16,0(r19)
  805f48:	0005883a 	mov	r2,zero
  805f4c:	003fb306 	br	805e1c <__alt_mem_onchip_mem+0xff7fde1c>
  805f50:	88c0030b 	ldhu	r3,12(r17)
  805f54:	3005883a 	mov	r2,r6
  805f58:	18c01014 	ori	r3,r3,64
  805f5c:	88c0030d 	sth	r3,12(r17)
  805f60:	003fae06 	br	805e1c <__alt_mem_onchip_mem+0xff7fde1c>

00805f64 <_fflush_r>:
  805f64:	defffd04 	addi	sp,sp,-12
  805f68:	dc000115 	stw	r16,4(sp)
  805f6c:	dfc00215 	stw	ra,8(sp)
  805f70:	2021883a 	mov	r16,r4
  805f74:	20000226 	beq	r4,zero,805f80 <_fflush_r+0x1c>
  805f78:	20800e17 	ldw	r2,56(r4)
  805f7c:	10000c26 	beq	r2,zero,805fb0 <_fflush_r+0x4c>
  805f80:	2880030f 	ldh	r2,12(r5)
  805f84:	1000051e 	bne	r2,zero,805f9c <_fflush_r+0x38>
  805f88:	0005883a 	mov	r2,zero
  805f8c:	dfc00217 	ldw	ra,8(sp)
  805f90:	dc000117 	ldw	r16,4(sp)
  805f94:	dec00304 	addi	sp,sp,12
  805f98:	f800283a 	ret
  805f9c:	8009883a 	mov	r4,r16
  805fa0:	dfc00217 	ldw	ra,8(sp)
  805fa4:	dc000117 	ldw	r16,4(sp)
  805fa8:	dec00304 	addi	sp,sp,12
  805fac:	0805d481 	jmpi	805d48 <__sflush_r>
  805fb0:	d9400015 	stw	r5,0(sp)
  805fb4:	08063400 	call	806340 <__sinit>
  805fb8:	d9400017 	ldw	r5,0(sp)
  805fbc:	003ff006 	br	805f80 <__alt_mem_onchip_mem+0xff7fdf80>

00805fc0 <fflush>:
  805fc0:	20000526 	beq	r4,zero,805fd8 <fflush+0x18>
  805fc4:	00802074 	movhi	r2,129
  805fc8:	10900904 	addi	r2,r2,16420
  805fcc:	200b883a 	mov	r5,r4
  805fd0:	11000017 	ldw	r4,0(r2)
  805fd4:	0805f641 	jmpi	805f64 <_fflush_r>
  805fd8:	00802074 	movhi	r2,129
  805fdc:	10900804 	addi	r2,r2,16416
  805fe0:	11000017 	ldw	r4,0(r2)
  805fe4:	01402034 	movhi	r5,128
  805fe8:	2957d904 	addi	r5,r5,24420
  805fec:	0806df01 	jmpi	806df0 <_fwalk_reent>

00805ff0 <__fp_unlock>:
  805ff0:	0005883a 	mov	r2,zero
  805ff4:	f800283a 	ret

00805ff8 <_cleanup_r>:
  805ff8:	01402074 	movhi	r5,129
  805ffc:	29687a04 	addi	r5,r5,-24088
  806000:	0806df01 	jmpi	806df0 <_fwalk_reent>

00806004 <__sinit.part.1>:
  806004:	defff704 	addi	sp,sp,-36
  806008:	00c02034 	movhi	r3,128
  80600c:	dfc00815 	stw	ra,32(sp)
  806010:	ddc00715 	stw	r23,28(sp)
  806014:	dd800615 	stw	r22,24(sp)
  806018:	dd400515 	stw	r21,20(sp)
  80601c:	dd000415 	stw	r20,16(sp)
  806020:	dcc00315 	stw	r19,12(sp)
  806024:	dc800215 	stw	r18,8(sp)
  806028:	dc400115 	stw	r17,4(sp)
  80602c:	dc000015 	stw	r16,0(sp)
  806030:	18d7fe04 	addi	r3,r3,24568
  806034:	24000117 	ldw	r16,4(r4)
  806038:	20c00f15 	stw	r3,60(r4)
  80603c:	2080bb04 	addi	r2,r4,748
  806040:	00c000c4 	movi	r3,3
  806044:	20c0b915 	stw	r3,740(r4)
  806048:	2080ba15 	stw	r2,744(r4)
  80604c:	2000b815 	stw	zero,736(r4)
  806050:	05c00204 	movi	r23,8
  806054:	00800104 	movi	r2,4
  806058:	2025883a 	mov	r18,r4
  80605c:	b80d883a 	mov	r6,r23
  806060:	81001704 	addi	r4,r16,92
  806064:	000b883a 	mov	r5,zero
  806068:	80000015 	stw	zero,0(r16)
  80606c:	80000115 	stw	zero,4(r16)
  806070:	80000215 	stw	zero,8(r16)
  806074:	8080030d 	sth	r2,12(r16)
  806078:	80001915 	stw	zero,100(r16)
  80607c:	8000038d 	sth	zero,14(r16)
  806080:	80000415 	stw	zero,16(r16)
  806084:	80000515 	stw	zero,20(r16)
  806088:	80000615 	stw	zero,24(r16)
  80608c:	08019740 	call	801974 <memset>
  806090:	05802034 	movhi	r22,128
  806094:	94400217 	ldw	r17,8(r18)
  806098:	05402034 	movhi	r21,128
  80609c:	05002034 	movhi	r20,128
  8060a0:	04c02034 	movhi	r19,128
  8060a4:	b5878504 	addi	r22,r22,7700
  8060a8:	ad479c04 	addi	r21,r21,7792
  8060ac:	a507bb04 	addi	r20,r20,7916
  8060b0:	9cc7d204 	addi	r19,r19,8008
  8060b4:	85800815 	stw	r22,32(r16)
  8060b8:	85400915 	stw	r21,36(r16)
  8060bc:	85000a15 	stw	r20,40(r16)
  8060c0:	84c00b15 	stw	r19,44(r16)
  8060c4:	84000715 	stw	r16,28(r16)
  8060c8:	00800284 	movi	r2,10
  8060cc:	8880030d 	sth	r2,12(r17)
  8060d0:	00800044 	movi	r2,1
  8060d4:	b80d883a 	mov	r6,r23
  8060d8:	89001704 	addi	r4,r17,92
  8060dc:	000b883a 	mov	r5,zero
  8060e0:	88000015 	stw	zero,0(r17)
  8060e4:	88000115 	stw	zero,4(r17)
  8060e8:	88000215 	stw	zero,8(r17)
  8060ec:	88001915 	stw	zero,100(r17)
  8060f0:	8880038d 	sth	r2,14(r17)
  8060f4:	88000415 	stw	zero,16(r17)
  8060f8:	88000515 	stw	zero,20(r17)
  8060fc:	88000615 	stw	zero,24(r17)
  806100:	08019740 	call	801974 <memset>
  806104:	94000317 	ldw	r16,12(r18)
  806108:	00800484 	movi	r2,18
  80610c:	8c400715 	stw	r17,28(r17)
  806110:	8d800815 	stw	r22,32(r17)
  806114:	8d400915 	stw	r21,36(r17)
  806118:	8d000a15 	stw	r20,40(r17)
  80611c:	8cc00b15 	stw	r19,44(r17)
  806120:	8080030d 	sth	r2,12(r16)
  806124:	00800084 	movi	r2,2
  806128:	80000015 	stw	zero,0(r16)
  80612c:	80000115 	stw	zero,4(r16)
  806130:	80000215 	stw	zero,8(r16)
  806134:	80001915 	stw	zero,100(r16)
  806138:	8080038d 	sth	r2,14(r16)
  80613c:	80000415 	stw	zero,16(r16)
  806140:	80000515 	stw	zero,20(r16)
  806144:	80000615 	stw	zero,24(r16)
  806148:	b80d883a 	mov	r6,r23
  80614c:	000b883a 	mov	r5,zero
  806150:	81001704 	addi	r4,r16,92
  806154:	08019740 	call	801974 <memset>
  806158:	00800044 	movi	r2,1
  80615c:	84000715 	stw	r16,28(r16)
  806160:	85800815 	stw	r22,32(r16)
  806164:	85400915 	stw	r21,36(r16)
  806168:	85000a15 	stw	r20,40(r16)
  80616c:	84c00b15 	stw	r19,44(r16)
  806170:	90800e15 	stw	r2,56(r18)
  806174:	dfc00817 	ldw	ra,32(sp)
  806178:	ddc00717 	ldw	r23,28(sp)
  80617c:	dd800617 	ldw	r22,24(sp)
  806180:	dd400517 	ldw	r21,20(sp)
  806184:	dd000417 	ldw	r20,16(sp)
  806188:	dcc00317 	ldw	r19,12(sp)
  80618c:	dc800217 	ldw	r18,8(sp)
  806190:	dc400117 	ldw	r17,4(sp)
  806194:	dc000017 	ldw	r16,0(sp)
  806198:	dec00904 	addi	sp,sp,36
  80619c:	f800283a 	ret

008061a0 <__fp_lock>:
  8061a0:	0005883a 	mov	r2,zero
  8061a4:	f800283a 	ret

008061a8 <__sfmoreglue>:
  8061a8:	defffc04 	addi	sp,sp,-16
  8061ac:	dc400115 	stw	r17,4(sp)
  8061b0:	2c7fffc4 	addi	r17,r5,-1
  8061b4:	8c401a24 	muli	r17,r17,104
  8061b8:	dc800215 	stw	r18,8(sp)
  8061bc:	2825883a 	mov	r18,r5
  8061c0:	89401d04 	addi	r5,r17,116
  8061c4:	dc000015 	stw	r16,0(sp)
  8061c8:	dfc00315 	stw	ra,12(sp)
  8061cc:	08011680 	call	801168 <_malloc_r>
  8061d0:	1021883a 	mov	r16,r2
  8061d4:	10000726 	beq	r2,zero,8061f4 <__sfmoreglue+0x4c>
  8061d8:	11000304 	addi	r4,r2,12
  8061dc:	10000015 	stw	zero,0(r2)
  8061e0:	14800115 	stw	r18,4(r2)
  8061e4:	11000215 	stw	r4,8(r2)
  8061e8:	89801a04 	addi	r6,r17,104
  8061ec:	000b883a 	mov	r5,zero
  8061f0:	08019740 	call	801974 <memset>
  8061f4:	8005883a 	mov	r2,r16
  8061f8:	dfc00317 	ldw	ra,12(sp)
  8061fc:	dc800217 	ldw	r18,8(sp)
  806200:	dc400117 	ldw	r17,4(sp)
  806204:	dc000017 	ldw	r16,0(sp)
  806208:	dec00404 	addi	sp,sp,16
  80620c:	f800283a 	ret

00806210 <__sfp>:
  806210:	defffb04 	addi	sp,sp,-20
  806214:	dc000015 	stw	r16,0(sp)
  806218:	04002074 	movhi	r16,129
  80621c:	84100804 	addi	r16,r16,16416
  806220:	dcc00315 	stw	r19,12(sp)
  806224:	2027883a 	mov	r19,r4
  806228:	81000017 	ldw	r4,0(r16)
  80622c:	dfc00415 	stw	ra,16(sp)
  806230:	dc800215 	stw	r18,8(sp)
  806234:	20800e17 	ldw	r2,56(r4)
  806238:	dc400115 	stw	r17,4(sp)
  80623c:	1000021e 	bne	r2,zero,806248 <__sfp+0x38>
  806240:	08060040 	call	806004 <__sinit.part.1>
  806244:	81000017 	ldw	r4,0(r16)
  806248:	2480b804 	addi	r18,r4,736
  80624c:	047fffc4 	movi	r17,-1
  806250:	91000117 	ldw	r4,4(r18)
  806254:	94000217 	ldw	r16,8(r18)
  806258:	213fffc4 	addi	r4,r4,-1
  80625c:	20000a16 	blt	r4,zero,806288 <__sfp+0x78>
  806260:	8080030f 	ldh	r2,12(r16)
  806264:	10000c26 	beq	r2,zero,806298 <__sfp+0x88>
  806268:	80c01d04 	addi	r3,r16,116
  80626c:	00000206 	br	806278 <__sfp+0x68>
  806270:	18bfe60f 	ldh	r2,-104(r3)
  806274:	10000826 	beq	r2,zero,806298 <__sfp+0x88>
  806278:	213fffc4 	addi	r4,r4,-1
  80627c:	1c3ffd04 	addi	r16,r3,-12
  806280:	18c01a04 	addi	r3,r3,104
  806284:	247ffa1e 	bne	r4,r17,806270 <__alt_mem_onchip_mem+0xff7fe270>
  806288:	90800017 	ldw	r2,0(r18)
  80628c:	10001d26 	beq	r2,zero,806304 <__sfp+0xf4>
  806290:	1025883a 	mov	r18,r2
  806294:	003fee06 	br	806250 <__alt_mem_onchip_mem+0xff7fe250>
  806298:	00bfffc4 	movi	r2,-1
  80629c:	8080038d 	sth	r2,14(r16)
  8062a0:	00800044 	movi	r2,1
  8062a4:	8080030d 	sth	r2,12(r16)
  8062a8:	80001915 	stw	zero,100(r16)
  8062ac:	80000015 	stw	zero,0(r16)
  8062b0:	80000215 	stw	zero,8(r16)
  8062b4:	80000115 	stw	zero,4(r16)
  8062b8:	80000415 	stw	zero,16(r16)
  8062bc:	80000515 	stw	zero,20(r16)
  8062c0:	80000615 	stw	zero,24(r16)
  8062c4:	01800204 	movi	r6,8
  8062c8:	000b883a 	mov	r5,zero
  8062cc:	81001704 	addi	r4,r16,92
  8062d0:	08019740 	call	801974 <memset>
  8062d4:	8005883a 	mov	r2,r16
  8062d8:	80000c15 	stw	zero,48(r16)
  8062dc:	80000d15 	stw	zero,52(r16)
  8062e0:	80001115 	stw	zero,68(r16)
  8062e4:	80001215 	stw	zero,72(r16)
  8062e8:	dfc00417 	ldw	ra,16(sp)
  8062ec:	dcc00317 	ldw	r19,12(sp)
  8062f0:	dc800217 	ldw	r18,8(sp)
  8062f4:	dc400117 	ldw	r17,4(sp)
  8062f8:	dc000017 	ldw	r16,0(sp)
  8062fc:	dec00504 	addi	sp,sp,20
  806300:	f800283a 	ret
  806304:	01400104 	movi	r5,4
  806308:	9809883a 	mov	r4,r19
  80630c:	08061a80 	call	8061a8 <__sfmoreglue>
  806310:	90800015 	stw	r2,0(r18)
  806314:	103fde1e 	bne	r2,zero,806290 <__alt_mem_onchip_mem+0xff7fe290>
  806318:	00800304 	movi	r2,12
  80631c:	98800015 	stw	r2,0(r19)
  806320:	0005883a 	mov	r2,zero
  806324:	003ff006 	br	8062e8 <__alt_mem_onchip_mem+0xff7fe2e8>

00806328 <_cleanup>:
  806328:	00802074 	movhi	r2,129
  80632c:	10900804 	addi	r2,r2,16416
  806330:	11000017 	ldw	r4,0(r2)
  806334:	01402074 	movhi	r5,129
  806338:	29687a04 	addi	r5,r5,-24088
  80633c:	0806df01 	jmpi	806df0 <_fwalk_reent>

00806340 <__sinit>:
  806340:	20800e17 	ldw	r2,56(r4)
  806344:	10000126 	beq	r2,zero,80634c <__sinit+0xc>
  806348:	f800283a 	ret
  80634c:	08060041 	jmpi	806004 <__sinit.part.1>

00806350 <__sfp_lock_acquire>:
  806350:	f800283a 	ret

00806354 <__sfp_lock_release>:
  806354:	f800283a 	ret

00806358 <__sinit_lock_acquire>:
  806358:	f800283a 	ret

0080635c <__sinit_lock_release>:
  80635c:	f800283a 	ret

00806360 <__fp_lock_all>:
  806360:	00802074 	movhi	r2,129
  806364:	10900904 	addi	r2,r2,16420
  806368:	11000017 	ldw	r4,0(r2)
  80636c:	01402034 	movhi	r5,128
  806370:	29586804 	addi	r5,r5,24992
  806374:	0806d2c1 	jmpi	806d2c <_fwalk>

00806378 <__fp_unlock_all>:
  806378:	00802074 	movhi	r2,129
  80637c:	10900904 	addi	r2,r2,16420
  806380:	11000017 	ldw	r4,0(r2)
  806384:	01402034 	movhi	r5,128
  806388:	2957fc04 	addi	r5,r5,24560
  80638c:	0806d2c1 	jmpi	806d2c <_fwalk>

00806390 <__sflags>:
  806390:	28800007 	ldb	r2,0(r5)
  806394:	00c01c84 	movi	r3,114
  806398:	10c02426 	beq	r2,r3,80642c <__sflags+0x9c>
  80639c:	00c01dc4 	movi	r3,119
  8063a0:	10c01e26 	beq	r2,r3,80641c <__sflags+0x8c>
  8063a4:	00c01844 	movi	r3,97
  8063a8:	10c00426 	beq	r2,r3,8063bc <__sflags+0x2c>
  8063ac:	00800584 	movi	r2,22
  8063b0:	20800015 	stw	r2,0(r4)
  8063b4:	0005883a 	mov	r2,zero
  8063b8:	f800283a 	ret
  8063bc:	02c08204 	movi	r11,520
  8063c0:	01000044 	movi	r4,1
  8063c4:	00804204 	movi	r2,264
  8063c8:	01c00ac4 	movi	r7,43
  8063cc:	02bff8c4 	movi	r10,-29
  8063d0:	027fff04 	movi	r9,-4
  8063d4:	02001e04 	movi	r8,120
  8063d8:	29400044 	addi	r5,r5,1
  8063dc:	28c00007 	ldb	r3,0(r5)
  8063e0:	18000626 	beq	r3,zero,8063fc <__sflags+0x6c>
  8063e4:	19c00826 	beq	r3,r7,806408 <__sflags+0x78>
  8063e8:	1a3ffb1e 	bne	r3,r8,8063d8 <__alt_mem_onchip_mem+0xff7fe3d8>
  8063ec:	29400044 	addi	r5,r5,1
  8063f0:	28c00007 	ldb	r3,0(r5)
  8063f4:	21020014 	ori	r4,r4,2048
  8063f8:	183ffa1e 	bne	r3,zero,8063e4 <__alt_mem_onchip_mem+0xff7fe3e4>
  8063fc:	22c8b03a 	or	r4,r4,r11
  806400:	31000015 	stw	r4,0(r6)
  806404:	f800283a 	ret
  806408:	1284703a 	and	r2,r2,r10
  80640c:	2248703a 	and	r4,r4,r9
  806410:	10800414 	ori	r2,r2,16
  806414:	21000094 	ori	r4,r4,2
  806418:	003fef06 	br	8063d8 <__alt_mem_onchip_mem+0xff7fe3d8>
  80641c:	02c18004 	movi	r11,1536
  806420:	01000044 	movi	r4,1
  806424:	00800204 	movi	r2,8
  806428:	003fe706 	br	8063c8 <__alt_mem_onchip_mem+0xff7fe3c8>
  80642c:	0017883a 	mov	r11,zero
  806430:	0009883a 	mov	r4,zero
  806434:	00800104 	movi	r2,4
  806438:	003fe306 	br	8063c8 <__alt_mem_onchip_mem+0xff7fe3c8>

0080643c <_malloc_trim_r>:
  80643c:	defffb04 	addi	sp,sp,-20
  806440:	dcc00315 	stw	r19,12(sp)
  806444:	04c02074 	movhi	r19,129
  806448:	dc800215 	stw	r18,8(sp)
  80644c:	dc400115 	stw	r17,4(sp)
  806450:	dc000015 	stw	r16,0(sp)
  806454:	dfc00415 	stw	ra,16(sp)
  806458:	2821883a 	mov	r16,r5
  80645c:	9cc9ed04 	addi	r19,r19,10164
  806460:	2025883a 	mov	r18,r4
  806464:	080e3280 	call	80e328 <__malloc_lock>
  806468:	98800217 	ldw	r2,8(r19)
  80646c:	14400117 	ldw	r17,4(r2)
  806470:	00bfff04 	movi	r2,-4
  806474:	88a2703a 	and	r17,r17,r2
  806478:	8c21c83a 	sub	r16,r17,r16
  80647c:	8403fbc4 	addi	r16,r16,4079
  806480:	8020d33a 	srli	r16,r16,12
  806484:	0083ffc4 	movi	r2,4095
  806488:	843fffc4 	addi	r16,r16,-1
  80648c:	8020933a 	slli	r16,r16,12
  806490:	1400060e 	bge	r2,r16,8064ac <_malloc_trim_r+0x70>
  806494:	000b883a 	mov	r5,zero
  806498:	9009883a 	mov	r4,r18
  80649c:	0801dc00 	call	801dc0 <_sbrk_r>
  8064a0:	98c00217 	ldw	r3,8(r19)
  8064a4:	1c47883a 	add	r3,r3,r17
  8064a8:	10c00a26 	beq	r2,r3,8064d4 <_malloc_trim_r+0x98>
  8064ac:	9009883a 	mov	r4,r18
  8064b0:	080e34c0 	call	80e34c <__malloc_unlock>
  8064b4:	0005883a 	mov	r2,zero
  8064b8:	dfc00417 	ldw	ra,16(sp)
  8064bc:	dcc00317 	ldw	r19,12(sp)
  8064c0:	dc800217 	ldw	r18,8(sp)
  8064c4:	dc400117 	ldw	r17,4(sp)
  8064c8:	dc000017 	ldw	r16,0(sp)
  8064cc:	dec00504 	addi	sp,sp,20
  8064d0:	f800283a 	ret
  8064d4:	040bc83a 	sub	r5,zero,r16
  8064d8:	9009883a 	mov	r4,r18
  8064dc:	0801dc00 	call	801dc0 <_sbrk_r>
  8064e0:	00ffffc4 	movi	r3,-1
  8064e4:	10c00d26 	beq	r2,r3,80651c <_malloc_trim_r+0xe0>
  8064e8:	00c02074 	movhi	r3,129
  8064ec:	18d76a04 	addi	r3,r3,23976
  8064f0:	18800017 	ldw	r2,0(r3)
  8064f4:	99000217 	ldw	r4,8(r19)
  8064f8:	8c23c83a 	sub	r17,r17,r16
  8064fc:	8c400054 	ori	r17,r17,1
  806500:	1421c83a 	sub	r16,r2,r16
  806504:	24400115 	stw	r17,4(r4)
  806508:	9009883a 	mov	r4,r18
  80650c:	1c000015 	stw	r16,0(r3)
  806510:	080e34c0 	call	80e34c <__malloc_unlock>
  806514:	00800044 	movi	r2,1
  806518:	003fe706 	br	8064b8 <__alt_mem_onchip_mem+0xff7fe4b8>
  80651c:	000b883a 	mov	r5,zero
  806520:	9009883a 	mov	r4,r18
  806524:	0801dc00 	call	801dc0 <_sbrk_r>
  806528:	99000217 	ldw	r4,8(r19)
  80652c:	014003c4 	movi	r5,15
  806530:	1107c83a 	sub	r3,r2,r4
  806534:	28ffdd0e 	bge	r5,r3,8064ac <__alt_mem_onchip_mem+0xff7fe4ac>
  806538:	01402074 	movhi	r5,129
  80653c:	29500a04 	addi	r5,r5,16424
  806540:	29400017 	ldw	r5,0(r5)
  806544:	18c00054 	ori	r3,r3,1
  806548:	20c00115 	stw	r3,4(r4)
  80654c:	00c02074 	movhi	r3,129
  806550:	1145c83a 	sub	r2,r2,r5
  806554:	18d76a04 	addi	r3,r3,23976
  806558:	18800015 	stw	r2,0(r3)
  80655c:	003fd306 	br	8064ac <__alt_mem_onchip_mem+0xff7fe4ac>

00806560 <_free_r>:
  806560:	28004126 	beq	r5,zero,806668 <_free_r+0x108>
  806564:	defffd04 	addi	sp,sp,-12
  806568:	dc400115 	stw	r17,4(sp)
  80656c:	dc000015 	stw	r16,0(sp)
  806570:	2023883a 	mov	r17,r4
  806574:	2821883a 	mov	r16,r5
  806578:	dfc00215 	stw	ra,8(sp)
  80657c:	080e3280 	call	80e328 <__malloc_lock>
  806580:	81ffff17 	ldw	r7,-4(r16)
  806584:	00bfff84 	movi	r2,-2
  806588:	01002074 	movhi	r4,129
  80658c:	81bffe04 	addi	r6,r16,-8
  806590:	3884703a 	and	r2,r7,r2
  806594:	2109ed04 	addi	r4,r4,10164
  806598:	308b883a 	add	r5,r6,r2
  80659c:	2a400117 	ldw	r9,4(r5)
  8065a0:	22000217 	ldw	r8,8(r4)
  8065a4:	00ffff04 	movi	r3,-4
  8065a8:	48c6703a 	and	r3,r9,r3
  8065ac:	2a005726 	beq	r5,r8,80670c <_free_r+0x1ac>
  8065b0:	28c00115 	stw	r3,4(r5)
  8065b4:	39c0004c 	andi	r7,r7,1
  8065b8:	3800091e 	bne	r7,zero,8065e0 <_free_r+0x80>
  8065bc:	823ffe17 	ldw	r8,-8(r16)
  8065c0:	22400204 	addi	r9,r4,8
  8065c4:	320dc83a 	sub	r6,r6,r8
  8065c8:	31c00217 	ldw	r7,8(r6)
  8065cc:	1205883a 	add	r2,r2,r8
  8065d0:	3a406526 	beq	r7,r9,806768 <_free_r+0x208>
  8065d4:	32000317 	ldw	r8,12(r6)
  8065d8:	3a000315 	stw	r8,12(r7)
  8065dc:	41c00215 	stw	r7,8(r8)
  8065e0:	28cf883a 	add	r7,r5,r3
  8065e4:	39c00117 	ldw	r7,4(r7)
  8065e8:	39c0004c 	andi	r7,r7,1
  8065ec:	38003a26 	beq	r7,zero,8066d8 <_free_r+0x178>
  8065f0:	10c00054 	ori	r3,r2,1
  8065f4:	30c00115 	stw	r3,4(r6)
  8065f8:	3087883a 	add	r3,r6,r2
  8065fc:	18800015 	stw	r2,0(r3)
  806600:	00c07fc4 	movi	r3,511
  806604:	18801936 	bltu	r3,r2,80666c <_free_r+0x10c>
  806608:	1004d0fa 	srli	r2,r2,3
  80660c:	01c00044 	movi	r7,1
  806610:	21400117 	ldw	r5,4(r4)
  806614:	10c00044 	addi	r3,r2,1
  806618:	18c7883a 	add	r3,r3,r3
  80661c:	1005d0ba 	srai	r2,r2,2
  806620:	18c7883a 	add	r3,r3,r3
  806624:	18c7883a 	add	r3,r3,r3
  806628:	1907883a 	add	r3,r3,r4
  80662c:	3884983a 	sll	r2,r7,r2
  806630:	19c00017 	ldw	r7,0(r3)
  806634:	1a3ffe04 	addi	r8,r3,-8
  806638:	1144b03a 	or	r2,r2,r5
  80663c:	32000315 	stw	r8,12(r6)
  806640:	31c00215 	stw	r7,8(r6)
  806644:	20800115 	stw	r2,4(r4)
  806648:	19800015 	stw	r6,0(r3)
  80664c:	39800315 	stw	r6,12(r7)
  806650:	8809883a 	mov	r4,r17
  806654:	dfc00217 	ldw	ra,8(sp)
  806658:	dc400117 	ldw	r17,4(sp)
  80665c:	dc000017 	ldw	r16,0(sp)
  806660:	dec00304 	addi	sp,sp,12
  806664:	080e34c1 	jmpi	80e34c <__malloc_unlock>
  806668:	f800283a 	ret
  80666c:	100ad27a 	srli	r5,r2,9
  806670:	00c00104 	movi	r3,4
  806674:	19404a36 	bltu	r3,r5,8067a0 <_free_r+0x240>
  806678:	100ad1ba 	srli	r5,r2,6
  80667c:	28c00e44 	addi	r3,r5,57
  806680:	18c7883a 	add	r3,r3,r3
  806684:	29400e04 	addi	r5,r5,56
  806688:	18c7883a 	add	r3,r3,r3
  80668c:	18c7883a 	add	r3,r3,r3
  806690:	1909883a 	add	r4,r3,r4
  806694:	20c00017 	ldw	r3,0(r4)
  806698:	01c02074 	movhi	r7,129
  80669c:	213ffe04 	addi	r4,r4,-8
  8066a0:	39c9ed04 	addi	r7,r7,10164
  8066a4:	20c04426 	beq	r4,r3,8067b8 <_free_r+0x258>
  8066a8:	01ffff04 	movi	r7,-4
  8066ac:	19400117 	ldw	r5,4(r3)
  8066b0:	29ca703a 	and	r5,r5,r7
  8066b4:	1140022e 	bgeu	r2,r5,8066c0 <_free_r+0x160>
  8066b8:	18c00217 	ldw	r3,8(r3)
  8066bc:	20fffb1e 	bne	r4,r3,8066ac <__alt_mem_onchip_mem+0xff7fe6ac>
  8066c0:	19000317 	ldw	r4,12(r3)
  8066c4:	31000315 	stw	r4,12(r6)
  8066c8:	30c00215 	stw	r3,8(r6)
  8066cc:	21800215 	stw	r6,8(r4)
  8066d0:	19800315 	stw	r6,12(r3)
  8066d4:	003fde06 	br	806650 <__alt_mem_onchip_mem+0xff7fe650>
  8066d8:	29c00217 	ldw	r7,8(r5)
  8066dc:	10c5883a 	add	r2,r2,r3
  8066e0:	00c02074 	movhi	r3,129
  8066e4:	18c9ef04 	addi	r3,r3,10172
  8066e8:	38c03b26 	beq	r7,r3,8067d8 <_free_r+0x278>
  8066ec:	2a000317 	ldw	r8,12(r5)
  8066f0:	11400054 	ori	r5,r2,1
  8066f4:	3087883a 	add	r3,r6,r2
  8066f8:	3a000315 	stw	r8,12(r7)
  8066fc:	41c00215 	stw	r7,8(r8)
  806700:	31400115 	stw	r5,4(r6)
  806704:	18800015 	stw	r2,0(r3)
  806708:	003fbd06 	br	806600 <__alt_mem_onchip_mem+0xff7fe600>
  80670c:	39c0004c 	andi	r7,r7,1
  806710:	10c5883a 	add	r2,r2,r3
  806714:	3800071e 	bne	r7,zero,806734 <_free_r+0x1d4>
  806718:	81fffe17 	ldw	r7,-8(r16)
  80671c:	31cdc83a 	sub	r6,r6,r7
  806720:	30c00317 	ldw	r3,12(r6)
  806724:	31400217 	ldw	r5,8(r6)
  806728:	11c5883a 	add	r2,r2,r7
  80672c:	28c00315 	stw	r3,12(r5)
  806730:	19400215 	stw	r5,8(r3)
  806734:	10c00054 	ori	r3,r2,1
  806738:	30c00115 	stw	r3,4(r6)
  80673c:	00c02074 	movhi	r3,129
  806740:	18d00b04 	addi	r3,r3,16428
  806744:	18c00017 	ldw	r3,0(r3)
  806748:	21800215 	stw	r6,8(r4)
  80674c:	10ffc036 	bltu	r2,r3,806650 <__alt_mem_onchip_mem+0xff7fe650>
  806750:	00802074 	movhi	r2,129
  806754:	10975f04 	addi	r2,r2,23932
  806758:	11400017 	ldw	r5,0(r2)
  80675c:	8809883a 	mov	r4,r17
  806760:	080643c0 	call	80643c <_malloc_trim_r>
  806764:	003fba06 	br	806650 <__alt_mem_onchip_mem+0xff7fe650>
  806768:	28c9883a 	add	r4,r5,r3
  80676c:	21000117 	ldw	r4,4(r4)
  806770:	2100004c 	andi	r4,r4,1
  806774:	2000391e 	bne	r4,zero,80685c <_free_r+0x2fc>
  806778:	29c00217 	ldw	r7,8(r5)
  80677c:	29000317 	ldw	r4,12(r5)
  806780:	1885883a 	add	r2,r3,r2
  806784:	10c00054 	ori	r3,r2,1
  806788:	39000315 	stw	r4,12(r7)
  80678c:	21c00215 	stw	r7,8(r4)
  806790:	30c00115 	stw	r3,4(r6)
  806794:	308d883a 	add	r6,r6,r2
  806798:	30800015 	stw	r2,0(r6)
  80679c:	003fac06 	br	806650 <__alt_mem_onchip_mem+0xff7fe650>
  8067a0:	00c00504 	movi	r3,20
  8067a4:	19401536 	bltu	r3,r5,8067fc <_free_r+0x29c>
  8067a8:	28c01704 	addi	r3,r5,92
  8067ac:	18c7883a 	add	r3,r3,r3
  8067b0:	294016c4 	addi	r5,r5,91
  8067b4:	003fb406 	br	806688 <__alt_mem_onchip_mem+0xff7fe688>
  8067b8:	280bd0ba 	srai	r5,r5,2
  8067bc:	00c00044 	movi	r3,1
  8067c0:	38800117 	ldw	r2,4(r7)
  8067c4:	194a983a 	sll	r5,r3,r5
  8067c8:	2007883a 	mov	r3,r4
  8067cc:	2884b03a 	or	r2,r5,r2
  8067d0:	38800115 	stw	r2,4(r7)
  8067d4:	003fbb06 	br	8066c4 <__alt_mem_onchip_mem+0xff7fe6c4>
  8067d8:	21800515 	stw	r6,20(r4)
  8067dc:	21800415 	stw	r6,16(r4)
  8067e0:	10c00054 	ori	r3,r2,1
  8067e4:	31c00315 	stw	r7,12(r6)
  8067e8:	31c00215 	stw	r7,8(r6)
  8067ec:	30c00115 	stw	r3,4(r6)
  8067f0:	308d883a 	add	r6,r6,r2
  8067f4:	30800015 	stw	r2,0(r6)
  8067f8:	003f9506 	br	806650 <__alt_mem_onchip_mem+0xff7fe650>
  8067fc:	00c01504 	movi	r3,84
  806800:	19400536 	bltu	r3,r5,806818 <_free_r+0x2b8>
  806804:	100ad33a 	srli	r5,r2,12
  806808:	28c01bc4 	addi	r3,r5,111
  80680c:	18c7883a 	add	r3,r3,r3
  806810:	29401b84 	addi	r5,r5,110
  806814:	003f9c06 	br	806688 <__alt_mem_onchip_mem+0xff7fe688>
  806818:	00c05504 	movi	r3,340
  80681c:	19400536 	bltu	r3,r5,806834 <_free_r+0x2d4>
  806820:	100ad3fa 	srli	r5,r2,15
  806824:	28c01e04 	addi	r3,r5,120
  806828:	18c7883a 	add	r3,r3,r3
  80682c:	29401dc4 	addi	r5,r5,119
  806830:	003f9506 	br	806688 <__alt_mem_onchip_mem+0xff7fe688>
  806834:	00c15504 	movi	r3,1364
  806838:	19400536 	bltu	r3,r5,806850 <_free_r+0x2f0>
  80683c:	100ad4ba 	srli	r5,r2,18
  806840:	28c01f44 	addi	r3,r5,125
  806844:	18c7883a 	add	r3,r3,r3
  806848:	29401f04 	addi	r5,r5,124
  80684c:	003f8e06 	br	806688 <__alt_mem_onchip_mem+0xff7fe688>
  806850:	00c03f84 	movi	r3,254
  806854:	01401f84 	movi	r5,126
  806858:	003f8b06 	br	806688 <__alt_mem_onchip_mem+0xff7fe688>
  80685c:	10c00054 	ori	r3,r2,1
  806860:	30c00115 	stw	r3,4(r6)
  806864:	308d883a 	add	r6,r6,r2
  806868:	30800015 	stw	r2,0(r6)
  80686c:	003f7806 	br	806650 <__alt_mem_onchip_mem+0xff7fe650>

00806870 <__sfvwrite_r>:
  806870:	30800217 	ldw	r2,8(r6)
  806874:	10006726 	beq	r2,zero,806a14 <__sfvwrite_r+0x1a4>
  806878:	28c0030b 	ldhu	r3,12(r5)
  80687c:	defff404 	addi	sp,sp,-48
  806880:	dd400715 	stw	r21,28(sp)
  806884:	dd000615 	stw	r20,24(sp)
  806888:	dc000215 	stw	r16,8(sp)
  80688c:	dfc00b15 	stw	ra,44(sp)
  806890:	df000a15 	stw	fp,40(sp)
  806894:	ddc00915 	stw	r23,36(sp)
  806898:	dd800815 	stw	r22,32(sp)
  80689c:	dcc00515 	stw	r19,20(sp)
  8068a0:	dc800415 	stw	r18,16(sp)
  8068a4:	dc400315 	stw	r17,12(sp)
  8068a8:	1880020c 	andi	r2,r3,8
  8068ac:	2821883a 	mov	r16,r5
  8068b0:	202b883a 	mov	r21,r4
  8068b4:	3029883a 	mov	r20,r6
  8068b8:	10002726 	beq	r2,zero,806958 <__sfvwrite_r+0xe8>
  8068bc:	28800417 	ldw	r2,16(r5)
  8068c0:	10002526 	beq	r2,zero,806958 <__sfvwrite_r+0xe8>
  8068c4:	1880008c 	andi	r2,r3,2
  8068c8:	a4400017 	ldw	r17,0(r20)
  8068cc:	10002a26 	beq	r2,zero,806978 <__sfvwrite_r+0x108>
  8068d0:	05a00034 	movhi	r22,32768
  8068d4:	0027883a 	mov	r19,zero
  8068d8:	0025883a 	mov	r18,zero
  8068dc:	b5bf0004 	addi	r22,r22,-1024
  8068e0:	980d883a 	mov	r6,r19
  8068e4:	a809883a 	mov	r4,r21
  8068e8:	90004626 	beq	r18,zero,806a04 <__sfvwrite_r+0x194>
  8068ec:	900f883a 	mov	r7,r18
  8068f0:	b480022e 	bgeu	r22,r18,8068fc <__sfvwrite_r+0x8c>
  8068f4:	01e00034 	movhi	r7,32768
  8068f8:	39ff0004 	addi	r7,r7,-1024
  8068fc:	80800917 	ldw	r2,36(r16)
  806900:	81400717 	ldw	r5,28(r16)
  806904:	103ee83a 	callr	r2
  806908:	0080570e 	bge	zero,r2,806a68 <__sfvwrite_r+0x1f8>
  80690c:	a0c00217 	ldw	r3,8(r20)
  806910:	98a7883a 	add	r19,r19,r2
  806914:	90a5c83a 	sub	r18,r18,r2
  806918:	1885c83a 	sub	r2,r3,r2
  80691c:	a0800215 	stw	r2,8(r20)
  806920:	103fef1e 	bne	r2,zero,8068e0 <__alt_mem_onchip_mem+0xff7fe8e0>
  806924:	0005883a 	mov	r2,zero
  806928:	dfc00b17 	ldw	ra,44(sp)
  80692c:	df000a17 	ldw	fp,40(sp)
  806930:	ddc00917 	ldw	r23,36(sp)
  806934:	dd800817 	ldw	r22,32(sp)
  806938:	dd400717 	ldw	r21,28(sp)
  80693c:	dd000617 	ldw	r20,24(sp)
  806940:	dcc00517 	ldw	r19,20(sp)
  806944:	dc800417 	ldw	r18,16(sp)
  806948:	dc400317 	ldw	r17,12(sp)
  80694c:	dc000217 	ldw	r16,8(sp)
  806950:	dec00c04 	addi	sp,sp,48
  806954:	f800283a 	ret
  806958:	800b883a 	mov	r5,r16
  80695c:	a809883a 	mov	r4,r21
  806960:	08043180 	call	804318 <__swsetup_r>
  806964:	1000eb1e 	bne	r2,zero,806d14 <__sfvwrite_r+0x4a4>
  806968:	80c0030b 	ldhu	r3,12(r16)
  80696c:	a4400017 	ldw	r17,0(r20)
  806970:	1880008c 	andi	r2,r3,2
  806974:	103fd61e 	bne	r2,zero,8068d0 <__alt_mem_onchip_mem+0xff7fe8d0>
  806978:	1880004c 	andi	r2,r3,1
  80697c:	10003f1e 	bne	r2,zero,806a7c <__sfvwrite_r+0x20c>
  806980:	0039883a 	mov	fp,zero
  806984:	0025883a 	mov	r18,zero
  806988:	90001a26 	beq	r18,zero,8069f4 <__sfvwrite_r+0x184>
  80698c:	1880800c 	andi	r2,r3,512
  806990:	84c00217 	ldw	r19,8(r16)
  806994:	10002126 	beq	r2,zero,806a1c <__sfvwrite_r+0x1ac>
  806998:	982f883a 	mov	r23,r19
  80699c:	94c09336 	bltu	r18,r19,806bec <__sfvwrite_r+0x37c>
  8069a0:	1881200c 	andi	r2,r3,1152
  8069a4:	10009e1e 	bne	r2,zero,806c20 <__sfvwrite_r+0x3b0>
  8069a8:	81000017 	ldw	r4,0(r16)
  8069ac:	b80d883a 	mov	r6,r23
  8069b0:	e00b883a 	mov	r5,fp
  8069b4:	08072700 	call	807270 <memmove>
  8069b8:	80c00217 	ldw	r3,8(r16)
  8069bc:	81000017 	ldw	r4,0(r16)
  8069c0:	9005883a 	mov	r2,r18
  8069c4:	1ce7c83a 	sub	r19,r3,r19
  8069c8:	25cf883a 	add	r7,r4,r23
  8069cc:	84c00215 	stw	r19,8(r16)
  8069d0:	81c00015 	stw	r7,0(r16)
  8069d4:	a0c00217 	ldw	r3,8(r20)
  8069d8:	e0b9883a 	add	fp,fp,r2
  8069dc:	90a5c83a 	sub	r18,r18,r2
  8069e0:	18a7c83a 	sub	r19,r3,r2
  8069e4:	a4c00215 	stw	r19,8(r20)
  8069e8:	983fce26 	beq	r19,zero,806924 <__alt_mem_onchip_mem+0xff7fe924>
  8069ec:	80c0030b 	ldhu	r3,12(r16)
  8069f0:	903fe61e 	bne	r18,zero,80698c <__alt_mem_onchip_mem+0xff7fe98c>
  8069f4:	8f000017 	ldw	fp,0(r17)
  8069f8:	8c800117 	ldw	r18,4(r17)
  8069fc:	8c400204 	addi	r17,r17,8
  806a00:	003fe106 	br	806988 <__alt_mem_onchip_mem+0xff7fe988>
  806a04:	8cc00017 	ldw	r19,0(r17)
  806a08:	8c800117 	ldw	r18,4(r17)
  806a0c:	8c400204 	addi	r17,r17,8
  806a10:	003fb306 	br	8068e0 <__alt_mem_onchip_mem+0xff7fe8e0>
  806a14:	0005883a 	mov	r2,zero
  806a18:	f800283a 	ret
  806a1c:	81000017 	ldw	r4,0(r16)
  806a20:	80800417 	ldw	r2,16(r16)
  806a24:	11005736 	bltu	r2,r4,806b84 <__sfvwrite_r+0x314>
  806a28:	85c00517 	ldw	r23,20(r16)
  806a2c:	95c05536 	bltu	r18,r23,806b84 <__sfvwrite_r+0x314>
  806a30:	00a00034 	movhi	r2,32768
  806a34:	10bfffc4 	addi	r2,r2,-1
  806a38:	9009883a 	mov	r4,r18
  806a3c:	1480012e 	bgeu	r2,r18,806a44 <__sfvwrite_r+0x1d4>
  806a40:	1009883a 	mov	r4,r2
  806a44:	b80b883a 	mov	r5,r23
  806a48:	080b2e40 	call	80b2e4 <__divsi3>
  806a4c:	15cf383a 	mul	r7,r2,r23
  806a50:	81400717 	ldw	r5,28(r16)
  806a54:	80800917 	ldw	r2,36(r16)
  806a58:	e00d883a 	mov	r6,fp
  806a5c:	a809883a 	mov	r4,r21
  806a60:	103ee83a 	callr	r2
  806a64:	00bfdb16 	blt	zero,r2,8069d4 <__alt_mem_onchip_mem+0xff7fe9d4>
  806a68:	8080030b 	ldhu	r2,12(r16)
  806a6c:	10801014 	ori	r2,r2,64
  806a70:	8080030d 	sth	r2,12(r16)
  806a74:	00bfffc4 	movi	r2,-1
  806a78:	003fab06 	br	806928 <__alt_mem_onchip_mem+0xff7fe928>
  806a7c:	0027883a 	mov	r19,zero
  806a80:	0011883a 	mov	r8,zero
  806a84:	0039883a 	mov	fp,zero
  806a88:	0025883a 	mov	r18,zero
  806a8c:	90001f26 	beq	r18,zero,806b0c <__sfvwrite_r+0x29c>
  806a90:	40005a26 	beq	r8,zero,806bfc <__sfvwrite_r+0x38c>
  806a94:	982d883a 	mov	r22,r19
  806a98:	94c0012e 	bgeu	r18,r19,806aa0 <__sfvwrite_r+0x230>
  806a9c:	902d883a 	mov	r22,r18
  806aa0:	81000017 	ldw	r4,0(r16)
  806aa4:	80800417 	ldw	r2,16(r16)
  806aa8:	b02f883a 	mov	r23,r22
  806aac:	81c00517 	ldw	r7,20(r16)
  806ab0:	1100032e 	bgeu	r2,r4,806ac0 <__sfvwrite_r+0x250>
  806ab4:	80c00217 	ldw	r3,8(r16)
  806ab8:	38c7883a 	add	r3,r7,r3
  806abc:	1d801816 	blt	r3,r22,806b20 <__sfvwrite_r+0x2b0>
  806ac0:	b1c03e16 	blt	r22,r7,806bbc <__sfvwrite_r+0x34c>
  806ac4:	80800917 	ldw	r2,36(r16)
  806ac8:	81400717 	ldw	r5,28(r16)
  806acc:	e00d883a 	mov	r6,fp
  806ad0:	da000115 	stw	r8,4(sp)
  806ad4:	a809883a 	mov	r4,r21
  806ad8:	103ee83a 	callr	r2
  806adc:	102f883a 	mov	r23,r2
  806ae0:	da000117 	ldw	r8,4(sp)
  806ae4:	00bfe00e 	bge	zero,r2,806a68 <__alt_mem_onchip_mem+0xff7fea68>
  806ae8:	9de7c83a 	sub	r19,r19,r23
  806aec:	98001f26 	beq	r19,zero,806b6c <__sfvwrite_r+0x2fc>
  806af0:	a0800217 	ldw	r2,8(r20)
  806af4:	e5f9883a 	add	fp,fp,r23
  806af8:	95e5c83a 	sub	r18,r18,r23
  806afc:	15efc83a 	sub	r23,r2,r23
  806b00:	a5c00215 	stw	r23,8(r20)
  806b04:	b83f8726 	beq	r23,zero,806924 <__alt_mem_onchip_mem+0xff7fe924>
  806b08:	903fe11e 	bne	r18,zero,806a90 <__alt_mem_onchip_mem+0xff7fea90>
  806b0c:	8f000017 	ldw	fp,0(r17)
  806b10:	8c800117 	ldw	r18,4(r17)
  806b14:	0011883a 	mov	r8,zero
  806b18:	8c400204 	addi	r17,r17,8
  806b1c:	003fdb06 	br	806a8c <__alt_mem_onchip_mem+0xff7fea8c>
  806b20:	180d883a 	mov	r6,r3
  806b24:	e00b883a 	mov	r5,fp
  806b28:	da000115 	stw	r8,4(sp)
  806b2c:	d8c00015 	stw	r3,0(sp)
  806b30:	08072700 	call	807270 <memmove>
  806b34:	d8c00017 	ldw	r3,0(sp)
  806b38:	80800017 	ldw	r2,0(r16)
  806b3c:	800b883a 	mov	r5,r16
  806b40:	a809883a 	mov	r4,r21
  806b44:	10c5883a 	add	r2,r2,r3
  806b48:	80800015 	stw	r2,0(r16)
  806b4c:	d8c00015 	stw	r3,0(sp)
  806b50:	0805f640 	call	805f64 <_fflush_r>
  806b54:	d8c00017 	ldw	r3,0(sp)
  806b58:	da000117 	ldw	r8,4(sp)
  806b5c:	103fc21e 	bne	r2,zero,806a68 <__alt_mem_onchip_mem+0xff7fea68>
  806b60:	182f883a 	mov	r23,r3
  806b64:	9de7c83a 	sub	r19,r19,r23
  806b68:	983fe11e 	bne	r19,zero,806af0 <__alt_mem_onchip_mem+0xff7feaf0>
  806b6c:	800b883a 	mov	r5,r16
  806b70:	a809883a 	mov	r4,r21
  806b74:	0805f640 	call	805f64 <_fflush_r>
  806b78:	103fbb1e 	bne	r2,zero,806a68 <__alt_mem_onchip_mem+0xff7fea68>
  806b7c:	0011883a 	mov	r8,zero
  806b80:	003fdb06 	br	806af0 <__alt_mem_onchip_mem+0xff7feaf0>
  806b84:	94c0012e 	bgeu	r18,r19,806b8c <__sfvwrite_r+0x31c>
  806b88:	9027883a 	mov	r19,r18
  806b8c:	980d883a 	mov	r6,r19
  806b90:	e00b883a 	mov	r5,fp
  806b94:	08072700 	call	807270 <memmove>
  806b98:	80800217 	ldw	r2,8(r16)
  806b9c:	80c00017 	ldw	r3,0(r16)
  806ba0:	14c5c83a 	sub	r2,r2,r19
  806ba4:	1cc7883a 	add	r3,r3,r19
  806ba8:	80800215 	stw	r2,8(r16)
  806bac:	80c00015 	stw	r3,0(r16)
  806bb0:	10004326 	beq	r2,zero,806cc0 <__sfvwrite_r+0x450>
  806bb4:	9805883a 	mov	r2,r19
  806bb8:	003f8606 	br	8069d4 <__alt_mem_onchip_mem+0xff7fe9d4>
  806bbc:	b00d883a 	mov	r6,r22
  806bc0:	e00b883a 	mov	r5,fp
  806bc4:	da000115 	stw	r8,4(sp)
  806bc8:	08072700 	call	807270 <memmove>
  806bcc:	80800217 	ldw	r2,8(r16)
  806bd0:	80c00017 	ldw	r3,0(r16)
  806bd4:	da000117 	ldw	r8,4(sp)
  806bd8:	1585c83a 	sub	r2,r2,r22
  806bdc:	1dad883a 	add	r22,r3,r22
  806be0:	80800215 	stw	r2,8(r16)
  806be4:	85800015 	stw	r22,0(r16)
  806be8:	003fbf06 	br	806ae8 <__alt_mem_onchip_mem+0xff7feae8>
  806bec:	81000017 	ldw	r4,0(r16)
  806bf0:	9027883a 	mov	r19,r18
  806bf4:	902f883a 	mov	r23,r18
  806bf8:	003f6c06 	br	8069ac <__alt_mem_onchip_mem+0xff7fe9ac>
  806bfc:	900d883a 	mov	r6,r18
  806c00:	01400284 	movi	r5,10
  806c04:	e009883a 	mov	r4,fp
  806c08:	08070440 	call	807044 <memchr>
  806c0c:	10003e26 	beq	r2,zero,806d08 <__sfvwrite_r+0x498>
  806c10:	10800044 	addi	r2,r2,1
  806c14:	1727c83a 	sub	r19,r2,fp
  806c18:	02000044 	movi	r8,1
  806c1c:	003f9d06 	br	806a94 <__alt_mem_onchip_mem+0xff7fea94>
  806c20:	80800517 	ldw	r2,20(r16)
  806c24:	81400417 	ldw	r5,16(r16)
  806c28:	81c00017 	ldw	r7,0(r16)
  806c2c:	10a7883a 	add	r19,r2,r2
  806c30:	9885883a 	add	r2,r19,r2
  806c34:	1026d7fa 	srli	r19,r2,31
  806c38:	396dc83a 	sub	r22,r7,r5
  806c3c:	b1000044 	addi	r4,r22,1
  806c40:	9885883a 	add	r2,r19,r2
  806c44:	1027d07a 	srai	r19,r2,1
  806c48:	2485883a 	add	r2,r4,r18
  806c4c:	980d883a 	mov	r6,r19
  806c50:	9880022e 	bgeu	r19,r2,806c5c <__sfvwrite_r+0x3ec>
  806c54:	1027883a 	mov	r19,r2
  806c58:	100d883a 	mov	r6,r2
  806c5c:	18c1000c 	andi	r3,r3,1024
  806c60:	18001c26 	beq	r3,zero,806cd4 <__sfvwrite_r+0x464>
  806c64:	300b883a 	mov	r5,r6
  806c68:	a809883a 	mov	r4,r21
  806c6c:	08011680 	call	801168 <_malloc_r>
  806c70:	102f883a 	mov	r23,r2
  806c74:	10002926 	beq	r2,zero,806d1c <__sfvwrite_r+0x4ac>
  806c78:	81400417 	ldw	r5,16(r16)
  806c7c:	b00d883a 	mov	r6,r22
  806c80:	1009883a 	mov	r4,r2
  806c84:	08071280 	call	807128 <memcpy>
  806c88:	8080030b 	ldhu	r2,12(r16)
  806c8c:	00fedfc4 	movi	r3,-1153
  806c90:	10c4703a 	and	r2,r2,r3
  806c94:	10802014 	ori	r2,r2,128
  806c98:	8080030d 	sth	r2,12(r16)
  806c9c:	bd89883a 	add	r4,r23,r22
  806ca0:	9d8fc83a 	sub	r7,r19,r22
  806ca4:	85c00415 	stw	r23,16(r16)
  806ca8:	84c00515 	stw	r19,20(r16)
  806cac:	81000015 	stw	r4,0(r16)
  806cb0:	9027883a 	mov	r19,r18
  806cb4:	81c00215 	stw	r7,8(r16)
  806cb8:	902f883a 	mov	r23,r18
  806cbc:	003f3b06 	br	8069ac <__alt_mem_onchip_mem+0xff7fe9ac>
  806cc0:	800b883a 	mov	r5,r16
  806cc4:	a809883a 	mov	r4,r21
  806cc8:	0805f640 	call	805f64 <_fflush_r>
  806ccc:	103fb926 	beq	r2,zero,806bb4 <__alt_mem_onchip_mem+0xff7febb4>
  806cd0:	003f6506 	br	806a68 <__alt_mem_onchip_mem+0xff7fea68>
  806cd4:	a809883a 	mov	r4,r21
  806cd8:	08084280 	call	808428 <_realloc_r>
  806cdc:	102f883a 	mov	r23,r2
  806ce0:	103fee1e 	bne	r2,zero,806c9c <__alt_mem_onchip_mem+0xff7fec9c>
  806ce4:	81400417 	ldw	r5,16(r16)
  806ce8:	a809883a 	mov	r4,r21
  806cec:	08065600 	call	806560 <_free_r>
  806cf0:	8080030b 	ldhu	r2,12(r16)
  806cf4:	00ffdfc4 	movi	r3,-129
  806cf8:	1884703a 	and	r2,r3,r2
  806cfc:	00c00304 	movi	r3,12
  806d00:	a8c00015 	stw	r3,0(r21)
  806d04:	003f5906 	br	806a6c <__alt_mem_onchip_mem+0xff7fea6c>
  806d08:	94c00044 	addi	r19,r18,1
  806d0c:	02000044 	movi	r8,1
  806d10:	003f6006 	br	806a94 <__alt_mem_onchip_mem+0xff7fea94>
  806d14:	00bfffc4 	movi	r2,-1
  806d18:	003f0306 	br	806928 <__alt_mem_onchip_mem+0xff7fe928>
  806d1c:	00800304 	movi	r2,12
  806d20:	a8800015 	stw	r2,0(r21)
  806d24:	8080030b 	ldhu	r2,12(r16)
  806d28:	003f5006 	br	806a6c <__alt_mem_onchip_mem+0xff7fea6c>

00806d2c <_fwalk>:
  806d2c:	defff704 	addi	sp,sp,-36
  806d30:	dd000415 	stw	r20,16(sp)
  806d34:	dfc00815 	stw	ra,32(sp)
  806d38:	ddc00715 	stw	r23,28(sp)
  806d3c:	dd800615 	stw	r22,24(sp)
  806d40:	dd400515 	stw	r21,20(sp)
  806d44:	dcc00315 	stw	r19,12(sp)
  806d48:	dc800215 	stw	r18,8(sp)
  806d4c:	dc400115 	stw	r17,4(sp)
  806d50:	dc000015 	stw	r16,0(sp)
  806d54:	2500b804 	addi	r20,r4,736
  806d58:	a0002326 	beq	r20,zero,806de8 <_fwalk+0xbc>
  806d5c:	282b883a 	mov	r21,r5
  806d60:	002f883a 	mov	r23,zero
  806d64:	05800044 	movi	r22,1
  806d68:	04ffffc4 	movi	r19,-1
  806d6c:	a4400117 	ldw	r17,4(r20)
  806d70:	a4800217 	ldw	r18,8(r20)
  806d74:	8c7fffc4 	addi	r17,r17,-1
  806d78:	88000d16 	blt	r17,zero,806db0 <_fwalk+0x84>
  806d7c:	94000304 	addi	r16,r18,12
  806d80:	94800384 	addi	r18,r18,14
  806d84:	8080000b 	ldhu	r2,0(r16)
  806d88:	8c7fffc4 	addi	r17,r17,-1
  806d8c:	813ffd04 	addi	r4,r16,-12
  806d90:	b080042e 	bgeu	r22,r2,806da4 <_fwalk+0x78>
  806d94:	9080000f 	ldh	r2,0(r18)
  806d98:	14c00226 	beq	r2,r19,806da4 <_fwalk+0x78>
  806d9c:	a83ee83a 	callr	r21
  806da0:	b8aeb03a 	or	r23,r23,r2
  806da4:	84001a04 	addi	r16,r16,104
  806da8:	94801a04 	addi	r18,r18,104
  806dac:	8cfff51e 	bne	r17,r19,806d84 <__alt_mem_onchip_mem+0xff7fed84>
  806db0:	a5000017 	ldw	r20,0(r20)
  806db4:	a03fed1e 	bne	r20,zero,806d6c <__alt_mem_onchip_mem+0xff7fed6c>
  806db8:	b805883a 	mov	r2,r23
  806dbc:	dfc00817 	ldw	ra,32(sp)
  806dc0:	ddc00717 	ldw	r23,28(sp)
  806dc4:	dd800617 	ldw	r22,24(sp)
  806dc8:	dd400517 	ldw	r21,20(sp)
  806dcc:	dd000417 	ldw	r20,16(sp)
  806dd0:	dcc00317 	ldw	r19,12(sp)
  806dd4:	dc800217 	ldw	r18,8(sp)
  806dd8:	dc400117 	ldw	r17,4(sp)
  806ddc:	dc000017 	ldw	r16,0(sp)
  806de0:	dec00904 	addi	sp,sp,36
  806de4:	f800283a 	ret
  806de8:	002f883a 	mov	r23,zero
  806dec:	003ff206 	br	806db8 <__alt_mem_onchip_mem+0xff7fedb8>

00806df0 <_fwalk_reent>:
  806df0:	defff704 	addi	sp,sp,-36
  806df4:	dd000415 	stw	r20,16(sp)
  806df8:	dfc00815 	stw	ra,32(sp)
  806dfc:	ddc00715 	stw	r23,28(sp)
  806e00:	dd800615 	stw	r22,24(sp)
  806e04:	dd400515 	stw	r21,20(sp)
  806e08:	dcc00315 	stw	r19,12(sp)
  806e0c:	dc800215 	stw	r18,8(sp)
  806e10:	dc400115 	stw	r17,4(sp)
  806e14:	dc000015 	stw	r16,0(sp)
  806e18:	2500b804 	addi	r20,r4,736
  806e1c:	a0002326 	beq	r20,zero,806eac <_fwalk_reent+0xbc>
  806e20:	282b883a 	mov	r21,r5
  806e24:	2027883a 	mov	r19,r4
  806e28:	002f883a 	mov	r23,zero
  806e2c:	05800044 	movi	r22,1
  806e30:	04bfffc4 	movi	r18,-1
  806e34:	a4400117 	ldw	r17,4(r20)
  806e38:	a4000217 	ldw	r16,8(r20)
  806e3c:	8c7fffc4 	addi	r17,r17,-1
  806e40:	88000c16 	blt	r17,zero,806e74 <_fwalk_reent+0x84>
  806e44:	84000304 	addi	r16,r16,12
  806e48:	8080000b 	ldhu	r2,0(r16)
  806e4c:	8c7fffc4 	addi	r17,r17,-1
  806e50:	817ffd04 	addi	r5,r16,-12
  806e54:	b080052e 	bgeu	r22,r2,806e6c <_fwalk_reent+0x7c>
  806e58:	8080008f 	ldh	r2,2(r16)
  806e5c:	9809883a 	mov	r4,r19
  806e60:	14800226 	beq	r2,r18,806e6c <_fwalk_reent+0x7c>
  806e64:	a83ee83a 	callr	r21
  806e68:	b8aeb03a 	or	r23,r23,r2
  806e6c:	84001a04 	addi	r16,r16,104
  806e70:	8cbff51e 	bne	r17,r18,806e48 <__alt_mem_onchip_mem+0xff7fee48>
  806e74:	a5000017 	ldw	r20,0(r20)
  806e78:	a03fee1e 	bne	r20,zero,806e34 <__alt_mem_onchip_mem+0xff7fee34>
  806e7c:	b805883a 	mov	r2,r23
  806e80:	dfc00817 	ldw	ra,32(sp)
  806e84:	ddc00717 	ldw	r23,28(sp)
  806e88:	dd800617 	ldw	r22,24(sp)
  806e8c:	dd400517 	ldw	r21,20(sp)
  806e90:	dd000417 	ldw	r20,16(sp)
  806e94:	dcc00317 	ldw	r19,12(sp)
  806e98:	dc800217 	ldw	r18,8(sp)
  806e9c:	dc400117 	ldw	r17,4(sp)
  806ea0:	dc000017 	ldw	r16,0(sp)
  806ea4:	dec00904 	addi	sp,sp,36
  806ea8:	f800283a 	ret
  806eac:	002f883a 	mov	r23,zero
  806eb0:	003ff206 	br	806e7c <__alt_mem_onchip_mem+0xff7fee7c>

00806eb4 <_isatty_r>:
  806eb4:	defffd04 	addi	sp,sp,-12
  806eb8:	dc000015 	stw	r16,0(sp)
  806ebc:	04002074 	movhi	r16,129
  806ec0:	dc400115 	stw	r17,4(sp)
  806ec4:	84175c04 	addi	r16,r16,23920
  806ec8:	2023883a 	mov	r17,r4
  806ecc:	2809883a 	mov	r4,r5
  806ed0:	dfc00215 	stw	ra,8(sp)
  806ed4:	80000015 	stw	zero,0(r16)
  806ed8:	080e00c0 	call	80e00c <isatty>
  806edc:	00ffffc4 	movi	r3,-1
  806ee0:	10c00526 	beq	r2,r3,806ef8 <_isatty_r+0x44>
  806ee4:	dfc00217 	ldw	ra,8(sp)
  806ee8:	dc400117 	ldw	r17,4(sp)
  806eec:	dc000017 	ldw	r16,0(sp)
  806ef0:	dec00304 	addi	sp,sp,12
  806ef4:	f800283a 	ret
  806ef8:	80c00017 	ldw	r3,0(r16)
  806efc:	183ff926 	beq	r3,zero,806ee4 <__alt_mem_onchip_mem+0xff7feee4>
  806f00:	88c00015 	stw	r3,0(r17)
  806f04:	003ff706 	br	806ee4 <__alt_mem_onchip_mem+0xff7feee4>

00806f08 <_setlocale_r>:
  806f08:	30001b26 	beq	r6,zero,806f78 <_setlocale_r+0x70>
  806f0c:	01402074 	movhi	r5,129
  806f10:	defffe04 	addi	sp,sp,-8
  806f14:	29479f04 	addi	r5,r5,7804
  806f18:	3009883a 	mov	r4,r6
  806f1c:	dc000015 	stw	r16,0(sp)
  806f20:	dfc00115 	stw	ra,4(sp)
  806f24:	3021883a 	mov	r16,r6
  806f28:	0808a000 	call	808a00 <strcmp>
  806f2c:	1000061e 	bne	r2,zero,806f48 <_setlocale_r+0x40>
  806f30:	00802074 	movhi	r2,129
  806f34:	10878004 	addi	r2,r2,7680
  806f38:	dfc00117 	ldw	ra,4(sp)
  806f3c:	dc000017 	ldw	r16,0(sp)
  806f40:	dec00204 	addi	sp,sp,8
  806f44:	f800283a 	ret
  806f48:	01402074 	movhi	r5,129
  806f4c:	29478004 	addi	r5,r5,7680
  806f50:	8009883a 	mov	r4,r16
  806f54:	0808a000 	call	808a00 <strcmp>
  806f58:	103ff526 	beq	r2,zero,806f30 <__alt_mem_onchip_mem+0xff7fef30>
  806f5c:	01402074 	movhi	r5,129
  806f60:	29478a04 	addi	r5,r5,7720
  806f64:	8009883a 	mov	r4,r16
  806f68:	0808a000 	call	808a00 <strcmp>
  806f6c:	103ff026 	beq	r2,zero,806f30 <__alt_mem_onchip_mem+0xff7fef30>
  806f70:	0005883a 	mov	r2,zero
  806f74:	003ff006 	br	806f38 <__alt_mem_onchip_mem+0xff7fef38>
  806f78:	00802074 	movhi	r2,129
  806f7c:	10878004 	addi	r2,r2,7680
  806f80:	f800283a 	ret

00806f84 <__locale_charset>:
  806f84:	00802074 	movhi	r2,129
  806f88:	108af704 	addi	r2,r2,11228
  806f8c:	f800283a 	ret

00806f90 <__locale_mb_cur_max>:
  806f90:	00802074 	movhi	r2,129
  806f94:	10900c04 	addi	r2,r2,16432
  806f98:	10800017 	ldw	r2,0(r2)
  806f9c:	f800283a 	ret

00806fa0 <__locale_msgcharset>:
  806fa0:	00802074 	movhi	r2,129
  806fa4:	108aef04 	addi	r2,r2,11196
  806fa8:	f800283a 	ret

00806fac <__locale_cjk_lang>:
  806fac:	0005883a 	mov	r2,zero
  806fb0:	f800283a 	ret

00806fb4 <_localeconv_r>:
  806fb4:	00802074 	movhi	r2,129
  806fb8:	108aff04 	addi	r2,r2,11260
  806fbc:	f800283a 	ret

00806fc0 <setlocale>:
  806fc0:	00802074 	movhi	r2,129
  806fc4:	10900904 	addi	r2,r2,16420
  806fc8:	280d883a 	mov	r6,r5
  806fcc:	200b883a 	mov	r5,r4
  806fd0:	11000017 	ldw	r4,0(r2)
  806fd4:	0806f081 	jmpi	806f08 <_setlocale_r>

00806fd8 <localeconv>:
  806fd8:	00802074 	movhi	r2,129
  806fdc:	108aff04 	addi	r2,r2,11260
  806fe0:	f800283a 	ret

00806fe4 <_lseek_r>:
  806fe4:	defffd04 	addi	sp,sp,-12
  806fe8:	2805883a 	mov	r2,r5
  806fec:	dc000015 	stw	r16,0(sp)
  806ff0:	04002074 	movhi	r16,129
  806ff4:	dc400115 	stw	r17,4(sp)
  806ff8:	300b883a 	mov	r5,r6
  806ffc:	84175c04 	addi	r16,r16,23920
  807000:	2023883a 	mov	r17,r4
  807004:	380d883a 	mov	r6,r7
  807008:	1009883a 	mov	r4,r2
  80700c:	dfc00215 	stw	ra,8(sp)
  807010:	80000015 	stw	zero,0(r16)
  807014:	080e1d80 	call	80e1d8 <lseek>
  807018:	00ffffc4 	movi	r3,-1
  80701c:	10c00526 	beq	r2,r3,807034 <_lseek_r+0x50>
  807020:	dfc00217 	ldw	ra,8(sp)
  807024:	dc400117 	ldw	r17,4(sp)
  807028:	dc000017 	ldw	r16,0(sp)
  80702c:	dec00304 	addi	sp,sp,12
  807030:	f800283a 	ret
  807034:	80c00017 	ldw	r3,0(r16)
  807038:	183ff926 	beq	r3,zero,807020 <__alt_mem_onchip_mem+0xff7ff020>
  80703c:	88c00015 	stw	r3,0(r17)
  807040:	003ff706 	br	807020 <__alt_mem_onchip_mem+0xff7ff020>

00807044 <memchr>:
  807044:	208000cc 	andi	r2,r4,3
  807048:	280f883a 	mov	r7,r5
  80704c:	10003426 	beq	r2,zero,807120 <memchr+0xdc>
  807050:	30bfffc4 	addi	r2,r6,-1
  807054:	30001a26 	beq	r6,zero,8070c0 <memchr+0x7c>
  807058:	20c00003 	ldbu	r3,0(r4)
  80705c:	29803fcc 	andi	r6,r5,255
  807060:	30c0051e 	bne	r6,r3,807078 <memchr+0x34>
  807064:	00001806 	br	8070c8 <memchr+0x84>
  807068:	10001526 	beq	r2,zero,8070c0 <memchr+0x7c>
  80706c:	20c00003 	ldbu	r3,0(r4)
  807070:	10bfffc4 	addi	r2,r2,-1
  807074:	30c01426 	beq	r6,r3,8070c8 <memchr+0x84>
  807078:	21000044 	addi	r4,r4,1
  80707c:	20c000cc 	andi	r3,r4,3
  807080:	183ff91e 	bne	r3,zero,807068 <__alt_mem_onchip_mem+0xff7ff068>
  807084:	020000c4 	movi	r8,3
  807088:	40801136 	bltu	r8,r2,8070d0 <memchr+0x8c>
  80708c:	10000c26 	beq	r2,zero,8070c0 <memchr+0x7c>
  807090:	20c00003 	ldbu	r3,0(r4)
  807094:	29403fcc 	andi	r5,r5,255
  807098:	28c00b26 	beq	r5,r3,8070c8 <memchr+0x84>
  80709c:	20c00044 	addi	r3,r4,1
  8070a0:	39803fcc 	andi	r6,r7,255
  8070a4:	2089883a 	add	r4,r4,r2
  8070a8:	00000306 	br	8070b8 <memchr+0x74>
  8070ac:	18c00044 	addi	r3,r3,1
  8070b0:	197fffc3 	ldbu	r5,-1(r3)
  8070b4:	31400526 	beq	r6,r5,8070cc <memchr+0x88>
  8070b8:	1805883a 	mov	r2,r3
  8070bc:	20fffb1e 	bne	r4,r3,8070ac <__alt_mem_onchip_mem+0xff7ff0ac>
  8070c0:	0005883a 	mov	r2,zero
  8070c4:	f800283a 	ret
  8070c8:	2005883a 	mov	r2,r4
  8070cc:	f800283a 	ret
  8070d0:	28c03fcc 	andi	r3,r5,255
  8070d4:	1812923a 	slli	r9,r3,8
  8070d8:	02ffbff4 	movhi	r11,65279
  8070dc:	02a02074 	movhi	r10,32897
  8070e0:	48d2b03a 	or	r9,r9,r3
  8070e4:	4806943a 	slli	r3,r9,16
  8070e8:	5affbfc4 	addi	r11,r11,-257
  8070ec:	52a02004 	addi	r10,r10,-32640
  8070f0:	48d2b03a 	or	r9,r9,r3
  8070f4:	20c00017 	ldw	r3,0(r4)
  8070f8:	48c6f03a 	xor	r3,r9,r3
  8070fc:	1acd883a 	add	r6,r3,r11
  807100:	00c6303a 	nor	r3,zero,r3
  807104:	30c6703a 	and	r3,r6,r3
  807108:	1a86703a 	and	r3,r3,r10
  80710c:	183fe01e 	bne	r3,zero,807090 <__alt_mem_onchip_mem+0xff7ff090>
  807110:	10bfff04 	addi	r2,r2,-4
  807114:	21000104 	addi	r4,r4,4
  807118:	40bff636 	bltu	r8,r2,8070f4 <__alt_mem_onchip_mem+0xff7ff0f4>
  80711c:	003fdb06 	br	80708c <__alt_mem_onchip_mem+0xff7ff08c>
  807120:	3005883a 	mov	r2,r6
  807124:	003fd706 	br	807084 <__alt_mem_onchip_mem+0xff7ff084>

00807128 <memcpy>:
  807128:	defffd04 	addi	sp,sp,-12
  80712c:	dfc00215 	stw	ra,8(sp)
  807130:	dc400115 	stw	r17,4(sp)
  807134:	dc000015 	stw	r16,0(sp)
  807138:	00c003c4 	movi	r3,15
  80713c:	2005883a 	mov	r2,r4
  807140:	1980452e 	bgeu	r3,r6,807258 <memcpy+0x130>
  807144:	2906b03a 	or	r3,r5,r4
  807148:	18c000cc 	andi	r3,r3,3
  80714c:	1800441e 	bne	r3,zero,807260 <memcpy+0x138>
  807150:	347ffc04 	addi	r17,r6,-16
  807154:	8822d13a 	srli	r17,r17,4
  807158:	28c00104 	addi	r3,r5,4
  80715c:	23400104 	addi	r13,r4,4
  807160:	8820913a 	slli	r16,r17,4
  807164:	2b000204 	addi	r12,r5,8
  807168:	22c00204 	addi	r11,r4,8
  80716c:	84000504 	addi	r16,r16,20
  807170:	2a800304 	addi	r10,r5,12
  807174:	22400304 	addi	r9,r4,12
  807178:	2c21883a 	add	r16,r5,r16
  80717c:	2811883a 	mov	r8,r5
  807180:	200f883a 	mov	r7,r4
  807184:	41000017 	ldw	r4,0(r8)
  807188:	1fc00017 	ldw	ra,0(r3)
  80718c:	63c00017 	ldw	r15,0(r12)
  807190:	39000015 	stw	r4,0(r7)
  807194:	53800017 	ldw	r14,0(r10)
  807198:	6fc00015 	stw	ra,0(r13)
  80719c:	5bc00015 	stw	r15,0(r11)
  8071a0:	4b800015 	stw	r14,0(r9)
  8071a4:	18c00404 	addi	r3,r3,16
  8071a8:	39c00404 	addi	r7,r7,16
  8071ac:	42000404 	addi	r8,r8,16
  8071b0:	6b400404 	addi	r13,r13,16
  8071b4:	63000404 	addi	r12,r12,16
  8071b8:	5ac00404 	addi	r11,r11,16
  8071bc:	52800404 	addi	r10,r10,16
  8071c0:	4a400404 	addi	r9,r9,16
  8071c4:	1c3fef1e 	bne	r3,r16,807184 <__alt_mem_onchip_mem+0xff7ff184>
  8071c8:	89c00044 	addi	r7,r17,1
  8071cc:	380e913a 	slli	r7,r7,4
  8071d0:	310003cc 	andi	r4,r6,15
  8071d4:	02c000c4 	movi	r11,3
  8071d8:	11c7883a 	add	r3,r2,r7
  8071dc:	29cb883a 	add	r5,r5,r7
  8071e0:	5900212e 	bgeu	r11,r4,807268 <memcpy+0x140>
  8071e4:	1813883a 	mov	r9,r3
  8071e8:	2811883a 	mov	r8,r5
  8071ec:	200f883a 	mov	r7,r4
  8071f0:	42800017 	ldw	r10,0(r8)
  8071f4:	4a400104 	addi	r9,r9,4
  8071f8:	39ffff04 	addi	r7,r7,-4
  8071fc:	4abfff15 	stw	r10,-4(r9)
  807200:	42000104 	addi	r8,r8,4
  807204:	59fffa36 	bltu	r11,r7,8071f0 <__alt_mem_onchip_mem+0xff7ff1f0>
  807208:	213fff04 	addi	r4,r4,-4
  80720c:	2008d0ba 	srli	r4,r4,2
  807210:	318000cc 	andi	r6,r6,3
  807214:	21000044 	addi	r4,r4,1
  807218:	2109883a 	add	r4,r4,r4
  80721c:	2109883a 	add	r4,r4,r4
  807220:	1907883a 	add	r3,r3,r4
  807224:	290b883a 	add	r5,r5,r4
  807228:	30000626 	beq	r6,zero,807244 <memcpy+0x11c>
  80722c:	198d883a 	add	r6,r3,r6
  807230:	29c00003 	ldbu	r7,0(r5)
  807234:	18c00044 	addi	r3,r3,1
  807238:	29400044 	addi	r5,r5,1
  80723c:	19ffffc5 	stb	r7,-1(r3)
  807240:	19bffb1e 	bne	r3,r6,807230 <__alt_mem_onchip_mem+0xff7ff230>
  807244:	dfc00217 	ldw	ra,8(sp)
  807248:	dc400117 	ldw	r17,4(sp)
  80724c:	dc000017 	ldw	r16,0(sp)
  807250:	dec00304 	addi	sp,sp,12
  807254:	f800283a 	ret
  807258:	2007883a 	mov	r3,r4
  80725c:	003ff206 	br	807228 <__alt_mem_onchip_mem+0xff7ff228>
  807260:	2007883a 	mov	r3,r4
  807264:	003ff106 	br	80722c <__alt_mem_onchip_mem+0xff7ff22c>
  807268:	200d883a 	mov	r6,r4
  80726c:	003fee06 	br	807228 <__alt_mem_onchip_mem+0xff7ff228>

00807270 <memmove>:
  807270:	2005883a 	mov	r2,r4
  807274:	29000b2e 	bgeu	r5,r4,8072a4 <memmove+0x34>
  807278:	298f883a 	add	r7,r5,r6
  80727c:	21c0092e 	bgeu	r4,r7,8072a4 <memmove+0x34>
  807280:	2187883a 	add	r3,r4,r6
  807284:	198bc83a 	sub	r5,r3,r6
  807288:	30004826 	beq	r6,zero,8073ac <memmove+0x13c>
  80728c:	39ffffc4 	addi	r7,r7,-1
  807290:	39000003 	ldbu	r4,0(r7)
  807294:	18ffffc4 	addi	r3,r3,-1
  807298:	19000005 	stb	r4,0(r3)
  80729c:	28fffb1e 	bne	r5,r3,80728c <__alt_mem_onchip_mem+0xff7ff28c>
  8072a0:	f800283a 	ret
  8072a4:	00c003c4 	movi	r3,15
  8072a8:	1980412e 	bgeu	r3,r6,8073b0 <memmove+0x140>
  8072ac:	2886b03a 	or	r3,r5,r2
  8072b0:	18c000cc 	andi	r3,r3,3
  8072b4:	1800401e 	bne	r3,zero,8073b8 <memmove+0x148>
  8072b8:	33fffc04 	addi	r15,r6,-16
  8072bc:	781ed13a 	srli	r15,r15,4
  8072c0:	28c00104 	addi	r3,r5,4
  8072c4:	13400104 	addi	r13,r2,4
  8072c8:	781c913a 	slli	r14,r15,4
  8072cc:	2b000204 	addi	r12,r5,8
  8072d0:	12c00204 	addi	r11,r2,8
  8072d4:	73800504 	addi	r14,r14,20
  8072d8:	2a800304 	addi	r10,r5,12
  8072dc:	12400304 	addi	r9,r2,12
  8072e0:	2b9d883a 	add	r14,r5,r14
  8072e4:	2811883a 	mov	r8,r5
  8072e8:	100f883a 	mov	r7,r2
  8072ec:	41000017 	ldw	r4,0(r8)
  8072f0:	39c00404 	addi	r7,r7,16
  8072f4:	18c00404 	addi	r3,r3,16
  8072f8:	393ffc15 	stw	r4,-16(r7)
  8072fc:	193ffc17 	ldw	r4,-16(r3)
  807300:	6b400404 	addi	r13,r13,16
  807304:	5ac00404 	addi	r11,r11,16
  807308:	693ffc15 	stw	r4,-16(r13)
  80730c:	61000017 	ldw	r4,0(r12)
  807310:	4a400404 	addi	r9,r9,16
  807314:	42000404 	addi	r8,r8,16
  807318:	593ffc15 	stw	r4,-16(r11)
  80731c:	51000017 	ldw	r4,0(r10)
  807320:	63000404 	addi	r12,r12,16
  807324:	52800404 	addi	r10,r10,16
  807328:	493ffc15 	stw	r4,-16(r9)
  80732c:	1bbfef1e 	bne	r3,r14,8072ec <__alt_mem_onchip_mem+0xff7ff2ec>
  807330:	79000044 	addi	r4,r15,1
  807334:	2008913a 	slli	r4,r4,4
  807338:	328003cc 	andi	r10,r6,15
  80733c:	02c000c4 	movi	r11,3
  807340:	1107883a 	add	r3,r2,r4
  807344:	290b883a 	add	r5,r5,r4
  807348:	5a801e2e 	bgeu	r11,r10,8073c4 <memmove+0x154>
  80734c:	1813883a 	mov	r9,r3
  807350:	2811883a 	mov	r8,r5
  807354:	500f883a 	mov	r7,r10
  807358:	41000017 	ldw	r4,0(r8)
  80735c:	4a400104 	addi	r9,r9,4
  807360:	39ffff04 	addi	r7,r7,-4
  807364:	493fff15 	stw	r4,-4(r9)
  807368:	42000104 	addi	r8,r8,4
  80736c:	59fffa36 	bltu	r11,r7,807358 <__alt_mem_onchip_mem+0xff7ff358>
  807370:	513fff04 	addi	r4,r10,-4
  807374:	2008d0ba 	srli	r4,r4,2
  807378:	318000cc 	andi	r6,r6,3
  80737c:	21000044 	addi	r4,r4,1
  807380:	2109883a 	add	r4,r4,r4
  807384:	2109883a 	add	r4,r4,r4
  807388:	1907883a 	add	r3,r3,r4
  80738c:	290b883a 	add	r5,r5,r4
  807390:	30000b26 	beq	r6,zero,8073c0 <memmove+0x150>
  807394:	198d883a 	add	r6,r3,r6
  807398:	29c00003 	ldbu	r7,0(r5)
  80739c:	18c00044 	addi	r3,r3,1
  8073a0:	29400044 	addi	r5,r5,1
  8073a4:	19ffffc5 	stb	r7,-1(r3)
  8073a8:	19bffb1e 	bne	r3,r6,807398 <__alt_mem_onchip_mem+0xff7ff398>
  8073ac:	f800283a 	ret
  8073b0:	1007883a 	mov	r3,r2
  8073b4:	003ff606 	br	807390 <__alt_mem_onchip_mem+0xff7ff390>
  8073b8:	1007883a 	mov	r3,r2
  8073bc:	003ff506 	br	807394 <__alt_mem_onchip_mem+0xff7ff394>
  8073c0:	f800283a 	ret
  8073c4:	500d883a 	mov	r6,r10
  8073c8:	003ff106 	br	807390 <__alt_mem_onchip_mem+0xff7ff390>

008073cc <_Balloc>:
  8073cc:	20801317 	ldw	r2,76(r4)
  8073d0:	defffc04 	addi	sp,sp,-16
  8073d4:	dc400115 	stw	r17,4(sp)
  8073d8:	dc000015 	stw	r16,0(sp)
  8073dc:	dfc00315 	stw	ra,12(sp)
  8073e0:	dc800215 	stw	r18,8(sp)
  8073e4:	2023883a 	mov	r17,r4
  8073e8:	2821883a 	mov	r16,r5
  8073ec:	10000f26 	beq	r2,zero,80742c <_Balloc+0x60>
  8073f0:	8407883a 	add	r3,r16,r16
  8073f4:	18c7883a 	add	r3,r3,r3
  8073f8:	10c7883a 	add	r3,r2,r3
  8073fc:	18800017 	ldw	r2,0(r3)
  807400:	10001126 	beq	r2,zero,807448 <_Balloc+0x7c>
  807404:	11000017 	ldw	r4,0(r2)
  807408:	19000015 	stw	r4,0(r3)
  80740c:	10000415 	stw	zero,16(r2)
  807410:	10000315 	stw	zero,12(r2)
  807414:	dfc00317 	ldw	ra,12(sp)
  807418:	dc800217 	ldw	r18,8(sp)
  80741c:	dc400117 	ldw	r17,4(sp)
  807420:	dc000017 	ldw	r16,0(sp)
  807424:	dec00404 	addi	sp,sp,16
  807428:	f800283a 	ret
  80742c:	01800844 	movi	r6,33
  807430:	01400104 	movi	r5,4
  807434:	080a1240 	call	80a124 <_calloc_r>
  807438:	88801315 	stw	r2,76(r17)
  80743c:	103fec1e 	bne	r2,zero,8073f0 <__alt_mem_onchip_mem+0xff7ff3f0>
  807440:	0005883a 	mov	r2,zero
  807444:	003ff306 	br	807414 <__alt_mem_onchip_mem+0xff7ff414>
  807448:	01400044 	movi	r5,1
  80744c:	2c24983a 	sll	r18,r5,r16
  807450:	8809883a 	mov	r4,r17
  807454:	91800144 	addi	r6,r18,5
  807458:	318d883a 	add	r6,r6,r6
  80745c:	318d883a 	add	r6,r6,r6
  807460:	080a1240 	call	80a124 <_calloc_r>
  807464:	103ff626 	beq	r2,zero,807440 <__alt_mem_onchip_mem+0xff7ff440>
  807468:	14000115 	stw	r16,4(r2)
  80746c:	14800215 	stw	r18,8(r2)
  807470:	003fe606 	br	80740c <__alt_mem_onchip_mem+0xff7ff40c>

00807474 <_Bfree>:
  807474:	28000826 	beq	r5,zero,807498 <_Bfree+0x24>
  807478:	28c00117 	ldw	r3,4(r5)
  80747c:	20801317 	ldw	r2,76(r4)
  807480:	18c7883a 	add	r3,r3,r3
  807484:	18c7883a 	add	r3,r3,r3
  807488:	10c5883a 	add	r2,r2,r3
  80748c:	10c00017 	ldw	r3,0(r2)
  807490:	28c00015 	stw	r3,0(r5)
  807494:	11400015 	stw	r5,0(r2)
  807498:	f800283a 	ret

0080749c <__multadd>:
  80749c:	defffa04 	addi	sp,sp,-24
  8074a0:	dc800315 	stw	r18,12(sp)
  8074a4:	dc400215 	stw	r17,8(sp)
  8074a8:	dc000115 	stw	r16,4(sp)
  8074ac:	2823883a 	mov	r17,r5
  8074b0:	2c000417 	ldw	r16,16(r5)
  8074b4:	dfc00515 	stw	ra,20(sp)
  8074b8:	dcc00415 	stw	r19,16(sp)
  8074bc:	2025883a 	mov	r18,r4
  8074c0:	29400504 	addi	r5,r5,20
  8074c4:	0011883a 	mov	r8,zero
  8074c8:	28c00017 	ldw	r3,0(r5)
  8074cc:	29400104 	addi	r5,r5,4
  8074d0:	42000044 	addi	r8,r8,1
  8074d4:	18bfffcc 	andi	r2,r3,65535
  8074d8:	1185383a 	mul	r2,r2,r6
  8074dc:	1806d43a 	srli	r3,r3,16
  8074e0:	11cf883a 	add	r7,r2,r7
  8074e4:	3808d43a 	srli	r4,r7,16
  8074e8:	1987383a 	mul	r3,r3,r6
  8074ec:	38bfffcc 	andi	r2,r7,65535
  8074f0:	1907883a 	add	r3,r3,r4
  8074f4:	1808943a 	slli	r4,r3,16
  8074f8:	180ed43a 	srli	r7,r3,16
  8074fc:	2085883a 	add	r2,r4,r2
  807500:	28bfff15 	stw	r2,-4(r5)
  807504:	443ff016 	blt	r8,r16,8074c8 <__alt_mem_onchip_mem+0xff7ff4c8>
  807508:	38000926 	beq	r7,zero,807530 <__multadd+0x94>
  80750c:	88800217 	ldw	r2,8(r17)
  807510:	80800f0e 	bge	r16,r2,807550 <__multadd+0xb4>
  807514:	80800144 	addi	r2,r16,5
  807518:	1085883a 	add	r2,r2,r2
  80751c:	1085883a 	add	r2,r2,r2
  807520:	8885883a 	add	r2,r17,r2
  807524:	11c00015 	stw	r7,0(r2)
  807528:	84000044 	addi	r16,r16,1
  80752c:	8c000415 	stw	r16,16(r17)
  807530:	8805883a 	mov	r2,r17
  807534:	dfc00517 	ldw	ra,20(sp)
  807538:	dcc00417 	ldw	r19,16(sp)
  80753c:	dc800317 	ldw	r18,12(sp)
  807540:	dc400217 	ldw	r17,8(sp)
  807544:	dc000117 	ldw	r16,4(sp)
  807548:	dec00604 	addi	sp,sp,24
  80754c:	f800283a 	ret
  807550:	89400117 	ldw	r5,4(r17)
  807554:	9009883a 	mov	r4,r18
  807558:	d9c00015 	stw	r7,0(sp)
  80755c:	29400044 	addi	r5,r5,1
  807560:	08073cc0 	call	8073cc <_Balloc>
  807564:	89800417 	ldw	r6,16(r17)
  807568:	89400304 	addi	r5,r17,12
  80756c:	11000304 	addi	r4,r2,12
  807570:	31800084 	addi	r6,r6,2
  807574:	318d883a 	add	r6,r6,r6
  807578:	318d883a 	add	r6,r6,r6
  80757c:	1027883a 	mov	r19,r2
  807580:	08071280 	call	807128 <memcpy>
  807584:	d9c00017 	ldw	r7,0(sp)
  807588:	88000a26 	beq	r17,zero,8075b4 <__multadd+0x118>
  80758c:	88c00117 	ldw	r3,4(r17)
  807590:	90801317 	ldw	r2,76(r18)
  807594:	18c7883a 	add	r3,r3,r3
  807598:	18c7883a 	add	r3,r3,r3
  80759c:	10c5883a 	add	r2,r2,r3
  8075a0:	10c00017 	ldw	r3,0(r2)
  8075a4:	88c00015 	stw	r3,0(r17)
  8075a8:	14400015 	stw	r17,0(r2)
  8075ac:	9823883a 	mov	r17,r19
  8075b0:	003fd806 	br	807514 <__alt_mem_onchip_mem+0xff7ff514>
  8075b4:	9823883a 	mov	r17,r19
  8075b8:	003fd606 	br	807514 <__alt_mem_onchip_mem+0xff7ff514>

008075bc <__s2b>:
  8075bc:	defff904 	addi	sp,sp,-28
  8075c0:	dc400115 	stw	r17,4(sp)
  8075c4:	dc000015 	stw	r16,0(sp)
  8075c8:	2023883a 	mov	r17,r4
  8075cc:	2821883a 	mov	r16,r5
  8075d0:	39000204 	addi	r4,r7,8
  8075d4:	01400244 	movi	r5,9
  8075d8:	dcc00315 	stw	r19,12(sp)
  8075dc:	dc800215 	stw	r18,8(sp)
  8075e0:	dfc00615 	stw	ra,24(sp)
  8075e4:	dd400515 	stw	r21,20(sp)
  8075e8:	dd000415 	stw	r20,16(sp)
  8075ec:	3825883a 	mov	r18,r7
  8075f0:	3027883a 	mov	r19,r6
  8075f4:	080b2e40 	call	80b2e4 <__divsi3>
  8075f8:	00c00044 	movi	r3,1
  8075fc:	000b883a 	mov	r5,zero
  807600:	1880030e 	bge	r3,r2,807610 <__s2b+0x54>
  807604:	18c7883a 	add	r3,r3,r3
  807608:	29400044 	addi	r5,r5,1
  80760c:	18bffd16 	blt	r3,r2,807604 <__alt_mem_onchip_mem+0xff7ff604>
  807610:	8809883a 	mov	r4,r17
  807614:	08073cc0 	call	8073cc <_Balloc>
  807618:	d8c00717 	ldw	r3,28(sp)
  80761c:	10c00515 	stw	r3,20(r2)
  807620:	00c00044 	movi	r3,1
  807624:	10c00415 	stw	r3,16(r2)
  807628:	00c00244 	movi	r3,9
  80762c:	1cc0210e 	bge	r3,r19,8076b4 <__s2b+0xf8>
  807630:	80eb883a 	add	r21,r16,r3
  807634:	a829883a 	mov	r20,r21
  807638:	84e1883a 	add	r16,r16,r19
  80763c:	a1c00007 	ldb	r7,0(r20)
  807640:	01800284 	movi	r6,10
  807644:	a5000044 	addi	r20,r20,1
  807648:	100b883a 	mov	r5,r2
  80764c:	39fff404 	addi	r7,r7,-48
  807650:	8809883a 	mov	r4,r17
  807654:	080749c0 	call	80749c <__multadd>
  807658:	a43ff81e 	bne	r20,r16,80763c <__alt_mem_onchip_mem+0xff7ff63c>
  80765c:	ace1883a 	add	r16,r21,r19
  807660:	843ffe04 	addi	r16,r16,-8
  807664:	9c800a0e 	bge	r19,r18,807690 <__s2b+0xd4>
  807668:	94e5c83a 	sub	r18,r18,r19
  80766c:	84a5883a 	add	r18,r16,r18
  807670:	81c00007 	ldb	r7,0(r16)
  807674:	01800284 	movi	r6,10
  807678:	84000044 	addi	r16,r16,1
  80767c:	100b883a 	mov	r5,r2
  807680:	39fff404 	addi	r7,r7,-48
  807684:	8809883a 	mov	r4,r17
  807688:	080749c0 	call	80749c <__multadd>
  80768c:	84bff81e 	bne	r16,r18,807670 <__alt_mem_onchip_mem+0xff7ff670>
  807690:	dfc00617 	ldw	ra,24(sp)
  807694:	dd400517 	ldw	r21,20(sp)
  807698:	dd000417 	ldw	r20,16(sp)
  80769c:	dcc00317 	ldw	r19,12(sp)
  8076a0:	dc800217 	ldw	r18,8(sp)
  8076a4:	dc400117 	ldw	r17,4(sp)
  8076a8:	dc000017 	ldw	r16,0(sp)
  8076ac:	dec00704 	addi	sp,sp,28
  8076b0:	f800283a 	ret
  8076b4:	84000284 	addi	r16,r16,10
  8076b8:	1827883a 	mov	r19,r3
  8076bc:	003fe906 	br	807664 <__alt_mem_onchip_mem+0xff7ff664>

008076c0 <__hi0bits>:
  8076c0:	20bfffec 	andhi	r2,r4,65535
  8076c4:	1000141e 	bne	r2,zero,807718 <__hi0bits+0x58>
  8076c8:	2008943a 	slli	r4,r4,16
  8076cc:	00800404 	movi	r2,16
  8076d0:	20ffc02c 	andhi	r3,r4,65280
  8076d4:	1800021e 	bne	r3,zero,8076e0 <__hi0bits+0x20>
  8076d8:	2008923a 	slli	r4,r4,8
  8076dc:	10800204 	addi	r2,r2,8
  8076e0:	20fc002c 	andhi	r3,r4,61440
  8076e4:	1800021e 	bne	r3,zero,8076f0 <__hi0bits+0x30>
  8076e8:	2008913a 	slli	r4,r4,4
  8076ec:	10800104 	addi	r2,r2,4
  8076f0:	20f0002c 	andhi	r3,r4,49152
  8076f4:	1800031e 	bne	r3,zero,807704 <__hi0bits+0x44>
  8076f8:	2109883a 	add	r4,r4,r4
  8076fc:	10800084 	addi	r2,r2,2
  807700:	2109883a 	add	r4,r4,r4
  807704:	20000316 	blt	r4,zero,807714 <__hi0bits+0x54>
  807708:	2110002c 	andhi	r4,r4,16384
  80770c:	2000041e 	bne	r4,zero,807720 <__hi0bits+0x60>
  807710:	00800804 	movi	r2,32
  807714:	f800283a 	ret
  807718:	0005883a 	mov	r2,zero
  80771c:	003fec06 	br	8076d0 <__alt_mem_onchip_mem+0xff7ff6d0>
  807720:	10800044 	addi	r2,r2,1
  807724:	f800283a 	ret

00807728 <__lo0bits>:
  807728:	20c00017 	ldw	r3,0(r4)
  80772c:	188001cc 	andi	r2,r3,7
  807730:	10000826 	beq	r2,zero,807754 <__lo0bits+0x2c>
  807734:	1880004c 	andi	r2,r3,1
  807738:	1000211e 	bne	r2,zero,8077c0 <__lo0bits+0x98>
  80773c:	1880008c 	andi	r2,r3,2
  807740:	1000211e 	bne	r2,zero,8077c8 <__lo0bits+0xa0>
  807744:	1806d0ba 	srli	r3,r3,2
  807748:	00800084 	movi	r2,2
  80774c:	20c00015 	stw	r3,0(r4)
  807750:	f800283a 	ret
  807754:	18bfffcc 	andi	r2,r3,65535
  807758:	10001326 	beq	r2,zero,8077a8 <__lo0bits+0x80>
  80775c:	0005883a 	mov	r2,zero
  807760:	19403fcc 	andi	r5,r3,255
  807764:	2800021e 	bne	r5,zero,807770 <__lo0bits+0x48>
  807768:	1806d23a 	srli	r3,r3,8
  80776c:	10800204 	addi	r2,r2,8
  807770:	194003cc 	andi	r5,r3,15
  807774:	2800021e 	bne	r5,zero,807780 <__lo0bits+0x58>
  807778:	1806d13a 	srli	r3,r3,4
  80777c:	10800104 	addi	r2,r2,4
  807780:	194000cc 	andi	r5,r3,3
  807784:	2800021e 	bne	r5,zero,807790 <__lo0bits+0x68>
  807788:	1806d0ba 	srli	r3,r3,2
  80778c:	10800084 	addi	r2,r2,2
  807790:	1940004c 	andi	r5,r3,1
  807794:	2800081e 	bne	r5,zero,8077b8 <__lo0bits+0x90>
  807798:	1806d07a 	srli	r3,r3,1
  80779c:	1800051e 	bne	r3,zero,8077b4 <__lo0bits+0x8c>
  8077a0:	00800804 	movi	r2,32
  8077a4:	f800283a 	ret
  8077a8:	1806d43a 	srli	r3,r3,16
  8077ac:	00800404 	movi	r2,16
  8077b0:	003feb06 	br	807760 <__alt_mem_onchip_mem+0xff7ff760>
  8077b4:	10800044 	addi	r2,r2,1
  8077b8:	20c00015 	stw	r3,0(r4)
  8077bc:	f800283a 	ret
  8077c0:	0005883a 	mov	r2,zero
  8077c4:	f800283a 	ret
  8077c8:	1806d07a 	srli	r3,r3,1
  8077cc:	00800044 	movi	r2,1
  8077d0:	20c00015 	stw	r3,0(r4)
  8077d4:	f800283a 	ret

008077d8 <__i2b>:
  8077d8:	defffd04 	addi	sp,sp,-12
  8077dc:	dc000015 	stw	r16,0(sp)
  8077e0:	04000044 	movi	r16,1
  8077e4:	dc400115 	stw	r17,4(sp)
  8077e8:	2823883a 	mov	r17,r5
  8077ec:	800b883a 	mov	r5,r16
  8077f0:	dfc00215 	stw	ra,8(sp)
  8077f4:	08073cc0 	call	8073cc <_Balloc>
  8077f8:	14400515 	stw	r17,20(r2)
  8077fc:	14000415 	stw	r16,16(r2)
  807800:	dfc00217 	ldw	ra,8(sp)
  807804:	dc400117 	ldw	r17,4(sp)
  807808:	dc000017 	ldw	r16,0(sp)
  80780c:	dec00304 	addi	sp,sp,12
  807810:	f800283a 	ret

00807814 <__multiply>:
  807814:	defffa04 	addi	sp,sp,-24
  807818:	dcc00315 	stw	r19,12(sp)
  80781c:	dc800215 	stw	r18,8(sp)
  807820:	34c00417 	ldw	r19,16(r6)
  807824:	2c800417 	ldw	r18,16(r5)
  807828:	dd000415 	stw	r20,16(sp)
  80782c:	dc400115 	stw	r17,4(sp)
  807830:	dfc00515 	stw	ra,20(sp)
  807834:	dc000015 	stw	r16,0(sp)
  807838:	2829883a 	mov	r20,r5
  80783c:	3023883a 	mov	r17,r6
  807840:	94c0050e 	bge	r18,r19,807858 <__multiply+0x44>
  807844:	9007883a 	mov	r3,r18
  807848:	3029883a 	mov	r20,r6
  80784c:	9825883a 	mov	r18,r19
  807850:	2823883a 	mov	r17,r5
  807854:	1827883a 	mov	r19,r3
  807858:	a0800217 	ldw	r2,8(r20)
  80785c:	94e1883a 	add	r16,r18,r19
  807860:	a1400117 	ldw	r5,4(r20)
  807864:	1400010e 	bge	r2,r16,80786c <__multiply+0x58>
  807868:	29400044 	addi	r5,r5,1
  80786c:	08073cc0 	call	8073cc <_Balloc>
  807870:	8415883a 	add	r10,r16,r16
  807874:	12c00504 	addi	r11,r2,20
  807878:	5295883a 	add	r10,r10,r10
  80787c:	5a95883a 	add	r10,r11,r10
  807880:	5807883a 	mov	r3,r11
  807884:	5a80032e 	bgeu	r11,r10,807894 <__multiply+0x80>
  807888:	18000015 	stw	zero,0(r3)
  80788c:	18c00104 	addi	r3,r3,4
  807890:	1abffd36 	bltu	r3,r10,807888 <__alt_mem_onchip_mem+0xff7ff888>
  807894:	9ce7883a 	add	r19,r19,r19
  807898:	94a5883a 	add	r18,r18,r18
  80789c:	89800504 	addi	r6,r17,20
  8078a0:	9ce7883a 	add	r19,r19,r19
  8078a4:	a3400504 	addi	r13,r20,20
  8078a8:	94a5883a 	add	r18,r18,r18
  8078ac:	34d9883a 	add	r12,r6,r19
  8078b0:	6c93883a 	add	r9,r13,r18
  8078b4:	3300422e 	bgeu	r6,r12,8079c0 <__multiply+0x1ac>
  8078b8:	37c00017 	ldw	ra,0(r6)
  8078bc:	fbffffcc 	andi	r15,ra,65535
  8078c0:	78001b26 	beq	r15,zero,807930 <__multiply+0x11c>
  8078c4:	5811883a 	mov	r8,r11
  8078c8:	681d883a 	mov	r14,r13
  8078cc:	000f883a 	mov	r7,zero
  8078d0:	71000017 	ldw	r4,0(r14)
  8078d4:	40c00017 	ldw	r3,0(r8)
  8078d8:	73800104 	addi	r14,r14,4
  8078dc:	217fffcc 	andi	r5,r4,65535
  8078e0:	2bcb383a 	mul	r5,r5,r15
  8078e4:	2008d43a 	srli	r4,r4,16
  8078e8:	1c7fffcc 	andi	r17,r3,65535
  8078ec:	2c4b883a 	add	r5,r5,r17
  8078f0:	29cb883a 	add	r5,r5,r7
  8078f4:	23c9383a 	mul	r4,r4,r15
  8078f8:	1806d43a 	srli	r3,r3,16
  8078fc:	280ed43a 	srli	r7,r5,16
  807900:	297fffcc 	andi	r5,r5,65535
  807904:	20c7883a 	add	r3,r4,r3
  807908:	19c7883a 	add	r3,r3,r7
  80790c:	1808943a 	slli	r4,r3,16
  807910:	4023883a 	mov	r17,r8
  807914:	180ed43a 	srli	r7,r3,16
  807918:	214ab03a 	or	r5,r4,r5
  80791c:	41400015 	stw	r5,0(r8)
  807920:	42000104 	addi	r8,r8,4
  807924:	727fea36 	bltu	r14,r9,8078d0 <__alt_mem_onchip_mem+0xff7ff8d0>
  807928:	89c00115 	stw	r7,4(r17)
  80792c:	37c00017 	ldw	ra,0(r6)
  807930:	f83ed43a 	srli	ra,ra,16
  807934:	f8001f26 	beq	ra,zero,8079b4 <__multiply+0x1a0>
  807938:	58c00017 	ldw	r3,0(r11)
  80793c:	681d883a 	mov	r14,r13
  807940:	581f883a 	mov	r15,r11
  807944:	1811883a 	mov	r8,r3
  807948:	5825883a 	mov	r18,r11
  80794c:	000f883a 	mov	r7,zero
  807950:	00000106 	br	807958 <__multiply+0x144>
  807954:	8825883a 	mov	r18,r17
  807958:	7140000b 	ldhu	r5,0(r14)
  80795c:	4010d43a 	srli	r8,r8,16
  807960:	193fffcc 	andi	r4,r3,65535
  807964:	2fcb383a 	mul	r5,r5,ra
  807968:	7bc00104 	addi	r15,r15,4
  80796c:	73800104 	addi	r14,r14,4
  807970:	2a0b883a 	add	r5,r5,r8
  807974:	29cb883a 	add	r5,r5,r7
  807978:	2806943a 	slli	r3,r5,16
  80797c:	94400104 	addi	r17,r18,4
  807980:	280ad43a 	srli	r5,r5,16
  807984:	1908b03a 	or	r4,r3,r4
  807988:	793fff15 	stw	r4,-4(r15)
  80798c:	70ffff17 	ldw	r3,-4(r14)
  807990:	8a000017 	ldw	r8,0(r17)
  807994:	1806d43a 	srli	r3,r3,16
  807998:	413fffcc 	andi	r4,r8,65535
  80799c:	1fc7383a 	mul	r3,r3,ra
  8079a0:	1907883a 	add	r3,r3,r4
  8079a4:	1947883a 	add	r3,r3,r5
  8079a8:	180ed43a 	srli	r7,r3,16
  8079ac:	727fe936 	bltu	r14,r9,807954 <__alt_mem_onchip_mem+0xff7ff954>
  8079b0:	90c00115 	stw	r3,4(r18)
  8079b4:	31800104 	addi	r6,r6,4
  8079b8:	5ac00104 	addi	r11,r11,4
  8079bc:	333fbe36 	bltu	r6,r12,8078b8 <__alt_mem_onchip_mem+0xff7ff8b8>
  8079c0:	0400090e 	bge	zero,r16,8079e8 <__multiply+0x1d4>
  8079c4:	50ffff17 	ldw	r3,-4(r10)
  8079c8:	52bfff04 	addi	r10,r10,-4
  8079cc:	18000326 	beq	r3,zero,8079dc <__multiply+0x1c8>
  8079d0:	00000506 	br	8079e8 <__multiply+0x1d4>
  8079d4:	50c00017 	ldw	r3,0(r10)
  8079d8:	1800031e 	bne	r3,zero,8079e8 <__multiply+0x1d4>
  8079dc:	843fffc4 	addi	r16,r16,-1
  8079e0:	52bfff04 	addi	r10,r10,-4
  8079e4:	803ffb1e 	bne	r16,zero,8079d4 <__alt_mem_onchip_mem+0xff7ff9d4>
  8079e8:	14000415 	stw	r16,16(r2)
  8079ec:	dfc00517 	ldw	ra,20(sp)
  8079f0:	dd000417 	ldw	r20,16(sp)
  8079f4:	dcc00317 	ldw	r19,12(sp)
  8079f8:	dc800217 	ldw	r18,8(sp)
  8079fc:	dc400117 	ldw	r17,4(sp)
  807a00:	dc000017 	ldw	r16,0(sp)
  807a04:	dec00604 	addi	sp,sp,24
  807a08:	f800283a 	ret

00807a0c <__pow5mult>:
  807a0c:	defffa04 	addi	sp,sp,-24
  807a10:	dcc00315 	stw	r19,12(sp)
  807a14:	dc000015 	stw	r16,0(sp)
  807a18:	dfc00515 	stw	ra,20(sp)
  807a1c:	dd000415 	stw	r20,16(sp)
  807a20:	dc800215 	stw	r18,8(sp)
  807a24:	dc400115 	stw	r17,4(sp)
  807a28:	308000cc 	andi	r2,r6,3
  807a2c:	3021883a 	mov	r16,r6
  807a30:	2027883a 	mov	r19,r4
  807a34:	10002f1e 	bne	r2,zero,807af4 <__pow5mult+0xe8>
  807a38:	2825883a 	mov	r18,r5
  807a3c:	8021d0ba 	srai	r16,r16,2
  807a40:	80001a26 	beq	r16,zero,807aac <__pow5mult+0xa0>
  807a44:	9c401217 	ldw	r17,72(r19)
  807a48:	8800061e 	bne	r17,zero,807a64 <__pow5mult+0x58>
  807a4c:	00003406 	br	807b20 <__pow5mult+0x114>
  807a50:	8021d07a 	srai	r16,r16,1
  807a54:	80001526 	beq	r16,zero,807aac <__pow5mult+0xa0>
  807a58:	88800017 	ldw	r2,0(r17)
  807a5c:	10001c26 	beq	r2,zero,807ad0 <__pow5mult+0xc4>
  807a60:	1023883a 	mov	r17,r2
  807a64:	8080004c 	andi	r2,r16,1
  807a68:	103ff926 	beq	r2,zero,807a50 <__alt_mem_onchip_mem+0xff7ffa50>
  807a6c:	880d883a 	mov	r6,r17
  807a70:	900b883a 	mov	r5,r18
  807a74:	9809883a 	mov	r4,r19
  807a78:	08078140 	call	807814 <__multiply>
  807a7c:	90001b26 	beq	r18,zero,807aec <__pow5mult+0xe0>
  807a80:	91000117 	ldw	r4,4(r18)
  807a84:	98c01317 	ldw	r3,76(r19)
  807a88:	8021d07a 	srai	r16,r16,1
  807a8c:	2109883a 	add	r4,r4,r4
  807a90:	2109883a 	add	r4,r4,r4
  807a94:	1907883a 	add	r3,r3,r4
  807a98:	19000017 	ldw	r4,0(r3)
  807a9c:	91000015 	stw	r4,0(r18)
  807aa0:	1c800015 	stw	r18,0(r3)
  807aa4:	1025883a 	mov	r18,r2
  807aa8:	803feb1e 	bne	r16,zero,807a58 <__alt_mem_onchip_mem+0xff7ffa58>
  807aac:	9005883a 	mov	r2,r18
  807ab0:	dfc00517 	ldw	ra,20(sp)
  807ab4:	dd000417 	ldw	r20,16(sp)
  807ab8:	dcc00317 	ldw	r19,12(sp)
  807abc:	dc800217 	ldw	r18,8(sp)
  807ac0:	dc400117 	ldw	r17,4(sp)
  807ac4:	dc000017 	ldw	r16,0(sp)
  807ac8:	dec00604 	addi	sp,sp,24
  807acc:	f800283a 	ret
  807ad0:	880d883a 	mov	r6,r17
  807ad4:	880b883a 	mov	r5,r17
  807ad8:	9809883a 	mov	r4,r19
  807adc:	08078140 	call	807814 <__multiply>
  807ae0:	88800015 	stw	r2,0(r17)
  807ae4:	10000015 	stw	zero,0(r2)
  807ae8:	003fdd06 	br	807a60 <__alt_mem_onchip_mem+0xff7ffa60>
  807aec:	1025883a 	mov	r18,r2
  807af0:	003fd706 	br	807a50 <__alt_mem_onchip_mem+0xff7ffa50>
  807af4:	10bfffc4 	addi	r2,r2,-1
  807af8:	1085883a 	add	r2,r2,r2
  807afc:	00c02074 	movhi	r3,129
  807b00:	18c7a204 	addi	r3,r3,7816
  807b04:	1085883a 	add	r2,r2,r2
  807b08:	1885883a 	add	r2,r3,r2
  807b0c:	11800017 	ldw	r6,0(r2)
  807b10:	000f883a 	mov	r7,zero
  807b14:	080749c0 	call	80749c <__multadd>
  807b18:	1025883a 	mov	r18,r2
  807b1c:	003fc706 	br	807a3c <__alt_mem_onchip_mem+0xff7ffa3c>
  807b20:	05000044 	movi	r20,1
  807b24:	a00b883a 	mov	r5,r20
  807b28:	9809883a 	mov	r4,r19
  807b2c:	08073cc0 	call	8073cc <_Balloc>
  807b30:	1023883a 	mov	r17,r2
  807b34:	00809c44 	movi	r2,625
  807b38:	88800515 	stw	r2,20(r17)
  807b3c:	8d000415 	stw	r20,16(r17)
  807b40:	9c401215 	stw	r17,72(r19)
  807b44:	88000015 	stw	zero,0(r17)
  807b48:	003fc606 	br	807a64 <__alt_mem_onchip_mem+0xff7ffa64>

00807b4c <__lshift>:
  807b4c:	defff904 	addi	sp,sp,-28
  807b50:	dd400515 	stw	r21,20(sp)
  807b54:	dcc00315 	stw	r19,12(sp)
  807b58:	302bd17a 	srai	r21,r6,5
  807b5c:	2cc00417 	ldw	r19,16(r5)
  807b60:	28800217 	ldw	r2,8(r5)
  807b64:	dd000415 	stw	r20,16(sp)
  807b68:	ace7883a 	add	r19,r21,r19
  807b6c:	dc800215 	stw	r18,8(sp)
  807b70:	dc400115 	stw	r17,4(sp)
  807b74:	dc000015 	stw	r16,0(sp)
  807b78:	dfc00615 	stw	ra,24(sp)
  807b7c:	9c000044 	addi	r16,r19,1
  807b80:	2823883a 	mov	r17,r5
  807b84:	3029883a 	mov	r20,r6
  807b88:	2025883a 	mov	r18,r4
  807b8c:	29400117 	ldw	r5,4(r5)
  807b90:	1400030e 	bge	r2,r16,807ba0 <__lshift+0x54>
  807b94:	1085883a 	add	r2,r2,r2
  807b98:	29400044 	addi	r5,r5,1
  807b9c:	143ffd16 	blt	r2,r16,807b94 <__alt_mem_onchip_mem+0xff7ffb94>
  807ba0:	9009883a 	mov	r4,r18
  807ba4:	08073cc0 	call	8073cc <_Balloc>
  807ba8:	10c00504 	addi	r3,r2,20
  807bac:	0540070e 	bge	zero,r21,807bcc <__lshift+0x80>
  807bb0:	ad6b883a 	add	r21,r21,r21
  807bb4:	ad6b883a 	add	r21,r21,r21
  807bb8:	1809883a 	mov	r4,r3
  807bbc:	1d47883a 	add	r3,r3,r21
  807bc0:	20000015 	stw	zero,0(r4)
  807bc4:	21000104 	addi	r4,r4,4
  807bc8:	193ffd1e 	bne	r3,r4,807bc0 <__alt_mem_onchip_mem+0xff7ffbc0>
  807bcc:	8a000417 	ldw	r8,16(r17)
  807bd0:	89000504 	addi	r4,r17,20
  807bd4:	a18007cc 	andi	r6,r20,31
  807bd8:	4211883a 	add	r8,r8,r8
  807bdc:	4211883a 	add	r8,r8,r8
  807be0:	2211883a 	add	r8,r4,r8
  807be4:	30002326 	beq	r6,zero,807c74 <__lshift+0x128>
  807be8:	02400804 	movi	r9,32
  807bec:	4993c83a 	sub	r9,r9,r6
  807bf0:	000b883a 	mov	r5,zero
  807bf4:	21c00017 	ldw	r7,0(r4)
  807bf8:	1815883a 	mov	r10,r3
  807bfc:	18c00104 	addi	r3,r3,4
  807c00:	398e983a 	sll	r7,r7,r6
  807c04:	21000104 	addi	r4,r4,4
  807c08:	394ab03a 	or	r5,r7,r5
  807c0c:	197fff15 	stw	r5,-4(r3)
  807c10:	217fff17 	ldw	r5,-4(r4)
  807c14:	2a4ad83a 	srl	r5,r5,r9
  807c18:	223ff636 	bltu	r4,r8,807bf4 <__alt_mem_onchip_mem+0xff7ffbf4>
  807c1c:	51400115 	stw	r5,4(r10)
  807c20:	28001a1e 	bne	r5,zero,807c8c <__lshift+0x140>
  807c24:	843fffc4 	addi	r16,r16,-1
  807c28:	14000415 	stw	r16,16(r2)
  807c2c:	88000826 	beq	r17,zero,807c50 <__lshift+0x104>
  807c30:	89000117 	ldw	r4,4(r17)
  807c34:	90c01317 	ldw	r3,76(r18)
  807c38:	2109883a 	add	r4,r4,r4
  807c3c:	2109883a 	add	r4,r4,r4
  807c40:	1907883a 	add	r3,r3,r4
  807c44:	19000017 	ldw	r4,0(r3)
  807c48:	89000015 	stw	r4,0(r17)
  807c4c:	1c400015 	stw	r17,0(r3)
  807c50:	dfc00617 	ldw	ra,24(sp)
  807c54:	dd400517 	ldw	r21,20(sp)
  807c58:	dd000417 	ldw	r20,16(sp)
  807c5c:	dcc00317 	ldw	r19,12(sp)
  807c60:	dc800217 	ldw	r18,8(sp)
  807c64:	dc400117 	ldw	r17,4(sp)
  807c68:	dc000017 	ldw	r16,0(sp)
  807c6c:	dec00704 	addi	sp,sp,28
  807c70:	f800283a 	ret
  807c74:	21400017 	ldw	r5,0(r4)
  807c78:	18c00104 	addi	r3,r3,4
  807c7c:	21000104 	addi	r4,r4,4
  807c80:	197fff15 	stw	r5,-4(r3)
  807c84:	223ffb36 	bltu	r4,r8,807c74 <__alt_mem_onchip_mem+0xff7ffc74>
  807c88:	003fe606 	br	807c24 <__alt_mem_onchip_mem+0xff7ffc24>
  807c8c:	9c000084 	addi	r16,r19,2
  807c90:	003fe406 	br	807c24 <__alt_mem_onchip_mem+0xff7ffc24>

00807c94 <__mcmp>:
  807c94:	20800417 	ldw	r2,16(r4)
  807c98:	28c00417 	ldw	r3,16(r5)
  807c9c:	10c5c83a 	sub	r2,r2,r3
  807ca0:	1000111e 	bne	r2,zero,807ce8 <__mcmp+0x54>
  807ca4:	18c7883a 	add	r3,r3,r3
  807ca8:	18c7883a 	add	r3,r3,r3
  807cac:	21000504 	addi	r4,r4,20
  807cb0:	29400504 	addi	r5,r5,20
  807cb4:	20c5883a 	add	r2,r4,r3
  807cb8:	28cb883a 	add	r5,r5,r3
  807cbc:	00000106 	br	807cc4 <__mcmp+0x30>
  807cc0:	20800a2e 	bgeu	r4,r2,807cec <__mcmp+0x58>
  807cc4:	10bfff04 	addi	r2,r2,-4
  807cc8:	297fff04 	addi	r5,r5,-4
  807ccc:	11800017 	ldw	r6,0(r2)
  807cd0:	28c00017 	ldw	r3,0(r5)
  807cd4:	30fffa26 	beq	r6,r3,807cc0 <__alt_mem_onchip_mem+0xff7ffcc0>
  807cd8:	30c00236 	bltu	r6,r3,807ce4 <__mcmp+0x50>
  807cdc:	00800044 	movi	r2,1
  807ce0:	f800283a 	ret
  807ce4:	00bfffc4 	movi	r2,-1
  807ce8:	f800283a 	ret
  807cec:	0005883a 	mov	r2,zero
  807cf0:	f800283a 	ret

00807cf4 <__mdiff>:
  807cf4:	28c00417 	ldw	r3,16(r5)
  807cf8:	30800417 	ldw	r2,16(r6)
  807cfc:	defffa04 	addi	sp,sp,-24
  807d00:	dcc00315 	stw	r19,12(sp)
  807d04:	dc800215 	stw	r18,8(sp)
  807d08:	dfc00515 	stw	ra,20(sp)
  807d0c:	dd000415 	stw	r20,16(sp)
  807d10:	dc400115 	stw	r17,4(sp)
  807d14:	dc000015 	stw	r16,0(sp)
  807d18:	1887c83a 	sub	r3,r3,r2
  807d1c:	2825883a 	mov	r18,r5
  807d20:	3027883a 	mov	r19,r6
  807d24:	1800141e 	bne	r3,zero,807d78 <__mdiff+0x84>
  807d28:	1085883a 	add	r2,r2,r2
  807d2c:	1085883a 	add	r2,r2,r2
  807d30:	2a000504 	addi	r8,r5,20
  807d34:	34000504 	addi	r16,r6,20
  807d38:	4087883a 	add	r3,r8,r2
  807d3c:	8085883a 	add	r2,r16,r2
  807d40:	00000106 	br	807d48 <__mdiff+0x54>
  807d44:	40c0592e 	bgeu	r8,r3,807eac <__mdiff+0x1b8>
  807d48:	18ffff04 	addi	r3,r3,-4
  807d4c:	10bfff04 	addi	r2,r2,-4
  807d50:	19c00017 	ldw	r7,0(r3)
  807d54:	11400017 	ldw	r5,0(r2)
  807d58:	397ffa26 	beq	r7,r5,807d44 <__alt_mem_onchip_mem+0xff7ffd44>
  807d5c:	3940592e 	bgeu	r7,r5,807ec4 <__mdiff+0x1d0>
  807d60:	9005883a 	mov	r2,r18
  807d64:	4023883a 	mov	r17,r8
  807d68:	9825883a 	mov	r18,r19
  807d6c:	05000044 	movi	r20,1
  807d70:	1027883a 	mov	r19,r2
  807d74:	00000406 	br	807d88 <__mdiff+0x94>
  807d78:	18005616 	blt	r3,zero,807ed4 <__mdiff+0x1e0>
  807d7c:	34400504 	addi	r17,r6,20
  807d80:	2c000504 	addi	r16,r5,20
  807d84:	0029883a 	mov	r20,zero
  807d88:	91400117 	ldw	r5,4(r18)
  807d8c:	08073cc0 	call	8073cc <_Balloc>
  807d90:	92400417 	ldw	r9,16(r18)
  807d94:	9b000417 	ldw	r12,16(r19)
  807d98:	12c00504 	addi	r11,r2,20
  807d9c:	4a51883a 	add	r8,r9,r9
  807da0:	6319883a 	add	r12,r12,r12
  807da4:	4211883a 	add	r8,r8,r8
  807da8:	6319883a 	add	r12,r12,r12
  807dac:	15000315 	stw	r20,12(r2)
  807db0:	8211883a 	add	r8,r16,r8
  807db4:	8b19883a 	add	r12,r17,r12
  807db8:	0007883a 	mov	r3,zero
  807dbc:	81400017 	ldw	r5,0(r16)
  807dc0:	89c00017 	ldw	r7,0(r17)
  807dc4:	59800104 	addi	r6,r11,4
  807dc8:	293fffcc 	andi	r4,r5,65535
  807dcc:	20c7883a 	add	r3,r4,r3
  807dd0:	393fffcc 	andi	r4,r7,65535
  807dd4:	1909c83a 	sub	r4,r3,r4
  807dd8:	280ad43a 	srli	r5,r5,16
  807ddc:	380ed43a 	srli	r7,r7,16
  807de0:	2007d43a 	srai	r3,r4,16
  807de4:	213fffcc 	andi	r4,r4,65535
  807de8:	29cbc83a 	sub	r5,r5,r7
  807dec:	28c7883a 	add	r3,r5,r3
  807df0:	180a943a 	slli	r5,r3,16
  807df4:	8c400104 	addi	r17,r17,4
  807df8:	84000104 	addi	r16,r16,4
  807dfc:	2908b03a 	or	r4,r5,r4
  807e00:	59000015 	stw	r4,0(r11)
  807e04:	1807d43a 	srai	r3,r3,16
  807e08:	3015883a 	mov	r10,r6
  807e0c:	3017883a 	mov	r11,r6
  807e10:	8b3fea36 	bltu	r17,r12,807dbc <__alt_mem_onchip_mem+0xff7ffdbc>
  807e14:	8200162e 	bgeu	r16,r8,807e70 <__mdiff+0x17c>
  807e18:	8017883a 	mov	r11,r16
  807e1c:	59400017 	ldw	r5,0(r11)
  807e20:	31800104 	addi	r6,r6,4
  807e24:	5ac00104 	addi	r11,r11,4
  807e28:	293fffcc 	andi	r4,r5,65535
  807e2c:	20c7883a 	add	r3,r4,r3
  807e30:	280ed43a 	srli	r7,r5,16
  807e34:	180bd43a 	srai	r5,r3,16
  807e38:	193fffcc 	andi	r4,r3,65535
  807e3c:	3947883a 	add	r3,r7,r5
  807e40:	180a943a 	slli	r5,r3,16
  807e44:	1807d43a 	srai	r3,r3,16
  807e48:	2908b03a 	or	r4,r5,r4
  807e4c:	313fff15 	stw	r4,-4(r6)
  807e50:	5a3ff236 	bltu	r11,r8,807e1c <__alt_mem_onchip_mem+0xff7ffe1c>
  807e54:	0406303a 	nor	r3,zero,r16
  807e58:	1a07883a 	add	r3,r3,r8
  807e5c:	1806d0ba 	srli	r3,r3,2
  807e60:	18c00044 	addi	r3,r3,1
  807e64:	18c7883a 	add	r3,r3,r3
  807e68:	18c7883a 	add	r3,r3,r3
  807e6c:	50d5883a 	add	r10,r10,r3
  807e70:	50ffff04 	addi	r3,r10,-4
  807e74:	2000041e 	bne	r4,zero,807e88 <__mdiff+0x194>
  807e78:	18ffff04 	addi	r3,r3,-4
  807e7c:	19000017 	ldw	r4,0(r3)
  807e80:	4a7fffc4 	addi	r9,r9,-1
  807e84:	203ffc26 	beq	r4,zero,807e78 <__alt_mem_onchip_mem+0xff7ffe78>
  807e88:	12400415 	stw	r9,16(r2)
  807e8c:	dfc00517 	ldw	ra,20(sp)
  807e90:	dd000417 	ldw	r20,16(sp)
  807e94:	dcc00317 	ldw	r19,12(sp)
  807e98:	dc800217 	ldw	r18,8(sp)
  807e9c:	dc400117 	ldw	r17,4(sp)
  807ea0:	dc000017 	ldw	r16,0(sp)
  807ea4:	dec00604 	addi	sp,sp,24
  807ea8:	f800283a 	ret
  807eac:	000b883a 	mov	r5,zero
  807eb0:	08073cc0 	call	8073cc <_Balloc>
  807eb4:	00c00044 	movi	r3,1
  807eb8:	10c00415 	stw	r3,16(r2)
  807ebc:	10000515 	stw	zero,20(r2)
  807ec0:	003ff206 	br	807e8c <__alt_mem_onchip_mem+0xff7ffe8c>
  807ec4:	8023883a 	mov	r17,r16
  807ec8:	0029883a 	mov	r20,zero
  807ecc:	4021883a 	mov	r16,r8
  807ed0:	003fad06 	br	807d88 <__alt_mem_onchip_mem+0xff7ffd88>
  807ed4:	9005883a 	mov	r2,r18
  807ed8:	94400504 	addi	r17,r18,20
  807edc:	9c000504 	addi	r16,r19,20
  807ee0:	9825883a 	mov	r18,r19
  807ee4:	05000044 	movi	r20,1
  807ee8:	1027883a 	mov	r19,r2
  807eec:	003fa606 	br	807d88 <__alt_mem_onchip_mem+0xff7ffd88>

00807ef0 <__ulp>:
  807ef0:	295ffc2c 	andhi	r5,r5,32752
  807ef4:	00bf3034 	movhi	r2,64704
  807ef8:	2887883a 	add	r3,r5,r2
  807efc:	00c0020e 	bge	zero,r3,807f08 <__ulp+0x18>
  807f00:	0005883a 	mov	r2,zero
  807f04:	f800283a 	ret
  807f08:	00c7c83a 	sub	r3,zero,r3
  807f0c:	1807d53a 	srai	r3,r3,20
  807f10:	008004c4 	movi	r2,19
  807f14:	10c00b0e 	bge	r2,r3,807f44 <__ulp+0x54>
  807f18:	18bffb04 	addi	r2,r3,-20
  807f1c:	01000784 	movi	r4,30
  807f20:	0007883a 	mov	r3,zero
  807f24:	20800516 	blt	r4,r2,807f3c <__ulp+0x4c>
  807f28:	010007c4 	movi	r4,31
  807f2c:	2089c83a 	sub	r4,r4,r2
  807f30:	00800044 	movi	r2,1
  807f34:	1104983a 	sll	r2,r2,r4
  807f38:	f800283a 	ret
  807f3c:	00800044 	movi	r2,1
  807f40:	f800283a 	ret
  807f44:	01400234 	movhi	r5,8
  807f48:	28c7d83a 	sra	r3,r5,r3
  807f4c:	0005883a 	mov	r2,zero
  807f50:	f800283a 	ret

00807f54 <__b2d>:
  807f54:	defffa04 	addi	sp,sp,-24
  807f58:	dc000015 	stw	r16,0(sp)
  807f5c:	24000417 	ldw	r16,16(r4)
  807f60:	dc400115 	stw	r17,4(sp)
  807f64:	24400504 	addi	r17,r4,20
  807f68:	8421883a 	add	r16,r16,r16
  807f6c:	8421883a 	add	r16,r16,r16
  807f70:	8c21883a 	add	r16,r17,r16
  807f74:	dc800215 	stw	r18,8(sp)
  807f78:	84bfff17 	ldw	r18,-4(r16)
  807f7c:	dd000415 	stw	r20,16(sp)
  807f80:	dcc00315 	stw	r19,12(sp)
  807f84:	9009883a 	mov	r4,r18
  807f88:	2829883a 	mov	r20,r5
  807f8c:	dfc00515 	stw	ra,20(sp)
  807f90:	08076c00 	call	8076c0 <__hi0bits>
  807f94:	00c00804 	movi	r3,32
  807f98:	1889c83a 	sub	r4,r3,r2
  807f9c:	a1000015 	stw	r4,0(r20)
  807fa0:	01000284 	movi	r4,10
  807fa4:	84ffff04 	addi	r19,r16,-4
  807fa8:	20801216 	blt	r4,r2,807ff4 <__b2d+0xa0>
  807fac:	018002c4 	movi	r6,11
  807fb0:	308dc83a 	sub	r6,r6,r2
  807fb4:	9186d83a 	srl	r3,r18,r6
  807fb8:	18cffc34 	orhi	r3,r3,16368
  807fbc:	8cc0212e 	bgeu	r17,r19,808044 <__b2d+0xf0>
  807fc0:	813ffe17 	ldw	r4,-8(r16)
  807fc4:	218cd83a 	srl	r6,r4,r6
  807fc8:	10800544 	addi	r2,r2,21
  807fcc:	9084983a 	sll	r2,r18,r2
  807fd0:	1184b03a 	or	r2,r2,r6
  807fd4:	dfc00517 	ldw	ra,20(sp)
  807fd8:	dd000417 	ldw	r20,16(sp)
  807fdc:	dcc00317 	ldw	r19,12(sp)
  807fe0:	dc800217 	ldw	r18,8(sp)
  807fe4:	dc400117 	ldw	r17,4(sp)
  807fe8:	dc000017 	ldw	r16,0(sp)
  807fec:	dec00604 	addi	sp,sp,24
  807ff0:	f800283a 	ret
  807ff4:	8cc00f2e 	bgeu	r17,r19,808034 <__b2d+0xe0>
  807ff8:	117ffd44 	addi	r5,r2,-11
  807ffc:	80bffe17 	ldw	r2,-8(r16)
  808000:	28000e26 	beq	r5,zero,80803c <__b2d+0xe8>
  808004:	1949c83a 	sub	r4,r3,r5
  808008:	9164983a 	sll	r18,r18,r5
  80800c:	1106d83a 	srl	r3,r2,r4
  808010:	81bffe04 	addi	r6,r16,-8
  808014:	948ffc34 	orhi	r18,r18,16368
  808018:	90c6b03a 	or	r3,r18,r3
  80801c:	89800e2e 	bgeu	r17,r6,808058 <__b2d+0x104>
  808020:	81bffd17 	ldw	r6,-12(r16)
  808024:	1144983a 	sll	r2,r2,r5
  808028:	310ad83a 	srl	r5,r6,r4
  80802c:	2884b03a 	or	r2,r5,r2
  808030:	003fe806 	br	807fd4 <__alt_mem_onchip_mem+0xff7fffd4>
  808034:	10bffd44 	addi	r2,r2,-11
  808038:	1000041e 	bne	r2,zero,80804c <__b2d+0xf8>
  80803c:	90cffc34 	orhi	r3,r18,16368
  808040:	003fe406 	br	807fd4 <__alt_mem_onchip_mem+0xff7fffd4>
  808044:	000d883a 	mov	r6,zero
  808048:	003fdf06 	br	807fc8 <__alt_mem_onchip_mem+0xff7fffc8>
  80804c:	90a4983a 	sll	r18,r18,r2
  808050:	0005883a 	mov	r2,zero
  808054:	003ff906 	br	80803c <__alt_mem_onchip_mem+0xff80003c>
  808058:	1144983a 	sll	r2,r2,r5
  80805c:	003fdd06 	br	807fd4 <__alt_mem_onchip_mem+0xff7fffd4>

00808060 <__d2b>:
  808060:	defff804 	addi	sp,sp,-32
  808064:	dc000215 	stw	r16,8(sp)
  808068:	3021883a 	mov	r16,r6
  80806c:	dc400315 	stw	r17,12(sp)
  808070:	8022907a 	slli	r17,r16,1
  808074:	dd000615 	stw	r20,24(sp)
  808078:	2829883a 	mov	r20,r5
  80807c:	01400044 	movi	r5,1
  808080:	dcc00515 	stw	r19,20(sp)
  808084:	dc800415 	stw	r18,16(sp)
  808088:	dfc00715 	stw	ra,28(sp)
  80808c:	3825883a 	mov	r18,r7
  808090:	8822d57a 	srli	r17,r17,21
  808094:	08073cc0 	call	8073cc <_Balloc>
  808098:	1027883a 	mov	r19,r2
  80809c:	00800434 	movhi	r2,16
  8080a0:	10bfffc4 	addi	r2,r2,-1
  8080a4:	808c703a 	and	r6,r16,r2
  8080a8:	88000126 	beq	r17,zero,8080b0 <__d2b+0x50>
  8080ac:	31800434 	orhi	r6,r6,16
  8080b0:	d9800015 	stw	r6,0(sp)
  8080b4:	a0002426 	beq	r20,zero,808148 <__d2b+0xe8>
  8080b8:	d9000104 	addi	r4,sp,4
  8080bc:	dd000115 	stw	r20,4(sp)
  8080c0:	08077280 	call	807728 <__lo0bits>
  8080c4:	d8c00017 	ldw	r3,0(sp)
  8080c8:	10002f1e 	bne	r2,zero,808188 <__d2b+0x128>
  8080cc:	d9000117 	ldw	r4,4(sp)
  8080d0:	99000515 	stw	r4,20(r19)
  8080d4:	1821003a 	cmpeq	r16,r3,zero
  8080d8:	01000084 	movi	r4,2
  8080dc:	2421c83a 	sub	r16,r4,r16
  8080e0:	98c00615 	stw	r3,24(r19)
  8080e4:	9c000415 	stw	r16,16(r19)
  8080e8:	88001f1e 	bne	r17,zero,808168 <__d2b+0x108>
  8080ec:	10bef384 	addi	r2,r2,-1074
  8080f0:	90800015 	stw	r2,0(r18)
  8080f4:	00900034 	movhi	r2,16384
  8080f8:	10bfffc4 	addi	r2,r2,-1
  8080fc:	8085883a 	add	r2,r16,r2
  808100:	1085883a 	add	r2,r2,r2
  808104:	1085883a 	add	r2,r2,r2
  808108:	9885883a 	add	r2,r19,r2
  80810c:	11000517 	ldw	r4,20(r2)
  808110:	8020917a 	slli	r16,r16,5
  808114:	08076c00 	call	8076c0 <__hi0bits>
  808118:	d8c00817 	ldw	r3,32(sp)
  80811c:	8085c83a 	sub	r2,r16,r2
  808120:	18800015 	stw	r2,0(r3)
  808124:	9805883a 	mov	r2,r19
  808128:	dfc00717 	ldw	ra,28(sp)
  80812c:	dd000617 	ldw	r20,24(sp)
  808130:	dcc00517 	ldw	r19,20(sp)
  808134:	dc800417 	ldw	r18,16(sp)
  808138:	dc400317 	ldw	r17,12(sp)
  80813c:	dc000217 	ldw	r16,8(sp)
  808140:	dec00804 	addi	sp,sp,32
  808144:	f800283a 	ret
  808148:	d809883a 	mov	r4,sp
  80814c:	08077280 	call	807728 <__lo0bits>
  808150:	d8c00017 	ldw	r3,0(sp)
  808154:	04000044 	movi	r16,1
  808158:	9c000415 	stw	r16,16(r19)
  80815c:	98c00515 	stw	r3,20(r19)
  808160:	10800804 	addi	r2,r2,32
  808164:	883fe126 	beq	r17,zero,8080ec <__alt_mem_onchip_mem+0xff8000ec>
  808168:	00c00d44 	movi	r3,53
  80816c:	8c7ef344 	addi	r17,r17,-1075
  808170:	88a3883a 	add	r17,r17,r2
  808174:	1885c83a 	sub	r2,r3,r2
  808178:	d8c00817 	ldw	r3,32(sp)
  80817c:	94400015 	stw	r17,0(r18)
  808180:	18800015 	stw	r2,0(r3)
  808184:	003fe706 	br	808124 <__alt_mem_onchip_mem+0xff800124>
  808188:	01000804 	movi	r4,32
  80818c:	2089c83a 	sub	r4,r4,r2
  808190:	1908983a 	sll	r4,r3,r4
  808194:	d9400117 	ldw	r5,4(sp)
  808198:	1886d83a 	srl	r3,r3,r2
  80819c:	2148b03a 	or	r4,r4,r5
  8081a0:	99000515 	stw	r4,20(r19)
  8081a4:	d8c00015 	stw	r3,0(sp)
  8081a8:	003fca06 	br	8080d4 <__alt_mem_onchip_mem+0xff8000d4>

008081ac <__ratio>:
  8081ac:	defff904 	addi	sp,sp,-28
  8081b0:	dc400315 	stw	r17,12(sp)
  8081b4:	2823883a 	mov	r17,r5
  8081b8:	d9400104 	addi	r5,sp,4
  8081bc:	dfc00615 	stw	ra,24(sp)
  8081c0:	dcc00515 	stw	r19,20(sp)
  8081c4:	dc800415 	stw	r18,16(sp)
  8081c8:	2027883a 	mov	r19,r4
  8081cc:	dc000215 	stw	r16,8(sp)
  8081d0:	0807f540 	call	807f54 <__b2d>
  8081d4:	d80b883a 	mov	r5,sp
  8081d8:	8809883a 	mov	r4,r17
  8081dc:	1025883a 	mov	r18,r2
  8081e0:	1821883a 	mov	r16,r3
  8081e4:	0807f540 	call	807f54 <__b2d>
  8081e8:	8a000417 	ldw	r8,16(r17)
  8081ec:	99000417 	ldw	r4,16(r19)
  8081f0:	d9400117 	ldw	r5,4(sp)
  8081f4:	2209c83a 	sub	r4,r4,r8
  8081f8:	2010917a 	slli	r8,r4,5
  8081fc:	d9000017 	ldw	r4,0(sp)
  808200:	2909c83a 	sub	r4,r5,r4
  808204:	4109883a 	add	r4,r8,r4
  808208:	01000e0e 	bge	zero,r4,808244 <__ratio+0x98>
  80820c:	2008953a 	slli	r4,r4,20
  808210:	2421883a 	add	r16,r4,r16
  808214:	100d883a 	mov	r6,r2
  808218:	180f883a 	mov	r7,r3
  80821c:	9009883a 	mov	r4,r18
  808220:	800b883a 	mov	r5,r16
  808224:	080bd440 	call	80bd44 <__divdf3>
  808228:	dfc00617 	ldw	ra,24(sp)
  80822c:	dcc00517 	ldw	r19,20(sp)
  808230:	dc800417 	ldw	r18,16(sp)
  808234:	dc400317 	ldw	r17,12(sp)
  808238:	dc000217 	ldw	r16,8(sp)
  80823c:	dec00704 	addi	sp,sp,28
  808240:	f800283a 	ret
  808244:	2008953a 	slli	r4,r4,20
  808248:	1907c83a 	sub	r3,r3,r4
  80824c:	003ff106 	br	808214 <__alt_mem_onchip_mem+0xff800214>

00808250 <_mprec_log10>:
  808250:	defffe04 	addi	sp,sp,-8
  808254:	dc000015 	stw	r16,0(sp)
  808258:	dfc00115 	stw	ra,4(sp)
  80825c:	008005c4 	movi	r2,23
  808260:	2021883a 	mov	r16,r4
  808264:	11000d0e 	bge	r2,r4,80829c <_mprec_log10+0x4c>
  808268:	0005883a 	mov	r2,zero
  80826c:	00cffc34 	movhi	r3,16368
  808270:	843fffc4 	addi	r16,r16,-1
  808274:	000d883a 	mov	r6,zero
  808278:	01d00934 	movhi	r7,16420
  80827c:	1009883a 	mov	r4,r2
  808280:	180b883a 	mov	r5,r3
  808284:	080c8840 	call	80c884 <__muldf3>
  808288:	803ff91e 	bne	r16,zero,808270 <__alt_mem_onchip_mem+0xff800270>
  80828c:	dfc00117 	ldw	ra,4(sp)
  808290:	dc000017 	ldw	r16,0(sp)
  808294:	dec00204 	addi	sp,sp,8
  808298:	f800283a 	ret
  80829c:	202090fa 	slli	r16,r4,3
  8082a0:	00802074 	movhi	r2,129
  8082a4:	1087b904 	addi	r2,r2,7908
  8082a8:	1421883a 	add	r16,r2,r16
  8082ac:	80800017 	ldw	r2,0(r16)
  8082b0:	80c00117 	ldw	r3,4(r16)
  8082b4:	dfc00117 	ldw	ra,4(sp)
  8082b8:	dc000017 	ldw	r16,0(sp)
  8082bc:	dec00204 	addi	sp,sp,8
  8082c0:	f800283a 	ret

008082c4 <__copybits>:
  8082c4:	297fffc4 	addi	r5,r5,-1
  8082c8:	280fd17a 	srai	r7,r5,5
  8082cc:	30c00417 	ldw	r3,16(r6)
  8082d0:	30800504 	addi	r2,r6,20
  8082d4:	39c00044 	addi	r7,r7,1
  8082d8:	18c7883a 	add	r3,r3,r3
  8082dc:	39cf883a 	add	r7,r7,r7
  8082e0:	18c7883a 	add	r3,r3,r3
  8082e4:	39cf883a 	add	r7,r7,r7
  8082e8:	10c7883a 	add	r3,r2,r3
  8082ec:	21cf883a 	add	r7,r4,r7
  8082f0:	10c00d2e 	bgeu	r2,r3,808328 <__copybits+0x64>
  8082f4:	200b883a 	mov	r5,r4
  8082f8:	12000017 	ldw	r8,0(r2)
  8082fc:	29400104 	addi	r5,r5,4
  808300:	10800104 	addi	r2,r2,4
  808304:	2a3fff15 	stw	r8,-4(r5)
  808308:	10fffb36 	bltu	r2,r3,8082f8 <__alt_mem_onchip_mem+0xff8002f8>
  80830c:	1985c83a 	sub	r2,r3,r6
  808310:	10bffac4 	addi	r2,r2,-21
  808314:	1004d0ba 	srli	r2,r2,2
  808318:	10800044 	addi	r2,r2,1
  80831c:	1085883a 	add	r2,r2,r2
  808320:	1085883a 	add	r2,r2,r2
  808324:	2089883a 	add	r4,r4,r2
  808328:	21c0032e 	bgeu	r4,r7,808338 <__copybits+0x74>
  80832c:	20000015 	stw	zero,0(r4)
  808330:	21000104 	addi	r4,r4,4
  808334:	21fffd36 	bltu	r4,r7,80832c <__alt_mem_onchip_mem+0xff80032c>
  808338:	f800283a 	ret

0080833c <__any_on>:
  80833c:	20c00417 	ldw	r3,16(r4)
  808340:	2805d17a 	srai	r2,r5,5
  808344:	21000504 	addi	r4,r4,20
  808348:	18800d0e 	bge	r3,r2,808380 <__any_on+0x44>
  80834c:	18c7883a 	add	r3,r3,r3
  808350:	18c7883a 	add	r3,r3,r3
  808354:	20c7883a 	add	r3,r4,r3
  808358:	20c0192e 	bgeu	r4,r3,8083c0 <__any_on+0x84>
  80835c:	18bfff17 	ldw	r2,-4(r3)
  808360:	18ffff04 	addi	r3,r3,-4
  808364:	1000041e 	bne	r2,zero,808378 <__any_on+0x3c>
  808368:	20c0142e 	bgeu	r4,r3,8083bc <__any_on+0x80>
  80836c:	18ffff04 	addi	r3,r3,-4
  808370:	19400017 	ldw	r5,0(r3)
  808374:	283ffc26 	beq	r5,zero,808368 <__alt_mem_onchip_mem+0xff800368>
  808378:	00800044 	movi	r2,1
  80837c:	f800283a 	ret
  808380:	10c00a0e 	bge	r2,r3,8083ac <__any_on+0x70>
  808384:	1085883a 	add	r2,r2,r2
  808388:	1085883a 	add	r2,r2,r2
  80838c:	294007cc 	andi	r5,r5,31
  808390:	2087883a 	add	r3,r4,r2
  808394:	283ff026 	beq	r5,zero,808358 <__alt_mem_onchip_mem+0xff800358>
  808398:	19800017 	ldw	r6,0(r3)
  80839c:	3144d83a 	srl	r2,r6,r5
  8083a0:	114a983a 	sll	r5,r2,r5
  8083a4:	317ff41e 	bne	r6,r5,808378 <__alt_mem_onchip_mem+0xff800378>
  8083a8:	003feb06 	br	808358 <__alt_mem_onchip_mem+0xff800358>
  8083ac:	1085883a 	add	r2,r2,r2
  8083b0:	1085883a 	add	r2,r2,r2
  8083b4:	2087883a 	add	r3,r4,r2
  8083b8:	003fe706 	br	808358 <__alt_mem_onchip_mem+0xff800358>
  8083bc:	f800283a 	ret
  8083c0:	0005883a 	mov	r2,zero
  8083c4:	f800283a 	ret

008083c8 <_read_r>:
  8083c8:	defffd04 	addi	sp,sp,-12
  8083cc:	2805883a 	mov	r2,r5
  8083d0:	dc000015 	stw	r16,0(sp)
  8083d4:	04002074 	movhi	r16,129
  8083d8:	dc400115 	stw	r17,4(sp)
  8083dc:	300b883a 	mov	r5,r6
  8083e0:	84175c04 	addi	r16,r16,23920
  8083e4:	2023883a 	mov	r17,r4
  8083e8:	380d883a 	mov	r6,r7
  8083ec:	1009883a 	mov	r4,r2
  8083f0:	dfc00215 	stw	ra,8(sp)
  8083f4:	80000015 	stw	zero,0(r16)
  8083f8:	080e6000 	call	80e600 <read>
  8083fc:	00ffffc4 	movi	r3,-1
  808400:	10c00526 	beq	r2,r3,808418 <_read_r+0x50>
  808404:	dfc00217 	ldw	ra,8(sp)
  808408:	dc400117 	ldw	r17,4(sp)
  80840c:	dc000017 	ldw	r16,0(sp)
  808410:	dec00304 	addi	sp,sp,12
  808414:	f800283a 	ret
  808418:	80c00017 	ldw	r3,0(r16)
  80841c:	183ff926 	beq	r3,zero,808404 <__alt_mem_onchip_mem+0xff800404>
  808420:	88c00015 	stw	r3,0(r17)
  808424:	003ff706 	br	808404 <__alt_mem_onchip_mem+0xff800404>

00808428 <_realloc_r>:
  808428:	defff604 	addi	sp,sp,-40
  80842c:	dc800215 	stw	r18,8(sp)
  808430:	dfc00915 	stw	ra,36(sp)
  808434:	df000815 	stw	fp,32(sp)
  808438:	ddc00715 	stw	r23,28(sp)
  80843c:	dd800615 	stw	r22,24(sp)
  808440:	dd400515 	stw	r21,20(sp)
  808444:	dd000415 	stw	r20,16(sp)
  808448:	dcc00315 	stw	r19,12(sp)
  80844c:	dc400115 	stw	r17,4(sp)
  808450:	dc000015 	stw	r16,0(sp)
  808454:	3025883a 	mov	r18,r6
  808458:	2800b726 	beq	r5,zero,808738 <_realloc_r+0x310>
  80845c:	282b883a 	mov	r21,r5
  808460:	2029883a 	mov	r20,r4
  808464:	080e3280 	call	80e328 <__malloc_lock>
  808468:	a8bfff17 	ldw	r2,-4(r21)
  80846c:	043fff04 	movi	r16,-4
  808470:	90c002c4 	addi	r3,r18,11
  808474:	01000584 	movi	r4,22
  808478:	acfffe04 	addi	r19,r21,-8
  80847c:	1420703a 	and	r16,r2,r16
  808480:	20c0332e 	bgeu	r4,r3,808550 <_realloc_r+0x128>
  808484:	047ffe04 	movi	r17,-8
  808488:	1c62703a 	and	r17,r3,r17
  80848c:	8807883a 	mov	r3,r17
  808490:	88005816 	blt	r17,zero,8085f4 <_realloc_r+0x1cc>
  808494:	8c805736 	bltu	r17,r18,8085f4 <_realloc_r+0x1cc>
  808498:	80c0300e 	bge	r16,r3,80855c <_realloc_r+0x134>
  80849c:	07002074 	movhi	fp,129
  8084a0:	e709ed04 	addi	fp,fp,10164
  8084a4:	e1c00217 	ldw	r7,8(fp)
  8084a8:	9c09883a 	add	r4,r19,r16
  8084ac:	22000117 	ldw	r8,4(r4)
  8084b0:	21c06326 	beq	r4,r7,808640 <_realloc_r+0x218>
  8084b4:	017fff84 	movi	r5,-2
  8084b8:	414a703a 	and	r5,r8,r5
  8084bc:	214b883a 	add	r5,r4,r5
  8084c0:	29800117 	ldw	r6,4(r5)
  8084c4:	3180004c 	andi	r6,r6,1
  8084c8:	30003f26 	beq	r6,zero,8085c8 <_realloc_r+0x1a0>
  8084cc:	1080004c 	andi	r2,r2,1
  8084d0:	10008326 	beq	r2,zero,8086e0 <_realloc_r+0x2b8>
  8084d4:	900b883a 	mov	r5,r18
  8084d8:	a009883a 	mov	r4,r20
  8084dc:	08011680 	call	801168 <_malloc_r>
  8084e0:	1025883a 	mov	r18,r2
  8084e4:	10011e26 	beq	r2,zero,808960 <_realloc_r+0x538>
  8084e8:	a93fff17 	ldw	r4,-4(r21)
  8084ec:	10fffe04 	addi	r3,r2,-8
  8084f0:	00bfff84 	movi	r2,-2
  8084f4:	2084703a 	and	r2,r4,r2
  8084f8:	9885883a 	add	r2,r19,r2
  8084fc:	1880ee26 	beq	r3,r2,8088b8 <_realloc_r+0x490>
  808500:	81bfff04 	addi	r6,r16,-4
  808504:	00800904 	movi	r2,36
  808508:	1180b836 	bltu	r2,r6,8087ec <_realloc_r+0x3c4>
  80850c:	00c004c4 	movi	r3,19
  808510:	19809636 	bltu	r3,r6,80876c <_realloc_r+0x344>
  808514:	9005883a 	mov	r2,r18
  808518:	a807883a 	mov	r3,r21
  80851c:	19000017 	ldw	r4,0(r3)
  808520:	11000015 	stw	r4,0(r2)
  808524:	19000117 	ldw	r4,4(r3)
  808528:	11000115 	stw	r4,4(r2)
  80852c:	18c00217 	ldw	r3,8(r3)
  808530:	10c00215 	stw	r3,8(r2)
  808534:	a80b883a 	mov	r5,r21
  808538:	a009883a 	mov	r4,r20
  80853c:	08065600 	call	806560 <_free_r>
  808540:	a009883a 	mov	r4,r20
  808544:	080e34c0 	call	80e34c <__malloc_unlock>
  808548:	9005883a 	mov	r2,r18
  80854c:	00001206 	br	808598 <_realloc_r+0x170>
  808550:	00c00404 	movi	r3,16
  808554:	1823883a 	mov	r17,r3
  808558:	003fce06 	br	808494 <__alt_mem_onchip_mem+0xff800494>
  80855c:	a825883a 	mov	r18,r21
  808560:	8445c83a 	sub	r2,r16,r17
  808564:	00c003c4 	movi	r3,15
  808568:	18802636 	bltu	r3,r2,808604 <_realloc_r+0x1dc>
  80856c:	99800117 	ldw	r6,4(r19)
  808570:	9c07883a 	add	r3,r19,r16
  808574:	3180004c 	andi	r6,r6,1
  808578:	3420b03a 	or	r16,r6,r16
  80857c:	9c000115 	stw	r16,4(r19)
  808580:	18800117 	ldw	r2,4(r3)
  808584:	10800054 	ori	r2,r2,1
  808588:	18800115 	stw	r2,4(r3)
  80858c:	a009883a 	mov	r4,r20
  808590:	080e34c0 	call	80e34c <__malloc_unlock>
  808594:	9005883a 	mov	r2,r18
  808598:	dfc00917 	ldw	ra,36(sp)
  80859c:	df000817 	ldw	fp,32(sp)
  8085a0:	ddc00717 	ldw	r23,28(sp)
  8085a4:	dd800617 	ldw	r22,24(sp)
  8085a8:	dd400517 	ldw	r21,20(sp)
  8085ac:	dd000417 	ldw	r20,16(sp)
  8085b0:	dcc00317 	ldw	r19,12(sp)
  8085b4:	dc800217 	ldw	r18,8(sp)
  8085b8:	dc400117 	ldw	r17,4(sp)
  8085bc:	dc000017 	ldw	r16,0(sp)
  8085c0:	dec00a04 	addi	sp,sp,40
  8085c4:	f800283a 	ret
  8085c8:	017fff04 	movi	r5,-4
  8085cc:	414a703a 	and	r5,r8,r5
  8085d0:	814d883a 	add	r6,r16,r5
  8085d4:	30c01f16 	blt	r6,r3,808654 <_realloc_r+0x22c>
  8085d8:	20800317 	ldw	r2,12(r4)
  8085dc:	20c00217 	ldw	r3,8(r4)
  8085e0:	a825883a 	mov	r18,r21
  8085e4:	3021883a 	mov	r16,r6
  8085e8:	18800315 	stw	r2,12(r3)
  8085ec:	10c00215 	stw	r3,8(r2)
  8085f0:	003fdb06 	br	808560 <__alt_mem_onchip_mem+0xff800560>
  8085f4:	00800304 	movi	r2,12
  8085f8:	a0800015 	stw	r2,0(r20)
  8085fc:	0005883a 	mov	r2,zero
  808600:	003fe506 	br	808598 <__alt_mem_onchip_mem+0xff800598>
  808604:	98c00117 	ldw	r3,4(r19)
  808608:	9c4b883a 	add	r5,r19,r17
  80860c:	11000054 	ori	r4,r2,1
  808610:	18c0004c 	andi	r3,r3,1
  808614:	1c62b03a 	or	r17,r3,r17
  808618:	9c400115 	stw	r17,4(r19)
  80861c:	29000115 	stw	r4,4(r5)
  808620:	2885883a 	add	r2,r5,r2
  808624:	10c00117 	ldw	r3,4(r2)
  808628:	29400204 	addi	r5,r5,8
  80862c:	a009883a 	mov	r4,r20
  808630:	18c00054 	ori	r3,r3,1
  808634:	10c00115 	stw	r3,4(r2)
  808638:	08065600 	call	806560 <_free_r>
  80863c:	003fd306 	br	80858c <__alt_mem_onchip_mem+0xff80058c>
  808640:	017fff04 	movi	r5,-4
  808644:	414a703a 	and	r5,r8,r5
  808648:	89800404 	addi	r6,r17,16
  80864c:	8151883a 	add	r8,r16,r5
  808650:	4180590e 	bge	r8,r6,8087b8 <_realloc_r+0x390>
  808654:	1080004c 	andi	r2,r2,1
  808658:	103f9e1e 	bne	r2,zero,8084d4 <__alt_mem_onchip_mem+0xff8004d4>
  80865c:	adbffe17 	ldw	r22,-8(r21)
  808660:	00bfff04 	movi	r2,-4
  808664:	9dadc83a 	sub	r22,r19,r22
  808668:	b1800117 	ldw	r6,4(r22)
  80866c:	3084703a 	and	r2,r6,r2
  808670:	20002026 	beq	r4,zero,8086f4 <_realloc_r+0x2cc>
  808674:	80af883a 	add	r23,r16,r2
  808678:	b96f883a 	add	r23,r23,r5
  80867c:	21c05f26 	beq	r4,r7,8087fc <_realloc_r+0x3d4>
  808680:	b8c01c16 	blt	r23,r3,8086f4 <_realloc_r+0x2cc>
  808684:	20800317 	ldw	r2,12(r4)
  808688:	20c00217 	ldw	r3,8(r4)
  80868c:	81bfff04 	addi	r6,r16,-4
  808690:	01000904 	movi	r4,36
  808694:	18800315 	stw	r2,12(r3)
  808698:	10c00215 	stw	r3,8(r2)
  80869c:	b0c00217 	ldw	r3,8(r22)
  8086a0:	b0800317 	ldw	r2,12(r22)
  8086a4:	b4800204 	addi	r18,r22,8
  8086a8:	18800315 	stw	r2,12(r3)
  8086ac:	10c00215 	stw	r3,8(r2)
  8086b0:	21801b36 	bltu	r4,r6,808720 <_realloc_r+0x2f8>
  8086b4:	008004c4 	movi	r2,19
  8086b8:	1180352e 	bgeu	r2,r6,808790 <_realloc_r+0x368>
  8086bc:	a8800017 	ldw	r2,0(r21)
  8086c0:	b0800215 	stw	r2,8(r22)
  8086c4:	a8800117 	ldw	r2,4(r21)
  8086c8:	b0800315 	stw	r2,12(r22)
  8086cc:	008006c4 	movi	r2,27
  8086d0:	11807f36 	bltu	r2,r6,8088d0 <_realloc_r+0x4a8>
  8086d4:	b0800404 	addi	r2,r22,16
  8086d8:	ad400204 	addi	r21,r21,8
  8086dc:	00002d06 	br	808794 <_realloc_r+0x36c>
  8086e0:	adbffe17 	ldw	r22,-8(r21)
  8086e4:	00bfff04 	movi	r2,-4
  8086e8:	9dadc83a 	sub	r22,r19,r22
  8086ec:	b1000117 	ldw	r4,4(r22)
  8086f0:	2084703a 	and	r2,r4,r2
  8086f4:	b03f7726 	beq	r22,zero,8084d4 <__alt_mem_onchip_mem+0xff8004d4>
  8086f8:	80af883a 	add	r23,r16,r2
  8086fc:	b8ff7516 	blt	r23,r3,8084d4 <__alt_mem_onchip_mem+0xff8004d4>
  808700:	b0800317 	ldw	r2,12(r22)
  808704:	b0c00217 	ldw	r3,8(r22)
  808708:	81bfff04 	addi	r6,r16,-4
  80870c:	01000904 	movi	r4,36
  808710:	18800315 	stw	r2,12(r3)
  808714:	10c00215 	stw	r3,8(r2)
  808718:	b4800204 	addi	r18,r22,8
  80871c:	21bfe52e 	bgeu	r4,r6,8086b4 <__alt_mem_onchip_mem+0xff8006b4>
  808720:	a80b883a 	mov	r5,r21
  808724:	9009883a 	mov	r4,r18
  808728:	08072700 	call	807270 <memmove>
  80872c:	b821883a 	mov	r16,r23
  808730:	b027883a 	mov	r19,r22
  808734:	003f8a06 	br	808560 <__alt_mem_onchip_mem+0xff800560>
  808738:	300b883a 	mov	r5,r6
  80873c:	dfc00917 	ldw	ra,36(sp)
  808740:	df000817 	ldw	fp,32(sp)
  808744:	ddc00717 	ldw	r23,28(sp)
  808748:	dd800617 	ldw	r22,24(sp)
  80874c:	dd400517 	ldw	r21,20(sp)
  808750:	dd000417 	ldw	r20,16(sp)
  808754:	dcc00317 	ldw	r19,12(sp)
  808758:	dc800217 	ldw	r18,8(sp)
  80875c:	dc400117 	ldw	r17,4(sp)
  808760:	dc000017 	ldw	r16,0(sp)
  808764:	dec00a04 	addi	sp,sp,40
  808768:	08011681 	jmpi	801168 <_malloc_r>
  80876c:	a8c00017 	ldw	r3,0(r21)
  808770:	90c00015 	stw	r3,0(r18)
  808774:	a8c00117 	ldw	r3,4(r21)
  808778:	90c00115 	stw	r3,4(r18)
  80877c:	00c006c4 	movi	r3,27
  808780:	19804536 	bltu	r3,r6,808898 <_realloc_r+0x470>
  808784:	90800204 	addi	r2,r18,8
  808788:	a8c00204 	addi	r3,r21,8
  80878c:	003f6306 	br	80851c <__alt_mem_onchip_mem+0xff80051c>
  808790:	9005883a 	mov	r2,r18
  808794:	a8c00017 	ldw	r3,0(r21)
  808798:	b821883a 	mov	r16,r23
  80879c:	b027883a 	mov	r19,r22
  8087a0:	10c00015 	stw	r3,0(r2)
  8087a4:	a8c00117 	ldw	r3,4(r21)
  8087a8:	10c00115 	stw	r3,4(r2)
  8087ac:	a8c00217 	ldw	r3,8(r21)
  8087b0:	10c00215 	stw	r3,8(r2)
  8087b4:	003f6a06 	br	808560 <__alt_mem_onchip_mem+0xff800560>
  8087b8:	9c67883a 	add	r19,r19,r17
  8087bc:	4445c83a 	sub	r2,r8,r17
  8087c0:	e4c00215 	stw	r19,8(fp)
  8087c4:	10800054 	ori	r2,r2,1
  8087c8:	98800115 	stw	r2,4(r19)
  8087cc:	a8bfff17 	ldw	r2,-4(r21)
  8087d0:	a009883a 	mov	r4,r20
  8087d4:	1080004c 	andi	r2,r2,1
  8087d8:	1462b03a 	or	r17,r2,r17
  8087dc:	ac7fff15 	stw	r17,-4(r21)
  8087e0:	080e34c0 	call	80e34c <__malloc_unlock>
  8087e4:	a805883a 	mov	r2,r21
  8087e8:	003f6b06 	br	808598 <__alt_mem_onchip_mem+0xff800598>
  8087ec:	a80b883a 	mov	r5,r21
  8087f0:	9009883a 	mov	r4,r18
  8087f4:	08072700 	call	807270 <memmove>
  8087f8:	003f4e06 	br	808534 <__alt_mem_onchip_mem+0xff800534>
  8087fc:	89000404 	addi	r4,r17,16
  808800:	b93fbc16 	blt	r23,r4,8086f4 <__alt_mem_onchip_mem+0xff8006f4>
  808804:	b0800317 	ldw	r2,12(r22)
  808808:	b0c00217 	ldw	r3,8(r22)
  80880c:	81bfff04 	addi	r6,r16,-4
  808810:	01000904 	movi	r4,36
  808814:	18800315 	stw	r2,12(r3)
  808818:	10c00215 	stw	r3,8(r2)
  80881c:	b4800204 	addi	r18,r22,8
  808820:	21804336 	bltu	r4,r6,808930 <_realloc_r+0x508>
  808824:	008004c4 	movi	r2,19
  808828:	11803f2e 	bgeu	r2,r6,808928 <_realloc_r+0x500>
  80882c:	a8800017 	ldw	r2,0(r21)
  808830:	b0800215 	stw	r2,8(r22)
  808834:	a8800117 	ldw	r2,4(r21)
  808838:	b0800315 	stw	r2,12(r22)
  80883c:	008006c4 	movi	r2,27
  808840:	11803f36 	bltu	r2,r6,808940 <_realloc_r+0x518>
  808844:	b0800404 	addi	r2,r22,16
  808848:	ad400204 	addi	r21,r21,8
  80884c:	a8c00017 	ldw	r3,0(r21)
  808850:	10c00015 	stw	r3,0(r2)
  808854:	a8c00117 	ldw	r3,4(r21)
  808858:	10c00115 	stw	r3,4(r2)
  80885c:	a8c00217 	ldw	r3,8(r21)
  808860:	10c00215 	stw	r3,8(r2)
  808864:	b447883a 	add	r3,r22,r17
  808868:	bc45c83a 	sub	r2,r23,r17
  80886c:	e0c00215 	stw	r3,8(fp)
  808870:	10800054 	ori	r2,r2,1
  808874:	18800115 	stw	r2,4(r3)
  808878:	b0800117 	ldw	r2,4(r22)
  80887c:	a009883a 	mov	r4,r20
  808880:	1080004c 	andi	r2,r2,1
  808884:	1462b03a 	or	r17,r2,r17
  808888:	b4400115 	stw	r17,4(r22)
  80888c:	080e34c0 	call	80e34c <__malloc_unlock>
  808890:	9005883a 	mov	r2,r18
  808894:	003f4006 	br	808598 <__alt_mem_onchip_mem+0xff800598>
  808898:	a8c00217 	ldw	r3,8(r21)
  80889c:	90c00215 	stw	r3,8(r18)
  8088a0:	a8c00317 	ldw	r3,12(r21)
  8088a4:	90c00315 	stw	r3,12(r18)
  8088a8:	30801126 	beq	r6,r2,8088f0 <_realloc_r+0x4c8>
  8088ac:	90800404 	addi	r2,r18,16
  8088b0:	a8c00404 	addi	r3,r21,16
  8088b4:	003f1906 	br	80851c <__alt_mem_onchip_mem+0xff80051c>
  8088b8:	90ffff17 	ldw	r3,-4(r18)
  8088bc:	00bfff04 	movi	r2,-4
  8088c0:	a825883a 	mov	r18,r21
  8088c4:	1884703a 	and	r2,r3,r2
  8088c8:	80a1883a 	add	r16,r16,r2
  8088cc:	003f2406 	br	808560 <__alt_mem_onchip_mem+0xff800560>
  8088d0:	a8800217 	ldw	r2,8(r21)
  8088d4:	b0800415 	stw	r2,16(r22)
  8088d8:	a8800317 	ldw	r2,12(r21)
  8088dc:	b0800515 	stw	r2,20(r22)
  8088e0:	31000a26 	beq	r6,r4,80890c <_realloc_r+0x4e4>
  8088e4:	b0800604 	addi	r2,r22,24
  8088e8:	ad400404 	addi	r21,r21,16
  8088ec:	003fa906 	br	808794 <__alt_mem_onchip_mem+0xff800794>
  8088f0:	a9000417 	ldw	r4,16(r21)
  8088f4:	90800604 	addi	r2,r18,24
  8088f8:	a8c00604 	addi	r3,r21,24
  8088fc:	91000415 	stw	r4,16(r18)
  808900:	a9000517 	ldw	r4,20(r21)
  808904:	91000515 	stw	r4,20(r18)
  808908:	003f0406 	br	80851c <__alt_mem_onchip_mem+0xff80051c>
  80890c:	a8c00417 	ldw	r3,16(r21)
  808910:	ad400604 	addi	r21,r21,24
  808914:	b0800804 	addi	r2,r22,32
  808918:	b0c00615 	stw	r3,24(r22)
  80891c:	a8ffff17 	ldw	r3,-4(r21)
  808920:	b0c00715 	stw	r3,28(r22)
  808924:	003f9b06 	br	808794 <__alt_mem_onchip_mem+0xff800794>
  808928:	9005883a 	mov	r2,r18
  80892c:	003fc706 	br	80884c <__alt_mem_onchip_mem+0xff80084c>
  808930:	a80b883a 	mov	r5,r21
  808934:	9009883a 	mov	r4,r18
  808938:	08072700 	call	807270 <memmove>
  80893c:	003fc906 	br	808864 <__alt_mem_onchip_mem+0xff800864>
  808940:	a8800217 	ldw	r2,8(r21)
  808944:	b0800415 	stw	r2,16(r22)
  808948:	a8800317 	ldw	r2,12(r21)
  80894c:	b0800515 	stw	r2,20(r22)
  808950:	31000726 	beq	r6,r4,808970 <_realloc_r+0x548>
  808954:	b0800604 	addi	r2,r22,24
  808958:	ad400404 	addi	r21,r21,16
  80895c:	003fbb06 	br	80884c <__alt_mem_onchip_mem+0xff80084c>
  808960:	a009883a 	mov	r4,r20
  808964:	080e34c0 	call	80e34c <__malloc_unlock>
  808968:	0005883a 	mov	r2,zero
  80896c:	003f0a06 	br	808598 <__alt_mem_onchip_mem+0xff800598>
  808970:	a8c00417 	ldw	r3,16(r21)
  808974:	ad400604 	addi	r21,r21,24
  808978:	b0800804 	addi	r2,r22,32
  80897c:	b0c00615 	stw	r3,24(r22)
  808980:	a8ffff17 	ldw	r3,-4(r21)
  808984:	b0c00715 	stw	r3,28(r22)
  808988:	003fb006 	br	80884c <__alt_mem_onchip_mem+0xff80084c>

0080898c <__fpclassifyd>:
  80898c:	00a00034 	movhi	r2,32768
  808990:	10bfffc4 	addi	r2,r2,-1
  808994:	2884703a 	and	r2,r5,r2
  808998:	10000726 	beq	r2,zero,8089b8 <__fpclassifyd+0x2c>
  80899c:	00fffc34 	movhi	r3,65520
  8089a0:	019ff834 	movhi	r6,32736
  8089a4:	28c7883a 	add	r3,r5,r3
  8089a8:	31bfffc4 	addi	r6,r6,-1
  8089ac:	30c00536 	bltu	r6,r3,8089c4 <__fpclassifyd+0x38>
  8089b0:	00800104 	movi	r2,4
  8089b4:	f800283a 	ret
  8089b8:	2000021e 	bne	r4,zero,8089c4 <__fpclassifyd+0x38>
  8089bc:	00800084 	movi	r2,2
  8089c0:	f800283a 	ret
  8089c4:	00dffc34 	movhi	r3,32752
  8089c8:	019ff834 	movhi	r6,32736
  8089cc:	28cb883a 	add	r5,r5,r3
  8089d0:	31bfffc4 	addi	r6,r6,-1
  8089d4:	317ff62e 	bgeu	r6,r5,8089b0 <__alt_mem_onchip_mem+0xff8009b0>
  8089d8:	01400434 	movhi	r5,16
  8089dc:	297fffc4 	addi	r5,r5,-1
  8089e0:	28800236 	bltu	r5,r2,8089ec <__fpclassifyd+0x60>
  8089e4:	008000c4 	movi	r2,3
  8089e8:	f800283a 	ret
  8089ec:	10c00226 	beq	r2,r3,8089f8 <__fpclassifyd+0x6c>
  8089f0:	0005883a 	mov	r2,zero
  8089f4:	f800283a 	ret
  8089f8:	2005003a 	cmpeq	r2,r4,zero
  8089fc:	f800283a 	ret

00808a00 <strcmp>:
  808a00:	2144b03a 	or	r2,r4,r5
  808a04:	108000cc 	andi	r2,r2,3
  808a08:	1000171e 	bne	r2,zero,808a68 <strcmp+0x68>
  808a0c:	20800017 	ldw	r2,0(r4)
  808a10:	28c00017 	ldw	r3,0(r5)
  808a14:	10c0141e 	bne	r2,r3,808a68 <strcmp+0x68>
  808a18:	027fbff4 	movhi	r9,65279
  808a1c:	4a7fbfc4 	addi	r9,r9,-257
  808a20:	0086303a 	nor	r3,zero,r2
  808a24:	02202074 	movhi	r8,32897
  808a28:	1245883a 	add	r2,r2,r9
  808a2c:	42202004 	addi	r8,r8,-32640
  808a30:	10c4703a 	and	r2,r2,r3
  808a34:	1204703a 	and	r2,r2,r8
  808a38:	10000226 	beq	r2,zero,808a44 <strcmp+0x44>
  808a3c:	00002306 	br	808acc <strcmp+0xcc>
  808a40:	1000221e 	bne	r2,zero,808acc <strcmp+0xcc>
  808a44:	21000104 	addi	r4,r4,4
  808a48:	20c00017 	ldw	r3,0(r4)
  808a4c:	29400104 	addi	r5,r5,4
  808a50:	29800017 	ldw	r6,0(r5)
  808a54:	1a4f883a 	add	r7,r3,r9
  808a58:	00c4303a 	nor	r2,zero,r3
  808a5c:	3884703a 	and	r2,r7,r2
  808a60:	1204703a 	and	r2,r2,r8
  808a64:	19bff626 	beq	r3,r6,808a40 <__alt_mem_onchip_mem+0xff800a40>
  808a68:	20800003 	ldbu	r2,0(r4)
  808a6c:	10c03fcc 	andi	r3,r2,255
  808a70:	18c0201c 	xori	r3,r3,128
  808a74:	18ffe004 	addi	r3,r3,-128
  808a78:	18000c26 	beq	r3,zero,808aac <strcmp+0xac>
  808a7c:	29800007 	ldb	r6,0(r5)
  808a80:	19800326 	beq	r3,r6,808a90 <strcmp+0x90>
  808a84:	00001306 	br	808ad4 <strcmp+0xd4>
  808a88:	29800007 	ldb	r6,0(r5)
  808a8c:	11800b1e 	bne	r2,r6,808abc <strcmp+0xbc>
  808a90:	21000044 	addi	r4,r4,1
  808a94:	20c00003 	ldbu	r3,0(r4)
  808a98:	29400044 	addi	r5,r5,1
  808a9c:	18803fcc 	andi	r2,r3,255
  808aa0:	1080201c 	xori	r2,r2,128
  808aa4:	10bfe004 	addi	r2,r2,-128
  808aa8:	103ff71e 	bne	r2,zero,808a88 <__alt_mem_onchip_mem+0xff800a88>
  808aac:	0007883a 	mov	r3,zero
  808ab0:	28800003 	ldbu	r2,0(r5)
  808ab4:	1885c83a 	sub	r2,r3,r2
  808ab8:	f800283a 	ret
  808abc:	28800003 	ldbu	r2,0(r5)
  808ac0:	18c03fcc 	andi	r3,r3,255
  808ac4:	1885c83a 	sub	r2,r3,r2
  808ac8:	f800283a 	ret
  808acc:	0005883a 	mov	r2,zero
  808ad0:	f800283a 	ret
  808ad4:	10c03fcc 	andi	r3,r2,255
  808ad8:	003ff506 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>

00808adc <__sprint_r.part.0>:
  808adc:	28801917 	ldw	r2,100(r5)
  808ae0:	defff604 	addi	sp,sp,-40
  808ae4:	dd400515 	stw	r21,20(sp)
  808ae8:	dfc00915 	stw	ra,36(sp)
  808aec:	df000815 	stw	fp,32(sp)
  808af0:	ddc00715 	stw	r23,28(sp)
  808af4:	dd800615 	stw	r22,24(sp)
  808af8:	dd000415 	stw	r20,16(sp)
  808afc:	dcc00315 	stw	r19,12(sp)
  808b00:	dc800215 	stw	r18,8(sp)
  808b04:	dc400115 	stw	r17,4(sp)
  808b08:	dc000015 	stw	r16,0(sp)
  808b0c:	1088000c 	andi	r2,r2,8192
  808b10:	302b883a 	mov	r21,r6
  808b14:	10002e26 	beq	r2,zero,808bd0 <__sprint_r.part.0+0xf4>
  808b18:	30800217 	ldw	r2,8(r6)
  808b1c:	35800017 	ldw	r22,0(r6)
  808b20:	10002926 	beq	r2,zero,808bc8 <__sprint_r.part.0+0xec>
  808b24:	2827883a 	mov	r19,r5
  808b28:	2029883a 	mov	r20,r4
  808b2c:	b5c00104 	addi	r23,r22,4
  808b30:	04bfffc4 	movi	r18,-1
  808b34:	bc400017 	ldw	r17,0(r23)
  808b38:	b4000017 	ldw	r16,0(r22)
  808b3c:	0039883a 	mov	fp,zero
  808b40:	8822d0ba 	srli	r17,r17,2
  808b44:	8800031e 	bne	r17,zero,808b54 <__sprint_r.part.0+0x78>
  808b48:	00001806 	br	808bac <__sprint_r.part.0+0xd0>
  808b4c:	84000104 	addi	r16,r16,4
  808b50:	8f001526 	beq	r17,fp,808ba8 <__sprint_r.part.0+0xcc>
  808b54:	81400017 	ldw	r5,0(r16)
  808b58:	980d883a 	mov	r6,r19
  808b5c:	a009883a 	mov	r4,r20
  808b60:	080a4500 	call	80a450 <_fputwc_r>
  808b64:	e7000044 	addi	fp,fp,1
  808b68:	14bff81e 	bne	r2,r18,808b4c <__alt_mem_onchip_mem+0xff800b4c>
  808b6c:	9005883a 	mov	r2,r18
  808b70:	a8000215 	stw	zero,8(r21)
  808b74:	a8000115 	stw	zero,4(r21)
  808b78:	dfc00917 	ldw	ra,36(sp)
  808b7c:	df000817 	ldw	fp,32(sp)
  808b80:	ddc00717 	ldw	r23,28(sp)
  808b84:	dd800617 	ldw	r22,24(sp)
  808b88:	dd400517 	ldw	r21,20(sp)
  808b8c:	dd000417 	ldw	r20,16(sp)
  808b90:	dcc00317 	ldw	r19,12(sp)
  808b94:	dc800217 	ldw	r18,8(sp)
  808b98:	dc400117 	ldw	r17,4(sp)
  808b9c:	dc000017 	ldw	r16,0(sp)
  808ba0:	dec00a04 	addi	sp,sp,40
  808ba4:	f800283a 	ret
  808ba8:	a8800217 	ldw	r2,8(r21)
  808bac:	8c63883a 	add	r17,r17,r17
  808bb0:	8c63883a 	add	r17,r17,r17
  808bb4:	1445c83a 	sub	r2,r2,r17
  808bb8:	a8800215 	stw	r2,8(r21)
  808bbc:	b5800204 	addi	r22,r22,8
  808bc0:	bdc00204 	addi	r23,r23,8
  808bc4:	103fdb1e 	bne	r2,zero,808b34 <__alt_mem_onchip_mem+0xff800b34>
  808bc8:	0005883a 	mov	r2,zero
  808bcc:	003fe806 	br	808b70 <__alt_mem_onchip_mem+0xff800b70>
  808bd0:	08068700 	call	806870 <__sfvwrite_r>
  808bd4:	003fe606 	br	808b70 <__alt_mem_onchip_mem+0xff800b70>

00808bd8 <__sprint_r>:
  808bd8:	30c00217 	ldw	r3,8(r6)
  808bdc:	18000126 	beq	r3,zero,808be4 <__sprint_r+0xc>
  808be0:	0808adc1 	jmpi	808adc <__sprint_r.part.0>
  808be4:	30000115 	stw	zero,4(r6)
  808be8:	0005883a 	mov	r2,zero
  808bec:	f800283a 	ret

00808bf0 <___vfiprintf_internal_r>:
  808bf0:	deffc904 	addi	sp,sp,-220
  808bf4:	df003515 	stw	fp,212(sp)
  808bf8:	dd003115 	stw	r20,196(sp)
  808bfc:	dfc03615 	stw	ra,216(sp)
  808c00:	ddc03415 	stw	r23,208(sp)
  808c04:	dd803315 	stw	r22,204(sp)
  808c08:	dd403215 	stw	r21,200(sp)
  808c0c:	dcc03015 	stw	r19,192(sp)
  808c10:	dc802f15 	stw	r18,188(sp)
  808c14:	dc402e15 	stw	r17,184(sp)
  808c18:	dc002d15 	stw	r16,180(sp)
  808c1c:	d9002015 	stw	r4,128(sp)
  808c20:	d9c02215 	stw	r7,136(sp)
  808c24:	2829883a 	mov	r20,r5
  808c28:	3039883a 	mov	fp,r6
  808c2c:	20000226 	beq	r4,zero,808c38 <___vfiprintf_internal_r+0x48>
  808c30:	20800e17 	ldw	r2,56(r4)
  808c34:	1000cf26 	beq	r2,zero,808f74 <___vfiprintf_internal_r+0x384>
  808c38:	a080030b 	ldhu	r2,12(r20)
  808c3c:	10c8000c 	andi	r3,r2,8192
  808c40:	1800061e 	bne	r3,zero,808c5c <___vfiprintf_internal_r+0x6c>
  808c44:	a1001917 	ldw	r4,100(r20)
  808c48:	00f7ffc4 	movi	r3,-8193
  808c4c:	10880014 	ori	r2,r2,8192
  808c50:	20c6703a 	and	r3,r4,r3
  808c54:	a080030d 	sth	r2,12(r20)
  808c58:	a0c01915 	stw	r3,100(r20)
  808c5c:	10c0020c 	andi	r3,r2,8
  808c60:	1800a926 	beq	r3,zero,808f08 <___vfiprintf_internal_r+0x318>
  808c64:	a0c00417 	ldw	r3,16(r20)
  808c68:	1800a726 	beq	r3,zero,808f08 <___vfiprintf_internal_r+0x318>
  808c6c:	1080068c 	andi	r2,r2,26
  808c70:	00c00284 	movi	r3,10
  808c74:	10c0ac26 	beq	r2,r3,808f28 <___vfiprintf_internal_r+0x338>
  808c78:	da801a04 	addi	r10,sp,104
  808c7c:	da801e15 	stw	r10,120(sp)
  808c80:	d8801e17 	ldw	r2,120(sp)
  808c84:	da8019c4 	addi	r10,sp,103
  808c88:	05802074 	movhi	r22,129
  808c8c:	05c02074 	movhi	r23,129
  808c90:	da801f15 	stw	r10,124(sp)
  808c94:	1295c83a 	sub	r10,r2,r10
  808c98:	b587ef04 	addi	r22,r22,8124
  808c9c:	bdc7eb04 	addi	r23,r23,8108
  808ca0:	dec01a15 	stw	sp,104(sp)
  808ca4:	d8001c15 	stw	zero,112(sp)
  808ca8:	d8001b15 	stw	zero,108(sp)
  808cac:	d8002615 	stw	zero,152(sp)
  808cb0:	d8002315 	stw	zero,140(sp)
  808cb4:	da802715 	stw	r10,156(sp)
  808cb8:	d811883a 	mov	r8,sp
  808cbc:	dd002115 	stw	r20,132(sp)
  808cc0:	e021883a 	mov	r16,fp
  808cc4:	80800007 	ldb	r2,0(r16)
  808cc8:	1003ea26 	beq	r2,zero,809c74 <___vfiprintf_internal_r+0x1084>
  808ccc:	00c00944 	movi	r3,37
  808cd0:	8025883a 	mov	r18,r16
  808cd4:	10c0021e 	bne	r2,r3,808ce0 <___vfiprintf_internal_r+0xf0>
  808cd8:	00001606 	br	808d34 <___vfiprintf_internal_r+0x144>
  808cdc:	10c00326 	beq	r2,r3,808cec <___vfiprintf_internal_r+0xfc>
  808ce0:	94800044 	addi	r18,r18,1
  808ce4:	90800007 	ldb	r2,0(r18)
  808ce8:	103ffc1e 	bne	r2,zero,808cdc <__alt_mem_onchip_mem+0xff800cdc>
  808cec:	9423c83a 	sub	r17,r18,r16
  808cf0:	88001026 	beq	r17,zero,808d34 <___vfiprintf_internal_r+0x144>
  808cf4:	d8c01c17 	ldw	r3,112(sp)
  808cf8:	d8801b17 	ldw	r2,108(sp)
  808cfc:	44000015 	stw	r16,0(r8)
  808d00:	88c7883a 	add	r3,r17,r3
  808d04:	10800044 	addi	r2,r2,1
  808d08:	44400115 	stw	r17,4(r8)
  808d0c:	d8c01c15 	stw	r3,112(sp)
  808d10:	d8801b15 	stw	r2,108(sp)
  808d14:	010001c4 	movi	r4,7
  808d18:	2080760e 	bge	r4,r2,808ef4 <___vfiprintf_internal_r+0x304>
  808d1c:	1803821e 	bne	r3,zero,809b28 <___vfiprintf_internal_r+0xf38>
  808d20:	da802317 	ldw	r10,140(sp)
  808d24:	d8001b15 	stw	zero,108(sp)
  808d28:	d811883a 	mov	r8,sp
  808d2c:	5455883a 	add	r10,r10,r17
  808d30:	da802315 	stw	r10,140(sp)
  808d34:	90800007 	ldb	r2,0(r18)
  808d38:	10044626 	beq	r2,zero,809e54 <___vfiprintf_internal_r+0x1264>
  808d3c:	90c00047 	ldb	r3,1(r18)
  808d40:	94000044 	addi	r16,r18,1
  808d44:	d8001d85 	stb	zero,118(sp)
  808d48:	0009883a 	mov	r4,zero
  808d4c:	000f883a 	mov	r7,zero
  808d50:	027fffc4 	movi	r9,-1
  808d54:	0023883a 	mov	r17,zero
  808d58:	0029883a 	mov	r20,zero
  808d5c:	01401604 	movi	r5,88
  808d60:	01800244 	movi	r6,9
  808d64:	03400a84 	movi	r13,42
  808d68:	03001b04 	movi	r12,108
  808d6c:	84000044 	addi	r16,r16,1
  808d70:	18bff804 	addi	r2,r3,-32
  808d74:	28827336 	bltu	r5,r2,809744 <___vfiprintf_internal_r+0xb54>
  808d78:	100490ba 	slli	r2,r2,2
  808d7c:	02802074 	movhi	r10,129
  808d80:	52a36404 	addi	r10,r10,-29296
  808d84:	1285883a 	add	r2,r2,r10
  808d88:	10800017 	ldw	r2,0(r2)
  808d8c:	1000683a 	jmp	r2
  808d90:	00809478 	rdprs	r2,zero,593
  808d94:	00809744 	movi	r2,605
  808d98:	00809744 	movi	r2,605
  808d9c:	00809498 	cmpnei	r2,zero,594
  808da0:	00809744 	movi	r2,605
  808da4:	00809744 	movi	r2,605
  808da8:	00809744 	movi	r2,605
  808dac:	00809744 	movi	r2,605
  808db0:	00809744 	movi	r2,605
  808db4:	00809744 	movi	r2,605
  808db8:	00809680 	call	80968 <__reset-0x77f698>
  808dbc:	0080969c 	xori	r2,zero,602
  808dc0:	00809744 	movi	r2,605
  808dc4:	00808f84 	movi	r2,574
  808dc8:	008096ac 	andhi	r2,zero,602
  808dcc:	00809744 	movi	r2,605
  808dd0:	008094a4 	muli	r2,zero,594
  808dd4:	008094b0 	cmpltui	r2,zero,594
  808dd8:	008094b0 	cmpltui	r2,zero,594
  808ddc:	008094b0 	cmpltui	r2,zero,594
  808de0:	008094b0 	cmpltui	r2,zero,594
  808de4:	008094b0 	cmpltui	r2,zero,594
  808de8:	008094b0 	cmpltui	r2,zero,594
  808dec:	008094b0 	cmpltui	r2,zero,594
  808df0:	008094b0 	cmpltui	r2,zero,594
  808df4:	008094b0 	cmpltui	r2,zero,594
  808df8:	00809744 	movi	r2,605
  808dfc:	00809744 	movi	r2,605
  808e00:	00809744 	movi	r2,605
  808e04:	00809744 	movi	r2,605
  808e08:	00809744 	movi	r2,605
  808e0c:	00809744 	movi	r2,605
  808e10:	00809744 	movi	r2,605
  808e14:	00809744 	movi	r2,605
  808e18:	00809744 	movi	r2,605
  808e1c:	00809744 	movi	r2,605
  808e20:	008094dc 	xori	r2,zero,595
  808e24:	00809744 	movi	r2,605
  808e28:	00809744 	movi	r2,605
  808e2c:	00809744 	movi	r2,605
  808e30:	00809744 	movi	r2,605
  808e34:	00809744 	movi	r2,605
  808e38:	00809744 	movi	r2,605
  808e3c:	00809744 	movi	r2,605
  808e40:	00809744 	movi	r2,605
  808e44:	00809744 	movi	r2,605
  808e48:	00809744 	movi	r2,605
  808e4c:	00809514 	movui	r2,596
  808e50:	00809744 	movi	r2,605
  808e54:	00809744 	movi	r2,605
  808e58:	00809744 	movi	r2,605
  808e5c:	00809744 	movi	r2,605
  808e60:	00809744 	movi	r2,605
  808e64:	0080956c 	andhi	r2,zero,597
  808e68:	00809744 	movi	r2,605
  808e6c:	00809744 	movi	r2,605
  808e70:	008095dc 	xori	r2,zero,599
  808e74:	00809744 	movi	r2,605
  808e78:	00809744 	movi	r2,605
  808e7c:	00809744 	movi	r2,605
  808e80:	00809744 	movi	r2,605
  808e84:	00809744 	movi	r2,605
  808e88:	00809744 	movi	r2,605
  808e8c:	00809744 	movi	r2,605
  808e90:	00809744 	movi	r2,605
  808e94:	00809744 	movi	r2,605
  808e98:	00809744 	movi	r2,605
  808e9c:	00809388 	cmpgei	r2,zero,590
  808ea0:	008093b4 	movhi	r2,590
  808ea4:	00809744 	movi	r2,605
  808ea8:	00809744 	movi	r2,605
  808eac:	00809744 	movi	r2,605
  808eb0:	008096ec 	andhi	r2,zero,603
  808eb4:	008093b4 	movhi	r2,590
  808eb8:	00809744 	movi	r2,605
  808ebc:	00809744 	movi	r2,605
  808ec0:	00809248 	cmpgei	r2,zero,585
  808ec4:	00809744 	movi	r2,605
  808ec8:	00809258 	cmpnei	r2,zero,585
  808ecc:	00809294 	movui	r2,586
  808ed0:	00808f90 	cmplti	r2,zero,574
  808ed4:	0080923c 	xorhi	r2,zero,584
  808ed8:	00809744 	movi	r2,605
  808edc:	00809618 	cmpnei	r2,zero,600
  808ee0:	00809744 	movi	r2,605
  808ee4:	00809670 	cmpltui	r2,zero,601
  808ee8:	00809744 	movi	r2,605
  808eec:	00809744 	movi	r2,605
  808ef0:	00809334 	movhi	r2,588
  808ef4:	42000204 	addi	r8,r8,8
  808ef8:	da802317 	ldw	r10,140(sp)
  808efc:	5455883a 	add	r10,r10,r17
  808f00:	da802315 	stw	r10,140(sp)
  808f04:	003f8b06 	br	808d34 <__alt_mem_onchip_mem+0xff800d34>
  808f08:	d9002017 	ldw	r4,128(sp)
  808f0c:	a00b883a 	mov	r5,r20
  808f10:	08043180 	call	804318 <__swsetup_r>
  808f14:	1003b11e 	bne	r2,zero,809ddc <___vfiprintf_internal_r+0x11ec>
  808f18:	a080030b 	ldhu	r2,12(r20)
  808f1c:	00c00284 	movi	r3,10
  808f20:	1080068c 	andi	r2,r2,26
  808f24:	10ff541e 	bne	r2,r3,808c78 <__alt_mem_onchip_mem+0xff800c78>
  808f28:	a080038f 	ldh	r2,14(r20)
  808f2c:	103f5216 	blt	r2,zero,808c78 <__alt_mem_onchip_mem+0xff800c78>
  808f30:	d9c02217 	ldw	r7,136(sp)
  808f34:	d9002017 	ldw	r4,128(sp)
  808f38:	e00d883a 	mov	r6,fp
  808f3c:	a00b883a 	mov	r5,r20
  808f40:	080a0680 	call	80a068 <__sbprintf>
  808f44:	dfc03617 	ldw	ra,216(sp)
  808f48:	df003517 	ldw	fp,212(sp)
  808f4c:	ddc03417 	ldw	r23,208(sp)
  808f50:	dd803317 	ldw	r22,204(sp)
  808f54:	dd403217 	ldw	r21,200(sp)
  808f58:	dd003117 	ldw	r20,196(sp)
  808f5c:	dcc03017 	ldw	r19,192(sp)
  808f60:	dc802f17 	ldw	r18,188(sp)
  808f64:	dc402e17 	ldw	r17,184(sp)
  808f68:	dc002d17 	ldw	r16,180(sp)
  808f6c:	dec03704 	addi	sp,sp,220
  808f70:	f800283a 	ret
  808f74:	08063400 	call	806340 <__sinit>
  808f78:	003f2f06 	br	808c38 <__alt_mem_onchip_mem+0xff800c38>
  808f7c:	0463c83a 	sub	r17,zero,r17
  808f80:	d8802215 	stw	r2,136(sp)
  808f84:	a5000114 	ori	r20,r20,4
  808f88:	80c00007 	ldb	r3,0(r16)
  808f8c:	003f7706 	br	808d6c <__alt_mem_onchip_mem+0xff800d6c>
  808f90:	00800c04 	movi	r2,48
  808f94:	da802217 	ldw	r10,136(sp)
  808f98:	d8801d05 	stb	r2,116(sp)
  808f9c:	00801e04 	movi	r2,120
  808fa0:	d8801d45 	stb	r2,117(sp)
  808fa4:	d8001d85 	stb	zero,118(sp)
  808fa8:	50c00104 	addi	r3,r10,4
  808fac:	54800017 	ldw	r18,0(r10)
  808fb0:	0027883a 	mov	r19,zero
  808fb4:	a0800094 	ori	r2,r20,2
  808fb8:	48030b16 	blt	r9,zero,809be8 <___vfiprintf_internal_r+0xff8>
  808fbc:	00bfdfc4 	movi	r2,-129
  808fc0:	a096703a 	and	r11,r20,r2
  808fc4:	d8c02215 	stw	r3,136(sp)
  808fc8:	5d000094 	ori	r20,r11,2
  808fcc:	90032b1e 	bne	r18,zero,809c7c <___vfiprintf_internal_r+0x108c>
  808fd0:	00802074 	movhi	r2,129
  808fd4:	10878b04 	addi	r2,r2,7724
  808fd8:	d8802615 	stw	r2,152(sp)
  808fdc:	0039883a 	mov	fp,zero
  808fe0:	48017b1e 	bne	r9,zero,8095d0 <___vfiprintf_internal_r+0x9e0>
  808fe4:	0013883a 	mov	r9,zero
  808fe8:	0027883a 	mov	r19,zero
  808fec:	dd401a04 	addi	r21,sp,104
  808ff0:	4825883a 	mov	r18,r9
  808ff4:	4cc0010e 	bge	r9,r19,808ffc <___vfiprintf_internal_r+0x40c>
  808ff8:	9825883a 	mov	r18,r19
  808ffc:	e7003fcc 	andi	fp,fp,255
  809000:	e700201c 	xori	fp,fp,128
  809004:	e73fe004 	addi	fp,fp,-128
  809008:	e0000126 	beq	fp,zero,809010 <___vfiprintf_internal_r+0x420>
  80900c:	94800044 	addi	r18,r18,1
  809010:	a380008c 	andi	r14,r20,2
  809014:	70000126 	beq	r14,zero,80901c <___vfiprintf_internal_r+0x42c>
  809018:	94800084 	addi	r18,r18,2
  80901c:	a700210c 	andi	fp,r20,132
  809020:	e001df1e 	bne	fp,zero,8097a0 <___vfiprintf_internal_r+0xbb0>
  809024:	8c87c83a 	sub	r3,r17,r18
  809028:	00c1dd0e 	bge	zero,r3,8097a0 <___vfiprintf_internal_r+0xbb0>
  80902c:	01c00404 	movi	r7,16
  809030:	d8801c17 	ldw	r2,112(sp)
  809034:	38c3ad0e 	bge	r7,r3,809eec <___vfiprintf_internal_r+0x12fc>
  809038:	02802074 	movhi	r10,129
  80903c:	5287ef04 	addi	r10,r10,8124
  809040:	dc002915 	stw	r16,164(sp)
  809044:	d9801b17 	ldw	r6,108(sp)
  809048:	da802415 	stw	r10,144(sp)
  80904c:	03c001c4 	movi	r15,7
  809050:	da402515 	stw	r9,148(sp)
  809054:	db802815 	stw	r14,160(sp)
  809058:	1821883a 	mov	r16,r3
  80905c:	00000506 	br	809074 <___vfiprintf_internal_r+0x484>
  809060:	31400084 	addi	r5,r6,2
  809064:	42000204 	addi	r8,r8,8
  809068:	200d883a 	mov	r6,r4
  80906c:	843ffc04 	addi	r16,r16,-16
  809070:	3c000d0e 	bge	r7,r16,8090a8 <___vfiprintf_internal_r+0x4b8>
  809074:	10800404 	addi	r2,r2,16
  809078:	31000044 	addi	r4,r6,1
  80907c:	45800015 	stw	r22,0(r8)
  809080:	41c00115 	stw	r7,4(r8)
  809084:	d8801c15 	stw	r2,112(sp)
  809088:	d9001b15 	stw	r4,108(sp)
  80908c:	793ff40e 	bge	r15,r4,809060 <__alt_mem_onchip_mem+0xff801060>
  809090:	1001b51e 	bne	r2,zero,809768 <___vfiprintf_internal_r+0xb78>
  809094:	843ffc04 	addi	r16,r16,-16
  809098:	000d883a 	mov	r6,zero
  80909c:	01400044 	movi	r5,1
  8090a0:	d811883a 	mov	r8,sp
  8090a4:	3c3ff316 	blt	r7,r16,809074 <__alt_mem_onchip_mem+0xff801074>
  8090a8:	8007883a 	mov	r3,r16
  8090ac:	da402517 	ldw	r9,148(sp)
  8090b0:	db802817 	ldw	r14,160(sp)
  8090b4:	dc002917 	ldw	r16,164(sp)
  8090b8:	da802417 	ldw	r10,144(sp)
  8090bc:	1885883a 	add	r2,r3,r2
  8090c0:	40c00115 	stw	r3,4(r8)
  8090c4:	42800015 	stw	r10,0(r8)
  8090c8:	d8801c15 	stw	r2,112(sp)
  8090cc:	d9401b15 	stw	r5,108(sp)
  8090d0:	00c001c4 	movi	r3,7
  8090d4:	19426016 	blt	r3,r5,809a58 <___vfiprintf_internal_r+0xe68>
  8090d8:	d8c01d87 	ldb	r3,118(sp)
  8090dc:	42000204 	addi	r8,r8,8
  8090e0:	29000044 	addi	r4,r5,1
  8090e4:	1801b31e 	bne	r3,zero,8097b4 <___vfiprintf_internal_r+0xbc4>
  8090e8:	7001c026 	beq	r14,zero,8097ec <___vfiprintf_internal_r+0xbfc>
  8090ec:	d8c01d04 	addi	r3,sp,116
  8090f0:	10800084 	addi	r2,r2,2
  8090f4:	40c00015 	stw	r3,0(r8)
  8090f8:	00c00084 	movi	r3,2
  8090fc:	40c00115 	stw	r3,4(r8)
  809100:	d8801c15 	stw	r2,112(sp)
  809104:	d9001b15 	stw	r4,108(sp)
  809108:	00c001c4 	movi	r3,7
  80910c:	1902650e 	bge	r3,r4,809aa4 <___vfiprintf_internal_r+0xeb4>
  809110:	10029a1e 	bne	r2,zero,809b7c <___vfiprintf_internal_r+0xf8c>
  809114:	00c02004 	movi	r3,128
  809118:	01000044 	movi	r4,1
  80911c:	000b883a 	mov	r5,zero
  809120:	d811883a 	mov	r8,sp
  809124:	e0c1b31e 	bne	fp,r3,8097f4 <___vfiprintf_internal_r+0xc04>
  809128:	8cb9c83a 	sub	fp,r17,r18
  80912c:	0701b10e 	bge	zero,fp,8097f4 <___vfiprintf_internal_r+0xc04>
  809130:	01c00404 	movi	r7,16
  809134:	3f03890e 	bge	r7,fp,809f5c <___vfiprintf_internal_r+0x136c>
  809138:	00c02074 	movhi	r3,129
  80913c:	18c7eb04 	addi	r3,r3,8108
  809140:	d8c02415 	stw	r3,144(sp)
  809144:	8007883a 	mov	r3,r16
  809148:	034001c4 	movi	r13,7
  80914c:	e021883a 	mov	r16,fp
  809150:	da402515 	stw	r9,148(sp)
  809154:	1839883a 	mov	fp,r3
  809158:	00000506 	br	809170 <___vfiprintf_internal_r+0x580>
  80915c:	29800084 	addi	r6,r5,2
  809160:	42000204 	addi	r8,r8,8
  809164:	180b883a 	mov	r5,r3
  809168:	843ffc04 	addi	r16,r16,-16
  80916c:	3c000d0e 	bge	r7,r16,8091a4 <___vfiprintf_internal_r+0x5b4>
  809170:	10800404 	addi	r2,r2,16
  809174:	28c00044 	addi	r3,r5,1
  809178:	45c00015 	stw	r23,0(r8)
  80917c:	41c00115 	stw	r7,4(r8)
  809180:	d8801c15 	stw	r2,112(sp)
  809184:	d8c01b15 	stw	r3,108(sp)
  809188:	68fff40e 	bge	r13,r3,80915c <__alt_mem_onchip_mem+0xff80115c>
  80918c:	1002241e 	bne	r2,zero,809a20 <___vfiprintf_internal_r+0xe30>
  809190:	843ffc04 	addi	r16,r16,-16
  809194:	01800044 	movi	r6,1
  809198:	000b883a 	mov	r5,zero
  80919c:	d811883a 	mov	r8,sp
  8091a0:	3c3ff316 	blt	r7,r16,809170 <__alt_mem_onchip_mem+0xff801170>
  8091a4:	da402517 	ldw	r9,148(sp)
  8091a8:	e007883a 	mov	r3,fp
  8091ac:	8039883a 	mov	fp,r16
  8091b0:	1821883a 	mov	r16,r3
  8091b4:	d8c02417 	ldw	r3,144(sp)
  8091b8:	1705883a 	add	r2,r2,fp
  8091bc:	47000115 	stw	fp,4(r8)
  8091c0:	40c00015 	stw	r3,0(r8)
  8091c4:	d8801c15 	stw	r2,112(sp)
  8091c8:	d9801b15 	stw	r6,108(sp)
  8091cc:	00c001c4 	movi	r3,7
  8091d0:	19827616 	blt	r3,r6,809bac <___vfiprintf_internal_r+0xfbc>
  8091d4:	4cf9c83a 	sub	fp,r9,r19
  8091d8:	42000204 	addi	r8,r8,8
  8091dc:	31000044 	addi	r4,r6,1
  8091e0:	300b883a 	mov	r5,r6
  8091e4:	07018516 	blt	zero,fp,8097fc <___vfiprintf_internal_r+0xc0c>
  8091e8:	9885883a 	add	r2,r19,r2
  8091ec:	45400015 	stw	r21,0(r8)
  8091f0:	44c00115 	stw	r19,4(r8)
  8091f4:	d8801c15 	stw	r2,112(sp)
  8091f8:	d9001b15 	stw	r4,108(sp)
  8091fc:	00c001c4 	movi	r3,7
  809200:	1901dd0e 	bge	r3,r4,809978 <___vfiprintf_internal_r+0xd88>
  809204:	1002401e 	bne	r2,zero,809b08 <___vfiprintf_internal_r+0xf18>
  809208:	d8001b15 	stw	zero,108(sp)
  80920c:	a2c0010c 	andi	r11,r20,4
  809210:	58000226 	beq	r11,zero,80921c <___vfiprintf_internal_r+0x62c>
  809214:	8ca7c83a 	sub	r19,r17,r18
  809218:	04c2f216 	blt	zero,r19,809de4 <___vfiprintf_internal_r+0x11f4>
  80921c:	8c80010e 	bge	r17,r18,809224 <___vfiprintf_internal_r+0x634>
  809220:	9023883a 	mov	r17,r18
  809224:	da802317 	ldw	r10,140(sp)
  809228:	5455883a 	add	r10,r10,r17
  80922c:	da802315 	stw	r10,140(sp)
  809230:	d8001b15 	stw	zero,108(sp)
  809234:	d811883a 	mov	r8,sp
  809238:	003ea206 	br	808cc4 <__alt_mem_onchip_mem+0xff800cc4>
  80923c:	a5000814 	ori	r20,r20,32
  809240:	80c00007 	ldb	r3,0(r16)
  809244:	003ec906 	br	808d6c <__alt_mem_onchip_mem+0xff800d6c>
  809248:	80c00007 	ldb	r3,0(r16)
  80924c:	1b030926 	beq	r3,r12,809e74 <___vfiprintf_internal_r+0x1284>
  809250:	a5000414 	ori	r20,r20,16
  809254:	003ec506 	br	808d6c <__alt_mem_onchip_mem+0xff800d6c>
  809258:	21003fcc 	andi	r4,r4,255
  80925c:	20035e1e 	bne	r4,zero,809fd8 <___vfiprintf_internal_r+0x13e8>
  809260:	a080080c 	andi	r2,r20,32
  809264:	1002a526 	beq	r2,zero,809cfc <___vfiprintf_internal_r+0x110c>
  809268:	da802217 	ldw	r10,136(sp)
  80926c:	50800017 	ldw	r2,0(r10)
  809270:	da802317 	ldw	r10,140(sp)
  809274:	5007d7fa 	srai	r3,r10,31
  809278:	da802217 	ldw	r10,136(sp)
  80927c:	10c00115 	stw	r3,4(r2)
  809280:	52800104 	addi	r10,r10,4
  809284:	da802215 	stw	r10,136(sp)
  809288:	da802317 	ldw	r10,140(sp)
  80928c:	12800015 	stw	r10,0(r2)
  809290:	003e8c06 	br	808cc4 <__alt_mem_onchip_mem+0xff800cc4>
  809294:	21003fcc 	andi	r4,r4,255
  809298:	2003511e 	bne	r4,zero,809fe0 <___vfiprintf_internal_r+0x13f0>
  80929c:	a080080c 	andi	r2,r20,32
  8092a0:	1000a126 	beq	r2,zero,809528 <___vfiprintf_internal_r+0x938>
  8092a4:	da802217 	ldw	r10,136(sp)
  8092a8:	d8001d85 	stb	zero,118(sp)
  8092ac:	50800204 	addi	r2,r10,8
  8092b0:	54800017 	ldw	r18,0(r10)
  8092b4:	54c00117 	ldw	r19,4(r10)
  8092b8:	4802b416 	blt	r9,zero,809d8c <___vfiprintf_internal_r+0x119c>
  8092bc:	013fdfc4 	movi	r4,-129
  8092c0:	94c6b03a 	or	r3,r18,r19
  8092c4:	d8802215 	stw	r2,136(sp)
  8092c8:	a128703a 	and	r20,r20,r4
  8092cc:	1800a226 	beq	r3,zero,809558 <___vfiprintf_internal_r+0x968>
  8092d0:	0039883a 	mov	fp,zero
  8092d4:	dd401a04 	addi	r21,sp,104
  8092d8:	9006d0fa 	srli	r3,r18,3
  8092dc:	9808977a 	slli	r4,r19,29
  8092e0:	9826d0fa 	srli	r19,r19,3
  8092e4:	948001cc 	andi	r18,r18,7
  8092e8:	90800c04 	addi	r2,r18,48
  8092ec:	ad7fffc4 	addi	r21,r21,-1
  8092f0:	20e4b03a 	or	r18,r4,r3
  8092f4:	a8800005 	stb	r2,0(r21)
  8092f8:	94c6b03a 	or	r3,r18,r19
  8092fc:	183ff61e 	bne	r3,zero,8092d8 <__alt_mem_onchip_mem+0xff8012d8>
  809300:	a0c0004c 	andi	r3,r20,1
  809304:	18005926 	beq	r3,zero,80946c <___vfiprintf_internal_r+0x87c>
  809308:	10803fcc 	andi	r2,r2,255
  80930c:	1080201c 	xori	r2,r2,128
  809310:	10bfe004 	addi	r2,r2,-128
  809314:	00c00c04 	movi	r3,48
  809318:	10c05426 	beq	r2,r3,80946c <___vfiprintf_internal_r+0x87c>
  80931c:	da801e17 	ldw	r10,120(sp)
  809320:	a8bfffc4 	addi	r2,r21,-1
  809324:	a8ffffc5 	stb	r3,-1(r21)
  809328:	50a7c83a 	sub	r19,r10,r2
  80932c:	102b883a 	mov	r21,r2
  809330:	003f2f06 	br	808ff0 <__alt_mem_onchip_mem+0xff800ff0>
  809334:	21003fcc 	andi	r4,r4,255
  809338:	2003421e 	bne	r4,zero,80a044 <___vfiprintf_internal_r+0x1454>
  80933c:	00802074 	movhi	r2,129
  809340:	10878b04 	addi	r2,r2,7724
  809344:	d8802615 	stw	r2,152(sp)
  809348:	a080080c 	andi	r2,r20,32
  80934c:	1000aa26 	beq	r2,zero,8095f8 <___vfiprintf_internal_r+0xa08>
  809350:	da802217 	ldw	r10,136(sp)
  809354:	54800017 	ldw	r18,0(r10)
  809358:	54c00117 	ldw	r19,4(r10)
  80935c:	52800204 	addi	r10,r10,8
  809360:	da802215 	stw	r10,136(sp)
  809364:	a080004c 	andi	r2,r20,1
  809368:	1001d226 	beq	r2,zero,809ab4 <___vfiprintf_internal_r+0xec4>
  80936c:	94c4b03a 	or	r2,r18,r19
  809370:	1002351e 	bne	r2,zero,809c48 <___vfiprintf_internal_r+0x1058>
  809374:	d8001d85 	stb	zero,118(sp)
  809378:	48022216 	blt	r9,zero,809c04 <___vfiprintf_internal_r+0x1014>
  80937c:	00bfdfc4 	movi	r2,-129
  809380:	a0a8703a 	and	r20,r20,r2
  809384:	003f1506 	br	808fdc <__alt_mem_onchip_mem+0xff800fdc>
  809388:	da802217 	ldw	r10,136(sp)
  80938c:	04800044 	movi	r18,1
  809390:	d8001d85 	stb	zero,118(sp)
  809394:	50800017 	ldw	r2,0(r10)
  809398:	52800104 	addi	r10,r10,4
  80939c:	da802215 	stw	r10,136(sp)
  8093a0:	d8801005 	stb	r2,64(sp)
  8093a4:	9027883a 	mov	r19,r18
  8093a8:	dd401004 	addi	r21,sp,64
  8093ac:	0013883a 	mov	r9,zero
  8093b0:	003f1706 	br	809010 <__alt_mem_onchip_mem+0xff801010>
  8093b4:	21003fcc 	andi	r4,r4,255
  8093b8:	2003201e 	bne	r4,zero,80a03c <___vfiprintf_internal_r+0x144c>
  8093bc:	a080080c 	andi	r2,r20,32
  8093c0:	10004b26 	beq	r2,zero,8094f0 <___vfiprintf_internal_r+0x900>
  8093c4:	da802217 	ldw	r10,136(sp)
  8093c8:	50800117 	ldw	r2,4(r10)
  8093cc:	54800017 	ldw	r18,0(r10)
  8093d0:	52800204 	addi	r10,r10,8
  8093d4:	da802215 	stw	r10,136(sp)
  8093d8:	1027883a 	mov	r19,r2
  8093dc:	10022c16 	blt	r2,zero,809c90 <___vfiprintf_internal_r+0x10a0>
  8093e0:	df001d83 	ldbu	fp,118(sp)
  8093e4:	48007216 	blt	r9,zero,8095b0 <___vfiprintf_internal_r+0x9c0>
  8093e8:	00ffdfc4 	movi	r3,-129
  8093ec:	94c4b03a 	or	r2,r18,r19
  8093f0:	a0e8703a 	and	r20,r20,r3
  8093f4:	1000cc26 	beq	r2,zero,809728 <___vfiprintf_internal_r+0xb38>
  8093f8:	98021026 	beq	r19,zero,809c3c <___vfiprintf_internal_r+0x104c>
  8093fc:	dc402415 	stw	r17,144(sp)
  809400:	dc002515 	stw	r16,148(sp)
  809404:	9823883a 	mov	r17,r19
  809408:	9021883a 	mov	r16,r18
  80940c:	dd401a04 	addi	r21,sp,104
  809410:	4825883a 	mov	r18,r9
  809414:	4027883a 	mov	r19,r8
  809418:	8009883a 	mov	r4,r16
  80941c:	880b883a 	mov	r5,r17
  809420:	01800284 	movi	r6,10
  809424:	000f883a 	mov	r7,zero
  809428:	080adac0 	call	80adac <__umoddi3>
  80942c:	10800c04 	addi	r2,r2,48
  809430:	ad7fffc4 	addi	r21,r21,-1
  809434:	8009883a 	mov	r4,r16
  809438:	880b883a 	mov	r5,r17
  80943c:	a8800005 	stb	r2,0(r21)
  809440:	01800284 	movi	r6,10
  809444:	000f883a 	mov	r7,zero
  809448:	080a8340 	call	80a834 <__udivdi3>
  80944c:	1021883a 	mov	r16,r2
  809450:	10c4b03a 	or	r2,r2,r3
  809454:	1823883a 	mov	r17,r3
  809458:	103fef1e 	bne	r2,zero,809418 <__alt_mem_onchip_mem+0xff801418>
  80945c:	dc402417 	ldw	r17,144(sp)
  809460:	dc002517 	ldw	r16,148(sp)
  809464:	9013883a 	mov	r9,r18
  809468:	9811883a 	mov	r8,r19
  80946c:	da801e17 	ldw	r10,120(sp)
  809470:	5567c83a 	sub	r19,r10,r21
  809474:	003ede06 	br	808ff0 <__alt_mem_onchip_mem+0xff800ff0>
  809478:	38803fcc 	andi	r2,r7,255
  80947c:	1080201c 	xori	r2,r2,128
  809480:	10bfe004 	addi	r2,r2,-128
  809484:	1002371e 	bne	r2,zero,809d64 <___vfiprintf_internal_r+0x1174>
  809488:	01000044 	movi	r4,1
  80948c:	01c00804 	movi	r7,32
  809490:	80c00007 	ldb	r3,0(r16)
  809494:	003e3506 	br	808d6c <__alt_mem_onchip_mem+0xff800d6c>
  809498:	a5000054 	ori	r20,r20,1
  80949c:	80c00007 	ldb	r3,0(r16)
  8094a0:	003e3206 	br	808d6c <__alt_mem_onchip_mem+0xff800d6c>
  8094a4:	a5002014 	ori	r20,r20,128
  8094a8:	80c00007 	ldb	r3,0(r16)
  8094ac:	003e2f06 	br	808d6c <__alt_mem_onchip_mem+0xff800d6c>
  8094b0:	8015883a 	mov	r10,r16
  8094b4:	0023883a 	mov	r17,zero
  8094b8:	18bff404 	addi	r2,r3,-48
  8094bc:	50c00007 	ldb	r3,0(r10)
  8094c0:	8c4002a4 	muli	r17,r17,10
  8094c4:	84000044 	addi	r16,r16,1
  8094c8:	8015883a 	mov	r10,r16
  8094cc:	1463883a 	add	r17,r2,r17
  8094d0:	18bff404 	addi	r2,r3,-48
  8094d4:	30bff92e 	bgeu	r6,r2,8094bc <__alt_mem_onchip_mem+0xff8014bc>
  8094d8:	003e2506 	br	808d70 <__alt_mem_onchip_mem+0xff800d70>
  8094dc:	21003fcc 	andi	r4,r4,255
  8094e0:	2002d41e 	bne	r4,zero,80a034 <___vfiprintf_internal_r+0x1444>
  8094e4:	a5000414 	ori	r20,r20,16
  8094e8:	a080080c 	andi	r2,r20,32
  8094ec:	103fb51e 	bne	r2,zero,8093c4 <__alt_mem_onchip_mem+0xff8013c4>
  8094f0:	a080040c 	andi	r2,r20,16
  8094f4:	1001f826 	beq	r2,zero,809cd8 <___vfiprintf_internal_r+0x10e8>
  8094f8:	da802217 	ldw	r10,136(sp)
  8094fc:	54800017 	ldw	r18,0(r10)
  809500:	52800104 	addi	r10,r10,4
  809504:	da802215 	stw	r10,136(sp)
  809508:	9027d7fa 	srai	r19,r18,31
  80950c:	9805883a 	mov	r2,r19
  809510:	003fb206 	br	8093dc <__alt_mem_onchip_mem+0xff8013dc>
  809514:	21003fcc 	andi	r4,r4,255
  809518:	2002c41e 	bne	r4,zero,80a02c <___vfiprintf_internal_r+0x143c>
  80951c:	a5000414 	ori	r20,r20,16
  809520:	a080080c 	andi	r2,r20,32
  809524:	103f5f1e 	bne	r2,zero,8092a4 <__alt_mem_onchip_mem+0xff8012a4>
  809528:	a080040c 	andi	r2,r20,16
  80952c:	10020f26 	beq	r2,zero,809d6c <___vfiprintf_internal_r+0x117c>
  809530:	da802217 	ldw	r10,136(sp)
  809534:	d8001d85 	stb	zero,118(sp)
  809538:	0027883a 	mov	r19,zero
  80953c:	50800104 	addi	r2,r10,4
  809540:	54800017 	ldw	r18,0(r10)
  809544:	48021116 	blt	r9,zero,809d8c <___vfiprintf_internal_r+0x119c>
  809548:	00ffdfc4 	movi	r3,-129
  80954c:	d8802215 	stw	r2,136(sp)
  809550:	a0e8703a 	and	r20,r20,r3
  809554:	903f5e1e 	bne	r18,zero,8092d0 <__alt_mem_onchip_mem+0xff8012d0>
  809558:	0039883a 	mov	fp,zero
  80955c:	4802a626 	beq	r9,zero,809ff8 <___vfiprintf_internal_r+0x1408>
  809560:	0025883a 	mov	r18,zero
  809564:	0027883a 	mov	r19,zero
  809568:	003f5a06 	br	8092d4 <__alt_mem_onchip_mem+0xff8012d4>
  80956c:	21003fcc 	andi	r4,r4,255
  809570:	20029f1e 	bne	r4,zero,809ff0 <___vfiprintf_internal_r+0x1400>
  809574:	a5000414 	ori	r20,r20,16
  809578:	a080080c 	andi	r2,r20,32
  80957c:	10005e1e 	bne	r2,zero,8096f8 <___vfiprintf_internal_r+0xb08>
  809580:	a080040c 	andi	r2,r20,16
  809584:	1001a21e 	bne	r2,zero,809c10 <___vfiprintf_internal_r+0x1020>
  809588:	a080100c 	andi	r2,r20,64
  80958c:	d8001d85 	stb	zero,118(sp)
  809590:	da802217 	ldw	r10,136(sp)
  809594:	1002231e 	bne	r2,zero,809e24 <___vfiprintf_internal_r+0x1234>
  809598:	50800104 	addi	r2,r10,4
  80959c:	54800017 	ldw	r18,0(r10)
  8095a0:	0027883a 	mov	r19,zero
  8095a4:	4801a00e 	bge	r9,zero,809c28 <___vfiprintf_internal_r+0x1038>
  8095a8:	d8802215 	stw	r2,136(sp)
  8095ac:	0039883a 	mov	fp,zero
  8095b0:	94c4b03a 	or	r2,r18,r19
  8095b4:	103f901e 	bne	r2,zero,8093f8 <__alt_mem_onchip_mem+0xff8013f8>
  8095b8:	00800044 	movi	r2,1
  8095bc:	10803fcc 	andi	r2,r2,255
  8095c0:	00c00044 	movi	r3,1
  8095c4:	10c05926 	beq	r2,r3,80972c <___vfiprintf_internal_r+0xb3c>
  8095c8:	00c00084 	movi	r3,2
  8095cc:	10ffe41e 	bne	r2,r3,809560 <__alt_mem_onchip_mem+0xff801560>
  8095d0:	0025883a 	mov	r18,zero
  8095d4:	0027883a 	mov	r19,zero
  8095d8:	00013d06 	br	809ad0 <___vfiprintf_internal_r+0xee0>
  8095dc:	21003fcc 	andi	r4,r4,255
  8095e0:	2002811e 	bne	r4,zero,809fe8 <___vfiprintf_internal_r+0x13f8>
  8095e4:	00802074 	movhi	r2,129
  8095e8:	10878604 	addi	r2,r2,7704
  8095ec:	d8802615 	stw	r2,152(sp)
  8095f0:	a080080c 	andi	r2,r20,32
  8095f4:	103f561e 	bne	r2,zero,809350 <__alt_mem_onchip_mem+0xff801350>
  8095f8:	a080040c 	andi	r2,r20,16
  8095fc:	1001d126 	beq	r2,zero,809d44 <___vfiprintf_internal_r+0x1154>
  809600:	da802217 	ldw	r10,136(sp)
  809604:	0027883a 	mov	r19,zero
  809608:	54800017 	ldw	r18,0(r10)
  80960c:	52800104 	addi	r10,r10,4
  809610:	da802215 	stw	r10,136(sp)
  809614:	003f5306 	br	809364 <__alt_mem_onchip_mem+0xff801364>
  809618:	da802217 	ldw	r10,136(sp)
  80961c:	d8001d85 	stb	zero,118(sp)
  809620:	55400017 	ldw	r21,0(r10)
  809624:	50c00104 	addi	r3,r10,4
  809628:	a8024226 	beq	r21,zero,809f34 <___vfiprintf_internal_r+0x1344>
  80962c:	48021816 	blt	r9,zero,809e90 <___vfiprintf_internal_r+0x12a0>
  809630:	480d883a 	mov	r6,r9
  809634:	000b883a 	mov	r5,zero
  809638:	a809883a 	mov	r4,r21
  80963c:	d8c02a15 	stw	r3,168(sp)
  809640:	da002b15 	stw	r8,172(sp)
  809644:	da402c15 	stw	r9,176(sp)
  809648:	08070440 	call	807044 <memchr>
  80964c:	d8c02a17 	ldw	r3,168(sp)
  809650:	da002b17 	ldw	r8,172(sp)
  809654:	da402c17 	ldw	r9,176(sp)
  809658:	10024826 	beq	r2,zero,809f7c <___vfiprintf_internal_r+0x138c>
  80965c:	1567c83a 	sub	r19,r2,r21
  809660:	df001d83 	ldbu	fp,118(sp)
  809664:	d8c02215 	stw	r3,136(sp)
  809668:	0013883a 	mov	r9,zero
  80966c:	003e6006 	br	808ff0 <__alt_mem_onchip_mem+0xff800ff0>
  809670:	21003fcc 	andi	r4,r4,255
  809674:	203fc026 	beq	r4,zero,809578 <__alt_mem_onchip_mem+0xff801578>
  809678:	d9c01d85 	stb	r7,118(sp)
  80967c:	003fbe06 	br	809578 <__alt_mem_onchip_mem+0xff801578>
  809680:	da802217 	ldw	r10,136(sp)
  809684:	54400017 	ldw	r17,0(r10)
  809688:	50800104 	addi	r2,r10,4
  80968c:	883e3b16 	blt	r17,zero,808f7c <__alt_mem_onchip_mem+0xff800f7c>
  809690:	d8802215 	stw	r2,136(sp)
  809694:	80c00007 	ldb	r3,0(r16)
  809698:	003db406 	br	808d6c <__alt_mem_onchip_mem+0xff800d6c>
  80969c:	01000044 	movi	r4,1
  8096a0:	01c00ac4 	movi	r7,43
  8096a4:	80c00007 	ldb	r3,0(r16)
  8096a8:	003db006 	br	808d6c <__alt_mem_onchip_mem+0xff800d6c>
  8096ac:	80c00007 	ldb	r3,0(r16)
  8096b0:	82800044 	addi	r10,r16,1
  8096b4:	1b423c26 	beq	r3,r13,809fa8 <___vfiprintf_internal_r+0x13b8>
  8096b8:	18bff404 	addi	r2,r3,-48
  8096bc:	0013883a 	mov	r9,zero
  8096c0:	30822b36 	bltu	r6,r2,809f70 <___vfiprintf_internal_r+0x1380>
  8096c4:	50c00007 	ldb	r3,0(r10)
  8096c8:	4a4002a4 	muli	r9,r9,10
  8096cc:	54000044 	addi	r16,r10,1
  8096d0:	8015883a 	mov	r10,r16
  8096d4:	4893883a 	add	r9,r9,r2
  8096d8:	18bff404 	addi	r2,r3,-48
  8096dc:	30bff92e 	bgeu	r6,r2,8096c4 <__alt_mem_onchip_mem+0xff8016c4>
  8096e0:	483da30e 	bge	r9,zero,808d70 <__alt_mem_onchip_mem+0xff800d70>
  8096e4:	027fffc4 	movi	r9,-1
  8096e8:	003da106 	br	808d70 <__alt_mem_onchip_mem+0xff800d70>
  8096ec:	a5001014 	ori	r20,r20,64
  8096f0:	80c00007 	ldb	r3,0(r16)
  8096f4:	003d9d06 	br	808d6c <__alt_mem_onchip_mem+0xff800d6c>
  8096f8:	da802217 	ldw	r10,136(sp)
  8096fc:	d8001d85 	stb	zero,118(sp)
  809700:	50c00204 	addi	r3,r10,8
  809704:	54800017 	ldw	r18,0(r10)
  809708:	54c00117 	ldw	r19,4(r10)
  80970c:	4801ca16 	blt	r9,zero,809e38 <___vfiprintf_internal_r+0x1248>
  809710:	013fdfc4 	movi	r4,-129
  809714:	94c4b03a 	or	r2,r18,r19
  809718:	d8c02215 	stw	r3,136(sp)
  80971c:	a128703a 	and	r20,r20,r4
  809720:	0039883a 	mov	fp,zero
  809724:	103f341e 	bne	r2,zero,8093f8 <__alt_mem_onchip_mem+0xff8013f8>
  809728:	483e2e26 	beq	r9,zero,808fe4 <__alt_mem_onchip_mem+0xff800fe4>
  80972c:	0025883a 	mov	r18,zero
  809730:	94800c04 	addi	r18,r18,48
  809734:	dc8019c5 	stb	r18,103(sp)
  809738:	dcc02717 	ldw	r19,156(sp)
  80973c:	dd4019c4 	addi	r21,sp,103
  809740:	003e2b06 	br	808ff0 <__alt_mem_onchip_mem+0xff800ff0>
  809744:	21003fcc 	andi	r4,r4,255
  809748:	2002361e 	bne	r4,zero,80a024 <___vfiprintf_internal_r+0x1434>
  80974c:	1801c126 	beq	r3,zero,809e54 <___vfiprintf_internal_r+0x1264>
  809750:	04800044 	movi	r18,1
  809754:	d8c01005 	stb	r3,64(sp)
  809758:	d8001d85 	stb	zero,118(sp)
  80975c:	9027883a 	mov	r19,r18
  809760:	dd401004 	addi	r21,sp,64
  809764:	003f1106 	br	8093ac <__alt_mem_onchip_mem+0xff8013ac>
  809768:	d9402117 	ldw	r5,132(sp)
  80976c:	d9002017 	ldw	r4,128(sp)
  809770:	d9801a04 	addi	r6,sp,104
  809774:	d9c02b15 	stw	r7,172(sp)
  809778:	dbc02a15 	stw	r15,168(sp)
  80977c:	0808adc0 	call	808adc <__sprint_r.part.0>
  809780:	d9c02b17 	ldw	r7,172(sp)
  809784:	dbc02a17 	ldw	r15,168(sp)
  809788:	10006d1e 	bne	r2,zero,809940 <___vfiprintf_internal_r+0xd50>
  80978c:	d9801b17 	ldw	r6,108(sp)
  809790:	d8801c17 	ldw	r2,112(sp)
  809794:	d811883a 	mov	r8,sp
  809798:	31400044 	addi	r5,r6,1
  80979c:	003e3306 	br	80906c <__alt_mem_onchip_mem+0xff80106c>
  8097a0:	d9401b17 	ldw	r5,108(sp)
  8097a4:	d8801c17 	ldw	r2,112(sp)
  8097a8:	29000044 	addi	r4,r5,1
  8097ac:	d8c01d87 	ldb	r3,118(sp)
  8097b0:	183e4d26 	beq	r3,zero,8090e8 <__alt_mem_onchip_mem+0xff8010e8>
  8097b4:	00c00044 	movi	r3,1
  8097b8:	d9401d84 	addi	r5,sp,118
  8097bc:	10c5883a 	add	r2,r2,r3
  8097c0:	41400015 	stw	r5,0(r8)
  8097c4:	40c00115 	stw	r3,4(r8)
  8097c8:	d8801c15 	stw	r2,112(sp)
  8097cc:	d9001b15 	stw	r4,108(sp)
  8097d0:	014001c4 	movi	r5,7
  8097d4:	2900a90e 	bge	r5,r4,809a7c <___vfiprintf_internal_r+0xe8c>
  8097d8:	1000da1e 	bne	r2,zero,809b44 <___vfiprintf_internal_r+0xf54>
  8097dc:	7000ab1e 	bne	r14,zero,809a8c <___vfiprintf_internal_r+0xe9c>
  8097e0:	000b883a 	mov	r5,zero
  8097e4:	1809883a 	mov	r4,r3
  8097e8:	d811883a 	mov	r8,sp
  8097ec:	00c02004 	movi	r3,128
  8097f0:	e0fe4d26 	beq	fp,r3,809128 <__alt_mem_onchip_mem+0xff801128>
  8097f4:	4cf9c83a 	sub	fp,r9,r19
  8097f8:	073e7b0e 	bge	zero,fp,8091e8 <__alt_mem_onchip_mem+0xff8011e8>
  8097fc:	01c00404 	movi	r7,16
  809800:	3f01900e 	bge	r7,fp,809e44 <___vfiprintf_internal_r+0x1254>
  809804:	00c02074 	movhi	r3,129
  809808:	18c7eb04 	addi	r3,r3,8108
  80980c:	d8c02415 	stw	r3,144(sp)
  809810:	034001c4 	movi	r13,7
  809814:	00000506 	br	80982c <___vfiprintf_internal_r+0xc3c>
  809818:	29000084 	addi	r4,r5,2
  80981c:	42000204 	addi	r8,r8,8
  809820:	180b883a 	mov	r5,r3
  809824:	e73ffc04 	addi	fp,fp,-16
  809828:	3f000d0e 	bge	r7,fp,809860 <___vfiprintf_internal_r+0xc70>
  80982c:	10800404 	addi	r2,r2,16
  809830:	28c00044 	addi	r3,r5,1
  809834:	45c00015 	stw	r23,0(r8)
  809838:	41c00115 	stw	r7,4(r8)
  80983c:	d8801c15 	stw	r2,112(sp)
  809840:	d8c01b15 	stw	r3,108(sp)
  809844:	68fff40e 	bge	r13,r3,809818 <__alt_mem_onchip_mem+0xff801818>
  809848:	1000101e 	bne	r2,zero,80988c <___vfiprintf_internal_r+0xc9c>
  80984c:	e73ffc04 	addi	fp,fp,-16
  809850:	01000044 	movi	r4,1
  809854:	000b883a 	mov	r5,zero
  809858:	d811883a 	mov	r8,sp
  80985c:	3f3ff316 	blt	r7,fp,80982c <__alt_mem_onchip_mem+0xff80182c>
  809860:	da802417 	ldw	r10,144(sp)
  809864:	1705883a 	add	r2,r2,fp
  809868:	47000115 	stw	fp,4(r8)
  80986c:	42800015 	stw	r10,0(r8)
  809870:	d8801c15 	stw	r2,112(sp)
  809874:	d9001b15 	stw	r4,108(sp)
  809878:	00c001c4 	movi	r3,7
  80987c:	19003616 	blt	r3,r4,809958 <___vfiprintf_internal_r+0xd68>
  809880:	42000204 	addi	r8,r8,8
  809884:	21000044 	addi	r4,r4,1
  809888:	003e5706 	br	8091e8 <__alt_mem_onchip_mem+0xff8011e8>
  80988c:	d9402117 	ldw	r5,132(sp)
  809890:	d9002017 	ldw	r4,128(sp)
  809894:	d9801a04 	addi	r6,sp,104
  809898:	d9c02b15 	stw	r7,172(sp)
  80989c:	db402a15 	stw	r13,168(sp)
  8098a0:	0808adc0 	call	808adc <__sprint_r.part.0>
  8098a4:	d9c02b17 	ldw	r7,172(sp)
  8098a8:	db402a17 	ldw	r13,168(sp)
  8098ac:	1000241e 	bne	r2,zero,809940 <___vfiprintf_internal_r+0xd50>
  8098b0:	d9401b17 	ldw	r5,108(sp)
  8098b4:	d8801c17 	ldw	r2,112(sp)
  8098b8:	d811883a 	mov	r8,sp
  8098bc:	29000044 	addi	r4,r5,1
  8098c0:	003fd806 	br	809824 <__alt_mem_onchip_mem+0xff801824>
  8098c4:	d9401b17 	ldw	r5,108(sp)
  8098c8:	00c02074 	movhi	r3,129
  8098cc:	18c7ef04 	addi	r3,r3,8124
  8098d0:	d8c02415 	stw	r3,144(sp)
  8098d4:	29400044 	addi	r5,r5,1
  8098d8:	d8c02417 	ldw	r3,144(sp)
  8098dc:	14c5883a 	add	r2,r2,r19
  8098e0:	44c00115 	stw	r19,4(r8)
  8098e4:	40c00015 	stw	r3,0(r8)
  8098e8:	d8801c15 	stw	r2,112(sp)
  8098ec:	d9401b15 	stw	r5,108(sp)
  8098f0:	00c001c4 	movi	r3,7
  8098f4:	1940070e 	bge	r3,r5,809914 <___vfiprintf_internal_r+0xd24>
  8098f8:	103e4826 	beq	r2,zero,80921c <__alt_mem_onchip_mem+0xff80121c>
  8098fc:	d9402117 	ldw	r5,132(sp)
  809900:	d9002017 	ldw	r4,128(sp)
  809904:	d9801a04 	addi	r6,sp,104
  809908:	0808adc0 	call	808adc <__sprint_r.part.0>
  80990c:	10000c1e 	bne	r2,zero,809940 <___vfiprintf_internal_r+0xd50>
  809910:	d8801c17 	ldw	r2,112(sp)
  809914:	8c80010e 	bge	r17,r18,80991c <___vfiprintf_internal_r+0xd2c>
  809918:	9023883a 	mov	r17,r18
  80991c:	da802317 	ldw	r10,140(sp)
  809920:	5455883a 	add	r10,r10,r17
  809924:	da802315 	stw	r10,140(sp)
  809928:	103e4126 	beq	r2,zero,809230 <__alt_mem_onchip_mem+0xff801230>
  80992c:	d9402117 	ldw	r5,132(sp)
  809930:	d9002017 	ldw	r4,128(sp)
  809934:	d9801a04 	addi	r6,sp,104
  809938:	0808adc0 	call	808adc <__sprint_r.part.0>
  80993c:	103e3c26 	beq	r2,zero,809230 <__alt_mem_onchip_mem+0xff801230>
  809940:	dd002117 	ldw	r20,132(sp)
  809944:	a080030b 	ldhu	r2,12(r20)
  809948:	1080100c 	andi	r2,r2,64
  80994c:	1001231e 	bne	r2,zero,809ddc <___vfiprintf_internal_r+0x11ec>
  809950:	d8802317 	ldw	r2,140(sp)
  809954:	003d7b06 	br	808f44 <__alt_mem_onchip_mem+0xff800f44>
  809958:	1000991e 	bne	r2,zero,809bc0 <___vfiprintf_internal_r+0xfd0>
  80995c:	00c00044 	movi	r3,1
  809960:	9805883a 	mov	r2,r19
  809964:	dd400015 	stw	r21,0(sp)
  809968:	dcc00115 	stw	r19,4(sp)
  80996c:	dcc01c15 	stw	r19,112(sp)
  809970:	d8c01b15 	stw	r3,108(sp)
  809974:	d811883a 	mov	r8,sp
  809978:	42000204 	addi	r8,r8,8
  80997c:	a2c0010c 	andi	r11,r20,4
  809980:	583fe426 	beq	r11,zero,809914 <__alt_mem_onchip_mem+0xff801914>
  809984:	8ca7c83a 	sub	r19,r17,r18
  809988:	04ffe20e 	bge	zero,r19,809914 <__alt_mem_onchip_mem+0xff801914>
  80998c:	01c00404 	movi	r7,16
  809990:	3cffcc0e 	bge	r7,r19,8098c4 <__alt_mem_onchip_mem+0xff8018c4>
  809994:	02802074 	movhi	r10,129
  809998:	5287ef04 	addi	r10,r10,8124
  80999c:	d9001b17 	ldw	r4,108(sp)
  8099a0:	da802415 	stw	r10,144(sp)
  8099a4:	382b883a 	mov	r21,r7
  8099a8:	050001c4 	movi	r20,7
  8099ac:	df002017 	ldw	fp,128(sp)
  8099b0:	00000506 	br	8099c8 <___vfiprintf_internal_r+0xdd8>
  8099b4:	21400084 	addi	r5,r4,2
  8099b8:	42000204 	addi	r8,r8,8
  8099bc:	1809883a 	mov	r4,r3
  8099c0:	9cfffc04 	addi	r19,r19,-16
  8099c4:	acffc40e 	bge	r21,r19,8098d8 <__alt_mem_onchip_mem+0xff8018d8>
  8099c8:	10800404 	addi	r2,r2,16
  8099cc:	20c00044 	addi	r3,r4,1
  8099d0:	45800015 	stw	r22,0(r8)
  8099d4:	45400115 	stw	r21,4(r8)
  8099d8:	d8801c15 	stw	r2,112(sp)
  8099dc:	d8c01b15 	stw	r3,108(sp)
  8099e0:	a0fff40e 	bge	r20,r3,8099b4 <__alt_mem_onchip_mem+0xff8019b4>
  8099e4:	1000041e 	bne	r2,zero,8099f8 <___vfiprintf_internal_r+0xe08>
  8099e8:	01400044 	movi	r5,1
  8099ec:	0009883a 	mov	r4,zero
  8099f0:	d811883a 	mov	r8,sp
  8099f4:	003ff206 	br	8099c0 <__alt_mem_onchip_mem+0xff8019c0>
  8099f8:	d9402117 	ldw	r5,132(sp)
  8099fc:	d9801a04 	addi	r6,sp,104
  809a00:	e009883a 	mov	r4,fp
  809a04:	0808adc0 	call	808adc <__sprint_r.part.0>
  809a08:	103fcd1e 	bne	r2,zero,809940 <__alt_mem_onchip_mem+0xff801940>
  809a0c:	d9001b17 	ldw	r4,108(sp)
  809a10:	d8801c17 	ldw	r2,112(sp)
  809a14:	d811883a 	mov	r8,sp
  809a18:	21400044 	addi	r5,r4,1
  809a1c:	003fe806 	br	8099c0 <__alt_mem_onchip_mem+0xff8019c0>
  809a20:	d9402117 	ldw	r5,132(sp)
  809a24:	d9002017 	ldw	r4,128(sp)
  809a28:	d9801a04 	addi	r6,sp,104
  809a2c:	d9c02b15 	stw	r7,172(sp)
  809a30:	db402a15 	stw	r13,168(sp)
  809a34:	0808adc0 	call	808adc <__sprint_r.part.0>
  809a38:	d9c02b17 	ldw	r7,172(sp)
  809a3c:	db402a17 	ldw	r13,168(sp)
  809a40:	103fbf1e 	bne	r2,zero,809940 <__alt_mem_onchip_mem+0xff801940>
  809a44:	d9401b17 	ldw	r5,108(sp)
  809a48:	d8801c17 	ldw	r2,112(sp)
  809a4c:	d811883a 	mov	r8,sp
  809a50:	29800044 	addi	r6,r5,1
  809a54:	003dc406 	br	809168 <__alt_mem_onchip_mem+0xff801168>
  809a58:	1000d21e 	bne	r2,zero,809da4 <___vfiprintf_internal_r+0x11b4>
  809a5c:	d8c01d87 	ldb	r3,118(sp)
  809a60:	18009526 	beq	r3,zero,809cb8 <___vfiprintf_internal_r+0x10c8>
  809a64:	00800044 	movi	r2,1
  809a68:	d8c01d84 	addi	r3,sp,118
  809a6c:	1009883a 	mov	r4,r2
  809a70:	d8c00015 	stw	r3,0(sp)
  809a74:	d8800115 	stw	r2,4(sp)
  809a78:	d811883a 	mov	r8,sp
  809a7c:	200b883a 	mov	r5,r4
  809a80:	42000204 	addi	r8,r8,8
  809a84:	21000044 	addi	r4,r4,1
  809a88:	003d9706 	br	8090e8 <__alt_mem_onchip_mem+0xff8010e8>
  809a8c:	d9001d04 	addi	r4,sp,116
  809a90:	00800084 	movi	r2,2
  809a94:	d9000015 	stw	r4,0(sp)
  809a98:	d8800115 	stw	r2,4(sp)
  809a9c:	1809883a 	mov	r4,r3
  809aa0:	d811883a 	mov	r8,sp
  809aa4:	200b883a 	mov	r5,r4
  809aa8:	42000204 	addi	r8,r8,8
  809aac:	21000044 	addi	r4,r4,1
  809ab0:	003f4e06 	br	8097ec <__alt_mem_onchip_mem+0xff8017ec>
  809ab4:	d8001d85 	stb	zero,118(sp)
  809ab8:	48005016 	blt	r9,zero,809bfc <___vfiprintf_internal_r+0x100c>
  809abc:	00ffdfc4 	movi	r3,-129
  809ac0:	94c4b03a 	or	r2,r18,r19
  809ac4:	a0e8703a 	and	r20,r20,r3
  809ac8:	103d4426 	beq	r2,zero,808fdc <__alt_mem_onchip_mem+0xff800fdc>
  809acc:	0039883a 	mov	fp,zero
  809ad0:	d9002617 	ldw	r4,152(sp)
  809ad4:	dd401a04 	addi	r21,sp,104
  809ad8:	908003cc 	andi	r2,r18,15
  809adc:	9806973a 	slli	r3,r19,28
  809ae0:	2085883a 	add	r2,r4,r2
  809ae4:	9024d13a 	srli	r18,r18,4
  809ae8:	10800003 	ldbu	r2,0(r2)
  809aec:	9826d13a 	srli	r19,r19,4
  809af0:	ad7fffc4 	addi	r21,r21,-1
  809af4:	1ca4b03a 	or	r18,r3,r18
  809af8:	a8800005 	stb	r2,0(r21)
  809afc:	94c4b03a 	or	r2,r18,r19
  809b00:	103ff51e 	bne	r2,zero,809ad8 <__alt_mem_onchip_mem+0xff801ad8>
  809b04:	003e5906 	br	80946c <__alt_mem_onchip_mem+0xff80146c>
  809b08:	d9402117 	ldw	r5,132(sp)
  809b0c:	d9002017 	ldw	r4,128(sp)
  809b10:	d9801a04 	addi	r6,sp,104
  809b14:	0808adc0 	call	808adc <__sprint_r.part.0>
  809b18:	103f891e 	bne	r2,zero,809940 <__alt_mem_onchip_mem+0xff801940>
  809b1c:	d8801c17 	ldw	r2,112(sp)
  809b20:	d811883a 	mov	r8,sp
  809b24:	003f9506 	br	80997c <__alt_mem_onchip_mem+0xff80197c>
  809b28:	d9402117 	ldw	r5,132(sp)
  809b2c:	d9002017 	ldw	r4,128(sp)
  809b30:	d9801a04 	addi	r6,sp,104
  809b34:	0808adc0 	call	808adc <__sprint_r.part.0>
  809b38:	103f811e 	bne	r2,zero,809940 <__alt_mem_onchip_mem+0xff801940>
  809b3c:	d811883a 	mov	r8,sp
  809b40:	003ced06 	br	808ef8 <__alt_mem_onchip_mem+0xff800ef8>
  809b44:	d9402117 	ldw	r5,132(sp)
  809b48:	d9002017 	ldw	r4,128(sp)
  809b4c:	d9801a04 	addi	r6,sp,104
  809b50:	da402c15 	stw	r9,176(sp)
  809b54:	db802a15 	stw	r14,168(sp)
  809b58:	0808adc0 	call	808adc <__sprint_r.part.0>
  809b5c:	da402c17 	ldw	r9,176(sp)
  809b60:	db802a17 	ldw	r14,168(sp)
  809b64:	103f761e 	bne	r2,zero,809940 <__alt_mem_onchip_mem+0xff801940>
  809b68:	d9401b17 	ldw	r5,108(sp)
  809b6c:	d8801c17 	ldw	r2,112(sp)
  809b70:	d811883a 	mov	r8,sp
  809b74:	29000044 	addi	r4,r5,1
  809b78:	003d5b06 	br	8090e8 <__alt_mem_onchip_mem+0xff8010e8>
  809b7c:	d9402117 	ldw	r5,132(sp)
  809b80:	d9002017 	ldw	r4,128(sp)
  809b84:	d9801a04 	addi	r6,sp,104
  809b88:	da402c15 	stw	r9,176(sp)
  809b8c:	0808adc0 	call	808adc <__sprint_r.part.0>
  809b90:	da402c17 	ldw	r9,176(sp)
  809b94:	103f6a1e 	bne	r2,zero,809940 <__alt_mem_onchip_mem+0xff801940>
  809b98:	d9401b17 	ldw	r5,108(sp)
  809b9c:	d8801c17 	ldw	r2,112(sp)
  809ba0:	d811883a 	mov	r8,sp
  809ba4:	29000044 	addi	r4,r5,1
  809ba8:	003f1006 	br	8097ec <__alt_mem_onchip_mem+0xff8017ec>
  809bac:	1000c31e 	bne	r2,zero,809ebc <___vfiprintf_internal_r+0x12cc>
  809bb0:	01000044 	movi	r4,1
  809bb4:	000b883a 	mov	r5,zero
  809bb8:	d811883a 	mov	r8,sp
  809bbc:	003f0d06 	br	8097f4 <__alt_mem_onchip_mem+0xff8017f4>
  809bc0:	d9402117 	ldw	r5,132(sp)
  809bc4:	d9002017 	ldw	r4,128(sp)
  809bc8:	d9801a04 	addi	r6,sp,104
  809bcc:	0808adc0 	call	808adc <__sprint_r.part.0>
  809bd0:	103f5b1e 	bne	r2,zero,809940 <__alt_mem_onchip_mem+0xff801940>
  809bd4:	d9001b17 	ldw	r4,108(sp)
  809bd8:	d8801c17 	ldw	r2,112(sp)
  809bdc:	d811883a 	mov	r8,sp
  809be0:	21000044 	addi	r4,r4,1
  809be4:	003d8006 	br	8091e8 <__alt_mem_onchip_mem+0xff8011e8>
  809be8:	01002074 	movhi	r4,129
  809bec:	21078b04 	addi	r4,r4,7724
  809bf0:	d9002615 	stw	r4,152(sp)
  809bf4:	d8c02215 	stw	r3,136(sp)
  809bf8:	1029883a 	mov	r20,r2
  809bfc:	94c4b03a 	or	r2,r18,r19
  809c00:	103fb21e 	bne	r2,zero,809acc <__alt_mem_onchip_mem+0xff801acc>
  809c04:	0039883a 	mov	fp,zero
  809c08:	00800084 	movi	r2,2
  809c0c:	003e6b06 	br	8095bc <__alt_mem_onchip_mem+0xff8015bc>
  809c10:	da802217 	ldw	r10,136(sp)
  809c14:	d8001d85 	stb	zero,118(sp)
  809c18:	0027883a 	mov	r19,zero
  809c1c:	50800104 	addi	r2,r10,4
  809c20:	54800017 	ldw	r18,0(r10)
  809c24:	483e6016 	blt	r9,zero,8095a8 <__alt_mem_onchip_mem+0xff8015a8>
  809c28:	00ffdfc4 	movi	r3,-129
  809c2c:	d8802215 	stw	r2,136(sp)
  809c30:	a0e8703a 	and	r20,r20,r3
  809c34:	0039883a 	mov	fp,zero
  809c38:	903ebb26 	beq	r18,zero,809728 <__alt_mem_onchip_mem+0xff801728>
  809c3c:	00800244 	movi	r2,9
  809c40:	14bdee36 	bltu	r2,r18,8093fc <__alt_mem_onchip_mem+0xff8013fc>
  809c44:	003eba06 	br	809730 <__alt_mem_onchip_mem+0xff801730>
  809c48:	00800c04 	movi	r2,48
  809c4c:	d8c01d45 	stb	r3,117(sp)
  809c50:	d8801d05 	stb	r2,116(sp)
  809c54:	d8001d85 	stb	zero,118(sp)
  809c58:	a0c00094 	ori	r3,r20,2
  809c5c:	4800a916 	blt	r9,zero,809f04 <___vfiprintf_internal_r+0x1314>
  809c60:	00bfdfc4 	movi	r2,-129
  809c64:	a096703a 	and	r11,r20,r2
  809c68:	5d000094 	ori	r20,r11,2
  809c6c:	0039883a 	mov	fp,zero
  809c70:	003f9706 	br	809ad0 <__alt_mem_onchip_mem+0xff801ad0>
  809c74:	8025883a 	mov	r18,r16
  809c78:	003c2e06 	br	808d34 <__alt_mem_onchip_mem+0xff800d34>
  809c7c:	00802074 	movhi	r2,129
  809c80:	10878b04 	addi	r2,r2,7724
  809c84:	0039883a 	mov	fp,zero
  809c88:	d8802615 	stw	r2,152(sp)
  809c8c:	003f9006 	br	809ad0 <__alt_mem_onchip_mem+0xff801ad0>
  809c90:	04a5c83a 	sub	r18,zero,r18
  809c94:	07000b44 	movi	fp,45
  809c98:	9004c03a 	cmpne	r2,r18,zero
  809c9c:	04e7c83a 	sub	r19,zero,r19
  809ca0:	df001d85 	stb	fp,118(sp)
  809ca4:	98a7c83a 	sub	r19,r19,r2
  809ca8:	48009f16 	blt	r9,zero,809f28 <___vfiprintf_internal_r+0x1338>
  809cac:	00bfdfc4 	movi	r2,-129
  809cb0:	a0a8703a 	and	r20,r20,r2
  809cb4:	003dd006 	br	8093f8 <__alt_mem_onchip_mem+0xff8013f8>
  809cb8:	70004c26 	beq	r14,zero,809dec <___vfiprintf_internal_r+0x11fc>
  809cbc:	00800084 	movi	r2,2
  809cc0:	d8c01d04 	addi	r3,sp,116
  809cc4:	d8c00015 	stw	r3,0(sp)
  809cc8:	d8800115 	stw	r2,4(sp)
  809ccc:	01000044 	movi	r4,1
  809cd0:	d811883a 	mov	r8,sp
  809cd4:	003f7306 	br	809aa4 <__alt_mem_onchip_mem+0xff801aa4>
  809cd8:	a080100c 	andi	r2,r20,64
  809cdc:	da802217 	ldw	r10,136(sp)
  809ce0:	103e0626 	beq	r2,zero,8094fc <__alt_mem_onchip_mem+0xff8014fc>
  809ce4:	5480000f 	ldh	r18,0(r10)
  809ce8:	52800104 	addi	r10,r10,4
  809cec:	da802215 	stw	r10,136(sp)
  809cf0:	9027d7fa 	srai	r19,r18,31
  809cf4:	9805883a 	mov	r2,r19
  809cf8:	003db806 	br	8093dc <__alt_mem_onchip_mem+0xff8013dc>
  809cfc:	a080040c 	andi	r2,r20,16
  809d00:	1000091e 	bne	r2,zero,809d28 <___vfiprintf_internal_r+0x1138>
  809d04:	a2c0100c 	andi	r11,r20,64
  809d08:	58000726 	beq	r11,zero,809d28 <___vfiprintf_internal_r+0x1138>
  809d0c:	da802217 	ldw	r10,136(sp)
  809d10:	50800017 	ldw	r2,0(r10)
  809d14:	52800104 	addi	r10,r10,4
  809d18:	da802215 	stw	r10,136(sp)
  809d1c:	da802317 	ldw	r10,140(sp)
  809d20:	1280000d 	sth	r10,0(r2)
  809d24:	003be706 	br	808cc4 <__alt_mem_onchip_mem+0xff800cc4>
  809d28:	da802217 	ldw	r10,136(sp)
  809d2c:	50800017 	ldw	r2,0(r10)
  809d30:	52800104 	addi	r10,r10,4
  809d34:	da802215 	stw	r10,136(sp)
  809d38:	da802317 	ldw	r10,140(sp)
  809d3c:	12800015 	stw	r10,0(r2)
  809d40:	003be006 	br	808cc4 <__alt_mem_onchip_mem+0xff800cc4>
  809d44:	a080100c 	andi	r2,r20,64
  809d48:	da802217 	ldw	r10,136(sp)
  809d4c:	10003026 	beq	r2,zero,809e10 <___vfiprintf_internal_r+0x1220>
  809d50:	5480000b 	ldhu	r18,0(r10)
  809d54:	52800104 	addi	r10,r10,4
  809d58:	0027883a 	mov	r19,zero
  809d5c:	da802215 	stw	r10,136(sp)
  809d60:	003d8006 	br	809364 <__alt_mem_onchip_mem+0xff801364>
  809d64:	80c00007 	ldb	r3,0(r16)
  809d68:	003c0006 	br	808d6c <__alt_mem_onchip_mem+0xff800d6c>
  809d6c:	a080100c 	andi	r2,r20,64
  809d70:	d8001d85 	stb	zero,118(sp)
  809d74:	da802217 	ldw	r10,136(sp)
  809d78:	1000201e 	bne	r2,zero,809dfc <___vfiprintf_internal_r+0x120c>
  809d7c:	50800104 	addi	r2,r10,4
  809d80:	54800017 	ldw	r18,0(r10)
  809d84:	0027883a 	mov	r19,zero
  809d88:	483def0e 	bge	r9,zero,809548 <__alt_mem_onchip_mem+0xff801548>
  809d8c:	94c6b03a 	or	r3,r18,r19
  809d90:	d8802215 	stw	r2,136(sp)
  809d94:	183d4e1e 	bne	r3,zero,8092d0 <__alt_mem_onchip_mem+0xff8012d0>
  809d98:	0039883a 	mov	fp,zero
  809d9c:	0005883a 	mov	r2,zero
  809da0:	003e0606 	br	8095bc <__alt_mem_onchip_mem+0xff8015bc>
  809da4:	d9402117 	ldw	r5,132(sp)
  809da8:	d9002017 	ldw	r4,128(sp)
  809dac:	d9801a04 	addi	r6,sp,104
  809db0:	da402c15 	stw	r9,176(sp)
  809db4:	db802a15 	stw	r14,168(sp)
  809db8:	0808adc0 	call	808adc <__sprint_r.part.0>
  809dbc:	da402c17 	ldw	r9,176(sp)
  809dc0:	db802a17 	ldw	r14,168(sp)
  809dc4:	103ede1e 	bne	r2,zero,809940 <__alt_mem_onchip_mem+0xff801940>
  809dc8:	d9401b17 	ldw	r5,108(sp)
  809dcc:	d8801c17 	ldw	r2,112(sp)
  809dd0:	d811883a 	mov	r8,sp
  809dd4:	29000044 	addi	r4,r5,1
  809dd8:	003e7406 	br	8097ac <__alt_mem_onchip_mem+0xff8017ac>
  809ddc:	00bfffc4 	movi	r2,-1
  809de0:	003c5806 	br	808f44 <__alt_mem_onchip_mem+0xff800f44>
  809de4:	d811883a 	mov	r8,sp
  809de8:	003ee806 	br	80998c <__alt_mem_onchip_mem+0xff80198c>
  809dec:	000b883a 	mov	r5,zero
  809df0:	01000044 	movi	r4,1
  809df4:	d811883a 	mov	r8,sp
  809df8:	003e7c06 	br	8097ec <__alt_mem_onchip_mem+0xff8017ec>
  809dfc:	50800104 	addi	r2,r10,4
  809e00:	5480000b 	ldhu	r18,0(r10)
  809e04:	0027883a 	mov	r19,zero
  809e08:	483dcf0e 	bge	r9,zero,809548 <__alt_mem_onchip_mem+0xff801548>
  809e0c:	003fdf06 	br	809d8c <__alt_mem_onchip_mem+0xff801d8c>
  809e10:	54800017 	ldw	r18,0(r10)
  809e14:	52800104 	addi	r10,r10,4
  809e18:	0027883a 	mov	r19,zero
  809e1c:	da802215 	stw	r10,136(sp)
  809e20:	003d5006 	br	809364 <__alt_mem_onchip_mem+0xff801364>
  809e24:	50800104 	addi	r2,r10,4
  809e28:	5480000b 	ldhu	r18,0(r10)
  809e2c:	0027883a 	mov	r19,zero
  809e30:	483f7d0e 	bge	r9,zero,809c28 <__alt_mem_onchip_mem+0xff801c28>
  809e34:	003ddc06 	br	8095a8 <__alt_mem_onchip_mem+0xff8015a8>
  809e38:	d8c02215 	stw	r3,136(sp)
  809e3c:	0039883a 	mov	fp,zero
  809e40:	003ddb06 	br	8095b0 <__alt_mem_onchip_mem+0xff8015b0>
  809e44:	02802074 	movhi	r10,129
  809e48:	5287eb04 	addi	r10,r10,8108
  809e4c:	da802415 	stw	r10,144(sp)
  809e50:	003e8306 	br	809860 <__alt_mem_onchip_mem+0xff801860>
  809e54:	d8801c17 	ldw	r2,112(sp)
  809e58:	dd002117 	ldw	r20,132(sp)
  809e5c:	103eb926 	beq	r2,zero,809944 <__alt_mem_onchip_mem+0xff801944>
  809e60:	d9002017 	ldw	r4,128(sp)
  809e64:	d9801a04 	addi	r6,sp,104
  809e68:	a00b883a 	mov	r5,r20
  809e6c:	0808adc0 	call	808adc <__sprint_r.part.0>
  809e70:	003eb406 	br	809944 <__alt_mem_onchip_mem+0xff801944>
  809e74:	80c00043 	ldbu	r3,1(r16)
  809e78:	a5000814 	ori	r20,r20,32
  809e7c:	84000044 	addi	r16,r16,1
  809e80:	18c03fcc 	andi	r3,r3,255
  809e84:	18c0201c 	xori	r3,r3,128
  809e88:	18ffe004 	addi	r3,r3,-128
  809e8c:	003bb706 	br	808d6c <__alt_mem_onchip_mem+0xff800d6c>
  809e90:	a809883a 	mov	r4,r21
  809e94:	d8c02a15 	stw	r3,168(sp)
  809e98:	da002b15 	stw	r8,172(sp)
  809e9c:	0801f500 	call	801f50 <strlen>
  809ea0:	d8c02a17 	ldw	r3,168(sp)
  809ea4:	1027883a 	mov	r19,r2
  809ea8:	df001d83 	ldbu	fp,118(sp)
  809eac:	d8c02215 	stw	r3,136(sp)
  809eb0:	0013883a 	mov	r9,zero
  809eb4:	da002b17 	ldw	r8,172(sp)
  809eb8:	003c4d06 	br	808ff0 <__alt_mem_onchip_mem+0xff800ff0>
  809ebc:	d9402117 	ldw	r5,132(sp)
  809ec0:	d9002017 	ldw	r4,128(sp)
  809ec4:	d9801a04 	addi	r6,sp,104
  809ec8:	da402c15 	stw	r9,176(sp)
  809ecc:	0808adc0 	call	808adc <__sprint_r.part.0>
  809ed0:	da402c17 	ldw	r9,176(sp)
  809ed4:	103e9a1e 	bne	r2,zero,809940 <__alt_mem_onchip_mem+0xff801940>
  809ed8:	d9401b17 	ldw	r5,108(sp)
  809edc:	d8801c17 	ldw	r2,112(sp)
  809ee0:	d811883a 	mov	r8,sp
  809ee4:	29000044 	addi	r4,r5,1
  809ee8:	003e4206 	br	8097f4 <__alt_mem_onchip_mem+0xff8017f4>
  809eec:	d9401b17 	ldw	r5,108(sp)
  809ef0:	01002074 	movhi	r4,129
  809ef4:	2107ef04 	addi	r4,r4,8124
  809ef8:	d9002415 	stw	r4,144(sp)
  809efc:	29400044 	addi	r5,r5,1
  809f00:	003c6d06 	br	8090b8 <__alt_mem_onchip_mem+0xff8010b8>
  809f04:	0039883a 	mov	fp,zero
  809f08:	00800084 	movi	r2,2
  809f0c:	10803fcc 	andi	r2,r2,255
  809f10:	01000044 	movi	r4,1
  809f14:	11001e26 	beq	r2,r4,809f90 <___vfiprintf_internal_r+0x13a0>
  809f18:	01000084 	movi	r4,2
  809f1c:	11001e1e 	bne	r2,r4,809f98 <___vfiprintf_internal_r+0x13a8>
  809f20:	1829883a 	mov	r20,r3
  809f24:	003eea06 	br	809ad0 <__alt_mem_onchip_mem+0xff801ad0>
  809f28:	a007883a 	mov	r3,r20
  809f2c:	00800044 	movi	r2,1
  809f30:	003ff606 	br	809f0c <__alt_mem_onchip_mem+0xff801f0c>
  809f34:	00800184 	movi	r2,6
  809f38:	1240012e 	bgeu	r2,r9,809f40 <___vfiprintf_internal_r+0x1350>
  809f3c:	1013883a 	mov	r9,r2
  809f40:	4827883a 	mov	r19,r9
  809f44:	4825883a 	mov	r18,r9
  809f48:	48001516 	blt	r9,zero,809fa0 <___vfiprintf_internal_r+0x13b0>
  809f4c:	05402074 	movhi	r21,129
  809f50:	d8c02215 	stw	r3,136(sp)
  809f54:	ad479004 	addi	r21,r21,7744
  809f58:	003d1406 	br	8093ac <__alt_mem_onchip_mem+0xff8013ac>
  809f5c:	02802074 	movhi	r10,129
  809f60:	5287eb04 	addi	r10,r10,8108
  809f64:	da802415 	stw	r10,144(sp)
  809f68:	200d883a 	mov	r6,r4
  809f6c:	003c9106 	br	8091b4 <__alt_mem_onchip_mem+0xff8011b4>
  809f70:	5021883a 	mov	r16,r10
  809f74:	0013883a 	mov	r9,zero
  809f78:	003b7d06 	br	808d70 <__alt_mem_onchip_mem+0xff800d70>
  809f7c:	4827883a 	mov	r19,r9
  809f80:	df001d83 	ldbu	fp,118(sp)
  809f84:	d8c02215 	stw	r3,136(sp)
  809f88:	0013883a 	mov	r9,zero
  809f8c:	003c1806 	br	808ff0 <__alt_mem_onchip_mem+0xff800ff0>
  809f90:	1829883a 	mov	r20,r3
  809f94:	003d1806 	br	8093f8 <__alt_mem_onchip_mem+0xff8013f8>
  809f98:	1829883a 	mov	r20,r3
  809f9c:	003ccd06 	br	8092d4 <__alt_mem_onchip_mem+0xff8012d4>
  809fa0:	0025883a 	mov	r18,zero
  809fa4:	003fe906 	br	809f4c <__alt_mem_onchip_mem+0xff801f4c>
  809fa8:	d8802217 	ldw	r2,136(sp)
  809fac:	80c00043 	ldbu	r3,1(r16)
  809fb0:	5021883a 	mov	r16,r10
  809fb4:	12400017 	ldw	r9,0(r2)
  809fb8:	10800104 	addi	r2,r2,4
  809fbc:	d8802215 	stw	r2,136(sp)
  809fc0:	483faf0e 	bge	r9,zero,809e80 <__alt_mem_onchip_mem+0xff801e80>
  809fc4:	18c03fcc 	andi	r3,r3,255
  809fc8:	18c0201c 	xori	r3,r3,128
  809fcc:	027fffc4 	movi	r9,-1
  809fd0:	18ffe004 	addi	r3,r3,-128
  809fd4:	003b6506 	br	808d6c <__alt_mem_onchip_mem+0xff800d6c>
  809fd8:	d9c01d85 	stb	r7,118(sp)
  809fdc:	003ca006 	br	809260 <__alt_mem_onchip_mem+0xff801260>
  809fe0:	d9c01d85 	stb	r7,118(sp)
  809fe4:	003cad06 	br	80929c <__alt_mem_onchip_mem+0xff80129c>
  809fe8:	d9c01d85 	stb	r7,118(sp)
  809fec:	003d7d06 	br	8095e4 <__alt_mem_onchip_mem+0xff8015e4>
  809ff0:	d9c01d85 	stb	r7,118(sp)
  809ff4:	003d5f06 	br	809574 <__alt_mem_onchip_mem+0xff801574>
  809ff8:	a080004c 	andi	r2,r20,1
  809ffc:	0039883a 	mov	fp,zero
  80a000:	10000526 	beq	r2,zero,80a018 <___vfiprintf_internal_r+0x1428>
  80a004:	00800c04 	movi	r2,48
  80a008:	d88019c5 	stb	r2,103(sp)
  80a00c:	dcc02717 	ldw	r19,156(sp)
  80a010:	dd4019c4 	addi	r21,sp,103
  80a014:	003bf606 	br	808ff0 <__alt_mem_onchip_mem+0xff800ff0>
  80a018:	0027883a 	mov	r19,zero
  80a01c:	dd401a04 	addi	r21,sp,104
  80a020:	003bf306 	br	808ff0 <__alt_mem_onchip_mem+0xff800ff0>
  80a024:	d9c01d85 	stb	r7,118(sp)
  80a028:	003dc806 	br	80974c <__alt_mem_onchip_mem+0xff80174c>
  80a02c:	d9c01d85 	stb	r7,118(sp)
  80a030:	003d3a06 	br	80951c <__alt_mem_onchip_mem+0xff80151c>
  80a034:	d9c01d85 	stb	r7,118(sp)
  80a038:	003d2a06 	br	8094e4 <__alt_mem_onchip_mem+0xff8014e4>
  80a03c:	d9c01d85 	stb	r7,118(sp)
  80a040:	003cde06 	br	8093bc <__alt_mem_onchip_mem+0xff8013bc>
  80a044:	d9c01d85 	stb	r7,118(sp)
  80a048:	003cbc06 	br	80933c <__alt_mem_onchip_mem+0xff80133c>

0080a04c <__vfiprintf_internal>:
  80a04c:	00802074 	movhi	r2,129
  80a050:	10900904 	addi	r2,r2,16420
  80a054:	300f883a 	mov	r7,r6
  80a058:	280d883a 	mov	r6,r5
  80a05c:	200b883a 	mov	r5,r4
  80a060:	11000017 	ldw	r4,0(r2)
  80a064:	0808bf01 	jmpi	808bf0 <___vfiprintf_internal_r>

0080a068 <__sbprintf>:
  80a068:	2880030b 	ldhu	r2,12(r5)
  80a06c:	2ac01917 	ldw	r11,100(r5)
  80a070:	2a80038b 	ldhu	r10,14(r5)
  80a074:	2a400717 	ldw	r9,28(r5)
  80a078:	2a000917 	ldw	r8,36(r5)
  80a07c:	defee204 	addi	sp,sp,-1144
  80a080:	00c10004 	movi	r3,1024
  80a084:	dc011a15 	stw	r16,1128(sp)
  80a088:	10bfff4c 	andi	r2,r2,65533
  80a08c:	2821883a 	mov	r16,r5
  80a090:	d8cb883a 	add	r5,sp,r3
  80a094:	dc811c15 	stw	r18,1136(sp)
  80a098:	dc411b15 	stw	r17,1132(sp)
  80a09c:	dfc11d15 	stw	ra,1140(sp)
  80a0a0:	2025883a 	mov	r18,r4
  80a0a4:	d881030d 	sth	r2,1036(sp)
  80a0a8:	dac11915 	stw	r11,1124(sp)
  80a0ac:	da81038d 	sth	r10,1038(sp)
  80a0b0:	da410715 	stw	r9,1052(sp)
  80a0b4:	da010915 	stw	r8,1060(sp)
  80a0b8:	dec10015 	stw	sp,1024(sp)
  80a0bc:	dec10415 	stw	sp,1040(sp)
  80a0c0:	d8c10215 	stw	r3,1032(sp)
  80a0c4:	d8c10515 	stw	r3,1044(sp)
  80a0c8:	d8010615 	stw	zero,1048(sp)
  80a0cc:	0808bf00 	call	808bf0 <___vfiprintf_internal_r>
  80a0d0:	1023883a 	mov	r17,r2
  80a0d4:	10000416 	blt	r2,zero,80a0e8 <__sbprintf+0x80>
  80a0d8:	d9410004 	addi	r5,sp,1024
  80a0dc:	9009883a 	mov	r4,r18
  80a0e0:	0805f640 	call	805f64 <_fflush_r>
  80a0e4:	10000d1e 	bne	r2,zero,80a11c <__sbprintf+0xb4>
  80a0e8:	d881030b 	ldhu	r2,1036(sp)
  80a0ec:	1080100c 	andi	r2,r2,64
  80a0f0:	10000326 	beq	r2,zero,80a100 <__sbprintf+0x98>
  80a0f4:	8080030b 	ldhu	r2,12(r16)
  80a0f8:	10801014 	ori	r2,r2,64
  80a0fc:	8080030d 	sth	r2,12(r16)
  80a100:	8805883a 	mov	r2,r17
  80a104:	dfc11d17 	ldw	ra,1140(sp)
  80a108:	dc811c17 	ldw	r18,1136(sp)
  80a10c:	dc411b17 	ldw	r17,1132(sp)
  80a110:	dc011a17 	ldw	r16,1128(sp)
  80a114:	dec11e04 	addi	sp,sp,1144
  80a118:	f800283a 	ret
  80a11c:	047fffc4 	movi	r17,-1
  80a120:	003ff106 	br	80a0e8 <__alt_mem_onchip_mem+0xff8020e8>

0080a124 <_calloc_r>:
  80a124:	298b383a 	mul	r5,r5,r6
  80a128:	defffe04 	addi	sp,sp,-8
  80a12c:	dfc00115 	stw	ra,4(sp)
  80a130:	dc000015 	stw	r16,0(sp)
  80a134:	08011680 	call	801168 <_malloc_r>
  80a138:	10002926 	beq	r2,zero,80a1e0 <_calloc_r+0xbc>
  80a13c:	11bfff17 	ldw	r6,-4(r2)
  80a140:	1021883a 	mov	r16,r2
  80a144:	00bfff04 	movi	r2,-4
  80a148:	308c703a 	and	r6,r6,r2
  80a14c:	00c00904 	movi	r3,36
  80a150:	308d883a 	add	r6,r6,r2
  80a154:	19801636 	bltu	r3,r6,80a1b0 <_calloc_r+0x8c>
  80a158:	008004c4 	movi	r2,19
  80a15c:	11800b2e 	bgeu	r2,r6,80a18c <_calloc_r+0x68>
  80a160:	80000015 	stw	zero,0(r16)
  80a164:	80000115 	stw	zero,4(r16)
  80a168:	008006c4 	movi	r2,27
  80a16c:	11801a2e 	bgeu	r2,r6,80a1d8 <_calloc_r+0xb4>
  80a170:	80000215 	stw	zero,8(r16)
  80a174:	80000315 	stw	zero,12(r16)
  80a178:	30c0151e 	bne	r6,r3,80a1d0 <_calloc_r+0xac>
  80a17c:	80000415 	stw	zero,16(r16)
  80a180:	80800604 	addi	r2,r16,24
  80a184:	80000515 	stw	zero,20(r16)
  80a188:	00000106 	br	80a190 <_calloc_r+0x6c>
  80a18c:	8005883a 	mov	r2,r16
  80a190:	10000015 	stw	zero,0(r2)
  80a194:	10000115 	stw	zero,4(r2)
  80a198:	10000215 	stw	zero,8(r2)
  80a19c:	8005883a 	mov	r2,r16
  80a1a0:	dfc00117 	ldw	ra,4(sp)
  80a1a4:	dc000017 	ldw	r16,0(sp)
  80a1a8:	dec00204 	addi	sp,sp,8
  80a1ac:	f800283a 	ret
  80a1b0:	000b883a 	mov	r5,zero
  80a1b4:	8009883a 	mov	r4,r16
  80a1b8:	08019740 	call	801974 <memset>
  80a1bc:	8005883a 	mov	r2,r16
  80a1c0:	dfc00117 	ldw	ra,4(sp)
  80a1c4:	dc000017 	ldw	r16,0(sp)
  80a1c8:	dec00204 	addi	sp,sp,8
  80a1cc:	f800283a 	ret
  80a1d0:	80800404 	addi	r2,r16,16
  80a1d4:	003fee06 	br	80a190 <__alt_mem_onchip_mem+0xff802190>
  80a1d8:	80800204 	addi	r2,r16,8
  80a1dc:	003fec06 	br	80a190 <__alt_mem_onchip_mem+0xff802190>
  80a1e0:	0005883a 	mov	r2,zero
  80a1e4:	003fee06 	br	80a1a0 <__alt_mem_onchip_mem+0xff8021a0>

0080a1e8 <_fclose_r>:
  80a1e8:	28003926 	beq	r5,zero,80a2d0 <_fclose_r+0xe8>
  80a1ec:	defffc04 	addi	sp,sp,-16
  80a1f0:	dc400115 	stw	r17,4(sp)
  80a1f4:	dc000015 	stw	r16,0(sp)
  80a1f8:	dfc00315 	stw	ra,12(sp)
  80a1fc:	dc800215 	stw	r18,8(sp)
  80a200:	2023883a 	mov	r17,r4
  80a204:	2821883a 	mov	r16,r5
  80a208:	20000226 	beq	r4,zero,80a214 <_fclose_r+0x2c>
  80a20c:	20800e17 	ldw	r2,56(r4)
  80a210:	10002726 	beq	r2,zero,80a2b0 <_fclose_r+0xc8>
  80a214:	8080030f 	ldh	r2,12(r16)
  80a218:	1000071e 	bne	r2,zero,80a238 <_fclose_r+0x50>
  80a21c:	0005883a 	mov	r2,zero
  80a220:	dfc00317 	ldw	ra,12(sp)
  80a224:	dc800217 	ldw	r18,8(sp)
  80a228:	dc400117 	ldw	r17,4(sp)
  80a22c:	dc000017 	ldw	r16,0(sp)
  80a230:	dec00404 	addi	sp,sp,16
  80a234:	f800283a 	ret
  80a238:	800b883a 	mov	r5,r16
  80a23c:	8809883a 	mov	r4,r17
  80a240:	0805d480 	call	805d48 <__sflush_r>
  80a244:	1025883a 	mov	r18,r2
  80a248:	80800b17 	ldw	r2,44(r16)
  80a24c:	10000426 	beq	r2,zero,80a260 <_fclose_r+0x78>
  80a250:	81400717 	ldw	r5,28(r16)
  80a254:	8809883a 	mov	r4,r17
  80a258:	103ee83a 	callr	r2
  80a25c:	10001616 	blt	r2,zero,80a2b8 <_fclose_r+0xd0>
  80a260:	8080030b 	ldhu	r2,12(r16)
  80a264:	1080200c 	andi	r2,r2,128
  80a268:	1000151e 	bne	r2,zero,80a2c0 <_fclose_r+0xd8>
  80a26c:	81400c17 	ldw	r5,48(r16)
  80a270:	28000526 	beq	r5,zero,80a288 <_fclose_r+0xa0>
  80a274:	80801004 	addi	r2,r16,64
  80a278:	28800226 	beq	r5,r2,80a284 <_fclose_r+0x9c>
  80a27c:	8809883a 	mov	r4,r17
  80a280:	08065600 	call	806560 <_free_r>
  80a284:	80000c15 	stw	zero,48(r16)
  80a288:	81401117 	ldw	r5,68(r16)
  80a28c:	28000326 	beq	r5,zero,80a29c <_fclose_r+0xb4>
  80a290:	8809883a 	mov	r4,r17
  80a294:	08065600 	call	806560 <_free_r>
  80a298:	80001115 	stw	zero,68(r16)
  80a29c:	08063500 	call	806350 <__sfp_lock_acquire>
  80a2a0:	8000030d 	sth	zero,12(r16)
  80a2a4:	08063540 	call	806354 <__sfp_lock_release>
  80a2a8:	9005883a 	mov	r2,r18
  80a2ac:	003fdc06 	br	80a220 <__alt_mem_onchip_mem+0xff802220>
  80a2b0:	08063400 	call	806340 <__sinit>
  80a2b4:	003fd706 	br	80a214 <__alt_mem_onchip_mem+0xff802214>
  80a2b8:	04bfffc4 	movi	r18,-1
  80a2bc:	003fe806 	br	80a260 <__alt_mem_onchip_mem+0xff802260>
  80a2c0:	81400417 	ldw	r5,16(r16)
  80a2c4:	8809883a 	mov	r4,r17
  80a2c8:	08065600 	call	806560 <_free_r>
  80a2cc:	003fe706 	br	80a26c <__alt_mem_onchip_mem+0xff80226c>
  80a2d0:	0005883a 	mov	r2,zero
  80a2d4:	f800283a 	ret

0080a2d8 <fclose>:
  80a2d8:	00802074 	movhi	r2,129
  80a2dc:	10900904 	addi	r2,r2,16420
  80a2e0:	200b883a 	mov	r5,r4
  80a2e4:	11000017 	ldw	r4,0(r2)
  80a2e8:	080a1e81 	jmpi	80a1e8 <_fclose_r>

0080a2ec <__fputwc>:
  80a2ec:	defff804 	addi	sp,sp,-32
  80a2f0:	dcc00415 	stw	r19,16(sp)
  80a2f4:	dc800315 	stw	r18,12(sp)
  80a2f8:	dc000115 	stw	r16,4(sp)
  80a2fc:	dfc00715 	stw	ra,28(sp)
  80a300:	dd400615 	stw	r21,24(sp)
  80a304:	dd000515 	stw	r20,20(sp)
  80a308:	dc400215 	stw	r17,8(sp)
  80a30c:	2027883a 	mov	r19,r4
  80a310:	2825883a 	mov	r18,r5
  80a314:	3021883a 	mov	r16,r6
  80a318:	0806f900 	call	806f90 <__locale_mb_cur_max>
  80a31c:	00c00044 	movi	r3,1
  80a320:	10c03e26 	beq	r2,r3,80a41c <__fputwc+0x130>
  80a324:	81c01704 	addi	r7,r16,92
  80a328:	900d883a 	mov	r6,r18
  80a32c:	d80b883a 	mov	r5,sp
  80a330:	9809883a 	mov	r4,r19
  80a334:	080a64c0 	call	80a64c <_wcrtomb_r>
  80a338:	1029883a 	mov	r20,r2
  80a33c:	00bfffc4 	movi	r2,-1
  80a340:	a0802026 	beq	r20,r2,80a3c4 <__fputwc+0xd8>
  80a344:	d9400003 	ldbu	r5,0(sp)
  80a348:	a0001c26 	beq	r20,zero,80a3bc <__fputwc+0xd0>
  80a34c:	0023883a 	mov	r17,zero
  80a350:	05400284 	movi	r21,10
  80a354:	00000906 	br	80a37c <__fputwc+0x90>
  80a358:	80800017 	ldw	r2,0(r16)
  80a35c:	11400005 	stb	r5,0(r2)
  80a360:	80c00017 	ldw	r3,0(r16)
  80a364:	18c00044 	addi	r3,r3,1
  80a368:	80c00015 	stw	r3,0(r16)
  80a36c:	8c400044 	addi	r17,r17,1
  80a370:	dc45883a 	add	r2,sp,r17
  80a374:	8d00112e 	bgeu	r17,r20,80a3bc <__fputwc+0xd0>
  80a378:	11400003 	ldbu	r5,0(r2)
  80a37c:	80c00217 	ldw	r3,8(r16)
  80a380:	18ffffc4 	addi	r3,r3,-1
  80a384:	80c00215 	stw	r3,8(r16)
  80a388:	183ff30e 	bge	r3,zero,80a358 <__alt_mem_onchip_mem+0xff802358>
  80a38c:	80800617 	ldw	r2,24(r16)
  80a390:	18801916 	blt	r3,r2,80a3f8 <__fputwc+0x10c>
  80a394:	80800017 	ldw	r2,0(r16)
  80a398:	11400005 	stb	r5,0(r2)
  80a39c:	80800017 	ldw	r2,0(r16)
  80a3a0:	10c00003 	ldbu	r3,0(r2)
  80a3a4:	10800044 	addi	r2,r2,1
  80a3a8:	1d402326 	beq	r3,r21,80a438 <__fputwc+0x14c>
  80a3ac:	80800015 	stw	r2,0(r16)
  80a3b0:	8c400044 	addi	r17,r17,1
  80a3b4:	dc45883a 	add	r2,sp,r17
  80a3b8:	8d3fef36 	bltu	r17,r20,80a378 <__alt_mem_onchip_mem+0xff802378>
  80a3bc:	9005883a 	mov	r2,r18
  80a3c0:	00000406 	br	80a3d4 <__fputwc+0xe8>
  80a3c4:	80c0030b 	ldhu	r3,12(r16)
  80a3c8:	a005883a 	mov	r2,r20
  80a3cc:	18c01014 	ori	r3,r3,64
  80a3d0:	80c0030d 	sth	r3,12(r16)
  80a3d4:	dfc00717 	ldw	ra,28(sp)
  80a3d8:	dd400617 	ldw	r21,24(sp)
  80a3dc:	dd000517 	ldw	r20,20(sp)
  80a3e0:	dcc00417 	ldw	r19,16(sp)
  80a3e4:	dc800317 	ldw	r18,12(sp)
  80a3e8:	dc400217 	ldw	r17,8(sp)
  80a3ec:	dc000117 	ldw	r16,4(sp)
  80a3f0:	dec00804 	addi	sp,sp,32
  80a3f4:	f800283a 	ret
  80a3f8:	800d883a 	mov	r6,r16
  80a3fc:	29403fcc 	andi	r5,r5,255
  80a400:	9809883a 	mov	r4,r19
  80a404:	080a4f40 	call	80a4f4 <__swbuf_r>
  80a408:	10bfffe0 	cmpeqi	r2,r2,-1
  80a40c:	10803fcc 	andi	r2,r2,255
  80a410:	103fd626 	beq	r2,zero,80a36c <__alt_mem_onchip_mem+0xff80236c>
  80a414:	00bfffc4 	movi	r2,-1
  80a418:	003fee06 	br	80a3d4 <__alt_mem_onchip_mem+0xff8023d4>
  80a41c:	90ffffc4 	addi	r3,r18,-1
  80a420:	01003f84 	movi	r4,254
  80a424:	20ffbf36 	bltu	r4,r3,80a324 <__alt_mem_onchip_mem+0xff802324>
  80a428:	900b883a 	mov	r5,r18
  80a42c:	dc800005 	stb	r18,0(sp)
  80a430:	1029883a 	mov	r20,r2
  80a434:	003fc506 	br	80a34c <__alt_mem_onchip_mem+0xff80234c>
  80a438:	800d883a 	mov	r6,r16
  80a43c:	a80b883a 	mov	r5,r21
  80a440:	9809883a 	mov	r4,r19
  80a444:	080a4f40 	call	80a4f4 <__swbuf_r>
  80a448:	10bfffe0 	cmpeqi	r2,r2,-1
  80a44c:	003fef06 	br	80a40c <__alt_mem_onchip_mem+0xff80240c>

0080a450 <_fputwc_r>:
  80a450:	3080030b 	ldhu	r2,12(r6)
  80a454:	10c8000c 	andi	r3,r2,8192
  80a458:	1800051e 	bne	r3,zero,80a470 <_fputwc_r+0x20>
  80a45c:	30c01917 	ldw	r3,100(r6)
  80a460:	10880014 	ori	r2,r2,8192
  80a464:	3080030d 	sth	r2,12(r6)
  80a468:	18880014 	ori	r2,r3,8192
  80a46c:	30801915 	stw	r2,100(r6)
  80a470:	080a2ec1 	jmpi	80a2ec <__fputwc>

0080a474 <fputwc>:
  80a474:	00802074 	movhi	r2,129
  80a478:	defffc04 	addi	sp,sp,-16
  80a47c:	10900904 	addi	r2,r2,16420
  80a480:	dc000115 	stw	r16,4(sp)
  80a484:	14000017 	ldw	r16,0(r2)
  80a488:	dc400215 	stw	r17,8(sp)
  80a48c:	dfc00315 	stw	ra,12(sp)
  80a490:	2023883a 	mov	r17,r4
  80a494:	80000226 	beq	r16,zero,80a4a0 <fputwc+0x2c>
  80a498:	80800e17 	ldw	r2,56(r16)
  80a49c:	10001026 	beq	r2,zero,80a4e0 <fputwc+0x6c>
  80a4a0:	2880030b 	ldhu	r2,12(r5)
  80a4a4:	10c8000c 	andi	r3,r2,8192
  80a4a8:	1800051e 	bne	r3,zero,80a4c0 <fputwc+0x4c>
  80a4ac:	28c01917 	ldw	r3,100(r5)
  80a4b0:	10880014 	ori	r2,r2,8192
  80a4b4:	2880030d 	sth	r2,12(r5)
  80a4b8:	18880014 	ori	r2,r3,8192
  80a4bc:	28801915 	stw	r2,100(r5)
  80a4c0:	280d883a 	mov	r6,r5
  80a4c4:	8009883a 	mov	r4,r16
  80a4c8:	880b883a 	mov	r5,r17
  80a4cc:	dfc00317 	ldw	ra,12(sp)
  80a4d0:	dc400217 	ldw	r17,8(sp)
  80a4d4:	dc000117 	ldw	r16,4(sp)
  80a4d8:	dec00404 	addi	sp,sp,16
  80a4dc:	080a2ec1 	jmpi	80a2ec <__fputwc>
  80a4e0:	8009883a 	mov	r4,r16
  80a4e4:	d9400015 	stw	r5,0(sp)
  80a4e8:	08063400 	call	806340 <__sinit>
  80a4ec:	d9400017 	ldw	r5,0(sp)
  80a4f0:	003feb06 	br	80a4a0 <__alt_mem_onchip_mem+0xff8024a0>

0080a4f4 <__swbuf_r>:
  80a4f4:	defffb04 	addi	sp,sp,-20
  80a4f8:	dcc00315 	stw	r19,12(sp)
  80a4fc:	dc800215 	stw	r18,8(sp)
  80a500:	dc000015 	stw	r16,0(sp)
  80a504:	dfc00415 	stw	ra,16(sp)
  80a508:	dc400115 	stw	r17,4(sp)
  80a50c:	2025883a 	mov	r18,r4
  80a510:	2827883a 	mov	r19,r5
  80a514:	3021883a 	mov	r16,r6
  80a518:	20000226 	beq	r4,zero,80a524 <__swbuf_r+0x30>
  80a51c:	20800e17 	ldw	r2,56(r4)
  80a520:	10004226 	beq	r2,zero,80a62c <__swbuf_r+0x138>
  80a524:	80800617 	ldw	r2,24(r16)
  80a528:	8100030b 	ldhu	r4,12(r16)
  80a52c:	80800215 	stw	r2,8(r16)
  80a530:	2080020c 	andi	r2,r4,8
  80a534:	10003626 	beq	r2,zero,80a610 <__swbuf_r+0x11c>
  80a538:	80c00417 	ldw	r3,16(r16)
  80a53c:	18003426 	beq	r3,zero,80a610 <__swbuf_r+0x11c>
  80a540:	2088000c 	andi	r2,r4,8192
  80a544:	9c403fcc 	andi	r17,r19,255
  80a548:	10001a26 	beq	r2,zero,80a5b4 <__swbuf_r+0xc0>
  80a54c:	80800017 	ldw	r2,0(r16)
  80a550:	81000517 	ldw	r4,20(r16)
  80a554:	10c7c83a 	sub	r3,r2,r3
  80a558:	1900200e 	bge	r3,r4,80a5dc <__swbuf_r+0xe8>
  80a55c:	18c00044 	addi	r3,r3,1
  80a560:	81000217 	ldw	r4,8(r16)
  80a564:	11400044 	addi	r5,r2,1
  80a568:	81400015 	stw	r5,0(r16)
  80a56c:	213fffc4 	addi	r4,r4,-1
  80a570:	81000215 	stw	r4,8(r16)
  80a574:	14c00005 	stb	r19,0(r2)
  80a578:	80800517 	ldw	r2,20(r16)
  80a57c:	10c01e26 	beq	r2,r3,80a5f8 <__swbuf_r+0x104>
  80a580:	8080030b 	ldhu	r2,12(r16)
  80a584:	1080004c 	andi	r2,r2,1
  80a588:	10000226 	beq	r2,zero,80a594 <__swbuf_r+0xa0>
  80a58c:	00800284 	movi	r2,10
  80a590:	88801926 	beq	r17,r2,80a5f8 <__swbuf_r+0x104>
  80a594:	8805883a 	mov	r2,r17
  80a598:	dfc00417 	ldw	ra,16(sp)
  80a59c:	dcc00317 	ldw	r19,12(sp)
  80a5a0:	dc800217 	ldw	r18,8(sp)
  80a5a4:	dc400117 	ldw	r17,4(sp)
  80a5a8:	dc000017 	ldw	r16,0(sp)
  80a5ac:	dec00504 	addi	sp,sp,20
  80a5b0:	f800283a 	ret
  80a5b4:	81401917 	ldw	r5,100(r16)
  80a5b8:	00b7ffc4 	movi	r2,-8193
  80a5bc:	21080014 	ori	r4,r4,8192
  80a5c0:	2884703a 	and	r2,r5,r2
  80a5c4:	80801915 	stw	r2,100(r16)
  80a5c8:	80800017 	ldw	r2,0(r16)
  80a5cc:	8100030d 	sth	r4,12(r16)
  80a5d0:	81000517 	ldw	r4,20(r16)
  80a5d4:	10c7c83a 	sub	r3,r2,r3
  80a5d8:	193fe016 	blt	r3,r4,80a55c <__alt_mem_onchip_mem+0xff80255c>
  80a5dc:	800b883a 	mov	r5,r16
  80a5e0:	9009883a 	mov	r4,r18
  80a5e4:	0805f640 	call	805f64 <_fflush_r>
  80a5e8:	1000071e 	bne	r2,zero,80a608 <__swbuf_r+0x114>
  80a5ec:	80800017 	ldw	r2,0(r16)
  80a5f0:	00c00044 	movi	r3,1
  80a5f4:	003fda06 	br	80a560 <__alt_mem_onchip_mem+0xff802560>
  80a5f8:	800b883a 	mov	r5,r16
  80a5fc:	9009883a 	mov	r4,r18
  80a600:	0805f640 	call	805f64 <_fflush_r>
  80a604:	103fe326 	beq	r2,zero,80a594 <__alt_mem_onchip_mem+0xff802594>
  80a608:	00bfffc4 	movi	r2,-1
  80a60c:	003fe206 	br	80a598 <__alt_mem_onchip_mem+0xff802598>
  80a610:	800b883a 	mov	r5,r16
  80a614:	9009883a 	mov	r4,r18
  80a618:	08043180 	call	804318 <__swsetup_r>
  80a61c:	103ffa1e 	bne	r2,zero,80a608 <__alt_mem_onchip_mem+0xff802608>
  80a620:	8100030b 	ldhu	r4,12(r16)
  80a624:	80c00417 	ldw	r3,16(r16)
  80a628:	003fc506 	br	80a540 <__alt_mem_onchip_mem+0xff802540>
  80a62c:	08063400 	call	806340 <__sinit>
  80a630:	003fbc06 	br	80a524 <__alt_mem_onchip_mem+0xff802524>

0080a634 <__swbuf>:
  80a634:	00802074 	movhi	r2,129
  80a638:	10900904 	addi	r2,r2,16420
  80a63c:	280d883a 	mov	r6,r5
  80a640:	200b883a 	mov	r5,r4
  80a644:	11000017 	ldw	r4,0(r2)
  80a648:	080a4f41 	jmpi	80a4f4 <__swbuf_r>

0080a64c <_wcrtomb_r>:
  80a64c:	defff604 	addi	sp,sp,-40
  80a650:	00802074 	movhi	r2,129
  80a654:	dc800815 	stw	r18,32(sp)
  80a658:	dc400715 	stw	r17,28(sp)
  80a65c:	dc000615 	stw	r16,24(sp)
  80a660:	10900d04 	addi	r2,r2,16436
  80a664:	dfc00915 	stw	ra,36(sp)
  80a668:	2021883a 	mov	r16,r4
  80a66c:	3823883a 	mov	r17,r7
  80a670:	14800017 	ldw	r18,0(r2)
  80a674:	28001426 	beq	r5,zero,80a6c8 <_wcrtomb_r+0x7c>
  80a678:	d9400415 	stw	r5,16(sp)
  80a67c:	d9800515 	stw	r6,20(sp)
  80a680:	0806f840 	call	806f84 <__locale_charset>
  80a684:	d9800517 	ldw	r6,20(sp)
  80a688:	d9400417 	ldw	r5,16(sp)
  80a68c:	100f883a 	mov	r7,r2
  80a690:	dc400015 	stw	r17,0(sp)
  80a694:	8009883a 	mov	r4,r16
  80a698:	903ee83a 	callr	r18
  80a69c:	00ffffc4 	movi	r3,-1
  80a6a0:	10c0031e 	bne	r2,r3,80a6b0 <_wcrtomb_r+0x64>
  80a6a4:	88000015 	stw	zero,0(r17)
  80a6a8:	00c02284 	movi	r3,138
  80a6ac:	80c00015 	stw	r3,0(r16)
  80a6b0:	dfc00917 	ldw	ra,36(sp)
  80a6b4:	dc800817 	ldw	r18,32(sp)
  80a6b8:	dc400717 	ldw	r17,28(sp)
  80a6bc:	dc000617 	ldw	r16,24(sp)
  80a6c0:	dec00a04 	addi	sp,sp,40
  80a6c4:	f800283a 	ret
  80a6c8:	0806f840 	call	806f84 <__locale_charset>
  80a6cc:	100f883a 	mov	r7,r2
  80a6d0:	dc400015 	stw	r17,0(sp)
  80a6d4:	000d883a 	mov	r6,zero
  80a6d8:	d9400104 	addi	r5,sp,4
  80a6dc:	8009883a 	mov	r4,r16
  80a6e0:	903ee83a 	callr	r18
  80a6e4:	003fed06 	br	80a69c <__alt_mem_onchip_mem+0xff80269c>

0080a6e8 <wcrtomb>:
  80a6e8:	defff604 	addi	sp,sp,-40
  80a6ec:	00802074 	movhi	r2,129
  80a6f0:	dc800615 	stw	r18,24(sp)
  80a6f4:	dc400515 	stw	r17,20(sp)
  80a6f8:	10900904 	addi	r2,r2,16420
  80a6fc:	dfc00915 	stw	ra,36(sp)
  80a700:	dd000815 	stw	r20,32(sp)
  80a704:	dcc00715 	stw	r19,28(sp)
  80a708:	dc000415 	stw	r16,16(sp)
  80a70c:	3025883a 	mov	r18,r6
  80a710:	14400017 	ldw	r17,0(r2)
  80a714:	20001926 	beq	r4,zero,80a77c <wcrtomb+0x94>
  80a718:	00802074 	movhi	r2,129
  80a71c:	10900d04 	addi	r2,r2,16436
  80a720:	15000017 	ldw	r20,0(r2)
  80a724:	2021883a 	mov	r16,r4
  80a728:	2827883a 	mov	r19,r5
  80a72c:	0806f840 	call	806f84 <__locale_charset>
  80a730:	100f883a 	mov	r7,r2
  80a734:	dc800015 	stw	r18,0(sp)
  80a738:	980d883a 	mov	r6,r19
  80a73c:	800b883a 	mov	r5,r16
  80a740:	8809883a 	mov	r4,r17
  80a744:	a03ee83a 	callr	r20
  80a748:	00ffffc4 	movi	r3,-1
  80a74c:	10c0031e 	bne	r2,r3,80a75c <wcrtomb+0x74>
  80a750:	90000015 	stw	zero,0(r18)
  80a754:	00c02284 	movi	r3,138
  80a758:	88c00015 	stw	r3,0(r17)
  80a75c:	dfc00917 	ldw	ra,36(sp)
  80a760:	dd000817 	ldw	r20,32(sp)
  80a764:	dcc00717 	ldw	r19,28(sp)
  80a768:	dc800617 	ldw	r18,24(sp)
  80a76c:	dc400517 	ldw	r17,20(sp)
  80a770:	dc000417 	ldw	r16,16(sp)
  80a774:	dec00a04 	addi	sp,sp,40
  80a778:	f800283a 	ret
  80a77c:	00802074 	movhi	r2,129
  80a780:	10900d04 	addi	r2,r2,16436
  80a784:	14000017 	ldw	r16,0(r2)
  80a788:	0806f840 	call	806f84 <__locale_charset>
  80a78c:	100f883a 	mov	r7,r2
  80a790:	dc800015 	stw	r18,0(sp)
  80a794:	000d883a 	mov	r6,zero
  80a798:	d9400104 	addi	r5,sp,4
  80a79c:	8809883a 	mov	r4,r17
  80a7a0:	803ee83a 	callr	r16
  80a7a4:	003fe806 	br	80a748 <__alt_mem_onchip_mem+0xff802748>

0080a7a8 <__ascii_wctomb>:
  80a7a8:	28000526 	beq	r5,zero,80a7c0 <__ascii_wctomb+0x18>
  80a7ac:	00803fc4 	movi	r2,255
  80a7b0:	11800536 	bltu	r2,r6,80a7c8 <__ascii_wctomb+0x20>
  80a7b4:	29800005 	stb	r6,0(r5)
  80a7b8:	00800044 	movi	r2,1
  80a7bc:	f800283a 	ret
  80a7c0:	0005883a 	mov	r2,zero
  80a7c4:	f800283a 	ret
  80a7c8:	00802284 	movi	r2,138
  80a7cc:	20800015 	stw	r2,0(r4)
  80a7d0:	00bfffc4 	movi	r2,-1
  80a7d4:	f800283a 	ret

0080a7d8 <_wctomb_r>:
  80a7d8:	00802074 	movhi	r2,129
  80a7dc:	defff904 	addi	sp,sp,-28
  80a7e0:	10900d04 	addi	r2,r2,16436
  80a7e4:	dfc00615 	stw	ra,24(sp)
  80a7e8:	dc400515 	stw	r17,20(sp)
  80a7ec:	dc000415 	stw	r16,16(sp)
  80a7f0:	3823883a 	mov	r17,r7
  80a7f4:	14000017 	ldw	r16,0(r2)
  80a7f8:	d9000115 	stw	r4,4(sp)
  80a7fc:	d9400215 	stw	r5,8(sp)
  80a800:	d9800315 	stw	r6,12(sp)
  80a804:	0806f840 	call	806f84 <__locale_charset>
  80a808:	d9800317 	ldw	r6,12(sp)
  80a80c:	d9400217 	ldw	r5,8(sp)
  80a810:	d9000117 	ldw	r4,4(sp)
  80a814:	100f883a 	mov	r7,r2
  80a818:	dc400015 	stw	r17,0(sp)
  80a81c:	803ee83a 	callr	r16
  80a820:	dfc00617 	ldw	ra,24(sp)
  80a824:	dc400517 	ldw	r17,20(sp)
  80a828:	dc000417 	ldw	r16,16(sp)
  80a82c:	dec00704 	addi	sp,sp,28
  80a830:	f800283a 	ret

0080a834 <__udivdi3>:
  80a834:	defff504 	addi	sp,sp,-44
  80a838:	dcc00415 	stw	r19,16(sp)
  80a83c:	dc000115 	stw	r16,4(sp)
  80a840:	dfc00a15 	stw	ra,40(sp)
  80a844:	df000915 	stw	fp,36(sp)
  80a848:	ddc00815 	stw	r23,32(sp)
  80a84c:	dd800715 	stw	r22,28(sp)
  80a850:	dd400615 	stw	r21,24(sp)
  80a854:	dd000515 	stw	r20,20(sp)
  80a858:	dc800315 	stw	r18,12(sp)
  80a85c:	dc400215 	stw	r17,8(sp)
  80a860:	2027883a 	mov	r19,r4
  80a864:	2821883a 	mov	r16,r5
  80a868:	3800411e 	bne	r7,zero,80a970 <__udivdi3+0x13c>
  80a86c:	3023883a 	mov	r17,r6
  80a870:	2025883a 	mov	r18,r4
  80a874:	2980522e 	bgeu	r5,r6,80a9c0 <__udivdi3+0x18c>
  80a878:	00bfffd4 	movui	r2,65535
  80a87c:	282d883a 	mov	r22,r5
  80a880:	1180a836 	bltu	r2,r6,80ab24 <__udivdi3+0x2f0>
  80a884:	00803fc4 	movi	r2,255
  80a888:	1185803a 	cmpltu	r2,r2,r6
  80a88c:	100490fa 	slli	r2,r2,3
  80a890:	3086d83a 	srl	r3,r6,r2
  80a894:	01002074 	movhi	r4,129
  80a898:	2107f304 	addi	r4,r4,8140
  80a89c:	20c7883a 	add	r3,r4,r3
  80a8a0:	18c00003 	ldbu	r3,0(r3)
  80a8a4:	1885883a 	add	r2,r3,r2
  80a8a8:	00c00804 	movi	r3,32
  80a8ac:	1887c83a 	sub	r3,r3,r2
  80a8b0:	18000526 	beq	r3,zero,80a8c8 <__udivdi3+0x94>
  80a8b4:	80e0983a 	sll	r16,r16,r3
  80a8b8:	9884d83a 	srl	r2,r19,r2
  80a8bc:	30e2983a 	sll	r17,r6,r3
  80a8c0:	98e4983a 	sll	r18,r19,r3
  80a8c4:	142cb03a 	or	r22,r2,r16
  80a8c8:	882ad43a 	srli	r21,r17,16
  80a8cc:	b009883a 	mov	r4,r22
  80a8d0:	8d3fffcc 	andi	r20,r17,65535
  80a8d4:	a80b883a 	mov	r5,r21
  80a8d8:	080b4400 	call	80b440 <__umodsi3>
  80a8dc:	b009883a 	mov	r4,r22
  80a8e0:	a80b883a 	mov	r5,r21
  80a8e4:	1027883a 	mov	r19,r2
  80a8e8:	080b3dc0 	call	80b3dc <__udivsi3>
  80a8ec:	102d883a 	mov	r22,r2
  80a8f0:	9826943a 	slli	r19,r19,16
  80a8f4:	9004d43a 	srli	r2,r18,16
  80a8f8:	a5a1383a 	mul	r16,r20,r22
  80a8fc:	14c4b03a 	or	r2,r2,r19
  80a900:	1400052e 	bgeu	r2,r16,80a918 <__udivdi3+0xe4>
  80a904:	1445883a 	add	r2,r2,r17
  80a908:	b0ffffc4 	addi	r3,r22,-1
  80a90c:	14400136 	bltu	r2,r17,80a914 <__udivdi3+0xe0>
  80a910:	14012336 	bltu	r2,r16,80ada0 <__udivdi3+0x56c>
  80a914:	182d883a 	mov	r22,r3
  80a918:	1421c83a 	sub	r16,r2,r16
  80a91c:	a80b883a 	mov	r5,r21
  80a920:	8009883a 	mov	r4,r16
  80a924:	080b4400 	call	80b440 <__umodsi3>
  80a928:	1027883a 	mov	r19,r2
  80a92c:	a80b883a 	mov	r5,r21
  80a930:	8009883a 	mov	r4,r16
  80a934:	080b3dc0 	call	80b3dc <__udivsi3>
  80a938:	9826943a 	slli	r19,r19,16
  80a93c:	a0a9383a 	mul	r20,r20,r2
  80a940:	94bfffcc 	andi	r18,r18,65535
  80a944:	94e4b03a 	or	r18,r18,r19
  80a948:	9500052e 	bgeu	r18,r20,80a960 <__udivdi3+0x12c>
  80a94c:	8ca5883a 	add	r18,r17,r18
  80a950:	10ffffc4 	addi	r3,r2,-1
  80a954:	9440f136 	bltu	r18,r17,80ad1c <__udivdi3+0x4e8>
  80a958:	9500f02e 	bgeu	r18,r20,80ad1c <__udivdi3+0x4e8>
  80a95c:	10bfff84 	addi	r2,r2,-2
  80a960:	b00c943a 	slli	r6,r22,16
  80a964:	0007883a 	mov	r3,zero
  80a968:	3084b03a 	or	r2,r6,r2
  80a96c:	00005906 	br	80aad4 <__udivdi3+0x2a0>
  80a970:	29c05636 	bltu	r5,r7,80aacc <__udivdi3+0x298>
  80a974:	00bfffd4 	movui	r2,65535
  80a978:	11c0622e 	bgeu	r2,r7,80ab04 <__udivdi3+0x2d0>
  80a97c:	00804034 	movhi	r2,256
  80a980:	10bfffc4 	addi	r2,r2,-1
  80a984:	11c0ee36 	bltu	r2,r7,80ad40 <__udivdi3+0x50c>
  80a988:	00800404 	movi	r2,16
  80a98c:	3886d83a 	srl	r3,r7,r2
  80a990:	01002074 	movhi	r4,129
  80a994:	2107f304 	addi	r4,r4,8140
  80a998:	20c7883a 	add	r3,r4,r3
  80a99c:	18c00003 	ldbu	r3,0(r3)
  80a9a0:	05400804 	movi	r21,32
  80a9a4:	1885883a 	add	r2,r3,r2
  80a9a8:	a8abc83a 	sub	r21,r21,r2
  80a9ac:	a800621e 	bne	r21,zero,80ab38 <__udivdi3+0x304>
  80a9b0:	3c00e936 	bltu	r7,r16,80ad58 <__udivdi3+0x524>
  80a9b4:	9985403a 	cmpgeu	r2,r19,r6
  80a9b8:	0007883a 	mov	r3,zero
  80a9bc:	00004506 	br	80aad4 <__udivdi3+0x2a0>
  80a9c0:	3000041e 	bne	r6,zero,80a9d4 <__udivdi3+0x1a0>
  80a9c4:	000b883a 	mov	r5,zero
  80a9c8:	01000044 	movi	r4,1
  80a9cc:	080b3dc0 	call	80b3dc <__udivsi3>
  80a9d0:	1023883a 	mov	r17,r2
  80a9d4:	00bfffd4 	movui	r2,65535
  80a9d8:	14404e2e 	bgeu	r2,r17,80ab14 <__udivdi3+0x2e0>
  80a9dc:	00804034 	movhi	r2,256
  80a9e0:	10bfffc4 	addi	r2,r2,-1
  80a9e4:	1440d836 	bltu	r2,r17,80ad48 <__udivdi3+0x514>
  80a9e8:	00800404 	movi	r2,16
  80a9ec:	8886d83a 	srl	r3,r17,r2
  80a9f0:	01002074 	movhi	r4,129
  80a9f4:	2107f304 	addi	r4,r4,8140
  80a9f8:	20c7883a 	add	r3,r4,r3
  80a9fc:	18c00003 	ldbu	r3,0(r3)
  80aa00:	1885883a 	add	r2,r3,r2
  80aa04:	00c00804 	movi	r3,32
  80aa08:	1887c83a 	sub	r3,r3,r2
  80aa0c:	18008f1e 	bne	r3,zero,80ac4c <__udivdi3+0x418>
  80aa10:	882ad43a 	srli	r21,r17,16
  80aa14:	8461c83a 	sub	r16,r16,r17
  80aa18:	8d3fffcc 	andi	r20,r17,65535
  80aa1c:	00c00044 	movi	r3,1
  80aa20:	8009883a 	mov	r4,r16
  80aa24:	a80b883a 	mov	r5,r21
  80aa28:	d8c00015 	stw	r3,0(sp)
  80aa2c:	080b4400 	call	80b440 <__umodsi3>
  80aa30:	8009883a 	mov	r4,r16
  80aa34:	a80b883a 	mov	r5,r21
  80aa38:	1027883a 	mov	r19,r2
  80aa3c:	080b3dc0 	call	80b3dc <__udivsi3>
  80aa40:	9826943a 	slli	r19,r19,16
  80aa44:	9008d43a 	srli	r4,r18,16
  80aa48:	1521383a 	mul	r16,r2,r20
  80aa4c:	102d883a 	mov	r22,r2
  80aa50:	24c8b03a 	or	r4,r4,r19
  80aa54:	d8c00017 	ldw	r3,0(sp)
  80aa58:	2400052e 	bgeu	r4,r16,80aa70 <__udivdi3+0x23c>
  80aa5c:	2449883a 	add	r4,r4,r17
  80aa60:	b0bfffc4 	addi	r2,r22,-1
  80aa64:	24400136 	bltu	r4,r17,80aa6c <__udivdi3+0x238>
  80aa68:	2400ca36 	bltu	r4,r16,80ad94 <__udivdi3+0x560>
  80aa6c:	102d883a 	mov	r22,r2
  80aa70:	2421c83a 	sub	r16,r4,r16
  80aa74:	a80b883a 	mov	r5,r21
  80aa78:	8009883a 	mov	r4,r16
  80aa7c:	d8c00015 	stw	r3,0(sp)
  80aa80:	080b4400 	call	80b440 <__umodsi3>
  80aa84:	1027883a 	mov	r19,r2
  80aa88:	a80b883a 	mov	r5,r21
  80aa8c:	8009883a 	mov	r4,r16
  80aa90:	080b3dc0 	call	80b3dc <__udivsi3>
  80aa94:	9826943a 	slli	r19,r19,16
  80aa98:	1529383a 	mul	r20,r2,r20
  80aa9c:	94bfffcc 	andi	r18,r18,65535
  80aaa0:	94e4b03a 	or	r18,r18,r19
  80aaa4:	d8c00017 	ldw	r3,0(sp)
  80aaa8:	9500052e 	bgeu	r18,r20,80aac0 <__udivdi3+0x28c>
  80aaac:	8ca5883a 	add	r18,r17,r18
  80aab0:	113fffc4 	addi	r4,r2,-1
  80aab4:	94409736 	bltu	r18,r17,80ad14 <__udivdi3+0x4e0>
  80aab8:	9500962e 	bgeu	r18,r20,80ad14 <__udivdi3+0x4e0>
  80aabc:	10bfff84 	addi	r2,r2,-2
  80aac0:	b00c943a 	slli	r6,r22,16
  80aac4:	3084b03a 	or	r2,r6,r2
  80aac8:	00000206 	br	80aad4 <__udivdi3+0x2a0>
  80aacc:	0007883a 	mov	r3,zero
  80aad0:	0005883a 	mov	r2,zero
  80aad4:	dfc00a17 	ldw	ra,40(sp)
  80aad8:	df000917 	ldw	fp,36(sp)
  80aadc:	ddc00817 	ldw	r23,32(sp)
  80aae0:	dd800717 	ldw	r22,28(sp)
  80aae4:	dd400617 	ldw	r21,24(sp)
  80aae8:	dd000517 	ldw	r20,20(sp)
  80aaec:	dcc00417 	ldw	r19,16(sp)
  80aaf0:	dc800317 	ldw	r18,12(sp)
  80aaf4:	dc400217 	ldw	r17,8(sp)
  80aaf8:	dc000117 	ldw	r16,4(sp)
  80aafc:	dec00b04 	addi	sp,sp,44
  80ab00:	f800283a 	ret
  80ab04:	00803fc4 	movi	r2,255
  80ab08:	11c5803a 	cmpltu	r2,r2,r7
  80ab0c:	100490fa 	slli	r2,r2,3
  80ab10:	003f9e06 	br	80a98c <__alt_mem_onchip_mem+0xff80298c>
  80ab14:	00803fc4 	movi	r2,255
  80ab18:	1445803a 	cmpltu	r2,r2,r17
  80ab1c:	100490fa 	slli	r2,r2,3
  80ab20:	003fb206 	br	80a9ec <__alt_mem_onchip_mem+0xff8029ec>
  80ab24:	00804034 	movhi	r2,256
  80ab28:	10bfffc4 	addi	r2,r2,-1
  80ab2c:	11808836 	bltu	r2,r6,80ad50 <__udivdi3+0x51c>
  80ab30:	00800404 	movi	r2,16
  80ab34:	003f5606 	br	80a890 <__alt_mem_onchip_mem+0xff802890>
  80ab38:	30aed83a 	srl	r23,r6,r2
  80ab3c:	3d4e983a 	sll	r7,r7,r21
  80ab40:	80acd83a 	srl	r22,r16,r2
  80ab44:	9884d83a 	srl	r2,r19,r2
  80ab48:	3deeb03a 	or	r23,r7,r23
  80ab4c:	b824d43a 	srli	r18,r23,16
  80ab50:	8560983a 	sll	r16,r16,r21
  80ab54:	b009883a 	mov	r4,r22
  80ab58:	900b883a 	mov	r5,r18
  80ab5c:	3568983a 	sll	r20,r6,r21
  80ab60:	1420b03a 	or	r16,r2,r16
  80ab64:	080b4400 	call	80b440 <__umodsi3>
  80ab68:	b009883a 	mov	r4,r22
  80ab6c:	900b883a 	mov	r5,r18
  80ab70:	1023883a 	mov	r17,r2
  80ab74:	080b3dc0 	call	80b3dc <__udivsi3>
  80ab78:	8808943a 	slli	r4,r17,16
  80ab7c:	bf3fffcc 	andi	fp,r23,65535
  80ab80:	8006d43a 	srli	r3,r16,16
  80ab84:	e0a3383a 	mul	r17,fp,r2
  80ab88:	100d883a 	mov	r6,r2
  80ab8c:	1906b03a 	or	r3,r3,r4
  80ab90:	1c40042e 	bgeu	r3,r17,80aba4 <__udivdi3+0x370>
  80ab94:	1dc7883a 	add	r3,r3,r23
  80ab98:	10bfffc4 	addi	r2,r2,-1
  80ab9c:	1dc0752e 	bgeu	r3,r23,80ad74 <__udivdi3+0x540>
  80aba0:	100d883a 	mov	r6,r2
  80aba4:	1c63c83a 	sub	r17,r3,r17
  80aba8:	900b883a 	mov	r5,r18
  80abac:	8809883a 	mov	r4,r17
  80abb0:	d9800015 	stw	r6,0(sp)
  80abb4:	080b4400 	call	80b440 <__umodsi3>
  80abb8:	102d883a 	mov	r22,r2
  80abbc:	8809883a 	mov	r4,r17
  80abc0:	900b883a 	mov	r5,r18
  80abc4:	080b3dc0 	call	80b3dc <__udivsi3>
  80abc8:	b02c943a 	slli	r22,r22,16
  80abcc:	e089383a 	mul	r4,fp,r2
  80abd0:	843fffcc 	andi	r16,r16,65535
  80abd4:	85a0b03a 	or	r16,r16,r22
  80abd8:	d9800017 	ldw	r6,0(sp)
  80abdc:	8100042e 	bgeu	r16,r4,80abf0 <__udivdi3+0x3bc>
  80abe0:	85e1883a 	add	r16,r16,r23
  80abe4:	10ffffc4 	addi	r3,r2,-1
  80abe8:	85c05e2e 	bgeu	r16,r23,80ad64 <__udivdi3+0x530>
  80abec:	1805883a 	mov	r2,r3
  80abf0:	300c943a 	slli	r6,r6,16
  80abf4:	a17fffcc 	andi	r5,r20,65535
  80abf8:	a028d43a 	srli	r20,r20,16
  80abfc:	3084b03a 	or	r2,r6,r2
  80ac00:	10ffffcc 	andi	r3,r2,65535
  80ac04:	100cd43a 	srli	r6,r2,16
  80ac08:	194f383a 	mul	r7,r3,r5
  80ac0c:	1d07383a 	mul	r3,r3,r20
  80ac10:	314b383a 	mul	r5,r6,r5
  80ac14:	3810d43a 	srli	r8,r7,16
  80ac18:	8121c83a 	sub	r16,r16,r4
  80ac1c:	1947883a 	add	r3,r3,r5
  80ac20:	40c7883a 	add	r3,r8,r3
  80ac24:	350d383a 	mul	r6,r6,r20
  80ac28:	1940022e 	bgeu	r3,r5,80ac34 <__udivdi3+0x400>
  80ac2c:	01000074 	movhi	r4,1
  80ac30:	310d883a 	add	r6,r6,r4
  80ac34:	1828d43a 	srli	r20,r3,16
  80ac38:	a18d883a 	add	r6,r20,r6
  80ac3c:	81803e36 	bltu	r16,r6,80ad38 <__udivdi3+0x504>
  80ac40:	81803826 	beq	r16,r6,80ad24 <__udivdi3+0x4f0>
  80ac44:	0007883a 	mov	r3,zero
  80ac48:	003fa206 	br	80aad4 <__alt_mem_onchip_mem+0xff802ad4>
  80ac4c:	88e2983a 	sll	r17,r17,r3
  80ac50:	80a8d83a 	srl	r20,r16,r2
  80ac54:	80e0983a 	sll	r16,r16,r3
  80ac58:	882ad43a 	srli	r21,r17,16
  80ac5c:	9884d83a 	srl	r2,r19,r2
  80ac60:	a009883a 	mov	r4,r20
  80ac64:	a80b883a 	mov	r5,r21
  80ac68:	142eb03a 	or	r23,r2,r16
  80ac6c:	98e4983a 	sll	r18,r19,r3
  80ac70:	080b4400 	call	80b440 <__umodsi3>
  80ac74:	a009883a 	mov	r4,r20
  80ac78:	a80b883a 	mov	r5,r21
  80ac7c:	1021883a 	mov	r16,r2
  80ac80:	080b3dc0 	call	80b3dc <__udivsi3>
  80ac84:	1039883a 	mov	fp,r2
  80ac88:	8d3fffcc 	andi	r20,r17,65535
  80ac8c:	8020943a 	slli	r16,r16,16
  80ac90:	b804d43a 	srli	r2,r23,16
  80ac94:	a72d383a 	mul	r22,r20,fp
  80ac98:	1404b03a 	or	r2,r2,r16
  80ac9c:	1580062e 	bgeu	r2,r22,80acb8 <__udivdi3+0x484>
  80aca0:	1445883a 	add	r2,r2,r17
  80aca4:	e0ffffc4 	addi	r3,fp,-1
  80aca8:	14403836 	bltu	r2,r17,80ad8c <__udivdi3+0x558>
  80acac:	1580372e 	bgeu	r2,r22,80ad8c <__udivdi3+0x558>
  80acb0:	e73fff84 	addi	fp,fp,-2
  80acb4:	1445883a 	add	r2,r2,r17
  80acb8:	15adc83a 	sub	r22,r2,r22
  80acbc:	a80b883a 	mov	r5,r21
  80acc0:	b009883a 	mov	r4,r22
  80acc4:	080b4400 	call	80b440 <__umodsi3>
  80acc8:	1027883a 	mov	r19,r2
  80accc:	b009883a 	mov	r4,r22
  80acd0:	a80b883a 	mov	r5,r21
  80acd4:	080b3dc0 	call	80b3dc <__udivsi3>
  80acd8:	9826943a 	slli	r19,r19,16
  80acdc:	a0a1383a 	mul	r16,r20,r2
  80ace0:	b93fffcc 	andi	r4,r23,65535
  80ace4:	24c8b03a 	or	r4,r4,r19
  80ace8:	2400062e 	bgeu	r4,r16,80ad04 <__udivdi3+0x4d0>
  80acec:	2449883a 	add	r4,r4,r17
  80acf0:	10ffffc4 	addi	r3,r2,-1
  80acf4:	24402336 	bltu	r4,r17,80ad84 <__udivdi3+0x550>
  80acf8:	2400222e 	bgeu	r4,r16,80ad84 <__udivdi3+0x550>
  80acfc:	10bfff84 	addi	r2,r2,-2
  80ad00:	2449883a 	add	r4,r4,r17
  80ad04:	e038943a 	slli	fp,fp,16
  80ad08:	2421c83a 	sub	r16,r4,r16
  80ad0c:	e086b03a 	or	r3,fp,r2
  80ad10:	003f4306 	br	80aa20 <__alt_mem_onchip_mem+0xff802a20>
  80ad14:	2005883a 	mov	r2,r4
  80ad18:	003f6906 	br	80aac0 <__alt_mem_onchip_mem+0xff802ac0>
  80ad1c:	1805883a 	mov	r2,r3
  80ad20:	003f0f06 	br	80a960 <__alt_mem_onchip_mem+0xff802960>
  80ad24:	1806943a 	slli	r3,r3,16
  80ad28:	9d66983a 	sll	r19,r19,r21
  80ad2c:	39ffffcc 	andi	r7,r7,65535
  80ad30:	19c7883a 	add	r3,r3,r7
  80ad34:	98ffc32e 	bgeu	r19,r3,80ac44 <__alt_mem_onchip_mem+0xff802c44>
  80ad38:	10bfffc4 	addi	r2,r2,-1
  80ad3c:	003fc106 	br	80ac44 <__alt_mem_onchip_mem+0xff802c44>
  80ad40:	00800604 	movi	r2,24
  80ad44:	003f1106 	br	80a98c <__alt_mem_onchip_mem+0xff80298c>
  80ad48:	00800604 	movi	r2,24
  80ad4c:	003f2706 	br	80a9ec <__alt_mem_onchip_mem+0xff8029ec>
  80ad50:	00800604 	movi	r2,24
  80ad54:	003ece06 	br	80a890 <__alt_mem_onchip_mem+0xff802890>
  80ad58:	0007883a 	mov	r3,zero
  80ad5c:	00800044 	movi	r2,1
  80ad60:	003f5c06 	br	80aad4 <__alt_mem_onchip_mem+0xff802ad4>
  80ad64:	813fa12e 	bgeu	r16,r4,80abec <__alt_mem_onchip_mem+0xff802bec>
  80ad68:	10bfff84 	addi	r2,r2,-2
  80ad6c:	85e1883a 	add	r16,r16,r23
  80ad70:	003f9f06 	br	80abf0 <__alt_mem_onchip_mem+0xff802bf0>
  80ad74:	1c7f8a2e 	bgeu	r3,r17,80aba0 <__alt_mem_onchip_mem+0xff802ba0>
  80ad78:	31bfff84 	addi	r6,r6,-2
  80ad7c:	1dc7883a 	add	r3,r3,r23
  80ad80:	003f8806 	br	80aba4 <__alt_mem_onchip_mem+0xff802ba4>
  80ad84:	1805883a 	mov	r2,r3
  80ad88:	003fde06 	br	80ad04 <__alt_mem_onchip_mem+0xff802d04>
  80ad8c:	1839883a 	mov	fp,r3
  80ad90:	003fc906 	br	80acb8 <__alt_mem_onchip_mem+0xff802cb8>
  80ad94:	b5bfff84 	addi	r22,r22,-2
  80ad98:	2449883a 	add	r4,r4,r17
  80ad9c:	003f3406 	br	80aa70 <__alt_mem_onchip_mem+0xff802a70>
  80ada0:	b5bfff84 	addi	r22,r22,-2
  80ada4:	1445883a 	add	r2,r2,r17
  80ada8:	003edb06 	br	80a918 <__alt_mem_onchip_mem+0xff802918>

0080adac <__umoddi3>:
  80adac:	defff404 	addi	sp,sp,-48
  80adb0:	df000a15 	stw	fp,40(sp)
  80adb4:	dc400315 	stw	r17,12(sp)
  80adb8:	dc000215 	stw	r16,8(sp)
  80adbc:	dfc00b15 	stw	ra,44(sp)
  80adc0:	ddc00915 	stw	r23,36(sp)
  80adc4:	dd800815 	stw	r22,32(sp)
  80adc8:	dd400715 	stw	r21,28(sp)
  80adcc:	dd000615 	stw	r20,24(sp)
  80add0:	dcc00515 	stw	r19,20(sp)
  80add4:	dc800415 	stw	r18,16(sp)
  80add8:	2021883a 	mov	r16,r4
  80addc:	2823883a 	mov	r17,r5
  80ade0:	2839883a 	mov	fp,r5
  80ade4:	38003c1e 	bne	r7,zero,80aed8 <__umoddi3+0x12c>
  80ade8:	3027883a 	mov	r19,r6
  80adec:	2029883a 	mov	r20,r4
  80adf0:	2980512e 	bgeu	r5,r6,80af38 <__umoddi3+0x18c>
  80adf4:	00bfffd4 	movui	r2,65535
  80adf8:	11809a36 	bltu	r2,r6,80b064 <__umoddi3+0x2b8>
  80adfc:	01003fc4 	movi	r4,255
  80ae00:	2189803a 	cmpltu	r4,r4,r6
  80ae04:	200890fa 	slli	r4,r4,3
  80ae08:	3104d83a 	srl	r2,r6,r4
  80ae0c:	00c02074 	movhi	r3,129
  80ae10:	18c7f304 	addi	r3,r3,8140
  80ae14:	1885883a 	add	r2,r3,r2
  80ae18:	10c00003 	ldbu	r3,0(r2)
  80ae1c:	00800804 	movi	r2,32
  80ae20:	1909883a 	add	r4,r3,r4
  80ae24:	1125c83a 	sub	r18,r2,r4
  80ae28:	90000526 	beq	r18,zero,80ae40 <__umoddi3+0x94>
  80ae2c:	8ca2983a 	sll	r17,r17,r18
  80ae30:	8108d83a 	srl	r4,r16,r4
  80ae34:	34a6983a 	sll	r19,r6,r18
  80ae38:	84a8983a 	sll	r20,r16,r18
  80ae3c:	2478b03a 	or	fp,r4,r17
  80ae40:	982ed43a 	srli	r23,r19,16
  80ae44:	e009883a 	mov	r4,fp
  80ae48:	9dbfffcc 	andi	r22,r19,65535
  80ae4c:	b80b883a 	mov	r5,r23
  80ae50:	080b4400 	call	80b440 <__umodsi3>
  80ae54:	e009883a 	mov	r4,fp
  80ae58:	b80b883a 	mov	r5,r23
  80ae5c:	102b883a 	mov	r21,r2
  80ae60:	080b3dc0 	call	80b3dc <__udivsi3>
  80ae64:	a806943a 	slli	r3,r21,16
  80ae68:	a008d43a 	srli	r4,r20,16
  80ae6c:	b085383a 	mul	r2,r22,r2
  80ae70:	20c8b03a 	or	r4,r4,r3
  80ae74:	2080032e 	bgeu	r4,r2,80ae84 <__umoddi3+0xd8>
  80ae78:	24c9883a 	add	r4,r4,r19
  80ae7c:	24c00136 	bltu	r4,r19,80ae84 <__umoddi3+0xd8>
  80ae80:	20811036 	bltu	r4,r2,80b2c4 <__umoddi3+0x518>
  80ae84:	20abc83a 	sub	r21,r4,r2
  80ae88:	b80b883a 	mov	r5,r23
  80ae8c:	a809883a 	mov	r4,r21
  80ae90:	080b4400 	call	80b440 <__umodsi3>
  80ae94:	1023883a 	mov	r17,r2
  80ae98:	b80b883a 	mov	r5,r23
  80ae9c:	a809883a 	mov	r4,r21
  80aea0:	080b3dc0 	call	80b3dc <__udivsi3>
  80aea4:	8822943a 	slli	r17,r17,16
  80aea8:	b085383a 	mul	r2,r22,r2
  80aeac:	a0ffffcc 	andi	r3,r20,65535
  80aeb0:	1c46b03a 	or	r3,r3,r17
  80aeb4:	1880042e 	bgeu	r3,r2,80aec8 <__umoddi3+0x11c>
  80aeb8:	1cc7883a 	add	r3,r3,r19
  80aebc:	1cc00236 	bltu	r3,r19,80aec8 <__umoddi3+0x11c>
  80aec0:	1880012e 	bgeu	r3,r2,80aec8 <__umoddi3+0x11c>
  80aec4:	1cc7883a 	add	r3,r3,r19
  80aec8:	1885c83a 	sub	r2,r3,r2
  80aecc:	1484d83a 	srl	r2,r2,r18
  80aed0:	0007883a 	mov	r3,zero
  80aed4:	00004f06 	br	80b014 <__umoddi3+0x268>
  80aed8:	29c04c36 	bltu	r5,r7,80b00c <__umoddi3+0x260>
  80aedc:	00bfffd4 	movui	r2,65535
  80aee0:	11c0582e 	bgeu	r2,r7,80b044 <__umoddi3+0x298>
  80aee4:	00804034 	movhi	r2,256
  80aee8:	10bfffc4 	addi	r2,r2,-1
  80aeec:	11c0e736 	bltu	r2,r7,80b28c <__umoddi3+0x4e0>
  80aef0:	01000404 	movi	r4,16
  80aef4:	3904d83a 	srl	r2,r7,r4
  80aef8:	00c02074 	movhi	r3,129
  80aefc:	18c7f304 	addi	r3,r3,8140
  80af00:	1885883a 	add	r2,r3,r2
  80af04:	14c00003 	ldbu	r19,0(r2)
  80af08:	00c00804 	movi	r3,32
  80af0c:	9927883a 	add	r19,r19,r4
  80af10:	1ce9c83a 	sub	r20,r3,r19
  80af14:	a000581e 	bne	r20,zero,80b078 <__umoddi3+0x2cc>
  80af18:	3c400136 	bltu	r7,r17,80af20 <__umoddi3+0x174>
  80af1c:	8180eb36 	bltu	r16,r6,80b2cc <__umoddi3+0x520>
  80af20:	8185c83a 	sub	r2,r16,r6
  80af24:	89e3c83a 	sub	r17,r17,r7
  80af28:	8089803a 	cmpltu	r4,r16,r2
  80af2c:	8939c83a 	sub	fp,r17,r4
  80af30:	e007883a 	mov	r3,fp
  80af34:	00003706 	br	80b014 <__umoddi3+0x268>
  80af38:	3000041e 	bne	r6,zero,80af4c <__umoddi3+0x1a0>
  80af3c:	000b883a 	mov	r5,zero
  80af40:	01000044 	movi	r4,1
  80af44:	080b3dc0 	call	80b3dc <__udivsi3>
  80af48:	1027883a 	mov	r19,r2
  80af4c:	00bfffd4 	movui	r2,65535
  80af50:	14c0402e 	bgeu	r2,r19,80b054 <__umoddi3+0x2a8>
  80af54:	00804034 	movhi	r2,256
  80af58:	10bfffc4 	addi	r2,r2,-1
  80af5c:	14c0cd36 	bltu	r2,r19,80b294 <__umoddi3+0x4e8>
  80af60:	00800404 	movi	r2,16
  80af64:	9886d83a 	srl	r3,r19,r2
  80af68:	01002074 	movhi	r4,129
  80af6c:	2107f304 	addi	r4,r4,8140
  80af70:	20c7883a 	add	r3,r4,r3
  80af74:	18c00003 	ldbu	r3,0(r3)
  80af78:	1887883a 	add	r3,r3,r2
  80af7c:	00800804 	movi	r2,32
  80af80:	10e5c83a 	sub	r18,r2,r3
  80af84:	9000901e 	bne	r18,zero,80b1c8 <__umoddi3+0x41c>
  80af88:	982cd43a 	srli	r22,r19,16
  80af8c:	8ce3c83a 	sub	r17,r17,r19
  80af90:	9d7fffcc 	andi	r21,r19,65535
  80af94:	b00b883a 	mov	r5,r22
  80af98:	8809883a 	mov	r4,r17
  80af9c:	080b4400 	call	80b440 <__umodsi3>
  80afa0:	8809883a 	mov	r4,r17
  80afa4:	b00b883a 	mov	r5,r22
  80afa8:	1021883a 	mov	r16,r2
  80afac:	080b3dc0 	call	80b3dc <__udivsi3>
  80afb0:	8006943a 	slli	r3,r16,16
  80afb4:	a008d43a 	srli	r4,r20,16
  80afb8:	1545383a 	mul	r2,r2,r21
  80afbc:	20c8b03a 	or	r4,r4,r3
  80afc0:	2080042e 	bgeu	r4,r2,80afd4 <__umoddi3+0x228>
  80afc4:	24c9883a 	add	r4,r4,r19
  80afc8:	24c00236 	bltu	r4,r19,80afd4 <__umoddi3+0x228>
  80afcc:	2080012e 	bgeu	r4,r2,80afd4 <__umoddi3+0x228>
  80afd0:	24c9883a 	add	r4,r4,r19
  80afd4:	20a1c83a 	sub	r16,r4,r2
  80afd8:	b00b883a 	mov	r5,r22
  80afdc:	8009883a 	mov	r4,r16
  80afe0:	080b4400 	call	80b440 <__umodsi3>
  80afe4:	1023883a 	mov	r17,r2
  80afe8:	b00b883a 	mov	r5,r22
  80afec:	8009883a 	mov	r4,r16
  80aff0:	080b3dc0 	call	80b3dc <__udivsi3>
  80aff4:	8822943a 	slli	r17,r17,16
  80aff8:	1545383a 	mul	r2,r2,r21
  80affc:	a53fffcc 	andi	r20,r20,65535
  80b000:	a446b03a 	or	r3,r20,r17
  80b004:	18bfb02e 	bgeu	r3,r2,80aec8 <__alt_mem_onchip_mem+0xff802ec8>
  80b008:	003fab06 	br	80aeb8 <__alt_mem_onchip_mem+0xff802eb8>
  80b00c:	2005883a 	mov	r2,r4
  80b010:	2807883a 	mov	r3,r5
  80b014:	dfc00b17 	ldw	ra,44(sp)
  80b018:	df000a17 	ldw	fp,40(sp)
  80b01c:	ddc00917 	ldw	r23,36(sp)
  80b020:	dd800817 	ldw	r22,32(sp)
  80b024:	dd400717 	ldw	r21,28(sp)
  80b028:	dd000617 	ldw	r20,24(sp)
  80b02c:	dcc00517 	ldw	r19,20(sp)
  80b030:	dc800417 	ldw	r18,16(sp)
  80b034:	dc400317 	ldw	r17,12(sp)
  80b038:	dc000217 	ldw	r16,8(sp)
  80b03c:	dec00c04 	addi	sp,sp,48
  80b040:	f800283a 	ret
  80b044:	04c03fc4 	movi	r19,255
  80b048:	99c9803a 	cmpltu	r4,r19,r7
  80b04c:	200890fa 	slli	r4,r4,3
  80b050:	003fa806 	br	80aef4 <__alt_mem_onchip_mem+0xff802ef4>
  80b054:	00803fc4 	movi	r2,255
  80b058:	14c5803a 	cmpltu	r2,r2,r19
  80b05c:	100490fa 	slli	r2,r2,3
  80b060:	003fc006 	br	80af64 <__alt_mem_onchip_mem+0xff802f64>
  80b064:	00804034 	movhi	r2,256
  80b068:	10bfffc4 	addi	r2,r2,-1
  80b06c:	11808b36 	bltu	r2,r6,80b29c <__umoddi3+0x4f0>
  80b070:	01000404 	movi	r4,16
  80b074:	003f6406 	br	80ae08 <__alt_mem_onchip_mem+0xff802e08>
  80b078:	34c4d83a 	srl	r2,r6,r19
  80b07c:	3d0e983a 	sll	r7,r7,r20
  80b080:	8cf8d83a 	srl	fp,r17,r19
  80b084:	8d10983a 	sll	r8,r17,r20
  80b088:	38aab03a 	or	r21,r7,r2
  80b08c:	a82cd43a 	srli	r22,r21,16
  80b090:	84e2d83a 	srl	r17,r16,r19
  80b094:	e009883a 	mov	r4,fp
  80b098:	b00b883a 	mov	r5,r22
  80b09c:	8a22b03a 	or	r17,r17,r8
  80b0a0:	3524983a 	sll	r18,r6,r20
  80b0a4:	080b4400 	call	80b440 <__umodsi3>
  80b0a8:	e009883a 	mov	r4,fp
  80b0ac:	b00b883a 	mov	r5,r22
  80b0b0:	102f883a 	mov	r23,r2
  80b0b4:	080b3dc0 	call	80b3dc <__udivsi3>
  80b0b8:	100d883a 	mov	r6,r2
  80b0bc:	b808943a 	slli	r4,r23,16
  80b0c0:	aa3fffcc 	andi	r8,r21,65535
  80b0c4:	8804d43a 	srli	r2,r17,16
  80b0c8:	41af383a 	mul	r23,r8,r6
  80b0cc:	8520983a 	sll	r16,r16,r20
  80b0d0:	1104b03a 	or	r2,r2,r4
  80b0d4:	15c0042e 	bgeu	r2,r23,80b0e8 <__umoddi3+0x33c>
  80b0d8:	1545883a 	add	r2,r2,r21
  80b0dc:	30ffffc4 	addi	r3,r6,-1
  80b0e0:	1540742e 	bgeu	r2,r21,80b2b4 <__umoddi3+0x508>
  80b0e4:	180d883a 	mov	r6,r3
  80b0e8:	15efc83a 	sub	r23,r2,r23
  80b0ec:	b00b883a 	mov	r5,r22
  80b0f0:	b809883a 	mov	r4,r23
  80b0f4:	d9800115 	stw	r6,4(sp)
  80b0f8:	da000015 	stw	r8,0(sp)
  80b0fc:	080b4400 	call	80b440 <__umodsi3>
  80b100:	b00b883a 	mov	r5,r22
  80b104:	b809883a 	mov	r4,r23
  80b108:	1039883a 	mov	fp,r2
  80b10c:	080b3dc0 	call	80b3dc <__udivsi3>
  80b110:	da000017 	ldw	r8,0(sp)
  80b114:	e038943a 	slli	fp,fp,16
  80b118:	100b883a 	mov	r5,r2
  80b11c:	4089383a 	mul	r4,r8,r2
  80b120:	8a3fffcc 	andi	r8,r17,65535
  80b124:	4710b03a 	or	r8,r8,fp
  80b128:	d9800117 	ldw	r6,4(sp)
  80b12c:	4100042e 	bgeu	r8,r4,80b140 <__umoddi3+0x394>
  80b130:	4551883a 	add	r8,r8,r21
  80b134:	10bfffc4 	addi	r2,r2,-1
  80b138:	45405a2e 	bgeu	r8,r21,80b2a4 <__umoddi3+0x4f8>
  80b13c:	100b883a 	mov	r5,r2
  80b140:	300c943a 	slli	r6,r6,16
  80b144:	91ffffcc 	andi	r7,r18,65535
  80b148:	9004d43a 	srli	r2,r18,16
  80b14c:	314cb03a 	or	r6,r6,r5
  80b150:	317fffcc 	andi	r5,r6,65535
  80b154:	300cd43a 	srli	r6,r6,16
  80b158:	29d3383a 	mul	r9,r5,r7
  80b15c:	288b383a 	mul	r5,r5,r2
  80b160:	31cf383a 	mul	r7,r6,r7
  80b164:	4806d43a 	srli	r3,r9,16
  80b168:	4111c83a 	sub	r8,r8,r4
  80b16c:	29cb883a 	add	r5,r5,r7
  80b170:	194b883a 	add	r5,r3,r5
  80b174:	3085383a 	mul	r2,r6,r2
  80b178:	29c0022e 	bgeu	r5,r7,80b184 <__umoddi3+0x3d8>
  80b17c:	00c00074 	movhi	r3,1
  80b180:	10c5883a 	add	r2,r2,r3
  80b184:	2808d43a 	srli	r4,r5,16
  80b188:	280a943a 	slli	r5,r5,16
  80b18c:	4a7fffcc 	andi	r9,r9,65535
  80b190:	2085883a 	add	r2,r4,r2
  80b194:	2a4b883a 	add	r5,r5,r9
  80b198:	40803636 	bltu	r8,r2,80b274 <__umoddi3+0x4c8>
  80b19c:	40804d26 	beq	r8,r2,80b2d4 <__umoddi3+0x528>
  80b1a0:	4089c83a 	sub	r4,r8,r2
  80b1a4:	280f883a 	mov	r7,r5
  80b1a8:	81cfc83a 	sub	r7,r16,r7
  80b1ac:	81c7803a 	cmpltu	r3,r16,r7
  80b1b0:	20c7c83a 	sub	r3,r4,r3
  80b1b4:	1cc4983a 	sll	r2,r3,r19
  80b1b8:	3d0ed83a 	srl	r7,r7,r20
  80b1bc:	1d06d83a 	srl	r3,r3,r20
  80b1c0:	11c4b03a 	or	r2,r2,r7
  80b1c4:	003f9306 	br	80b014 <__alt_mem_onchip_mem+0xff803014>
  80b1c8:	9ca6983a 	sll	r19,r19,r18
  80b1cc:	88e8d83a 	srl	r20,r17,r3
  80b1d0:	80c4d83a 	srl	r2,r16,r3
  80b1d4:	982cd43a 	srli	r22,r19,16
  80b1d8:	8ca2983a 	sll	r17,r17,r18
  80b1dc:	a009883a 	mov	r4,r20
  80b1e0:	b00b883a 	mov	r5,r22
  80b1e4:	1478b03a 	or	fp,r2,r17
  80b1e8:	080b4400 	call	80b440 <__umodsi3>
  80b1ec:	a009883a 	mov	r4,r20
  80b1f0:	b00b883a 	mov	r5,r22
  80b1f4:	1023883a 	mov	r17,r2
  80b1f8:	080b3dc0 	call	80b3dc <__udivsi3>
  80b1fc:	9d7fffcc 	andi	r21,r19,65535
  80b200:	880a943a 	slli	r5,r17,16
  80b204:	e008d43a 	srli	r4,fp,16
  80b208:	a885383a 	mul	r2,r21,r2
  80b20c:	84a8983a 	sll	r20,r16,r18
  80b210:	2148b03a 	or	r4,r4,r5
  80b214:	2080042e 	bgeu	r4,r2,80b228 <__umoddi3+0x47c>
  80b218:	24c9883a 	add	r4,r4,r19
  80b21c:	24c00236 	bltu	r4,r19,80b228 <__umoddi3+0x47c>
  80b220:	2080012e 	bgeu	r4,r2,80b228 <__umoddi3+0x47c>
  80b224:	24c9883a 	add	r4,r4,r19
  80b228:	20a3c83a 	sub	r17,r4,r2
  80b22c:	b00b883a 	mov	r5,r22
  80b230:	8809883a 	mov	r4,r17
  80b234:	080b4400 	call	80b440 <__umodsi3>
  80b238:	102f883a 	mov	r23,r2
  80b23c:	8809883a 	mov	r4,r17
  80b240:	b00b883a 	mov	r5,r22
  80b244:	080b3dc0 	call	80b3dc <__udivsi3>
  80b248:	b82e943a 	slli	r23,r23,16
  80b24c:	a885383a 	mul	r2,r21,r2
  80b250:	e13fffcc 	andi	r4,fp,65535
  80b254:	25c8b03a 	or	r4,r4,r23
  80b258:	2080042e 	bgeu	r4,r2,80b26c <__umoddi3+0x4c0>
  80b25c:	24c9883a 	add	r4,r4,r19
  80b260:	24c00236 	bltu	r4,r19,80b26c <__umoddi3+0x4c0>
  80b264:	2080012e 	bgeu	r4,r2,80b26c <__umoddi3+0x4c0>
  80b268:	24c9883a 	add	r4,r4,r19
  80b26c:	20a3c83a 	sub	r17,r4,r2
  80b270:	003f4806 	br	80af94 <__alt_mem_onchip_mem+0xff802f94>
  80b274:	2c8fc83a 	sub	r7,r5,r18
  80b278:	1545c83a 	sub	r2,r2,r21
  80b27c:	29cb803a 	cmpltu	r5,r5,r7
  80b280:	1145c83a 	sub	r2,r2,r5
  80b284:	4089c83a 	sub	r4,r8,r2
  80b288:	003fc706 	br	80b1a8 <__alt_mem_onchip_mem+0xff8031a8>
  80b28c:	01000604 	movi	r4,24
  80b290:	003f1806 	br	80aef4 <__alt_mem_onchip_mem+0xff802ef4>
  80b294:	00800604 	movi	r2,24
  80b298:	003f3206 	br	80af64 <__alt_mem_onchip_mem+0xff802f64>
  80b29c:	01000604 	movi	r4,24
  80b2a0:	003ed906 	br	80ae08 <__alt_mem_onchip_mem+0xff802e08>
  80b2a4:	413fa52e 	bgeu	r8,r4,80b13c <__alt_mem_onchip_mem+0xff80313c>
  80b2a8:	297fff84 	addi	r5,r5,-2
  80b2ac:	4551883a 	add	r8,r8,r21
  80b2b0:	003fa306 	br	80b140 <__alt_mem_onchip_mem+0xff803140>
  80b2b4:	15ff8b2e 	bgeu	r2,r23,80b0e4 <__alt_mem_onchip_mem+0xff8030e4>
  80b2b8:	31bfff84 	addi	r6,r6,-2
  80b2bc:	1545883a 	add	r2,r2,r21
  80b2c0:	003f8906 	br	80b0e8 <__alt_mem_onchip_mem+0xff8030e8>
  80b2c4:	24c9883a 	add	r4,r4,r19
  80b2c8:	003eee06 	br	80ae84 <__alt_mem_onchip_mem+0xff802e84>
  80b2cc:	8005883a 	mov	r2,r16
  80b2d0:	003f1706 	br	80af30 <__alt_mem_onchip_mem+0xff802f30>
  80b2d4:	817fe736 	bltu	r16,r5,80b274 <__alt_mem_onchip_mem+0xff803274>
  80b2d8:	280f883a 	mov	r7,r5
  80b2dc:	0009883a 	mov	r4,zero
  80b2e0:	003fb106 	br	80b1a8 <__alt_mem_onchip_mem+0xff8031a8>

0080b2e4 <__divsi3>:
  80b2e4:	20001b16 	blt	r4,zero,80b354 <__divsi3+0x70>
  80b2e8:	000f883a 	mov	r7,zero
  80b2ec:	28001616 	blt	r5,zero,80b348 <__divsi3+0x64>
  80b2f0:	200d883a 	mov	r6,r4
  80b2f4:	29001a2e 	bgeu	r5,r4,80b360 <__divsi3+0x7c>
  80b2f8:	00800804 	movi	r2,32
  80b2fc:	00c00044 	movi	r3,1
  80b300:	00000106 	br	80b308 <__divsi3+0x24>
  80b304:	10000d26 	beq	r2,zero,80b33c <__divsi3+0x58>
  80b308:	294b883a 	add	r5,r5,r5
  80b30c:	10bfffc4 	addi	r2,r2,-1
  80b310:	18c7883a 	add	r3,r3,r3
  80b314:	293ffb36 	bltu	r5,r4,80b304 <__alt_mem_onchip_mem+0xff803304>
  80b318:	0005883a 	mov	r2,zero
  80b31c:	18000726 	beq	r3,zero,80b33c <__divsi3+0x58>
  80b320:	0005883a 	mov	r2,zero
  80b324:	31400236 	bltu	r6,r5,80b330 <__divsi3+0x4c>
  80b328:	314dc83a 	sub	r6,r6,r5
  80b32c:	10c4b03a 	or	r2,r2,r3
  80b330:	1806d07a 	srli	r3,r3,1
  80b334:	280ad07a 	srli	r5,r5,1
  80b338:	183ffa1e 	bne	r3,zero,80b324 <__alt_mem_onchip_mem+0xff803324>
  80b33c:	38000126 	beq	r7,zero,80b344 <__divsi3+0x60>
  80b340:	0085c83a 	sub	r2,zero,r2
  80b344:	f800283a 	ret
  80b348:	014bc83a 	sub	r5,zero,r5
  80b34c:	39c0005c 	xori	r7,r7,1
  80b350:	003fe706 	br	80b2f0 <__alt_mem_onchip_mem+0xff8032f0>
  80b354:	0109c83a 	sub	r4,zero,r4
  80b358:	01c00044 	movi	r7,1
  80b35c:	003fe306 	br	80b2ec <__alt_mem_onchip_mem+0xff8032ec>
  80b360:	00c00044 	movi	r3,1
  80b364:	003fee06 	br	80b320 <__alt_mem_onchip_mem+0xff803320>

0080b368 <__modsi3>:
  80b368:	20001716 	blt	r4,zero,80b3c8 <__modsi3+0x60>
  80b36c:	000f883a 	mov	r7,zero
  80b370:	2005883a 	mov	r2,r4
  80b374:	28001216 	blt	r5,zero,80b3c0 <__modsi3+0x58>
  80b378:	2900162e 	bgeu	r5,r4,80b3d4 <__modsi3+0x6c>
  80b37c:	01800804 	movi	r6,32
  80b380:	00c00044 	movi	r3,1
  80b384:	00000106 	br	80b38c <__modsi3+0x24>
  80b388:	30000a26 	beq	r6,zero,80b3b4 <__modsi3+0x4c>
  80b38c:	294b883a 	add	r5,r5,r5
  80b390:	31bfffc4 	addi	r6,r6,-1
  80b394:	18c7883a 	add	r3,r3,r3
  80b398:	293ffb36 	bltu	r5,r4,80b388 <__alt_mem_onchip_mem+0xff803388>
  80b39c:	18000526 	beq	r3,zero,80b3b4 <__modsi3+0x4c>
  80b3a0:	1806d07a 	srli	r3,r3,1
  80b3a4:	11400136 	bltu	r2,r5,80b3ac <__modsi3+0x44>
  80b3a8:	1145c83a 	sub	r2,r2,r5
  80b3ac:	280ad07a 	srli	r5,r5,1
  80b3b0:	183ffb1e 	bne	r3,zero,80b3a0 <__alt_mem_onchip_mem+0xff8033a0>
  80b3b4:	38000126 	beq	r7,zero,80b3bc <__modsi3+0x54>
  80b3b8:	0085c83a 	sub	r2,zero,r2
  80b3bc:	f800283a 	ret
  80b3c0:	014bc83a 	sub	r5,zero,r5
  80b3c4:	003fec06 	br	80b378 <__alt_mem_onchip_mem+0xff803378>
  80b3c8:	0109c83a 	sub	r4,zero,r4
  80b3cc:	01c00044 	movi	r7,1
  80b3d0:	003fe706 	br	80b370 <__alt_mem_onchip_mem+0xff803370>
  80b3d4:	00c00044 	movi	r3,1
  80b3d8:	003ff106 	br	80b3a0 <__alt_mem_onchip_mem+0xff8033a0>

0080b3dc <__udivsi3>:
  80b3dc:	200d883a 	mov	r6,r4
  80b3e0:	2900152e 	bgeu	r5,r4,80b438 <__udivsi3+0x5c>
  80b3e4:	28001416 	blt	r5,zero,80b438 <__udivsi3+0x5c>
  80b3e8:	00800804 	movi	r2,32
  80b3ec:	00c00044 	movi	r3,1
  80b3f0:	00000206 	br	80b3fc <__udivsi3+0x20>
  80b3f4:	10000e26 	beq	r2,zero,80b430 <__udivsi3+0x54>
  80b3f8:	28000516 	blt	r5,zero,80b410 <__udivsi3+0x34>
  80b3fc:	294b883a 	add	r5,r5,r5
  80b400:	10bfffc4 	addi	r2,r2,-1
  80b404:	18c7883a 	add	r3,r3,r3
  80b408:	293ffa36 	bltu	r5,r4,80b3f4 <__alt_mem_onchip_mem+0xff8033f4>
  80b40c:	18000826 	beq	r3,zero,80b430 <__udivsi3+0x54>
  80b410:	0005883a 	mov	r2,zero
  80b414:	31400236 	bltu	r6,r5,80b420 <__udivsi3+0x44>
  80b418:	314dc83a 	sub	r6,r6,r5
  80b41c:	10c4b03a 	or	r2,r2,r3
  80b420:	1806d07a 	srli	r3,r3,1
  80b424:	280ad07a 	srli	r5,r5,1
  80b428:	183ffa1e 	bne	r3,zero,80b414 <__alt_mem_onchip_mem+0xff803414>
  80b42c:	f800283a 	ret
  80b430:	0005883a 	mov	r2,zero
  80b434:	f800283a 	ret
  80b438:	00c00044 	movi	r3,1
  80b43c:	003ff406 	br	80b410 <__alt_mem_onchip_mem+0xff803410>

0080b440 <__umodsi3>:
  80b440:	2005883a 	mov	r2,r4
  80b444:	2900122e 	bgeu	r5,r4,80b490 <__umodsi3+0x50>
  80b448:	28001116 	blt	r5,zero,80b490 <__umodsi3+0x50>
  80b44c:	01800804 	movi	r6,32
  80b450:	00c00044 	movi	r3,1
  80b454:	00000206 	br	80b460 <__umodsi3+0x20>
  80b458:	30000c26 	beq	r6,zero,80b48c <__umodsi3+0x4c>
  80b45c:	28000516 	blt	r5,zero,80b474 <__umodsi3+0x34>
  80b460:	294b883a 	add	r5,r5,r5
  80b464:	31bfffc4 	addi	r6,r6,-1
  80b468:	18c7883a 	add	r3,r3,r3
  80b46c:	293ffa36 	bltu	r5,r4,80b458 <__alt_mem_onchip_mem+0xff803458>
  80b470:	18000626 	beq	r3,zero,80b48c <__umodsi3+0x4c>
  80b474:	1806d07a 	srli	r3,r3,1
  80b478:	11400136 	bltu	r2,r5,80b480 <__umodsi3+0x40>
  80b47c:	1145c83a 	sub	r2,r2,r5
  80b480:	280ad07a 	srli	r5,r5,1
  80b484:	183ffb1e 	bne	r3,zero,80b474 <__alt_mem_onchip_mem+0xff803474>
  80b488:	f800283a 	ret
  80b48c:	f800283a 	ret
  80b490:	00c00044 	movi	r3,1
  80b494:	003ff706 	br	80b474 <__alt_mem_onchip_mem+0xff803474>

0080b498 <__adddf3>:
  80b498:	02c00434 	movhi	r11,16
  80b49c:	5affffc4 	addi	r11,r11,-1
  80b4a0:	2806d7fa 	srli	r3,r5,31
  80b4a4:	2ad4703a 	and	r10,r5,r11
  80b4a8:	3ad2703a 	and	r9,r7,r11
  80b4ac:	3804d53a 	srli	r2,r7,20
  80b4b0:	3018d77a 	srli	r12,r6,29
  80b4b4:	280ad53a 	srli	r5,r5,20
  80b4b8:	501490fa 	slli	r10,r10,3
  80b4bc:	2010d77a 	srli	r8,r4,29
  80b4c0:	481290fa 	slli	r9,r9,3
  80b4c4:	380ed7fa 	srli	r7,r7,31
  80b4c8:	defffb04 	addi	sp,sp,-20
  80b4cc:	dc800215 	stw	r18,8(sp)
  80b4d0:	dc400115 	stw	r17,4(sp)
  80b4d4:	dc000015 	stw	r16,0(sp)
  80b4d8:	dfc00415 	stw	ra,16(sp)
  80b4dc:	dcc00315 	stw	r19,12(sp)
  80b4e0:	1c803fcc 	andi	r18,r3,255
  80b4e4:	2c01ffcc 	andi	r16,r5,2047
  80b4e8:	5210b03a 	or	r8,r10,r8
  80b4ec:	202290fa 	slli	r17,r4,3
  80b4f0:	1081ffcc 	andi	r2,r2,2047
  80b4f4:	4b12b03a 	or	r9,r9,r12
  80b4f8:	300c90fa 	slli	r6,r6,3
  80b4fc:	91c07526 	beq	r18,r7,80b6d4 <__adddf3+0x23c>
  80b500:	8087c83a 	sub	r3,r16,r2
  80b504:	00c0ab0e 	bge	zero,r3,80b7b4 <__adddf3+0x31c>
  80b508:	10002a1e 	bne	r2,zero,80b5b4 <__adddf3+0x11c>
  80b50c:	4984b03a 	or	r2,r9,r6
  80b510:	1000961e 	bne	r2,zero,80b76c <__adddf3+0x2d4>
  80b514:	888001cc 	andi	r2,r17,7
  80b518:	10000726 	beq	r2,zero,80b538 <__adddf3+0xa0>
  80b51c:	888003cc 	andi	r2,r17,15
  80b520:	00c00104 	movi	r3,4
  80b524:	10c00426 	beq	r2,r3,80b538 <__adddf3+0xa0>
  80b528:	88c7883a 	add	r3,r17,r3
  80b52c:	1c63803a 	cmpltu	r17,r3,r17
  80b530:	4451883a 	add	r8,r8,r17
  80b534:	1823883a 	mov	r17,r3
  80b538:	4080202c 	andhi	r2,r8,128
  80b53c:	10005926 	beq	r2,zero,80b6a4 <__adddf3+0x20c>
  80b540:	84000044 	addi	r16,r16,1
  80b544:	0081ffc4 	movi	r2,2047
  80b548:	8080ba26 	beq	r16,r2,80b834 <__adddf3+0x39c>
  80b54c:	00bfe034 	movhi	r2,65408
  80b550:	10bfffc4 	addi	r2,r2,-1
  80b554:	4090703a 	and	r8,r8,r2
  80b558:	4004977a 	slli	r2,r8,29
  80b55c:	4010927a 	slli	r8,r8,9
  80b560:	8822d0fa 	srli	r17,r17,3
  80b564:	8401ffcc 	andi	r16,r16,2047
  80b568:	4010d33a 	srli	r8,r8,12
  80b56c:	9007883a 	mov	r3,r18
  80b570:	1444b03a 	or	r2,r2,r17
  80b574:	8401ffcc 	andi	r16,r16,2047
  80b578:	8020953a 	slli	r16,r16,20
  80b57c:	18c03fcc 	andi	r3,r3,255
  80b580:	01000434 	movhi	r4,16
  80b584:	213fffc4 	addi	r4,r4,-1
  80b588:	180697fa 	slli	r3,r3,31
  80b58c:	4110703a 	and	r8,r8,r4
  80b590:	4410b03a 	or	r8,r8,r16
  80b594:	40c6b03a 	or	r3,r8,r3
  80b598:	dfc00417 	ldw	ra,16(sp)
  80b59c:	dcc00317 	ldw	r19,12(sp)
  80b5a0:	dc800217 	ldw	r18,8(sp)
  80b5a4:	dc400117 	ldw	r17,4(sp)
  80b5a8:	dc000017 	ldw	r16,0(sp)
  80b5ac:	dec00504 	addi	sp,sp,20
  80b5b0:	f800283a 	ret
  80b5b4:	0081ffc4 	movi	r2,2047
  80b5b8:	80bfd626 	beq	r16,r2,80b514 <__alt_mem_onchip_mem+0xff803514>
  80b5bc:	4a402034 	orhi	r9,r9,128
  80b5c0:	00800e04 	movi	r2,56
  80b5c4:	10c09f16 	blt	r2,r3,80b844 <__adddf3+0x3ac>
  80b5c8:	008007c4 	movi	r2,31
  80b5cc:	10c0c216 	blt	r2,r3,80b8d8 <__adddf3+0x440>
  80b5d0:	00800804 	movi	r2,32
  80b5d4:	10c5c83a 	sub	r2,r2,r3
  80b5d8:	488a983a 	sll	r5,r9,r2
  80b5dc:	30c8d83a 	srl	r4,r6,r3
  80b5e0:	3084983a 	sll	r2,r6,r2
  80b5e4:	48c6d83a 	srl	r3,r9,r3
  80b5e8:	290cb03a 	or	r6,r5,r4
  80b5ec:	1004c03a 	cmpne	r2,r2,zero
  80b5f0:	308cb03a 	or	r6,r6,r2
  80b5f4:	898dc83a 	sub	r6,r17,r6
  80b5f8:	89a3803a 	cmpltu	r17,r17,r6
  80b5fc:	40d1c83a 	sub	r8,r8,r3
  80b600:	4451c83a 	sub	r8,r8,r17
  80b604:	3023883a 	mov	r17,r6
  80b608:	4080202c 	andhi	r2,r8,128
  80b60c:	10002326 	beq	r2,zero,80b69c <__adddf3+0x204>
  80b610:	04c02034 	movhi	r19,128
  80b614:	9cffffc4 	addi	r19,r19,-1
  80b618:	44e6703a 	and	r19,r8,r19
  80b61c:	98007626 	beq	r19,zero,80b7f8 <__adddf3+0x360>
  80b620:	9809883a 	mov	r4,r19
  80b624:	080da9c0 	call	80da9c <__clzsi2>
  80b628:	10fffe04 	addi	r3,r2,-8
  80b62c:	010007c4 	movi	r4,31
  80b630:	20c07716 	blt	r4,r3,80b810 <__adddf3+0x378>
  80b634:	00800804 	movi	r2,32
  80b638:	10c5c83a 	sub	r2,r2,r3
  80b63c:	8884d83a 	srl	r2,r17,r2
  80b640:	98d0983a 	sll	r8,r19,r3
  80b644:	88e2983a 	sll	r17,r17,r3
  80b648:	1204b03a 	or	r2,r2,r8
  80b64c:	1c007416 	blt	r3,r16,80b820 <__adddf3+0x388>
  80b650:	1c21c83a 	sub	r16,r3,r16
  80b654:	82000044 	addi	r8,r16,1
  80b658:	00c007c4 	movi	r3,31
  80b65c:	1a009116 	blt	r3,r8,80b8a4 <__adddf3+0x40c>
  80b660:	00c00804 	movi	r3,32
  80b664:	1a07c83a 	sub	r3,r3,r8
  80b668:	8a08d83a 	srl	r4,r17,r8
  80b66c:	88e2983a 	sll	r17,r17,r3
  80b670:	10c6983a 	sll	r3,r2,r3
  80b674:	1210d83a 	srl	r8,r2,r8
  80b678:	8804c03a 	cmpne	r2,r17,zero
  80b67c:	1906b03a 	or	r3,r3,r4
  80b680:	18a2b03a 	or	r17,r3,r2
  80b684:	0021883a 	mov	r16,zero
  80b688:	003fa206 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80b68c:	1890b03a 	or	r8,r3,r2
  80b690:	40017d26 	beq	r8,zero,80bc88 <__adddf3+0x7f0>
  80b694:	1011883a 	mov	r8,r2
  80b698:	1823883a 	mov	r17,r3
  80b69c:	888001cc 	andi	r2,r17,7
  80b6a0:	103f9e1e 	bne	r2,zero,80b51c <__alt_mem_onchip_mem+0xff80351c>
  80b6a4:	4004977a 	slli	r2,r8,29
  80b6a8:	8822d0fa 	srli	r17,r17,3
  80b6ac:	4010d0fa 	srli	r8,r8,3
  80b6b0:	9007883a 	mov	r3,r18
  80b6b4:	1444b03a 	or	r2,r2,r17
  80b6b8:	0101ffc4 	movi	r4,2047
  80b6bc:	81002426 	beq	r16,r4,80b750 <__adddf3+0x2b8>
  80b6c0:	8120703a 	and	r16,r16,r4
  80b6c4:	01000434 	movhi	r4,16
  80b6c8:	213fffc4 	addi	r4,r4,-1
  80b6cc:	4110703a 	and	r8,r8,r4
  80b6d0:	003fa806 	br	80b574 <__alt_mem_onchip_mem+0xff803574>
  80b6d4:	8089c83a 	sub	r4,r16,r2
  80b6d8:	01005e0e 	bge	zero,r4,80b854 <__adddf3+0x3bc>
  80b6dc:	10002b26 	beq	r2,zero,80b78c <__adddf3+0x2f4>
  80b6e0:	0081ffc4 	movi	r2,2047
  80b6e4:	80bf8b26 	beq	r16,r2,80b514 <__alt_mem_onchip_mem+0xff803514>
  80b6e8:	4a402034 	orhi	r9,r9,128
  80b6ec:	00800e04 	movi	r2,56
  80b6f0:	1100a40e 	bge	r2,r4,80b984 <__adddf3+0x4ec>
  80b6f4:	498cb03a 	or	r6,r9,r6
  80b6f8:	300ac03a 	cmpne	r5,r6,zero
  80b6fc:	0013883a 	mov	r9,zero
  80b700:	2c4b883a 	add	r5,r5,r17
  80b704:	2c63803a 	cmpltu	r17,r5,r17
  80b708:	4a11883a 	add	r8,r9,r8
  80b70c:	8a11883a 	add	r8,r17,r8
  80b710:	2823883a 	mov	r17,r5
  80b714:	4080202c 	andhi	r2,r8,128
  80b718:	103fe026 	beq	r2,zero,80b69c <__alt_mem_onchip_mem+0xff80369c>
  80b71c:	84000044 	addi	r16,r16,1
  80b720:	0081ffc4 	movi	r2,2047
  80b724:	8080d226 	beq	r16,r2,80ba70 <__adddf3+0x5d8>
  80b728:	00bfe034 	movhi	r2,65408
  80b72c:	10bfffc4 	addi	r2,r2,-1
  80b730:	4090703a 	and	r8,r8,r2
  80b734:	880ad07a 	srli	r5,r17,1
  80b738:	400897fa 	slli	r4,r8,31
  80b73c:	88c0004c 	andi	r3,r17,1
  80b740:	28e2b03a 	or	r17,r5,r3
  80b744:	4010d07a 	srli	r8,r8,1
  80b748:	2462b03a 	or	r17,r4,r17
  80b74c:	003f7106 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80b750:	4088b03a 	or	r4,r8,r2
  80b754:	20014526 	beq	r4,zero,80bc6c <__adddf3+0x7d4>
  80b758:	01000434 	movhi	r4,16
  80b75c:	42000234 	orhi	r8,r8,8
  80b760:	213fffc4 	addi	r4,r4,-1
  80b764:	4110703a 	and	r8,r8,r4
  80b768:	003f8206 	br	80b574 <__alt_mem_onchip_mem+0xff803574>
  80b76c:	18ffffc4 	addi	r3,r3,-1
  80b770:	1800491e 	bne	r3,zero,80b898 <__adddf3+0x400>
  80b774:	898bc83a 	sub	r5,r17,r6
  80b778:	8963803a 	cmpltu	r17,r17,r5
  80b77c:	4251c83a 	sub	r8,r8,r9
  80b780:	4451c83a 	sub	r8,r8,r17
  80b784:	2823883a 	mov	r17,r5
  80b788:	003f9f06 	br	80b608 <__alt_mem_onchip_mem+0xff803608>
  80b78c:	4984b03a 	or	r2,r9,r6
  80b790:	103f6026 	beq	r2,zero,80b514 <__alt_mem_onchip_mem+0xff803514>
  80b794:	213fffc4 	addi	r4,r4,-1
  80b798:	2000931e 	bne	r4,zero,80b9e8 <__adddf3+0x550>
  80b79c:	898d883a 	add	r6,r17,r6
  80b7a0:	3463803a 	cmpltu	r17,r6,r17
  80b7a4:	4251883a 	add	r8,r8,r9
  80b7a8:	8a11883a 	add	r8,r17,r8
  80b7ac:	3023883a 	mov	r17,r6
  80b7b0:	003fd806 	br	80b714 <__alt_mem_onchip_mem+0xff803714>
  80b7b4:	1800541e 	bne	r3,zero,80b908 <__adddf3+0x470>
  80b7b8:	80800044 	addi	r2,r16,1
  80b7bc:	1081ffcc 	andi	r2,r2,2047
  80b7c0:	00c00044 	movi	r3,1
  80b7c4:	1880a00e 	bge	r3,r2,80ba48 <__adddf3+0x5b0>
  80b7c8:	8989c83a 	sub	r4,r17,r6
  80b7cc:	8905803a 	cmpltu	r2,r17,r4
  80b7d0:	4267c83a 	sub	r19,r8,r9
  80b7d4:	98a7c83a 	sub	r19,r19,r2
  80b7d8:	9880202c 	andhi	r2,r19,128
  80b7dc:	10006326 	beq	r2,zero,80b96c <__adddf3+0x4d4>
  80b7e0:	3463c83a 	sub	r17,r6,r17
  80b7e4:	4a07c83a 	sub	r3,r9,r8
  80b7e8:	344d803a 	cmpltu	r6,r6,r17
  80b7ec:	19a7c83a 	sub	r19,r3,r6
  80b7f0:	3825883a 	mov	r18,r7
  80b7f4:	983f8a1e 	bne	r19,zero,80b620 <__alt_mem_onchip_mem+0xff803620>
  80b7f8:	8809883a 	mov	r4,r17
  80b7fc:	080da9c0 	call	80da9c <__clzsi2>
  80b800:	10800804 	addi	r2,r2,32
  80b804:	10fffe04 	addi	r3,r2,-8
  80b808:	010007c4 	movi	r4,31
  80b80c:	20ff890e 	bge	r4,r3,80b634 <__alt_mem_onchip_mem+0xff803634>
  80b810:	10bff604 	addi	r2,r2,-40
  80b814:	8884983a 	sll	r2,r17,r2
  80b818:	0023883a 	mov	r17,zero
  80b81c:	1c3f8c0e 	bge	r3,r16,80b650 <__alt_mem_onchip_mem+0xff803650>
  80b820:	023fe034 	movhi	r8,65408
  80b824:	423fffc4 	addi	r8,r8,-1
  80b828:	80e1c83a 	sub	r16,r16,r3
  80b82c:	1210703a 	and	r8,r2,r8
  80b830:	003f3806 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80b834:	9007883a 	mov	r3,r18
  80b838:	0011883a 	mov	r8,zero
  80b83c:	0005883a 	mov	r2,zero
  80b840:	003f4c06 	br	80b574 <__alt_mem_onchip_mem+0xff803574>
  80b844:	498cb03a 	or	r6,r9,r6
  80b848:	300cc03a 	cmpne	r6,r6,zero
  80b84c:	0007883a 	mov	r3,zero
  80b850:	003f6806 	br	80b5f4 <__alt_mem_onchip_mem+0xff8035f4>
  80b854:	20009c1e 	bne	r4,zero,80bac8 <__adddf3+0x630>
  80b858:	80800044 	addi	r2,r16,1
  80b85c:	1141ffcc 	andi	r5,r2,2047
  80b860:	01000044 	movi	r4,1
  80b864:	2140670e 	bge	r4,r5,80ba04 <__adddf3+0x56c>
  80b868:	0101ffc4 	movi	r4,2047
  80b86c:	11007f26 	beq	r2,r4,80ba6c <__adddf3+0x5d4>
  80b870:	898d883a 	add	r6,r17,r6
  80b874:	4247883a 	add	r3,r8,r9
  80b878:	3451803a 	cmpltu	r8,r6,r17
  80b87c:	40d1883a 	add	r8,r8,r3
  80b880:	402297fa 	slli	r17,r8,31
  80b884:	300cd07a 	srli	r6,r6,1
  80b888:	4010d07a 	srli	r8,r8,1
  80b88c:	1021883a 	mov	r16,r2
  80b890:	89a2b03a 	or	r17,r17,r6
  80b894:	003f1f06 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80b898:	0081ffc4 	movi	r2,2047
  80b89c:	80bf481e 	bne	r16,r2,80b5c0 <__alt_mem_onchip_mem+0xff8035c0>
  80b8a0:	003f1c06 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80b8a4:	843ff844 	addi	r16,r16,-31
  80b8a8:	01000804 	movi	r4,32
  80b8ac:	1406d83a 	srl	r3,r2,r16
  80b8b0:	41005026 	beq	r8,r4,80b9f4 <__adddf3+0x55c>
  80b8b4:	01001004 	movi	r4,64
  80b8b8:	2211c83a 	sub	r8,r4,r8
  80b8bc:	1204983a 	sll	r2,r2,r8
  80b8c0:	88a2b03a 	or	r17,r17,r2
  80b8c4:	8822c03a 	cmpne	r17,r17,zero
  80b8c8:	1c62b03a 	or	r17,r3,r17
  80b8cc:	0011883a 	mov	r8,zero
  80b8d0:	0021883a 	mov	r16,zero
  80b8d4:	003f7106 	br	80b69c <__alt_mem_onchip_mem+0xff80369c>
  80b8d8:	193ff804 	addi	r4,r3,-32
  80b8dc:	00800804 	movi	r2,32
  80b8e0:	4908d83a 	srl	r4,r9,r4
  80b8e4:	18804526 	beq	r3,r2,80b9fc <__adddf3+0x564>
  80b8e8:	00801004 	movi	r2,64
  80b8ec:	10c5c83a 	sub	r2,r2,r3
  80b8f0:	4886983a 	sll	r3,r9,r2
  80b8f4:	198cb03a 	or	r6,r3,r6
  80b8f8:	300cc03a 	cmpne	r6,r6,zero
  80b8fc:	218cb03a 	or	r6,r4,r6
  80b900:	0007883a 	mov	r3,zero
  80b904:	003f3b06 	br	80b5f4 <__alt_mem_onchip_mem+0xff8035f4>
  80b908:	80002a26 	beq	r16,zero,80b9b4 <__adddf3+0x51c>
  80b90c:	0101ffc4 	movi	r4,2047
  80b910:	11006826 	beq	r2,r4,80bab4 <__adddf3+0x61c>
  80b914:	00c7c83a 	sub	r3,zero,r3
  80b918:	42002034 	orhi	r8,r8,128
  80b91c:	01000e04 	movi	r4,56
  80b920:	20c07c16 	blt	r4,r3,80bb14 <__adddf3+0x67c>
  80b924:	010007c4 	movi	r4,31
  80b928:	20c0da16 	blt	r4,r3,80bc94 <__adddf3+0x7fc>
  80b92c:	01000804 	movi	r4,32
  80b930:	20c9c83a 	sub	r4,r4,r3
  80b934:	4114983a 	sll	r10,r8,r4
  80b938:	88cad83a 	srl	r5,r17,r3
  80b93c:	8908983a 	sll	r4,r17,r4
  80b940:	40c6d83a 	srl	r3,r8,r3
  80b944:	5162b03a 	or	r17,r10,r5
  80b948:	2008c03a 	cmpne	r4,r4,zero
  80b94c:	8922b03a 	or	r17,r17,r4
  80b950:	3463c83a 	sub	r17,r6,r17
  80b954:	48c7c83a 	sub	r3,r9,r3
  80b958:	344d803a 	cmpltu	r6,r6,r17
  80b95c:	1991c83a 	sub	r8,r3,r6
  80b960:	1021883a 	mov	r16,r2
  80b964:	3825883a 	mov	r18,r7
  80b968:	003f2706 	br	80b608 <__alt_mem_onchip_mem+0xff803608>
  80b96c:	24d0b03a 	or	r8,r4,r19
  80b970:	40001b1e 	bne	r8,zero,80b9e0 <__adddf3+0x548>
  80b974:	0005883a 	mov	r2,zero
  80b978:	0007883a 	mov	r3,zero
  80b97c:	0021883a 	mov	r16,zero
  80b980:	003f4d06 	br	80b6b8 <__alt_mem_onchip_mem+0xff8036b8>
  80b984:	008007c4 	movi	r2,31
  80b988:	11003c16 	blt	r2,r4,80ba7c <__adddf3+0x5e4>
  80b98c:	00800804 	movi	r2,32
  80b990:	1105c83a 	sub	r2,r2,r4
  80b994:	488e983a 	sll	r7,r9,r2
  80b998:	310ad83a 	srl	r5,r6,r4
  80b99c:	3084983a 	sll	r2,r6,r2
  80b9a0:	4912d83a 	srl	r9,r9,r4
  80b9a4:	394ab03a 	or	r5,r7,r5
  80b9a8:	1004c03a 	cmpne	r2,r2,zero
  80b9ac:	288ab03a 	or	r5,r5,r2
  80b9b0:	003f5306 	br	80b700 <__alt_mem_onchip_mem+0xff803700>
  80b9b4:	4448b03a 	or	r4,r8,r17
  80b9b8:	20003e26 	beq	r4,zero,80bab4 <__adddf3+0x61c>
  80b9bc:	00c6303a 	nor	r3,zero,r3
  80b9c0:	18003a1e 	bne	r3,zero,80baac <__adddf3+0x614>
  80b9c4:	3463c83a 	sub	r17,r6,r17
  80b9c8:	4a07c83a 	sub	r3,r9,r8
  80b9cc:	344d803a 	cmpltu	r6,r6,r17
  80b9d0:	1991c83a 	sub	r8,r3,r6
  80b9d4:	1021883a 	mov	r16,r2
  80b9d8:	3825883a 	mov	r18,r7
  80b9dc:	003f0a06 	br	80b608 <__alt_mem_onchip_mem+0xff803608>
  80b9e0:	2023883a 	mov	r17,r4
  80b9e4:	003f0d06 	br	80b61c <__alt_mem_onchip_mem+0xff80361c>
  80b9e8:	0081ffc4 	movi	r2,2047
  80b9ec:	80bf3f1e 	bne	r16,r2,80b6ec <__alt_mem_onchip_mem+0xff8036ec>
  80b9f0:	003ec806 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80b9f4:	0005883a 	mov	r2,zero
  80b9f8:	003fb106 	br	80b8c0 <__alt_mem_onchip_mem+0xff8038c0>
  80b9fc:	0007883a 	mov	r3,zero
  80ba00:	003fbc06 	br	80b8f4 <__alt_mem_onchip_mem+0xff8038f4>
  80ba04:	4444b03a 	or	r2,r8,r17
  80ba08:	8000871e 	bne	r16,zero,80bc28 <__adddf3+0x790>
  80ba0c:	1000ba26 	beq	r2,zero,80bcf8 <__adddf3+0x860>
  80ba10:	4984b03a 	or	r2,r9,r6
  80ba14:	103ebf26 	beq	r2,zero,80b514 <__alt_mem_onchip_mem+0xff803514>
  80ba18:	8985883a 	add	r2,r17,r6
  80ba1c:	4247883a 	add	r3,r8,r9
  80ba20:	1451803a 	cmpltu	r8,r2,r17
  80ba24:	40d1883a 	add	r8,r8,r3
  80ba28:	40c0202c 	andhi	r3,r8,128
  80ba2c:	1023883a 	mov	r17,r2
  80ba30:	183f1a26 	beq	r3,zero,80b69c <__alt_mem_onchip_mem+0xff80369c>
  80ba34:	00bfe034 	movhi	r2,65408
  80ba38:	10bfffc4 	addi	r2,r2,-1
  80ba3c:	2021883a 	mov	r16,r4
  80ba40:	4090703a 	and	r8,r8,r2
  80ba44:	003eb306 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80ba48:	4444b03a 	or	r2,r8,r17
  80ba4c:	8000291e 	bne	r16,zero,80baf4 <__adddf3+0x65c>
  80ba50:	10004b1e 	bne	r2,zero,80bb80 <__adddf3+0x6e8>
  80ba54:	4990b03a 	or	r8,r9,r6
  80ba58:	40008b26 	beq	r8,zero,80bc88 <__adddf3+0x7f0>
  80ba5c:	4811883a 	mov	r8,r9
  80ba60:	3023883a 	mov	r17,r6
  80ba64:	3825883a 	mov	r18,r7
  80ba68:	003eaa06 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80ba6c:	1021883a 	mov	r16,r2
  80ba70:	0011883a 	mov	r8,zero
  80ba74:	0005883a 	mov	r2,zero
  80ba78:	003f0f06 	br	80b6b8 <__alt_mem_onchip_mem+0xff8036b8>
  80ba7c:	217ff804 	addi	r5,r4,-32
  80ba80:	00800804 	movi	r2,32
  80ba84:	494ad83a 	srl	r5,r9,r5
  80ba88:	20807d26 	beq	r4,r2,80bc80 <__adddf3+0x7e8>
  80ba8c:	00801004 	movi	r2,64
  80ba90:	1109c83a 	sub	r4,r2,r4
  80ba94:	4912983a 	sll	r9,r9,r4
  80ba98:	498cb03a 	or	r6,r9,r6
  80ba9c:	300cc03a 	cmpne	r6,r6,zero
  80baa0:	298ab03a 	or	r5,r5,r6
  80baa4:	0013883a 	mov	r9,zero
  80baa8:	003f1506 	br	80b700 <__alt_mem_onchip_mem+0xff803700>
  80baac:	0101ffc4 	movi	r4,2047
  80bab0:	113f9a1e 	bne	r2,r4,80b91c <__alt_mem_onchip_mem+0xff80391c>
  80bab4:	4811883a 	mov	r8,r9
  80bab8:	3023883a 	mov	r17,r6
  80babc:	1021883a 	mov	r16,r2
  80bac0:	3825883a 	mov	r18,r7
  80bac4:	003e9306 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80bac8:	8000161e 	bne	r16,zero,80bb24 <__adddf3+0x68c>
  80bacc:	444ab03a 	or	r5,r8,r17
  80bad0:	28005126 	beq	r5,zero,80bc18 <__adddf3+0x780>
  80bad4:	0108303a 	nor	r4,zero,r4
  80bad8:	20004d1e 	bne	r4,zero,80bc10 <__adddf3+0x778>
  80badc:	89a3883a 	add	r17,r17,r6
  80bae0:	4253883a 	add	r9,r8,r9
  80bae4:	898d803a 	cmpltu	r6,r17,r6
  80bae8:	3251883a 	add	r8,r6,r9
  80baec:	1021883a 	mov	r16,r2
  80baf0:	003f0806 	br	80b714 <__alt_mem_onchip_mem+0xff803714>
  80baf4:	1000301e 	bne	r2,zero,80bbb8 <__adddf3+0x720>
  80baf8:	4984b03a 	or	r2,r9,r6
  80bafc:	10007126 	beq	r2,zero,80bcc4 <__adddf3+0x82c>
  80bb00:	4811883a 	mov	r8,r9
  80bb04:	3023883a 	mov	r17,r6
  80bb08:	3825883a 	mov	r18,r7
  80bb0c:	0401ffc4 	movi	r16,2047
  80bb10:	003e8006 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80bb14:	4462b03a 	or	r17,r8,r17
  80bb18:	8822c03a 	cmpne	r17,r17,zero
  80bb1c:	0007883a 	mov	r3,zero
  80bb20:	003f8b06 	br	80b950 <__alt_mem_onchip_mem+0xff803950>
  80bb24:	0141ffc4 	movi	r5,2047
  80bb28:	11403b26 	beq	r2,r5,80bc18 <__adddf3+0x780>
  80bb2c:	0109c83a 	sub	r4,zero,r4
  80bb30:	42002034 	orhi	r8,r8,128
  80bb34:	01400e04 	movi	r5,56
  80bb38:	29006716 	blt	r5,r4,80bcd8 <__adddf3+0x840>
  80bb3c:	014007c4 	movi	r5,31
  80bb40:	29007016 	blt	r5,r4,80bd04 <__adddf3+0x86c>
  80bb44:	01400804 	movi	r5,32
  80bb48:	290bc83a 	sub	r5,r5,r4
  80bb4c:	4154983a 	sll	r10,r8,r5
  80bb50:	890ed83a 	srl	r7,r17,r4
  80bb54:	894a983a 	sll	r5,r17,r5
  80bb58:	4108d83a 	srl	r4,r8,r4
  80bb5c:	51e2b03a 	or	r17,r10,r7
  80bb60:	280ac03a 	cmpne	r5,r5,zero
  80bb64:	8962b03a 	or	r17,r17,r5
  80bb68:	89a3883a 	add	r17,r17,r6
  80bb6c:	2253883a 	add	r9,r4,r9
  80bb70:	898d803a 	cmpltu	r6,r17,r6
  80bb74:	3251883a 	add	r8,r6,r9
  80bb78:	1021883a 	mov	r16,r2
  80bb7c:	003ee506 	br	80b714 <__alt_mem_onchip_mem+0xff803714>
  80bb80:	4984b03a 	or	r2,r9,r6
  80bb84:	103e6326 	beq	r2,zero,80b514 <__alt_mem_onchip_mem+0xff803514>
  80bb88:	8987c83a 	sub	r3,r17,r6
  80bb8c:	88c9803a 	cmpltu	r4,r17,r3
  80bb90:	4245c83a 	sub	r2,r8,r9
  80bb94:	1105c83a 	sub	r2,r2,r4
  80bb98:	1100202c 	andhi	r4,r2,128
  80bb9c:	203ebb26 	beq	r4,zero,80b68c <__alt_mem_onchip_mem+0xff80368c>
  80bba0:	3463c83a 	sub	r17,r6,r17
  80bba4:	4a07c83a 	sub	r3,r9,r8
  80bba8:	344d803a 	cmpltu	r6,r6,r17
  80bbac:	1991c83a 	sub	r8,r3,r6
  80bbb0:	3825883a 	mov	r18,r7
  80bbb4:	003e5706 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80bbb8:	4984b03a 	or	r2,r9,r6
  80bbbc:	10002e26 	beq	r2,zero,80bc78 <__adddf3+0x7e0>
  80bbc0:	4004d0fa 	srli	r2,r8,3
  80bbc4:	8822d0fa 	srli	r17,r17,3
  80bbc8:	4010977a 	slli	r8,r8,29
  80bbcc:	10c0022c 	andhi	r3,r2,8
  80bbd0:	4462b03a 	or	r17,r8,r17
  80bbd4:	18000826 	beq	r3,zero,80bbf8 <__adddf3+0x760>
  80bbd8:	4808d0fa 	srli	r4,r9,3
  80bbdc:	20c0022c 	andhi	r3,r4,8
  80bbe0:	1800051e 	bne	r3,zero,80bbf8 <__adddf3+0x760>
  80bbe4:	300cd0fa 	srli	r6,r6,3
  80bbe8:	4806977a 	slli	r3,r9,29
  80bbec:	2005883a 	mov	r2,r4
  80bbf0:	3825883a 	mov	r18,r7
  80bbf4:	19a2b03a 	or	r17,r3,r6
  80bbf8:	8810d77a 	srli	r8,r17,29
  80bbfc:	100490fa 	slli	r2,r2,3
  80bc00:	882290fa 	slli	r17,r17,3
  80bc04:	0401ffc4 	movi	r16,2047
  80bc08:	4090b03a 	or	r8,r8,r2
  80bc0c:	003e4106 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80bc10:	0141ffc4 	movi	r5,2047
  80bc14:	117fc71e 	bne	r2,r5,80bb34 <__alt_mem_onchip_mem+0xff803b34>
  80bc18:	4811883a 	mov	r8,r9
  80bc1c:	3023883a 	mov	r17,r6
  80bc20:	1021883a 	mov	r16,r2
  80bc24:	003e3b06 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80bc28:	10002f26 	beq	r2,zero,80bce8 <__adddf3+0x850>
  80bc2c:	4984b03a 	or	r2,r9,r6
  80bc30:	10001126 	beq	r2,zero,80bc78 <__adddf3+0x7e0>
  80bc34:	4004d0fa 	srli	r2,r8,3
  80bc38:	8822d0fa 	srli	r17,r17,3
  80bc3c:	4010977a 	slli	r8,r8,29
  80bc40:	10c0022c 	andhi	r3,r2,8
  80bc44:	4462b03a 	or	r17,r8,r17
  80bc48:	183feb26 	beq	r3,zero,80bbf8 <__alt_mem_onchip_mem+0xff803bf8>
  80bc4c:	4808d0fa 	srli	r4,r9,3
  80bc50:	20c0022c 	andhi	r3,r4,8
  80bc54:	183fe81e 	bne	r3,zero,80bbf8 <__alt_mem_onchip_mem+0xff803bf8>
  80bc58:	300cd0fa 	srli	r6,r6,3
  80bc5c:	4806977a 	slli	r3,r9,29
  80bc60:	2005883a 	mov	r2,r4
  80bc64:	19a2b03a 	or	r17,r3,r6
  80bc68:	003fe306 	br	80bbf8 <__alt_mem_onchip_mem+0xff803bf8>
  80bc6c:	0011883a 	mov	r8,zero
  80bc70:	0005883a 	mov	r2,zero
  80bc74:	003e3f06 	br	80b574 <__alt_mem_onchip_mem+0xff803574>
  80bc78:	0401ffc4 	movi	r16,2047
  80bc7c:	003e2506 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80bc80:	0013883a 	mov	r9,zero
  80bc84:	003f8406 	br	80ba98 <__alt_mem_onchip_mem+0xff803a98>
  80bc88:	0005883a 	mov	r2,zero
  80bc8c:	0007883a 	mov	r3,zero
  80bc90:	003e8906 	br	80b6b8 <__alt_mem_onchip_mem+0xff8036b8>
  80bc94:	197ff804 	addi	r5,r3,-32
  80bc98:	01000804 	movi	r4,32
  80bc9c:	414ad83a 	srl	r5,r8,r5
  80bca0:	19002426 	beq	r3,r4,80bd34 <__adddf3+0x89c>
  80bca4:	01001004 	movi	r4,64
  80bca8:	20c7c83a 	sub	r3,r4,r3
  80bcac:	40c6983a 	sll	r3,r8,r3
  80bcb0:	1c46b03a 	or	r3,r3,r17
  80bcb4:	1806c03a 	cmpne	r3,r3,zero
  80bcb8:	28e2b03a 	or	r17,r5,r3
  80bcbc:	0007883a 	mov	r3,zero
  80bcc0:	003f2306 	br	80b950 <__alt_mem_onchip_mem+0xff803950>
  80bcc4:	0007883a 	mov	r3,zero
  80bcc8:	5811883a 	mov	r8,r11
  80bccc:	00bfffc4 	movi	r2,-1
  80bcd0:	0401ffc4 	movi	r16,2047
  80bcd4:	003e7806 	br	80b6b8 <__alt_mem_onchip_mem+0xff8036b8>
  80bcd8:	4462b03a 	or	r17,r8,r17
  80bcdc:	8822c03a 	cmpne	r17,r17,zero
  80bce0:	0009883a 	mov	r4,zero
  80bce4:	003fa006 	br	80bb68 <__alt_mem_onchip_mem+0xff803b68>
  80bce8:	4811883a 	mov	r8,r9
  80bcec:	3023883a 	mov	r17,r6
  80bcf0:	0401ffc4 	movi	r16,2047
  80bcf4:	003e0706 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80bcf8:	4811883a 	mov	r8,r9
  80bcfc:	3023883a 	mov	r17,r6
  80bd00:	003e0406 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80bd04:	21fff804 	addi	r7,r4,-32
  80bd08:	01400804 	movi	r5,32
  80bd0c:	41ced83a 	srl	r7,r8,r7
  80bd10:	21400a26 	beq	r4,r5,80bd3c <__adddf3+0x8a4>
  80bd14:	01401004 	movi	r5,64
  80bd18:	2909c83a 	sub	r4,r5,r4
  80bd1c:	4108983a 	sll	r4,r8,r4
  80bd20:	2448b03a 	or	r4,r4,r17
  80bd24:	2008c03a 	cmpne	r4,r4,zero
  80bd28:	3922b03a 	or	r17,r7,r4
  80bd2c:	0009883a 	mov	r4,zero
  80bd30:	003f8d06 	br	80bb68 <__alt_mem_onchip_mem+0xff803b68>
  80bd34:	0007883a 	mov	r3,zero
  80bd38:	003fdd06 	br	80bcb0 <__alt_mem_onchip_mem+0xff803cb0>
  80bd3c:	0009883a 	mov	r4,zero
  80bd40:	003ff706 	br	80bd20 <__alt_mem_onchip_mem+0xff803d20>

0080bd44 <__divdf3>:
  80bd44:	defff204 	addi	sp,sp,-56
  80bd48:	dd400915 	stw	r21,36(sp)
  80bd4c:	282ad53a 	srli	r21,r5,20
  80bd50:	dd000815 	stw	r20,32(sp)
  80bd54:	2828d7fa 	srli	r20,r5,31
  80bd58:	dc000415 	stw	r16,16(sp)
  80bd5c:	04000434 	movhi	r16,16
  80bd60:	df000c15 	stw	fp,48(sp)
  80bd64:	843fffc4 	addi	r16,r16,-1
  80bd68:	dfc00d15 	stw	ra,52(sp)
  80bd6c:	ddc00b15 	stw	r23,44(sp)
  80bd70:	dd800a15 	stw	r22,40(sp)
  80bd74:	dcc00715 	stw	r19,28(sp)
  80bd78:	dc800615 	stw	r18,24(sp)
  80bd7c:	dc400515 	stw	r17,20(sp)
  80bd80:	ad41ffcc 	andi	r21,r21,2047
  80bd84:	2c20703a 	and	r16,r5,r16
  80bd88:	a7003fcc 	andi	fp,r20,255
  80bd8c:	a8006126 	beq	r21,zero,80bf14 <__divdf3+0x1d0>
  80bd90:	0081ffc4 	movi	r2,2047
  80bd94:	2025883a 	mov	r18,r4
  80bd98:	a8803726 	beq	r21,r2,80be78 <__divdf3+0x134>
  80bd9c:	80800434 	orhi	r2,r16,16
  80bda0:	100490fa 	slli	r2,r2,3
  80bda4:	2020d77a 	srli	r16,r4,29
  80bda8:	202490fa 	slli	r18,r4,3
  80bdac:	ad7f0044 	addi	r21,r21,-1023
  80bdb0:	80a0b03a 	or	r16,r16,r2
  80bdb4:	0027883a 	mov	r19,zero
  80bdb8:	0013883a 	mov	r9,zero
  80bdbc:	3804d53a 	srli	r2,r7,20
  80bdc0:	382cd7fa 	srli	r22,r7,31
  80bdc4:	04400434 	movhi	r17,16
  80bdc8:	8c7fffc4 	addi	r17,r17,-1
  80bdcc:	1081ffcc 	andi	r2,r2,2047
  80bdd0:	3011883a 	mov	r8,r6
  80bdd4:	3c62703a 	and	r17,r7,r17
  80bdd8:	b5c03fcc 	andi	r23,r22,255
  80bddc:	10006c26 	beq	r2,zero,80bf90 <__divdf3+0x24c>
  80bde0:	00c1ffc4 	movi	r3,2047
  80bde4:	10c06426 	beq	r2,r3,80bf78 <__divdf3+0x234>
  80bde8:	88c00434 	orhi	r3,r17,16
  80bdec:	180690fa 	slli	r3,r3,3
  80bdf0:	3022d77a 	srli	r17,r6,29
  80bdf4:	301090fa 	slli	r8,r6,3
  80bdf8:	10bf0044 	addi	r2,r2,-1023
  80bdfc:	88e2b03a 	or	r17,r17,r3
  80be00:	000f883a 	mov	r7,zero
  80be04:	a58cf03a 	xor	r6,r20,r22
  80be08:	3cc8b03a 	or	r4,r7,r19
  80be0c:	a8abc83a 	sub	r21,r21,r2
  80be10:	008003c4 	movi	r2,15
  80be14:	3007883a 	mov	r3,r6
  80be18:	34c03fcc 	andi	r19,r6,255
  80be1c:	11009036 	bltu	r2,r4,80c060 <__divdf3+0x31c>
  80be20:	200890ba 	slli	r4,r4,2
  80be24:	00802074 	movhi	r2,129
  80be28:	10af8e04 	addi	r2,r2,-16840
  80be2c:	2089883a 	add	r4,r4,r2
  80be30:	20800017 	ldw	r2,0(r4)
  80be34:	1000683a 	jmp	r2
  80be38:	0080c060 	cmpeqi	r2,zero,769
  80be3c:	0080beb0 	cmpltui	r2,zero,762
  80be40:	0080c050 	cmplti	r2,zero,769
  80be44:	0080bea4 	muli	r2,zero,762
  80be48:	0080c050 	cmplti	r2,zero,769
  80be4c:	0080c024 	muli	r2,zero,768
  80be50:	0080c050 	cmplti	r2,zero,769
  80be54:	0080bea4 	muli	r2,zero,762
  80be58:	0080beb0 	cmpltui	r2,zero,762
  80be5c:	0080beb0 	cmpltui	r2,zero,762
  80be60:	0080c024 	muli	r2,zero,768
  80be64:	0080bea4 	muli	r2,zero,762
  80be68:	0080be94 	movui	r2,762
  80be6c:	0080be94 	movui	r2,762
  80be70:	0080be94 	movui	r2,762
  80be74:	0080c344 	movi	r2,781
  80be78:	2404b03a 	or	r2,r4,r16
  80be7c:	1000661e 	bne	r2,zero,80c018 <__divdf3+0x2d4>
  80be80:	04c00204 	movi	r19,8
  80be84:	0021883a 	mov	r16,zero
  80be88:	0025883a 	mov	r18,zero
  80be8c:	02400084 	movi	r9,2
  80be90:	003fca06 	br	80bdbc <__alt_mem_onchip_mem+0xff803dbc>
  80be94:	8023883a 	mov	r17,r16
  80be98:	9011883a 	mov	r8,r18
  80be9c:	e02f883a 	mov	r23,fp
  80bea0:	480f883a 	mov	r7,r9
  80bea4:	00800084 	movi	r2,2
  80bea8:	3881311e 	bne	r7,r2,80c370 <__divdf3+0x62c>
  80beac:	b827883a 	mov	r19,r23
  80beb0:	98c0004c 	andi	r3,r19,1
  80beb4:	0081ffc4 	movi	r2,2047
  80beb8:	000b883a 	mov	r5,zero
  80bebc:	0025883a 	mov	r18,zero
  80bec0:	1004953a 	slli	r2,r2,20
  80bec4:	18c03fcc 	andi	r3,r3,255
  80bec8:	04400434 	movhi	r17,16
  80becc:	8c7fffc4 	addi	r17,r17,-1
  80bed0:	180697fa 	slli	r3,r3,31
  80bed4:	2c4a703a 	and	r5,r5,r17
  80bed8:	288ab03a 	or	r5,r5,r2
  80bedc:	28c6b03a 	or	r3,r5,r3
  80bee0:	9005883a 	mov	r2,r18
  80bee4:	dfc00d17 	ldw	ra,52(sp)
  80bee8:	df000c17 	ldw	fp,48(sp)
  80beec:	ddc00b17 	ldw	r23,44(sp)
  80bef0:	dd800a17 	ldw	r22,40(sp)
  80bef4:	dd400917 	ldw	r21,36(sp)
  80bef8:	dd000817 	ldw	r20,32(sp)
  80befc:	dcc00717 	ldw	r19,28(sp)
  80bf00:	dc800617 	ldw	r18,24(sp)
  80bf04:	dc400517 	ldw	r17,20(sp)
  80bf08:	dc000417 	ldw	r16,16(sp)
  80bf0c:	dec00e04 	addi	sp,sp,56
  80bf10:	f800283a 	ret
  80bf14:	2404b03a 	or	r2,r4,r16
  80bf18:	2027883a 	mov	r19,r4
  80bf1c:	10003926 	beq	r2,zero,80c004 <__divdf3+0x2c0>
  80bf20:	80012e26 	beq	r16,zero,80c3dc <__divdf3+0x698>
  80bf24:	8009883a 	mov	r4,r16
  80bf28:	d9800315 	stw	r6,12(sp)
  80bf2c:	d9c00215 	stw	r7,8(sp)
  80bf30:	080da9c0 	call	80da9c <__clzsi2>
  80bf34:	d9800317 	ldw	r6,12(sp)
  80bf38:	d9c00217 	ldw	r7,8(sp)
  80bf3c:	113ffd44 	addi	r4,r2,-11
  80bf40:	00c00704 	movi	r3,28
  80bf44:	19012116 	blt	r3,r4,80c3cc <__divdf3+0x688>
  80bf48:	00c00744 	movi	r3,29
  80bf4c:	147ffe04 	addi	r17,r2,-8
  80bf50:	1907c83a 	sub	r3,r3,r4
  80bf54:	8460983a 	sll	r16,r16,r17
  80bf58:	98c6d83a 	srl	r3,r19,r3
  80bf5c:	9c64983a 	sll	r18,r19,r17
  80bf60:	1c20b03a 	or	r16,r3,r16
  80bf64:	1080fcc4 	addi	r2,r2,1011
  80bf68:	00abc83a 	sub	r21,zero,r2
  80bf6c:	0027883a 	mov	r19,zero
  80bf70:	0013883a 	mov	r9,zero
  80bf74:	003f9106 	br	80bdbc <__alt_mem_onchip_mem+0xff803dbc>
  80bf78:	3446b03a 	or	r3,r6,r17
  80bf7c:	18001f1e 	bne	r3,zero,80bffc <__divdf3+0x2b8>
  80bf80:	0023883a 	mov	r17,zero
  80bf84:	0011883a 	mov	r8,zero
  80bf88:	01c00084 	movi	r7,2
  80bf8c:	003f9d06 	br	80be04 <__alt_mem_onchip_mem+0xff803e04>
  80bf90:	3446b03a 	or	r3,r6,r17
  80bf94:	18001526 	beq	r3,zero,80bfec <__divdf3+0x2a8>
  80bf98:	88011b26 	beq	r17,zero,80c408 <__divdf3+0x6c4>
  80bf9c:	8809883a 	mov	r4,r17
  80bfa0:	d9800315 	stw	r6,12(sp)
  80bfa4:	da400115 	stw	r9,4(sp)
  80bfa8:	080da9c0 	call	80da9c <__clzsi2>
  80bfac:	d9800317 	ldw	r6,12(sp)
  80bfb0:	da400117 	ldw	r9,4(sp)
  80bfb4:	113ffd44 	addi	r4,r2,-11
  80bfb8:	00c00704 	movi	r3,28
  80bfbc:	19010e16 	blt	r3,r4,80c3f8 <__divdf3+0x6b4>
  80bfc0:	00c00744 	movi	r3,29
  80bfc4:	123ffe04 	addi	r8,r2,-8
  80bfc8:	1907c83a 	sub	r3,r3,r4
  80bfcc:	8a22983a 	sll	r17,r17,r8
  80bfd0:	30c6d83a 	srl	r3,r6,r3
  80bfd4:	3210983a 	sll	r8,r6,r8
  80bfd8:	1c62b03a 	or	r17,r3,r17
  80bfdc:	1080fcc4 	addi	r2,r2,1011
  80bfe0:	0085c83a 	sub	r2,zero,r2
  80bfe4:	000f883a 	mov	r7,zero
  80bfe8:	003f8606 	br	80be04 <__alt_mem_onchip_mem+0xff803e04>
  80bfec:	0023883a 	mov	r17,zero
  80bff0:	0011883a 	mov	r8,zero
  80bff4:	01c00044 	movi	r7,1
  80bff8:	003f8206 	br	80be04 <__alt_mem_onchip_mem+0xff803e04>
  80bffc:	01c000c4 	movi	r7,3
  80c000:	003f8006 	br	80be04 <__alt_mem_onchip_mem+0xff803e04>
  80c004:	04c00104 	movi	r19,4
  80c008:	0021883a 	mov	r16,zero
  80c00c:	0025883a 	mov	r18,zero
  80c010:	02400044 	movi	r9,1
  80c014:	003f6906 	br	80bdbc <__alt_mem_onchip_mem+0xff803dbc>
  80c018:	04c00304 	movi	r19,12
  80c01c:	024000c4 	movi	r9,3
  80c020:	003f6606 	br	80bdbc <__alt_mem_onchip_mem+0xff803dbc>
  80c024:	01400434 	movhi	r5,16
  80c028:	0007883a 	mov	r3,zero
  80c02c:	297fffc4 	addi	r5,r5,-1
  80c030:	04bfffc4 	movi	r18,-1
  80c034:	0081ffc4 	movi	r2,2047
  80c038:	003fa106 	br	80bec0 <__alt_mem_onchip_mem+0xff803ec0>
  80c03c:	00c00044 	movi	r3,1
  80c040:	1887c83a 	sub	r3,r3,r2
  80c044:	01000e04 	movi	r4,56
  80c048:	20c1210e 	bge	r4,r3,80c4d0 <__divdf3+0x78c>
  80c04c:	98c0004c 	andi	r3,r19,1
  80c050:	0005883a 	mov	r2,zero
  80c054:	000b883a 	mov	r5,zero
  80c058:	0025883a 	mov	r18,zero
  80c05c:	003f9806 	br	80bec0 <__alt_mem_onchip_mem+0xff803ec0>
  80c060:	8c00fd36 	bltu	r17,r16,80c458 <__divdf3+0x714>
  80c064:	8440fb26 	beq	r16,r17,80c454 <__divdf3+0x710>
  80c068:	8007883a 	mov	r3,r16
  80c06c:	ad7fffc4 	addi	r21,r21,-1
  80c070:	0021883a 	mov	r16,zero
  80c074:	4004d63a 	srli	r2,r8,24
  80c078:	8822923a 	slli	r17,r17,8
  80c07c:	1809883a 	mov	r4,r3
  80c080:	402c923a 	slli	r22,r8,8
  80c084:	88b8b03a 	or	fp,r17,r2
  80c088:	e028d43a 	srli	r20,fp,16
  80c08c:	d8c00015 	stw	r3,0(sp)
  80c090:	e5ffffcc 	andi	r23,fp,65535
  80c094:	a00b883a 	mov	r5,r20
  80c098:	080b3dc0 	call	80b3dc <__udivsi3>
  80c09c:	d8c00017 	ldw	r3,0(sp)
  80c0a0:	a00b883a 	mov	r5,r20
  80c0a4:	d8800315 	stw	r2,12(sp)
  80c0a8:	1809883a 	mov	r4,r3
  80c0ac:	080b4400 	call	80b440 <__umodsi3>
  80c0b0:	d9800317 	ldw	r6,12(sp)
  80c0b4:	1006943a 	slli	r3,r2,16
  80c0b8:	9004d43a 	srli	r2,r18,16
  80c0bc:	b9a3383a 	mul	r17,r23,r6
  80c0c0:	10c4b03a 	or	r2,r2,r3
  80c0c4:	1440062e 	bgeu	r2,r17,80c0e0 <__divdf3+0x39c>
  80c0c8:	1705883a 	add	r2,r2,fp
  80c0cc:	30ffffc4 	addi	r3,r6,-1
  80c0d0:	1700ee36 	bltu	r2,fp,80c48c <__divdf3+0x748>
  80c0d4:	1440ed2e 	bgeu	r2,r17,80c48c <__divdf3+0x748>
  80c0d8:	31bfff84 	addi	r6,r6,-2
  80c0dc:	1705883a 	add	r2,r2,fp
  80c0e0:	1463c83a 	sub	r17,r2,r17
  80c0e4:	a00b883a 	mov	r5,r20
  80c0e8:	8809883a 	mov	r4,r17
  80c0ec:	d9800315 	stw	r6,12(sp)
  80c0f0:	080b3dc0 	call	80b3dc <__udivsi3>
  80c0f4:	a00b883a 	mov	r5,r20
  80c0f8:	8809883a 	mov	r4,r17
  80c0fc:	d8800215 	stw	r2,8(sp)
  80c100:	080b4400 	call	80b440 <__umodsi3>
  80c104:	d9c00217 	ldw	r7,8(sp)
  80c108:	1004943a 	slli	r2,r2,16
  80c10c:	94bfffcc 	andi	r18,r18,65535
  80c110:	b9d1383a 	mul	r8,r23,r7
  80c114:	90a4b03a 	or	r18,r18,r2
  80c118:	d9800317 	ldw	r6,12(sp)
  80c11c:	9200062e 	bgeu	r18,r8,80c138 <__divdf3+0x3f4>
  80c120:	9725883a 	add	r18,r18,fp
  80c124:	38bfffc4 	addi	r2,r7,-1
  80c128:	9700d636 	bltu	r18,fp,80c484 <__divdf3+0x740>
  80c12c:	9200d52e 	bgeu	r18,r8,80c484 <__divdf3+0x740>
  80c130:	39ffff84 	addi	r7,r7,-2
  80c134:	9725883a 	add	r18,r18,fp
  80c138:	3004943a 	slli	r2,r6,16
  80c13c:	b012d43a 	srli	r9,r22,16
  80c140:	b1bfffcc 	andi	r6,r22,65535
  80c144:	11e2b03a 	or	r17,r2,r7
  80c148:	8806d43a 	srli	r3,r17,16
  80c14c:	893fffcc 	andi	r4,r17,65535
  80c150:	218b383a 	mul	r5,r4,r6
  80c154:	30c5383a 	mul	r2,r6,r3
  80c158:	2249383a 	mul	r4,r4,r9
  80c15c:	280ed43a 	srli	r7,r5,16
  80c160:	9225c83a 	sub	r18,r18,r8
  80c164:	2089883a 	add	r4,r4,r2
  80c168:	3909883a 	add	r4,r7,r4
  80c16c:	1a47383a 	mul	r3,r3,r9
  80c170:	2080022e 	bgeu	r4,r2,80c17c <__divdf3+0x438>
  80c174:	00800074 	movhi	r2,1
  80c178:	1887883a 	add	r3,r3,r2
  80c17c:	2004d43a 	srli	r2,r4,16
  80c180:	2008943a 	slli	r4,r4,16
  80c184:	297fffcc 	andi	r5,r5,65535
  80c188:	10c7883a 	add	r3,r2,r3
  80c18c:	2149883a 	add	r4,r4,r5
  80c190:	90c0a536 	bltu	r18,r3,80c428 <__divdf3+0x6e4>
  80c194:	90c0bf26 	beq	r18,r3,80c494 <__divdf3+0x750>
  80c198:	90c7c83a 	sub	r3,r18,r3
  80c19c:	810fc83a 	sub	r7,r16,r4
  80c1a0:	81e5803a 	cmpltu	r18,r16,r7
  80c1a4:	1ca5c83a 	sub	r18,r3,r18
  80c1a8:	e480c126 	beq	fp,r18,80c4b0 <__divdf3+0x76c>
  80c1ac:	a00b883a 	mov	r5,r20
  80c1b0:	9009883a 	mov	r4,r18
  80c1b4:	d9800315 	stw	r6,12(sp)
  80c1b8:	d9c00215 	stw	r7,8(sp)
  80c1bc:	da400115 	stw	r9,4(sp)
  80c1c0:	080b3dc0 	call	80b3dc <__udivsi3>
  80c1c4:	a00b883a 	mov	r5,r20
  80c1c8:	9009883a 	mov	r4,r18
  80c1cc:	d8800015 	stw	r2,0(sp)
  80c1d0:	080b4400 	call	80b440 <__umodsi3>
  80c1d4:	d9c00217 	ldw	r7,8(sp)
  80c1d8:	da000017 	ldw	r8,0(sp)
  80c1dc:	1006943a 	slli	r3,r2,16
  80c1e0:	3804d43a 	srli	r2,r7,16
  80c1e4:	ba21383a 	mul	r16,r23,r8
  80c1e8:	d9800317 	ldw	r6,12(sp)
  80c1ec:	10c4b03a 	or	r2,r2,r3
  80c1f0:	da400117 	ldw	r9,4(sp)
  80c1f4:	1400062e 	bgeu	r2,r16,80c210 <__divdf3+0x4cc>
  80c1f8:	1705883a 	add	r2,r2,fp
  80c1fc:	40ffffc4 	addi	r3,r8,-1
  80c200:	1700ad36 	bltu	r2,fp,80c4b8 <__divdf3+0x774>
  80c204:	1400ac2e 	bgeu	r2,r16,80c4b8 <__divdf3+0x774>
  80c208:	423fff84 	addi	r8,r8,-2
  80c20c:	1705883a 	add	r2,r2,fp
  80c210:	1421c83a 	sub	r16,r2,r16
  80c214:	a00b883a 	mov	r5,r20
  80c218:	8009883a 	mov	r4,r16
  80c21c:	d9800315 	stw	r6,12(sp)
  80c220:	d9c00215 	stw	r7,8(sp)
  80c224:	da000015 	stw	r8,0(sp)
  80c228:	da400115 	stw	r9,4(sp)
  80c22c:	080b3dc0 	call	80b3dc <__udivsi3>
  80c230:	8009883a 	mov	r4,r16
  80c234:	a00b883a 	mov	r5,r20
  80c238:	1025883a 	mov	r18,r2
  80c23c:	080b4400 	call	80b440 <__umodsi3>
  80c240:	d9c00217 	ldw	r7,8(sp)
  80c244:	1004943a 	slli	r2,r2,16
  80c248:	bcaf383a 	mul	r23,r23,r18
  80c24c:	393fffcc 	andi	r4,r7,65535
  80c250:	2088b03a 	or	r4,r4,r2
  80c254:	d9800317 	ldw	r6,12(sp)
  80c258:	da000017 	ldw	r8,0(sp)
  80c25c:	da400117 	ldw	r9,4(sp)
  80c260:	25c0062e 	bgeu	r4,r23,80c27c <__divdf3+0x538>
  80c264:	2709883a 	add	r4,r4,fp
  80c268:	90bfffc4 	addi	r2,r18,-1
  80c26c:	27009436 	bltu	r4,fp,80c4c0 <__divdf3+0x77c>
  80c270:	25c0932e 	bgeu	r4,r23,80c4c0 <__divdf3+0x77c>
  80c274:	94bfff84 	addi	r18,r18,-2
  80c278:	2709883a 	add	r4,r4,fp
  80c27c:	4004943a 	slli	r2,r8,16
  80c280:	25efc83a 	sub	r23,r4,r23
  80c284:	1490b03a 	or	r8,r2,r18
  80c288:	4008d43a 	srli	r4,r8,16
  80c28c:	40ffffcc 	andi	r3,r8,65535
  80c290:	30c5383a 	mul	r2,r6,r3
  80c294:	1a47383a 	mul	r3,r3,r9
  80c298:	310d383a 	mul	r6,r6,r4
  80c29c:	100ad43a 	srli	r5,r2,16
  80c2a0:	4913383a 	mul	r9,r9,r4
  80c2a4:	1987883a 	add	r3,r3,r6
  80c2a8:	28c7883a 	add	r3,r5,r3
  80c2ac:	1980022e 	bgeu	r3,r6,80c2b8 <__divdf3+0x574>
  80c2b0:	01000074 	movhi	r4,1
  80c2b4:	4913883a 	add	r9,r9,r4
  80c2b8:	1808d43a 	srli	r4,r3,16
  80c2bc:	1806943a 	slli	r3,r3,16
  80c2c0:	10bfffcc 	andi	r2,r2,65535
  80c2c4:	2253883a 	add	r9,r4,r9
  80c2c8:	1887883a 	add	r3,r3,r2
  80c2cc:	ba403836 	bltu	r23,r9,80c3b0 <__divdf3+0x66c>
  80c2d0:	ba403626 	beq	r23,r9,80c3ac <__divdf3+0x668>
  80c2d4:	42000054 	ori	r8,r8,1
  80c2d8:	a880ffc4 	addi	r2,r21,1023
  80c2dc:	00bf570e 	bge	zero,r2,80c03c <__alt_mem_onchip_mem+0xff80403c>
  80c2e0:	40c001cc 	andi	r3,r8,7
  80c2e4:	18000726 	beq	r3,zero,80c304 <__divdf3+0x5c0>
  80c2e8:	40c003cc 	andi	r3,r8,15
  80c2ec:	01000104 	movi	r4,4
  80c2f0:	19000426 	beq	r3,r4,80c304 <__divdf3+0x5c0>
  80c2f4:	4107883a 	add	r3,r8,r4
  80c2f8:	1a11803a 	cmpltu	r8,r3,r8
  80c2fc:	8a23883a 	add	r17,r17,r8
  80c300:	1811883a 	mov	r8,r3
  80c304:	88c0402c 	andhi	r3,r17,256
  80c308:	18000426 	beq	r3,zero,80c31c <__divdf3+0x5d8>
  80c30c:	00ffc034 	movhi	r3,65280
  80c310:	18ffffc4 	addi	r3,r3,-1
  80c314:	a8810004 	addi	r2,r21,1024
  80c318:	88e2703a 	and	r17,r17,r3
  80c31c:	00c1ff84 	movi	r3,2046
  80c320:	18bee316 	blt	r3,r2,80beb0 <__alt_mem_onchip_mem+0xff803eb0>
  80c324:	8824977a 	slli	r18,r17,29
  80c328:	4010d0fa 	srli	r8,r8,3
  80c32c:	8822927a 	slli	r17,r17,9
  80c330:	1081ffcc 	andi	r2,r2,2047
  80c334:	9224b03a 	or	r18,r18,r8
  80c338:	880ad33a 	srli	r5,r17,12
  80c33c:	98c0004c 	andi	r3,r19,1
  80c340:	003edf06 	br	80bec0 <__alt_mem_onchip_mem+0xff803ec0>
  80c344:	8080022c 	andhi	r2,r16,8
  80c348:	10001226 	beq	r2,zero,80c394 <__divdf3+0x650>
  80c34c:	8880022c 	andhi	r2,r17,8
  80c350:	1000101e 	bne	r2,zero,80c394 <__divdf3+0x650>
  80c354:	00800434 	movhi	r2,16
  80c358:	89400234 	orhi	r5,r17,8
  80c35c:	10bfffc4 	addi	r2,r2,-1
  80c360:	b007883a 	mov	r3,r22
  80c364:	288a703a 	and	r5,r5,r2
  80c368:	4025883a 	mov	r18,r8
  80c36c:	003f3106 	br	80c034 <__alt_mem_onchip_mem+0xff804034>
  80c370:	008000c4 	movi	r2,3
  80c374:	3880a626 	beq	r7,r2,80c610 <__divdf3+0x8cc>
  80c378:	00800044 	movi	r2,1
  80c37c:	3880521e 	bne	r7,r2,80c4c8 <__divdf3+0x784>
  80c380:	b807883a 	mov	r3,r23
  80c384:	0005883a 	mov	r2,zero
  80c388:	000b883a 	mov	r5,zero
  80c38c:	0025883a 	mov	r18,zero
  80c390:	003ecb06 	br	80bec0 <__alt_mem_onchip_mem+0xff803ec0>
  80c394:	00800434 	movhi	r2,16
  80c398:	81400234 	orhi	r5,r16,8
  80c39c:	10bfffc4 	addi	r2,r2,-1
  80c3a0:	a007883a 	mov	r3,r20
  80c3a4:	288a703a 	and	r5,r5,r2
  80c3a8:	003f2206 	br	80c034 <__alt_mem_onchip_mem+0xff804034>
  80c3ac:	183fca26 	beq	r3,zero,80c2d8 <__alt_mem_onchip_mem+0xff8042d8>
  80c3b0:	e5ef883a 	add	r23,fp,r23
  80c3b4:	40bfffc4 	addi	r2,r8,-1
  80c3b8:	bf00392e 	bgeu	r23,fp,80c4a0 <__divdf3+0x75c>
  80c3bc:	1011883a 	mov	r8,r2
  80c3c0:	ba7fc41e 	bne	r23,r9,80c2d4 <__alt_mem_onchip_mem+0xff8042d4>
  80c3c4:	b0ffc31e 	bne	r22,r3,80c2d4 <__alt_mem_onchip_mem+0xff8042d4>
  80c3c8:	003fc306 	br	80c2d8 <__alt_mem_onchip_mem+0xff8042d8>
  80c3cc:	143ff604 	addi	r16,r2,-40
  80c3d0:	9c20983a 	sll	r16,r19,r16
  80c3d4:	0025883a 	mov	r18,zero
  80c3d8:	003ee206 	br	80bf64 <__alt_mem_onchip_mem+0xff803f64>
  80c3dc:	d9800315 	stw	r6,12(sp)
  80c3e0:	d9c00215 	stw	r7,8(sp)
  80c3e4:	080da9c0 	call	80da9c <__clzsi2>
  80c3e8:	10800804 	addi	r2,r2,32
  80c3ec:	d9c00217 	ldw	r7,8(sp)
  80c3f0:	d9800317 	ldw	r6,12(sp)
  80c3f4:	003ed106 	br	80bf3c <__alt_mem_onchip_mem+0xff803f3c>
  80c3f8:	147ff604 	addi	r17,r2,-40
  80c3fc:	3462983a 	sll	r17,r6,r17
  80c400:	0011883a 	mov	r8,zero
  80c404:	003ef506 	br	80bfdc <__alt_mem_onchip_mem+0xff803fdc>
  80c408:	3009883a 	mov	r4,r6
  80c40c:	d9800315 	stw	r6,12(sp)
  80c410:	da400115 	stw	r9,4(sp)
  80c414:	080da9c0 	call	80da9c <__clzsi2>
  80c418:	10800804 	addi	r2,r2,32
  80c41c:	da400117 	ldw	r9,4(sp)
  80c420:	d9800317 	ldw	r6,12(sp)
  80c424:	003ee306 	br	80bfb4 <__alt_mem_onchip_mem+0xff803fb4>
  80c428:	85a1883a 	add	r16,r16,r22
  80c42c:	8585803a 	cmpltu	r2,r16,r22
  80c430:	1705883a 	add	r2,r2,fp
  80c434:	14a5883a 	add	r18,r2,r18
  80c438:	88bfffc4 	addi	r2,r17,-1
  80c43c:	e4800c2e 	bgeu	fp,r18,80c470 <__divdf3+0x72c>
  80c440:	90c03e36 	bltu	r18,r3,80c53c <__divdf3+0x7f8>
  80c444:	1c806926 	beq	r3,r18,80c5ec <__divdf3+0x8a8>
  80c448:	90c7c83a 	sub	r3,r18,r3
  80c44c:	1023883a 	mov	r17,r2
  80c450:	003f5206 	br	80c19c <__alt_mem_onchip_mem+0xff80419c>
  80c454:	923f0436 	bltu	r18,r8,80c068 <__alt_mem_onchip_mem+0xff804068>
  80c458:	800897fa 	slli	r4,r16,31
  80c45c:	9004d07a 	srli	r2,r18,1
  80c460:	8006d07a 	srli	r3,r16,1
  80c464:	902097fa 	slli	r16,r18,31
  80c468:	20a4b03a 	or	r18,r4,r2
  80c46c:	003f0106 	br	80c074 <__alt_mem_onchip_mem+0xff804074>
  80c470:	e4bff51e 	bne	fp,r18,80c448 <__alt_mem_onchip_mem+0xff804448>
  80c474:	85bff22e 	bgeu	r16,r22,80c440 <__alt_mem_onchip_mem+0xff804440>
  80c478:	e0c7c83a 	sub	r3,fp,r3
  80c47c:	1023883a 	mov	r17,r2
  80c480:	003f4606 	br	80c19c <__alt_mem_onchip_mem+0xff80419c>
  80c484:	100f883a 	mov	r7,r2
  80c488:	003f2b06 	br	80c138 <__alt_mem_onchip_mem+0xff804138>
  80c48c:	180d883a 	mov	r6,r3
  80c490:	003f1306 	br	80c0e0 <__alt_mem_onchip_mem+0xff8040e0>
  80c494:	813fe436 	bltu	r16,r4,80c428 <__alt_mem_onchip_mem+0xff804428>
  80c498:	0007883a 	mov	r3,zero
  80c49c:	003f3f06 	br	80c19c <__alt_mem_onchip_mem+0xff80419c>
  80c4a0:	ba402c36 	bltu	r23,r9,80c554 <__divdf3+0x810>
  80c4a4:	4dc05426 	beq	r9,r23,80c5f8 <__divdf3+0x8b4>
  80c4a8:	1011883a 	mov	r8,r2
  80c4ac:	003f8906 	br	80c2d4 <__alt_mem_onchip_mem+0xff8042d4>
  80c4b0:	023fffc4 	movi	r8,-1
  80c4b4:	003f8806 	br	80c2d8 <__alt_mem_onchip_mem+0xff8042d8>
  80c4b8:	1811883a 	mov	r8,r3
  80c4bc:	003f5406 	br	80c210 <__alt_mem_onchip_mem+0xff804210>
  80c4c0:	1025883a 	mov	r18,r2
  80c4c4:	003f6d06 	br	80c27c <__alt_mem_onchip_mem+0xff80427c>
  80c4c8:	b827883a 	mov	r19,r23
  80c4cc:	003f8206 	br	80c2d8 <__alt_mem_onchip_mem+0xff8042d8>
  80c4d0:	010007c4 	movi	r4,31
  80c4d4:	20c02616 	blt	r4,r3,80c570 <__divdf3+0x82c>
  80c4d8:	00800804 	movi	r2,32
  80c4dc:	10c5c83a 	sub	r2,r2,r3
  80c4e0:	888a983a 	sll	r5,r17,r2
  80c4e4:	40c8d83a 	srl	r4,r8,r3
  80c4e8:	4084983a 	sll	r2,r8,r2
  80c4ec:	88e2d83a 	srl	r17,r17,r3
  80c4f0:	2906b03a 	or	r3,r5,r4
  80c4f4:	1004c03a 	cmpne	r2,r2,zero
  80c4f8:	1886b03a 	or	r3,r3,r2
  80c4fc:	188001cc 	andi	r2,r3,7
  80c500:	10000726 	beq	r2,zero,80c520 <__divdf3+0x7dc>
  80c504:	188003cc 	andi	r2,r3,15
  80c508:	01000104 	movi	r4,4
  80c50c:	11000426 	beq	r2,r4,80c520 <__divdf3+0x7dc>
  80c510:	1805883a 	mov	r2,r3
  80c514:	10c00104 	addi	r3,r2,4
  80c518:	1885803a 	cmpltu	r2,r3,r2
  80c51c:	88a3883a 	add	r17,r17,r2
  80c520:	8880202c 	andhi	r2,r17,128
  80c524:	10002726 	beq	r2,zero,80c5c4 <__divdf3+0x880>
  80c528:	98c0004c 	andi	r3,r19,1
  80c52c:	00800044 	movi	r2,1
  80c530:	000b883a 	mov	r5,zero
  80c534:	0025883a 	mov	r18,zero
  80c538:	003e6106 	br	80bec0 <__alt_mem_onchip_mem+0xff803ec0>
  80c53c:	85a1883a 	add	r16,r16,r22
  80c540:	8585803a 	cmpltu	r2,r16,r22
  80c544:	1705883a 	add	r2,r2,fp
  80c548:	14a5883a 	add	r18,r2,r18
  80c54c:	8c7fff84 	addi	r17,r17,-2
  80c550:	003f1106 	br	80c198 <__alt_mem_onchip_mem+0xff804198>
  80c554:	b589883a 	add	r4,r22,r22
  80c558:	25ad803a 	cmpltu	r22,r4,r22
  80c55c:	b739883a 	add	fp,r22,fp
  80c560:	40bfff84 	addi	r2,r8,-2
  80c564:	bf2f883a 	add	r23,r23,fp
  80c568:	202d883a 	mov	r22,r4
  80c56c:	003f9306 	br	80c3bc <__alt_mem_onchip_mem+0xff8043bc>
  80c570:	013ff844 	movi	r4,-31
  80c574:	2085c83a 	sub	r2,r4,r2
  80c578:	8888d83a 	srl	r4,r17,r2
  80c57c:	00800804 	movi	r2,32
  80c580:	18802126 	beq	r3,r2,80c608 <__divdf3+0x8c4>
  80c584:	00801004 	movi	r2,64
  80c588:	10c5c83a 	sub	r2,r2,r3
  80c58c:	8884983a 	sll	r2,r17,r2
  80c590:	1204b03a 	or	r2,r2,r8
  80c594:	1004c03a 	cmpne	r2,r2,zero
  80c598:	2084b03a 	or	r2,r4,r2
  80c59c:	144001cc 	andi	r17,r2,7
  80c5a0:	88000d1e 	bne	r17,zero,80c5d8 <__divdf3+0x894>
  80c5a4:	000b883a 	mov	r5,zero
  80c5a8:	1024d0fa 	srli	r18,r2,3
  80c5ac:	98c0004c 	andi	r3,r19,1
  80c5b0:	0005883a 	mov	r2,zero
  80c5b4:	9464b03a 	or	r18,r18,r17
  80c5b8:	003e4106 	br	80bec0 <__alt_mem_onchip_mem+0xff803ec0>
  80c5bc:	1007883a 	mov	r3,r2
  80c5c0:	0023883a 	mov	r17,zero
  80c5c4:	880a927a 	slli	r5,r17,9
  80c5c8:	1805883a 	mov	r2,r3
  80c5cc:	8822977a 	slli	r17,r17,29
  80c5d0:	280ad33a 	srli	r5,r5,12
  80c5d4:	003ff406 	br	80c5a8 <__alt_mem_onchip_mem+0xff8045a8>
  80c5d8:	10c003cc 	andi	r3,r2,15
  80c5dc:	01000104 	movi	r4,4
  80c5e0:	193ff626 	beq	r3,r4,80c5bc <__alt_mem_onchip_mem+0xff8045bc>
  80c5e4:	0023883a 	mov	r17,zero
  80c5e8:	003fca06 	br	80c514 <__alt_mem_onchip_mem+0xff804514>
  80c5ec:	813fd336 	bltu	r16,r4,80c53c <__alt_mem_onchip_mem+0xff80453c>
  80c5f0:	1023883a 	mov	r17,r2
  80c5f4:	003fa806 	br	80c498 <__alt_mem_onchip_mem+0xff804498>
  80c5f8:	b0ffd636 	bltu	r22,r3,80c554 <__alt_mem_onchip_mem+0xff804554>
  80c5fc:	1011883a 	mov	r8,r2
  80c600:	b0ff341e 	bne	r22,r3,80c2d4 <__alt_mem_onchip_mem+0xff8042d4>
  80c604:	003f3406 	br	80c2d8 <__alt_mem_onchip_mem+0xff8042d8>
  80c608:	0005883a 	mov	r2,zero
  80c60c:	003fe006 	br	80c590 <__alt_mem_onchip_mem+0xff804590>
  80c610:	00800434 	movhi	r2,16
  80c614:	89400234 	orhi	r5,r17,8
  80c618:	10bfffc4 	addi	r2,r2,-1
  80c61c:	b807883a 	mov	r3,r23
  80c620:	288a703a 	and	r5,r5,r2
  80c624:	4025883a 	mov	r18,r8
  80c628:	003e8206 	br	80c034 <__alt_mem_onchip_mem+0xff804034>

0080c62c <__eqdf2>:
  80c62c:	2804d53a 	srli	r2,r5,20
  80c630:	3806d53a 	srli	r3,r7,20
  80c634:	02000434 	movhi	r8,16
  80c638:	423fffc4 	addi	r8,r8,-1
  80c63c:	1081ffcc 	andi	r2,r2,2047
  80c640:	0281ffc4 	movi	r10,2047
  80c644:	2a12703a 	and	r9,r5,r8
  80c648:	18c1ffcc 	andi	r3,r3,2047
  80c64c:	3a10703a 	and	r8,r7,r8
  80c650:	280ad7fa 	srli	r5,r5,31
  80c654:	380ed7fa 	srli	r7,r7,31
  80c658:	12801026 	beq	r2,r10,80c69c <__eqdf2+0x70>
  80c65c:	0281ffc4 	movi	r10,2047
  80c660:	1a800a26 	beq	r3,r10,80c68c <__eqdf2+0x60>
  80c664:	10c00226 	beq	r2,r3,80c670 <__eqdf2+0x44>
  80c668:	00800044 	movi	r2,1
  80c66c:	f800283a 	ret
  80c670:	4a3ffd1e 	bne	r9,r8,80c668 <__alt_mem_onchip_mem+0xff804668>
  80c674:	21bffc1e 	bne	r4,r6,80c668 <__alt_mem_onchip_mem+0xff804668>
  80c678:	29c00c26 	beq	r5,r7,80c6ac <__eqdf2+0x80>
  80c67c:	103ffa1e 	bne	r2,zero,80c668 <__alt_mem_onchip_mem+0xff804668>
  80c680:	2244b03a 	or	r2,r4,r9
  80c684:	1004c03a 	cmpne	r2,r2,zero
  80c688:	f800283a 	ret
  80c68c:	3214b03a 	or	r10,r6,r8
  80c690:	503ff426 	beq	r10,zero,80c664 <__alt_mem_onchip_mem+0xff804664>
  80c694:	00800044 	movi	r2,1
  80c698:	f800283a 	ret
  80c69c:	2254b03a 	or	r10,r4,r9
  80c6a0:	503fee26 	beq	r10,zero,80c65c <__alt_mem_onchip_mem+0xff80465c>
  80c6a4:	00800044 	movi	r2,1
  80c6a8:	f800283a 	ret
  80c6ac:	0005883a 	mov	r2,zero
  80c6b0:	f800283a 	ret

0080c6b4 <__gedf2>:
  80c6b4:	2804d53a 	srli	r2,r5,20
  80c6b8:	3806d53a 	srli	r3,r7,20
  80c6bc:	02000434 	movhi	r8,16
  80c6c0:	423fffc4 	addi	r8,r8,-1
  80c6c4:	1081ffcc 	andi	r2,r2,2047
  80c6c8:	0241ffc4 	movi	r9,2047
  80c6cc:	2a14703a 	and	r10,r5,r8
  80c6d0:	18c1ffcc 	andi	r3,r3,2047
  80c6d4:	3a10703a 	and	r8,r7,r8
  80c6d8:	280ad7fa 	srli	r5,r5,31
  80c6dc:	380ed7fa 	srli	r7,r7,31
  80c6e0:	12401d26 	beq	r2,r9,80c758 <__gedf2+0xa4>
  80c6e4:	0241ffc4 	movi	r9,2047
  80c6e8:	1a401226 	beq	r3,r9,80c734 <__gedf2+0x80>
  80c6ec:	1000081e 	bne	r2,zero,80c710 <__gedf2+0x5c>
  80c6f0:	2296b03a 	or	r11,r4,r10
  80c6f4:	5813003a 	cmpeq	r9,r11,zero
  80c6f8:	1800091e 	bne	r3,zero,80c720 <__gedf2+0x6c>
  80c6fc:	3218b03a 	or	r12,r6,r8
  80c700:	6000071e 	bne	r12,zero,80c720 <__gedf2+0x6c>
  80c704:	0005883a 	mov	r2,zero
  80c708:	5800101e 	bne	r11,zero,80c74c <__gedf2+0x98>
  80c70c:	f800283a 	ret
  80c710:	18000c1e 	bne	r3,zero,80c744 <__gedf2+0x90>
  80c714:	3212b03a 	or	r9,r6,r8
  80c718:	48000c26 	beq	r9,zero,80c74c <__gedf2+0x98>
  80c71c:	0013883a 	mov	r9,zero
  80c720:	39c03fcc 	andi	r7,r7,255
  80c724:	48000826 	beq	r9,zero,80c748 <__gedf2+0x94>
  80c728:	38000926 	beq	r7,zero,80c750 <__gedf2+0x9c>
  80c72c:	00800044 	movi	r2,1
  80c730:	f800283a 	ret
  80c734:	3212b03a 	or	r9,r6,r8
  80c738:	483fec26 	beq	r9,zero,80c6ec <__alt_mem_onchip_mem+0xff8046ec>
  80c73c:	00bfff84 	movi	r2,-2
  80c740:	f800283a 	ret
  80c744:	39c03fcc 	andi	r7,r7,255
  80c748:	29c00626 	beq	r5,r7,80c764 <__gedf2+0xb0>
  80c74c:	283ff726 	beq	r5,zero,80c72c <__alt_mem_onchip_mem+0xff80472c>
  80c750:	00bfffc4 	movi	r2,-1
  80c754:	f800283a 	ret
  80c758:	2292b03a 	or	r9,r4,r10
  80c75c:	483fe126 	beq	r9,zero,80c6e4 <__alt_mem_onchip_mem+0xff8046e4>
  80c760:	003ff606 	br	80c73c <__alt_mem_onchip_mem+0xff80473c>
  80c764:	18bff916 	blt	r3,r2,80c74c <__alt_mem_onchip_mem+0xff80474c>
  80c768:	10c00316 	blt	r2,r3,80c778 <__gedf2+0xc4>
  80c76c:	42bff736 	bltu	r8,r10,80c74c <__alt_mem_onchip_mem+0xff80474c>
  80c770:	52000326 	beq	r10,r8,80c780 <__gedf2+0xcc>
  80c774:	5200042e 	bgeu	r10,r8,80c788 <__gedf2+0xd4>
  80c778:	283fec1e 	bne	r5,zero,80c72c <__alt_mem_onchip_mem+0xff80472c>
  80c77c:	003ff406 	br	80c750 <__alt_mem_onchip_mem+0xff804750>
  80c780:	313ff236 	bltu	r6,r4,80c74c <__alt_mem_onchip_mem+0xff80474c>
  80c784:	21bffc36 	bltu	r4,r6,80c778 <__alt_mem_onchip_mem+0xff804778>
  80c788:	0005883a 	mov	r2,zero
  80c78c:	f800283a 	ret

0080c790 <__ledf2>:
  80c790:	2804d53a 	srli	r2,r5,20
  80c794:	3810d53a 	srli	r8,r7,20
  80c798:	00c00434 	movhi	r3,16
  80c79c:	18ffffc4 	addi	r3,r3,-1
  80c7a0:	1081ffcc 	andi	r2,r2,2047
  80c7a4:	0241ffc4 	movi	r9,2047
  80c7a8:	28d4703a 	and	r10,r5,r3
  80c7ac:	4201ffcc 	andi	r8,r8,2047
  80c7b0:	38c6703a 	and	r3,r7,r3
  80c7b4:	280ad7fa 	srli	r5,r5,31
  80c7b8:	380ed7fa 	srli	r7,r7,31
  80c7bc:	12401f26 	beq	r2,r9,80c83c <__ledf2+0xac>
  80c7c0:	0241ffc4 	movi	r9,2047
  80c7c4:	42401426 	beq	r8,r9,80c818 <__ledf2+0x88>
  80c7c8:	1000091e 	bne	r2,zero,80c7f0 <__ledf2+0x60>
  80c7cc:	2296b03a 	or	r11,r4,r10
  80c7d0:	5813003a 	cmpeq	r9,r11,zero
  80c7d4:	29403fcc 	andi	r5,r5,255
  80c7d8:	40000a1e 	bne	r8,zero,80c804 <__ledf2+0x74>
  80c7dc:	30d8b03a 	or	r12,r6,r3
  80c7e0:	6000081e 	bne	r12,zero,80c804 <__ledf2+0x74>
  80c7e4:	0005883a 	mov	r2,zero
  80c7e8:	5800111e 	bne	r11,zero,80c830 <__ledf2+0xa0>
  80c7ec:	f800283a 	ret
  80c7f0:	29403fcc 	andi	r5,r5,255
  80c7f4:	40000c1e 	bne	r8,zero,80c828 <__ledf2+0x98>
  80c7f8:	30d2b03a 	or	r9,r6,r3
  80c7fc:	48000c26 	beq	r9,zero,80c830 <__ledf2+0xa0>
  80c800:	0013883a 	mov	r9,zero
  80c804:	39c03fcc 	andi	r7,r7,255
  80c808:	48000826 	beq	r9,zero,80c82c <__ledf2+0x9c>
  80c80c:	38001126 	beq	r7,zero,80c854 <__ledf2+0xc4>
  80c810:	00800044 	movi	r2,1
  80c814:	f800283a 	ret
  80c818:	30d2b03a 	or	r9,r6,r3
  80c81c:	483fea26 	beq	r9,zero,80c7c8 <__alt_mem_onchip_mem+0xff8047c8>
  80c820:	00800084 	movi	r2,2
  80c824:	f800283a 	ret
  80c828:	39c03fcc 	andi	r7,r7,255
  80c82c:	39400726 	beq	r7,r5,80c84c <__ledf2+0xbc>
  80c830:	2800081e 	bne	r5,zero,80c854 <__ledf2+0xc4>
  80c834:	00800044 	movi	r2,1
  80c838:	f800283a 	ret
  80c83c:	2292b03a 	or	r9,r4,r10
  80c840:	483fdf26 	beq	r9,zero,80c7c0 <__alt_mem_onchip_mem+0xff8047c0>
  80c844:	00800084 	movi	r2,2
  80c848:	f800283a 	ret
  80c84c:	4080030e 	bge	r8,r2,80c85c <__ledf2+0xcc>
  80c850:	383fef26 	beq	r7,zero,80c810 <__alt_mem_onchip_mem+0xff804810>
  80c854:	00bfffc4 	movi	r2,-1
  80c858:	f800283a 	ret
  80c85c:	123feb16 	blt	r2,r8,80c80c <__alt_mem_onchip_mem+0xff80480c>
  80c860:	1abff336 	bltu	r3,r10,80c830 <__alt_mem_onchip_mem+0xff804830>
  80c864:	50c00326 	beq	r10,r3,80c874 <__ledf2+0xe4>
  80c868:	50c0042e 	bgeu	r10,r3,80c87c <__ledf2+0xec>
  80c86c:	283fe81e 	bne	r5,zero,80c810 <__alt_mem_onchip_mem+0xff804810>
  80c870:	003ff806 	br	80c854 <__alt_mem_onchip_mem+0xff804854>
  80c874:	313fee36 	bltu	r6,r4,80c830 <__alt_mem_onchip_mem+0xff804830>
  80c878:	21bffc36 	bltu	r4,r6,80c86c <__alt_mem_onchip_mem+0xff80486c>
  80c87c:	0005883a 	mov	r2,zero
  80c880:	f800283a 	ret

0080c884 <__muldf3>:
  80c884:	defff304 	addi	sp,sp,-52
  80c888:	2804d53a 	srli	r2,r5,20
  80c88c:	dd800915 	stw	r22,36(sp)
  80c890:	282cd7fa 	srli	r22,r5,31
  80c894:	dc000315 	stw	r16,12(sp)
  80c898:	04000434 	movhi	r16,16
  80c89c:	dd400815 	stw	r21,32(sp)
  80c8a0:	dc800515 	stw	r18,20(sp)
  80c8a4:	843fffc4 	addi	r16,r16,-1
  80c8a8:	dfc00c15 	stw	ra,48(sp)
  80c8ac:	df000b15 	stw	fp,44(sp)
  80c8b0:	ddc00a15 	stw	r23,40(sp)
  80c8b4:	dd000715 	stw	r20,28(sp)
  80c8b8:	dcc00615 	stw	r19,24(sp)
  80c8bc:	dc400415 	stw	r17,16(sp)
  80c8c0:	1481ffcc 	andi	r18,r2,2047
  80c8c4:	2c20703a 	and	r16,r5,r16
  80c8c8:	b02b883a 	mov	r21,r22
  80c8cc:	b2403fcc 	andi	r9,r22,255
  80c8d0:	90006026 	beq	r18,zero,80ca54 <__muldf3+0x1d0>
  80c8d4:	0081ffc4 	movi	r2,2047
  80c8d8:	2029883a 	mov	r20,r4
  80c8dc:	90803626 	beq	r18,r2,80c9b8 <__muldf3+0x134>
  80c8e0:	80800434 	orhi	r2,r16,16
  80c8e4:	100490fa 	slli	r2,r2,3
  80c8e8:	2020d77a 	srli	r16,r4,29
  80c8ec:	202890fa 	slli	r20,r4,3
  80c8f0:	94bf0044 	addi	r18,r18,-1023
  80c8f4:	80a0b03a 	or	r16,r16,r2
  80c8f8:	0027883a 	mov	r19,zero
  80c8fc:	0039883a 	mov	fp,zero
  80c900:	3804d53a 	srli	r2,r7,20
  80c904:	382ed7fa 	srli	r23,r7,31
  80c908:	04400434 	movhi	r17,16
  80c90c:	8c7fffc4 	addi	r17,r17,-1
  80c910:	1081ffcc 	andi	r2,r2,2047
  80c914:	3011883a 	mov	r8,r6
  80c918:	3c62703a 	and	r17,r7,r17
  80c91c:	ba803fcc 	andi	r10,r23,255
  80c920:	10006d26 	beq	r2,zero,80cad8 <__muldf3+0x254>
  80c924:	00c1ffc4 	movi	r3,2047
  80c928:	10c06526 	beq	r2,r3,80cac0 <__muldf3+0x23c>
  80c92c:	88c00434 	orhi	r3,r17,16
  80c930:	180690fa 	slli	r3,r3,3
  80c934:	3022d77a 	srli	r17,r6,29
  80c938:	301090fa 	slli	r8,r6,3
  80c93c:	10bf0044 	addi	r2,r2,-1023
  80c940:	88e2b03a 	or	r17,r17,r3
  80c944:	000b883a 	mov	r5,zero
  80c948:	9085883a 	add	r2,r18,r2
  80c94c:	2cc8b03a 	or	r4,r5,r19
  80c950:	00c003c4 	movi	r3,15
  80c954:	bdacf03a 	xor	r22,r23,r22
  80c958:	12c00044 	addi	r11,r2,1
  80c95c:	19009936 	bltu	r3,r4,80cbc4 <__muldf3+0x340>
  80c960:	200890ba 	slli	r4,r4,2
  80c964:	00c02074 	movhi	r3,129
  80c968:	18f25e04 	addi	r3,r3,-13960
  80c96c:	20c9883a 	add	r4,r4,r3
  80c970:	20c00017 	ldw	r3,0(r4)
  80c974:	1800683a 	jmp	r3
  80c978:	0080cbc4 	movi	r2,815
  80c97c:	0080c9d8 	cmpnei	r2,zero,807
  80c980:	0080c9d8 	cmpnei	r2,zero,807
  80c984:	0080c9d4 	movui	r2,807
  80c988:	0080cba0 	cmpeqi	r2,zero,814
  80c98c:	0080cba0 	cmpeqi	r2,zero,814
  80c990:	0080cb88 	cmpgei	r2,zero,814
  80c994:	0080c9d4 	movui	r2,807
  80c998:	0080cba0 	cmpeqi	r2,zero,814
  80c99c:	0080cb88 	cmpgei	r2,zero,814
  80c9a0:	0080cba0 	cmpeqi	r2,zero,814
  80c9a4:	0080c9d4 	movui	r2,807
  80c9a8:	0080cbb0 	cmpltui	r2,zero,814
  80c9ac:	0080cbb0 	cmpltui	r2,zero,814
  80c9b0:	0080cbb0 	cmpltui	r2,zero,814
  80c9b4:	0080cdcc 	andi	r2,zero,823
  80c9b8:	2404b03a 	or	r2,r4,r16
  80c9bc:	10006f1e 	bne	r2,zero,80cb7c <__muldf3+0x2f8>
  80c9c0:	04c00204 	movi	r19,8
  80c9c4:	0021883a 	mov	r16,zero
  80c9c8:	0029883a 	mov	r20,zero
  80c9cc:	07000084 	movi	fp,2
  80c9d0:	003fcb06 	br	80c900 <__alt_mem_onchip_mem+0xff804900>
  80c9d4:	502d883a 	mov	r22,r10
  80c9d8:	00800084 	movi	r2,2
  80c9dc:	28805726 	beq	r5,r2,80cb3c <__muldf3+0x2b8>
  80c9e0:	008000c4 	movi	r2,3
  80c9e4:	28816626 	beq	r5,r2,80cf80 <__muldf3+0x6fc>
  80c9e8:	00800044 	movi	r2,1
  80c9ec:	2881411e 	bne	r5,r2,80cef4 <__muldf3+0x670>
  80c9f0:	b02b883a 	mov	r21,r22
  80c9f4:	0005883a 	mov	r2,zero
  80c9f8:	000b883a 	mov	r5,zero
  80c9fc:	0029883a 	mov	r20,zero
  80ca00:	1004953a 	slli	r2,r2,20
  80ca04:	a8c03fcc 	andi	r3,r21,255
  80ca08:	04400434 	movhi	r17,16
  80ca0c:	8c7fffc4 	addi	r17,r17,-1
  80ca10:	180697fa 	slli	r3,r3,31
  80ca14:	2c4a703a 	and	r5,r5,r17
  80ca18:	288ab03a 	or	r5,r5,r2
  80ca1c:	28c6b03a 	or	r3,r5,r3
  80ca20:	a005883a 	mov	r2,r20
  80ca24:	dfc00c17 	ldw	ra,48(sp)
  80ca28:	df000b17 	ldw	fp,44(sp)
  80ca2c:	ddc00a17 	ldw	r23,40(sp)
  80ca30:	dd800917 	ldw	r22,36(sp)
  80ca34:	dd400817 	ldw	r21,32(sp)
  80ca38:	dd000717 	ldw	r20,28(sp)
  80ca3c:	dcc00617 	ldw	r19,24(sp)
  80ca40:	dc800517 	ldw	r18,20(sp)
  80ca44:	dc400417 	ldw	r17,16(sp)
  80ca48:	dc000317 	ldw	r16,12(sp)
  80ca4c:	dec00d04 	addi	sp,sp,52
  80ca50:	f800283a 	ret
  80ca54:	2404b03a 	or	r2,r4,r16
  80ca58:	2027883a 	mov	r19,r4
  80ca5c:	10004226 	beq	r2,zero,80cb68 <__muldf3+0x2e4>
  80ca60:	8000fc26 	beq	r16,zero,80ce54 <__muldf3+0x5d0>
  80ca64:	8009883a 	mov	r4,r16
  80ca68:	d9800215 	stw	r6,8(sp)
  80ca6c:	d9c00015 	stw	r7,0(sp)
  80ca70:	da400115 	stw	r9,4(sp)
  80ca74:	080da9c0 	call	80da9c <__clzsi2>
  80ca78:	d9800217 	ldw	r6,8(sp)
  80ca7c:	d9c00017 	ldw	r7,0(sp)
  80ca80:	da400117 	ldw	r9,4(sp)
  80ca84:	113ffd44 	addi	r4,r2,-11
  80ca88:	00c00704 	movi	r3,28
  80ca8c:	1900ed16 	blt	r3,r4,80ce44 <__muldf3+0x5c0>
  80ca90:	00c00744 	movi	r3,29
  80ca94:	147ffe04 	addi	r17,r2,-8
  80ca98:	1907c83a 	sub	r3,r3,r4
  80ca9c:	8460983a 	sll	r16,r16,r17
  80caa0:	98c6d83a 	srl	r3,r19,r3
  80caa4:	9c68983a 	sll	r20,r19,r17
  80caa8:	1c20b03a 	or	r16,r3,r16
  80caac:	1080fcc4 	addi	r2,r2,1011
  80cab0:	00a5c83a 	sub	r18,zero,r2
  80cab4:	0027883a 	mov	r19,zero
  80cab8:	0039883a 	mov	fp,zero
  80cabc:	003f9006 	br	80c900 <__alt_mem_onchip_mem+0xff804900>
  80cac0:	3446b03a 	or	r3,r6,r17
  80cac4:	1800261e 	bne	r3,zero,80cb60 <__muldf3+0x2dc>
  80cac8:	0023883a 	mov	r17,zero
  80cacc:	0011883a 	mov	r8,zero
  80cad0:	01400084 	movi	r5,2
  80cad4:	003f9c06 	br	80c948 <__alt_mem_onchip_mem+0xff804948>
  80cad8:	3446b03a 	or	r3,r6,r17
  80cadc:	18001c26 	beq	r3,zero,80cb50 <__muldf3+0x2cc>
  80cae0:	8800ce26 	beq	r17,zero,80ce1c <__muldf3+0x598>
  80cae4:	8809883a 	mov	r4,r17
  80cae8:	d9800215 	stw	r6,8(sp)
  80caec:	da400115 	stw	r9,4(sp)
  80caf0:	da800015 	stw	r10,0(sp)
  80caf4:	080da9c0 	call	80da9c <__clzsi2>
  80caf8:	d9800217 	ldw	r6,8(sp)
  80cafc:	da400117 	ldw	r9,4(sp)
  80cb00:	da800017 	ldw	r10,0(sp)
  80cb04:	113ffd44 	addi	r4,r2,-11
  80cb08:	00c00704 	movi	r3,28
  80cb0c:	1900bf16 	blt	r3,r4,80ce0c <__muldf3+0x588>
  80cb10:	00c00744 	movi	r3,29
  80cb14:	123ffe04 	addi	r8,r2,-8
  80cb18:	1907c83a 	sub	r3,r3,r4
  80cb1c:	8a22983a 	sll	r17,r17,r8
  80cb20:	30c6d83a 	srl	r3,r6,r3
  80cb24:	3210983a 	sll	r8,r6,r8
  80cb28:	1c62b03a 	or	r17,r3,r17
  80cb2c:	1080fcc4 	addi	r2,r2,1011
  80cb30:	0085c83a 	sub	r2,zero,r2
  80cb34:	000b883a 	mov	r5,zero
  80cb38:	003f8306 	br	80c948 <__alt_mem_onchip_mem+0xff804948>
  80cb3c:	b02b883a 	mov	r21,r22
  80cb40:	0081ffc4 	movi	r2,2047
  80cb44:	000b883a 	mov	r5,zero
  80cb48:	0029883a 	mov	r20,zero
  80cb4c:	003fac06 	br	80ca00 <__alt_mem_onchip_mem+0xff804a00>
  80cb50:	0023883a 	mov	r17,zero
  80cb54:	0011883a 	mov	r8,zero
  80cb58:	01400044 	movi	r5,1
  80cb5c:	003f7a06 	br	80c948 <__alt_mem_onchip_mem+0xff804948>
  80cb60:	014000c4 	movi	r5,3
  80cb64:	003f7806 	br	80c948 <__alt_mem_onchip_mem+0xff804948>
  80cb68:	04c00104 	movi	r19,4
  80cb6c:	0021883a 	mov	r16,zero
  80cb70:	0029883a 	mov	r20,zero
  80cb74:	07000044 	movi	fp,1
  80cb78:	003f6106 	br	80c900 <__alt_mem_onchip_mem+0xff804900>
  80cb7c:	04c00304 	movi	r19,12
  80cb80:	070000c4 	movi	fp,3
  80cb84:	003f5e06 	br	80c900 <__alt_mem_onchip_mem+0xff804900>
  80cb88:	01400434 	movhi	r5,16
  80cb8c:	002b883a 	mov	r21,zero
  80cb90:	297fffc4 	addi	r5,r5,-1
  80cb94:	053fffc4 	movi	r20,-1
  80cb98:	0081ffc4 	movi	r2,2047
  80cb9c:	003f9806 	br	80ca00 <__alt_mem_onchip_mem+0xff804a00>
  80cba0:	8023883a 	mov	r17,r16
  80cba4:	a011883a 	mov	r8,r20
  80cba8:	e00b883a 	mov	r5,fp
  80cbac:	003f8a06 	br	80c9d8 <__alt_mem_onchip_mem+0xff8049d8>
  80cbb0:	8023883a 	mov	r17,r16
  80cbb4:	a011883a 	mov	r8,r20
  80cbb8:	482d883a 	mov	r22,r9
  80cbbc:	e00b883a 	mov	r5,fp
  80cbc0:	003f8506 	br	80c9d8 <__alt_mem_onchip_mem+0xff8049d8>
  80cbc4:	a00ad43a 	srli	r5,r20,16
  80cbc8:	401ad43a 	srli	r13,r8,16
  80cbcc:	a53fffcc 	andi	r20,r20,65535
  80cbd0:	423fffcc 	andi	r8,r8,65535
  80cbd4:	4519383a 	mul	r12,r8,r20
  80cbd8:	4147383a 	mul	r3,r8,r5
  80cbdc:	6d09383a 	mul	r4,r13,r20
  80cbe0:	600cd43a 	srli	r6,r12,16
  80cbe4:	2b5d383a 	mul	r14,r5,r13
  80cbe8:	20c9883a 	add	r4,r4,r3
  80cbec:	310d883a 	add	r6,r6,r4
  80cbf0:	30c0022e 	bgeu	r6,r3,80cbfc <__muldf3+0x378>
  80cbf4:	00c00074 	movhi	r3,1
  80cbf8:	70dd883a 	add	r14,r14,r3
  80cbfc:	8826d43a 	srli	r19,r17,16
  80cc00:	8bffffcc 	andi	r15,r17,65535
  80cc04:	7d23383a 	mul	r17,r15,r20
  80cc08:	7949383a 	mul	r4,r15,r5
  80cc0c:	9d29383a 	mul	r20,r19,r20
  80cc10:	8814d43a 	srli	r10,r17,16
  80cc14:	3012943a 	slli	r9,r6,16
  80cc18:	a129883a 	add	r20,r20,r4
  80cc1c:	633fffcc 	andi	r12,r12,65535
  80cc20:	5515883a 	add	r10,r10,r20
  80cc24:	3006d43a 	srli	r3,r6,16
  80cc28:	4b13883a 	add	r9,r9,r12
  80cc2c:	2ccb383a 	mul	r5,r5,r19
  80cc30:	5100022e 	bgeu	r10,r4,80cc3c <__muldf3+0x3b8>
  80cc34:	01000074 	movhi	r4,1
  80cc38:	290b883a 	add	r5,r5,r4
  80cc3c:	802ad43a 	srli	r21,r16,16
  80cc40:	843fffcc 	andi	r16,r16,65535
  80cc44:	440d383a 	mul	r6,r8,r16
  80cc48:	4565383a 	mul	r18,r8,r21
  80cc4c:	8349383a 	mul	r4,r16,r13
  80cc50:	500e943a 	slli	r7,r10,16
  80cc54:	3010d43a 	srli	r8,r6,16
  80cc58:	5028d43a 	srli	r20,r10,16
  80cc5c:	2489883a 	add	r4,r4,r18
  80cc60:	8abfffcc 	andi	r10,r17,65535
  80cc64:	3a95883a 	add	r10,r7,r10
  80cc68:	4119883a 	add	r12,r8,r4
  80cc6c:	a169883a 	add	r20,r20,r5
  80cc70:	1a87883a 	add	r3,r3,r10
  80cc74:	6d5b383a 	mul	r13,r13,r21
  80cc78:	6480022e 	bgeu	r12,r18,80cc84 <__muldf3+0x400>
  80cc7c:	01000074 	movhi	r4,1
  80cc80:	691b883a 	add	r13,r13,r4
  80cc84:	7c25383a 	mul	r18,r15,r16
  80cc88:	7d4b383a 	mul	r5,r15,r21
  80cc8c:	84cf383a 	mul	r7,r16,r19
  80cc90:	901ed43a 	srli	r15,r18,16
  80cc94:	6008d43a 	srli	r4,r12,16
  80cc98:	6010943a 	slli	r8,r12,16
  80cc9c:	394f883a 	add	r7,r7,r5
  80cca0:	333fffcc 	andi	r12,r6,65535
  80cca4:	79df883a 	add	r15,r15,r7
  80cca8:	235b883a 	add	r13,r4,r13
  80ccac:	9d63383a 	mul	r17,r19,r21
  80ccb0:	4309883a 	add	r4,r8,r12
  80ccb4:	7940022e 	bgeu	r15,r5,80ccc0 <__muldf3+0x43c>
  80ccb8:	01400074 	movhi	r5,1
  80ccbc:	8963883a 	add	r17,r17,r5
  80ccc0:	780a943a 	slli	r5,r15,16
  80ccc4:	91bfffcc 	andi	r6,r18,65535
  80ccc8:	70c7883a 	add	r3,r14,r3
  80cccc:	298d883a 	add	r6,r5,r6
  80ccd0:	1a8f803a 	cmpltu	r7,r3,r10
  80ccd4:	350b883a 	add	r5,r6,r20
  80ccd8:	20c7883a 	add	r3,r4,r3
  80ccdc:	3955883a 	add	r10,r7,r5
  80cce0:	1909803a 	cmpltu	r4,r3,r4
  80cce4:	6a91883a 	add	r8,r13,r10
  80cce8:	780cd43a 	srli	r6,r15,16
  80ccec:	2219883a 	add	r12,r4,r8
  80ccf0:	2d0b803a 	cmpltu	r5,r5,r20
  80ccf4:	51cf803a 	cmpltu	r7,r10,r7
  80ccf8:	29ceb03a 	or	r7,r5,r7
  80ccfc:	4351803a 	cmpltu	r8,r8,r13
  80cd00:	610b803a 	cmpltu	r5,r12,r4
  80cd04:	4148b03a 	or	r4,r8,r5
  80cd08:	398f883a 	add	r7,r7,r6
  80cd0c:	3909883a 	add	r4,r7,r4
  80cd10:	1810927a 	slli	r8,r3,9
  80cd14:	2449883a 	add	r4,r4,r17
  80cd18:	2008927a 	slli	r4,r4,9
  80cd1c:	6022d5fa 	srli	r17,r12,23
  80cd20:	1806d5fa 	srli	r3,r3,23
  80cd24:	4252b03a 	or	r9,r8,r9
  80cd28:	600a927a 	slli	r5,r12,9
  80cd2c:	4810c03a 	cmpne	r8,r9,zero
  80cd30:	2462b03a 	or	r17,r4,r17
  80cd34:	40c6b03a 	or	r3,r8,r3
  80cd38:	8900402c 	andhi	r4,r17,256
  80cd3c:	1950b03a 	or	r8,r3,r5
  80cd40:	20000726 	beq	r4,zero,80cd60 <__muldf3+0x4dc>
  80cd44:	4006d07a 	srli	r3,r8,1
  80cd48:	880497fa 	slli	r2,r17,31
  80cd4c:	4200004c 	andi	r8,r8,1
  80cd50:	8822d07a 	srli	r17,r17,1
  80cd54:	1a10b03a 	or	r8,r3,r8
  80cd58:	1210b03a 	or	r8,r2,r8
  80cd5c:	5805883a 	mov	r2,r11
  80cd60:	1140ffc4 	addi	r5,r2,1023
  80cd64:	0140440e 	bge	zero,r5,80ce78 <__muldf3+0x5f4>
  80cd68:	40c001cc 	andi	r3,r8,7
  80cd6c:	18000726 	beq	r3,zero,80cd8c <__muldf3+0x508>
  80cd70:	40c003cc 	andi	r3,r8,15
  80cd74:	01000104 	movi	r4,4
  80cd78:	19000426 	beq	r3,r4,80cd8c <__muldf3+0x508>
  80cd7c:	4107883a 	add	r3,r8,r4
  80cd80:	1a11803a 	cmpltu	r8,r3,r8
  80cd84:	8a23883a 	add	r17,r17,r8
  80cd88:	1811883a 	mov	r8,r3
  80cd8c:	88c0402c 	andhi	r3,r17,256
  80cd90:	18000426 	beq	r3,zero,80cda4 <__muldf3+0x520>
  80cd94:	11410004 	addi	r5,r2,1024
  80cd98:	00bfc034 	movhi	r2,65280
  80cd9c:	10bfffc4 	addi	r2,r2,-1
  80cda0:	88a2703a 	and	r17,r17,r2
  80cda4:	0081ff84 	movi	r2,2046
  80cda8:	117f6416 	blt	r2,r5,80cb3c <__alt_mem_onchip_mem+0xff804b3c>
  80cdac:	8828977a 	slli	r20,r17,29
  80cdb0:	4010d0fa 	srli	r8,r8,3
  80cdb4:	8822927a 	slli	r17,r17,9
  80cdb8:	2881ffcc 	andi	r2,r5,2047
  80cdbc:	a228b03a 	or	r20,r20,r8
  80cdc0:	880ad33a 	srli	r5,r17,12
  80cdc4:	b02b883a 	mov	r21,r22
  80cdc8:	003f0d06 	br	80ca00 <__alt_mem_onchip_mem+0xff804a00>
  80cdcc:	8080022c 	andhi	r2,r16,8
  80cdd0:	10000926 	beq	r2,zero,80cdf8 <__muldf3+0x574>
  80cdd4:	8880022c 	andhi	r2,r17,8
  80cdd8:	1000071e 	bne	r2,zero,80cdf8 <__muldf3+0x574>
  80cddc:	00800434 	movhi	r2,16
  80cde0:	89400234 	orhi	r5,r17,8
  80cde4:	10bfffc4 	addi	r2,r2,-1
  80cde8:	b82b883a 	mov	r21,r23
  80cdec:	288a703a 	and	r5,r5,r2
  80cdf0:	4029883a 	mov	r20,r8
  80cdf4:	003f6806 	br	80cb98 <__alt_mem_onchip_mem+0xff804b98>
  80cdf8:	00800434 	movhi	r2,16
  80cdfc:	81400234 	orhi	r5,r16,8
  80ce00:	10bfffc4 	addi	r2,r2,-1
  80ce04:	288a703a 	and	r5,r5,r2
  80ce08:	003f6306 	br	80cb98 <__alt_mem_onchip_mem+0xff804b98>
  80ce0c:	147ff604 	addi	r17,r2,-40
  80ce10:	3462983a 	sll	r17,r6,r17
  80ce14:	0011883a 	mov	r8,zero
  80ce18:	003f4406 	br	80cb2c <__alt_mem_onchip_mem+0xff804b2c>
  80ce1c:	3009883a 	mov	r4,r6
  80ce20:	d9800215 	stw	r6,8(sp)
  80ce24:	da400115 	stw	r9,4(sp)
  80ce28:	da800015 	stw	r10,0(sp)
  80ce2c:	080da9c0 	call	80da9c <__clzsi2>
  80ce30:	10800804 	addi	r2,r2,32
  80ce34:	da800017 	ldw	r10,0(sp)
  80ce38:	da400117 	ldw	r9,4(sp)
  80ce3c:	d9800217 	ldw	r6,8(sp)
  80ce40:	003f3006 	br	80cb04 <__alt_mem_onchip_mem+0xff804b04>
  80ce44:	143ff604 	addi	r16,r2,-40
  80ce48:	9c20983a 	sll	r16,r19,r16
  80ce4c:	0029883a 	mov	r20,zero
  80ce50:	003f1606 	br	80caac <__alt_mem_onchip_mem+0xff804aac>
  80ce54:	d9800215 	stw	r6,8(sp)
  80ce58:	d9c00015 	stw	r7,0(sp)
  80ce5c:	da400115 	stw	r9,4(sp)
  80ce60:	080da9c0 	call	80da9c <__clzsi2>
  80ce64:	10800804 	addi	r2,r2,32
  80ce68:	da400117 	ldw	r9,4(sp)
  80ce6c:	d9c00017 	ldw	r7,0(sp)
  80ce70:	d9800217 	ldw	r6,8(sp)
  80ce74:	003f0306 	br	80ca84 <__alt_mem_onchip_mem+0xff804a84>
  80ce78:	00c00044 	movi	r3,1
  80ce7c:	1947c83a 	sub	r3,r3,r5
  80ce80:	00800e04 	movi	r2,56
  80ce84:	10feda16 	blt	r2,r3,80c9f0 <__alt_mem_onchip_mem+0xff8049f0>
  80ce88:	008007c4 	movi	r2,31
  80ce8c:	10c01b16 	blt	r2,r3,80cefc <__muldf3+0x678>
  80ce90:	00800804 	movi	r2,32
  80ce94:	10c5c83a 	sub	r2,r2,r3
  80ce98:	888a983a 	sll	r5,r17,r2
  80ce9c:	40c8d83a 	srl	r4,r8,r3
  80cea0:	4084983a 	sll	r2,r8,r2
  80cea4:	88e2d83a 	srl	r17,r17,r3
  80cea8:	2906b03a 	or	r3,r5,r4
  80ceac:	1004c03a 	cmpne	r2,r2,zero
  80ceb0:	1886b03a 	or	r3,r3,r2
  80ceb4:	188001cc 	andi	r2,r3,7
  80ceb8:	10000726 	beq	r2,zero,80ced8 <__muldf3+0x654>
  80cebc:	188003cc 	andi	r2,r3,15
  80cec0:	01000104 	movi	r4,4
  80cec4:	11000426 	beq	r2,r4,80ced8 <__muldf3+0x654>
  80cec8:	1805883a 	mov	r2,r3
  80cecc:	10c00104 	addi	r3,r2,4
  80ced0:	1885803a 	cmpltu	r2,r3,r2
  80ced4:	88a3883a 	add	r17,r17,r2
  80ced8:	8880202c 	andhi	r2,r17,128
  80cedc:	10001c26 	beq	r2,zero,80cf50 <__muldf3+0x6cc>
  80cee0:	b02b883a 	mov	r21,r22
  80cee4:	00800044 	movi	r2,1
  80cee8:	000b883a 	mov	r5,zero
  80ceec:	0029883a 	mov	r20,zero
  80cef0:	003ec306 	br	80ca00 <__alt_mem_onchip_mem+0xff804a00>
  80cef4:	5805883a 	mov	r2,r11
  80cef8:	003f9906 	br	80cd60 <__alt_mem_onchip_mem+0xff804d60>
  80cefc:	00bff844 	movi	r2,-31
  80cf00:	1145c83a 	sub	r2,r2,r5
  80cf04:	8888d83a 	srl	r4,r17,r2
  80cf08:	00800804 	movi	r2,32
  80cf0c:	18801a26 	beq	r3,r2,80cf78 <__muldf3+0x6f4>
  80cf10:	00801004 	movi	r2,64
  80cf14:	10c5c83a 	sub	r2,r2,r3
  80cf18:	8884983a 	sll	r2,r17,r2
  80cf1c:	1204b03a 	or	r2,r2,r8
  80cf20:	1004c03a 	cmpne	r2,r2,zero
  80cf24:	2084b03a 	or	r2,r4,r2
  80cf28:	144001cc 	andi	r17,r2,7
  80cf2c:	88000d1e 	bne	r17,zero,80cf64 <__muldf3+0x6e0>
  80cf30:	000b883a 	mov	r5,zero
  80cf34:	1028d0fa 	srli	r20,r2,3
  80cf38:	b02b883a 	mov	r21,r22
  80cf3c:	0005883a 	mov	r2,zero
  80cf40:	a468b03a 	or	r20,r20,r17
  80cf44:	003eae06 	br	80ca00 <__alt_mem_onchip_mem+0xff804a00>
  80cf48:	1007883a 	mov	r3,r2
  80cf4c:	0023883a 	mov	r17,zero
  80cf50:	880a927a 	slli	r5,r17,9
  80cf54:	1805883a 	mov	r2,r3
  80cf58:	8822977a 	slli	r17,r17,29
  80cf5c:	280ad33a 	srli	r5,r5,12
  80cf60:	003ff406 	br	80cf34 <__alt_mem_onchip_mem+0xff804f34>
  80cf64:	10c003cc 	andi	r3,r2,15
  80cf68:	01000104 	movi	r4,4
  80cf6c:	193ff626 	beq	r3,r4,80cf48 <__alt_mem_onchip_mem+0xff804f48>
  80cf70:	0023883a 	mov	r17,zero
  80cf74:	003fd506 	br	80cecc <__alt_mem_onchip_mem+0xff804ecc>
  80cf78:	0005883a 	mov	r2,zero
  80cf7c:	003fe706 	br	80cf1c <__alt_mem_onchip_mem+0xff804f1c>
  80cf80:	00800434 	movhi	r2,16
  80cf84:	89400234 	orhi	r5,r17,8
  80cf88:	10bfffc4 	addi	r2,r2,-1
  80cf8c:	b02b883a 	mov	r21,r22
  80cf90:	288a703a 	and	r5,r5,r2
  80cf94:	4029883a 	mov	r20,r8
  80cf98:	003eff06 	br	80cb98 <__alt_mem_onchip_mem+0xff804b98>

0080cf9c <__subdf3>:
  80cf9c:	02000434 	movhi	r8,16
  80cfa0:	423fffc4 	addi	r8,r8,-1
  80cfa4:	defffb04 	addi	sp,sp,-20
  80cfa8:	2a14703a 	and	r10,r5,r8
  80cfac:	3812d53a 	srli	r9,r7,20
  80cfb0:	3a10703a 	and	r8,r7,r8
  80cfb4:	2006d77a 	srli	r3,r4,29
  80cfb8:	3004d77a 	srli	r2,r6,29
  80cfbc:	dc000015 	stw	r16,0(sp)
  80cfc0:	501490fa 	slli	r10,r10,3
  80cfc4:	2820d53a 	srli	r16,r5,20
  80cfc8:	401090fa 	slli	r8,r8,3
  80cfcc:	dc800215 	stw	r18,8(sp)
  80cfd0:	dc400115 	stw	r17,4(sp)
  80cfd4:	dfc00415 	stw	ra,16(sp)
  80cfd8:	202290fa 	slli	r17,r4,3
  80cfdc:	dcc00315 	stw	r19,12(sp)
  80cfe0:	4a41ffcc 	andi	r9,r9,2047
  80cfe4:	0101ffc4 	movi	r4,2047
  80cfe8:	2824d7fa 	srli	r18,r5,31
  80cfec:	8401ffcc 	andi	r16,r16,2047
  80cff0:	50c6b03a 	or	r3,r10,r3
  80cff4:	380ed7fa 	srli	r7,r7,31
  80cff8:	408ab03a 	or	r5,r8,r2
  80cffc:	300c90fa 	slli	r6,r6,3
  80d000:	49009626 	beq	r9,r4,80d25c <__subdf3+0x2c0>
  80d004:	39c0005c 	xori	r7,r7,1
  80d008:	8245c83a 	sub	r2,r16,r9
  80d00c:	3c807426 	beq	r7,r18,80d1e0 <__subdf3+0x244>
  80d010:	0080af0e 	bge	zero,r2,80d2d0 <__subdf3+0x334>
  80d014:	48002a1e 	bne	r9,zero,80d0c0 <__subdf3+0x124>
  80d018:	2988b03a 	or	r4,r5,r6
  80d01c:	20009a1e 	bne	r4,zero,80d288 <__subdf3+0x2ec>
  80d020:	888001cc 	andi	r2,r17,7
  80d024:	10000726 	beq	r2,zero,80d044 <__subdf3+0xa8>
  80d028:	888003cc 	andi	r2,r17,15
  80d02c:	01000104 	movi	r4,4
  80d030:	11000426 	beq	r2,r4,80d044 <__subdf3+0xa8>
  80d034:	890b883a 	add	r5,r17,r4
  80d038:	2c63803a 	cmpltu	r17,r5,r17
  80d03c:	1c47883a 	add	r3,r3,r17
  80d040:	2823883a 	mov	r17,r5
  80d044:	1880202c 	andhi	r2,r3,128
  80d048:	10005926 	beq	r2,zero,80d1b0 <__subdf3+0x214>
  80d04c:	84000044 	addi	r16,r16,1
  80d050:	0081ffc4 	movi	r2,2047
  80d054:	8080be26 	beq	r16,r2,80d350 <__subdf3+0x3b4>
  80d058:	017fe034 	movhi	r5,65408
  80d05c:	297fffc4 	addi	r5,r5,-1
  80d060:	1946703a 	and	r3,r3,r5
  80d064:	1804977a 	slli	r2,r3,29
  80d068:	1806927a 	slli	r3,r3,9
  80d06c:	8822d0fa 	srli	r17,r17,3
  80d070:	8401ffcc 	andi	r16,r16,2047
  80d074:	180ad33a 	srli	r5,r3,12
  80d078:	9100004c 	andi	r4,r18,1
  80d07c:	1444b03a 	or	r2,r2,r17
  80d080:	80c1ffcc 	andi	r3,r16,2047
  80d084:	1820953a 	slli	r16,r3,20
  80d088:	20c03fcc 	andi	r3,r4,255
  80d08c:	180897fa 	slli	r4,r3,31
  80d090:	00c00434 	movhi	r3,16
  80d094:	18ffffc4 	addi	r3,r3,-1
  80d098:	28c6703a 	and	r3,r5,r3
  80d09c:	1c06b03a 	or	r3,r3,r16
  80d0a0:	1906b03a 	or	r3,r3,r4
  80d0a4:	dfc00417 	ldw	ra,16(sp)
  80d0a8:	dcc00317 	ldw	r19,12(sp)
  80d0ac:	dc800217 	ldw	r18,8(sp)
  80d0b0:	dc400117 	ldw	r17,4(sp)
  80d0b4:	dc000017 	ldw	r16,0(sp)
  80d0b8:	dec00504 	addi	sp,sp,20
  80d0bc:	f800283a 	ret
  80d0c0:	0101ffc4 	movi	r4,2047
  80d0c4:	813fd626 	beq	r16,r4,80d020 <__alt_mem_onchip_mem+0xff805020>
  80d0c8:	29402034 	orhi	r5,r5,128
  80d0cc:	01000e04 	movi	r4,56
  80d0d0:	2080a316 	blt	r4,r2,80d360 <__subdf3+0x3c4>
  80d0d4:	010007c4 	movi	r4,31
  80d0d8:	2080c616 	blt	r4,r2,80d3f4 <__subdf3+0x458>
  80d0dc:	01000804 	movi	r4,32
  80d0e0:	2089c83a 	sub	r4,r4,r2
  80d0e4:	2910983a 	sll	r8,r5,r4
  80d0e8:	308ed83a 	srl	r7,r6,r2
  80d0ec:	3108983a 	sll	r4,r6,r4
  80d0f0:	2884d83a 	srl	r2,r5,r2
  80d0f4:	41ccb03a 	or	r6,r8,r7
  80d0f8:	2008c03a 	cmpne	r4,r4,zero
  80d0fc:	310cb03a 	or	r6,r6,r4
  80d100:	898dc83a 	sub	r6,r17,r6
  80d104:	89a3803a 	cmpltu	r17,r17,r6
  80d108:	1887c83a 	sub	r3,r3,r2
  80d10c:	1c47c83a 	sub	r3,r3,r17
  80d110:	3023883a 	mov	r17,r6
  80d114:	1880202c 	andhi	r2,r3,128
  80d118:	10002326 	beq	r2,zero,80d1a8 <__subdf3+0x20c>
  80d11c:	04c02034 	movhi	r19,128
  80d120:	9cffffc4 	addi	r19,r19,-1
  80d124:	1ce6703a 	and	r19,r3,r19
  80d128:	98007a26 	beq	r19,zero,80d314 <__subdf3+0x378>
  80d12c:	9809883a 	mov	r4,r19
  80d130:	080da9c0 	call	80da9c <__clzsi2>
  80d134:	113ffe04 	addi	r4,r2,-8
  80d138:	00c007c4 	movi	r3,31
  80d13c:	19007b16 	blt	r3,r4,80d32c <__subdf3+0x390>
  80d140:	00800804 	movi	r2,32
  80d144:	1105c83a 	sub	r2,r2,r4
  80d148:	8884d83a 	srl	r2,r17,r2
  80d14c:	9906983a 	sll	r3,r19,r4
  80d150:	8922983a 	sll	r17,r17,r4
  80d154:	10c4b03a 	or	r2,r2,r3
  80d158:	24007816 	blt	r4,r16,80d33c <__subdf3+0x3a0>
  80d15c:	2421c83a 	sub	r16,r4,r16
  80d160:	80c00044 	addi	r3,r16,1
  80d164:	010007c4 	movi	r4,31
  80d168:	20c09516 	blt	r4,r3,80d3c0 <__subdf3+0x424>
  80d16c:	01400804 	movi	r5,32
  80d170:	28cbc83a 	sub	r5,r5,r3
  80d174:	88c8d83a 	srl	r4,r17,r3
  80d178:	8962983a 	sll	r17,r17,r5
  80d17c:	114a983a 	sll	r5,r2,r5
  80d180:	10c6d83a 	srl	r3,r2,r3
  80d184:	8804c03a 	cmpne	r2,r17,zero
  80d188:	290ab03a 	or	r5,r5,r4
  80d18c:	28a2b03a 	or	r17,r5,r2
  80d190:	0021883a 	mov	r16,zero
  80d194:	003fa206 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d198:	2090b03a 	or	r8,r4,r2
  80d19c:	40018e26 	beq	r8,zero,80d7d8 <__subdf3+0x83c>
  80d1a0:	1007883a 	mov	r3,r2
  80d1a4:	2023883a 	mov	r17,r4
  80d1a8:	888001cc 	andi	r2,r17,7
  80d1ac:	103f9e1e 	bne	r2,zero,80d028 <__alt_mem_onchip_mem+0xff805028>
  80d1b0:	1804977a 	slli	r2,r3,29
  80d1b4:	8822d0fa 	srli	r17,r17,3
  80d1b8:	1810d0fa 	srli	r8,r3,3
  80d1bc:	9100004c 	andi	r4,r18,1
  80d1c0:	1444b03a 	or	r2,r2,r17
  80d1c4:	00c1ffc4 	movi	r3,2047
  80d1c8:	80c02826 	beq	r16,r3,80d26c <__subdf3+0x2d0>
  80d1cc:	01400434 	movhi	r5,16
  80d1d0:	297fffc4 	addi	r5,r5,-1
  80d1d4:	80e0703a 	and	r16,r16,r3
  80d1d8:	414a703a 	and	r5,r8,r5
  80d1dc:	003fa806 	br	80d080 <__alt_mem_onchip_mem+0xff805080>
  80d1e0:	0080630e 	bge	zero,r2,80d370 <__subdf3+0x3d4>
  80d1e4:	48003026 	beq	r9,zero,80d2a8 <__subdf3+0x30c>
  80d1e8:	0101ffc4 	movi	r4,2047
  80d1ec:	813f8c26 	beq	r16,r4,80d020 <__alt_mem_onchip_mem+0xff805020>
  80d1f0:	29402034 	orhi	r5,r5,128
  80d1f4:	01000e04 	movi	r4,56
  80d1f8:	2080a90e 	bge	r4,r2,80d4a0 <__subdf3+0x504>
  80d1fc:	298cb03a 	or	r6,r5,r6
  80d200:	3012c03a 	cmpne	r9,r6,zero
  80d204:	0005883a 	mov	r2,zero
  80d208:	4c53883a 	add	r9,r9,r17
  80d20c:	4c63803a 	cmpltu	r17,r9,r17
  80d210:	10c7883a 	add	r3,r2,r3
  80d214:	88c7883a 	add	r3,r17,r3
  80d218:	4823883a 	mov	r17,r9
  80d21c:	1880202c 	andhi	r2,r3,128
  80d220:	1000d026 	beq	r2,zero,80d564 <__subdf3+0x5c8>
  80d224:	84000044 	addi	r16,r16,1
  80d228:	0081ffc4 	movi	r2,2047
  80d22c:	8080fe26 	beq	r16,r2,80d628 <__subdf3+0x68c>
  80d230:	00bfe034 	movhi	r2,65408
  80d234:	10bfffc4 	addi	r2,r2,-1
  80d238:	1886703a 	and	r3,r3,r2
  80d23c:	880ad07a 	srli	r5,r17,1
  80d240:	180497fa 	slli	r2,r3,31
  80d244:	8900004c 	andi	r4,r17,1
  80d248:	2922b03a 	or	r17,r5,r4
  80d24c:	1806d07a 	srli	r3,r3,1
  80d250:	1462b03a 	or	r17,r2,r17
  80d254:	3825883a 	mov	r18,r7
  80d258:	003f7106 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d25c:	2984b03a 	or	r2,r5,r6
  80d260:	103f6826 	beq	r2,zero,80d004 <__alt_mem_onchip_mem+0xff805004>
  80d264:	39c03fcc 	andi	r7,r7,255
  80d268:	003f6706 	br	80d008 <__alt_mem_onchip_mem+0xff805008>
  80d26c:	4086b03a 	or	r3,r8,r2
  80d270:	18015226 	beq	r3,zero,80d7bc <__subdf3+0x820>
  80d274:	00c00434 	movhi	r3,16
  80d278:	41400234 	orhi	r5,r8,8
  80d27c:	18ffffc4 	addi	r3,r3,-1
  80d280:	28ca703a 	and	r5,r5,r3
  80d284:	003f7e06 	br	80d080 <__alt_mem_onchip_mem+0xff805080>
  80d288:	10bfffc4 	addi	r2,r2,-1
  80d28c:	1000491e 	bne	r2,zero,80d3b4 <__subdf3+0x418>
  80d290:	898fc83a 	sub	r7,r17,r6
  80d294:	89e3803a 	cmpltu	r17,r17,r7
  80d298:	1947c83a 	sub	r3,r3,r5
  80d29c:	1c47c83a 	sub	r3,r3,r17
  80d2a0:	3823883a 	mov	r17,r7
  80d2a4:	003f9b06 	br	80d114 <__alt_mem_onchip_mem+0xff805114>
  80d2a8:	2988b03a 	or	r4,r5,r6
  80d2ac:	203f5c26 	beq	r4,zero,80d020 <__alt_mem_onchip_mem+0xff805020>
  80d2b0:	10bfffc4 	addi	r2,r2,-1
  80d2b4:	1000931e 	bne	r2,zero,80d504 <__subdf3+0x568>
  80d2b8:	898d883a 	add	r6,r17,r6
  80d2bc:	3463803a 	cmpltu	r17,r6,r17
  80d2c0:	1947883a 	add	r3,r3,r5
  80d2c4:	88c7883a 	add	r3,r17,r3
  80d2c8:	3023883a 	mov	r17,r6
  80d2cc:	003fd306 	br	80d21c <__alt_mem_onchip_mem+0xff80521c>
  80d2d0:	1000541e 	bne	r2,zero,80d424 <__subdf3+0x488>
  80d2d4:	80800044 	addi	r2,r16,1
  80d2d8:	1081ffcc 	andi	r2,r2,2047
  80d2dc:	01000044 	movi	r4,1
  80d2e0:	2080a20e 	bge	r4,r2,80d56c <__subdf3+0x5d0>
  80d2e4:	8989c83a 	sub	r4,r17,r6
  80d2e8:	8905803a 	cmpltu	r2,r17,r4
  80d2ec:	1967c83a 	sub	r19,r3,r5
  80d2f0:	98a7c83a 	sub	r19,r19,r2
  80d2f4:	9880202c 	andhi	r2,r19,128
  80d2f8:	10006326 	beq	r2,zero,80d488 <__subdf3+0x4ec>
  80d2fc:	3463c83a 	sub	r17,r6,r17
  80d300:	28c7c83a 	sub	r3,r5,r3
  80d304:	344d803a 	cmpltu	r6,r6,r17
  80d308:	19a7c83a 	sub	r19,r3,r6
  80d30c:	3825883a 	mov	r18,r7
  80d310:	983f861e 	bne	r19,zero,80d12c <__alt_mem_onchip_mem+0xff80512c>
  80d314:	8809883a 	mov	r4,r17
  80d318:	080da9c0 	call	80da9c <__clzsi2>
  80d31c:	10800804 	addi	r2,r2,32
  80d320:	113ffe04 	addi	r4,r2,-8
  80d324:	00c007c4 	movi	r3,31
  80d328:	193f850e 	bge	r3,r4,80d140 <__alt_mem_onchip_mem+0xff805140>
  80d32c:	10bff604 	addi	r2,r2,-40
  80d330:	8884983a 	sll	r2,r17,r2
  80d334:	0023883a 	mov	r17,zero
  80d338:	243f880e 	bge	r4,r16,80d15c <__alt_mem_onchip_mem+0xff80515c>
  80d33c:	00ffe034 	movhi	r3,65408
  80d340:	18ffffc4 	addi	r3,r3,-1
  80d344:	8121c83a 	sub	r16,r16,r4
  80d348:	10c6703a 	and	r3,r2,r3
  80d34c:	003f3406 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d350:	9100004c 	andi	r4,r18,1
  80d354:	000b883a 	mov	r5,zero
  80d358:	0005883a 	mov	r2,zero
  80d35c:	003f4806 	br	80d080 <__alt_mem_onchip_mem+0xff805080>
  80d360:	298cb03a 	or	r6,r5,r6
  80d364:	300cc03a 	cmpne	r6,r6,zero
  80d368:	0005883a 	mov	r2,zero
  80d36c:	003f6406 	br	80d100 <__alt_mem_onchip_mem+0xff805100>
  80d370:	10009a1e 	bne	r2,zero,80d5dc <__subdf3+0x640>
  80d374:	82400044 	addi	r9,r16,1
  80d378:	4881ffcc 	andi	r2,r9,2047
  80d37c:	02800044 	movi	r10,1
  80d380:	5080670e 	bge	r10,r2,80d520 <__subdf3+0x584>
  80d384:	0081ffc4 	movi	r2,2047
  80d388:	4880af26 	beq	r9,r2,80d648 <__subdf3+0x6ac>
  80d38c:	898d883a 	add	r6,r17,r6
  80d390:	1945883a 	add	r2,r3,r5
  80d394:	3447803a 	cmpltu	r3,r6,r17
  80d398:	1887883a 	add	r3,r3,r2
  80d39c:	182297fa 	slli	r17,r3,31
  80d3a0:	300cd07a 	srli	r6,r6,1
  80d3a4:	1806d07a 	srli	r3,r3,1
  80d3a8:	4821883a 	mov	r16,r9
  80d3ac:	89a2b03a 	or	r17,r17,r6
  80d3b0:	003f1b06 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d3b4:	0101ffc4 	movi	r4,2047
  80d3b8:	813f441e 	bne	r16,r4,80d0cc <__alt_mem_onchip_mem+0xff8050cc>
  80d3bc:	003f1806 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d3c0:	843ff844 	addi	r16,r16,-31
  80d3c4:	01400804 	movi	r5,32
  80d3c8:	1408d83a 	srl	r4,r2,r16
  80d3cc:	19405026 	beq	r3,r5,80d510 <__subdf3+0x574>
  80d3d0:	01401004 	movi	r5,64
  80d3d4:	28c7c83a 	sub	r3,r5,r3
  80d3d8:	10c4983a 	sll	r2,r2,r3
  80d3dc:	88a2b03a 	or	r17,r17,r2
  80d3e0:	8822c03a 	cmpne	r17,r17,zero
  80d3e4:	2462b03a 	or	r17,r4,r17
  80d3e8:	0007883a 	mov	r3,zero
  80d3ec:	0021883a 	mov	r16,zero
  80d3f0:	003f6d06 	br	80d1a8 <__alt_mem_onchip_mem+0xff8051a8>
  80d3f4:	11fff804 	addi	r7,r2,-32
  80d3f8:	01000804 	movi	r4,32
  80d3fc:	29ced83a 	srl	r7,r5,r7
  80d400:	11004526 	beq	r2,r4,80d518 <__subdf3+0x57c>
  80d404:	01001004 	movi	r4,64
  80d408:	2089c83a 	sub	r4,r4,r2
  80d40c:	2904983a 	sll	r2,r5,r4
  80d410:	118cb03a 	or	r6,r2,r6
  80d414:	300cc03a 	cmpne	r6,r6,zero
  80d418:	398cb03a 	or	r6,r7,r6
  80d41c:	0005883a 	mov	r2,zero
  80d420:	003f3706 	br	80d100 <__alt_mem_onchip_mem+0xff805100>
  80d424:	80002a26 	beq	r16,zero,80d4d0 <__subdf3+0x534>
  80d428:	0101ffc4 	movi	r4,2047
  80d42c:	49006626 	beq	r9,r4,80d5c8 <__subdf3+0x62c>
  80d430:	0085c83a 	sub	r2,zero,r2
  80d434:	18c02034 	orhi	r3,r3,128
  80d438:	01000e04 	movi	r4,56
  80d43c:	20807e16 	blt	r4,r2,80d638 <__subdf3+0x69c>
  80d440:	010007c4 	movi	r4,31
  80d444:	2080e716 	blt	r4,r2,80d7e4 <__subdf3+0x848>
  80d448:	01000804 	movi	r4,32
  80d44c:	2089c83a 	sub	r4,r4,r2
  80d450:	1914983a 	sll	r10,r3,r4
  80d454:	8890d83a 	srl	r8,r17,r2
  80d458:	8908983a 	sll	r4,r17,r4
  80d45c:	1884d83a 	srl	r2,r3,r2
  80d460:	5222b03a 	or	r17,r10,r8
  80d464:	2006c03a 	cmpne	r3,r4,zero
  80d468:	88e2b03a 	or	r17,r17,r3
  80d46c:	3463c83a 	sub	r17,r6,r17
  80d470:	2885c83a 	sub	r2,r5,r2
  80d474:	344d803a 	cmpltu	r6,r6,r17
  80d478:	1187c83a 	sub	r3,r2,r6
  80d47c:	4821883a 	mov	r16,r9
  80d480:	3825883a 	mov	r18,r7
  80d484:	003f2306 	br	80d114 <__alt_mem_onchip_mem+0xff805114>
  80d488:	24d0b03a 	or	r8,r4,r19
  80d48c:	40001b1e 	bne	r8,zero,80d4fc <__subdf3+0x560>
  80d490:	0005883a 	mov	r2,zero
  80d494:	0009883a 	mov	r4,zero
  80d498:	0021883a 	mov	r16,zero
  80d49c:	003f4906 	br	80d1c4 <__alt_mem_onchip_mem+0xff8051c4>
  80d4a0:	010007c4 	movi	r4,31
  80d4a4:	20803a16 	blt	r4,r2,80d590 <__subdf3+0x5f4>
  80d4a8:	01000804 	movi	r4,32
  80d4ac:	2089c83a 	sub	r4,r4,r2
  80d4b0:	2912983a 	sll	r9,r5,r4
  80d4b4:	3090d83a 	srl	r8,r6,r2
  80d4b8:	3108983a 	sll	r4,r6,r4
  80d4bc:	2884d83a 	srl	r2,r5,r2
  80d4c0:	4a12b03a 	or	r9,r9,r8
  80d4c4:	2008c03a 	cmpne	r4,r4,zero
  80d4c8:	4912b03a 	or	r9,r9,r4
  80d4cc:	003f4e06 	br	80d208 <__alt_mem_onchip_mem+0xff805208>
  80d4d0:	1c48b03a 	or	r4,r3,r17
  80d4d4:	20003c26 	beq	r4,zero,80d5c8 <__subdf3+0x62c>
  80d4d8:	0084303a 	nor	r2,zero,r2
  80d4dc:	1000381e 	bne	r2,zero,80d5c0 <__subdf3+0x624>
  80d4e0:	3463c83a 	sub	r17,r6,r17
  80d4e4:	28c5c83a 	sub	r2,r5,r3
  80d4e8:	344d803a 	cmpltu	r6,r6,r17
  80d4ec:	1187c83a 	sub	r3,r2,r6
  80d4f0:	4821883a 	mov	r16,r9
  80d4f4:	3825883a 	mov	r18,r7
  80d4f8:	003f0606 	br	80d114 <__alt_mem_onchip_mem+0xff805114>
  80d4fc:	2023883a 	mov	r17,r4
  80d500:	003f0906 	br	80d128 <__alt_mem_onchip_mem+0xff805128>
  80d504:	0101ffc4 	movi	r4,2047
  80d508:	813f3a1e 	bne	r16,r4,80d1f4 <__alt_mem_onchip_mem+0xff8051f4>
  80d50c:	003ec406 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d510:	0005883a 	mov	r2,zero
  80d514:	003fb106 	br	80d3dc <__alt_mem_onchip_mem+0xff8053dc>
  80d518:	0005883a 	mov	r2,zero
  80d51c:	003fbc06 	br	80d410 <__alt_mem_onchip_mem+0xff805410>
  80d520:	1c44b03a 	or	r2,r3,r17
  80d524:	80008e1e 	bne	r16,zero,80d760 <__subdf3+0x7c4>
  80d528:	1000c826 	beq	r2,zero,80d84c <__subdf3+0x8b0>
  80d52c:	2984b03a 	or	r2,r5,r6
  80d530:	103ebb26 	beq	r2,zero,80d020 <__alt_mem_onchip_mem+0xff805020>
  80d534:	8989883a 	add	r4,r17,r6
  80d538:	1945883a 	add	r2,r3,r5
  80d53c:	2447803a 	cmpltu	r3,r4,r17
  80d540:	1887883a 	add	r3,r3,r2
  80d544:	1880202c 	andhi	r2,r3,128
  80d548:	2023883a 	mov	r17,r4
  80d54c:	103f1626 	beq	r2,zero,80d1a8 <__alt_mem_onchip_mem+0xff8051a8>
  80d550:	00bfe034 	movhi	r2,65408
  80d554:	10bfffc4 	addi	r2,r2,-1
  80d558:	5021883a 	mov	r16,r10
  80d55c:	1886703a 	and	r3,r3,r2
  80d560:	003eaf06 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d564:	3825883a 	mov	r18,r7
  80d568:	003f0f06 	br	80d1a8 <__alt_mem_onchip_mem+0xff8051a8>
  80d56c:	1c44b03a 	or	r2,r3,r17
  80d570:	8000251e 	bne	r16,zero,80d608 <__subdf3+0x66c>
  80d574:	1000661e 	bne	r2,zero,80d710 <__subdf3+0x774>
  80d578:	2990b03a 	or	r8,r5,r6
  80d57c:	40009626 	beq	r8,zero,80d7d8 <__subdf3+0x83c>
  80d580:	2807883a 	mov	r3,r5
  80d584:	3023883a 	mov	r17,r6
  80d588:	3825883a 	mov	r18,r7
  80d58c:	003ea406 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d590:	127ff804 	addi	r9,r2,-32
  80d594:	01000804 	movi	r4,32
  80d598:	2a52d83a 	srl	r9,r5,r9
  80d59c:	11008c26 	beq	r2,r4,80d7d0 <__subdf3+0x834>
  80d5a0:	01001004 	movi	r4,64
  80d5a4:	2085c83a 	sub	r2,r4,r2
  80d5a8:	2884983a 	sll	r2,r5,r2
  80d5ac:	118cb03a 	or	r6,r2,r6
  80d5b0:	300cc03a 	cmpne	r6,r6,zero
  80d5b4:	4992b03a 	or	r9,r9,r6
  80d5b8:	0005883a 	mov	r2,zero
  80d5bc:	003f1206 	br	80d208 <__alt_mem_onchip_mem+0xff805208>
  80d5c0:	0101ffc4 	movi	r4,2047
  80d5c4:	493f9c1e 	bne	r9,r4,80d438 <__alt_mem_onchip_mem+0xff805438>
  80d5c8:	2807883a 	mov	r3,r5
  80d5cc:	3023883a 	mov	r17,r6
  80d5d0:	4821883a 	mov	r16,r9
  80d5d4:	3825883a 	mov	r18,r7
  80d5d8:	003e9106 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d5dc:	80001f1e 	bne	r16,zero,80d65c <__subdf3+0x6c0>
  80d5e0:	1c48b03a 	or	r4,r3,r17
  80d5e4:	20005a26 	beq	r4,zero,80d750 <__subdf3+0x7b4>
  80d5e8:	0084303a 	nor	r2,zero,r2
  80d5ec:	1000561e 	bne	r2,zero,80d748 <__subdf3+0x7ac>
  80d5f0:	89a3883a 	add	r17,r17,r6
  80d5f4:	1945883a 	add	r2,r3,r5
  80d5f8:	898d803a 	cmpltu	r6,r17,r6
  80d5fc:	3087883a 	add	r3,r6,r2
  80d600:	4821883a 	mov	r16,r9
  80d604:	003f0506 	br	80d21c <__alt_mem_onchip_mem+0xff80521c>
  80d608:	10002b1e 	bne	r2,zero,80d6b8 <__subdf3+0x71c>
  80d60c:	2984b03a 	or	r2,r5,r6
  80d610:	10008026 	beq	r2,zero,80d814 <__subdf3+0x878>
  80d614:	2807883a 	mov	r3,r5
  80d618:	3023883a 	mov	r17,r6
  80d61c:	3825883a 	mov	r18,r7
  80d620:	0401ffc4 	movi	r16,2047
  80d624:	003e7e06 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d628:	3809883a 	mov	r4,r7
  80d62c:	0011883a 	mov	r8,zero
  80d630:	0005883a 	mov	r2,zero
  80d634:	003ee306 	br	80d1c4 <__alt_mem_onchip_mem+0xff8051c4>
  80d638:	1c62b03a 	or	r17,r3,r17
  80d63c:	8822c03a 	cmpne	r17,r17,zero
  80d640:	0005883a 	mov	r2,zero
  80d644:	003f8906 	br	80d46c <__alt_mem_onchip_mem+0xff80546c>
  80d648:	3809883a 	mov	r4,r7
  80d64c:	4821883a 	mov	r16,r9
  80d650:	0011883a 	mov	r8,zero
  80d654:	0005883a 	mov	r2,zero
  80d658:	003eda06 	br	80d1c4 <__alt_mem_onchip_mem+0xff8051c4>
  80d65c:	0101ffc4 	movi	r4,2047
  80d660:	49003b26 	beq	r9,r4,80d750 <__subdf3+0x7b4>
  80d664:	0085c83a 	sub	r2,zero,r2
  80d668:	18c02034 	orhi	r3,r3,128
  80d66c:	01000e04 	movi	r4,56
  80d670:	20806e16 	blt	r4,r2,80d82c <__subdf3+0x890>
  80d674:	010007c4 	movi	r4,31
  80d678:	20807716 	blt	r4,r2,80d858 <__subdf3+0x8bc>
  80d67c:	01000804 	movi	r4,32
  80d680:	2089c83a 	sub	r4,r4,r2
  80d684:	1914983a 	sll	r10,r3,r4
  80d688:	8890d83a 	srl	r8,r17,r2
  80d68c:	8908983a 	sll	r4,r17,r4
  80d690:	1884d83a 	srl	r2,r3,r2
  80d694:	5222b03a 	or	r17,r10,r8
  80d698:	2006c03a 	cmpne	r3,r4,zero
  80d69c:	88e2b03a 	or	r17,r17,r3
  80d6a0:	89a3883a 	add	r17,r17,r6
  80d6a4:	1145883a 	add	r2,r2,r5
  80d6a8:	898d803a 	cmpltu	r6,r17,r6
  80d6ac:	3087883a 	add	r3,r6,r2
  80d6b0:	4821883a 	mov	r16,r9
  80d6b4:	003ed906 	br	80d21c <__alt_mem_onchip_mem+0xff80521c>
  80d6b8:	2984b03a 	or	r2,r5,r6
  80d6bc:	10004226 	beq	r2,zero,80d7c8 <__subdf3+0x82c>
  80d6c0:	1808d0fa 	srli	r4,r3,3
  80d6c4:	8822d0fa 	srli	r17,r17,3
  80d6c8:	1806977a 	slli	r3,r3,29
  80d6cc:	2080022c 	andhi	r2,r4,8
  80d6d0:	1c62b03a 	or	r17,r3,r17
  80d6d4:	10000826 	beq	r2,zero,80d6f8 <__subdf3+0x75c>
  80d6d8:	2812d0fa 	srli	r9,r5,3
  80d6dc:	4880022c 	andhi	r2,r9,8
  80d6e0:	1000051e 	bne	r2,zero,80d6f8 <__subdf3+0x75c>
  80d6e4:	300cd0fa 	srli	r6,r6,3
  80d6e8:	2804977a 	slli	r2,r5,29
  80d6ec:	4809883a 	mov	r4,r9
  80d6f0:	3825883a 	mov	r18,r7
  80d6f4:	11a2b03a 	or	r17,r2,r6
  80d6f8:	8806d77a 	srli	r3,r17,29
  80d6fc:	200890fa 	slli	r4,r4,3
  80d700:	882290fa 	slli	r17,r17,3
  80d704:	0401ffc4 	movi	r16,2047
  80d708:	1906b03a 	or	r3,r3,r4
  80d70c:	003e4406 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d710:	2984b03a 	or	r2,r5,r6
  80d714:	103e4226 	beq	r2,zero,80d020 <__alt_mem_onchip_mem+0xff805020>
  80d718:	8989c83a 	sub	r4,r17,r6
  80d71c:	8911803a 	cmpltu	r8,r17,r4
  80d720:	1945c83a 	sub	r2,r3,r5
  80d724:	1205c83a 	sub	r2,r2,r8
  80d728:	1200202c 	andhi	r8,r2,128
  80d72c:	403e9a26 	beq	r8,zero,80d198 <__alt_mem_onchip_mem+0xff805198>
  80d730:	3463c83a 	sub	r17,r6,r17
  80d734:	28c5c83a 	sub	r2,r5,r3
  80d738:	344d803a 	cmpltu	r6,r6,r17
  80d73c:	1187c83a 	sub	r3,r2,r6
  80d740:	3825883a 	mov	r18,r7
  80d744:	003e3606 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d748:	0101ffc4 	movi	r4,2047
  80d74c:	493fc71e 	bne	r9,r4,80d66c <__alt_mem_onchip_mem+0xff80566c>
  80d750:	2807883a 	mov	r3,r5
  80d754:	3023883a 	mov	r17,r6
  80d758:	4821883a 	mov	r16,r9
  80d75c:	003e3006 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d760:	10003626 	beq	r2,zero,80d83c <__subdf3+0x8a0>
  80d764:	2984b03a 	or	r2,r5,r6
  80d768:	10001726 	beq	r2,zero,80d7c8 <__subdf3+0x82c>
  80d76c:	1808d0fa 	srli	r4,r3,3
  80d770:	8822d0fa 	srli	r17,r17,3
  80d774:	1806977a 	slli	r3,r3,29
  80d778:	2080022c 	andhi	r2,r4,8
  80d77c:	1c62b03a 	or	r17,r3,r17
  80d780:	10000726 	beq	r2,zero,80d7a0 <__subdf3+0x804>
  80d784:	2812d0fa 	srli	r9,r5,3
  80d788:	4880022c 	andhi	r2,r9,8
  80d78c:	1000041e 	bne	r2,zero,80d7a0 <__subdf3+0x804>
  80d790:	300cd0fa 	srli	r6,r6,3
  80d794:	2804977a 	slli	r2,r5,29
  80d798:	4809883a 	mov	r4,r9
  80d79c:	11a2b03a 	or	r17,r2,r6
  80d7a0:	8806d77a 	srli	r3,r17,29
  80d7a4:	200890fa 	slli	r4,r4,3
  80d7a8:	882290fa 	slli	r17,r17,3
  80d7ac:	3825883a 	mov	r18,r7
  80d7b0:	1906b03a 	or	r3,r3,r4
  80d7b4:	0401ffc4 	movi	r16,2047
  80d7b8:	003e1906 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d7bc:	000b883a 	mov	r5,zero
  80d7c0:	0005883a 	mov	r2,zero
  80d7c4:	003e2e06 	br	80d080 <__alt_mem_onchip_mem+0xff805080>
  80d7c8:	0401ffc4 	movi	r16,2047
  80d7cc:	003e1406 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d7d0:	0005883a 	mov	r2,zero
  80d7d4:	003f7506 	br	80d5ac <__alt_mem_onchip_mem+0xff8055ac>
  80d7d8:	0005883a 	mov	r2,zero
  80d7dc:	0009883a 	mov	r4,zero
  80d7e0:	003e7806 	br	80d1c4 <__alt_mem_onchip_mem+0xff8051c4>
  80d7e4:	123ff804 	addi	r8,r2,-32
  80d7e8:	01000804 	movi	r4,32
  80d7ec:	1a10d83a 	srl	r8,r3,r8
  80d7f0:	11002526 	beq	r2,r4,80d888 <__subdf3+0x8ec>
  80d7f4:	01001004 	movi	r4,64
  80d7f8:	2085c83a 	sub	r2,r4,r2
  80d7fc:	1884983a 	sll	r2,r3,r2
  80d800:	1444b03a 	or	r2,r2,r17
  80d804:	1004c03a 	cmpne	r2,r2,zero
  80d808:	40a2b03a 	or	r17,r8,r2
  80d80c:	0005883a 	mov	r2,zero
  80d810:	003f1606 	br	80d46c <__alt_mem_onchip_mem+0xff80546c>
  80d814:	02000434 	movhi	r8,16
  80d818:	0009883a 	mov	r4,zero
  80d81c:	423fffc4 	addi	r8,r8,-1
  80d820:	00bfffc4 	movi	r2,-1
  80d824:	0401ffc4 	movi	r16,2047
  80d828:	003e6606 	br	80d1c4 <__alt_mem_onchip_mem+0xff8051c4>
  80d82c:	1c62b03a 	or	r17,r3,r17
  80d830:	8822c03a 	cmpne	r17,r17,zero
  80d834:	0005883a 	mov	r2,zero
  80d838:	003f9906 	br	80d6a0 <__alt_mem_onchip_mem+0xff8056a0>
  80d83c:	2807883a 	mov	r3,r5
  80d840:	3023883a 	mov	r17,r6
  80d844:	0401ffc4 	movi	r16,2047
  80d848:	003df506 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d84c:	2807883a 	mov	r3,r5
  80d850:	3023883a 	mov	r17,r6
  80d854:	003df206 	br	80d020 <__alt_mem_onchip_mem+0xff805020>
  80d858:	123ff804 	addi	r8,r2,-32
  80d85c:	01000804 	movi	r4,32
  80d860:	1a10d83a 	srl	r8,r3,r8
  80d864:	11000a26 	beq	r2,r4,80d890 <__subdf3+0x8f4>
  80d868:	01001004 	movi	r4,64
  80d86c:	2085c83a 	sub	r2,r4,r2
  80d870:	1884983a 	sll	r2,r3,r2
  80d874:	1444b03a 	or	r2,r2,r17
  80d878:	1004c03a 	cmpne	r2,r2,zero
  80d87c:	40a2b03a 	or	r17,r8,r2
  80d880:	0005883a 	mov	r2,zero
  80d884:	003f8606 	br	80d6a0 <__alt_mem_onchip_mem+0xff8056a0>
  80d888:	0005883a 	mov	r2,zero
  80d88c:	003fdc06 	br	80d800 <__alt_mem_onchip_mem+0xff805800>
  80d890:	0005883a 	mov	r2,zero
  80d894:	003ff706 	br	80d874 <__alt_mem_onchip_mem+0xff805874>

0080d898 <__fixdfsi>:
  80d898:	280cd53a 	srli	r6,r5,20
  80d89c:	00c00434 	movhi	r3,16
  80d8a0:	18ffffc4 	addi	r3,r3,-1
  80d8a4:	3181ffcc 	andi	r6,r6,2047
  80d8a8:	01c0ff84 	movi	r7,1022
  80d8ac:	28c6703a 	and	r3,r5,r3
  80d8b0:	280ad7fa 	srli	r5,r5,31
  80d8b4:	3980120e 	bge	r7,r6,80d900 <__fixdfsi+0x68>
  80d8b8:	00810744 	movi	r2,1053
  80d8bc:	11800c16 	blt	r2,r6,80d8f0 <__fixdfsi+0x58>
  80d8c0:	00810cc4 	movi	r2,1075
  80d8c4:	1185c83a 	sub	r2,r2,r6
  80d8c8:	01c007c4 	movi	r7,31
  80d8cc:	18c00434 	orhi	r3,r3,16
  80d8d0:	38800d16 	blt	r7,r2,80d908 <__fixdfsi+0x70>
  80d8d4:	31befb44 	addi	r6,r6,-1043
  80d8d8:	2084d83a 	srl	r2,r4,r2
  80d8dc:	1986983a 	sll	r3,r3,r6
  80d8e0:	1884b03a 	or	r2,r3,r2
  80d8e4:	28000726 	beq	r5,zero,80d904 <__fixdfsi+0x6c>
  80d8e8:	0085c83a 	sub	r2,zero,r2
  80d8ec:	f800283a 	ret
  80d8f0:	00a00034 	movhi	r2,32768
  80d8f4:	10bfffc4 	addi	r2,r2,-1
  80d8f8:	2885883a 	add	r2,r5,r2
  80d8fc:	f800283a 	ret
  80d900:	0005883a 	mov	r2,zero
  80d904:	f800283a 	ret
  80d908:	008104c4 	movi	r2,1043
  80d90c:	1185c83a 	sub	r2,r2,r6
  80d910:	1884d83a 	srl	r2,r3,r2
  80d914:	003ff306 	br	80d8e4 <__alt_mem_onchip_mem+0xff8058e4>

0080d918 <__floatsidf>:
  80d918:	defffd04 	addi	sp,sp,-12
  80d91c:	dfc00215 	stw	ra,8(sp)
  80d920:	dc400115 	stw	r17,4(sp)
  80d924:	dc000015 	stw	r16,0(sp)
  80d928:	20002b26 	beq	r4,zero,80d9d8 <__floatsidf+0xc0>
  80d92c:	2023883a 	mov	r17,r4
  80d930:	2020d7fa 	srli	r16,r4,31
  80d934:	20002d16 	blt	r4,zero,80d9ec <__floatsidf+0xd4>
  80d938:	8809883a 	mov	r4,r17
  80d93c:	080da9c0 	call	80da9c <__clzsi2>
  80d940:	01410784 	movi	r5,1054
  80d944:	288bc83a 	sub	r5,r5,r2
  80d948:	01010cc4 	movi	r4,1075
  80d94c:	2149c83a 	sub	r4,r4,r5
  80d950:	00c007c4 	movi	r3,31
  80d954:	1900160e 	bge	r3,r4,80d9b0 <__floatsidf+0x98>
  80d958:	00c104c4 	movi	r3,1043
  80d95c:	1947c83a 	sub	r3,r3,r5
  80d960:	88c6983a 	sll	r3,r17,r3
  80d964:	00800434 	movhi	r2,16
  80d968:	10bfffc4 	addi	r2,r2,-1
  80d96c:	1886703a 	and	r3,r3,r2
  80d970:	2941ffcc 	andi	r5,r5,2047
  80d974:	800d883a 	mov	r6,r16
  80d978:	0005883a 	mov	r2,zero
  80d97c:	280a953a 	slli	r5,r5,20
  80d980:	31803fcc 	andi	r6,r6,255
  80d984:	01000434 	movhi	r4,16
  80d988:	300c97fa 	slli	r6,r6,31
  80d98c:	213fffc4 	addi	r4,r4,-1
  80d990:	1906703a 	and	r3,r3,r4
  80d994:	1946b03a 	or	r3,r3,r5
  80d998:	1986b03a 	or	r3,r3,r6
  80d99c:	dfc00217 	ldw	ra,8(sp)
  80d9a0:	dc400117 	ldw	r17,4(sp)
  80d9a4:	dc000017 	ldw	r16,0(sp)
  80d9a8:	dec00304 	addi	sp,sp,12
  80d9ac:	f800283a 	ret
  80d9b0:	00c002c4 	movi	r3,11
  80d9b4:	1887c83a 	sub	r3,r3,r2
  80d9b8:	88c6d83a 	srl	r3,r17,r3
  80d9bc:	8904983a 	sll	r2,r17,r4
  80d9c0:	01000434 	movhi	r4,16
  80d9c4:	213fffc4 	addi	r4,r4,-1
  80d9c8:	2941ffcc 	andi	r5,r5,2047
  80d9cc:	1906703a 	and	r3,r3,r4
  80d9d0:	800d883a 	mov	r6,r16
  80d9d4:	003fe906 	br	80d97c <__alt_mem_onchip_mem+0xff80597c>
  80d9d8:	000d883a 	mov	r6,zero
  80d9dc:	000b883a 	mov	r5,zero
  80d9e0:	0007883a 	mov	r3,zero
  80d9e4:	0005883a 	mov	r2,zero
  80d9e8:	003fe406 	br	80d97c <__alt_mem_onchip_mem+0xff80597c>
  80d9ec:	0123c83a 	sub	r17,zero,r4
  80d9f0:	003fd106 	br	80d938 <__alt_mem_onchip_mem+0xff805938>

0080d9f4 <__floatunsidf>:
  80d9f4:	defffe04 	addi	sp,sp,-8
  80d9f8:	dc000015 	stw	r16,0(sp)
  80d9fc:	dfc00115 	stw	ra,4(sp)
  80da00:	2021883a 	mov	r16,r4
  80da04:	20002226 	beq	r4,zero,80da90 <__floatunsidf+0x9c>
  80da08:	080da9c0 	call	80da9c <__clzsi2>
  80da0c:	01010784 	movi	r4,1054
  80da10:	2089c83a 	sub	r4,r4,r2
  80da14:	01810cc4 	movi	r6,1075
  80da18:	310dc83a 	sub	r6,r6,r4
  80da1c:	00c007c4 	movi	r3,31
  80da20:	1980120e 	bge	r3,r6,80da6c <__floatunsidf+0x78>
  80da24:	00c104c4 	movi	r3,1043
  80da28:	1907c83a 	sub	r3,r3,r4
  80da2c:	80ca983a 	sll	r5,r16,r3
  80da30:	00800434 	movhi	r2,16
  80da34:	10bfffc4 	addi	r2,r2,-1
  80da38:	2101ffcc 	andi	r4,r4,2047
  80da3c:	0021883a 	mov	r16,zero
  80da40:	288a703a 	and	r5,r5,r2
  80da44:	2008953a 	slli	r4,r4,20
  80da48:	00c00434 	movhi	r3,16
  80da4c:	18ffffc4 	addi	r3,r3,-1
  80da50:	28c6703a 	and	r3,r5,r3
  80da54:	8005883a 	mov	r2,r16
  80da58:	1906b03a 	or	r3,r3,r4
  80da5c:	dfc00117 	ldw	ra,4(sp)
  80da60:	dc000017 	ldw	r16,0(sp)
  80da64:	dec00204 	addi	sp,sp,8
  80da68:	f800283a 	ret
  80da6c:	00c002c4 	movi	r3,11
  80da70:	188bc83a 	sub	r5,r3,r2
  80da74:	814ad83a 	srl	r5,r16,r5
  80da78:	00c00434 	movhi	r3,16
  80da7c:	18ffffc4 	addi	r3,r3,-1
  80da80:	81a0983a 	sll	r16,r16,r6
  80da84:	2101ffcc 	andi	r4,r4,2047
  80da88:	28ca703a 	and	r5,r5,r3
  80da8c:	003fed06 	br	80da44 <__alt_mem_onchip_mem+0xff805a44>
  80da90:	0009883a 	mov	r4,zero
  80da94:	000b883a 	mov	r5,zero
  80da98:	003fea06 	br	80da44 <__alt_mem_onchip_mem+0xff805a44>

0080da9c <__clzsi2>:
  80da9c:	00bfffd4 	movui	r2,65535
  80daa0:	11000536 	bltu	r2,r4,80dab8 <__clzsi2+0x1c>
  80daa4:	00803fc4 	movi	r2,255
  80daa8:	11000f36 	bltu	r2,r4,80dae8 <__clzsi2+0x4c>
  80daac:	00800804 	movi	r2,32
  80dab0:	0007883a 	mov	r3,zero
  80dab4:	00000506 	br	80dacc <__clzsi2+0x30>
  80dab8:	00804034 	movhi	r2,256
  80dabc:	10bfffc4 	addi	r2,r2,-1
  80dac0:	11000c2e 	bgeu	r2,r4,80daf4 <__clzsi2+0x58>
  80dac4:	00800204 	movi	r2,8
  80dac8:	00c00604 	movi	r3,24
  80dacc:	20c8d83a 	srl	r4,r4,r3
  80dad0:	00c02074 	movhi	r3,129
  80dad4:	18c7f304 	addi	r3,r3,8140
  80dad8:	1909883a 	add	r4,r3,r4
  80dadc:	20c00003 	ldbu	r3,0(r4)
  80dae0:	10c5c83a 	sub	r2,r2,r3
  80dae4:	f800283a 	ret
  80dae8:	00800604 	movi	r2,24
  80daec:	00c00204 	movi	r3,8
  80daf0:	003ff606 	br	80dacc <__alt_mem_onchip_mem+0xff805acc>
  80daf4:	00800404 	movi	r2,16
  80daf8:	1007883a 	mov	r3,r2
  80dafc:	003ff306 	br	80dacc <__alt_mem_onchip_mem+0xff805acc>

0080db00 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80db00:	defff504 	addi	sp,sp,-44
  80db04:	df000a15 	stw	fp,40(sp)
  80db08:	df000a04 	addi	fp,sp,40
  80db0c:	e13ffc15 	stw	r4,-16(fp)
  80db10:	e17ffd15 	stw	r5,-12(fp)
  80db14:	e1bffe15 	stw	r6,-8(fp)
  80db18:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80db1c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80db20:	d0a75f17 	ldw	r2,-25220(gp)
  
  if (alt_ticks_per_second ())
  80db24:	10003c26 	beq	r2,zero,80dc18 <alt_alarm_start+0x118>
  {
    if (alarm)
  80db28:	e0bffc17 	ldw	r2,-16(fp)
  80db2c:	10003826 	beq	r2,zero,80dc10 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80db30:	e0bffc17 	ldw	r2,-16(fp)
  80db34:	e0fffe17 	ldw	r3,-8(fp)
  80db38:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80db3c:	e0bffc17 	ldw	r2,-16(fp)
  80db40:	e0ffff17 	ldw	r3,-4(fp)
  80db44:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80db48:	0005303a 	rdctl	r2,status
  80db4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80db50:	e0fff917 	ldw	r3,-28(fp)
  80db54:	00bfff84 	movi	r2,-2
  80db58:	1884703a 	and	r2,r3,r2
  80db5c:	1001703a 	wrctl	status,r2
  
  return context;
  80db60:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80db64:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80db68:	d0a76017 	ldw	r2,-25216(gp)
      
      current_nticks = alt_nticks();
  80db6c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80db70:	e0fffd17 	ldw	r3,-12(fp)
  80db74:	e0bff617 	ldw	r2,-40(fp)
  80db78:	1885883a 	add	r2,r3,r2
  80db7c:	10c00044 	addi	r3,r2,1
  80db80:	e0bffc17 	ldw	r2,-16(fp)
  80db84:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80db88:	e0bffc17 	ldw	r2,-16(fp)
  80db8c:	10c00217 	ldw	r3,8(r2)
  80db90:	e0bff617 	ldw	r2,-40(fp)
  80db94:	1880042e 	bgeu	r3,r2,80dba8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80db98:	e0bffc17 	ldw	r2,-16(fp)
  80db9c:	00c00044 	movi	r3,1
  80dba0:	10c00405 	stb	r3,16(r2)
  80dba4:	00000206 	br	80dbb0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80dba8:	e0bffc17 	ldw	r2,-16(fp)
  80dbac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80dbb0:	e0bffc17 	ldw	r2,-16(fp)
  80dbb4:	d0e00e04 	addi	r3,gp,-32712
  80dbb8:	e0fffa15 	stw	r3,-24(fp)
  80dbbc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80dbc0:	e0bffb17 	ldw	r2,-20(fp)
  80dbc4:	e0fffa17 	ldw	r3,-24(fp)
  80dbc8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80dbcc:	e0bffa17 	ldw	r2,-24(fp)
  80dbd0:	10c00017 	ldw	r3,0(r2)
  80dbd4:	e0bffb17 	ldw	r2,-20(fp)
  80dbd8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80dbdc:	e0bffa17 	ldw	r2,-24(fp)
  80dbe0:	10800017 	ldw	r2,0(r2)
  80dbe4:	e0fffb17 	ldw	r3,-20(fp)
  80dbe8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80dbec:	e0bffa17 	ldw	r2,-24(fp)
  80dbf0:	e0fffb17 	ldw	r3,-20(fp)
  80dbf4:	10c00015 	stw	r3,0(r2)
  80dbf8:	e0bff817 	ldw	r2,-32(fp)
  80dbfc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dc00:	e0bff717 	ldw	r2,-36(fp)
  80dc04:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80dc08:	0005883a 	mov	r2,zero
  80dc0c:	00000306 	br	80dc1c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80dc10:	00bffa84 	movi	r2,-22
  80dc14:	00000106 	br	80dc1c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80dc18:	00bfde84 	movi	r2,-134
  }
}
  80dc1c:	e037883a 	mov	sp,fp
  80dc20:	df000017 	ldw	fp,0(sp)
  80dc24:	dec00104 	addi	sp,sp,4
  80dc28:	f800283a 	ret

0080dc2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dc2c:	defffe04 	addi	sp,sp,-8
  80dc30:	dfc00115 	stw	ra,4(sp)
  80dc34:	df000015 	stw	fp,0(sp)
  80dc38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dc3c:	d0a00b17 	ldw	r2,-32724(gp)
  80dc40:	10000326 	beq	r2,zero,80dc50 <alt_get_errno+0x24>
  80dc44:	d0a00b17 	ldw	r2,-32724(gp)
  80dc48:	103ee83a 	callr	r2
  80dc4c:	00000106 	br	80dc54 <alt_get_errno+0x28>
  80dc50:	d0a75404 	addi	r2,gp,-25264
}
  80dc54:	e037883a 	mov	sp,fp
  80dc58:	dfc00117 	ldw	ra,4(sp)
  80dc5c:	df000017 	ldw	fp,0(sp)
  80dc60:	dec00204 	addi	sp,sp,8
  80dc64:	f800283a 	ret

0080dc68 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80dc68:	defffb04 	addi	sp,sp,-20
  80dc6c:	dfc00415 	stw	ra,16(sp)
  80dc70:	df000315 	stw	fp,12(sp)
  80dc74:	df000304 	addi	fp,sp,12
  80dc78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80dc7c:	e0bfff17 	ldw	r2,-4(fp)
  80dc80:	10000616 	blt	r2,zero,80dc9c <close+0x34>
  80dc84:	e0bfff17 	ldw	r2,-4(fp)
  80dc88:	10c00324 	muli	r3,r2,12
  80dc8c:	00802074 	movhi	r2,129
  80dc90:	108b1704 	addi	r2,r2,11356
  80dc94:	1885883a 	add	r2,r3,r2
  80dc98:	00000106 	br	80dca0 <close+0x38>
  80dc9c:	0005883a 	mov	r2,zero
  80dca0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80dca4:	e0bffd17 	ldw	r2,-12(fp)
  80dca8:	10001926 	beq	r2,zero,80dd10 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80dcac:	e0bffd17 	ldw	r2,-12(fp)
  80dcb0:	10800017 	ldw	r2,0(r2)
  80dcb4:	10800417 	ldw	r2,16(r2)
  80dcb8:	10000626 	beq	r2,zero,80dcd4 <close+0x6c>
  80dcbc:	e0bffd17 	ldw	r2,-12(fp)
  80dcc0:	10800017 	ldw	r2,0(r2)
  80dcc4:	10800417 	ldw	r2,16(r2)
  80dcc8:	e13ffd17 	ldw	r4,-12(fp)
  80dccc:	103ee83a 	callr	r2
  80dcd0:	00000106 	br	80dcd8 <close+0x70>
  80dcd4:	0005883a 	mov	r2,zero
  80dcd8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80dcdc:	e13fff17 	ldw	r4,-4(fp)
  80dce0:	080e6fc0 	call	80e6fc <alt_release_fd>
    if (rval < 0)
  80dce4:	e0bffe17 	ldw	r2,-8(fp)
  80dce8:	1000070e 	bge	r2,zero,80dd08 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80dcec:	080dc2c0 	call	80dc2c <alt_get_errno>
  80dcf0:	1007883a 	mov	r3,r2
  80dcf4:	e0bffe17 	ldw	r2,-8(fp)
  80dcf8:	0085c83a 	sub	r2,zero,r2
  80dcfc:	18800015 	stw	r2,0(r3)
      return -1;
  80dd00:	00bfffc4 	movi	r2,-1
  80dd04:	00000706 	br	80dd24 <close+0xbc>
    }
    return 0;
  80dd08:	0005883a 	mov	r2,zero
  80dd0c:	00000506 	br	80dd24 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80dd10:	080dc2c0 	call	80dc2c <alt_get_errno>
  80dd14:	1007883a 	mov	r3,r2
  80dd18:	00801444 	movi	r2,81
  80dd1c:	18800015 	stw	r2,0(r3)
    return -1;
  80dd20:	00bfffc4 	movi	r2,-1
  }
}
  80dd24:	e037883a 	mov	sp,fp
  80dd28:	dfc00117 	ldw	ra,4(sp)
  80dd2c:	df000017 	ldw	fp,0(sp)
  80dd30:	dec00204 	addi	sp,sp,8
  80dd34:	f800283a 	ret

0080dd38 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80dd38:	defffc04 	addi	sp,sp,-16
  80dd3c:	df000315 	stw	fp,12(sp)
  80dd40:	df000304 	addi	fp,sp,12
  80dd44:	e13ffd15 	stw	r4,-12(fp)
  80dd48:	e17ffe15 	stw	r5,-8(fp)
  80dd4c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80dd50:	e0bfff17 	ldw	r2,-4(fp)
}
  80dd54:	e037883a 	mov	sp,fp
  80dd58:	df000017 	ldw	fp,0(sp)
  80dd5c:	dec00104 	addi	sp,sp,4
  80dd60:	f800283a 	ret

0080dd64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dd64:	defffe04 	addi	sp,sp,-8
  80dd68:	dfc00115 	stw	ra,4(sp)
  80dd6c:	df000015 	stw	fp,0(sp)
  80dd70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dd74:	d0a00b17 	ldw	r2,-32724(gp)
  80dd78:	10000326 	beq	r2,zero,80dd88 <alt_get_errno+0x24>
  80dd7c:	d0a00b17 	ldw	r2,-32724(gp)
  80dd80:	103ee83a 	callr	r2
  80dd84:	00000106 	br	80dd8c <alt_get_errno+0x28>
  80dd88:	d0a75404 	addi	r2,gp,-25264
}
  80dd8c:	e037883a 	mov	sp,fp
  80dd90:	dfc00117 	ldw	ra,4(sp)
  80dd94:	df000017 	ldw	fp,0(sp)
  80dd98:	dec00204 	addi	sp,sp,8
  80dd9c:	f800283a 	ret

0080dda0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80dda0:	defffb04 	addi	sp,sp,-20
  80dda4:	dfc00415 	stw	ra,16(sp)
  80dda8:	df000315 	stw	fp,12(sp)
  80ddac:	df000304 	addi	fp,sp,12
  80ddb0:	e13ffe15 	stw	r4,-8(fp)
  80ddb4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ddb8:	e0bffe17 	ldw	r2,-8(fp)
  80ddbc:	10000616 	blt	r2,zero,80ddd8 <fstat+0x38>
  80ddc0:	e0bffe17 	ldw	r2,-8(fp)
  80ddc4:	10c00324 	muli	r3,r2,12
  80ddc8:	00802074 	movhi	r2,129
  80ddcc:	108b1704 	addi	r2,r2,11356
  80ddd0:	1885883a 	add	r2,r3,r2
  80ddd4:	00000106 	br	80dddc <fstat+0x3c>
  80ddd8:	0005883a 	mov	r2,zero
  80dddc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80dde0:	e0bffd17 	ldw	r2,-12(fp)
  80dde4:	10001026 	beq	r2,zero,80de28 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80dde8:	e0bffd17 	ldw	r2,-12(fp)
  80ddec:	10800017 	ldw	r2,0(r2)
  80ddf0:	10800817 	ldw	r2,32(r2)
  80ddf4:	10000726 	beq	r2,zero,80de14 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80ddf8:	e0bffd17 	ldw	r2,-12(fp)
  80ddfc:	10800017 	ldw	r2,0(r2)
  80de00:	10800817 	ldw	r2,32(r2)
  80de04:	e17fff17 	ldw	r5,-4(fp)
  80de08:	e13ffd17 	ldw	r4,-12(fp)
  80de0c:	103ee83a 	callr	r2
  80de10:	00000a06 	br	80de3c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80de14:	e0bfff17 	ldw	r2,-4(fp)
  80de18:	00c80004 	movi	r3,8192
  80de1c:	10c00115 	stw	r3,4(r2)
      return 0;
  80de20:	0005883a 	mov	r2,zero
  80de24:	00000506 	br	80de3c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80de28:	080dd640 	call	80dd64 <alt_get_errno>
  80de2c:	1007883a 	mov	r3,r2
  80de30:	00801444 	movi	r2,81
  80de34:	18800015 	stw	r2,0(r3)
    return -1;
  80de38:	00bfffc4 	movi	r2,-1
  }
}
  80de3c:	e037883a 	mov	sp,fp
  80de40:	dfc00117 	ldw	ra,4(sp)
  80de44:	df000017 	ldw	fp,0(sp)
  80de48:	dec00204 	addi	sp,sp,8
  80de4c:	f800283a 	ret

0080de50 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80de50:	defff004 	addi	sp,sp,-64
  80de54:	df000f15 	stw	fp,60(sp)
  80de58:	df000f04 	addi	fp,sp,60
  80de5c:	e13ffd15 	stw	r4,-12(fp)
  80de60:	e17ffe15 	stw	r5,-8(fp)
  80de64:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80de68:	00bffa84 	movi	r2,-22
  80de6c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80de70:	e0bffd17 	ldw	r2,-12(fp)
  80de74:	10800828 	cmpgeui	r2,r2,32
  80de78:	1000501e 	bne	r2,zero,80dfbc <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80de7c:	0005303a 	rdctl	r2,status
  80de80:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80de84:	e0fff617 	ldw	r3,-40(fp)
  80de88:	00bfff84 	movi	r2,-2
  80de8c:	1884703a 	and	r2,r3,r2
  80de90:	1001703a 	wrctl	status,r2
  
  return context;
  80de94:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80de98:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  80de9c:	00802074 	movhi	r2,129
  80dea0:	10977a04 	addi	r2,r2,24040
  80dea4:	e0fffd17 	ldw	r3,-12(fp)
  80dea8:	180690fa 	slli	r3,r3,3
  80deac:	10c5883a 	add	r2,r2,r3
  80deb0:	e0ffff17 	ldw	r3,-4(fp)
  80deb4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80deb8:	00802074 	movhi	r2,129
  80debc:	10977a04 	addi	r2,r2,24040
  80dec0:	e0fffd17 	ldw	r3,-12(fp)
  80dec4:	180690fa 	slli	r3,r3,3
  80dec8:	10c5883a 	add	r2,r2,r3
  80decc:	10800104 	addi	r2,r2,4
  80ded0:	e0fffe17 	ldw	r3,-8(fp)
  80ded4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80ded8:	e0bfff17 	ldw	r2,-4(fp)
  80dedc:	10001926 	beq	r2,zero,80df44 <alt_irq_register+0xf4>
  80dee0:	e0bffd17 	ldw	r2,-12(fp)
  80dee4:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dee8:	0005303a 	rdctl	r2,status
  80deec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80def0:	e0fff717 	ldw	r3,-36(fp)
  80def4:	00bfff84 	movi	r2,-2
  80def8:	1884703a 	and	r2,r3,r2
  80defc:	1001703a 	wrctl	status,r2
  
  return context;
  80df00:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80df04:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80df08:	00c00044 	movi	r3,1
  80df0c:	e0bff217 	ldw	r2,-56(fp)
  80df10:	1884983a 	sll	r2,r3,r2
  80df14:	1007883a 	mov	r3,r2
  80df18:	d0a75b17 	ldw	r2,-25236(gp)
  80df1c:	1884b03a 	or	r2,r3,r2
  80df20:	d0a75b15 	stw	r2,-25236(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80df24:	d0a75b17 	ldw	r2,-25236(gp)
  80df28:	100170fa 	wrctl	ienable,r2
  80df2c:	e0bff817 	ldw	r2,-32(fp)
  80df30:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80df34:	e0bff917 	ldw	r2,-28(fp)
  80df38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80df3c:	0005883a 	mov	r2,zero
  80df40:	00001906 	br	80dfa8 <alt_irq_register+0x158>
  80df44:	e0bffd17 	ldw	r2,-12(fp)
  80df48:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80df4c:	0005303a 	rdctl	r2,status
  80df50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80df54:	e0fffa17 	ldw	r3,-24(fp)
  80df58:	00bfff84 	movi	r2,-2
  80df5c:	1884703a 	and	r2,r3,r2
  80df60:	1001703a 	wrctl	status,r2
  
  return context;
  80df64:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80df68:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  80df6c:	00c00044 	movi	r3,1
  80df70:	e0bff417 	ldw	r2,-48(fp)
  80df74:	1884983a 	sll	r2,r3,r2
  80df78:	0084303a 	nor	r2,zero,r2
  80df7c:	1007883a 	mov	r3,r2
  80df80:	d0a75b17 	ldw	r2,-25236(gp)
  80df84:	1884703a 	and	r2,r3,r2
  80df88:	d0a75b15 	stw	r2,-25236(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80df8c:	d0a75b17 	ldw	r2,-25236(gp)
  80df90:	100170fa 	wrctl	ienable,r2
  80df94:	e0bffb17 	ldw	r2,-20(fp)
  80df98:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80df9c:	e0bffc17 	ldw	r2,-16(fp)
  80dfa0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80dfa4:	0005883a 	mov	r2,zero
  80dfa8:	e0bff115 	stw	r2,-60(fp)
  80dfac:	e0bff317 	ldw	r2,-52(fp)
  80dfb0:	e0bff515 	stw	r2,-44(fp)
  80dfb4:	e0bff517 	ldw	r2,-44(fp)
  80dfb8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80dfbc:	e0bff117 	ldw	r2,-60(fp)
}
  80dfc0:	e037883a 	mov	sp,fp
  80dfc4:	df000017 	ldw	fp,0(sp)
  80dfc8:	dec00104 	addi	sp,sp,4
  80dfcc:	f800283a 	ret

0080dfd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dfd0:	defffe04 	addi	sp,sp,-8
  80dfd4:	dfc00115 	stw	ra,4(sp)
  80dfd8:	df000015 	stw	fp,0(sp)
  80dfdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dfe0:	d0a00b17 	ldw	r2,-32724(gp)
  80dfe4:	10000326 	beq	r2,zero,80dff4 <alt_get_errno+0x24>
  80dfe8:	d0a00b17 	ldw	r2,-32724(gp)
  80dfec:	103ee83a 	callr	r2
  80dff0:	00000106 	br	80dff8 <alt_get_errno+0x28>
  80dff4:	d0a75404 	addi	r2,gp,-25264
}
  80dff8:	e037883a 	mov	sp,fp
  80dffc:	dfc00117 	ldw	ra,4(sp)
  80e000:	df000017 	ldw	fp,0(sp)
  80e004:	dec00204 	addi	sp,sp,8
  80e008:	f800283a 	ret

0080e00c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80e00c:	deffed04 	addi	sp,sp,-76
  80e010:	dfc01215 	stw	ra,72(sp)
  80e014:	df001115 	stw	fp,68(sp)
  80e018:	df001104 	addi	fp,sp,68
  80e01c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e020:	e0bfff17 	ldw	r2,-4(fp)
  80e024:	10000616 	blt	r2,zero,80e040 <isatty+0x34>
  80e028:	e0bfff17 	ldw	r2,-4(fp)
  80e02c:	10c00324 	muli	r3,r2,12
  80e030:	00802074 	movhi	r2,129
  80e034:	108b1704 	addi	r2,r2,11356
  80e038:	1885883a 	add	r2,r3,r2
  80e03c:	00000106 	br	80e044 <isatty+0x38>
  80e040:	0005883a 	mov	r2,zero
  80e044:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80e048:	e0bfef17 	ldw	r2,-68(fp)
  80e04c:	10000e26 	beq	r2,zero,80e088 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80e050:	e0bfef17 	ldw	r2,-68(fp)
  80e054:	10800017 	ldw	r2,0(r2)
  80e058:	10800817 	ldw	r2,32(r2)
  80e05c:	1000021e 	bne	r2,zero,80e068 <isatty+0x5c>
    {
      return 1;
  80e060:	00800044 	movi	r2,1
  80e064:	00000d06 	br	80e09c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80e068:	e0bff004 	addi	r2,fp,-64
  80e06c:	100b883a 	mov	r5,r2
  80e070:	e13fff17 	ldw	r4,-4(fp)
  80e074:	080dda00 	call	80dda0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80e078:	e0bff117 	ldw	r2,-60(fp)
  80e07c:	10880020 	cmpeqi	r2,r2,8192
  80e080:	10803fcc 	andi	r2,r2,255
  80e084:	00000506 	br	80e09c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e088:	080dfd00 	call	80dfd0 <alt_get_errno>
  80e08c:	1007883a 	mov	r3,r2
  80e090:	00801444 	movi	r2,81
  80e094:	18800015 	stw	r2,0(r3)
    return 0;
  80e098:	0005883a 	mov	r2,zero
  }
}
  80e09c:	e037883a 	mov	sp,fp
  80e0a0:	dfc00117 	ldw	ra,4(sp)
  80e0a4:	df000017 	ldw	fp,0(sp)
  80e0a8:	dec00204 	addi	sp,sp,8
  80e0ac:	f800283a 	ret

0080e0b0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80e0b0:	defffc04 	addi	sp,sp,-16
  80e0b4:	df000315 	stw	fp,12(sp)
  80e0b8:	df000304 	addi	fp,sp,12
  80e0bc:	e13ffd15 	stw	r4,-12(fp)
  80e0c0:	e17ffe15 	stw	r5,-8(fp)
  80e0c4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80e0c8:	e0fffe17 	ldw	r3,-8(fp)
  80e0cc:	e0bffd17 	ldw	r2,-12(fp)
  80e0d0:	18800c26 	beq	r3,r2,80e104 <alt_load_section+0x54>
  {
    while( to != end )
  80e0d4:	00000806 	br	80e0f8 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80e0d8:	e0bffe17 	ldw	r2,-8(fp)
  80e0dc:	10c00104 	addi	r3,r2,4
  80e0e0:	e0fffe15 	stw	r3,-8(fp)
  80e0e4:	e0fffd17 	ldw	r3,-12(fp)
  80e0e8:	19000104 	addi	r4,r3,4
  80e0ec:	e13ffd15 	stw	r4,-12(fp)
  80e0f0:	18c00017 	ldw	r3,0(r3)
  80e0f4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80e0f8:	e0fffe17 	ldw	r3,-8(fp)
  80e0fc:	e0bfff17 	ldw	r2,-4(fp)
  80e100:	18bff51e 	bne	r3,r2,80e0d8 <__alt_mem_onchip_mem+0xff8060d8>
    {
      *to++ = *from++;
    }
  }
}
  80e104:	0001883a 	nop
  80e108:	e037883a 	mov	sp,fp
  80e10c:	df000017 	ldw	fp,0(sp)
  80e110:	dec00104 	addi	sp,sp,4
  80e114:	f800283a 	ret

0080e118 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80e118:	defffe04 	addi	sp,sp,-8
  80e11c:	dfc00115 	stw	ra,4(sp)
  80e120:	df000015 	stw	fp,0(sp)
  80e124:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80e128:	01802074 	movhi	r6,129
  80e12c:	31901a04 	addi	r6,r6,16488
  80e130:	01402074 	movhi	r5,129
  80e134:	2948e404 	addi	r5,r5,9104
  80e138:	01002074 	movhi	r4,129
  80e13c:	21101a04 	addi	r4,r4,16488
  80e140:	080e0b00 	call	80e0b0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80e144:	01802034 	movhi	r6,128
  80e148:	31809104 	addi	r6,r6,580
  80e14c:	01402034 	movhi	r5,128
  80e150:	29400804 	addi	r5,r5,32
  80e154:	01002034 	movhi	r4,128
  80e158:	21000804 	addi	r4,r4,32
  80e15c:	080e0b00 	call	80e0b0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80e160:	01802074 	movhi	r6,129
  80e164:	3188e404 	addi	r6,r6,9104
  80e168:	01402074 	movhi	r5,129
  80e16c:	29476804 	addi	r5,r5,7584
  80e170:	01002074 	movhi	r4,129
  80e174:	21076804 	addi	r4,r4,7584
  80e178:	080e0b00 	call	80e0b0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80e17c:	0810efc0 	call	810efc <alt_dcache_flush_all>
  alt_icache_flush_all();
  80e180:	08113200 	call	811320 <alt_icache_flush_all>
}
  80e184:	0001883a 	nop
  80e188:	e037883a 	mov	sp,fp
  80e18c:	dfc00117 	ldw	ra,4(sp)
  80e190:	df000017 	ldw	fp,0(sp)
  80e194:	dec00204 	addi	sp,sp,8
  80e198:	f800283a 	ret

0080e19c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e19c:	defffe04 	addi	sp,sp,-8
  80e1a0:	dfc00115 	stw	ra,4(sp)
  80e1a4:	df000015 	stw	fp,0(sp)
  80e1a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e1ac:	d0a00b17 	ldw	r2,-32724(gp)
  80e1b0:	10000326 	beq	r2,zero,80e1c0 <alt_get_errno+0x24>
  80e1b4:	d0a00b17 	ldw	r2,-32724(gp)
  80e1b8:	103ee83a 	callr	r2
  80e1bc:	00000106 	br	80e1c4 <alt_get_errno+0x28>
  80e1c0:	d0a75404 	addi	r2,gp,-25264
}
  80e1c4:	e037883a 	mov	sp,fp
  80e1c8:	dfc00117 	ldw	ra,4(sp)
  80e1cc:	df000017 	ldw	fp,0(sp)
  80e1d0:	dec00204 	addi	sp,sp,8
  80e1d4:	f800283a 	ret

0080e1d8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80e1d8:	defff904 	addi	sp,sp,-28
  80e1dc:	dfc00615 	stw	ra,24(sp)
  80e1e0:	df000515 	stw	fp,20(sp)
  80e1e4:	df000504 	addi	fp,sp,20
  80e1e8:	e13ffd15 	stw	r4,-12(fp)
  80e1ec:	e17ffe15 	stw	r5,-8(fp)
  80e1f0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80e1f4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e1f8:	e0bffd17 	ldw	r2,-12(fp)
  80e1fc:	10000616 	blt	r2,zero,80e218 <lseek+0x40>
  80e200:	e0bffd17 	ldw	r2,-12(fp)
  80e204:	10c00324 	muli	r3,r2,12
  80e208:	00802074 	movhi	r2,129
  80e20c:	108b1704 	addi	r2,r2,11356
  80e210:	1885883a 	add	r2,r3,r2
  80e214:	00000106 	br	80e21c <lseek+0x44>
  80e218:	0005883a 	mov	r2,zero
  80e21c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80e220:	e0bffc17 	ldw	r2,-16(fp)
  80e224:	10001026 	beq	r2,zero,80e268 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80e228:	e0bffc17 	ldw	r2,-16(fp)
  80e22c:	10800017 	ldw	r2,0(r2)
  80e230:	10800717 	ldw	r2,28(r2)
  80e234:	10000926 	beq	r2,zero,80e25c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80e238:	e0bffc17 	ldw	r2,-16(fp)
  80e23c:	10800017 	ldw	r2,0(r2)
  80e240:	10800717 	ldw	r2,28(r2)
  80e244:	e1bfff17 	ldw	r6,-4(fp)
  80e248:	e17ffe17 	ldw	r5,-8(fp)
  80e24c:	e13ffc17 	ldw	r4,-16(fp)
  80e250:	103ee83a 	callr	r2
  80e254:	e0bffb15 	stw	r2,-20(fp)
  80e258:	00000506 	br	80e270 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80e25c:	00bfde84 	movi	r2,-134
  80e260:	e0bffb15 	stw	r2,-20(fp)
  80e264:	00000206 	br	80e270 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80e268:	00bfebc4 	movi	r2,-81
  80e26c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80e270:	e0bffb17 	ldw	r2,-20(fp)
  80e274:	1000070e 	bge	r2,zero,80e294 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80e278:	080e19c0 	call	80e19c <alt_get_errno>
  80e27c:	1007883a 	mov	r3,r2
  80e280:	e0bffb17 	ldw	r2,-20(fp)
  80e284:	0085c83a 	sub	r2,zero,r2
  80e288:	18800015 	stw	r2,0(r3)
    rc = -1;
  80e28c:	00bfffc4 	movi	r2,-1
  80e290:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80e294:	e0bffb17 	ldw	r2,-20(fp)
}
  80e298:	e037883a 	mov	sp,fp
  80e29c:	dfc00117 	ldw	ra,4(sp)
  80e2a0:	df000017 	ldw	fp,0(sp)
  80e2a4:	dec00204 	addi	sp,sp,8
  80e2a8:	f800283a 	ret

0080e2ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80e2ac:	defffd04 	addi	sp,sp,-12
  80e2b0:	dfc00215 	stw	ra,8(sp)
  80e2b4:	df000115 	stw	fp,4(sp)
  80e2b8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80e2bc:	0009883a 	mov	r4,zero
  80e2c0:	080eb1c0 	call	80eb1c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80e2c4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80e2c8:	080eb540 	call	80eb54 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80e2cc:	01802074 	movhi	r6,129
  80e2d0:	31883604 	addi	r6,r6,8408
  80e2d4:	01402074 	movhi	r5,129
  80e2d8:	29483604 	addi	r5,r5,8408
  80e2dc:	01002074 	movhi	r4,129
  80e2e0:	21083604 	addi	r4,r4,8408
  80e2e4:	08116b80 	call	8116b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80e2e8:	08110240 	call	811024 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80e2ec:	01002074 	movhi	r4,129
  80e2f0:	21042104 	addi	r4,r4,4228
  80e2f4:	0811a0c0 	call	811a0c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80e2f8:	d0a75c17 	ldw	r2,-25232(gp)
  80e2fc:	d0e75d17 	ldw	r3,-25228(gp)
  80e300:	d1275e17 	ldw	r4,-25224(gp)
  80e304:	200d883a 	mov	r6,r4
  80e308:	180b883a 	mov	r5,r3
  80e30c:	1009883a 	mov	r4,r2
  80e310:	08007f80 	call	8007f8 <main>
  80e314:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80e318:	01000044 	movi	r4,1
  80e31c:	080dc680 	call	80dc68 <close>
  exit (result);
  80e320:	e13fff17 	ldw	r4,-4(fp)
  80e324:	0811a200 	call	811a20 <exit>

0080e328 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80e328:	defffe04 	addi	sp,sp,-8
  80e32c:	df000115 	stw	fp,4(sp)
  80e330:	df000104 	addi	fp,sp,4
  80e334:	e13fff15 	stw	r4,-4(fp)
}
  80e338:	0001883a 	nop
  80e33c:	e037883a 	mov	sp,fp
  80e340:	df000017 	ldw	fp,0(sp)
  80e344:	dec00104 	addi	sp,sp,4
  80e348:	f800283a 	ret

0080e34c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80e34c:	defffe04 	addi	sp,sp,-8
  80e350:	df000115 	stw	fp,4(sp)
  80e354:	df000104 	addi	fp,sp,4
  80e358:	e13fff15 	stw	r4,-4(fp)
}
  80e35c:	0001883a 	nop
  80e360:	e037883a 	mov	sp,fp
  80e364:	df000017 	ldw	fp,0(sp)
  80e368:	dec00104 	addi	sp,sp,4
  80e36c:	f800283a 	ret

0080e370 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e370:	defffe04 	addi	sp,sp,-8
  80e374:	dfc00115 	stw	ra,4(sp)
  80e378:	df000015 	stw	fp,0(sp)
  80e37c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e380:	d0a00b17 	ldw	r2,-32724(gp)
  80e384:	10000326 	beq	r2,zero,80e394 <alt_get_errno+0x24>
  80e388:	d0a00b17 	ldw	r2,-32724(gp)
  80e38c:	103ee83a 	callr	r2
  80e390:	00000106 	br	80e398 <alt_get_errno+0x28>
  80e394:	d0a75404 	addi	r2,gp,-25264
}
  80e398:	e037883a 	mov	sp,fp
  80e39c:	dfc00117 	ldw	ra,4(sp)
  80e3a0:	df000017 	ldw	fp,0(sp)
  80e3a4:	dec00204 	addi	sp,sp,8
  80e3a8:	f800283a 	ret

0080e3ac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80e3ac:	defffd04 	addi	sp,sp,-12
  80e3b0:	df000215 	stw	fp,8(sp)
  80e3b4:	df000204 	addi	fp,sp,8
  80e3b8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80e3bc:	e0bfff17 	ldw	r2,-4(fp)
  80e3c0:	10800217 	ldw	r2,8(r2)
  80e3c4:	10d00034 	orhi	r3,r2,16384
  80e3c8:	e0bfff17 	ldw	r2,-4(fp)
  80e3cc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80e3d0:	e03ffe15 	stw	zero,-8(fp)
  80e3d4:	00001d06 	br	80e44c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80e3d8:	00802074 	movhi	r2,129
  80e3dc:	108b1704 	addi	r2,r2,11356
  80e3e0:	e0fffe17 	ldw	r3,-8(fp)
  80e3e4:	18c00324 	muli	r3,r3,12
  80e3e8:	10c5883a 	add	r2,r2,r3
  80e3ec:	10c00017 	ldw	r3,0(r2)
  80e3f0:	e0bfff17 	ldw	r2,-4(fp)
  80e3f4:	10800017 	ldw	r2,0(r2)
  80e3f8:	1880111e 	bne	r3,r2,80e440 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80e3fc:	00802074 	movhi	r2,129
  80e400:	108b1704 	addi	r2,r2,11356
  80e404:	e0fffe17 	ldw	r3,-8(fp)
  80e408:	18c00324 	muli	r3,r3,12
  80e40c:	10c5883a 	add	r2,r2,r3
  80e410:	10800204 	addi	r2,r2,8
  80e414:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80e418:	1000090e 	bge	r2,zero,80e440 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80e41c:	e0bffe17 	ldw	r2,-8(fp)
  80e420:	10c00324 	muli	r3,r2,12
  80e424:	00802074 	movhi	r2,129
  80e428:	108b1704 	addi	r2,r2,11356
  80e42c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80e430:	e0bfff17 	ldw	r2,-4(fp)
  80e434:	18800226 	beq	r3,r2,80e440 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80e438:	00bffcc4 	movi	r2,-13
  80e43c:	00000806 	br	80e460 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80e440:	e0bffe17 	ldw	r2,-8(fp)
  80e444:	10800044 	addi	r2,r2,1
  80e448:	e0bffe15 	stw	r2,-8(fp)
  80e44c:	d0a00a17 	ldw	r2,-32728(gp)
  80e450:	1007883a 	mov	r3,r2
  80e454:	e0bffe17 	ldw	r2,-8(fp)
  80e458:	18bfdf2e 	bgeu	r3,r2,80e3d8 <__alt_mem_onchip_mem+0xff8063d8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80e45c:	0005883a 	mov	r2,zero
}
  80e460:	e037883a 	mov	sp,fp
  80e464:	df000017 	ldw	fp,0(sp)
  80e468:	dec00104 	addi	sp,sp,4
  80e46c:	f800283a 	ret

0080e470 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80e470:	defff604 	addi	sp,sp,-40
  80e474:	dfc00915 	stw	ra,36(sp)
  80e478:	df000815 	stw	fp,32(sp)
  80e47c:	df000804 	addi	fp,sp,32
  80e480:	e13ffd15 	stw	r4,-12(fp)
  80e484:	e17ffe15 	stw	r5,-8(fp)
  80e488:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80e48c:	00bfffc4 	movi	r2,-1
  80e490:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80e494:	00bffb44 	movi	r2,-19
  80e498:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80e49c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80e4a0:	d1600804 	addi	r5,gp,-32736
  80e4a4:	e13ffd17 	ldw	r4,-12(fp)
  80e4a8:	08110e40 	call	8110e4 <alt_find_dev>
  80e4ac:	e0bff815 	stw	r2,-32(fp)
  80e4b0:	e0bff817 	ldw	r2,-32(fp)
  80e4b4:	1000051e 	bne	r2,zero,80e4cc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80e4b8:	e13ffd17 	ldw	r4,-12(fp)
  80e4bc:	08111740 	call	811174 <alt_find_file>
  80e4c0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80e4c4:	00800044 	movi	r2,1
  80e4c8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80e4cc:	e0bff817 	ldw	r2,-32(fp)
  80e4d0:	10002926 	beq	r2,zero,80e578 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80e4d4:	e13ff817 	ldw	r4,-32(fp)
  80e4d8:	081127c0 	call	81127c <alt_get_fd>
  80e4dc:	e0bff915 	stw	r2,-28(fp)
  80e4e0:	e0bff917 	ldw	r2,-28(fp)
  80e4e4:	1000030e 	bge	r2,zero,80e4f4 <open+0x84>
    {
      status = index;
  80e4e8:	e0bff917 	ldw	r2,-28(fp)
  80e4ec:	e0bffa15 	stw	r2,-24(fp)
  80e4f0:	00002306 	br	80e580 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80e4f4:	e0bff917 	ldw	r2,-28(fp)
  80e4f8:	10c00324 	muli	r3,r2,12
  80e4fc:	00802074 	movhi	r2,129
  80e500:	108b1704 	addi	r2,r2,11356
  80e504:	1885883a 	add	r2,r3,r2
  80e508:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80e50c:	e0fffe17 	ldw	r3,-8(fp)
  80e510:	00900034 	movhi	r2,16384
  80e514:	10bfffc4 	addi	r2,r2,-1
  80e518:	1886703a 	and	r3,r3,r2
  80e51c:	e0bffc17 	ldw	r2,-16(fp)
  80e520:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80e524:	e0bffb17 	ldw	r2,-20(fp)
  80e528:	1000051e 	bne	r2,zero,80e540 <open+0xd0>
  80e52c:	e13ffc17 	ldw	r4,-16(fp)
  80e530:	080e3ac0 	call	80e3ac <alt_file_locked>
  80e534:	e0bffa15 	stw	r2,-24(fp)
  80e538:	e0bffa17 	ldw	r2,-24(fp)
  80e53c:	10001016 	blt	r2,zero,80e580 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80e540:	e0bff817 	ldw	r2,-32(fp)
  80e544:	10800317 	ldw	r2,12(r2)
  80e548:	10000826 	beq	r2,zero,80e56c <open+0xfc>
  80e54c:	e0bff817 	ldw	r2,-32(fp)
  80e550:	10800317 	ldw	r2,12(r2)
  80e554:	e1ffff17 	ldw	r7,-4(fp)
  80e558:	e1bffe17 	ldw	r6,-8(fp)
  80e55c:	e17ffd17 	ldw	r5,-12(fp)
  80e560:	e13ffc17 	ldw	r4,-16(fp)
  80e564:	103ee83a 	callr	r2
  80e568:	00000106 	br	80e570 <open+0x100>
  80e56c:	0005883a 	mov	r2,zero
  80e570:	e0bffa15 	stw	r2,-24(fp)
  80e574:	00000206 	br	80e580 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80e578:	00bffb44 	movi	r2,-19
  80e57c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80e580:	e0bffa17 	ldw	r2,-24(fp)
  80e584:	1000090e 	bge	r2,zero,80e5ac <open+0x13c>
  {
    alt_release_fd (index);  
  80e588:	e13ff917 	ldw	r4,-28(fp)
  80e58c:	080e6fc0 	call	80e6fc <alt_release_fd>
    ALT_ERRNO = -status;
  80e590:	080e3700 	call	80e370 <alt_get_errno>
  80e594:	1007883a 	mov	r3,r2
  80e598:	e0bffa17 	ldw	r2,-24(fp)
  80e59c:	0085c83a 	sub	r2,zero,r2
  80e5a0:	18800015 	stw	r2,0(r3)
    return -1;
  80e5a4:	00bfffc4 	movi	r2,-1
  80e5a8:	00000106 	br	80e5b0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80e5ac:	e0bff917 	ldw	r2,-28(fp)
}
  80e5b0:	e037883a 	mov	sp,fp
  80e5b4:	dfc00117 	ldw	ra,4(sp)
  80e5b8:	df000017 	ldw	fp,0(sp)
  80e5bc:	dec00204 	addi	sp,sp,8
  80e5c0:	f800283a 	ret

0080e5c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e5c4:	defffe04 	addi	sp,sp,-8
  80e5c8:	dfc00115 	stw	ra,4(sp)
  80e5cc:	df000015 	stw	fp,0(sp)
  80e5d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e5d4:	d0a00b17 	ldw	r2,-32724(gp)
  80e5d8:	10000326 	beq	r2,zero,80e5e8 <alt_get_errno+0x24>
  80e5dc:	d0a00b17 	ldw	r2,-32724(gp)
  80e5e0:	103ee83a 	callr	r2
  80e5e4:	00000106 	br	80e5ec <alt_get_errno+0x28>
  80e5e8:	d0a75404 	addi	r2,gp,-25264
}
  80e5ec:	e037883a 	mov	sp,fp
  80e5f0:	dfc00117 	ldw	ra,4(sp)
  80e5f4:	df000017 	ldw	fp,0(sp)
  80e5f8:	dec00204 	addi	sp,sp,8
  80e5fc:	f800283a 	ret

0080e600 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80e600:	defff904 	addi	sp,sp,-28
  80e604:	dfc00615 	stw	ra,24(sp)
  80e608:	df000515 	stw	fp,20(sp)
  80e60c:	df000504 	addi	fp,sp,20
  80e610:	e13ffd15 	stw	r4,-12(fp)
  80e614:	e17ffe15 	stw	r5,-8(fp)
  80e618:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e61c:	e0bffd17 	ldw	r2,-12(fp)
  80e620:	10000616 	blt	r2,zero,80e63c <read+0x3c>
  80e624:	e0bffd17 	ldw	r2,-12(fp)
  80e628:	10c00324 	muli	r3,r2,12
  80e62c:	00802074 	movhi	r2,129
  80e630:	108b1704 	addi	r2,r2,11356
  80e634:	1885883a 	add	r2,r3,r2
  80e638:	00000106 	br	80e640 <read+0x40>
  80e63c:	0005883a 	mov	r2,zero
  80e640:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80e644:	e0bffb17 	ldw	r2,-20(fp)
  80e648:	10002226 	beq	r2,zero,80e6d4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80e64c:	e0bffb17 	ldw	r2,-20(fp)
  80e650:	10800217 	ldw	r2,8(r2)
  80e654:	108000cc 	andi	r2,r2,3
  80e658:	10800060 	cmpeqi	r2,r2,1
  80e65c:	1000181e 	bne	r2,zero,80e6c0 <read+0xc0>
        (fd->dev->read))
  80e660:	e0bffb17 	ldw	r2,-20(fp)
  80e664:	10800017 	ldw	r2,0(r2)
  80e668:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80e66c:	10001426 	beq	r2,zero,80e6c0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80e670:	e0bffb17 	ldw	r2,-20(fp)
  80e674:	10800017 	ldw	r2,0(r2)
  80e678:	10800517 	ldw	r2,20(r2)
  80e67c:	e0ffff17 	ldw	r3,-4(fp)
  80e680:	180d883a 	mov	r6,r3
  80e684:	e17ffe17 	ldw	r5,-8(fp)
  80e688:	e13ffb17 	ldw	r4,-20(fp)
  80e68c:	103ee83a 	callr	r2
  80e690:	e0bffc15 	stw	r2,-16(fp)
  80e694:	e0bffc17 	ldw	r2,-16(fp)
  80e698:	1000070e 	bge	r2,zero,80e6b8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80e69c:	080e5c40 	call	80e5c4 <alt_get_errno>
  80e6a0:	1007883a 	mov	r3,r2
  80e6a4:	e0bffc17 	ldw	r2,-16(fp)
  80e6a8:	0085c83a 	sub	r2,zero,r2
  80e6ac:	18800015 	stw	r2,0(r3)
          return -1;
  80e6b0:	00bfffc4 	movi	r2,-1
  80e6b4:	00000c06 	br	80e6e8 <read+0xe8>
        }
        return rval;
  80e6b8:	e0bffc17 	ldw	r2,-16(fp)
  80e6bc:	00000a06 	br	80e6e8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80e6c0:	080e5c40 	call	80e5c4 <alt_get_errno>
  80e6c4:	1007883a 	mov	r3,r2
  80e6c8:	00800344 	movi	r2,13
  80e6cc:	18800015 	stw	r2,0(r3)
  80e6d0:	00000406 	br	80e6e4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80e6d4:	080e5c40 	call	80e5c4 <alt_get_errno>
  80e6d8:	1007883a 	mov	r3,r2
  80e6dc:	00801444 	movi	r2,81
  80e6e0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e6e4:	00bfffc4 	movi	r2,-1
}
  80e6e8:	e037883a 	mov	sp,fp
  80e6ec:	dfc00117 	ldw	ra,4(sp)
  80e6f0:	df000017 	ldw	fp,0(sp)
  80e6f4:	dec00204 	addi	sp,sp,8
  80e6f8:	f800283a 	ret

0080e6fc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80e6fc:	defffe04 	addi	sp,sp,-8
  80e700:	df000115 	stw	fp,4(sp)
  80e704:	df000104 	addi	fp,sp,4
  80e708:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80e70c:	e0bfff17 	ldw	r2,-4(fp)
  80e710:	108000d0 	cmplti	r2,r2,3
  80e714:	10000d1e 	bne	r2,zero,80e74c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80e718:	00802074 	movhi	r2,129
  80e71c:	108b1704 	addi	r2,r2,11356
  80e720:	e0ffff17 	ldw	r3,-4(fp)
  80e724:	18c00324 	muli	r3,r3,12
  80e728:	10c5883a 	add	r2,r2,r3
  80e72c:	10800204 	addi	r2,r2,8
  80e730:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80e734:	00802074 	movhi	r2,129
  80e738:	108b1704 	addi	r2,r2,11356
  80e73c:	e0ffff17 	ldw	r3,-4(fp)
  80e740:	18c00324 	muli	r3,r3,12
  80e744:	10c5883a 	add	r2,r2,r3
  80e748:	10000015 	stw	zero,0(r2)
  }
}
  80e74c:	0001883a 	nop
  80e750:	e037883a 	mov	sp,fp
  80e754:	df000017 	ldw	fp,0(sp)
  80e758:	dec00104 	addi	sp,sp,4
  80e75c:	f800283a 	ret

0080e760 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80e760:	defff904 	addi	sp,sp,-28
  80e764:	df000615 	stw	fp,24(sp)
  80e768:	df000604 	addi	fp,sp,24
  80e76c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e770:	0005303a 	rdctl	r2,status
  80e774:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e778:	e0fffe17 	ldw	r3,-8(fp)
  80e77c:	00bfff84 	movi	r2,-2
  80e780:	1884703a 	and	r2,r3,r2
  80e784:	1001703a 	wrctl	status,r2
  
  return context;
  80e788:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80e78c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80e790:	d0a00d17 	ldw	r2,-32716(gp)
  80e794:	10c000c4 	addi	r3,r2,3
  80e798:	00bfff04 	movi	r2,-4
  80e79c:	1884703a 	and	r2,r3,r2
  80e7a0:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80e7a4:	d0e00d17 	ldw	r3,-32716(gp)
  80e7a8:	e0bfff17 	ldw	r2,-4(fp)
  80e7ac:	1887883a 	add	r3,r3,r2
  80e7b0:	00804034 	movhi	r2,256
  80e7b4:	10800004 	addi	r2,r2,0
  80e7b8:	10c0062e 	bgeu	r2,r3,80e7d4 <sbrk+0x74>
  80e7bc:	e0bffb17 	ldw	r2,-20(fp)
  80e7c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e7c4:	e0bffa17 	ldw	r2,-24(fp)
  80e7c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80e7cc:	00bfffc4 	movi	r2,-1
  80e7d0:	00000b06 	br	80e800 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80e7d4:	d0a00d17 	ldw	r2,-32716(gp)
  80e7d8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80e7dc:	d0e00d17 	ldw	r3,-32716(gp)
  80e7e0:	e0bfff17 	ldw	r2,-4(fp)
  80e7e4:	1885883a 	add	r2,r3,r2
  80e7e8:	d0a00d15 	stw	r2,-32716(gp)
  80e7ec:	e0bffb17 	ldw	r2,-20(fp)
  80e7f0:	e0bffc15 	stw	r2,-16(fp)
  80e7f4:	e0bffc17 	ldw	r2,-16(fp)
  80e7f8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80e7fc:	e0bffd17 	ldw	r2,-12(fp)
} 
  80e800:	e037883a 	mov	sp,fp
  80e804:	df000017 	ldw	fp,0(sp)
  80e808:	dec00104 	addi	sp,sp,4
  80e80c:	f800283a 	ret

0080e810 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80e810:	defffa04 	addi	sp,sp,-24
  80e814:	df000515 	stw	fp,20(sp)
  80e818:	df000504 	addi	fp,sp,20
  80e81c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e820:	0005303a 	rdctl	r2,status
  80e824:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e828:	e0fffc17 	ldw	r3,-16(fp)
  80e82c:	00bfff84 	movi	r2,-2
  80e830:	1884703a 	and	r2,r3,r2
  80e834:	1001703a 	wrctl	status,r2
  
  return context;
  80e838:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80e83c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80e840:	e0bfff17 	ldw	r2,-4(fp)
  80e844:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80e848:	e0bffd17 	ldw	r2,-12(fp)
  80e84c:	10800017 	ldw	r2,0(r2)
  80e850:	e0fffd17 	ldw	r3,-12(fp)
  80e854:	18c00117 	ldw	r3,4(r3)
  80e858:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80e85c:	e0bffd17 	ldw	r2,-12(fp)
  80e860:	10800117 	ldw	r2,4(r2)
  80e864:	e0fffd17 	ldw	r3,-12(fp)
  80e868:	18c00017 	ldw	r3,0(r3)
  80e86c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80e870:	e0bffd17 	ldw	r2,-12(fp)
  80e874:	e0fffd17 	ldw	r3,-12(fp)
  80e878:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80e87c:	e0bffd17 	ldw	r2,-12(fp)
  80e880:	e0fffd17 	ldw	r3,-12(fp)
  80e884:	10c00015 	stw	r3,0(r2)
  80e888:	e0bffb17 	ldw	r2,-20(fp)
  80e88c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e890:	e0bffe17 	ldw	r2,-8(fp)
  80e894:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80e898:	0001883a 	nop
  80e89c:	e037883a 	mov	sp,fp
  80e8a0:	df000017 	ldw	fp,0(sp)
  80e8a4:	dec00104 	addi	sp,sp,4
  80e8a8:	f800283a 	ret

0080e8ac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80e8ac:	defffb04 	addi	sp,sp,-20
  80e8b0:	dfc00415 	stw	ra,16(sp)
  80e8b4:	df000315 	stw	fp,12(sp)
  80e8b8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80e8bc:	d0a00e17 	ldw	r2,-32712(gp)
  80e8c0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80e8c4:	d0a76017 	ldw	r2,-25216(gp)
  80e8c8:	10800044 	addi	r2,r2,1
  80e8cc:	d0a76015 	stw	r2,-25216(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80e8d0:	00002e06 	br	80e98c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80e8d4:	e0bffd17 	ldw	r2,-12(fp)
  80e8d8:	10800017 	ldw	r2,0(r2)
  80e8dc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80e8e0:	e0bffd17 	ldw	r2,-12(fp)
  80e8e4:	10800403 	ldbu	r2,16(r2)
  80e8e8:	10803fcc 	andi	r2,r2,255
  80e8ec:	10000426 	beq	r2,zero,80e900 <alt_tick+0x54>
  80e8f0:	d0a76017 	ldw	r2,-25216(gp)
  80e8f4:	1000021e 	bne	r2,zero,80e900 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80e8f8:	e0bffd17 	ldw	r2,-12(fp)
  80e8fc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80e900:	e0bffd17 	ldw	r2,-12(fp)
  80e904:	10800217 	ldw	r2,8(r2)
  80e908:	d0e76017 	ldw	r3,-25216(gp)
  80e90c:	18801d36 	bltu	r3,r2,80e984 <alt_tick+0xd8>
  80e910:	e0bffd17 	ldw	r2,-12(fp)
  80e914:	10800403 	ldbu	r2,16(r2)
  80e918:	10803fcc 	andi	r2,r2,255
  80e91c:	1000191e 	bne	r2,zero,80e984 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80e920:	e0bffd17 	ldw	r2,-12(fp)
  80e924:	10800317 	ldw	r2,12(r2)
  80e928:	e0fffd17 	ldw	r3,-12(fp)
  80e92c:	18c00517 	ldw	r3,20(r3)
  80e930:	1809883a 	mov	r4,r3
  80e934:	103ee83a 	callr	r2
  80e938:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80e93c:	e0bfff17 	ldw	r2,-4(fp)
  80e940:	1000031e 	bne	r2,zero,80e950 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80e944:	e13ffd17 	ldw	r4,-12(fp)
  80e948:	080e8100 	call	80e810 <alt_alarm_stop>
  80e94c:	00000d06 	br	80e984 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80e950:	e0bffd17 	ldw	r2,-12(fp)
  80e954:	10c00217 	ldw	r3,8(r2)
  80e958:	e0bfff17 	ldw	r2,-4(fp)
  80e95c:	1887883a 	add	r3,r3,r2
  80e960:	e0bffd17 	ldw	r2,-12(fp)
  80e964:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80e968:	e0bffd17 	ldw	r2,-12(fp)
  80e96c:	10c00217 	ldw	r3,8(r2)
  80e970:	d0a76017 	ldw	r2,-25216(gp)
  80e974:	1880032e 	bgeu	r3,r2,80e984 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80e978:	e0bffd17 	ldw	r2,-12(fp)
  80e97c:	00c00044 	movi	r3,1
  80e980:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80e984:	e0bffe17 	ldw	r2,-8(fp)
  80e988:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80e98c:	e0fffd17 	ldw	r3,-12(fp)
  80e990:	d0a00e04 	addi	r2,gp,-32712
  80e994:	18bfcf1e 	bne	r3,r2,80e8d4 <__alt_mem_onchip_mem+0xff8068d4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80e998:	0001883a 	nop
}
  80e99c:	0001883a 	nop
  80e9a0:	e037883a 	mov	sp,fp
  80e9a4:	dfc00117 	ldw	ra,4(sp)
  80e9a8:	df000017 	ldw	fp,0(sp)
  80e9ac:	dec00204 	addi	sp,sp,8
  80e9b0:	f800283a 	ret

0080e9b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e9b4:	defffe04 	addi	sp,sp,-8
  80e9b8:	dfc00115 	stw	ra,4(sp)
  80e9bc:	df000015 	stw	fp,0(sp)
  80e9c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e9c4:	d0a00b17 	ldw	r2,-32724(gp)
  80e9c8:	10000326 	beq	r2,zero,80e9d8 <alt_get_errno+0x24>
  80e9cc:	d0a00b17 	ldw	r2,-32724(gp)
  80e9d0:	103ee83a 	callr	r2
  80e9d4:	00000106 	br	80e9dc <alt_get_errno+0x28>
  80e9d8:	d0a75404 	addi	r2,gp,-25264
}
  80e9dc:	e037883a 	mov	sp,fp
  80e9e0:	dfc00117 	ldw	ra,4(sp)
  80e9e4:	df000017 	ldw	fp,0(sp)
  80e9e8:	dec00204 	addi	sp,sp,8
  80e9ec:	f800283a 	ret

0080e9f0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80e9f0:	defff904 	addi	sp,sp,-28
  80e9f4:	dfc00615 	stw	ra,24(sp)
  80e9f8:	df000515 	stw	fp,20(sp)
  80e9fc:	df000504 	addi	fp,sp,20
  80ea00:	e13ffd15 	stw	r4,-12(fp)
  80ea04:	e17ffe15 	stw	r5,-8(fp)
  80ea08:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ea0c:	e0bffd17 	ldw	r2,-12(fp)
  80ea10:	10000616 	blt	r2,zero,80ea2c <write+0x3c>
  80ea14:	e0bffd17 	ldw	r2,-12(fp)
  80ea18:	10c00324 	muli	r3,r2,12
  80ea1c:	00802074 	movhi	r2,129
  80ea20:	108b1704 	addi	r2,r2,11356
  80ea24:	1885883a 	add	r2,r3,r2
  80ea28:	00000106 	br	80ea30 <write+0x40>
  80ea2c:	0005883a 	mov	r2,zero
  80ea30:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80ea34:	e0bffb17 	ldw	r2,-20(fp)
  80ea38:	10002126 	beq	r2,zero,80eac0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80ea3c:	e0bffb17 	ldw	r2,-20(fp)
  80ea40:	10800217 	ldw	r2,8(r2)
  80ea44:	108000cc 	andi	r2,r2,3
  80ea48:	10001826 	beq	r2,zero,80eaac <write+0xbc>
  80ea4c:	e0bffb17 	ldw	r2,-20(fp)
  80ea50:	10800017 	ldw	r2,0(r2)
  80ea54:	10800617 	ldw	r2,24(r2)
  80ea58:	10001426 	beq	r2,zero,80eaac <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80ea5c:	e0bffb17 	ldw	r2,-20(fp)
  80ea60:	10800017 	ldw	r2,0(r2)
  80ea64:	10800617 	ldw	r2,24(r2)
  80ea68:	e0ffff17 	ldw	r3,-4(fp)
  80ea6c:	180d883a 	mov	r6,r3
  80ea70:	e17ffe17 	ldw	r5,-8(fp)
  80ea74:	e13ffb17 	ldw	r4,-20(fp)
  80ea78:	103ee83a 	callr	r2
  80ea7c:	e0bffc15 	stw	r2,-16(fp)
  80ea80:	e0bffc17 	ldw	r2,-16(fp)
  80ea84:	1000070e 	bge	r2,zero,80eaa4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80ea88:	080e9b40 	call	80e9b4 <alt_get_errno>
  80ea8c:	1007883a 	mov	r3,r2
  80ea90:	e0bffc17 	ldw	r2,-16(fp)
  80ea94:	0085c83a 	sub	r2,zero,r2
  80ea98:	18800015 	stw	r2,0(r3)
        return -1;
  80ea9c:	00bfffc4 	movi	r2,-1
  80eaa0:	00000c06 	br	80ead4 <write+0xe4>
      }
      return rval;
  80eaa4:	e0bffc17 	ldw	r2,-16(fp)
  80eaa8:	00000a06 	br	80ead4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80eaac:	080e9b40 	call	80e9b4 <alt_get_errno>
  80eab0:	1007883a 	mov	r3,r2
  80eab4:	00800344 	movi	r2,13
  80eab8:	18800015 	stw	r2,0(r3)
  80eabc:	00000406 	br	80ead0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80eac0:	080e9b40 	call	80e9b4 <alt_get_errno>
  80eac4:	1007883a 	mov	r3,r2
  80eac8:	00801444 	movi	r2,81
  80eacc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80ead0:	00bfffc4 	movi	r2,-1
}
  80ead4:	e037883a 	mov	sp,fp
  80ead8:	dfc00117 	ldw	ra,4(sp)
  80eadc:	df000017 	ldw	fp,0(sp)
  80eae0:	dec00204 	addi	sp,sp,8
  80eae4:	f800283a 	ret

0080eae8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80eae8:	defffd04 	addi	sp,sp,-12
  80eaec:	dfc00215 	stw	ra,8(sp)
  80eaf0:	df000115 	stw	fp,4(sp)
  80eaf4:	df000104 	addi	fp,sp,4
  80eaf8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80eafc:	d1600804 	addi	r5,gp,-32736
  80eb00:	e13fff17 	ldw	r4,-4(fp)
  80eb04:	0810f800 	call	810f80 <alt_dev_llist_insert>
}
  80eb08:	e037883a 	mov	sp,fp
  80eb0c:	dfc00117 	ldw	ra,4(sp)
  80eb10:	df000017 	ldw	fp,0(sp)
  80eb14:	dec00204 	addi	sp,sp,8
  80eb18:	f800283a 	ret

0080eb1c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80eb1c:	defffd04 	addi	sp,sp,-12
  80eb20:	dfc00215 	stw	ra,8(sp)
  80eb24:	df000115 	stw	fp,4(sp)
  80eb28:	df000104 	addi	fp,sp,4
  80eb2c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80eb30:	08117640 	call	811764 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80eb34:	00800044 	movi	r2,1
  80eb38:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80eb3c:	0001883a 	nop
  80eb40:	e037883a 	mov	sp,fp
  80eb44:	dfc00117 	ldw	ra,4(sp)
  80eb48:	df000017 	ldw	fp,0(sp)
  80eb4c:	dec00204 	addi	sp,sp,8
  80eb50:	f800283a 	ret

0080eb54 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80eb54:	defffe04 	addi	sp,sp,-8
  80eb58:	dfc00115 	stw	ra,4(sp)
  80eb5c:	df000015 	stw	fp,0(sp)
  80eb60:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80eb64:	01c0fa04 	movi	r7,1000
  80eb68:	01800084 	movi	r6,2
  80eb6c:	000b883a 	mov	r5,zero
  80eb70:	01004074 	movhi	r4,257
  80eb74:	21040004 	addi	r4,r4,4096
  80eb78:	08105a80 	call	8105a8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80eb7c:	018000c4 	movi	r6,3
  80eb80:	000b883a 	mov	r5,zero
  80eb84:	01002074 	movhi	r4,129
  80eb88:	210b8104 	addi	r4,r4,11780
  80eb8c:	080ed500 	call	80ed50 <altera_avalon_jtag_uart_init>
  80eb90:	01002074 	movhi	r4,129
  80eb94:	210b7704 	addi	r4,r4,11740
  80eb98:	080eae80 	call	80eae8 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80eb9c:	01002074 	movhi	r4,129
  80eba0:	210f9904 	addi	r4,r4,15972
  80eba4:	081039c0 	call	81039c <altera_avalon_lcd_16207_init>
  80eba8:	01002074 	movhi	r4,129
  80ebac:	210f8f04 	addi	r4,r4,15932
  80ebb0:	080eae80 	call	80eae8 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80ebb4:	01800104 	movi	r6,4
  80ebb8:	000b883a 	mov	r5,zero
  80ebbc:	01002074 	movhi	r4,129
  80ebc0:	210fe104 	addi	r4,r4,16260
  80ebc4:	08107340 	call	810734 <altera_avalon_uart_init>
  80ebc8:	01002074 	movhi	r4,129
  80ebcc:	210fd704 	addi	r4,r4,16220
  80ebd0:	080eae80 	call	80eae8 <alt_dev_reg>
}
  80ebd4:	0001883a 	nop
  80ebd8:	e037883a 	mov	sp,fp
  80ebdc:	dfc00117 	ldw	ra,4(sp)
  80ebe0:	df000017 	ldw	fp,0(sp)
  80ebe4:	dec00204 	addi	sp,sp,8
  80ebe8:	f800283a 	ret

0080ebec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80ebec:	defffa04 	addi	sp,sp,-24
  80ebf0:	dfc00515 	stw	ra,20(sp)
  80ebf4:	df000415 	stw	fp,16(sp)
  80ebf8:	df000404 	addi	fp,sp,16
  80ebfc:	e13ffd15 	stw	r4,-12(fp)
  80ec00:	e17ffe15 	stw	r5,-8(fp)
  80ec04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ec08:	e0bffd17 	ldw	r2,-12(fp)
  80ec0c:	10800017 	ldw	r2,0(r2)
  80ec10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80ec14:	e0bffc17 	ldw	r2,-16(fp)
  80ec18:	10c00a04 	addi	r3,r2,40
  80ec1c:	e0bffd17 	ldw	r2,-12(fp)
  80ec20:	10800217 	ldw	r2,8(r2)
  80ec24:	100f883a 	mov	r7,r2
  80ec28:	e1bfff17 	ldw	r6,-4(fp)
  80ec2c:	e17ffe17 	ldw	r5,-8(fp)
  80ec30:	1809883a 	mov	r4,r3
  80ec34:	080f2140 	call	80f214 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80ec38:	e037883a 	mov	sp,fp
  80ec3c:	dfc00117 	ldw	ra,4(sp)
  80ec40:	df000017 	ldw	fp,0(sp)
  80ec44:	dec00204 	addi	sp,sp,8
  80ec48:	f800283a 	ret

0080ec4c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80ec4c:	defffa04 	addi	sp,sp,-24
  80ec50:	dfc00515 	stw	ra,20(sp)
  80ec54:	df000415 	stw	fp,16(sp)
  80ec58:	df000404 	addi	fp,sp,16
  80ec5c:	e13ffd15 	stw	r4,-12(fp)
  80ec60:	e17ffe15 	stw	r5,-8(fp)
  80ec64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ec68:	e0bffd17 	ldw	r2,-12(fp)
  80ec6c:	10800017 	ldw	r2,0(r2)
  80ec70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80ec74:	e0bffc17 	ldw	r2,-16(fp)
  80ec78:	10c00a04 	addi	r3,r2,40
  80ec7c:	e0bffd17 	ldw	r2,-12(fp)
  80ec80:	10800217 	ldw	r2,8(r2)
  80ec84:	100f883a 	mov	r7,r2
  80ec88:	e1bfff17 	ldw	r6,-4(fp)
  80ec8c:	e17ffe17 	ldw	r5,-8(fp)
  80ec90:	1809883a 	mov	r4,r3
  80ec94:	080f4300 	call	80f430 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80ec98:	e037883a 	mov	sp,fp
  80ec9c:	dfc00117 	ldw	ra,4(sp)
  80eca0:	df000017 	ldw	fp,0(sp)
  80eca4:	dec00204 	addi	sp,sp,8
  80eca8:	f800283a 	ret

0080ecac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80ecac:	defffc04 	addi	sp,sp,-16
  80ecb0:	dfc00315 	stw	ra,12(sp)
  80ecb4:	df000215 	stw	fp,8(sp)
  80ecb8:	df000204 	addi	fp,sp,8
  80ecbc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ecc0:	e0bfff17 	ldw	r2,-4(fp)
  80ecc4:	10800017 	ldw	r2,0(r2)
  80ecc8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80eccc:	e0bffe17 	ldw	r2,-8(fp)
  80ecd0:	10c00a04 	addi	r3,r2,40
  80ecd4:	e0bfff17 	ldw	r2,-4(fp)
  80ecd8:	10800217 	ldw	r2,8(r2)
  80ecdc:	100b883a 	mov	r5,r2
  80ece0:	1809883a 	mov	r4,r3
  80ece4:	080f0bc0 	call	80f0bc <altera_avalon_jtag_uart_close>
}
  80ece8:	e037883a 	mov	sp,fp
  80ecec:	dfc00117 	ldw	ra,4(sp)
  80ecf0:	df000017 	ldw	fp,0(sp)
  80ecf4:	dec00204 	addi	sp,sp,8
  80ecf8:	f800283a 	ret

0080ecfc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80ecfc:	defffa04 	addi	sp,sp,-24
  80ed00:	dfc00515 	stw	ra,20(sp)
  80ed04:	df000415 	stw	fp,16(sp)
  80ed08:	df000404 	addi	fp,sp,16
  80ed0c:	e13ffd15 	stw	r4,-12(fp)
  80ed10:	e17ffe15 	stw	r5,-8(fp)
  80ed14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80ed18:	e0bffd17 	ldw	r2,-12(fp)
  80ed1c:	10800017 	ldw	r2,0(r2)
  80ed20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80ed24:	e0bffc17 	ldw	r2,-16(fp)
  80ed28:	10800a04 	addi	r2,r2,40
  80ed2c:	e1bfff17 	ldw	r6,-4(fp)
  80ed30:	e17ffe17 	ldw	r5,-8(fp)
  80ed34:	1009883a 	mov	r4,r2
  80ed38:	080f1240 	call	80f124 <altera_avalon_jtag_uart_ioctl>
}
  80ed3c:	e037883a 	mov	sp,fp
  80ed40:	dfc00117 	ldw	ra,4(sp)
  80ed44:	df000017 	ldw	fp,0(sp)
  80ed48:	dec00204 	addi	sp,sp,8
  80ed4c:	f800283a 	ret

0080ed50 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80ed50:	defffa04 	addi	sp,sp,-24
  80ed54:	dfc00515 	stw	ra,20(sp)
  80ed58:	df000415 	stw	fp,16(sp)
  80ed5c:	df000404 	addi	fp,sp,16
  80ed60:	e13ffd15 	stw	r4,-12(fp)
  80ed64:	e17ffe15 	stw	r5,-8(fp)
  80ed68:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ed6c:	e0bffd17 	ldw	r2,-12(fp)
  80ed70:	00c00044 	movi	r3,1
  80ed74:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80ed78:	e0bffd17 	ldw	r2,-12(fp)
  80ed7c:	10800017 	ldw	r2,0(r2)
  80ed80:	10800104 	addi	r2,r2,4
  80ed84:	1007883a 	mov	r3,r2
  80ed88:	e0bffd17 	ldw	r2,-12(fp)
  80ed8c:	10800817 	ldw	r2,32(r2)
  80ed90:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80ed94:	e0bffe17 	ldw	r2,-8(fp)
  80ed98:	e0ffff17 	ldw	r3,-4(fp)
  80ed9c:	d8000015 	stw	zero,0(sp)
  80eda0:	e1fffd17 	ldw	r7,-12(fp)
  80eda4:	01802074 	movhi	r6,129
  80eda8:	31bb8404 	addi	r6,r6,-4592
  80edac:	180b883a 	mov	r5,r3
  80edb0:	1009883a 	mov	r4,r2
  80edb4:	08113540 	call	811354 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80edb8:	e0bffd17 	ldw	r2,-12(fp)
  80edbc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80edc0:	e0bffd17 	ldw	r2,-12(fp)
  80edc4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80edc8:	d0e75f17 	ldw	r3,-25220(gp)
  80edcc:	e1fffd17 	ldw	r7,-12(fp)
  80edd0:	01802074 	movhi	r6,129
  80edd4:	31bc0704 	addi	r6,r6,-4068
  80edd8:	180b883a 	mov	r5,r3
  80eddc:	1009883a 	mov	r4,r2
  80ede0:	080db000 	call	80db00 <alt_alarm_start>
  80ede4:	1000040e 	bge	r2,zero,80edf8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80ede8:	e0fffd17 	ldw	r3,-12(fp)
  80edec:	00a00034 	movhi	r2,32768
  80edf0:	10bfffc4 	addi	r2,r2,-1
  80edf4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80edf8:	0001883a 	nop
  80edfc:	e037883a 	mov	sp,fp
  80ee00:	dfc00117 	ldw	ra,4(sp)
  80ee04:	df000017 	ldw	fp,0(sp)
  80ee08:	dec00204 	addi	sp,sp,8
  80ee0c:	f800283a 	ret

0080ee10 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80ee10:	defff804 	addi	sp,sp,-32
  80ee14:	df000715 	stw	fp,28(sp)
  80ee18:	df000704 	addi	fp,sp,28
  80ee1c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80ee20:	e0bfff17 	ldw	r2,-4(fp)
  80ee24:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80ee28:	e0bffb17 	ldw	r2,-20(fp)
  80ee2c:	10800017 	ldw	r2,0(r2)
  80ee30:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ee34:	e0bffc17 	ldw	r2,-16(fp)
  80ee38:	10800104 	addi	r2,r2,4
  80ee3c:	10800037 	ldwio	r2,0(r2)
  80ee40:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80ee44:	e0bffd17 	ldw	r2,-12(fp)
  80ee48:	1080c00c 	andi	r2,r2,768
  80ee4c:	10006d26 	beq	r2,zero,80f004 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80ee50:	e0bffd17 	ldw	r2,-12(fp)
  80ee54:	1080400c 	andi	r2,r2,256
  80ee58:	10003526 	beq	r2,zero,80ef30 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80ee5c:	00800074 	movhi	r2,1
  80ee60:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ee64:	e0bffb17 	ldw	r2,-20(fp)
  80ee68:	10800a17 	ldw	r2,40(r2)
  80ee6c:	10800044 	addi	r2,r2,1
  80ee70:	1081ffcc 	andi	r2,r2,2047
  80ee74:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80ee78:	e0bffb17 	ldw	r2,-20(fp)
  80ee7c:	10c00b17 	ldw	r3,44(r2)
  80ee80:	e0bffe17 	ldw	r2,-8(fp)
  80ee84:	18801526 	beq	r3,r2,80eedc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80ee88:	e0bffc17 	ldw	r2,-16(fp)
  80ee8c:	10800037 	ldwio	r2,0(r2)
  80ee90:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80ee94:	e0bff917 	ldw	r2,-28(fp)
  80ee98:	10a0000c 	andi	r2,r2,32768
  80ee9c:	10001126 	beq	r2,zero,80eee4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80eea0:	e0bffb17 	ldw	r2,-20(fp)
  80eea4:	10800a17 	ldw	r2,40(r2)
  80eea8:	e0fff917 	ldw	r3,-28(fp)
  80eeac:	1809883a 	mov	r4,r3
  80eeb0:	e0fffb17 	ldw	r3,-20(fp)
  80eeb4:	1885883a 	add	r2,r3,r2
  80eeb8:	10800e04 	addi	r2,r2,56
  80eebc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80eec0:	e0bffb17 	ldw	r2,-20(fp)
  80eec4:	10800a17 	ldw	r2,40(r2)
  80eec8:	10800044 	addi	r2,r2,1
  80eecc:	10c1ffcc 	andi	r3,r2,2047
  80eed0:	e0bffb17 	ldw	r2,-20(fp)
  80eed4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80eed8:	003fe206 	br	80ee64 <__alt_mem_onchip_mem+0xff806e64>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80eedc:	0001883a 	nop
  80eee0:	00000106 	br	80eee8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80eee4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80eee8:	e0bff917 	ldw	r2,-28(fp)
  80eeec:	10bfffec 	andhi	r2,r2,65535
  80eef0:	10000f26 	beq	r2,zero,80ef30 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80eef4:	e0bffb17 	ldw	r2,-20(fp)
  80eef8:	10c00817 	ldw	r3,32(r2)
  80eefc:	00bfff84 	movi	r2,-2
  80ef00:	1886703a 	and	r3,r3,r2
  80ef04:	e0bffb17 	ldw	r2,-20(fp)
  80ef08:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80ef0c:	e0bffc17 	ldw	r2,-16(fp)
  80ef10:	10800104 	addi	r2,r2,4
  80ef14:	1007883a 	mov	r3,r2
  80ef18:	e0bffb17 	ldw	r2,-20(fp)
  80ef1c:	10800817 	ldw	r2,32(r2)
  80ef20:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ef24:	e0bffc17 	ldw	r2,-16(fp)
  80ef28:	10800104 	addi	r2,r2,4
  80ef2c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80ef30:	e0bffd17 	ldw	r2,-12(fp)
  80ef34:	1080800c 	andi	r2,r2,512
  80ef38:	103fbe26 	beq	r2,zero,80ee34 <__alt_mem_onchip_mem+0xff806e34>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80ef3c:	e0bffd17 	ldw	r2,-12(fp)
  80ef40:	1004d43a 	srli	r2,r2,16
  80ef44:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80ef48:	00001406 	br	80ef9c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80ef4c:	e0bffc17 	ldw	r2,-16(fp)
  80ef50:	e0fffb17 	ldw	r3,-20(fp)
  80ef54:	18c00d17 	ldw	r3,52(r3)
  80ef58:	e13ffb17 	ldw	r4,-20(fp)
  80ef5c:	20c7883a 	add	r3,r4,r3
  80ef60:	18c20e04 	addi	r3,r3,2104
  80ef64:	18c00003 	ldbu	r3,0(r3)
  80ef68:	18c03fcc 	andi	r3,r3,255
  80ef6c:	18c0201c 	xori	r3,r3,128
  80ef70:	18ffe004 	addi	r3,r3,-128
  80ef74:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ef78:	e0bffb17 	ldw	r2,-20(fp)
  80ef7c:	10800d17 	ldw	r2,52(r2)
  80ef80:	10800044 	addi	r2,r2,1
  80ef84:	10c1ffcc 	andi	r3,r2,2047
  80ef88:	e0bffb17 	ldw	r2,-20(fp)
  80ef8c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80ef90:	e0bffa17 	ldw	r2,-24(fp)
  80ef94:	10bfffc4 	addi	r2,r2,-1
  80ef98:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80ef9c:	e0bffa17 	ldw	r2,-24(fp)
  80efa0:	10000526 	beq	r2,zero,80efb8 <altera_avalon_jtag_uart_irq+0x1a8>
  80efa4:	e0bffb17 	ldw	r2,-20(fp)
  80efa8:	10c00d17 	ldw	r3,52(r2)
  80efac:	e0bffb17 	ldw	r2,-20(fp)
  80efb0:	10800c17 	ldw	r2,48(r2)
  80efb4:	18bfe51e 	bne	r3,r2,80ef4c <__alt_mem_onchip_mem+0xff806f4c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80efb8:	e0bffa17 	ldw	r2,-24(fp)
  80efbc:	103f9d26 	beq	r2,zero,80ee34 <__alt_mem_onchip_mem+0xff806e34>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80efc0:	e0bffb17 	ldw	r2,-20(fp)
  80efc4:	10c00817 	ldw	r3,32(r2)
  80efc8:	00bfff44 	movi	r2,-3
  80efcc:	1886703a 	and	r3,r3,r2
  80efd0:	e0bffb17 	ldw	r2,-20(fp)
  80efd4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80efd8:	e0bffb17 	ldw	r2,-20(fp)
  80efdc:	10800017 	ldw	r2,0(r2)
  80efe0:	10800104 	addi	r2,r2,4
  80efe4:	1007883a 	mov	r3,r2
  80efe8:	e0bffb17 	ldw	r2,-20(fp)
  80efec:	10800817 	ldw	r2,32(r2)
  80eff0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80eff4:	e0bffc17 	ldw	r2,-16(fp)
  80eff8:	10800104 	addi	r2,r2,4
  80effc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80f000:	003f8c06 	br	80ee34 <__alt_mem_onchip_mem+0xff806e34>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80f004:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80f008:	0001883a 	nop
  80f00c:	e037883a 	mov	sp,fp
  80f010:	df000017 	ldw	fp,0(sp)
  80f014:	dec00104 	addi	sp,sp,4
  80f018:	f800283a 	ret

0080f01c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80f01c:	defff804 	addi	sp,sp,-32
  80f020:	df000715 	stw	fp,28(sp)
  80f024:	df000704 	addi	fp,sp,28
  80f028:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80f02c:	e0bffb17 	ldw	r2,-20(fp)
  80f030:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80f034:	e0bff917 	ldw	r2,-28(fp)
  80f038:	10800017 	ldw	r2,0(r2)
  80f03c:	10800104 	addi	r2,r2,4
  80f040:	10800037 	ldwio	r2,0(r2)
  80f044:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80f048:	e0bffa17 	ldw	r2,-24(fp)
  80f04c:	1081000c 	andi	r2,r2,1024
  80f050:	10000b26 	beq	r2,zero,80f080 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80f054:	e0bff917 	ldw	r2,-28(fp)
  80f058:	10800017 	ldw	r2,0(r2)
  80f05c:	10800104 	addi	r2,r2,4
  80f060:	1007883a 	mov	r3,r2
  80f064:	e0bff917 	ldw	r2,-28(fp)
  80f068:	10800817 	ldw	r2,32(r2)
  80f06c:	10810014 	ori	r2,r2,1024
  80f070:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80f074:	e0bff917 	ldw	r2,-28(fp)
  80f078:	10000915 	stw	zero,36(r2)
  80f07c:	00000a06 	br	80f0a8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80f080:	e0bff917 	ldw	r2,-28(fp)
  80f084:	10c00917 	ldw	r3,36(r2)
  80f088:	00a00034 	movhi	r2,32768
  80f08c:	10bfff04 	addi	r2,r2,-4
  80f090:	10c00536 	bltu	r2,r3,80f0a8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80f094:	e0bff917 	ldw	r2,-28(fp)
  80f098:	10800917 	ldw	r2,36(r2)
  80f09c:	10c00044 	addi	r3,r2,1
  80f0a0:	e0bff917 	ldw	r2,-28(fp)
  80f0a4:	10c00915 	stw	r3,36(r2)
  80f0a8:	d0a75f17 	ldw	r2,-25220(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80f0ac:	e037883a 	mov	sp,fp
  80f0b0:	df000017 	ldw	fp,0(sp)
  80f0b4:	dec00104 	addi	sp,sp,4
  80f0b8:	f800283a 	ret

0080f0bc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80f0bc:	defffd04 	addi	sp,sp,-12
  80f0c0:	df000215 	stw	fp,8(sp)
  80f0c4:	df000204 	addi	fp,sp,8
  80f0c8:	e13ffe15 	stw	r4,-8(fp)
  80f0cc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80f0d0:	00000506 	br	80f0e8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80f0d4:	e0bfff17 	ldw	r2,-4(fp)
  80f0d8:	1090000c 	andi	r2,r2,16384
  80f0dc:	10000226 	beq	r2,zero,80f0e8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80f0e0:	00bffd44 	movi	r2,-11
  80f0e4:	00000b06 	br	80f114 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80f0e8:	e0bffe17 	ldw	r2,-8(fp)
  80f0ec:	10c00d17 	ldw	r3,52(r2)
  80f0f0:	e0bffe17 	ldw	r2,-8(fp)
  80f0f4:	10800c17 	ldw	r2,48(r2)
  80f0f8:	18800526 	beq	r3,r2,80f110 <altera_avalon_jtag_uart_close+0x54>
  80f0fc:	e0bffe17 	ldw	r2,-8(fp)
  80f100:	10c00917 	ldw	r3,36(r2)
  80f104:	e0bffe17 	ldw	r2,-8(fp)
  80f108:	10800117 	ldw	r2,4(r2)
  80f10c:	18bff136 	bltu	r3,r2,80f0d4 <__alt_mem_onchip_mem+0xff8070d4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80f110:	0005883a 	mov	r2,zero
}
  80f114:	e037883a 	mov	sp,fp
  80f118:	df000017 	ldw	fp,0(sp)
  80f11c:	dec00104 	addi	sp,sp,4
  80f120:	f800283a 	ret

0080f124 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80f124:	defffa04 	addi	sp,sp,-24
  80f128:	df000515 	stw	fp,20(sp)
  80f12c:	df000504 	addi	fp,sp,20
  80f130:	e13ffd15 	stw	r4,-12(fp)
  80f134:	e17ffe15 	stw	r5,-8(fp)
  80f138:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80f13c:	00bff9c4 	movi	r2,-25
  80f140:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80f144:	e0bffe17 	ldw	r2,-8(fp)
  80f148:	10da8060 	cmpeqi	r3,r2,27137
  80f14c:	1800031e 	bne	r3,zero,80f15c <altera_avalon_jtag_uart_ioctl+0x38>
  80f150:	109a80a0 	cmpeqi	r2,r2,27138
  80f154:	1000181e 	bne	r2,zero,80f1b8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80f158:	00002906 	br	80f200 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80f15c:	e0bffd17 	ldw	r2,-12(fp)
  80f160:	10c00117 	ldw	r3,4(r2)
  80f164:	00a00034 	movhi	r2,32768
  80f168:	10bfffc4 	addi	r2,r2,-1
  80f16c:	18802126 	beq	r3,r2,80f1f4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80f170:	e0bfff17 	ldw	r2,-4(fp)
  80f174:	10800017 	ldw	r2,0(r2)
  80f178:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80f17c:	e0bffc17 	ldw	r2,-16(fp)
  80f180:	10800090 	cmplti	r2,r2,2
  80f184:	1000061e 	bne	r2,zero,80f1a0 <altera_avalon_jtag_uart_ioctl+0x7c>
  80f188:	e0fffc17 	ldw	r3,-16(fp)
  80f18c:	00a00034 	movhi	r2,32768
  80f190:	10bfffc4 	addi	r2,r2,-1
  80f194:	18800226 	beq	r3,r2,80f1a0 <altera_avalon_jtag_uart_ioctl+0x7c>
  80f198:	e0bffc17 	ldw	r2,-16(fp)
  80f19c:	00000206 	br	80f1a8 <altera_avalon_jtag_uart_ioctl+0x84>
  80f1a0:	00a00034 	movhi	r2,32768
  80f1a4:	10bfff84 	addi	r2,r2,-2
  80f1a8:	e0fffd17 	ldw	r3,-12(fp)
  80f1ac:	18800115 	stw	r2,4(r3)
      rc = 0;
  80f1b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80f1b4:	00000f06 	br	80f1f4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80f1b8:	e0bffd17 	ldw	r2,-12(fp)
  80f1bc:	10c00117 	ldw	r3,4(r2)
  80f1c0:	00a00034 	movhi	r2,32768
  80f1c4:	10bfffc4 	addi	r2,r2,-1
  80f1c8:	18800c26 	beq	r3,r2,80f1fc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80f1cc:	e0bffd17 	ldw	r2,-12(fp)
  80f1d0:	10c00917 	ldw	r3,36(r2)
  80f1d4:	e0bffd17 	ldw	r2,-12(fp)
  80f1d8:	10800117 	ldw	r2,4(r2)
  80f1dc:	1885803a 	cmpltu	r2,r3,r2
  80f1e0:	10c03fcc 	andi	r3,r2,255
  80f1e4:	e0bfff17 	ldw	r2,-4(fp)
  80f1e8:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80f1ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80f1f0:	00000206 	br	80f1fc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80f1f4:	0001883a 	nop
  80f1f8:	00000106 	br	80f200 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80f1fc:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80f200:	e0bffb17 	ldw	r2,-20(fp)
}
  80f204:	e037883a 	mov	sp,fp
  80f208:	df000017 	ldw	fp,0(sp)
  80f20c:	dec00104 	addi	sp,sp,4
  80f210:	f800283a 	ret

0080f214 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80f214:	defff304 	addi	sp,sp,-52
  80f218:	dfc00c15 	stw	ra,48(sp)
  80f21c:	df000b15 	stw	fp,44(sp)
  80f220:	df000b04 	addi	fp,sp,44
  80f224:	e13ffc15 	stw	r4,-16(fp)
  80f228:	e17ffd15 	stw	r5,-12(fp)
  80f22c:	e1bffe15 	stw	r6,-8(fp)
  80f230:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80f234:	e0bffd17 	ldw	r2,-12(fp)
  80f238:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80f23c:	00004706 	br	80f35c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80f240:	e0bffc17 	ldw	r2,-16(fp)
  80f244:	10800a17 	ldw	r2,40(r2)
  80f248:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80f24c:	e0bffc17 	ldw	r2,-16(fp)
  80f250:	10800b17 	ldw	r2,44(r2)
  80f254:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80f258:	e0fff717 	ldw	r3,-36(fp)
  80f25c:	e0bff817 	ldw	r2,-32(fp)
  80f260:	18800536 	bltu	r3,r2,80f278 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80f264:	e0fff717 	ldw	r3,-36(fp)
  80f268:	e0bff817 	ldw	r2,-32(fp)
  80f26c:	1885c83a 	sub	r2,r3,r2
  80f270:	e0bff615 	stw	r2,-40(fp)
  80f274:	00000406 	br	80f288 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80f278:	00c20004 	movi	r3,2048
  80f27c:	e0bff817 	ldw	r2,-32(fp)
  80f280:	1885c83a 	sub	r2,r3,r2
  80f284:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80f288:	e0bff617 	ldw	r2,-40(fp)
  80f28c:	10001e26 	beq	r2,zero,80f308 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80f290:	e0fffe17 	ldw	r3,-8(fp)
  80f294:	e0bff617 	ldw	r2,-40(fp)
  80f298:	1880022e 	bgeu	r3,r2,80f2a4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80f29c:	e0bffe17 	ldw	r2,-8(fp)
  80f2a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80f2a4:	e0bffc17 	ldw	r2,-16(fp)
  80f2a8:	10c00e04 	addi	r3,r2,56
  80f2ac:	e0bff817 	ldw	r2,-32(fp)
  80f2b0:	1885883a 	add	r2,r3,r2
  80f2b4:	e1bff617 	ldw	r6,-40(fp)
  80f2b8:	100b883a 	mov	r5,r2
  80f2bc:	e13ff517 	ldw	r4,-44(fp)
  80f2c0:	08071280 	call	807128 <memcpy>
      ptr   += n;
  80f2c4:	e0fff517 	ldw	r3,-44(fp)
  80f2c8:	e0bff617 	ldw	r2,-40(fp)
  80f2cc:	1885883a 	add	r2,r3,r2
  80f2d0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80f2d4:	e0fffe17 	ldw	r3,-8(fp)
  80f2d8:	e0bff617 	ldw	r2,-40(fp)
  80f2dc:	1885c83a 	sub	r2,r3,r2
  80f2e0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f2e4:	e0fff817 	ldw	r3,-32(fp)
  80f2e8:	e0bff617 	ldw	r2,-40(fp)
  80f2ec:	1885883a 	add	r2,r3,r2
  80f2f0:	10c1ffcc 	andi	r3,r2,2047
  80f2f4:	e0bffc17 	ldw	r2,-16(fp)
  80f2f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80f2fc:	e0bffe17 	ldw	r2,-8(fp)
  80f300:	00bfcf16 	blt	zero,r2,80f240 <__alt_mem_onchip_mem+0xff807240>
  80f304:	00000106 	br	80f30c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80f308:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80f30c:	e0fff517 	ldw	r3,-44(fp)
  80f310:	e0bffd17 	ldw	r2,-12(fp)
  80f314:	1880141e 	bne	r3,r2,80f368 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80f318:	e0bfff17 	ldw	r2,-4(fp)
  80f31c:	1090000c 	andi	r2,r2,16384
  80f320:	1000131e 	bne	r2,zero,80f370 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80f324:	0001883a 	nop
  80f328:	e0bffc17 	ldw	r2,-16(fp)
  80f32c:	10c00a17 	ldw	r3,40(r2)
  80f330:	e0bff717 	ldw	r2,-36(fp)
  80f334:	1880051e 	bne	r3,r2,80f34c <altera_avalon_jtag_uart_read+0x138>
  80f338:	e0bffc17 	ldw	r2,-16(fp)
  80f33c:	10c00917 	ldw	r3,36(r2)
  80f340:	e0bffc17 	ldw	r2,-16(fp)
  80f344:	10800117 	ldw	r2,4(r2)
  80f348:	18bff736 	bltu	r3,r2,80f328 <__alt_mem_onchip_mem+0xff807328>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80f34c:	e0bffc17 	ldw	r2,-16(fp)
  80f350:	10c00a17 	ldw	r3,40(r2)
  80f354:	e0bff717 	ldw	r2,-36(fp)
  80f358:	18800726 	beq	r3,r2,80f378 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80f35c:	e0bffe17 	ldw	r2,-8(fp)
  80f360:	00bfb716 	blt	zero,r2,80f240 <__alt_mem_onchip_mem+0xff807240>
  80f364:	00000506 	br	80f37c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80f368:	0001883a 	nop
  80f36c:	00000306 	br	80f37c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80f370:	0001883a 	nop
  80f374:	00000106 	br	80f37c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80f378:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80f37c:	e0fff517 	ldw	r3,-44(fp)
  80f380:	e0bffd17 	ldw	r2,-12(fp)
  80f384:	18801826 	beq	r3,r2,80f3e8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f388:	0005303a 	rdctl	r2,status
  80f38c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f390:	e0fffb17 	ldw	r3,-20(fp)
  80f394:	00bfff84 	movi	r2,-2
  80f398:	1884703a 	and	r2,r3,r2
  80f39c:	1001703a 	wrctl	status,r2
  
  return context;
  80f3a0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80f3a4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f3a8:	e0bffc17 	ldw	r2,-16(fp)
  80f3ac:	10800817 	ldw	r2,32(r2)
  80f3b0:	10c00054 	ori	r3,r2,1
  80f3b4:	e0bffc17 	ldw	r2,-16(fp)
  80f3b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f3bc:	e0bffc17 	ldw	r2,-16(fp)
  80f3c0:	10800017 	ldw	r2,0(r2)
  80f3c4:	10800104 	addi	r2,r2,4
  80f3c8:	1007883a 	mov	r3,r2
  80f3cc:	e0bffc17 	ldw	r2,-16(fp)
  80f3d0:	10800817 	ldw	r2,32(r2)
  80f3d4:	18800035 	stwio	r2,0(r3)
  80f3d8:	e0bffa17 	ldw	r2,-24(fp)
  80f3dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f3e0:	e0bff917 	ldw	r2,-28(fp)
  80f3e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80f3e8:	e0fff517 	ldw	r3,-44(fp)
  80f3ec:	e0bffd17 	ldw	r2,-12(fp)
  80f3f0:	18800426 	beq	r3,r2,80f404 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80f3f4:	e0fff517 	ldw	r3,-44(fp)
  80f3f8:	e0bffd17 	ldw	r2,-12(fp)
  80f3fc:	1885c83a 	sub	r2,r3,r2
  80f400:	00000606 	br	80f41c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80f404:	e0bfff17 	ldw	r2,-4(fp)
  80f408:	1090000c 	andi	r2,r2,16384
  80f40c:	10000226 	beq	r2,zero,80f418 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80f410:	00bffd44 	movi	r2,-11
  80f414:	00000106 	br	80f41c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80f418:	00bffec4 	movi	r2,-5
}
  80f41c:	e037883a 	mov	sp,fp
  80f420:	dfc00117 	ldw	ra,4(sp)
  80f424:	df000017 	ldw	fp,0(sp)
  80f428:	dec00204 	addi	sp,sp,8
  80f42c:	f800283a 	ret

0080f430 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80f430:	defff304 	addi	sp,sp,-52
  80f434:	dfc00c15 	stw	ra,48(sp)
  80f438:	df000b15 	stw	fp,44(sp)
  80f43c:	df000b04 	addi	fp,sp,44
  80f440:	e13ffc15 	stw	r4,-16(fp)
  80f444:	e17ffd15 	stw	r5,-12(fp)
  80f448:	e1bffe15 	stw	r6,-8(fp)
  80f44c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80f450:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80f454:	e0bffd17 	ldw	r2,-12(fp)
  80f458:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f45c:	00003706 	br	80f53c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80f460:	e0bffc17 	ldw	r2,-16(fp)
  80f464:	10800c17 	ldw	r2,48(r2)
  80f468:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80f46c:	e0bffc17 	ldw	r2,-16(fp)
  80f470:	10800d17 	ldw	r2,52(r2)
  80f474:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80f478:	e0fff917 	ldw	r3,-28(fp)
  80f47c:	e0bff517 	ldw	r2,-44(fp)
  80f480:	1880062e 	bgeu	r3,r2,80f49c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80f484:	e0fff517 	ldw	r3,-44(fp)
  80f488:	e0bff917 	ldw	r2,-28(fp)
  80f48c:	1885c83a 	sub	r2,r3,r2
  80f490:	10bfffc4 	addi	r2,r2,-1
  80f494:	e0bff615 	stw	r2,-40(fp)
  80f498:	00000b06 	br	80f4c8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80f49c:	e0bff517 	ldw	r2,-44(fp)
  80f4a0:	10000526 	beq	r2,zero,80f4b8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80f4a4:	00c20004 	movi	r3,2048
  80f4a8:	e0bff917 	ldw	r2,-28(fp)
  80f4ac:	1885c83a 	sub	r2,r3,r2
  80f4b0:	e0bff615 	stw	r2,-40(fp)
  80f4b4:	00000406 	br	80f4c8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80f4b8:	00c1ffc4 	movi	r3,2047
  80f4bc:	e0bff917 	ldw	r2,-28(fp)
  80f4c0:	1885c83a 	sub	r2,r3,r2
  80f4c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80f4c8:	e0bff617 	ldw	r2,-40(fp)
  80f4cc:	10001e26 	beq	r2,zero,80f548 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80f4d0:	e0fffe17 	ldw	r3,-8(fp)
  80f4d4:	e0bff617 	ldw	r2,-40(fp)
  80f4d8:	1880022e 	bgeu	r3,r2,80f4e4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80f4dc:	e0bffe17 	ldw	r2,-8(fp)
  80f4e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80f4e4:	e0bffc17 	ldw	r2,-16(fp)
  80f4e8:	10c20e04 	addi	r3,r2,2104
  80f4ec:	e0bff917 	ldw	r2,-28(fp)
  80f4f0:	1885883a 	add	r2,r3,r2
  80f4f4:	e1bff617 	ldw	r6,-40(fp)
  80f4f8:	e17ffd17 	ldw	r5,-12(fp)
  80f4fc:	1009883a 	mov	r4,r2
  80f500:	08071280 	call	807128 <memcpy>
      ptr   += n;
  80f504:	e0fffd17 	ldw	r3,-12(fp)
  80f508:	e0bff617 	ldw	r2,-40(fp)
  80f50c:	1885883a 	add	r2,r3,r2
  80f510:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80f514:	e0fffe17 	ldw	r3,-8(fp)
  80f518:	e0bff617 	ldw	r2,-40(fp)
  80f51c:	1885c83a 	sub	r2,r3,r2
  80f520:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f524:	e0fff917 	ldw	r3,-28(fp)
  80f528:	e0bff617 	ldw	r2,-40(fp)
  80f52c:	1885883a 	add	r2,r3,r2
  80f530:	10c1ffcc 	andi	r3,r2,2047
  80f534:	e0bffc17 	ldw	r2,-16(fp)
  80f538:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f53c:	e0bffe17 	ldw	r2,-8(fp)
  80f540:	00bfc716 	blt	zero,r2,80f460 <__alt_mem_onchip_mem+0xff807460>
  80f544:	00000106 	br	80f54c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80f548:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f54c:	0005303a 	rdctl	r2,status
  80f550:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f554:	e0fffb17 	ldw	r3,-20(fp)
  80f558:	00bfff84 	movi	r2,-2
  80f55c:	1884703a 	and	r2,r3,r2
  80f560:	1001703a 	wrctl	status,r2
  
  return context;
  80f564:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80f568:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80f56c:	e0bffc17 	ldw	r2,-16(fp)
  80f570:	10800817 	ldw	r2,32(r2)
  80f574:	10c00094 	ori	r3,r2,2
  80f578:	e0bffc17 	ldw	r2,-16(fp)
  80f57c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f580:	e0bffc17 	ldw	r2,-16(fp)
  80f584:	10800017 	ldw	r2,0(r2)
  80f588:	10800104 	addi	r2,r2,4
  80f58c:	1007883a 	mov	r3,r2
  80f590:	e0bffc17 	ldw	r2,-16(fp)
  80f594:	10800817 	ldw	r2,32(r2)
  80f598:	18800035 	stwio	r2,0(r3)
  80f59c:	e0bffa17 	ldw	r2,-24(fp)
  80f5a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f5a4:	e0bff817 	ldw	r2,-32(fp)
  80f5a8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80f5ac:	e0bffe17 	ldw	r2,-8(fp)
  80f5b0:	0080100e 	bge	zero,r2,80f5f4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80f5b4:	e0bfff17 	ldw	r2,-4(fp)
  80f5b8:	1090000c 	andi	r2,r2,16384
  80f5bc:	1000101e 	bne	r2,zero,80f600 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80f5c0:	0001883a 	nop
  80f5c4:	e0bffc17 	ldw	r2,-16(fp)
  80f5c8:	10c00d17 	ldw	r3,52(r2)
  80f5cc:	e0bff517 	ldw	r2,-44(fp)
  80f5d0:	1880051e 	bne	r3,r2,80f5e8 <altera_avalon_jtag_uart_write+0x1b8>
  80f5d4:	e0bffc17 	ldw	r2,-16(fp)
  80f5d8:	10c00917 	ldw	r3,36(r2)
  80f5dc:	e0bffc17 	ldw	r2,-16(fp)
  80f5e0:	10800117 	ldw	r2,4(r2)
  80f5e4:	18bff736 	bltu	r3,r2,80f5c4 <__alt_mem_onchip_mem+0xff8075c4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80f5e8:	e0bffc17 	ldw	r2,-16(fp)
  80f5ec:	10800917 	ldw	r2,36(r2)
  80f5f0:	1000051e 	bne	r2,zero,80f608 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80f5f4:	e0bffe17 	ldw	r2,-8(fp)
  80f5f8:	00bfd016 	blt	zero,r2,80f53c <__alt_mem_onchip_mem+0xff80753c>
  80f5fc:	00000306 	br	80f60c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80f600:	0001883a 	nop
  80f604:	00000106 	br	80f60c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80f608:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80f60c:	e0fffd17 	ldw	r3,-12(fp)
  80f610:	e0bff717 	ldw	r2,-36(fp)
  80f614:	18800426 	beq	r3,r2,80f628 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80f618:	e0fffd17 	ldw	r3,-12(fp)
  80f61c:	e0bff717 	ldw	r2,-36(fp)
  80f620:	1885c83a 	sub	r2,r3,r2
  80f624:	00000606 	br	80f640 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80f628:	e0bfff17 	ldw	r2,-4(fp)
  80f62c:	1090000c 	andi	r2,r2,16384
  80f630:	10000226 	beq	r2,zero,80f63c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80f634:	00bffd44 	movi	r2,-11
  80f638:	00000106 	br	80f640 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80f63c:	00bffec4 	movi	r2,-5
}
  80f640:	e037883a 	mov	sp,fp
  80f644:	dfc00117 	ldw	ra,4(sp)
  80f648:	df000017 	ldw	fp,0(sp)
  80f64c:	dec00204 	addi	sp,sp,8
  80f650:	f800283a 	ret

0080f654 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80f654:	defffa04 	addi	sp,sp,-24
  80f658:	dfc00515 	stw	ra,20(sp)
  80f65c:	df000415 	stw	fp,16(sp)
  80f660:	df000404 	addi	fp,sp,16
  80f664:	e13ffe15 	stw	r4,-8(fp)
  80f668:	2805883a 	mov	r2,r5
  80f66c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80f670:	e0bffe17 	ldw	r2,-8(fp)
  80f674:	10800017 	ldw	r2,0(r2)
  80f678:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80f67c:	008003f4 	movhi	r2,15
  80f680:	10909004 	addi	r2,r2,16960
  80f684:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80f688:	e0bffe17 	ldw	r2,-8(fp)
  80f68c:	10800803 	ldbu	r2,32(r2)
  80f690:	10803fcc 	andi	r2,r2,255
  80f694:	1080201c 	xori	r2,r2,128
  80f698:	10bfe004 	addi	r2,r2,-128
  80f69c:	1000151e 	bne	r2,zero,80f6f4 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f6a0:	00000906 	br	80f6c8 <lcd_write_command+0x74>
    if (--i == 0)
  80f6a4:	e0bffc17 	ldw	r2,-16(fp)
  80f6a8:	10bfffc4 	addi	r2,r2,-1
  80f6ac:	e0bffc15 	stw	r2,-16(fp)
  80f6b0:	e0bffc17 	ldw	r2,-16(fp)
  80f6b4:	1000041e 	bne	r2,zero,80f6c8 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  80f6b8:	e0bffe17 	ldw	r2,-8(fp)
  80f6bc:	00c00044 	movi	r3,1
  80f6c0:	10c00805 	stb	r3,32(r2)
      return;
  80f6c4:	00000c06 	br	80f6f8 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f6c8:	e0bffd17 	ldw	r2,-12(fp)
  80f6cc:	10800104 	addi	r2,r2,4
  80f6d0:	10800037 	ldwio	r2,0(r2)
  80f6d4:	1080200c 	andi	r2,r2,128
  80f6d8:	103ff21e 	bne	r2,zero,80f6a4 <__alt_mem_onchip_mem+0xff8076a4>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80f6dc:	01001904 	movi	r4,100
  80f6e0:	08117340 	call	811734 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80f6e4:	e0bffd17 	ldw	r2,-12(fp)
  80f6e8:	e0ffff03 	ldbu	r3,-4(fp)
  80f6ec:	10c00035 	stwio	r3,0(r2)
  80f6f0:	00000106 	br	80f6f8 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80f6f4:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  80f6f8:	e037883a 	mov	sp,fp
  80f6fc:	dfc00117 	ldw	ra,4(sp)
  80f700:	df000017 	ldw	fp,0(sp)
  80f704:	dec00204 	addi	sp,sp,8
  80f708:	f800283a 	ret

0080f70c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80f70c:	defffa04 	addi	sp,sp,-24
  80f710:	dfc00515 	stw	ra,20(sp)
  80f714:	df000415 	stw	fp,16(sp)
  80f718:	df000404 	addi	fp,sp,16
  80f71c:	e13ffe15 	stw	r4,-8(fp)
  80f720:	2805883a 	mov	r2,r5
  80f724:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80f728:	e0bffe17 	ldw	r2,-8(fp)
  80f72c:	10800017 	ldw	r2,0(r2)
  80f730:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80f734:	008003f4 	movhi	r2,15
  80f738:	10909004 	addi	r2,r2,16960
  80f73c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80f740:	e0bffe17 	ldw	r2,-8(fp)
  80f744:	10800803 	ldbu	r2,32(r2)
  80f748:	10803fcc 	andi	r2,r2,255
  80f74c:	1080201c 	xori	r2,r2,128
  80f750:	10bfe004 	addi	r2,r2,-128
  80f754:	10001d1e 	bne	r2,zero,80f7cc <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f758:	00000906 	br	80f780 <lcd_write_data+0x74>
    if (--i == 0)
  80f75c:	e0bffc17 	ldw	r2,-16(fp)
  80f760:	10bfffc4 	addi	r2,r2,-1
  80f764:	e0bffc15 	stw	r2,-16(fp)
  80f768:	e0bffc17 	ldw	r2,-16(fp)
  80f76c:	1000041e 	bne	r2,zero,80f780 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  80f770:	e0bffe17 	ldw	r2,-8(fp)
  80f774:	00c00044 	movi	r3,1
  80f778:	10c00805 	stb	r3,32(r2)
      return;
  80f77c:	00001406 	br	80f7d0 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f780:	e0bffd17 	ldw	r2,-12(fp)
  80f784:	10800104 	addi	r2,r2,4
  80f788:	10800037 	ldwio	r2,0(r2)
  80f78c:	1080200c 	andi	r2,r2,128
  80f790:	103ff21e 	bne	r2,zero,80f75c <__alt_mem_onchip_mem+0xff80775c>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80f794:	01001904 	movi	r4,100
  80f798:	08117340 	call	811734 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80f79c:	e0bffd17 	ldw	r2,-12(fp)
  80f7a0:	10800204 	addi	r2,r2,8
  80f7a4:	1007883a 	mov	r3,r2
  80f7a8:	e0bfff03 	ldbu	r2,-4(fp)
  80f7ac:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80f7b0:	e0bffe17 	ldw	r2,-8(fp)
  80f7b4:	108008c3 	ldbu	r2,35(r2)
  80f7b8:	10800044 	addi	r2,r2,1
  80f7bc:	1007883a 	mov	r3,r2
  80f7c0:	e0bffe17 	ldw	r2,-8(fp)
  80f7c4:	10c008c5 	stb	r3,35(r2)
  80f7c8:	00000106 	br	80f7d0 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80f7cc:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  80f7d0:	e037883a 	mov	sp,fp
  80f7d4:	dfc00117 	ldw	ra,4(sp)
  80f7d8:	df000017 	ldw	fp,0(sp)
  80f7dc:	dec00204 	addi	sp,sp,8
  80f7e0:	f800283a 	ret

0080f7e4 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80f7e4:	defffc04 	addi	sp,sp,-16
  80f7e8:	dfc00315 	stw	ra,12(sp)
  80f7ec:	df000215 	stw	fp,8(sp)
  80f7f0:	df000204 	addi	fp,sp,8
  80f7f4:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80f7f8:	01400044 	movi	r5,1
  80f7fc:	e13fff17 	ldw	r4,-4(fp)
  80f800:	080f6540 	call	80f654 <lcd_write_command>

  sp->x = 0;
  80f804:	e0bfff17 	ldw	r2,-4(fp)
  80f808:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80f80c:	e0bfff17 	ldw	r2,-4(fp)
  80f810:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80f814:	e0bfff17 	ldw	r2,-4(fp)
  80f818:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f81c:	e03ffe15 	stw	zero,-8(fp)
  80f820:	00001b06 	br	80f890 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80f824:	e0bffe17 	ldw	r2,-8(fp)
  80f828:	108018e4 	muli	r2,r2,99
  80f82c:	10801004 	addi	r2,r2,64
  80f830:	e0ffff17 	ldw	r3,-4(fp)
  80f834:	1885883a 	add	r2,r3,r2
  80f838:	01801444 	movi	r6,81
  80f83c:	01400804 	movi	r5,32
  80f840:	1009883a 	mov	r4,r2
  80f844:	08019740 	call	801974 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80f848:	e0bffe17 	ldw	r2,-8(fp)
  80f84c:	108018e4 	muli	r2,r2,99
  80f850:	10800c04 	addi	r2,r2,48
  80f854:	e0ffff17 	ldw	r3,-4(fp)
  80f858:	1885883a 	add	r2,r3,r2
  80f85c:	01800404 	movi	r6,16
  80f860:	01400804 	movi	r5,32
  80f864:	1009883a 	mov	r4,r2
  80f868:	08019740 	call	801974 <memset>
    sp->line[y].width = 0;
  80f86c:	e0ffff17 	ldw	r3,-4(fp)
  80f870:	e0bffe17 	ldw	r2,-8(fp)
  80f874:	108018e4 	muli	r2,r2,99
  80f878:	1885883a 	add	r2,r3,r2
  80f87c:	10802444 	addi	r2,r2,145
  80f880:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f884:	e0bffe17 	ldw	r2,-8(fp)
  80f888:	10800044 	addi	r2,r2,1
  80f88c:	e0bffe15 	stw	r2,-8(fp)
  80f890:	e0bffe17 	ldw	r2,-8(fp)
  80f894:	10800090 	cmplti	r2,r2,2
  80f898:	103fe21e 	bne	r2,zero,80f824 <__alt_mem_onchip_mem+0xff807824>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80f89c:	0001883a 	nop
  80f8a0:	e037883a 	mov	sp,fp
  80f8a4:	dfc00117 	ldw	ra,4(sp)
  80f8a8:	df000017 	ldw	fp,0(sp)
  80f8ac:	dec00204 	addi	sp,sp,8
  80f8b0:	f800283a 	ret

0080f8b4 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80f8b4:	defff704 	addi	sp,sp,-36
  80f8b8:	dfc00815 	stw	ra,32(sp)
  80f8bc:	df000715 	stw	fp,28(sp)
  80f8c0:	df000704 	addi	fp,sp,28
  80f8c4:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80f8c8:	e0bfff17 	ldw	r2,-4(fp)
  80f8cc:	10800943 	ldbu	r2,37(r2)
  80f8d0:	10803fcc 	andi	r2,r2,255
  80f8d4:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f8d8:	e03ff915 	stw	zero,-28(fp)
  80f8dc:	00006706 	br	80fa7c <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80f8e0:	e0ffff17 	ldw	r3,-4(fp)
  80f8e4:	e0bff917 	ldw	r2,-28(fp)
  80f8e8:	108018e4 	muli	r2,r2,99
  80f8ec:	1885883a 	add	r2,r3,r2
  80f8f0:	10802444 	addi	r2,r2,145
  80f8f4:	10800003 	ldbu	r2,0(r2)
  80f8f8:	10803fcc 	andi	r2,r2,255
  80f8fc:	1080201c 	xori	r2,r2,128
  80f900:	10bfe004 	addi	r2,r2,-128
  80f904:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80f908:	e0ffff17 	ldw	r3,-4(fp)
  80f90c:	e0bff917 	ldw	r2,-28(fp)
  80f910:	108018e4 	muli	r2,r2,99
  80f914:	1885883a 	add	r2,r3,r2
  80f918:	10802484 	addi	r2,r2,146
  80f91c:	10800003 	ldbu	r2,0(r2)
  80f920:	10c03fcc 	andi	r3,r2,255
  80f924:	e0bffc17 	ldw	r2,-16(fp)
  80f928:	1885383a 	mul	r2,r3,r2
  80f92c:	1005d23a 	srai	r2,r2,8
  80f930:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80f934:	e0fffb17 	ldw	r3,-20(fp)
  80f938:	e0bffd17 	ldw	r2,-12(fp)
  80f93c:	18800116 	blt	r3,r2,80f944 <lcd_repaint_screen+0x90>
      offset = 0;
  80f940:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80f944:	e03ffa15 	stw	zero,-24(fp)
  80f948:	00004606 	br	80fa64 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80f94c:	e0fffa17 	ldw	r3,-24(fp)
  80f950:	e0bffb17 	ldw	r2,-20(fp)
  80f954:	1885883a 	add	r2,r3,r2
  80f958:	e17ffd17 	ldw	r5,-12(fp)
  80f95c:	1009883a 	mov	r4,r2
  80f960:	080b3680 	call	80b368 <__modsi3>
  80f964:	1009883a 	mov	r4,r2
  80f968:	e0ffff17 	ldw	r3,-4(fp)
  80f96c:	e0bff917 	ldw	r2,-28(fp)
  80f970:	108018e4 	muli	r2,r2,99
  80f974:	1885883a 	add	r2,r3,r2
  80f978:	1105883a 	add	r2,r2,r4
  80f97c:	10801004 	addi	r2,r2,64
  80f980:	10800003 	ldbu	r2,0(r2)
  80f984:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80f988:	e0ffff17 	ldw	r3,-4(fp)
  80f98c:	e0bff917 	ldw	r2,-28(fp)
  80f990:	108018e4 	muli	r2,r2,99
  80f994:	1887883a 	add	r3,r3,r2
  80f998:	e0bffa17 	ldw	r2,-24(fp)
  80f99c:	1885883a 	add	r2,r3,r2
  80f9a0:	10800c04 	addi	r2,r2,48
  80f9a4:	10800003 	ldbu	r2,0(r2)
  80f9a8:	10c03fcc 	andi	r3,r2,255
  80f9ac:	18c0201c 	xori	r3,r3,128
  80f9b0:	18ffe004 	addi	r3,r3,-128
  80f9b4:	e0bffe07 	ldb	r2,-8(fp)
  80f9b8:	18802726 	beq	r3,r2,80fa58 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80f9bc:	e0fff917 	ldw	r3,-28(fp)
  80f9c0:	d0a01004 	addi	r2,gp,-32704
  80f9c4:	1885883a 	add	r2,r3,r2
  80f9c8:	10800003 	ldbu	r2,0(r2)
  80f9cc:	1007883a 	mov	r3,r2
  80f9d0:	e0bffa17 	ldw	r2,-24(fp)
  80f9d4:	1885883a 	add	r2,r3,r2
  80f9d8:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80f9dc:	e0fffe43 	ldbu	r3,-7(fp)
  80f9e0:	e0bfff17 	ldw	r2,-4(fp)
  80f9e4:	108008c3 	ldbu	r2,35(r2)
  80f9e8:	10803fcc 	andi	r2,r2,255
  80f9ec:	1080201c 	xori	r2,r2,128
  80f9f0:	10bfe004 	addi	r2,r2,-128
  80f9f4:	18800a26 	beq	r3,r2,80fa20 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80f9f8:	e0fffe43 	ldbu	r3,-7(fp)
  80f9fc:	00bfe004 	movi	r2,-128
  80fa00:	1884b03a 	or	r2,r3,r2
  80fa04:	10803fcc 	andi	r2,r2,255
  80fa08:	100b883a 	mov	r5,r2
  80fa0c:	e13fff17 	ldw	r4,-4(fp)
  80fa10:	080f6540 	call	80f654 <lcd_write_command>
          sp->address = address;
  80fa14:	e0fffe43 	ldbu	r3,-7(fp)
  80fa18:	e0bfff17 	ldw	r2,-4(fp)
  80fa1c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80fa20:	e0bffe03 	ldbu	r2,-8(fp)
  80fa24:	10803fcc 	andi	r2,r2,255
  80fa28:	100b883a 	mov	r5,r2
  80fa2c:	e13fff17 	ldw	r4,-4(fp)
  80fa30:	080f70c0 	call	80f70c <lcd_write_data>
        sp->line[y].visible[x] = c;
  80fa34:	e0ffff17 	ldw	r3,-4(fp)
  80fa38:	e0bff917 	ldw	r2,-28(fp)
  80fa3c:	108018e4 	muli	r2,r2,99
  80fa40:	1887883a 	add	r3,r3,r2
  80fa44:	e0bffa17 	ldw	r2,-24(fp)
  80fa48:	1885883a 	add	r2,r3,r2
  80fa4c:	10800c04 	addi	r2,r2,48
  80fa50:	e0fffe03 	ldbu	r3,-8(fp)
  80fa54:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80fa58:	e0bffa17 	ldw	r2,-24(fp)
  80fa5c:	10800044 	addi	r2,r2,1
  80fa60:	e0bffa15 	stw	r2,-24(fp)
  80fa64:	e0bffa17 	ldw	r2,-24(fp)
  80fa68:	10800410 	cmplti	r2,r2,16
  80fa6c:	103fb71e 	bne	r2,zero,80f94c <__alt_mem_onchip_mem+0xff80794c>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fa70:	e0bff917 	ldw	r2,-28(fp)
  80fa74:	10800044 	addi	r2,r2,1
  80fa78:	e0bff915 	stw	r2,-28(fp)
  80fa7c:	e0bff917 	ldw	r2,-28(fp)
  80fa80:	10800090 	cmplti	r2,r2,2
  80fa84:	103f961e 	bne	r2,zero,80f8e0 <__alt_mem_onchip_mem+0xff8078e0>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80fa88:	0001883a 	nop
  80fa8c:	e037883a 	mov	sp,fp
  80fa90:	dfc00117 	ldw	ra,4(sp)
  80fa94:	df000017 	ldw	fp,0(sp)
  80fa98:	dec00204 	addi	sp,sp,8
  80fa9c:	f800283a 	ret

0080faa0 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80faa0:	defffc04 	addi	sp,sp,-16
  80faa4:	dfc00315 	stw	ra,12(sp)
  80faa8:	df000215 	stw	fp,8(sp)
  80faac:	df000204 	addi	fp,sp,8
  80fab0:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fab4:	e03ffe15 	stw	zero,-8(fp)
  80fab8:	00001d06 	br	80fb30 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80fabc:	e0bffe17 	ldw	r2,-8(fp)
  80fac0:	00800f16 	blt	zero,r2,80fb00 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80fac4:	e0bffe17 	ldw	r2,-8(fp)
  80fac8:	108018e4 	muli	r2,r2,99
  80facc:	10801004 	addi	r2,r2,64
  80fad0:	e0ffff17 	ldw	r3,-4(fp)
  80fad4:	1889883a 	add	r4,r3,r2
  80fad8:	e0bffe17 	ldw	r2,-8(fp)
  80fadc:	10800044 	addi	r2,r2,1
  80fae0:	108018e4 	muli	r2,r2,99
  80fae4:	10801004 	addi	r2,r2,64
  80fae8:	e0ffff17 	ldw	r3,-4(fp)
  80faec:	1885883a 	add	r2,r3,r2
  80faf0:	01801404 	movi	r6,80
  80faf4:	100b883a 	mov	r5,r2
  80faf8:	08071280 	call	807128 <memcpy>
  80fafc:	00000906 	br	80fb24 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80fb00:	e0bffe17 	ldw	r2,-8(fp)
  80fb04:	108018e4 	muli	r2,r2,99
  80fb08:	10801004 	addi	r2,r2,64
  80fb0c:	e0ffff17 	ldw	r3,-4(fp)
  80fb10:	1885883a 	add	r2,r3,r2
  80fb14:	01801404 	movi	r6,80
  80fb18:	01400804 	movi	r5,32
  80fb1c:	1009883a 	mov	r4,r2
  80fb20:	08019740 	call	801974 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fb24:	e0bffe17 	ldw	r2,-8(fp)
  80fb28:	10800044 	addi	r2,r2,1
  80fb2c:	e0bffe15 	stw	r2,-8(fp)
  80fb30:	e0bffe17 	ldw	r2,-8(fp)
  80fb34:	10800090 	cmplti	r2,r2,2
  80fb38:	103fe01e 	bne	r2,zero,80fabc <__alt_mem_onchip_mem+0xff807abc>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80fb3c:	e0bfff17 	ldw	r2,-4(fp)
  80fb40:	10800883 	ldbu	r2,34(r2)
  80fb44:	10bfffc4 	addi	r2,r2,-1
  80fb48:	1007883a 	mov	r3,r2
  80fb4c:	e0bfff17 	ldw	r2,-4(fp)
  80fb50:	10c00885 	stb	r3,34(r2)
}
  80fb54:	0001883a 	nop
  80fb58:	e037883a 	mov	sp,fp
  80fb5c:	dfc00117 	ldw	ra,4(sp)
  80fb60:	df000017 	ldw	fp,0(sp)
  80fb64:	dec00204 	addi	sp,sp,8
  80fb68:	f800283a 	ret

0080fb6c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80fb6c:	defff904 	addi	sp,sp,-28
  80fb70:	dfc00615 	stw	ra,24(sp)
  80fb74:	df000515 	stw	fp,20(sp)
  80fb78:	df000504 	addi	fp,sp,20
  80fb7c:	e13ffe15 	stw	r4,-8(fp)
  80fb80:	2805883a 	mov	r2,r5
  80fb84:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80fb88:	e03ffb15 	stw	zero,-20(fp)
  80fb8c:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  80fb90:	e0bffe17 	ldw	r2,-8(fp)
  80fb94:	10800a03 	ldbu	r2,40(r2)
  80fb98:	10803fcc 	andi	r2,r2,255
  80fb9c:	1080201c 	xori	r2,r2,128
  80fba0:	10bfe004 	addi	r2,r2,-128
  80fba4:	108016d8 	cmpnei	r2,r2,91
  80fba8:	1000411e 	bne	r2,zero,80fcb0 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  80fbac:	e0bffe17 	ldw	r2,-8(fp)
  80fbb0:	10800a04 	addi	r2,r2,40
  80fbb4:	10800044 	addi	r2,r2,1
  80fbb8:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80fbbc:	00000c06 	br	80fbf0 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80fbc0:	e0bffb17 	ldw	r2,-20(fp)
  80fbc4:	10c002a4 	muli	r3,r2,10
  80fbc8:	e0bffd17 	ldw	r2,-12(fp)
  80fbcc:	11000044 	addi	r4,r2,1
  80fbd0:	e13ffd15 	stw	r4,-12(fp)
  80fbd4:	10800003 	ldbu	r2,0(r2)
  80fbd8:	10803fcc 	andi	r2,r2,255
  80fbdc:	1080201c 	xori	r2,r2,128
  80fbe0:	10bfe004 	addi	r2,r2,-128
  80fbe4:	10bff404 	addi	r2,r2,-48
  80fbe8:	1885883a 	add	r2,r3,r2
  80fbec:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80fbf0:	d0e01117 	ldw	r3,-32700(gp)
  80fbf4:	e0bffd17 	ldw	r2,-12(fp)
  80fbf8:	10800003 	ldbu	r2,0(r2)
  80fbfc:	10803fcc 	andi	r2,r2,255
  80fc00:	1080201c 	xori	r2,r2,128
  80fc04:	10bfe004 	addi	r2,r2,-128
  80fc08:	10800044 	addi	r2,r2,1
  80fc0c:	1885883a 	add	r2,r3,r2
  80fc10:	10800003 	ldbu	r2,0(r2)
  80fc14:	10803fcc 	andi	r2,r2,255
  80fc18:	1080010c 	andi	r2,r2,4
  80fc1c:	103fe81e 	bne	r2,zero,80fbc0 <__alt_mem_onchip_mem+0xff807bc0>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80fc20:	e0bffd17 	ldw	r2,-12(fp)
  80fc24:	10800003 	ldbu	r2,0(r2)
  80fc28:	10803fcc 	andi	r2,r2,255
  80fc2c:	1080201c 	xori	r2,r2,128
  80fc30:	10bfe004 	addi	r2,r2,-128
  80fc34:	10800ed8 	cmpnei	r2,r2,59
  80fc38:	10001f1e 	bne	r2,zero,80fcb8 <lcd_handle_escape+0x14c>
    {
      ptr++;
  80fc3c:	e0bffd17 	ldw	r2,-12(fp)
  80fc40:	10800044 	addi	r2,r2,1
  80fc44:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80fc48:	00000c06 	br	80fc7c <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80fc4c:	e0bffc17 	ldw	r2,-16(fp)
  80fc50:	10c002a4 	muli	r3,r2,10
  80fc54:	e0bffd17 	ldw	r2,-12(fp)
  80fc58:	11000044 	addi	r4,r2,1
  80fc5c:	e13ffd15 	stw	r4,-12(fp)
  80fc60:	10800003 	ldbu	r2,0(r2)
  80fc64:	10803fcc 	andi	r2,r2,255
  80fc68:	1080201c 	xori	r2,r2,128
  80fc6c:	10bfe004 	addi	r2,r2,-128
  80fc70:	10bff404 	addi	r2,r2,-48
  80fc74:	1885883a 	add	r2,r3,r2
  80fc78:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80fc7c:	d0e01117 	ldw	r3,-32700(gp)
  80fc80:	e0bffd17 	ldw	r2,-12(fp)
  80fc84:	10800003 	ldbu	r2,0(r2)
  80fc88:	10803fcc 	andi	r2,r2,255
  80fc8c:	1080201c 	xori	r2,r2,128
  80fc90:	10bfe004 	addi	r2,r2,-128
  80fc94:	10800044 	addi	r2,r2,1
  80fc98:	1885883a 	add	r2,r3,r2
  80fc9c:	10800003 	ldbu	r2,0(r2)
  80fca0:	10803fcc 	andi	r2,r2,255
  80fca4:	1080010c 	andi	r2,r2,4
  80fca8:	103fe81e 	bne	r2,zero,80fc4c <__alt_mem_onchip_mem+0xff807c4c>
  80fcac:	00000206 	br	80fcb8 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80fcb0:	00bfffc4 	movi	r2,-1
  80fcb4:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80fcb8:	e0bfff07 	ldb	r2,-4(fp)
  80fcbc:	10c012a0 	cmpeqi	r3,r2,74
  80fcc0:	1800291e 	bne	r3,zero,80fd68 <lcd_handle_escape+0x1fc>
  80fcc4:	10c012c8 	cmpgei	r3,r2,75
  80fcc8:	1800031e 	bne	r3,zero,80fcd8 <lcd_handle_escape+0x16c>
  80fccc:	10801220 	cmpeqi	r2,r2,72
  80fcd0:	1000061e 	bne	r2,zero,80fcec <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80fcd4:	00004a06 	br	80fe00 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  80fcd8:	10c012e0 	cmpeqi	r3,r2,75
  80fcdc:	1800281e 	bne	r3,zero,80fd80 <lcd_handle_escape+0x214>
  80fce0:	108019a0 	cmpeqi	r2,r2,102
  80fce4:	1000011e 	bne	r2,zero,80fcec <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80fce8:	00004506 	br	80fe00 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80fcec:	e0bffc17 	ldw	r2,-16(fp)
  80fcf0:	0080050e 	bge	zero,r2,80fd08 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  80fcf4:	e0bffc17 	ldw	r2,-16(fp)
  80fcf8:	10bfffc4 	addi	r2,r2,-1
  80fcfc:	1007883a 	mov	r3,r2
  80fd00:	e0bffe17 	ldw	r2,-8(fp)
  80fd04:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80fd08:	e0bffb17 	ldw	r2,-20(fp)
  80fd0c:	0080370e 	bge	zero,r2,80fdec <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  80fd10:	e0bffb17 	ldw	r2,-20(fp)
  80fd14:	10bfffc4 	addi	r2,r2,-1
  80fd18:	1007883a 	mov	r3,r2
  80fd1c:	e0bffe17 	ldw	r2,-8(fp)
  80fd20:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80fd24:	e0bffe17 	ldw	r2,-8(fp)
  80fd28:	10800883 	ldbu	r2,34(r2)
  80fd2c:	10803fcc 	andi	r2,r2,255
  80fd30:	10800170 	cmpltui	r2,r2,5
  80fd34:	1000061e 	bne	r2,zero,80fd50 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  80fd38:	e0bffe17 	ldw	r2,-8(fp)
  80fd3c:	00c00104 	movi	r3,4
  80fd40:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  80fd44:	00000206 	br	80fd50 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  80fd48:	e13ffe17 	ldw	r4,-8(fp)
  80fd4c:	080faa00 	call	80faa0 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80fd50:	e0bffe17 	ldw	r2,-8(fp)
  80fd54:	10800883 	ldbu	r2,34(r2)
  80fd58:	10803fcc 	andi	r2,r2,255
  80fd5c:	108000e8 	cmpgeui	r2,r2,3
  80fd60:	103ff91e 	bne	r2,zero,80fd48 <__alt_mem_onchip_mem+0xff807d48>
        lcd_scroll_up(sp);
    }
    break;
  80fd64:	00002106 	br	80fdec <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80fd68:	e0bffb17 	ldw	r2,-20(fp)
  80fd6c:	10800098 	cmpnei	r2,r2,2
  80fd70:	1000201e 	bne	r2,zero,80fdf4 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  80fd74:	e13ffe17 	ldw	r4,-8(fp)
  80fd78:	080f7e40 	call	80f7e4 <lcd_clear_screen>
    break;
  80fd7c:	00001d06 	br	80fdf4 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80fd80:	e0bffb17 	ldw	r2,-20(fp)
  80fd84:	00801d16 	blt	zero,r2,80fdfc <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80fd88:	e0bffe17 	ldw	r2,-8(fp)
  80fd8c:	10800843 	ldbu	r2,33(r2)
  80fd90:	10803fcc 	andi	r2,r2,255
  80fd94:	10801428 	cmpgeui	r2,r2,80
  80fd98:	1000181e 	bne	r2,zero,80fdfc <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80fd9c:	e0bffe17 	ldw	r2,-8(fp)
  80fda0:	10800883 	ldbu	r2,34(r2)
  80fda4:	10803fcc 	andi	r2,r2,255
  80fda8:	108018e4 	muli	r2,r2,99
  80fdac:	10801004 	addi	r2,r2,64
  80fdb0:	e0fffe17 	ldw	r3,-8(fp)
  80fdb4:	1887883a 	add	r3,r3,r2
  80fdb8:	e0bffe17 	ldw	r2,-8(fp)
  80fdbc:	10800843 	ldbu	r2,33(r2)
  80fdc0:	10803fcc 	andi	r2,r2,255
  80fdc4:	1889883a 	add	r4,r3,r2
  80fdc8:	e0bffe17 	ldw	r2,-8(fp)
  80fdcc:	10800843 	ldbu	r2,33(r2)
  80fdd0:	10803fcc 	andi	r2,r2,255
  80fdd4:	00c01404 	movi	r3,80
  80fdd8:	1885c83a 	sub	r2,r3,r2
  80fddc:	100d883a 	mov	r6,r2
  80fde0:	01400804 	movi	r5,32
  80fde4:	08019740 	call	801974 <memset>
    }
    break;
  80fde8:	00000406 	br	80fdfc <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  80fdec:	0001883a 	nop
  80fdf0:	00000306 	br	80fe00 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  80fdf4:	0001883a 	nop
  80fdf8:	00000106 	br	80fe00 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  80fdfc:	0001883a 	nop
  }
}
  80fe00:	0001883a 	nop
  80fe04:	e037883a 	mov	sp,fp
  80fe08:	dfc00117 	ldw	ra,4(sp)
  80fe0c:	df000017 	ldw	fp,0(sp)
  80fe10:	dec00204 	addi	sp,sp,8
  80fe14:	f800283a 	ret

0080fe18 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80fe18:	defff304 	addi	sp,sp,-52
  80fe1c:	dfc00c15 	stw	ra,48(sp)
  80fe20:	df000b15 	stw	fp,44(sp)
  80fe24:	df000b04 	addi	fp,sp,44
  80fe28:	e13ffc15 	stw	r4,-16(fp)
  80fe2c:	e17ffd15 	stw	r5,-12(fp)
  80fe30:	e1bffe15 	stw	r6,-8(fp)
  80fe34:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80fe38:	e0bffe17 	ldw	r2,-8(fp)
  80fe3c:	e0fffd17 	ldw	r3,-12(fp)
  80fe40:	1885883a 	add	r2,r3,r2
  80fe44:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80fe48:	e0bffc17 	ldw	r2,-16(fp)
  80fe4c:	00c00044 	movi	r3,1
  80fe50:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  80fe54:	00009906 	br	8100bc <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  80fe58:	e0bffd17 	ldw	r2,-12(fp)
  80fe5c:	10800003 	ldbu	r2,0(r2)
  80fe60:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  80fe64:	e0bffc17 	ldw	r2,-16(fp)
  80fe68:	10800903 	ldbu	r2,36(r2)
  80fe6c:	10803fcc 	andi	r2,r2,255
  80fe70:	1080201c 	xori	r2,r2,128
  80fe74:	10bfe004 	addi	r2,r2,-128
  80fe78:	10003716 	blt	r2,zero,80ff58 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  80fe7c:	e0bffc17 	ldw	r2,-16(fp)
  80fe80:	10800903 	ldbu	r2,36(r2)
  80fe84:	10803fcc 	andi	r2,r2,255
  80fe88:	1080201c 	xori	r2,r2,128
  80fe8c:	10bfe004 	addi	r2,r2,-128
  80fe90:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80fe94:	e0bffa17 	ldw	r2,-24(fp)
  80fe98:	1000031e 	bne	r2,zero,80fea8 <altera_avalon_lcd_16207_write+0x90>
  80fe9c:	e0bff907 	ldb	r2,-28(fp)
  80fea0:	108016d8 	cmpnei	r2,r2,91
  80fea4:	10000d1e 	bne	r2,zero,80fedc <altera_avalon_lcd_16207_write+0xc4>
  80fea8:	e0bffa17 	ldw	r2,-24(fp)
  80feac:	10001826 	beq	r2,zero,80ff10 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  80feb0:	d0e01117 	ldw	r3,-32700(gp)
  80feb4:	e0bff907 	ldb	r2,-28(fp)
  80feb8:	10800044 	addi	r2,r2,1
  80febc:	1885883a 	add	r2,r3,r2
  80fec0:	10800003 	ldbu	r2,0(r2)
  80fec4:	10803fcc 	andi	r2,r2,255
  80fec8:	1080010c 	andi	r2,r2,4
  80fecc:	1000101e 	bne	r2,zero,80ff10 <altera_avalon_lcd_16207_write+0xf8>
  80fed0:	e0bff907 	ldb	r2,-28(fp)
  80fed4:	10800ee0 	cmpeqi	r2,r2,59
  80fed8:	10000d1e 	bne	r2,zero,80ff10 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  80fedc:	e0fffc17 	ldw	r3,-16(fp)
  80fee0:	e0bffa17 	ldw	r2,-24(fp)
  80fee4:	1885883a 	add	r2,r3,r2
  80fee8:	10800a04 	addi	r2,r2,40
  80feec:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80fef0:	e0bff907 	ldb	r2,-28(fp)
  80fef4:	100b883a 	mov	r5,r2
  80fef8:	e13ffc17 	ldw	r4,-16(fp)
  80fefc:	080fb6c0 	call	80fb6c <lcd_handle_escape>

        sp->esccount = -1;
  80ff00:	e0bffc17 	ldw	r2,-16(fp)
  80ff04:	00ffffc4 	movi	r3,-1
  80ff08:	10c00905 	stb	r3,36(r2)
  80ff0c:	00006806 	br	8100b0 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80ff10:	e0bffc17 	ldw	r2,-16(fp)
  80ff14:	10800903 	ldbu	r2,36(r2)
  80ff18:	10803fcc 	andi	r2,r2,255
  80ff1c:	108001e8 	cmpgeui	r2,r2,7
  80ff20:	1000631e 	bne	r2,zero,8100b0 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  80ff24:	e0fffc17 	ldw	r3,-16(fp)
  80ff28:	e0bffa17 	ldw	r2,-24(fp)
  80ff2c:	1885883a 	add	r2,r3,r2
  80ff30:	10800a04 	addi	r2,r2,40
  80ff34:	e0fff903 	ldbu	r3,-28(fp)
  80ff38:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  80ff3c:	e0bffc17 	ldw	r2,-16(fp)
  80ff40:	10800903 	ldbu	r2,36(r2)
  80ff44:	10800044 	addi	r2,r2,1
  80ff48:	1007883a 	mov	r3,r2
  80ff4c:	e0bffc17 	ldw	r2,-16(fp)
  80ff50:	10c00905 	stb	r3,36(r2)
  80ff54:	00005606 	br	8100b0 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  80ff58:	e0bff907 	ldb	r2,-28(fp)
  80ff5c:	108006d8 	cmpnei	r2,r2,27
  80ff60:	1000031e 	bne	r2,zero,80ff70 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  80ff64:	e0bffc17 	ldw	r2,-16(fp)
  80ff68:	10000905 	stb	zero,36(r2)
  80ff6c:	00005006 	br	8100b0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  80ff70:	e0bff907 	ldb	r2,-28(fp)
  80ff74:	10800358 	cmpnei	r2,r2,13
  80ff78:	1000031e 	bne	r2,zero,80ff88 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  80ff7c:	e0bffc17 	ldw	r2,-16(fp)
  80ff80:	10000845 	stb	zero,33(r2)
  80ff84:	00004a06 	br	8100b0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  80ff88:	e0bff907 	ldb	r2,-28(fp)
  80ff8c:	10800298 	cmpnei	r2,r2,10
  80ff90:	1000101e 	bne	r2,zero,80ffd4 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  80ff94:	e0bffc17 	ldw	r2,-16(fp)
  80ff98:	10000845 	stb	zero,33(r2)
      sp->y++;
  80ff9c:	e0bffc17 	ldw	r2,-16(fp)
  80ffa0:	10800883 	ldbu	r2,34(r2)
  80ffa4:	10800044 	addi	r2,r2,1
  80ffa8:	1007883a 	mov	r3,r2
  80ffac:	e0bffc17 	ldw	r2,-16(fp)
  80ffb0:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80ffb4:	e0bffc17 	ldw	r2,-16(fp)
  80ffb8:	10800883 	ldbu	r2,34(r2)
  80ffbc:	10803fcc 	andi	r2,r2,255
  80ffc0:	108000f0 	cmpltui	r2,r2,3
  80ffc4:	10003a1e 	bne	r2,zero,8100b0 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  80ffc8:	e13ffc17 	ldw	r4,-16(fp)
  80ffcc:	080faa00 	call	80faa0 <lcd_scroll_up>
  80ffd0:	00003706 	br	8100b0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  80ffd4:	e0bff907 	ldb	r2,-28(fp)
  80ffd8:	10800218 	cmpnei	r2,r2,8
  80ffdc:	10000b1e 	bne	r2,zero,81000c <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  80ffe0:	e0bffc17 	ldw	r2,-16(fp)
  80ffe4:	10800843 	ldbu	r2,33(r2)
  80ffe8:	10803fcc 	andi	r2,r2,255
  80ffec:	10003026 	beq	r2,zero,8100b0 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  80fff0:	e0bffc17 	ldw	r2,-16(fp)
  80fff4:	10800843 	ldbu	r2,33(r2)
  80fff8:	10bfffc4 	addi	r2,r2,-1
  80fffc:	1007883a 	mov	r3,r2
  810000:	e0bffc17 	ldw	r2,-16(fp)
  810004:	10c00845 	stb	r3,33(r2)
  810008:	00002906 	br	8100b0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  81000c:	d0e01117 	ldw	r3,-32700(gp)
  810010:	e0bff907 	ldb	r2,-28(fp)
  810014:	10800044 	addi	r2,r2,1
  810018:	1885883a 	add	r2,r3,r2
  81001c:	10800003 	ldbu	r2,0(r2)
  810020:	10803fcc 	andi	r2,r2,255
  810024:	1080201c 	xori	r2,r2,128
  810028:	10bfe004 	addi	r2,r2,-128
  81002c:	108025cc 	andi	r2,r2,151
  810030:	10001f26 	beq	r2,zero,8100b0 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  810034:	e0bffc17 	ldw	r2,-16(fp)
  810038:	10800883 	ldbu	r2,34(r2)
  81003c:	10803fcc 	andi	r2,r2,255
  810040:	108000b0 	cmpltui	r2,r2,2
  810044:	1000021e 	bne	r2,zero,810050 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  810048:	e13ffc17 	ldw	r4,-16(fp)
  81004c:	080faa00 	call	80faa0 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  810050:	e0bffc17 	ldw	r2,-16(fp)
  810054:	10800843 	ldbu	r2,33(r2)
  810058:	10803fcc 	andi	r2,r2,255
  81005c:	10801428 	cmpgeui	r2,r2,80
  810060:	10000d1e 	bne	r2,zero,810098 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  810064:	e0bffc17 	ldw	r2,-16(fp)
  810068:	10800883 	ldbu	r2,34(r2)
  81006c:	10c03fcc 	andi	r3,r2,255
  810070:	e0bffc17 	ldw	r2,-16(fp)
  810074:	10800843 	ldbu	r2,33(r2)
  810078:	10803fcc 	andi	r2,r2,255
  81007c:	e13ffc17 	ldw	r4,-16(fp)
  810080:	18c018e4 	muli	r3,r3,99
  810084:	20c7883a 	add	r3,r4,r3
  810088:	1885883a 	add	r2,r3,r2
  81008c:	10801004 	addi	r2,r2,64
  810090:	e0fff903 	ldbu	r3,-28(fp)
  810094:	10c00005 	stb	r3,0(r2)

      sp->x++;
  810098:	e0bffc17 	ldw	r2,-16(fp)
  81009c:	10800843 	ldbu	r2,33(r2)
  8100a0:	10800044 	addi	r2,r2,1
  8100a4:	1007883a 	mov	r3,r2
  8100a8:	e0bffc17 	ldw	r2,-16(fp)
  8100ac:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  8100b0:	e0bffd17 	ldw	r2,-12(fp)
  8100b4:	10800044 	addi	r2,r2,1
  8100b8:	e0bffd15 	stw	r2,-12(fp)
  8100bc:	e0fffd17 	ldw	r3,-12(fp)
  8100c0:	e0bff817 	ldw	r2,-32(fp)
  8100c4:	18bf6436 	bltu	r3,r2,80fe58 <__alt_mem_onchip_mem+0xff807e58>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  8100c8:	00800404 	movi	r2,16
  8100cc:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8100d0:	e03ff515 	stw	zero,-44(fp)
  8100d4:	00003706 	br	8101b4 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8100d8:	00801404 	movi	r2,80
  8100dc:	e0bff715 	stw	r2,-36(fp)
  8100e0:	00001106 	br	810128 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  8100e4:	e0bff717 	ldw	r2,-36(fp)
  8100e8:	10bfffc4 	addi	r2,r2,-1
  8100ec:	e13ffc17 	ldw	r4,-16(fp)
  8100f0:	e0fff517 	ldw	r3,-44(fp)
  8100f4:	18c018e4 	muli	r3,r3,99
  8100f8:	20c7883a 	add	r3,r4,r3
  8100fc:	1885883a 	add	r2,r3,r2
  810100:	10801004 	addi	r2,r2,64
  810104:	10800003 	ldbu	r2,0(r2)
  810108:	10803fcc 	andi	r2,r2,255
  81010c:	1080201c 	xori	r2,r2,128
  810110:	10bfe004 	addi	r2,r2,-128
  810114:	10800820 	cmpeqi	r2,r2,32
  810118:	10000626 	beq	r2,zero,810134 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  81011c:	e0bff717 	ldw	r2,-36(fp)
  810120:	10bfffc4 	addi	r2,r2,-1
  810124:	e0bff715 	stw	r2,-36(fp)
  810128:	e0bff717 	ldw	r2,-36(fp)
  81012c:	00bfed16 	blt	zero,r2,8100e4 <__alt_mem_onchip_mem+0xff8080e4>
  810130:	00000106 	br	810138 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  810134:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  810138:	e0bff717 	ldw	r2,-36(fp)
  81013c:	10800448 	cmpgei	r2,r2,17
  810140:	1000031e 	bne	r2,zero,810150 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  810144:	00800404 	movi	r2,16
  810148:	e0bff715 	stw	r2,-36(fp)
  81014c:	00000306 	br	81015c <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  810150:	e0bff717 	ldw	r2,-36(fp)
  810154:	10800044 	addi	r2,r2,1
  810158:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  81015c:	e0bff717 	ldw	r2,-36(fp)
  810160:	1009883a 	mov	r4,r2
  810164:	e0fffc17 	ldw	r3,-16(fp)
  810168:	e0bff517 	ldw	r2,-44(fp)
  81016c:	108018e4 	muli	r2,r2,99
  810170:	1885883a 	add	r2,r3,r2
  810174:	10802444 	addi	r2,r2,145
  810178:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  81017c:	e0fff617 	ldw	r3,-40(fp)
  810180:	e0bff717 	ldw	r2,-36(fp)
  810184:	1880020e 	bge	r3,r2,810190 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  810188:	e0bff717 	ldw	r2,-36(fp)
  81018c:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  810190:	e0fffc17 	ldw	r3,-16(fp)
  810194:	e0bff517 	ldw	r2,-44(fp)
  810198:	108018e4 	muli	r2,r2,99
  81019c:	1885883a 	add	r2,r3,r2
  8101a0:	10802484 	addi	r2,r2,146
  8101a4:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8101a8:	e0bff517 	ldw	r2,-44(fp)
  8101ac:	10800044 	addi	r2,r2,1
  8101b0:	e0bff515 	stw	r2,-44(fp)
  8101b4:	e0bff517 	ldw	r2,-44(fp)
  8101b8:	10800090 	cmplti	r2,r2,2
  8101bc:	103fc61e 	bne	r2,zero,8100d8 <__alt_mem_onchip_mem+0xff8080d8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  8101c0:	e0bff617 	ldw	r2,-40(fp)
  8101c4:	10800448 	cmpgei	r2,r2,17
  8101c8:	1000031e 	bne	r2,zero,8101d8 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  8101cc:	e0bffc17 	ldw	r2,-16(fp)
  8101d0:	10000985 	stb	zero,38(r2)
  8101d4:	00002e06 	br	810290 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  8101d8:	e0bff617 	ldw	r2,-40(fp)
  8101dc:	1085883a 	add	r2,r2,r2
  8101e0:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  8101e4:	e0bff617 	ldw	r2,-40(fp)
  8101e8:	1007883a 	mov	r3,r2
  8101ec:	e0bffc17 	ldw	r2,-16(fp)
  8101f0:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8101f4:	e03ff515 	stw	zero,-44(fp)
  8101f8:	00002206 	br	810284 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  8101fc:	e0fffc17 	ldw	r3,-16(fp)
  810200:	e0bff517 	ldw	r2,-44(fp)
  810204:	108018e4 	muli	r2,r2,99
  810208:	1885883a 	add	r2,r3,r2
  81020c:	10802444 	addi	r2,r2,145
  810210:	10800003 	ldbu	r2,0(r2)
  810214:	10803fcc 	andi	r2,r2,255
  810218:	1080201c 	xori	r2,r2,128
  81021c:	10bfe004 	addi	r2,r2,-128
  810220:	10800450 	cmplti	r2,r2,17
  810224:	1000141e 	bne	r2,zero,810278 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  810228:	e0fffc17 	ldw	r3,-16(fp)
  81022c:	e0bff517 	ldw	r2,-44(fp)
  810230:	108018e4 	muli	r2,r2,99
  810234:	1885883a 	add	r2,r3,r2
  810238:	10802444 	addi	r2,r2,145
  81023c:	10800003 	ldbu	r2,0(r2)
  810240:	10803fcc 	andi	r2,r2,255
  810244:	1080201c 	xori	r2,r2,128
  810248:	10bfe004 	addi	r2,r2,-128
  81024c:	1004923a 	slli	r2,r2,8
  810250:	e17ff617 	ldw	r5,-40(fp)
  810254:	1009883a 	mov	r4,r2
  810258:	080b2e40 	call	80b2e4 <__divsi3>
  81025c:	1009883a 	mov	r4,r2
  810260:	e0fffc17 	ldw	r3,-16(fp)
  810264:	e0bff517 	ldw	r2,-44(fp)
  810268:	108018e4 	muli	r2,r2,99
  81026c:	1885883a 	add	r2,r3,r2
  810270:	10802484 	addi	r2,r2,146
  810274:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810278:	e0bff517 	ldw	r2,-44(fp)
  81027c:	10800044 	addi	r2,r2,1
  810280:	e0bff515 	stw	r2,-44(fp)
  810284:	e0bff517 	ldw	r2,-44(fp)
  810288:	10800090 	cmplti	r2,r2,2
  81028c:	103fdb1e 	bne	r2,zero,8101fc <__alt_mem_onchip_mem+0xff8081fc>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  810290:	e0bffc17 	ldw	r2,-16(fp)
  810294:	10800943 	ldbu	r2,37(r2)
  810298:	10803fcc 	andi	r2,r2,255
  81029c:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  8102a0:	e13ffc17 	ldw	r4,-16(fp)
  8102a4:	080f8b40 	call	80f8b4 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8102a8:	e0bffc17 	ldw	r2,-16(fp)
  8102ac:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8102b0:	e0bffc17 	ldw	r2,-16(fp)
  8102b4:	10800943 	ldbu	r2,37(r2)
  8102b8:	10c03fcc 	andi	r3,r2,255
  8102bc:	e0bffb17 	ldw	r2,-20(fp)
  8102c0:	18800426 	beq	r3,r2,8102d4 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  8102c4:	e0bffc17 	ldw	r2,-16(fp)
  8102c8:	00c00044 	movi	r3,1
  8102cc:	10c009c5 	stb	r3,39(r2)
  }
  8102d0:	003fef06 	br	810290 <__alt_mem_onchip_mem+0xff808290>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  8102d4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  8102d8:	e0bffe17 	ldw	r2,-8(fp)
}
  8102dc:	e037883a 	mov	sp,fp
  8102e0:	dfc00117 	ldw	ra,4(sp)
  8102e4:	df000017 	ldw	fp,0(sp)
  8102e8:	dec00204 	addi	sp,sp,8
  8102ec:	f800283a 	ret

008102f0 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  8102f0:	defffc04 	addi	sp,sp,-16
  8102f4:	dfc00315 	stw	ra,12(sp)
  8102f8:	df000215 	stw	fp,8(sp)
  8102fc:	df000204 	addi	fp,sp,8
  810300:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  810304:	e0bfff17 	ldw	r2,-4(fp)
  810308:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  81030c:	e0bffe17 	ldw	r2,-8(fp)
  810310:	10800943 	ldbu	r2,37(r2)
  810314:	10803fcc 	andi	r2,r2,255
  810318:	10c00044 	addi	r3,r2,1
  81031c:	e0bffe17 	ldw	r2,-8(fp)
  810320:	10800983 	ldbu	r2,38(r2)
  810324:	10803fcc 	andi	r2,r2,255
  810328:	18800316 	blt	r3,r2,810338 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  81032c:	e0bffe17 	ldw	r2,-8(fp)
  810330:	10000945 	stb	zero,37(r2)
  810334:	00000606 	br	810350 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  810338:	e0bffe17 	ldw	r2,-8(fp)
  81033c:	10800943 	ldbu	r2,37(r2)
  810340:	10800044 	addi	r2,r2,1
  810344:	1007883a 	mov	r3,r2
  810348:	e0bffe17 	ldw	r2,-8(fp)
  81034c:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  810350:	e0bffe17 	ldw	r2,-8(fp)
  810354:	10800983 	ldbu	r2,38(r2)
  810358:	10803fcc 	andi	r2,r2,255
  81035c:	10000826 	beq	r2,zero,810380 <alt_lcd_16207_timeout+0x90>
  810360:	e0bffe17 	ldw	r2,-8(fp)
  810364:	108009c3 	ldbu	r2,39(r2)
  810368:	10803fcc 	andi	r2,r2,255
  81036c:	1080201c 	xori	r2,r2,128
  810370:	10bfe004 	addi	r2,r2,-128
  810374:	1000021e 	bne	r2,zero,810380 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  810378:	e13ffe17 	ldw	r4,-8(fp)
  81037c:	080f8b40 	call	80f8b4 <lcd_repaint_screen>

  return sp->period;
  810380:	e0bffe17 	ldw	r2,-8(fp)
  810384:	10800717 	ldw	r2,28(r2)
}
  810388:	e037883a 	mov	sp,fp
  81038c:	dfc00117 	ldw	ra,4(sp)
  810390:	df000017 	ldw	fp,0(sp)
  810394:	dec00204 	addi	sp,sp,8
  810398:	f800283a 	ret

0081039c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  81039c:	defffc04 	addi	sp,sp,-16
  8103a0:	dfc00315 	stw	ra,12(sp)
  8103a4:	df000215 	stw	fp,8(sp)
  8103a8:	df000204 	addi	fp,sp,8
  8103ac:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  8103b0:	e0bfff17 	ldw	r2,-4(fp)
  8103b4:	10800017 	ldw	r2,0(r2)
  8103b8:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  8103bc:	e0bfff17 	ldw	r2,-4(fp)
  8103c0:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  8103c4:	010ea604 	movi	r4,15000
  8103c8:	08117340 	call	811734 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8103cc:	e0bffe17 	ldw	r2,-8(fp)
  8103d0:	00c00c04 	movi	r3,48
  8103d4:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  8103d8:	01040104 	movi	r4,4100
  8103dc:	08117340 	call	811734 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8103e0:	e0bffe17 	ldw	r2,-8(fp)
  8103e4:	00c00c04 	movi	r3,48
  8103e8:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  8103ec:	0100fa04 	movi	r4,1000
  8103f0:	08117340 	call	811734 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8103f4:	e0bffe17 	ldw	r2,-8(fp)
  8103f8:	00c00c04 	movi	r3,48
  8103fc:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  810400:	01400e04 	movi	r5,56
  810404:	e13fff17 	ldw	r4,-4(fp)
  810408:	080f6540 	call	80f654 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  81040c:	01400204 	movi	r5,8
  810410:	e13fff17 	ldw	r4,-4(fp)
  810414:	080f6540 	call	80f654 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  810418:	e13fff17 	ldw	r4,-4(fp)
  81041c:	080f7e40 	call	80f7e4 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  810420:	01400184 	movi	r5,6
  810424:	e13fff17 	ldw	r4,-4(fp)
  810428:	080f6540 	call	80f654 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  81042c:	01400304 	movi	r5,12
  810430:	e13fff17 	ldw	r4,-4(fp)
  810434:	080f6540 	call	80f654 <lcd_write_command>

  sp->esccount = -1;
  810438:	e0bfff17 	ldw	r2,-4(fp)
  81043c:	00ffffc4 	movi	r3,-1
  810440:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  810444:	e0bfff17 	ldw	r2,-4(fp)
  810448:	10800a04 	addi	r2,r2,40
  81044c:	01800204 	movi	r6,8
  810450:	000b883a 	mov	r5,zero
  810454:	1009883a 	mov	r4,r2
  810458:	08019740 	call	801974 <memset>

  sp->scrollpos = 0;
  81045c:	e0bfff17 	ldw	r2,-4(fp)
  810460:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  810464:	e0bfff17 	ldw	r2,-4(fp)
  810468:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  81046c:	e0bfff17 	ldw	r2,-4(fp)
  810470:	100009c5 	stb	zero,39(r2)
  810474:	d0a75f17 	ldw	r2,-25220(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  810478:	01400284 	movi	r5,10
  81047c:	1009883a 	mov	r4,r2
  810480:	080b3dc0 	call	80b3dc <__udivsi3>
  810484:	1007883a 	mov	r3,r2
  810488:	e0bfff17 	ldw	r2,-4(fp)
  81048c:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  810490:	e0bfff17 	ldw	r2,-4(fp)
  810494:	10c00104 	addi	r3,r2,4
  810498:	e0bfff17 	ldw	r2,-4(fp)
  81049c:	10800717 	ldw	r2,28(r2)
  8104a0:	e1ffff17 	ldw	r7,-4(fp)
  8104a4:	01802074 	movhi	r6,129
  8104a8:	3180bc04 	addi	r6,r6,752
  8104ac:	100b883a 	mov	r5,r2
  8104b0:	1809883a 	mov	r4,r3
  8104b4:	080db000 	call	80db00 <alt_alarm_start>
}
  8104b8:	0001883a 	nop
  8104bc:	e037883a 	mov	sp,fp
  8104c0:	dfc00117 	ldw	ra,4(sp)
  8104c4:	df000017 	ldw	fp,0(sp)
  8104c8:	dec00204 	addi	sp,sp,8
  8104cc:	f800283a 	ret

008104d0 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8104d0:	defffa04 	addi	sp,sp,-24
  8104d4:	dfc00515 	stw	ra,20(sp)
  8104d8:	df000415 	stw	fp,16(sp)
  8104dc:	df000404 	addi	fp,sp,16
  8104e0:	e13ffd15 	stw	r4,-12(fp)
  8104e4:	e17ffe15 	stw	r5,-8(fp)
  8104e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  8104ec:	e0bffd17 	ldw	r2,-12(fp)
  8104f0:	10800017 	ldw	r2,0(r2)
  8104f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8104f8:	e0bffc17 	ldw	r2,-16(fp)
  8104fc:	10c00a04 	addi	r3,r2,40
  810500:	e0bffd17 	ldw	r2,-12(fp)
  810504:	10800217 	ldw	r2,8(r2)
  810508:	100f883a 	mov	r7,r2
  81050c:	e1bfff17 	ldw	r6,-4(fp)
  810510:	e17ffe17 	ldw	r5,-8(fp)
  810514:	1809883a 	mov	r4,r3
  810518:	080fe180 	call	80fe18 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  81051c:	e037883a 	mov	sp,fp
  810520:	dfc00117 	ldw	ra,4(sp)
  810524:	df000017 	ldw	fp,0(sp)
  810528:	dec00204 	addi	sp,sp,8
  81052c:	f800283a 	ret

00810530 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  810530:	defffa04 	addi	sp,sp,-24
  810534:	dfc00515 	stw	ra,20(sp)
  810538:	df000415 	stw	fp,16(sp)
  81053c:	df000404 	addi	fp,sp,16
  810540:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  810544:	0007883a 	mov	r3,zero
  810548:	e0bfff17 	ldw	r2,-4(fp)
  81054c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  810550:	e0bfff17 	ldw	r2,-4(fp)
  810554:	10800104 	addi	r2,r2,4
  810558:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81055c:	0005303a 	rdctl	r2,status
  810560:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810564:	e0fffd17 	ldw	r3,-12(fp)
  810568:	00bfff84 	movi	r2,-2
  81056c:	1884703a 	and	r2,r3,r2
  810570:	1001703a 	wrctl	status,r2
  
  return context;
  810574:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  810578:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  81057c:	080e8ac0 	call	80e8ac <alt_tick>
  810580:	e0bffc17 	ldw	r2,-16(fp)
  810584:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810588:	e0bffe17 	ldw	r2,-8(fp)
  81058c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  810590:	0001883a 	nop
  810594:	e037883a 	mov	sp,fp
  810598:	dfc00117 	ldw	ra,4(sp)
  81059c:	df000017 	ldw	fp,0(sp)
  8105a0:	dec00204 	addi	sp,sp,8
  8105a4:	f800283a 	ret

008105a8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8105a8:	defff804 	addi	sp,sp,-32
  8105ac:	dfc00715 	stw	ra,28(sp)
  8105b0:	df000615 	stw	fp,24(sp)
  8105b4:	df000604 	addi	fp,sp,24
  8105b8:	e13ffc15 	stw	r4,-16(fp)
  8105bc:	e17ffd15 	stw	r5,-12(fp)
  8105c0:	e1bffe15 	stw	r6,-8(fp)
  8105c4:	e1ffff15 	stw	r7,-4(fp)
  8105c8:	e0bfff17 	ldw	r2,-4(fp)
  8105cc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8105d0:	d0a75f17 	ldw	r2,-25220(gp)
  8105d4:	1000021e 	bne	r2,zero,8105e0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  8105d8:	e0bffb17 	ldw	r2,-20(fp)
  8105dc:	d0a75f15 	stw	r2,-25220(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8105e0:	e0bffc17 	ldw	r2,-16(fp)
  8105e4:	10800104 	addi	r2,r2,4
  8105e8:	00c001c4 	movi	r3,7
  8105ec:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8105f0:	d8000015 	stw	zero,0(sp)
  8105f4:	e1fffc17 	ldw	r7,-16(fp)
  8105f8:	01802074 	movhi	r6,129
  8105fc:	31814c04 	addi	r6,r6,1328
  810600:	e17ffe17 	ldw	r5,-8(fp)
  810604:	e13ffd17 	ldw	r4,-12(fp)
  810608:	08113540 	call	811354 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  81060c:	0001883a 	nop
  810610:	e037883a 	mov	sp,fp
  810614:	dfc00117 	ldw	ra,4(sp)
  810618:	df000017 	ldw	fp,0(sp)
  81061c:	dec00204 	addi	sp,sp,8
  810620:	f800283a 	ret

00810624 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  810624:	defffa04 	addi	sp,sp,-24
  810628:	dfc00515 	stw	ra,20(sp)
  81062c:	df000415 	stw	fp,16(sp)
  810630:	df000404 	addi	fp,sp,16
  810634:	e13ffd15 	stw	r4,-12(fp)
  810638:	e17ffe15 	stw	r5,-8(fp)
  81063c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  810640:	e0bffd17 	ldw	r2,-12(fp)
  810644:	10800017 	ldw	r2,0(r2)
  810648:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  81064c:	e0bffc17 	ldw	r2,-16(fp)
  810650:	10c00a04 	addi	r3,r2,40
  810654:	e0bffd17 	ldw	r2,-12(fp)
  810658:	10800217 	ldw	r2,8(r2)
  81065c:	100f883a 	mov	r7,r2
  810660:	e1bfff17 	ldw	r6,-4(fp)
  810664:	e17ffe17 	ldw	r5,-8(fp)
  810668:	1809883a 	mov	r4,r3
  81066c:	0810b380 	call	810b38 <altera_avalon_uart_read>
      fd->fd_flags);
}
  810670:	e037883a 	mov	sp,fp
  810674:	dfc00117 	ldw	ra,4(sp)
  810678:	df000017 	ldw	fp,0(sp)
  81067c:	dec00204 	addi	sp,sp,8
  810680:	f800283a 	ret

00810684 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810684:	defffa04 	addi	sp,sp,-24
  810688:	dfc00515 	stw	ra,20(sp)
  81068c:	df000415 	stw	fp,16(sp)
  810690:	df000404 	addi	fp,sp,16
  810694:	e13ffd15 	stw	r4,-12(fp)
  810698:	e17ffe15 	stw	r5,-8(fp)
  81069c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8106a0:	e0bffd17 	ldw	r2,-12(fp)
  8106a4:	10800017 	ldw	r2,0(r2)
  8106a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8106ac:	e0bffc17 	ldw	r2,-16(fp)
  8106b0:	10c00a04 	addi	r3,r2,40
  8106b4:	e0bffd17 	ldw	r2,-12(fp)
  8106b8:	10800217 	ldw	r2,8(r2)
  8106bc:	100f883a 	mov	r7,r2
  8106c0:	e1bfff17 	ldw	r6,-4(fp)
  8106c4:	e17ffe17 	ldw	r5,-8(fp)
  8106c8:	1809883a 	mov	r4,r3
  8106cc:	0810d500 	call	810d50 <altera_avalon_uart_write>
      fd->fd_flags);
}
  8106d0:	e037883a 	mov	sp,fp
  8106d4:	dfc00117 	ldw	ra,4(sp)
  8106d8:	df000017 	ldw	fp,0(sp)
  8106dc:	dec00204 	addi	sp,sp,8
  8106e0:	f800283a 	ret

008106e4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8106e4:	defffc04 	addi	sp,sp,-16
  8106e8:	dfc00315 	stw	ra,12(sp)
  8106ec:	df000215 	stw	fp,8(sp)
  8106f0:	df000204 	addi	fp,sp,8
  8106f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8106f8:	e0bfff17 	ldw	r2,-4(fp)
  8106fc:	10800017 	ldw	r2,0(r2)
  810700:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  810704:	e0bffe17 	ldw	r2,-8(fp)
  810708:	10c00a04 	addi	r3,r2,40
  81070c:	e0bfff17 	ldw	r2,-4(fp)
  810710:	10800217 	ldw	r2,8(r2)
  810714:	100b883a 	mov	r5,r2
  810718:	1809883a 	mov	r4,r3
  81071c:	0810aa80 	call	810aa8 <altera_avalon_uart_close>
}
  810720:	e037883a 	mov	sp,fp
  810724:	dfc00117 	ldw	ra,4(sp)
  810728:	df000017 	ldw	fp,0(sp)
  81072c:	dec00204 	addi	sp,sp,8
  810730:	f800283a 	ret

00810734 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  810734:	defff804 	addi	sp,sp,-32
  810738:	dfc00715 	stw	ra,28(sp)
  81073c:	df000615 	stw	fp,24(sp)
  810740:	df000604 	addi	fp,sp,24
  810744:	e13ffd15 	stw	r4,-12(fp)
  810748:	e17ffe15 	stw	r5,-8(fp)
  81074c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  810750:	e0bffd17 	ldw	r2,-12(fp)
  810754:	10800017 	ldw	r2,0(r2)
  810758:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  81075c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  810760:	1000041e 	bne	r2,zero,810774 <altera_avalon_uart_init+0x40>
  810764:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  810768:	1000021e 	bne	r2,zero,810774 <altera_avalon_uart_init+0x40>
  81076c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  810770:	10000226 	beq	r2,zero,81077c <altera_avalon_uart_init+0x48>
  810774:	00800044 	movi	r2,1
  810778:	00000106 	br	810780 <altera_avalon_uart_init+0x4c>
  81077c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  810780:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  810784:	e0bffc17 	ldw	r2,-16(fp)
  810788:	10000f1e 	bne	r2,zero,8107c8 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  81078c:	e0bffd17 	ldw	r2,-12(fp)
  810790:	00c32004 	movi	r3,3200
  810794:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  810798:	e0bffb17 	ldw	r2,-20(fp)
  81079c:	10800304 	addi	r2,r2,12
  8107a0:	e0fffd17 	ldw	r3,-12(fp)
  8107a4:	18c00117 	ldw	r3,4(r3)
  8107a8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  8107ac:	d8000015 	stw	zero,0(sp)
  8107b0:	e1fffd17 	ldw	r7,-12(fp)
  8107b4:	01802074 	movhi	r6,129
  8107b8:	3181f804 	addi	r6,r6,2016
  8107bc:	e17fff17 	ldw	r5,-4(fp)
  8107c0:	e13ffe17 	ldw	r4,-8(fp)
  8107c4:	08113540 	call	811354 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  8107c8:	0001883a 	nop
  8107cc:	e037883a 	mov	sp,fp
  8107d0:	dfc00117 	ldw	ra,4(sp)
  8107d4:	df000017 	ldw	fp,0(sp)
  8107d8:	dec00204 	addi	sp,sp,8
  8107dc:	f800283a 	ret

008107e0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8107e0:	defffa04 	addi	sp,sp,-24
  8107e4:	dfc00515 	stw	ra,20(sp)
  8107e8:	df000415 	stw	fp,16(sp)
  8107ec:	df000404 	addi	fp,sp,16
  8107f0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8107f4:	e0bfff17 	ldw	r2,-4(fp)
  8107f8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  8107fc:	e0bffc17 	ldw	r2,-16(fp)
  810800:	10800017 	ldw	r2,0(r2)
  810804:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  810808:	e0bffd17 	ldw	r2,-12(fp)
  81080c:	10800204 	addi	r2,r2,8
  810810:	10800037 	ldwio	r2,0(r2)
  810814:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  810818:	e0bffd17 	ldw	r2,-12(fp)
  81081c:	10800204 	addi	r2,r2,8
  810820:	0007883a 	mov	r3,zero
  810824:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  810828:	e0bffd17 	ldw	r2,-12(fp)
  81082c:	10800204 	addi	r2,r2,8
  810830:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  810834:	e0bffe17 	ldw	r2,-8(fp)
  810838:	1080200c 	andi	r2,r2,128
  81083c:	10000326 	beq	r2,zero,81084c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  810840:	e17ffe17 	ldw	r5,-8(fp)
  810844:	e13ffc17 	ldw	r4,-16(fp)
  810848:	081087c0 	call	81087c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  81084c:	e0bffe17 	ldw	r2,-8(fp)
  810850:	1081100c 	andi	r2,r2,1088
  810854:	10000326 	beq	r2,zero,810864 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  810858:	e17ffe17 	ldw	r5,-8(fp)
  81085c:	e13ffc17 	ldw	r4,-16(fp)
  810860:	08109600 	call	810960 <altera_avalon_uart_txirq>
  }
  

}
  810864:	0001883a 	nop
  810868:	e037883a 	mov	sp,fp
  81086c:	dfc00117 	ldw	ra,4(sp)
  810870:	df000017 	ldw	fp,0(sp)
  810874:	dec00204 	addi	sp,sp,8
  810878:	f800283a 	ret

0081087c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  81087c:	defffc04 	addi	sp,sp,-16
  810880:	df000315 	stw	fp,12(sp)
  810884:	df000304 	addi	fp,sp,12
  810888:	e13ffe15 	stw	r4,-8(fp)
  81088c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  810890:	e0bfff17 	ldw	r2,-4(fp)
  810894:	108000cc 	andi	r2,r2,3
  810898:	10002c1e 	bne	r2,zero,81094c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  81089c:	e0bffe17 	ldw	r2,-8(fp)
  8108a0:	10800317 	ldw	r2,12(r2)
  8108a4:	e0bffe17 	ldw	r2,-8(fp)
  8108a8:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8108ac:	e0bffe17 	ldw	r2,-8(fp)
  8108b0:	10800317 	ldw	r2,12(r2)
  8108b4:	10800044 	addi	r2,r2,1
  8108b8:	10800fcc 	andi	r2,r2,63
  8108bc:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8108c0:	e0bffe17 	ldw	r2,-8(fp)
  8108c4:	10800317 	ldw	r2,12(r2)
  8108c8:	e0fffe17 	ldw	r3,-8(fp)
  8108cc:	18c00017 	ldw	r3,0(r3)
  8108d0:	18c00037 	ldwio	r3,0(r3)
  8108d4:	1809883a 	mov	r4,r3
  8108d8:	e0fffe17 	ldw	r3,-8(fp)
  8108dc:	1885883a 	add	r2,r3,r2
  8108e0:	10800704 	addi	r2,r2,28
  8108e4:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  8108e8:	e0bffe17 	ldw	r2,-8(fp)
  8108ec:	e0fffd17 	ldw	r3,-12(fp)
  8108f0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8108f4:	e0bffe17 	ldw	r2,-8(fp)
  8108f8:	10800317 	ldw	r2,12(r2)
  8108fc:	10800044 	addi	r2,r2,1
  810900:	10800fcc 	andi	r2,r2,63
  810904:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  810908:	e0bffe17 	ldw	r2,-8(fp)
  81090c:	10c00217 	ldw	r3,8(r2)
  810910:	e0bffd17 	ldw	r2,-12(fp)
  810914:	18800e1e 	bne	r3,r2,810950 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  810918:	e0bffe17 	ldw	r2,-8(fp)
  81091c:	10c00117 	ldw	r3,4(r2)
  810920:	00bfdfc4 	movi	r2,-129
  810924:	1886703a 	and	r3,r3,r2
  810928:	e0bffe17 	ldw	r2,-8(fp)
  81092c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  810930:	e0bffe17 	ldw	r2,-8(fp)
  810934:	10800017 	ldw	r2,0(r2)
  810938:	10800304 	addi	r2,r2,12
  81093c:	e0fffe17 	ldw	r3,-8(fp)
  810940:	18c00117 	ldw	r3,4(r3)
  810944:	10c00035 	stwio	r3,0(r2)
  810948:	00000106 	br	810950 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  81094c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  810950:	e037883a 	mov	sp,fp
  810954:	df000017 	ldw	fp,0(sp)
  810958:	dec00104 	addi	sp,sp,4
  81095c:	f800283a 	ret

00810960 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  810960:	defffb04 	addi	sp,sp,-20
  810964:	df000415 	stw	fp,16(sp)
  810968:	df000404 	addi	fp,sp,16
  81096c:	e13ffc15 	stw	r4,-16(fp)
  810970:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  810974:	e0bffc17 	ldw	r2,-16(fp)
  810978:	10c00417 	ldw	r3,16(r2)
  81097c:	e0bffc17 	ldw	r2,-16(fp)
  810980:	10800517 	ldw	r2,20(r2)
  810984:	18803226 	beq	r3,r2,810a50 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  810988:	e0bffc17 	ldw	r2,-16(fp)
  81098c:	10800617 	ldw	r2,24(r2)
  810990:	1080008c 	andi	r2,r2,2
  810994:	10000326 	beq	r2,zero,8109a4 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  810998:	e0bffd17 	ldw	r2,-12(fp)
  81099c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8109a0:	10001d26 	beq	r2,zero,810a18 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8109a4:	e0bffc17 	ldw	r2,-16(fp)
  8109a8:	10800417 	ldw	r2,16(r2)
  8109ac:	e0bffc17 	ldw	r2,-16(fp)
  8109b0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  8109b4:	e0bffc17 	ldw	r2,-16(fp)
  8109b8:	10800017 	ldw	r2,0(r2)
  8109bc:	10800104 	addi	r2,r2,4
  8109c0:	e0fffc17 	ldw	r3,-16(fp)
  8109c4:	18c00417 	ldw	r3,16(r3)
  8109c8:	e13ffc17 	ldw	r4,-16(fp)
  8109cc:	20c7883a 	add	r3,r4,r3
  8109d0:	18c01704 	addi	r3,r3,92
  8109d4:	18c00003 	ldbu	r3,0(r3)
  8109d8:	18c03fcc 	andi	r3,r3,255
  8109dc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  8109e0:	e0bffc17 	ldw	r2,-16(fp)
  8109e4:	10800417 	ldw	r2,16(r2)
  8109e8:	10800044 	addi	r2,r2,1
  8109ec:	e0fffc17 	ldw	r3,-16(fp)
  8109f0:	18800415 	stw	r2,16(r3)
  8109f4:	10c00fcc 	andi	r3,r2,63
  8109f8:	e0bffc17 	ldw	r2,-16(fp)
  8109fc:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  810a00:	e0bffc17 	ldw	r2,-16(fp)
  810a04:	10800117 	ldw	r2,4(r2)
  810a08:	10c01014 	ori	r3,r2,64
  810a0c:	e0bffc17 	ldw	r2,-16(fp)
  810a10:	10c00115 	stw	r3,4(r2)
  810a14:	00000e06 	br	810a50 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  810a18:	e0bffc17 	ldw	r2,-16(fp)
  810a1c:	10800017 	ldw	r2,0(r2)
  810a20:	10800204 	addi	r2,r2,8
  810a24:	10800037 	ldwio	r2,0(r2)
  810a28:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  810a2c:	e0bffd17 	ldw	r2,-12(fp)
  810a30:	1082000c 	andi	r2,r2,2048
  810a34:	1000061e 	bne	r2,zero,810a50 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  810a38:	e0bffc17 	ldw	r2,-16(fp)
  810a3c:	10c00117 	ldw	r3,4(r2)
  810a40:	00bfefc4 	movi	r2,-65
  810a44:	1886703a 	and	r3,r3,r2
  810a48:	e0bffc17 	ldw	r2,-16(fp)
  810a4c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  810a50:	e0bffc17 	ldw	r2,-16(fp)
  810a54:	10c00417 	ldw	r3,16(r2)
  810a58:	e0bffc17 	ldw	r2,-16(fp)
  810a5c:	10800517 	ldw	r2,20(r2)
  810a60:	1880061e 	bne	r3,r2,810a7c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  810a64:	e0bffc17 	ldw	r2,-16(fp)
  810a68:	10c00117 	ldw	r3,4(r2)
  810a6c:	00beefc4 	movi	r2,-1089
  810a70:	1886703a 	and	r3,r3,r2
  810a74:	e0bffc17 	ldw	r2,-16(fp)
  810a78:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810a7c:	e0bffc17 	ldw	r2,-16(fp)
  810a80:	10800017 	ldw	r2,0(r2)
  810a84:	10800304 	addi	r2,r2,12
  810a88:	e0fffc17 	ldw	r3,-16(fp)
  810a8c:	18c00117 	ldw	r3,4(r3)
  810a90:	10c00035 	stwio	r3,0(r2)
}
  810a94:	0001883a 	nop
  810a98:	e037883a 	mov	sp,fp
  810a9c:	df000017 	ldw	fp,0(sp)
  810aa0:	dec00104 	addi	sp,sp,4
  810aa4:	f800283a 	ret

00810aa8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  810aa8:	defffd04 	addi	sp,sp,-12
  810aac:	df000215 	stw	fp,8(sp)
  810ab0:	df000204 	addi	fp,sp,8
  810ab4:	e13ffe15 	stw	r4,-8(fp)
  810ab8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  810abc:	00000506 	br	810ad4 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  810ac0:	e0bfff17 	ldw	r2,-4(fp)
  810ac4:	1090000c 	andi	r2,r2,16384
  810ac8:	10000226 	beq	r2,zero,810ad4 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  810acc:	00bffd44 	movi	r2,-11
  810ad0:	00000606 	br	810aec <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  810ad4:	e0bffe17 	ldw	r2,-8(fp)
  810ad8:	10c00417 	ldw	r3,16(r2)
  810adc:	e0bffe17 	ldw	r2,-8(fp)
  810ae0:	10800517 	ldw	r2,20(r2)
  810ae4:	18bff61e 	bne	r3,r2,810ac0 <__alt_mem_onchip_mem+0xff808ac0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  810ae8:	0005883a 	mov	r2,zero
}
  810aec:	e037883a 	mov	sp,fp
  810af0:	df000017 	ldw	fp,0(sp)
  810af4:	dec00104 	addi	sp,sp,4
  810af8:	f800283a 	ret

00810afc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810afc:	defffe04 	addi	sp,sp,-8
  810b00:	dfc00115 	stw	ra,4(sp)
  810b04:	df000015 	stw	fp,0(sp)
  810b08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810b0c:	d0a00b17 	ldw	r2,-32724(gp)
  810b10:	10000326 	beq	r2,zero,810b20 <alt_get_errno+0x24>
  810b14:	d0a00b17 	ldw	r2,-32724(gp)
  810b18:	103ee83a 	callr	r2
  810b1c:	00000106 	br	810b24 <alt_get_errno+0x28>
  810b20:	d0a75404 	addi	r2,gp,-25264
}
  810b24:	e037883a 	mov	sp,fp
  810b28:	dfc00117 	ldw	ra,4(sp)
  810b2c:	df000017 	ldw	fp,0(sp)
  810b30:	dec00204 	addi	sp,sp,8
  810b34:	f800283a 	ret

00810b38 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  810b38:	defff204 	addi	sp,sp,-56
  810b3c:	dfc00d15 	stw	ra,52(sp)
  810b40:	df000c15 	stw	fp,48(sp)
  810b44:	df000c04 	addi	fp,sp,48
  810b48:	e13ffc15 	stw	r4,-16(fp)
  810b4c:	e17ffd15 	stw	r5,-12(fp)
  810b50:	e1bffe15 	stw	r6,-8(fp)
  810b54:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  810b58:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  810b5c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  810b60:	e0bfff17 	ldw	r2,-4(fp)
  810b64:	1090000c 	andi	r2,r2,16384
  810b68:	1005003a 	cmpeq	r2,r2,zero
  810b6c:	10803fcc 	andi	r2,r2,255
  810b70:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  810b74:	00001306 	br	810bc4 <altera_avalon_uart_read+0x8c>
    {
      count++;
  810b78:	e0bff517 	ldw	r2,-44(fp)
  810b7c:	10800044 	addi	r2,r2,1
  810b80:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  810b84:	e0bffd17 	ldw	r2,-12(fp)
  810b88:	10c00044 	addi	r3,r2,1
  810b8c:	e0fffd15 	stw	r3,-12(fp)
  810b90:	e0fffc17 	ldw	r3,-16(fp)
  810b94:	18c00217 	ldw	r3,8(r3)
  810b98:	e13ffc17 	ldw	r4,-16(fp)
  810b9c:	20c7883a 	add	r3,r4,r3
  810ba0:	18c00704 	addi	r3,r3,28
  810ba4:	18c00003 	ldbu	r3,0(r3)
  810ba8:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  810bac:	e0bffc17 	ldw	r2,-16(fp)
  810bb0:	10800217 	ldw	r2,8(r2)
  810bb4:	10800044 	addi	r2,r2,1
  810bb8:	10c00fcc 	andi	r3,r2,63
  810bbc:	e0bffc17 	ldw	r2,-16(fp)
  810bc0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  810bc4:	e0fff517 	ldw	r3,-44(fp)
  810bc8:	e0bffe17 	ldw	r2,-8(fp)
  810bcc:	1880050e 	bge	r3,r2,810be4 <altera_avalon_uart_read+0xac>
  810bd0:	e0bffc17 	ldw	r2,-16(fp)
  810bd4:	10c00217 	ldw	r3,8(r2)
  810bd8:	e0bffc17 	ldw	r2,-16(fp)
  810bdc:	10800317 	ldw	r2,12(r2)
  810be0:	18bfe51e 	bne	r3,r2,810b78 <__alt_mem_onchip_mem+0xff808b78>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  810be4:	e0bff517 	ldw	r2,-44(fp)
  810be8:	1000251e 	bne	r2,zero,810c80 <altera_avalon_uart_read+0x148>
  810bec:	e0bffc17 	ldw	r2,-16(fp)
  810bf0:	10c00217 	ldw	r3,8(r2)
  810bf4:	e0bffc17 	ldw	r2,-16(fp)
  810bf8:	10800317 	ldw	r2,12(r2)
  810bfc:	1880201e 	bne	r3,r2,810c80 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  810c00:	e0bff617 	ldw	r2,-40(fp)
  810c04:	1000071e 	bne	r2,zero,810c24 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  810c08:	0810afc0 	call	810afc <alt_get_errno>
  810c0c:	1007883a 	mov	r3,r2
  810c10:	008002c4 	movi	r2,11
  810c14:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  810c18:	00800044 	movi	r2,1
  810c1c:	e0bff405 	stb	r2,-48(fp)
        break;
  810c20:	00001b06 	br	810c90 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810c24:	0005303a 	rdctl	r2,status
  810c28:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810c2c:	e0fff917 	ldw	r3,-28(fp)
  810c30:	00bfff84 	movi	r2,-2
  810c34:	1884703a 	and	r2,r3,r2
  810c38:	1001703a 	wrctl	status,r2
  
  return context;
  810c3c:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  810c40:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  810c44:	e0bffc17 	ldw	r2,-16(fp)
  810c48:	10800117 	ldw	r2,4(r2)
  810c4c:	10c02014 	ori	r3,r2,128
  810c50:	e0bffc17 	ldw	r2,-16(fp)
  810c54:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810c58:	e0bffc17 	ldw	r2,-16(fp)
  810c5c:	10800017 	ldw	r2,0(r2)
  810c60:	10800304 	addi	r2,r2,12
  810c64:	e0fffc17 	ldw	r3,-16(fp)
  810c68:	18c00117 	ldw	r3,4(r3)
  810c6c:	10c00035 	stwio	r3,0(r2)
  810c70:	e0bff817 	ldw	r2,-32(fp)
  810c74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810c78:	e0bffa17 	ldw	r2,-24(fp)
  810c7c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  810c80:	e0bff517 	ldw	r2,-44(fp)
  810c84:	1000021e 	bne	r2,zero,810c90 <altera_avalon_uart_read+0x158>
  810c88:	e0bffe17 	ldw	r2,-8(fp)
  810c8c:	103fcd1e 	bne	r2,zero,810bc4 <__alt_mem_onchip_mem+0xff808bc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810c90:	0005303a 	rdctl	r2,status
  810c94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810c98:	e0fffb17 	ldw	r3,-20(fp)
  810c9c:	00bfff84 	movi	r2,-2
  810ca0:	1884703a 	and	r2,r3,r2
  810ca4:	1001703a 	wrctl	status,r2
  
  return context;
  810ca8:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  810cac:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  810cb0:	e0bffc17 	ldw	r2,-16(fp)
  810cb4:	10800117 	ldw	r2,4(r2)
  810cb8:	10c02014 	ori	r3,r2,128
  810cbc:	e0bffc17 	ldw	r2,-16(fp)
  810cc0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810cc4:	e0bffc17 	ldw	r2,-16(fp)
  810cc8:	10800017 	ldw	r2,0(r2)
  810ccc:	10800304 	addi	r2,r2,12
  810cd0:	e0fffc17 	ldw	r3,-16(fp)
  810cd4:	18c00117 	ldw	r3,4(r3)
  810cd8:	10c00035 	stwio	r3,0(r2)
  810cdc:	e0bff817 	ldw	r2,-32(fp)
  810ce0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810ce4:	e0bff717 	ldw	r2,-36(fp)
  810ce8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  810cec:	e0bff403 	ldbu	r2,-48(fp)
  810cf0:	10000226 	beq	r2,zero,810cfc <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  810cf4:	00bffd44 	movi	r2,-11
  810cf8:	00000106 	br	810d00 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  810cfc:	e0bff517 	ldw	r2,-44(fp)
  }
}
  810d00:	e037883a 	mov	sp,fp
  810d04:	dfc00117 	ldw	ra,4(sp)
  810d08:	df000017 	ldw	fp,0(sp)
  810d0c:	dec00204 	addi	sp,sp,8
  810d10:	f800283a 	ret

00810d14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810d14:	defffe04 	addi	sp,sp,-8
  810d18:	dfc00115 	stw	ra,4(sp)
  810d1c:	df000015 	stw	fp,0(sp)
  810d20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810d24:	d0a00b17 	ldw	r2,-32724(gp)
  810d28:	10000326 	beq	r2,zero,810d38 <alt_get_errno+0x24>
  810d2c:	d0a00b17 	ldw	r2,-32724(gp)
  810d30:	103ee83a 	callr	r2
  810d34:	00000106 	br	810d3c <alt_get_errno+0x28>
  810d38:	d0a75404 	addi	r2,gp,-25264
}
  810d3c:	e037883a 	mov	sp,fp
  810d40:	dfc00117 	ldw	ra,4(sp)
  810d44:	df000017 	ldw	fp,0(sp)
  810d48:	dec00204 	addi	sp,sp,8
  810d4c:	f800283a 	ret

00810d50 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  810d50:	defff204 	addi	sp,sp,-56
  810d54:	dfc00d15 	stw	ra,52(sp)
  810d58:	df000c15 	stw	fp,48(sp)
  810d5c:	df000c04 	addi	fp,sp,48
  810d60:	e13ffc15 	stw	r4,-16(fp)
  810d64:	e17ffd15 	stw	r5,-12(fp)
  810d68:	e1bffe15 	stw	r6,-8(fp)
  810d6c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  810d70:	e0bffe17 	ldw	r2,-8(fp)
  810d74:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  810d78:	e0bfff17 	ldw	r2,-4(fp)
  810d7c:	1090000c 	andi	r2,r2,16384
  810d80:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  810d84:	00003c06 	br	810e78 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  810d88:	e0bffc17 	ldw	r2,-16(fp)
  810d8c:	10800517 	ldw	r2,20(r2)
  810d90:	10800044 	addi	r2,r2,1
  810d94:	10800fcc 	andi	r2,r2,63
  810d98:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  810d9c:	e0bffc17 	ldw	r2,-16(fp)
  810da0:	10c00417 	ldw	r3,16(r2)
  810da4:	e0bff717 	ldw	r2,-36(fp)
  810da8:	1880221e 	bne	r3,r2,810e34 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  810dac:	e0bff517 	ldw	r2,-44(fp)
  810db0:	10000526 	beq	r2,zero,810dc8 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  810db4:	0810d140 	call	810d14 <alt_get_errno>
  810db8:	1007883a 	mov	r3,r2
  810dbc:	008002c4 	movi	r2,11
  810dc0:	18800015 	stw	r2,0(r3)
        break;
  810dc4:	00002e06 	br	810e80 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810dc8:	0005303a 	rdctl	r2,status
  810dcc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810dd0:	e0fff917 	ldw	r3,-28(fp)
  810dd4:	00bfff84 	movi	r2,-2
  810dd8:	1884703a 	and	r2,r3,r2
  810ddc:	1001703a 	wrctl	status,r2
  
  return context;
  810de0:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  810de4:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  810de8:	e0bffc17 	ldw	r2,-16(fp)
  810dec:	10800117 	ldw	r2,4(r2)
  810df0:	10c11014 	ori	r3,r2,1088
  810df4:	e0bffc17 	ldw	r2,-16(fp)
  810df8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810dfc:	e0bffc17 	ldw	r2,-16(fp)
  810e00:	10800017 	ldw	r2,0(r2)
  810e04:	10800304 	addi	r2,r2,12
  810e08:	e0fffc17 	ldw	r3,-16(fp)
  810e0c:	18c00117 	ldw	r3,4(r3)
  810e10:	10c00035 	stwio	r3,0(r2)
  810e14:	e0bff817 	ldw	r2,-32(fp)
  810e18:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810e1c:	e0bff617 	ldw	r2,-40(fp)
  810e20:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  810e24:	e0bffc17 	ldw	r2,-16(fp)
  810e28:	10c00417 	ldw	r3,16(r2)
  810e2c:	e0bff717 	ldw	r2,-36(fp)
  810e30:	18bffc26 	beq	r3,r2,810e24 <__alt_mem_onchip_mem+0xff808e24>
      }
    }

    count--;
  810e34:	e0bff417 	ldw	r2,-48(fp)
  810e38:	10bfffc4 	addi	r2,r2,-1
  810e3c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  810e40:	e0bffc17 	ldw	r2,-16(fp)
  810e44:	10c00517 	ldw	r3,20(r2)
  810e48:	e0bffd17 	ldw	r2,-12(fp)
  810e4c:	11000044 	addi	r4,r2,1
  810e50:	e13ffd15 	stw	r4,-12(fp)
  810e54:	10800003 	ldbu	r2,0(r2)
  810e58:	1009883a 	mov	r4,r2
  810e5c:	e0bffc17 	ldw	r2,-16(fp)
  810e60:	10c5883a 	add	r2,r2,r3
  810e64:	10801704 	addi	r2,r2,92
  810e68:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  810e6c:	e0bffc17 	ldw	r2,-16(fp)
  810e70:	e0fff717 	ldw	r3,-36(fp)
  810e74:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  810e78:	e0bff417 	ldw	r2,-48(fp)
  810e7c:	103fc21e 	bne	r2,zero,810d88 <__alt_mem_onchip_mem+0xff808d88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810e80:	0005303a 	rdctl	r2,status
  810e84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810e88:	e0fffb17 	ldw	r3,-20(fp)
  810e8c:	00bfff84 	movi	r2,-2
  810e90:	1884703a 	and	r2,r3,r2
  810e94:	1001703a 	wrctl	status,r2
  
  return context;
  810e98:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  810e9c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  810ea0:	e0bffc17 	ldw	r2,-16(fp)
  810ea4:	10800117 	ldw	r2,4(r2)
  810ea8:	10c11014 	ori	r3,r2,1088
  810eac:	e0bffc17 	ldw	r2,-16(fp)
  810eb0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810eb4:	e0bffc17 	ldw	r2,-16(fp)
  810eb8:	10800017 	ldw	r2,0(r2)
  810ebc:	10800304 	addi	r2,r2,12
  810ec0:	e0fffc17 	ldw	r3,-16(fp)
  810ec4:	18c00117 	ldw	r3,4(r3)
  810ec8:	10c00035 	stwio	r3,0(r2)
  810ecc:	e0bff817 	ldw	r2,-32(fp)
  810ed0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810ed4:	e0bffa17 	ldw	r2,-24(fp)
  810ed8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  810edc:	e0fffe17 	ldw	r3,-8(fp)
  810ee0:	e0bff417 	ldw	r2,-48(fp)
  810ee4:	1885c83a 	sub	r2,r3,r2
}
  810ee8:	e037883a 	mov	sp,fp
  810eec:	dfc00117 	ldw	ra,4(sp)
  810ef0:	df000017 	ldw	fp,0(sp)
  810ef4:	dec00204 	addi	sp,sp,8
  810ef8:	f800283a 	ret

00810efc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  810efc:	defffe04 	addi	sp,sp,-8
  810f00:	df000115 	stw	fp,4(sp)
  810f04:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  810f08:	e03fff15 	stw	zero,-4(fp)
  810f0c:	00000506 	br	810f24 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  810f10:	e0bfff17 	ldw	r2,-4(fp)
  810f14:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  810f18:	e0bfff17 	ldw	r2,-4(fp)
  810f1c:	10800804 	addi	r2,r2,32
  810f20:	e0bfff15 	stw	r2,-4(fp)
  810f24:	e0bfff17 	ldw	r2,-4(fp)
  810f28:	10820030 	cmpltui	r2,r2,2048
  810f2c:	103ff81e 	bne	r2,zero,810f10 <__alt_mem_onchip_mem+0xff808f10>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  810f30:	0001883a 	nop
  810f34:	e037883a 	mov	sp,fp
  810f38:	df000017 	ldw	fp,0(sp)
  810f3c:	dec00104 	addi	sp,sp,4
  810f40:	f800283a 	ret

00810f44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810f44:	defffe04 	addi	sp,sp,-8
  810f48:	dfc00115 	stw	ra,4(sp)
  810f4c:	df000015 	stw	fp,0(sp)
  810f50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810f54:	d0a00b17 	ldw	r2,-32724(gp)
  810f58:	10000326 	beq	r2,zero,810f68 <alt_get_errno+0x24>
  810f5c:	d0a00b17 	ldw	r2,-32724(gp)
  810f60:	103ee83a 	callr	r2
  810f64:	00000106 	br	810f6c <alt_get_errno+0x28>
  810f68:	d0a75404 	addi	r2,gp,-25264
}
  810f6c:	e037883a 	mov	sp,fp
  810f70:	dfc00117 	ldw	ra,4(sp)
  810f74:	df000017 	ldw	fp,0(sp)
  810f78:	dec00204 	addi	sp,sp,8
  810f7c:	f800283a 	ret

00810f80 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  810f80:	defffa04 	addi	sp,sp,-24
  810f84:	dfc00515 	stw	ra,20(sp)
  810f88:	df000415 	stw	fp,16(sp)
  810f8c:	df000404 	addi	fp,sp,16
  810f90:	e13ffe15 	stw	r4,-8(fp)
  810f94:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  810f98:	e0bffe17 	ldw	r2,-8(fp)
  810f9c:	10000326 	beq	r2,zero,810fac <alt_dev_llist_insert+0x2c>
  810fa0:	e0bffe17 	ldw	r2,-8(fp)
  810fa4:	10800217 	ldw	r2,8(r2)
  810fa8:	1000061e 	bne	r2,zero,810fc4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  810fac:	0810f440 	call	810f44 <alt_get_errno>
  810fb0:	1007883a 	mov	r3,r2
  810fb4:	00800584 	movi	r2,22
  810fb8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  810fbc:	00bffa84 	movi	r2,-22
  810fc0:	00001306 	br	811010 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  810fc4:	e0bffe17 	ldw	r2,-8(fp)
  810fc8:	e0ffff17 	ldw	r3,-4(fp)
  810fcc:	e0fffc15 	stw	r3,-16(fp)
  810fd0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810fd4:	e0bffd17 	ldw	r2,-12(fp)
  810fd8:	e0fffc17 	ldw	r3,-16(fp)
  810fdc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  810fe0:	e0bffc17 	ldw	r2,-16(fp)
  810fe4:	10c00017 	ldw	r3,0(r2)
  810fe8:	e0bffd17 	ldw	r2,-12(fp)
  810fec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810ff0:	e0bffc17 	ldw	r2,-16(fp)
  810ff4:	10800017 	ldw	r2,0(r2)
  810ff8:	e0fffd17 	ldw	r3,-12(fp)
  810ffc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  811000:	e0bffc17 	ldw	r2,-16(fp)
  811004:	e0fffd17 	ldw	r3,-12(fp)
  811008:	10c00015 	stw	r3,0(r2)

  return 0;  
  81100c:	0005883a 	mov	r2,zero
}
  811010:	e037883a 	mov	sp,fp
  811014:	dfc00117 	ldw	ra,4(sp)
  811018:	df000017 	ldw	fp,0(sp)
  81101c:	dec00204 	addi	sp,sp,8
  811020:	f800283a 	ret

00811024 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  811024:	defffd04 	addi	sp,sp,-12
  811028:	dfc00215 	stw	ra,8(sp)
  81102c:	df000115 	stw	fp,4(sp)
  811030:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811034:	00802074 	movhi	r2,129
  811038:	10876704 	addi	r2,r2,7580
  81103c:	e0bfff15 	stw	r2,-4(fp)
  811040:	00000606 	br	81105c <_do_ctors+0x38>
        (*ctor) (); 
  811044:	e0bfff17 	ldw	r2,-4(fp)
  811048:	10800017 	ldw	r2,0(r2)
  81104c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811050:	e0bfff17 	ldw	r2,-4(fp)
  811054:	10bfff04 	addi	r2,r2,-4
  811058:	e0bfff15 	stw	r2,-4(fp)
  81105c:	e0ffff17 	ldw	r3,-4(fp)
  811060:	00802074 	movhi	r2,129
  811064:	10876804 	addi	r2,r2,7584
  811068:	18bff62e 	bgeu	r3,r2,811044 <__alt_mem_onchip_mem+0xff809044>
        (*ctor) (); 
}
  81106c:	0001883a 	nop
  811070:	e037883a 	mov	sp,fp
  811074:	dfc00117 	ldw	ra,4(sp)
  811078:	df000017 	ldw	fp,0(sp)
  81107c:	dec00204 	addi	sp,sp,8
  811080:	f800283a 	ret

00811084 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  811084:	defffd04 	addi	sp,sp,-12
  811088:	dfc00215 	stw	ra,8(sp)
  81108c:	df000115 	stw	fp,4(sp)
  811090:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  811094:	00802074 	movhi	r2,129
  811098:	10876704 	addi	r2,r2,7580
  81109c:	e0bfff15 	stw	r2,-4(fp)
  8110a0:	00000606 	br	8110bc <_do_dtors+0x38>
        (*dtor) (); 
  8110a4:	e0bfff17 	ldw	r2,-4(fp)
  8110a8:	10800017 	ldw	r2,0(r2)
  8110ac:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8110b0:	e0bfff17 	ldw	r2,-4(fp)
  8110b4:	10bfff04 	addi	r2,r2,-4
  8110b8:	e0bfff15 	stw	r2,-4(fp)
  8110bc:	e0ffff17 	ldw	r3,-4(fp)
  8110c0:	00802074 	movhi	r2,129
  8110c4:	10876804 	addi	r2,r2,7584
  8110c8:	18bff62e 	bgeu	r3,r2,8110a4 <__alt_mem_onchip_mem+0xff8090a4>
        (*dtor) (); 
}
  8110cc:	0001883a 	nop
  8110d0:	e037883a 	mov	sp,fp
  8110d4:	dfc00117 	ldw	ra,4(sp)
  8110d8:	df000017 	ldw	fp,0(sp)
  8110dc:	dec00204 	addi	sp,sp,8
  8110e0:	f800283a 	ret

008110e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8110e4:	defffa04 	addi	sp,sp,-24
  8110e8:	dfc00515 	stw	ra,20(sp)
  8110ec:	df000415 	stw	fp,16(sp)
  8110f0:	df000404 	addi	fp,sp,16
  8110f4:	e13ffe15 	stw	r4,-8(fp)
  8110f8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8110fc:	e0bfff17 	ldw	r2,-4(fp)
  811100:	10800017 	ldw	r2,0(r2)
  811104:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  811108:	e13ffe17 	ldw	r4,-8(fp)
  81110c:	0801f500 	call	801f50 <strlen>
  811110:	10800044 	addi	r2,r2,1
  811114:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  811118:	00000d06 	br	811150 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81111c:	e0bffc17 	ldw	r2,-16(fp)
  811120:	10800217 	ldw	r2,8(r2)
  811124:	e0fffd17 	ldw	r3,-12(fp)
  811128:	180d883a 	mov	r6,r3
  81112c:	e17ffe17 	ldw	r5,-8(fp)
  811130:	1009883a 	mov	r4,r2
  811134:	0811a580 	call	811a58 <memcmp>
  811138:	1000021e 	bne	r2,zero,811144 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81113c:	e0bffc17 	ldw	r2,-16(fp)
  811140:	00000706 	br	811160 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  811144:	e0bffc17 	ldw	r2,-16(fp)
  811148:	10800017 	ldw	r2,0(r2)
  81114c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  811150:	e0fffc17 	ldw	r3,-16(fp)
  811154:	e0bfff17 	ldw	r2,-4(fp)
  811158:	18bff01e 	bne	r3,r2,81111c <__alt_mem_onchip_mem+0xff80911c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81115c:	0005883a 	mov	r2,zero
}
  811160:	e037883a 	mov	sp,fp
  811164:	dfc00117 	ldw	ra,4(sp)
  811168:	df000017 	ldw	fp,0(sp)
  81116c:	dec00204 	addi	sp,sp,8
  811170:	f800283a 	ret

00811174 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  811174:	defffb04 	addi	sp,sp,-20
  811178:	dfc00415 	stw	ra,16(sp)
  81117c:	df000315 	stw	fp,12(sp)
  811180:	df000304 	addi	fp,sp,12
  811184:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  811188:	d0a00617 	ldw	r2,-32744(gp)
  81118c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811190:	00003106 	br	811258 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  811194:	e0bffd17 	ldw	r2,-12(fp)
  811198:	10800217 	ldw	r2,8(r2)
  81119c:	1009883a 	mov	r4,r2
  8111a0:	0801f500 	call	801f50 <strlen>
  8111a4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  8111a8:	e0bffd17 	ldw	r2,-12(fp)
  8111ac:	10c00217 	ldw	r3,8(r2)
  8111b0:	e0bffe17 	ldw	r2,-8(fp)
  8111b4:	10bfffc4 	addi	r2,r2,-1
  8111b8:	1885883a 	add	r2,r3,r2
  8111bc:	10800003 	ldbu	r2,0(r2)
  8111c0:	10803fcc 	andi	r2,r2,255
  8111c4:	1080201c 	xori	r2,r2,128
  8111c8:	10bfe004 	addi	r2,r2,-128
  8111cc:	10800bd8 	cmpnei	r2,r2,47
  8111d0:	1000031e 	bne	r2,zero,8111e0 <alt_find_file+0x6c>
    {
      len -= 1;
  8111d4:	e0bffe17 	ldw	r2,-8(fp)
  8111d8:	10bfffc4 	addi	r2,r2,-1
  8111dc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8111e0:	e0bffe17 	ldw	r2,-8(fp)
  8111e4:	e0ffff17 	ldw	r3,-4(fp)
  8111e8:	1885883a 	add	r2,r3,r2
  8111ec:	10800003 	ldbu	r2,0(r2)
  8111f0:	10803fcc 	andi	r2,r2,255
  8111f4:	1080201c 	xori	r2,r2,128
  8111f8:	10bfe004 	addi	r2,r2,-128
  8111fc:	10800be0 	cmpeqi	r2,r2,47
  811200:	1000081e 	bne	r2,zero,811224 <alt_find_file+0xb0>
  811204:	e0bffe17 	ldw	r2,-8(fp)
  811208:	e0ffff17 	ldw	r3,-4(fp)
  81120c:	1885883a 	add	r2,r3,r2
  811210:	10800003 	ldbu	r2,0(r2)
  811214:	10803fcc 	andi	r2,r2,255
  811218:	1080201c 	xori	r2,r2,128
  81121c:	10bfe004 	addi	r2,r2,-128
  811220:	10000a1e 	bne	r2,zero,81124c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  811224:	e0bffd17 	ldw	r2,-12(fp)
  811228:	10800217 	ldw	r2,8(r2)
  81122c:	e0fffe17 	ldw	r3,-8(fp)
  811230:	180d883a 	mov	r6,r3
  811234:	e17fff17 	ldw	r5,-4(fp)
  811238:	1009883a 	mov	r4,r2
  81123c:	0811a580 	call	811a58 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  811240:	1000021e 	bne	r2,zero,81124c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  811244:	e0bffd17 	ldw	r2,-12(fp)
  811248:	00000706 	br	811268 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  81124c:	e0bffd17 	ldw	r2,-12(fp)
  811250:	10800017 	ldw	r2,0(r2)
  811254:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811258:	e0fffd17 	ldw	r3,-12(fp)
  81125c:	d0a00604 	addi	r2,gp,-32744
  811260:	18bfcc1e 	bne	r3,r2,811194 <__alt_mem_onchip_mem+0xff809194>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  811264:	0005883a 	mov	r2,zero
}
  811268:	e037883a 	mov	sp,fp
  81126c:	dfc00117 	ldw	ra,4(sp)
  811270:	df000017 	ldw	fp,0(sp)
  811274:	dec00204 	addi	sp,sp,8
  811278:	f800283a 	ret

0081127c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81127c:	defffc04 	addi	sp,sp,-16
  811280:	df000315 	stw	fp,12(sp)
  811284:	df000304 	addi	fp,sp,12
  811288:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81128c:	00bffa04 	movi	r2,-24
  811290:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811294:	e03ffd15 	stw	zero,-12(fp)
  811298:	00001906 	br	811300 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  81129c:	00802074 	movhi	r2,129
  8112a0:	108b1704 	addi	r2,r2,11356
  8112a4:	e0fffd17 	ldw	r3,-12(fp)
  8112a8:	18c00324 	muli	r3,r3,12
  8112ac:	10c5883a 	add	r2,r2,r3
  8112b0:	10800017 	ldw	r2,0(r2)
  8112b4:	10000f1e 	bne	r2,zero,8112f4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  8112b8:	00802074 	movhi	r2,129
  8112bc:	108b1704 	addi	r2,r2,11356
  8112c0:	e0fffd17 	ldw	r3,-12(fp)
  8112c4:	18c00324 	muli	r3,r3,12
  8112c8:	10c5883a 	add	r2,r2,r3
  8112cc:	e0ffff17 	ldw	r3,-4(fp)
  8112d0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8112d4:	d0e00a17 	ldw	r3,-32728(gp)
  8112d8:	e0bffd17 	ldw	r2,-12(fp)
  8112dc:	1880020e 	bge	r3,r2,8112e8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  8112e0:	e0bffd17 	ldw	r2,-12(fp)
  8112e4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  8112e8:	e0bffd17 	ldw	r2,-12(fp)
  8112ec:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  8112f0:	00000606 	br	81130c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8112f4:	e0bffd17 	ldw	r2,-12(fp)
  8112f8:	10800044 	addi	r2,r2,1
  8112fc:	e0bffd15 	stw	r2,-12(fp)
  811300:	e0bffd17 	ldw	r2,-12(fp)
  811304:	10800810 	cmplti	r2,r2,32
  811308:	103fe41e 	bne	r2,zero,81129c <__alt_mem_onchip_mem+0xff80929c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  81130c:	e0bffe17 	ldw	r2,-8(fp)
}
  811310:	e037883a 	mov	sp,fp
  811314:	df000017 	ldw	fp,0(sp)
  811318:	dec00104 	addi	sp,sp,4
  81131c:	f800283a 	ret

00811320 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  811320:	defffe04 	addi	sp,sp,-8
  811324:	dfc00115 	stw	ra,4(sp)
  811328:	df000015 	stw	fp,0(sp)
  81132c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  811330:	01440004 	movi	r5,4096
  811334:	0009883a 	mov	r4,zero
  811338:	08118e00 	call	8118e0 <alt_icache_flush>
#endif
}
  81133c:	0001883a 	nop
  811340:	e037883a 	mov	sp,fp
  811344:	dfc00117 	ldw	ra,4(sp)
  811348:	df000017 	ldw	fp,0(sp)
  81134c:	dec00204 	addi	sp,sp,8
  811350:	f800283a 	ret

00811354 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811354:	defff904 	addi	sp,sp,-28
  811358:	dfc00615 	stw	ra,24(sp)
  81135c:	df000515 	stw	fp,20(sp)
  811360:	df000504 	addi	fp,sp,20
  811364:	e13ffc15 	stw	r4,-16(fp)
  811368:	e17ffd15 	stw	r5,-12(fp)
  81136c:	e1bffe15 	stw	r6,-8(fp)
  811370:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  811374:	e0800217 	ldw	r2,8(fp)
  811378:	d8800015 	stw	r2,0(sp)
  81137c:	e1ffff17 	ldw	r7,-4(fp)
  811380:	e1bffe17 	ldw	r6,-8(fp)
  811384:	e17ffd17 	ldw	r5,-12(fp)
  811388:	e13ffc17 	ldw	r4,-16(fp)
  81138c:	08115040 	call	811504 <alt_iic_isr_register>
}  
  811390:	e037883a 	mov	sp,fp
  811394:	dfc00117 	ldw	ra,4(sp)
  811398:	df000017 	ldw	fp,0(sp)
  81139c:	dec00204 	addi	sp,sp,8
  8113a0:	f800283a 	ret

008113a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8113a4:	defff904 	addi	sp,sp,-28
  8113a8:	df000615 	stw	fp,24(sp)
  8113ac:	df000604 	addi	fp,sp,24
  8113b0:	e13ffe15 	stw	r4,-8(fp)
  8113b4:	e17fff15 	stw	r5,-4(fp)
  8113b8:	e0bfff17 	ldw	r2,-4(fp)
  8113bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8113c0:	0005303a 	rdctl	r2,status
  8113c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8113c8:	e0fffb17 	ldw	r3,-20(fp)
  8113cc:	00bfff84 	movi	r2,-2
  8113d0:	1884703a 	and	r2,r3,r2
  8113d4:	1001703a 	wrctl	status,r2
  
  return context;
  8113d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8113dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  8113e0:	00c00044 	movi	r3,1
  8113e4:	e0bffa17 	ldw	r2,-24(fp)
  8113e8:	1884983a 	sll	r2,r3,r2
  8113ec:	1007883a 	mov	r3,r2
  8113f0:	d0a75b17 	ldw	r2,-25236(gp)
  8113f4:	1884b03a 	or	r2,r3,r2
  8113f8:	d0a75b15 	stw	r2,-25236(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8113fc:	d0a75b17 	ldw	r2,-25236(gp)
  811400:	100170fa 	wrctl	ienable,r2
  811404:	e0bffc17 	ldw	r2,-16(fp)
  811408:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81140c:	e0bffd17 	ldw	r2,-12(fp)
  811410:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  811414:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  811418:	0001883a 	nop
}
  81141c:	e037883a 	mov	sp,fp
  811420:	df000017 	ldw	fp,0(sp)
  811424:	dec00104 	addi	sp,sp,4
  811428:	f800283a 	ret

0081142c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  81142c:	defff904 	addi	sp,sp,-28
  811430:	df000615 	stw	fp,24(sp)
  811434:	df000604 	addi	fp,sp,24
  811438:	e13ffe15 	stw	r4,-8(fp)
  81143c:	e17fff15 	stw	r5,-4(fp)
  811440:	e0bfff17 	ldw	r2,-4(fp)
  811444:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811448:	0005303a 	rdctl	r2,status
  81144c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811450:	e0fffb17 	ldw	r3,-20(fp)
  811454:	00bfff84 	movi	r2,-2
  811458:	1884703a 	and	r2,r3,r2
  81145c:	1001703a 	wrctl	status,r2
  
  return context;
  811460:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  811464:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  811468:	00c00044 	movi	r3,1
  81146c:	e0bffa17 	ldw	r2,-24(fp)
  811470:	1884983a 	sll	r2,r3,r2
  811474:	0084303a 	nor	r2,zero,r2
  811478:	1007883a 	mov	r3,r2
  81147c:	d0a75b17 	ldw	r2,-25236(gp)
  811480:	1884703a 	and	r2,r3,r2
  811484:	d0a75b15 	stw	r2,-25236(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811488:	d0a75b17 	ldw	r2,-25236(gp)
  81148c:	100170fa 	wrctl	ienable,r2
  811490:	e0bffc17 	ldw	r2,-16(fp)
  811494:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811498:	e0bffd17 	ldw	r2,-12(fp)
  81149c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8114a0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  8114a4:	0001883a 	nop
}
  8114a8:	e037883a 	mov	sp,fp
  8114ac:	df000017 	ldw	fp,0(sp)
  8114b0:	dec00104 	addi	sp,sp,4
  8114b4:	f800283a 	ret

008114b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8114b8:	defffc04 	addi	sp,sp,-16
  8114bc:	df000315 	stw	fp,12(sp)
  8114c0:	df000304 	addi	fp,sp,12
  8114c4:	e13ffe15 	stw	r4,-8(fp)
  8114c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8114cc:	000530fa 	rdctl	r2,ienable
  8114d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8114d4:	00c00044 	movi	r3,1
  8114d8:	e0bfff17 	ldw	r2,-4(fp)
  8114dc:	1884983a 	sll	r2,r3,r2
  8114e0:	1007883a 	mov	r3,r2
  8114e4:	e0bffd17 	ldw	r2,-12(fp)
  8114e8:	1884703a 	and	r2,r3,r2
  8114ec:	1004c03a 	cmpne	r2,r2,zero
  8114f0:	10803fcc 	andi	r2,r2,255
}
  8114f4:	e037883a 	mov	sp,fp
  8114f8:	df000017 	ldw	fp,0(sp)
  8114fc:	dec00104 	addi	sp,sp,4
  811500:	f800283a 	ret

00811504 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811504:	defff504 	addi	sp,sp,-44
  811508:	dfc00a15 	stw	ra,40(sp)
  81150c:	df000915 	stw	fp,36(sp)
  811510:	df000904 	addi	fp,sp,36
  811514:	e13ffc15 	stw	r4,-16(fp)
  811518:	e17ffd15 	stw	r5,-12(fp)
  81151c:	e1bffe15 	stw	r6,-8(fp)
  811520:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  811524:	00bffa84 	movi	r2,-22
  811528:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  81152c:	e0bffd17 	ldw	r2,-12(fp)
  811530:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  811534:	e0bff817 	ldw	r2,-32(fp)
  811538:	10800808 	cmpgei	r2,r2,32
  81153c:	1000271e 	bne	r2,zero,8115dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811540:	0005303a 	rdctl	r2,status
  811544:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811548:	e0fffb17 	ldw	r3,-20(fp)
  81154c:	00bfff84 	movi	r2,-2
  811550:	1884703a 	and	r2,r3,r2
  811554:	1001703a 	wrctl	status,r2
  
  return context;
  811558:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  81155c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  811560:	00802074 	movhi	r2,129
  811564:	10977a04 	addi	r2,r2,24040
  811568:	e0fff817 	ldw	r3,-32(fp)
  81156c:	180690fa 	slli	r3,r3,3
  811570:	10c5883a 	add	r2,r2,r3
  811574:	e0fffe17 	ldw	r3,-8(fp)
  811578:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  81157c:	00802074 	movhi	r2,129
  811580:	10977a04 	addi	r2,r2,24040
  811584:	e0fff817 	ldw	r3,-32(fp)
  811588:	180690fa 	slli	r3,r3,3
  81158c:	10c5883a 	add	r2,r2,r3
  811590:	10800104 	addi	r2,r2,4
  811594:	e0ffff17 	ldw	r3,-4(fp)
  811598:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  81159c:	e0bffe17 	ldw	r2,-8(fp)
  8115a0:	10000526 	beq	r2,zero,8115b8 <alt_iic_isr_register+0xb4>
  8115a4:	e0bff817 	ldw	r2,-32(fp)
  8115a8:	100b883a 	mov	r5,r2
  8115ac:	e13ffc17 	ldw	r4,-16(fp)
  8115b0:	08113a40 	call	8113a4 <alt_ic_irq_enable>
  8115b4:	00000406 	br	8115c8 <alt_iic_isr_register+0xc4>
  8115b8:	e0bff817 	ldw	r2,-32(fp)
  8115bc:	100b883a 	mov	r5,r2
  8115c0:	e13ffc17 	ldw	r4,-16(fp)
  8115c4:	081142c0 	call	81142c <alt_ic_irq_disable>
  8115c8:	e0bff715 	stw	r2,-36(fp)
  8115cc:	e0bffa17 	ldw	r2,-24(fp)
  8115d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8115d4:	e0bff917 	ldw	r2,-28(fp)
  8115d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8115dc:	e0bff717 	ldw	r2,-36(fp)
}
  8115e0:	e037883a 	mov	sp,fp
  8115e4:	dfc00117 	ldw	ra,4(sp)
  8115e8:	df000017 	ldw	fp,0(sp)
  8115ec:	dec00204 	addi	sp,sp,8
  8115f0:	f800283a 	ret

008115f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8115f4:	defff904 	addi	sp,sp,-28
  8115f8:	dfc00615 	stw	ra,24(sp)
  8115fc:	df000515 	stw	fp,20(sp)
  811600:	df000504 	addi	fp,sp,20
  811604:	e13ffc15 	stw	r4,-16(fp)
  811608:	e17ffd15 	stw	r5,-12(fp)
  81160c:	e1bffe15 	stw	r6,-8(fp)
  811610:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  811614:	e1bfff17 	ldw	r6,-4(fp)
  811618:	e17ffe17 	ldw	r5,-8(fp)
  81161c:	e13ffd17 	ldw	r4,-12(fp)
  811620:	080e4700 	call	80e470 <open>
  811624:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  811628:	e0bffb17 	ldw	r2,-20(fp)
  81162c:	10001c16 	blt	r2,zero,8116a0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  811630:	00802074 	movhi	r2,129
  811634:	108b1704 	addi	r2,r2,11356
  811638:	e0fffb17 	ldw	r3,-20(fp)
  81163c:	18c00324 	muli	r3,r3,12
  811640:	10c5883a 	add	r2,r2,r3
  811644:	10c00017 	ldw	r3,0(r2)
  811648:	e0bffc17 	ldw	r2,-16(fp)
  81164c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  811650:	00802074 	movhi	r2,129
  811654:	108b1704 	addi	r2,r2,11356
  811658:	e0fffb17 	ldw	r3,-20(fp)
  81165c:	18c00324 	muli	r3,r3,12
  811660:	10c5883a 	add	r2,r2,r3
  811664:	10800104 	addi	r2,r2,4
  811668:	10c00017 	ldw	r3,0(r2)
  81166c:	e0bffc17 	ldw	r2,-16(fp)
  811670:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  811674:	00802074 	movhi	r2,129
  811678:	108b1704 	addi	r2,r2,11356
  81167c:	e0fffb17 	ldw	r3,-20(fp)
  811680:	18c00324 	muli	r3,r3,12
  811684:	10c5883a 	add	r2,r2,r3
  811688:	10800204 	addi	r2,r2,8
  81168c:	10c00017 	ldw	r3,0(r2)
  811690:	e0bffc17 	ldw	r2,-16(fp)
  811694:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  811698:	e13ffb17 	ldw	r4,-20(fp)
  81169c:	080e6fc0 	call	80e6fc <alt_release_fd>
  }
} 
  8116a0:	0001883a 	nop
  8116a4:	e037883a 	mov	sp,fp
  8116a8:	dfc00117 	ldw	ra,4(sp)
  8116ac:	df000017 	ldw	fp,0(sp)
  8116b0:	dec00204 	addi	sp,sp,8
  8116b4:	f800283a 	ret

008116b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8116b8:	defffb04 	addi	sp,sp,-20
  8116bc:	dfc00415 	stw	ra,16(sp)
  8116c0:	df000315 	stw	fp,12(sp)
  8116c4:	df000304 	addi	fp,sp,12
  8116c8:	e13ffd15 	stw	r4,-12(fp)
  8116cc:	e17ffe15 	stw	r5,-8(fp)
  8116d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8116d4:	01c07fc4 	movi	r7,511
  8116d8:	01800044 	movi	r6,1
  8116dc:	e17ffd17 	ldw	r5,-12(fp)
  8116e0:	01002074 	movhi	r4,129
  8116e4:	210b1a04 	addi	r4,r4,11368
  8116e8:	08115f40 	call	8115f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8116ec:	01c07fc4 	movi	r7,511
  8116f0:	000d883a 	mov	r6,zero
  8116f4:	e17ffe17 	ldw	r5,-8(fp)
  8116f8:	01002074 	movhi	r4,129
  8116fc:	210b1704 	addi	r4,r4,11356
  811700:	08115f40 	call	8115f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  811704:	01c07fc4 	movi	r7,511
  811708:	01800044 	movi	r6,1
  81170c:	e17fff17 	ldw	r5,-4(fp)
  811710:	01002074 	movhi	r4,129
  811714:	210b1d04 	addi	r4,r4,11380
  811718:	08115f40 	call	8115f4 <alt_open_fd>
}  
  81171c:	0001883a 	nop
  811720:	e037883a 	mov	sp,fp
  811724:	dfc00117 	ldw	ra,4(sp)
  811728:	df000017 	ldw	fp,0(sp)
  81172c:	dec00204 	addi	sp,sp,8
  811730:	f800283a 	ret

00811734 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  811734:	defffd04 	addi	sp,sp,-12
  811738:	dfc00215 	stw	ra,8(sp)
  81173c:	df000115 	stw	fp,4(sp)
  811740:	df000104 	addi	fp,sp,4
  811744:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  811748:	e13fff17 	ldw	r4,-4(fp)
  81174c:	08117880 	call	811788 <alt_busy_sleep>
}
  811750:	e037883a 	mov	sp,fp
  811754:	dfc00117 	ldw	ra,4(sp)
  811758:	df000017 	ldw	fp,0(sp)
  81175c:	dec00204 	addi	sp,sp,8
  811760:	f800283a 	ret

00811764 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  811764:	deffff04 	addi	sp,sp,-4
  811768:	df000015 	stw	fp,0(sp)
  81176c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  811770:	000170fa 	wrctl	ienable,zero
}
  811774:	0001883a 	nop
  811778:	e037883a 	mov	sp,fp
  81177c:	df000017 	ldw	fp,0(sp)
  811780:	dec00104 	addi	sp,sp,4
  811784:	f800283a 	ret

00811788 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  811788:	defffa04 	addi	sp,sp,-24
  81178c:	dfc00515 	stw	ra,20(sp)
  811790:	df000415 	stw	fp,16(sp)
  811794:	df000404 	addi	fp,sp,16
  811798:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  81179c:	008000c4 	movi	r2,3
  8117a0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  8117a4:	e0fffd17 	ldw	r3,-12(fp)
  8117a8:	008003f4 	movhi	r2,15
  8117ac:	10909004 	addi	r2,r2,16960
  8117b0:	1885383a 	mul	r2,r3,r2
  8117b4:	100b883a 	mov	r5,r2
  8117b8:	0100bef4 	movhi	r4,763
  8117bc:	213c2004 	addi	r4,r4,-3968
  8117c0:	080b3dc0 	call	80b3dc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  8117c4:	100b883a 	mov	r5,r2
  8117c8:	01200034 	movhi	r4,32768
  8117cc:	213fffc4 	addi	r4,r4,-1
  8117d0:	080b3dc0 	call	80b3dc <__udivsi3>
  8117d4:	100b883a 	mov	r5,r2
  8117d8:	e13fff17 	ldw	r4,-4(fp)
  8117dc:	080b3dc0 	call	80b3dc <__udivsi3>
  8117e0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8117e4:	e0bffe17 	ldw	r2,-8(fp)
  8117e8:	10002a26 	beq	r2,zero,811894 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  8117ec:	e03ffc15 	stw	zero,-16(fp)
  8117f0:	00001706 	br	811850 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8117f4:	00a00034 	movhi	r2,32768
  8117f8:	10bfffc4 	addi	r2,r2,-1
  8117fc:	10bfffc4 	addi	r2,r2,-1
  811800:	103ffe1e 	bne	r2,zero,8117fc <__alt_mem_onchip_mem+0xff8097fc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  811804:	e0fffd17 	ldw	r3,-12(fp)
  811808:	008003f4 	movhi	r2,15
  81180c:	10909004 	addi	r2,r2,16960
  811810:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  811814:	100b883a 	mov	r5,r2
  811818:	0100bef4 	movhi	r4,763
  81181c:	213c2004 	addi	r4,r4,-3968
  811820:	080b3dc0 	call	80b3dc <__udivsi3>
  811824:	100b883a 	mov	r5,r2
  811828:	01200034 	movhi	r4,32768
  81182c:	213fffc4 	addi	r4,r4,-1
  811830:	080b3dc0 	call	80b3dc <__udivsi3>
  811834:	1007883a 	mov	r3,r2
  811838:	e0bfff17 	ldw	r2,-4(fp)
  81183c:	10c5c83a 	sub	r2,r2,r3
  811840:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  811844:	e0bffc17 	ldw	r2,-16(fp)
  811848:	10800044 	addi	r2,r2,1
  81184c:	e0bffc15 	stw	r2,-16(fp)
  811850:	e0fffc17 	ldw	r3,-16(fp)
  811854:	e0bffe17 	ldw	r2,-8(fp)
  811858:	18bfe616 	blt	r3,r2,8117f4 <__alt_mem_onchip_mem+0xff8097f4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  81185c:	e0fffd17 	ldw	r3,-12(fp)
  811860:	008003f4 	movhi	r2,15
  811864:	10909004 	addi	r2,r2,16960
  811868:	1885383a 	mul	r2,r3,r2
  81186c:	100b883a 	mov	r5,r2
  811870:	0100bef4 	movhi	r4,763
  811874:	213c2004 	addi	r4,r4,-3968
  811878:	080b3dc0 	call	80b3dc <__udivsi3>
  81187c:	1007883a 	mov	r3,r2
  811880:	e0bfff17 	ldw	r2,-4(fp)
  811884:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  811888:	10bfffc4 	addi	r2,r2,-1
  81188c:	103ffe1e 	bne	r2,zero,811888 <__alt_mem_onchip_mem+0xff809888>
  811890:	00000d06 	br	8118c8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  811894:	e0fffd17 	ldw	r3,-12(fp)
  811898:	008003f4 	movhi	r2,15
  81189c:	10909004 	addi	r2,r2,16960
  8118a0:	1885383a 	mul	r2,r3,r2
  8118a4:	100b883a 	mov	r5,r2
  8118a8:	0100bef4 	movhi	r4,763
  8118ac:	213c2004 	addi	r4,r4,-3968
  8118b0:	080b3dc0 	call	80b3dc <__udivsi3>
  8118b4:	1007883a 	mov	r3,r2
  8118b8:	e0bfff17 	ldw	r2,-4(fp)
  8118bc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8118c0:	10bfffc4 	addi	r2,r2,-1
  8118c4:	00bffe16 	blt	zero,r2,8118c0 <__alt_mem_onchip_mem+0xff8098c0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8118c8:	0005883a 	mov	r2,zero
}
  8118cc:	e037883a 	mov	sp,fp
  8118d0:	dfc00117 	ldw	ra,4(sp)
  8118d4:	df000017 	ldw	fp,0(sp)
  8118d8:	dec00204 	addi	sp,sp,8
  8118dc:	f800283a 	ret

008118e0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8118e0:	defffb04 	addi	sp,sp,-20
  8118e4:	df000415 	stw	fp,16(sp)
  8118e8:	df000404 	addi	fp,sp,16
  8118ec:	e13ffe15 	stw	r4,-8(fp)
  8118f0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8118f4:	e0bfff17 	ldw	r2,-4(fp)
  8118f8:	10840070 	cmpltui	r2,r2,4097
  8118fc:	1000021e 	bne	r2,zero,811908 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  811900:	00840004 	movi	r2,4096
  811904:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  811908:	e0fffe17 	ldw	r3,-8(fp)
  81190c:	e0bfff17 	ldw	r2,-4(fp)
  811910:	1885883a 	add	r2,r3,r2
  811914:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811918:	e0bffe17 	ldw	r2,-8(fp)
  81191c:	e0bffc15 	stw	r2,-16(fp)
  811920:	00000506 	br	811938 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  811924:	e0bffc17 	ldw	r2,-16(fp)
  811928:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81192c:	e0bffc17 	ldw	r2,-16(fp)
  811930:	10800804 	addi	r2,r2,32
  811934:	e0bffc15 	stw	r2,-16(fp)
  811938:	e0fffc17 	ldw	r3,-16(fp)
  81193c:	e0bffd17 	ldw	r2,-12(fp)
  811940:	18bff836 	bltu	r3,r2,811924 <__alt_mem_onchip_mem+0xff809924>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  811944:	e0bffe17 	ldw	r2,-8(fp)
  811948:	108007cc 	andi	r2,r2,31
  81194c:	10000226 	beq	r2,zero,811958 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  811950:	e0bffc17 	ldw	r2,-16(fp)
  811954:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  811958:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81195c:	0001883a 	nop
  811960:	e037883a 	mov	sp,fp
  811964:	df000017 	ldw	fp,0(sp)
  811968:	dec00104 	addi	sp,sp,4
  81196c:	f800283a 	ret

00811970 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  811970:	defffe04 	addi	sp,sp,-8
  811974:	df000115 	stw	fp,4(sp)
  811978:	df000104 	addi	fp,sp,4
  81197c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  811980:	e0bfff17 	ldw	r2,-4(fp)
  811984:	10bffe84 	addi	r2,r2,-6
  811988:	10c00428 	cmpgeui	r3,r2,16
  81198c:	18001a1e 	bne	r3,zero,8119f8 <alt_exception_cause_generated_bad_addr+0x88>
  811990:	100690ba 	slli	r3,r2,2
  811994:	00802074 	movhi	r2,129
  811998:	10866a04 	addi	r2,r2,6568
  81199c:	1885883a 	add	r2,r3,r2
  8119a0:	10800017 	ldw	r2,0(r2)
  8119a4:	1000683a 	jmp	r2
  8119a8:	008119e8 	cmpgeui	r2,zero,1127
  8119ac:	008119e8 	cmpgeui	r2,zero,1127
  8119b0:	008119f8 	rdprs	r2,zero,1127
  8119b4:	008119f8 	rdprs	r2,zero,1127
  8119b8:	008119f8 	rdprs	r2,zero,1127
  8119bc:	008119e8 	cmpgeui	r2,zero,1127
  8119c0:	008119f0 	cmpltui	r2,zero,1127
  8119c4:	008119f8 	rdprs	r2,zero,1127
  8119c8:	008119e8 	cmpgeui	r2,zero,1127
  8119cc:	008119e8 	cmpgeui	r2,zero,1127
  8119d0:	008119f8 	rdprs	r2,zero,1127
  8119d4:	008119e8 	cmpgeui	r2,zero,1127
  8119d8:	008119f0 	cmpltui	r2,zero,1127
  8119dc:	008119f8 	rdprs	r2,zero,1127
  8119e0:	008119f8 	rdprs	r2,zero,1127
  8119e4:	008119e8 	cmpgeui	r2,zero,1127
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  8119e8:	00800044 	movi	r2,1
  8119ec:	00000306 	br	8119fc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8119f0:	0005883a 	mov	r2,zero
  8119f4:	00000106 	br	8119fc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  8119f8:	0005883a 	mov	r2,zero
  }
}
  8119fc:	e037883a 	mov	sp,fp
  811a00:	df000017 	ldw	fp,0(sp)
  811a04:	dec00104 	addi	sp,sp,4
  811a08:	f800283a 	ret

00811a0c <atexit>:
  811a0c:	200b883a 	mov	r5,r4
  811a10:	000f883a 	mov	r7,zero
  811a14:	000d883a 	mov	r6,zero
  811a18:	0009883a 	mov	r4,zero
  811a1c:	0811ad41 	jmpi	811ad4 <__register_exitproc>

00811a20 <exit>:
  811a20:	defffe04 	addi	sp,sp,-8
  811a24:	000b883a 	mov	r5,zero
  811a28:	dc000015 	stw	r16,0(sp)
  811a2c:	dfc00115 	stw	ra,4(sp)
  811a30:	2021883a 	mov	r16,r4
  811a34:	0811bec0 	call	811bec <__call_exitprocs>
  811a38:	00802074 	movhi	r2,129
  811a3c:	10900804 	addi	r2,r2,16416
  811a40:	11000017 	ldw	r4,0(r2)
  811a44:	20800f17 	ldw	r2,60(r4)
  811a48:	10000126 	beq	r2,zero,811a50 <exit+0x30>
  811a4c:	103ee83a 	callr	r2
  811a50:	8009883a 	mov	r4,r16
  811a54:	0811d6c0 	call	811d6c <_exit>

00811a58 <memcmp>:
  811a58:	01c000c4 	movi	r7,3
  811a5c:	3980192e 	bgeu	r7,r6,811ac4 <memcmp+0x6c>
  811a60:	2144b03a 	or	r2,r4,r5
  811a64:	11c4703a 	and	r2,r2,r7
  811a68:	10000f26 	beq	r2,zero,811aa8 <memcmp+0x50>
  811a6c:	20800003 	ldbu	r2,0(r4)
  811a70:	28c00003 	ldbu	r3,0(r5)
  811a74:	10c0151e 	bne	r2,r3,811acc <memcmp+0x74>
  811a78:	31bfff84 	addi	r6,r6,-2
  811a7c:	01ffffc4 	movi	r7,-1
  811a80:	00000406 	br	811a94 <memcmp+0x3c>
  811a84:	20800003 	ldbu	r2,0(r4)
  811a88:	28c00003 	ldbu	r3,0(r5)
  811a8c:	31bfffc4 	addi	r6,r6,-1
  811a90:	10c00e1e 	bne	r2,r3,811acc <memcmp+0x74>
  811a94:	21000044 	addi	r4,r4,1
  811a98:	29400044 	addi	r5,r5,1
  811a9c:	31fff91e 	bne	r6,r7,811a84 <__alt_mem_onchip_mem+0xff809a84>
  811aa0:	0005883a 	mov	r2,zero
  811aa4:	f800283a 	ret
  811aa8:	20c00017 	ldw	r3,0(r4)
  811aac:	28800017 	ldw	r2,0(r5)
  811ab0:	18bfee1e 	bne	r3,r2,811a6c <__alt_mem_onchip_mem+0xff809a6c>
  811ab4:	31bfff04 	addi	r6,r6,-4
  811ab8:	21000104 	addi	r4,r4,4
  811abc:	29400104 	addi	r5,r5,4
  811ac0:	39bff936 	bltu	r7,r6,811aa8 <__alt_mem_onchip_mem+0xff809aa8>
  811ac4:	303fe91e 	bne	r6,zero,811a6c <__alt_mem_onchip_mem+0xff809a6c>
  811ac8:	003ff506 	br	811aa0 <__alt_mem_onchip_mem+0xff809aa0>
  811acc:	10c5c83a 	sub	r2,r2,r3
  811ad0:	f800283a 	ret

00811ad4 <__register_exitproc>:
  811ad4:	defffa04 	addi	sp,sp,-24
  811ad8:	dc000315 	stw	r16,12(sp)
  811adc:	04002074 	movhi	r16,129
  811ae0:	84100804 	addi	r16,r16,16416
  811ae4:	80c00017 	ldw	r3,0(r16)
  811ae8:	dc400415 	stw	r17,16(sp)
  811aec:	dfc00515 	stw	ra,20(sp)
  811af0:	18805217 	ldw	r2,328(r3)
  811af4:	2023883a 	mov	r17,r4
  811af8:	10003726 	beq	r2,zero,811bd8 <__register_exitproc+0x104>
  811afc:	10c00117 	ldw	r3,4(r2)
  811b00:	010007c4 	movi	r4,31
  811b04:	20c00e16 	blt	r4,r3,811b40 <__register_exitproc+0x6c>
  811b08:	1a000044 	addi	r8,r3,1
  811b0c:	8800221e 	bne	r17,zero,811b98 <__register_exitproc+0xc4>
  811b10:	18c00084 	addi	r3,r3,2
  811b14:	18c7883a 	add	r3,r3,r3
  811b18:	18c7883a 	add	r3,r3,r3
  811b1c:	12000115 	stw	r8,4(r2)
  811b20:	10c7883a 	add	r3,r2,r3
  811b24:	19400015 	stw	r5,0(r3)
  811b28:	0005883a 	mov	r2,zero
  811b2c:	dfc00517 	ldw	ra,20(sp)
  811b30:	dc400417 	ldw	r17,16(sp)
  811b34:	dc000317 	ldw	r16,12(sp)
  811b38:	dec00604 	addi	sp,sp,24
  811b3c:	f800283a 	ret
  811b40:	00800034 	movhi	r2,0
  811b44:	10800004 	addi	r2,r2,0
  811b48:	10002626 	beq	r2,zero,811be4 <__register_exitproc+0x110>
  811b4c:	01006404 	movi	r4,400
  811b50:	d9400015 	stw	r5,0(sp)
  811b54:	d9800115 	stw	r6,4(sp)
  811b58:	d9c00215 	stw	r7,8(sp)
  811b5c:	00000000 	call	0 <__reset-0x800000>
  811b60:	d9400017 	ldw	r5,0(sp)
  811b64:	d9800117 	ldw	r6,4(sp)
  811b68:	d9c00217 	ldw	r7,8(sp)
  811b6c:	10001d26 	beq	r2,zero,811be4 <__register_exitproc+0x110>
  811b70:	81000017 	ldw	r4,0(r16)
  811b74:	10000115 	stw	zero,4(r2)
  811b78:	02000044 	movi	r8,1
  811b7c:	22405217 	ldw	r9,328(r4)
  811b80:	0007883a 	mov	r3,zero
  811b84:	12400015 	stw	r9,0(r2)
  811b88:	20805215 	stw	r2,328(r4)
  811b8c:	10006215 	stw	zero,392(r2)
  811b90:	10006315 	stw	zero,396(r2)
  811b94:	883fde26 	beq	r17,zero,811b10 <__alt_mem_onchip_mem+0xff809b10>
  811b98:	18c9883a 	add	r4,r3,r3
  811b9c:	2109883a 	add	r4,r4,r4
  811ba0:	1109883a 	add	r4,r2,r4
  811ba4:	21802215 	stw	r6,136(r4)
  811ba8:	01800044 	movi	r6,1
  811bac:	12406217 	ldw	r9,392(r2)
  811bb0:	30cc983a 	sll	r6,r6,r3
  811bb4:	4992b03a 	or	r9,r9,r6
  811bb8:	12406215 	stw	r9,392(r2)
  811bbc:	21c04215 	stw	r7,264(r4)
  811bc0:	01000084 	movi	r4,2
  811bc4:	893fd21e 	bne	r17,r4,811b10 <__alt_mem_onchip_mem+0xff809b10>
  811bc8:	11006317 	ldw	r4,396(r2)
  811bcc:	218cb03a 	or	r6,r4,r6
  811bd0:	11806315 	stw	r6,396(r2)
  811bd4:	003fce06 	br	811b10 <__alt_mem_onchip_mem+0xff809b10>
  811bd8:	18805304 	addi	r2,r3,332
  811bdc:	18805215 	stw	r2,328(r3)
  811be0:	003fc606 	br	811afc <__alt_mem_onchip_mem+0xff809afc>
  811be4:	00bfffc4 	movi	r2,-1
  811be8:	003fd006 	br	811b2c <__alt_mem_onchip_mem+0xff809b2c>

00811bec <__call_exitprocs>:
  811bec:	defff504 	addi	sp,sp,-44
  811bf0:	df000915 	stw	fp,36(sp)
  811bf4:	dd400615 	stw	r21,24(sp)
  811bf8:	dc800315 	stw	r18,12(sp)
  811bfc:	dfc00a15 	stw	ra,40(sp)
  811c00:	ddc00815 	stw	r23,32(sp)
  811c04:	dd800715 	stw	r22,28(sp)
  811c08:	dd000515 	stw	r20,20(sp)
  811c0c:	dcc00415 	stw	r19,16(sp)
  811c10:	dc400215 	stw	r17,8(sp)
  811c14:	dc000115 	stw	r16,4(sp)
  811c18:	d9000015 	stw	r4,0(sp)
  811c1c:	2839883a 	mov	fp,r5
  811c20:	04800044 	movi	r18,1
  811c24:	057fffc4 	movi	r21,-1
  811c28:	00802074 	movhi	r2,129
  811c2c:	10900804 	addi	r2,r2,16416
  811c30:	12000017 	ldw	r8,0(r2)
  811c34:	45005217 	ldw	r20,328(r8)
  811c38:	44c05204 	addi	r19,r8,328
  811c3c:	a0001c26 	beq	r20,zero,811cb0 <__call_exitprocs+0xc4>
  811c40:	a0800117 	ldw	r2,4(r20)
  811c44:	15ffffc4 	addi	r23,r2,-1
  811c48:	b8000d16 	blt	r23,zero,811c80 <__call_exitprocs+0x94>
  811c4c:	14000044 	addi	r16,r2,1
  811c50:	8421883a 	add	r16,r16,r16
  811c54:	8421883a 	add	r16,r16,r16
  811c58:	84402004 	addi	r17,r16,128
  811c5c:	a463883a 	add	r17,r20,r17
  811c60:	a421883a 	add	r16,r20,r16
  811c64:	e0001e26 	beq	fp,zero,811ce0 <__call_exitprocs+0xf4>
  811c68:	80804017 	ldw	r2,256(r16)
  811c6c:	e0801c26 	beq	fp,r2,811ce0 <__call_exitprocs+0xf4>
  811c70:	bdffffc4 	addi	r23,r23,-1
  811c74:	843fff04 	addi	r16,r16,-4
  811c78:	8c7fff04 	addi	r17,r17,-4
  811c7c:	bd7ff91e 	bne	r23,r21,811c64 <__alt_mem_onchip_mem+0xff809c64>
  811c80:	00800034 	movhi	r2,0
  811c84:	10800004 	addi	r2,r2,0
  811c88:	10000926 	beq	r2,zero,811cb0 <__call_exitprocs+0xc4>
  811c8c:	a0800117 	ldw	r2,4(r20)
  811c90:	1000301e 	bne	r2,zero,811d54 <__call_exitprocs+0x168>
  811c94:	a0800017 	ldw	r2,0(r20)
  811c98:	10003226 	beq	r2,zero,811d64 <__call_exitprocs+0x178>
  811c9c:	a009883a 	mov	r4,r20
  811ca0:	98800015 	stw	r2,0(r19)
  811ca4:	00000000 	call	0 <__reset-0x800000>
  811ca8:	9d000017 	ldw	r20,0(r19)
  811cac:	a03fe41e 	bne	r20,zero,811c40 <__alt_mem_onchip_mem+0xff809c40>
  811cb0:	dfc00a17 	ldw	ra,40(sp)
  811cb4:	df000917 	ldw	fp,36(sp)
  811cb8:	ddc00817 	ldw	r23,32(sp)
  811cbc:	dd800717 	ldw	r22,28(sp)
  811cc0:	dd400617 	ldw	r21,24(sp)
  811cc4:	dd000517 	ldw	r20,20(sp)
  811cc8:	dcc00417 	ldw	r19,16(sp)
  811ccc:	dc800317 	ldw	r18,12(sp)
  811cd0:	dc400217 	ldw	r17,8(sp)
  811cd4:	dc000117 	ldw	r16,4(sp)
  811cd8:	dec00b04 	addi	sp,sp,44
  811cdc:	f800283a 	ret
  811ce0:	a0800117 	ldw	r2,4(r20)
  811ce4:	80c00017 	ldw	r3,0(r16)
  811ce8:	10bfffc4 	addi	r2,r2,-1
  811cec:	15c01426 	beq	r2,r23,811d40 <__call_exitprocs+0x154>
  811cf0:	80000015 	stw	zero,0(r16)
  811cf4:	183fde26 	beq	r3,zero,811c70 <__alt_mem_onchip_mem+0xff809c70>
  811cf8:	95c8983a 	sll	r4,r18,r23
  811cfc:	a0806217 	ldw	r2,392(r20)
  811d00:	a5800117 	ldw	r22,4(r20)
  811d04:	2084703a 	and	r2,r4,r2
  811d08:	10000b26 	beq	r2,zero,811d38 <__call_exitprocs+0x14c>
  811d0c:	a0806317 	ldw	r2,396(r20)
  811d10:	2088703a 	and	r4,r4,r2
  811d14:	20000c1e 	bne	r4,zero,811d48 <__call_exitprocs+0x15c>
  811d18:	89400017 	ldw	r5,0(r17)
  811d1c:	d9000017 	ldw	r4,0(sp)
  811d20:	183ee83a 	callr	r3
  811d24:	a0800117 	ldw	r2,4(r20)
  811d28:	15bfbf1e 	bne	r2,r22,811c28 <__alt_mem_onchip_mem+0xff809c28>
  811d2c:	98800017 	ldw	r2,0(r19)
  811d30:	153fcf26 	beq	r2,r20,811c70 <__alt_mem_onchip_mem+0xff809c70>
  811d34:	003fbc06 	br	811c28 <__alt_mem_onchip_mem+0xff809c28>
  811d38:	183ee83a 	callr	r3
  811d3c:	003ff906 	br	811d24 <__alt_mem_onchip_mem+0xff809d24>
  811d40:	a5c00115 	stw	r23,4(r20)
  811d44:	003feb06 	br	811cf4 <__alt_mem_onchip_mem+0xff809cf4>
  811d48:	89000017 	ldw	r4,0(r17)
  811d4c:	183ee83a 	callr	r3
  811d50:	003ff406 	br	811d24 <__alt_mem_onchip_mem+0xff809d24>
  811d54:	a0800017 	ldw	r2,0(r20)
  811d58:	a027883a 	mov	r19,r20
  811d5c:	1029883a 	mov	r20,r2
  811d60:	003fb606 	br	811c3c <__alt_mem_onchip_mem+0xff809c3c>
  811d64:	0005883a 	mov	r2,zero
  811d68:	003ffb06 	br	811d58 <__alt_mem_onchip_mem+0xff809d58>

00811d6c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  811d6c:	defffd04 	addi	sp,sp,-12
  811d70:	df000215 	stw	fp,8(sp)
  811d74:	df000204 	addi	fp,sp,8
  811d78:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  811d7c:	0001883a 	nop
  811d80:	e0bfff17 	ldw	r2,-4(fp)
  811d84:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  811d88:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  811d8c:	10000226 	beq	r2,zero,811d98 <_exit+0x2c>
    ALT_SIM_FAIL();
  811d90:	002af070 	cmpltui	zero,zero,43969
  811d94:	00000106 	br	811d9c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  811d98:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  811d9c:	003fff06 	br	811d9c <__alt_mem_onchip_mem+0xff809d9c>
